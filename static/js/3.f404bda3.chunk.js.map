{"version":3,"sources":["AssetsUnderManagement/AssetsUnderManagement.js","DepositRedeem/DepositRedeem.module.scss","TwitterShareButton/TwitterShareButton.module.scss","Stats/StatsChart.js","Rebalance/Rebalance.js","utilities/components/DateRangeModal.js","ExecuteTransaction/ExecuteTransaction.js","Stats/Stats.js","Utils/Utils.js","FundsOverview/FundsOverview.js","CurveRedeem/CurveRedeem.js","TwitterShareButton/TwitterShareButton.js","utilities/components/ShareModal.js","DepositRedeem/DepositRedeem.js","EstimatedEarnings/EstimatedEarnings.js","AssetPage/AssetPage.js","CurveDeposit/CurveDeposit.js","PortfolioEquityCurve/PortfolioEquityCurve.js","FundsOverviewCurve/FundsOverviewCurve.js","CurveStrategy/CurveStrategy.js","utilities/components/WelcomeModal.js","utilities/components/MigrateModal.js","utilities/components/UpgradeModal.js","Dashboard/Dashboard.js"],"names":["AssetsUnderManagement","state","totalAUM","totalAUMEndOfYear","functionsUtil","this","setProps","props","FunctionsUtil","loadUtils","loadTotalAUM","prevProps","prevState","contractsInitialized","availableStrategies","JSON","stringify","getAggregatedStats","avgAPY","plus","times","div","setState","_this2","react__WEBPACK_IMPORTED_MODULE_9___default","a","createElement","rimble_ui__WEBPACK_IMPORTED_MODULE_10__","width","react_countup__WEBPACK_IMPORTED_MODULE_8___default","delay","decimals","decimal","separator","useEasing","duration","start","parseFloat","end","formattingFn","n","formatMoney","_ref2","countUpRef","style","counterStyle","display","color","whiteSpace","fontFamily","theme","fonts","counter","fontWeight","fontWeights","textAlign","isMobile","fontSize","fontSizes","ref","subtitle","_Title_Title__WEBPACK_IMPORTED_MODULE_7__","Object","assign","subtitleProps","span","alignItems","justifyContent","loaderAlign","size","Component","module","exports","input","twitterIcon","StatsChart","chartProps","chartType","chartData","chartWidth","parseAum","value","parseInt","toFixed","_this","selectedToken","loadApiData","_callee3","CustomTooltipRow","CustomTooltip","maxGridLines","apiResults","apiResults_unfiltered","totalItems","protocols","versionInfo","keys","tempData","gridYStep","itemIndex","gridYValues","maxChartValue","axisBottomIndex","idleChartData","firstIdleBlock","divergingData","startTimestamp","endTimestamp","timestamp","date","lastRow","maxRange","i","_i","_i2","_i3","prevValue","_i4","prevApr","prevData","startBalance","currentBalance","avgApy","_i5","firstTokenPrice","_i6","regenerator_default","wrap","_context3","prev","next","tokenConfig","chartMode","abrupt","react_default","index_es","mb","flexDirection","pr","flexBasis","flex","mr","height","borderRadius","backgroundColor","textTransform","label","dangerouslySetInnerHTML","__html","DashboardCard","key","point","id","cardProps","py","px","left","data","itemPos","xFormatted","children","length","globalConfigs","stats","versions","idleVersion","Line","t0","moment","_d","getTime","format","deposits","redeems","forEach","row","idleTokens","fixTokenDecimals","idleSupply","idleTokensPrev","eq","diff","minus","gte","Math","max","abs","values","filter","v","Bar","push","indexBy","enableLabel","minValue","maxValue","d","axisBottom","tickSize","legend","tickPadding","orient","legendOffset","legendPosition","tickValues","axisLeft","axisRight","tickRotation","abbreviateNumber","markers","axis","lineStyle","strokeOpacity","textStyle","fill","colors","transactions","action","deposit","legendOrientation","legendOffsetX","stroke","strokeDasharray","redeem","padding","labelTextColor","labelSkipWidth","labelSkipHeight","pointSize","useMesh","animate","pointLabel","curve","enableArea","enableSlices","enableGridX","enableGridY","pointBorderWidth","pointLabelYOffset","legends","dataFrom","itemWidth","itemHeight","translateX","translateY","symbolSize","itemsSpacing","direction","anchor","symbolShape","itemTextColor","effects","on","ticks","text","sansSerif","grid","line","lineChartStroke","tooltip","container","boxShadow","background","pointColor","from","modifiers","margin","top","right","bottom","strToMoment","indexValue","depositFormatted","redeemFormatted","tokens","hsl","join","map","idlePrice","aum","x","y","toString","p","j","protocolsData","protocolAllocation","protocolAddr","toLowerCase","address","z","BNify","rate","allocation","foundItem","item","pos","indexOf","allocations","name","undefined","xScale","type","xFormat","yFormat","yScale","stacked","showAdvanced","sliceTooltip","slideData","slice","points","serieId","serieColor","yFormatted","protocolName","protocolColor","protocolAllocationFormatted","protocolAllocationPerc","concat","protocolData","protocolPaused","foundProtocol","find","capitalize","tableCell","_ref3","borderCollapse","totalAllocation","reduce","accumulator","allocationPerc","_ref4","_ref5","idle","idleRate","protocolEarning","defiScore","isNaN","idleScore","apy","apr","days","earnings","earning","blocknumber","floor","additionalProtocols","additionalProtocol","protocolInfo","protocol","enabled","unshift","rateField","chartRow","baseProfit","firstProtocolData","firstProtocolBlock","pData","protocolRate","acc","field","idlePerformance","d1","rowData","protocolApy","tokenPrice","asyncForEach","_ref6","asyncToGenerator","mark","_callee2","lastRowData","lastTokenPrice","_context2","_ref7","_callee","tokenExchangeRate","tokenPriceFixed","lastYDiff","_context","price","lt","stop","_x2","apply","arguments","_x","showAdvancedChanged","apiResultsChanged","tokenChanged","componentDidMount","GenericChart","showLoader","parentId","parentIdHeight","Rebalance","loading","processing","rebalance","txHash","shouldRebalance","checkRebalance","sent","e","callback","callback_receipt","preventDefault","tx","error","eventData","eventCategory","eventAction","eventLabel","status","getTransactionError","sendGoogleAnalyticsEvent","window","toastProvider","addMessage","secondaryMessage","colorTheme","actionHref","actionText","variant","objectSpread","transactionHash","contractMethodSendWrapper","token","accountChanged","account","minHeight","FlexLoader","flexProps","loaderProps","textProps","ml","TxProgressBar","web3","waitText","endMessage","hash","mt","RoundButton","buttonProps","disabled","handleClick","DateRangeModal","quickSelection","ranges","startDate","Date","endDate","componentDidUpdate","selection","target","clone","subtract","closeModal","newState","handleSelect","startTimestampObj","endTimestampObj","_this3","isOpen","ModalCard","closeFunc","Header","title","Body","required","onChange","handleQuickSelect","bind","options","dist","minDate","maxDate","Footer","my","mx","onClick","React","ExecuteTransaction","txStatus","contractName","methodName","params","ExecuteComponent","parentProps","progressBarProps","cancelTransaction","execute","componentProps","Stats","delta","carouselMax","rebalances","buttonGroups","carouselIndex","statsVersions","minStartTime","govTokensPool","unlentBalance","carouselOffsetLeft","showRefreshIdleSpeed","dateRangeModalOpened","quickSelections","day","week","weeks","month","componentUnmounted","setDateRange","isSameOrAfter","isSame","add","isBefore","isAfter","maxEndDate","setStateSafe","toggleAdvancedCharts","setDateRangeModal","filterTokenData","r","setIdleVersion","isRisk","firstResult","lastResult","firstIdlePrice","lastIdlePrice","compoundInfo","firstCompoundData","lastCompoundData","compoundWithCOMPInfo","compoundAvgApr","firstCompoundPrice","lastCompoundPrice","compoundApr","includes","selectedStrategy","getTokenApiData","pop","convertTokenBalance","sum","compoundWithCOMP","compoundData","compoundRate","index","prevRow","prevTotalAllocation","hasRebalanced","prevP","prevAllocation","getGovTokenPool","getUnlentBalance","selectToken","strategy","setStrategyToken","changeToken","handleCarousel","$element","jQuery","position","loadParams","latestVersion","version","enabledStrategies","strategiesParams","versionInfoExtra","param","match","currentNetworkAvailableTokens","availableTokens","customToken","toUpperCase","getLatestAvailableVersion","getVersionInfo","newEndTimestampObj","newStartTimestampObj","initWeb3","document","innerHTML","body","appendChild","loadCarousel","strategyChanged","dateChanged","versionChanged","idleTokenEnabled","getGlobalConfig","apyLong","textSize","versionsOptions","enabledTokens","performanceTooltip","versionDefaultValue","Breadcrumb","showPathMobile","goToSection","path","GenericSelector","innerProps","defaultValue","AssetSelector","isInteractive","StatsCard","labelTooltip","VariationNumber","iconPos","iconSize","lineHeight","description","Stats_StatsChart","contracts","pb","pt","AllocationChart","src_Rebalance_Rebalance","pl","h4","RoundIconButton","iconName","transition","titleParentProps","components_DateRangeModal","strategies","statsTokens","statsProtocols","strategyInfo","Title","titlePostfix","AssetsList","cols","fields","mobile","overflow","desc","showTooltip","mainColor","rgb","hoverColor","isActive","src_ExecuteTransaction_ExecuteTransaction","Button","completed","Utils","SubComponent","selectedSubsection","subComponent","viewOnly","connectorName","selectedSection","route","directProps","toolProps","flexWrap","IconBox","maxWidth","icon","submenu","tool","toolIndex","image","src","FundsOverview","govTokensAprs","aggregatedValues","govTokensTotalApr","govTokensUserBalance","govTokensDistribution","govTokensTotalBalance","govTokensTotalAprTooltip","idleTokenUserDistribution","govTokensDistributionTooltip","govTokensTotalBalanceTooltip","idleGovToken","getIdleGovToken","govTokenAvailableTokens","Promise","all","getGovTokensAprs","getUserDistribution","getGovTokensUserBalances","loadAssetField","depositTimestamp","getAvgAPYStats","totBalance","govTokenBalance","govToken","balance","gt","totApr","govTokenApr","AssetField","fieldInfo","placement","message","PortfolioEquity","chartHeight","chartToken","frequencySeconds","getFrequencySeconds","component","Heading","h3","maxPrecision","govTokenIndex","tokenName","distributionFrequency","CurveRedeem","inputValue","maxSlippage","unevenAmounts","buttonDisabled","showMaxSlippage","redeemUnderlying","curveTokenConfig","curvePoolContract","curveSwapContract","curveTokenBalance","curveTokensAmounts","fastBalanceSelector","redeemUnevenAmounts","curveRedeemableIdleTokens","toggleUnevenAmounts","checkButtonDisabled","amount","changeInputValue","setFastBalanceSelector","setMaxSlippage","initToken","max_slippage","lte","normalizedAmount","normalizeTokenAmount","withdrawSlippage","curveIdleTokensAmounts","getCurveTokensAmounts","getCurveIdleTokensAmounts","getCurveSlippage","getCurveTokenPrice","curveTokenPrice","redeemableBalance","redeemUnevenAmountsChanged","setInputValue","inputChanged","maxSlippageChanged","tokenConfigChanged","calculateSlippage","loadSelectedTokenConfig","selectedPercentage","curveConfig","getCurvePoolContract","getCurveSwapContract","getCurveTokenBalance","getCurveRedeemableIdleTokens","getCurveAvailableTokens","callbackRedeem","txSucceeded","eventValue","callbackReceiptRedeem","_amount","min_amounts","console","log","coin_index","migrationParams","coinIndex","min_amount","showSlippage","curveTokenName","checked","showBalance","selectDestinationToken","SmartNumber","number","slippage","FastBalanceSelector","percentage","onMouseDown","failed","textOverflow","min","placeholder","border","divider","TwitterShareButton","share","parent","w","innerWidth","open","tweet","contrastColor","className","styles","ShareModal","getGlobalConfigs","analytics","google","events","escape","customText","confettiEnabled","react_confetti_default","zIndex","run","recycle","innerHeight","src_TwitterShareButton_TwitterShareButton","DepositRedeem","txError","tokenAPY","curveAPY","canRedeem","canDeposit","directMint","activeModal","showBuyFlow","maxUnlentPerc","tokenApproved","skipMigration","showRedeemFlow","contractPaused","canRedeemCurve","minAmountForMint","redeemGovTokens","canDepositCurve","actionProxyContract","migrationEnabled","componentMounted","redeemCurveEnabled","depositCurveBalance","depositCurveEnabled","showAdvancedOptions","depositCurveSlippage","metaTransactionsEnabled","minAmountForMintReached","setShowRedeemFlow","setShowBuyFlow","toggleShowAdvancedOptions","toggleSkipMigration","toggleRedeemCurve","toggleDepositCurve","toggleSkipMint","toggleRedeemGovTokens","toggleMetaTransactionsEnabled","resetModal","setActiveModal","approveContract","callbackApprove","callbackReceiptApprove","curveDepositContract","proxyContract","enableERC20","biconomy","checkTokenApproved","approveToken","approve","loadTokenInfo","_callee4","curveTokenEnabled","_context4","checkContractPaused","getCurveDepositContract","checkMigration","slicedToArray","tokenBalance","idleTokenBalance","boost","checkAction","loadAPY","_callee5","_context5","defineProperty","executeAction","_callee6","contractSendResult","callbackDeposit","callbackReceiptDeposit","curvePoolContractInfo","tokensToDeposit","amounts","minMintAmount","depositParams","_tokensToDeposit","depositMetaTransactionsEnabled","_depositParams","mintProxyContractInfo","mintProxyContract","_mintProxyContract$me","functionSignature","_skipMint","txData","idleTokenToRedeem","idleTokenPrice","_callbackRedeem","_callbackReceiptRedeem","redeemParams","_context6","getFastBalanceSelector","localStorage","setLocalStorage","lendingProcessing","lendAmount","genericError","getCurveAmounts","getCurveTokenAmount","integerValue","contract","methods","function","toConsumableArray","encodeABI","sendBiconomyTxWithPersonalSign","skipMintForDeposit","genericContractCall","_callee7","_context7","setAction","loadProxyContracts","actions","_ref10","_callee10","hasProxyContract","_context10","initContract","abi","approved","_x4","getTokenAprs","tokenAprs","getCurveAPY","tokenBalanceChanged","actionChanged","fastBalanceSelectorChanged","checkMinAmountForMint","depositCurveChanged","calculateCurveSlippage","showPoolPerc","convertedAmount","depositPerc","maxUnlentPercFormatted","govTokensDisabled","govTokensEnabled","skipMintForDepositEnabled","skipMintCheckboxEnabled","redeemGovTokenEnabled","metaTransactionsAvailable","useMetaTx","totalBalance","migrateText","migration","depositCurve","showDepositOptions","canPerformAction","showDepositCurve","showRedeemCurve","showActionFlow","showCurveSlippage","showRebalanceOption","showAdvancedDepositOptions","batchDepositInfo","batchDepositEnabled","batchDepositDepositEnabled","depositEnabled","showBatchDeposit","isMigrationTool","Migrate","migrateTextBefore","TransactionField","transaction","isDisabled","openTooltipModal","isRainbow","getWalletProvider","primary","href","govTokensBalance","tokenFeesPercentage","borderColor","minWidth","ConnectBox","src_CurveRedeem_CurveRedeem","BuyModal","showInline","availableMethods","buyToken","components_ShareModal","EstimatedEarnings","tokenApy","maxInputValue","loadChart","getTokenApy","earningsYear","amountMonth","amount3Months","amount6Months","amountYear","perc","monthColor","month3","month3Color","month6","month6Color","year","yearColor","labelTextColorModifiers","gridYValue","_ref","labels","showAPYDisclaimer","verticalAlign","AssetPage","tokenFees","availableGovTokens","getTokenFees","getTokenBalance","getUserTokenFees","getGovTokensUserTotalBalance","getTokenGovTokens","loadTokensInfo","transactionsChanged","userHasFunds","CardIconButton","src_DepositRedeem_DepositRedeem","src_FundsOverview_FundsOverview","src_EstimatedEarnings_EstimatedEarnings","TransactionsList","CurveDeposit","depositSlippage","migrationContract","curveTokensBalance","migrationSucceeded","migrationContractApproved","checkMigrationContractApproved","getMigrationParams","approveCallback","migrationCallback","idleTokenBalanceChanged","toMigrate","n_coins","underlyingBalanceToDeposit","getIdleTokenPrice","normalizeIdleTokenBalance","hasCurveTokens","PortfolioEquityCurve","chartwidth","loadChartData","quickDateSelectionChanged","quickDateSelection","getCurveTxs","curveTxs","tokensBalance","processedTxs","firstTxTimestamp","timeStamp","curveTokens","currentDate","prevBalances","prevTimestamp","minChartValue","aggregatedBalancesKeys","tokensBalancesPerDate","aggregatedBalance","currTimestamp","tokensData","foundBalances","tokensBalances","momentDate","filteredTokenData","filteredBalances","lastFilteredTx","lastTokenData","lastTx","lastTxBalance","formattedDate","aggregatedBalanceParsed","aggregatedBalances","balances","yFormatDecimals","daysCount","daysFrequency","ceil","areaOpacity","areaBaselineValue","ChartCustomTooltip","ChartCustomTooltipRow","tokenInfo","hex","formattedBalance","FundsOverviewCurve","compAPR","getCurveAvgBuyPrice","getCurveAvgSlippage","src_PortfolioEquityCurve_PortfolioEquityCurve","redeemBalance","depositBalance","curveZapContract","curveAvailableTokens","changeFromToken","setSelectedToken","baseToken","getSelectedToken","urlParams","param1","getCurveZapContract","updateAssetSelector","curveTokensToRedeem","src_CurveDeposit_CurveDeposit","src_FundsOverviewCurve_FundsOverviewCurve","enabledActions","WelcomeModal","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","email","subscribed","sendingForm","sendUserInfo","sendEmail","walletProvider","userInfo","provider","simpleIDPassUserInfo","setTimeout","err","handleSubmit","assertThisInitialized","handleValidation","axios","post","newsletterSubscription","endpoint","then","catch","walletAddress","lastLogin","getItem","parse","signedUp","parentNode","classList","onSubmit","green","Field","Input","outline","ButtonLoader","buttonText","isLoading","header_styles","gradientButton","MigrateModal","dontShowAgain","toggleDontShowAgain","removeStoredItem","migrate","tokenMigrationRoute","fieldProps","iconHeight","protocolsTokensBalances","minPrecision","UpgradeModal","_args3","convert","convertTool","tokensToMigrate","tokenKey","oldContractBalanceFormatted","oldIdleTokensToMigrate","newTokenConfig","Dashboard","menu","baseRoute","clickEvent","currentRoute","pageComponent","currentSection","showResetButton","timeoutId","modalTitle","modalContent","logout","setConnector","s","comingSoon","selected","bgColor","imageInactive","iconInactive","imageInactiveDark","iconInactiveDark","curveParams","CurveStrategy","u","isExternalLink","section","param2","section_is_strategy","param1_is_strategy","param1_is_token","param2_is_token","m","sectionRoute","subm","clearTimeout","setCurrentSection","loadMenu","accountInizialized","initAccount","initializeContracts","checkModals","prevParams","checkTokensToMigrate","checkWelcomeModal","checkProtocolsTokensBalances","showUpgradeModal","getStoredItem","getTokensToMigrate","getProtocolsTokensBalances","welcomeIsOpen","welcomeModalProps","currTime","lastTime","frequency","migrateModalEnabled","showMigrateModal","isDashboard","replace","newRoute","location","scrollTo","routeParts","PageComponent","menuRightBorder","borderRight","DashboardMenu","overflowY","overflowX","DashboardHeader","components_UpgradeModal","components_MigrateModal","TooltipModal","content","components_WelcomeModal","simpleID","network","current","initSimpleID","baseTokenName"],"mappings":"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","file":"static/js/3.f404bda3.chunk.js","sourcesContent":["import Title from '../Title/Title';\nimport CountUp from 'react-countup';\nimport React, { Component } from 'react';\nimport { Box, Flex, Text, Loader } from \"rimble-ui\";\nimport FunctionsUtil from '../utilities/FunctionsUtil';\n\nclass AssetsUnderManagement extends Component {\n\n  state = {\n    totalAUM:null,\n    totalAUMEndOfYear:null\n  }\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.loadTotalAUM();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const availableStrategiesChanged = !prevProps.availableStrategies && JSON.stringify(prevProps.availableStrategies) !== JSON.stringify(this.props.availableStrategies);\n    if (availableStrategiesChanged || contractsInitialized){\n      this.loadTotalAUM();\n    }\n  }\n\n  async loadTotalAUM(){\n\n    if (!this.props.availableStrategies || !this.props.contractsInitialized){\n      return true;\n    }\n\n    const {\n      avgAPY,\n      totalAUM\n    } = await this.functionsUtil.getAggregatedStats();\n\n    const totalAUMEndOfYear = totalAUM.plus(totalAUM.times(avgAPY.div(100)));\n\n    this.setState({\n      totalAUM,\n      totalAUMEndOfYear\n    });\n  }\n\n  render() {\n    return this.state.totalAUM ? (\n      <Box\n        width={1}\n      >\n        <CountUp\n          delay={0}\n          decimals={4}\n          decimal={'.'}\n          separator={''}\n          useEasing={false}\n          duration={31536000}\n          start={parseFloat(this.state.totalAUM)}\n          end={parseFloat(this.state.totalAUMEndOfYear)}\n          formattingFn={ n => '$ '+this.functionsUtil.formatMoney(n,4) }\n        >\n          {({ countUpRef, start }) => (\n            <span\n              style={ this.props.counterStyle ? this.props.counterStyle : {\n                display:'block',\n                color:'dark-gray',\n                whiteSpace:'nowrap',\n                fontFamily:this.props.theme.fonts.counter,\n                fontWeight:this.props.theme.fontWeights[5],\n                textAlign: this.props.isMobile ? 'center' : 'right',\n                fontSize: this.props.isMobile ? '1.6em' : this.props.theme.fontSizes[6]\n              }}\n              ref={countUpRef}\n            />\n          )}\n        </CountUp>\n        {\n          (typeof this.props.subtitle === 'undefined' || this.props.subtitle) && (\n            <Title\n              fontWeight={3}\n              fontSize={[2,2]}\n              color={'cellTitle'}\n              textAlign={['center','right']}\n              {...this.props.subtitleProps}\n            >\n              {\n                this.props.subtitle ? this.props.subtitle : (\n                  <Text.span fontWeight={'inherit'} color={'inherit'} fontSize={'inherit'}>Assets Under Management <Text.span color={'cellTitle'} fontWeight={3} fontSize={'70%'}>(V3 + V4)</Text.span></Text.span>\n                )\n              }\n            </Title>\n          )\n        }\n      </Box>\n    ) : (\n      <Flex\n        alignItems={'center'}\n        justifyContent={this.props.loaderAlign || 'center'}\n      >\n        <Loader\n          size={\"30px\"}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default AssetsUnderManagement;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"DepositRedeem_input__28jp2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"twitterIcon\":\"TwitterShareButton_twitterIcon__2QCmn\"};","import moment from 'moment';\nimport theme from '../theme';\nimport { Bar } from '@nivo/bar';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\nimport { Flex, Text, Box } from 'rimble-ui';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass StatsChart extends Component {\n  state = {\n    chartProps:{},\n    chartType:null,\n    chartData:null,\n    chartWidth:null\n  };\n\n  async componentDidMount() {\n    this.setState({\n      chartData:null,\n      chartType:null,\n      chartProps:null,\n    });\n    this.loadUtils();\n    this.loadApiData();\n  }\n\n  async componentDidUpdate(prevProps) {\n    const showAdvancedChanged = prevProps.showAdvanced !== this.props.showAdvanced;\n    const apiResultsChanged = prevProps.apiResults !== this.props.apiResults;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    if (apiResultsChanged || showAdvancedChanged || tokenChanged){\n      this.componentDidMount();\n    }\n  }\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  parseAum = value => {\n    return (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.tokenConfig || !this.props.selectedToken || !this.props.chartMode || !this.props.apiResults){\n      return false;\n    }\n\n    const CustomTooltipRow = props => (\n      <Flex\n        mb={2}\n        width={1}\n        alignItems={'center'}\n        flexDirection={'row'}\n      >\n        <Flex\n          pr={2}\n          style={{\n            flexBasis:'0',\n            flex:'1 1 0px'\n          }}\n          alignItems={'center'}\n          justifyContent={'flex-start'}\n        > \n          {\n            props.color && \n            <Box\n              mr={2}\n              width={'10px'}\n              height={'10px'}\n              borderRadius={'50%'}\n              backgroundColor={props.color}\n            >\n            </Box>\n          }\n          <Text\n            fontSize={1}\n            fontWeight={2}\n            textAlign={'left'}\n            color={'dark-gray'}\n            style={{\n              textTransform:'capitalize'\n            }}\n          >\n            {props.label}\n          </Text>\n        </Flex>\n        <Flex\n          style={{\n            flexBasis:'0',\n            flex:'1 1 0px'\n          }}\n          alignItems={'center'}\n          justifyContent={'flex-end'}\n        >\n          <Text\n            fontSize={1}\n            fontWeight={3}\n            color={'cellText'}\n            textAlign={'right'}\n            style={{\n              whiteSpace:'nowrap'\n            }}\n            dangerouslySetInnerHTML={{\n              __html: props.value\n            }}\n          >\n          </Text>\n        </Flex>\n      </Flex>\n    );\n\n    const CustomTooltip = props => {\n      return (\n        <DashboardCard\n          key={props.point.id}\n          cardProps={{\n            py:2,\n            px:3,\n            width:1,\n            left: props.point.data.itemPos>50 ? '-110%' : '0'\n          }}\n        >\n          <Flex\n            width={1}\n            flexDirection={'column'}\n          >\n            {\n              props.point.data.xFormatted && \n                <Text\n                  mb={2}\n                  fontSize={1}\n                  fontWeight={3}\n                  color={'cellText'}\n                  textAlign={'left'}\n                >\n                  {props.point.data.xFormatted}\n                </Text>\n            }\n            {props.children}\n          </Flex>\n        </DashboardCard>\n      );\n    };\n\n    const maxGridLines = 4;\n    const apiResults = this.props.apiResults;\n    const apiResults_unfiltered = this.props.apiResults_unfiltered;\n    const totalItems = apiResults.length;\n    const protocols = Object.assign([],this.props.tokenConfig.protocols);\n    // const compoundProtocol = this.props.tokenConfig.protocols.find( p => (p.name === 'compound'));\n\n    const versionInfo = globalConfigs.stats.versions[this.props.idleVersion];\n\n    let keys = {};\n    let tempData = {};\n    let gridYStep = 0;\n    let itemIndex = 0;\n    let chartData = [];\n    let chartProps = {};\n    let chartType = Line;\n    let gridYValues = [];\n    let maxChartValue = 0;\n    let axisBottomIndex = 0;\n    let idleChartData = null;\n    let firstIdleBlock = null;\n\n    switch (this.props.chartMode){\n      case 'VOL':\n        let divergingData = {};\n\n        const startTimestamp = parseInt(apiResults_unfiltered[0].timestamp);\n        const endTimestamp = parseInt(moment()._d.getTime()/1000);\n\n        for (let timestamp=startTimestamp;timestamp<=endTimestamp;timestamp+=86400){\n          const date = moment(timestamp*1000).format(\"YYYY/MM/DD\");\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n        }\n\n        let lastRow = null;\n        apiResults_unfiltered.forEach(row => {\n          const date = moment(row.timestamp*1000).format(\"YYYY/MM/DD\");\n          const idleTokens = this.functionsUtil.fixTokenDecimals(row.idleSupply,18);\n\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp:row.timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n\n          if (lastRow){\n            const idleTokensPrev = this.functionsUtil.fixTokenDecimals(lastRow.idleSupply,18);\n            const idleTokensDiff = !idleTokens.eq(idleTokensPrev);\n            if (idleTokensDiff){\n              const diff = idleTokens.minus(idleTokensPrev);\n              // Deposits\n              if (diff.gte(0)){\n                divergingData[date].deposits+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,divergingData[date].deposits);\n              } else {\n                divergingData[date].redeems+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,Math.abs(divergingData[date].deposits));\n              }\n            }\n\n          } else {\n            divergingData[date].deposits+=parseFloat(idleTokens);\n          }\n\n          lastRow = row;\n        });\n\n        chartData = Object.values(divergingData).filter(v => {\n          return (!this.props.startTimestamp || v.timestamp>=this.props.startTimestamp) && (!this.props.endTimestamp || v.timestamp<=this.props.endTimestamp);\n        });\n\n        let maxRange = 0;\n        chartData.forEach(v => {\n          maxRange = Math.max(maxRange,Math.abs(v.deposits),Math.abs(v.redeems));\n        })\n\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          indexBy: 'date',\n          enableLabel: false,\n          minValue:-maxRange,\n          maxValue:maxRange,\n          label: d => {\n            return Math.abs(d.value);\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days',\n          },\n          axisLeft: null,\n          axisRight: {\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:8,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(Math.abs(v),0)\n          },\n          markers: [\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { strokeOpacity: 0 },\n              textStyle: { fill: theme.colors.transactions.action.deposit },\n              legend: 'deposits',\n              legendPosition: 'top-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { stroke: theme.colors['dark-gray'], strokeDasharray: '5 3' },\n              textStyle: { fill: theme.colors.transactions.action.redeem },\n              legend: 'redeems',\n              legendPosition: 'bottom-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n          ],\n          keys:['deposits','redeems'],\n          padding:0.4,\n          colors:[theme.colors.transactions.action.deposit, theme.colors.transactions.action.redeem],\n          labelTextColor: 'inherit:darker(1.4)',\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 80 : 100,\n              itemHeight: 18,\n              translateX: 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            },\n            tooltip:{\n              container:{\n                boxShadow:null,\n                background:null\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 50, bottom: 45, left: 50 } : { top: 20, right: 70, bottom: 70, left: 50 },\n          tooltip:(data) => {\n            const xFormatted = this.functionsUtil.strToMoment(data.indexValue).format('MMM DD');\n            const point = {\n              id:data.id,\n              data:{\n                xFormatted\n              }\n            };\n            const depositFormatted = this.functionsUtil.abbreviateNumber(data.data.deposits,2)+' '+this.props.selectedToken;\n            const redeemFormatted = this.functionsUtil.abbreviateNumber(data.data.redeems,2)+' '+this.props.selectedToken;\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                <CustomTooltipRow\n                  label={'Deposits'}\n                  color={theme.colors.deposit}\n                  value={depositFormatted}\n                />\n                <CustomTooltipRow\n                  label={'Redeem'}\n                  color={theme.colors.redeem}\n                  value={redeemFormatted}\n                />\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      /*\n      case 'AUM_ALL':\n        await this.functionsUtil.asyncForEach(Object.keys(availableTokens[globalConfigs.network.requiredNetwork]),async (tokenName,i) => {\n          const tokenConfig = availableTokens[globalConfigs.network.requiredNetwork][tokenName];\n          const tokenDataApi = await this.props.getTokenData(tokenConfig.address);\n          chartData.push({\n            id:tokenName,\n            color: tokenConfig.color,\n            data: tokenDataApi.map((d,i) => {\n              const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n              const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,tokenConfig.decimals);\n              const aum = idleTokens.times(idlePrice);\n              return {\n                x: moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\"),\n                y: parseInt(aum.toString())\n              };\n            })\n          });\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken,\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v),\n            orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            legendPosition: 'middle'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            format: '%b %d',\n            tickValues: this.props.isMobile ? 'every 4 days' : 'every 3 days',\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 36,\n            legendPosition: 'middle'\n          },\n          enableArea:false,\n          curve:\"linear\",\n          enableSlices:'x',\n          enableGridX:true,\n          enableGridY:false,\n          colors:d => d.color,\n          pointSize:0,\n          pointColor:{ from: 'color', modifiers: []},\n          pointBorderWidth:1,\n          pointLabel:\"y\",\n          pointLabelYOffset:-12,\n          useMesh:true,\n          animate:false,\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 60, bottom: 40, left: 60 },\n        };\n      break;\n      */\n      case 'AUM':\n\n        maxChartValue = 0;\n\n        chartData.push({\n          id:'AUM',\n          color: 'hsl('+globalConfigs.stats.tokens[this.props.selectedToken].color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n            const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n            const aum = idleTokens.times(idlePrice);\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(aum.toString());\n\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x,y };\n          })\n        });\n\n        // Add allocation\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          apiResults.map((d,i) => {\n            return d.protocolsData.filter((protocolAllocation,x) => {\n                return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            })\n            .map((protocolAllocation,z) => {\n              const protocolPaused = this.functionsUtil.BNify(protocolAllocation.rate).eq(0);\n              if (!protocolPaused){\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals));\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                let foundItem = chartData[0].data.filter(item => { return item.x === x });\n                if (foundItem){\n                  foundItem = foundItem[0];\n                  const pos = chartData[0].data.indexOf(foundItem);\n                  if (!foundItem.allocations){\n                    foundItem.allocations = {};\n                  }\n                  foundItem.allocations[p.name] = y;\n                  chartData[0].data[pos] = foundItem;\n                }\n              }\n              return undefined;\n            })[0]\n          }).filter((v) => { return v !== undefined; } )\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:v => this.functionsUtil.formatMoney(v,v<1 ? 3 :0),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 0,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:true,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            if (typeof point === 'object' && typeof point.data === 'object'){\n              return (\n                <CustomTooltip\n                  point={point}\n                >\n                  <CustomTooltipRow\n                    label={point.serieId}\n                    color={point.serieColor}\n                    value={point.data.yFormatted}\n                  />\n                  {\n                    point.data.allocations && typeof point.data.allocations === 'object' &&\n                      Object.keys(point.data.allocations).map(protocolName => {\n                        const protocolColor = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n                        const protocolAllocation = point.data.allocations[protocolName];\n                        const protocolAllocationFormatted = this.functionsUtil.formatMoney(protocolAllocation,protocolAllocation<1 ? 3 : 0);\n                        const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                        return (\n                          <CustomTooltipRow\n                            label={protocolName}\n                            color={protocolColor}\n                            key={`${point.id}_${protocolName}`}\n                            value={`${protocolAllocationFormatted} (${protocolAllocationPerc})`}\n                          />\n                        );\n                      })\n                  }\n                </CustomTooltip>\n              );\n              /*\n              return (\n                <div\n                    key={point.id}\n                    style={{\n                      background: 'white',\n                      color: 'inherit',\n                      fontSize: 'inherit',\n                      borderRadius: '2px',\n                      boxShadow: 'rgba(0, 0, 0, 0.25) 0px 1px 2px',\n                      padding: '5px 9px'\n                    }}\n                >\n                  <div>\n                    <table style={{width:'100%',borderCollapse:'collapse'}}>\n                      <tbody>\n                        <tr>\n                          <td style={{padding:'3px 5px'}}>\n                            <span style={{display:'block', width: '12px', height: '12px', background: point.serieColor}}></span>\n                          </td>\n                          <td style={{padding:'3px 5px'}}>{point.serieId}</td>\n                          <td style={{padding:'3px 5px'}}><strong>{point.data.yFormatted}</strong></td>\n                        </tr>\n                        {\n                          point.data.allocations && typeof point.data.allocations === 'object' &&\n                            Object.keys(point.data.allocations).map(protocolName => {\n                              const protocolColor = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n                              const protocolAllocation = this.functionsUtil.formatMoney(point.data.allocations[protocolName],0);\n                              const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                              return (\n                                <tr key={`${point.id}_${protocolName}`}>\n                                  <td style={{padding:'3px 5px'}}>\n                                    <span style={{display:'block', width: '12px', height: '12px', background: protocolColor}}></span>\n                                  </td>\n                                  <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{protocolName}</td>\n                                  <td style={{padding:'3px 5px'}}><strong>{protocolAllocation}</strong> ({protocolAllocationPerc})</td>\n                                </tr>\n                              );\n                            })\n                        }\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              );\n              */\n            }\n\n            return null;\n          }\n        };\n      break;\n      case 'ALL':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\");\n\n          let row = {\n            date\n          };\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const foundProtocol = this.props.tokenConfig.protocols.find((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() });\n            if (foundProtocol){\n              const protocolName = this.functionsUtil.capitalize(foundProtocol.name);\n              if (!protocolPaused){\n                let allocation = parseFloat(this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals));\n                keys[protocolName] = 1;\n                row[protocolName] = allocation;\n                row[`${protocolName}Color`] = 'hsl('+globalConfigs.stats.protocols[protocolName.toLowerCase()].color.hsl.join(',')+')';\n                // console.log(protocolName,this.functionsUtil.BNify(protocolData.allocation).toString(),this.props.tokenConfig.decimals,allocation);\n                maxChartValue = Math.max(maxChartValue,allocation);\n              } else {\n                row[protocolName] = 0;\n              }\n            }\n          });\n\n\n          tempData[date] = row;\n        });\n\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n            orient: 'left',\n            tickSize: 0,\n            tickPadding: 10,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            tickValues:gridYValues,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickSize: 0,\n            tickPadding: 10,\n            orient: 'bottom-left',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days'\n          },\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            tooltip: {\n              container:{\n                padding:'0',\n                boxShadow:'none',\n                background:'transparent',\n              },\n              tableCell:{\n                padding:'0'\n              }\n            },\n            axis: {\n              ticks: {\n                text: {\n                  fontSize:this.props.isMobile ? 12 : 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize:this.props.isMobile ? 12 : 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 60 },\n          tooltip:({ id, value, color }) => {\n            const allocation = this.functionsUtil.formatMoney(value,0);\n            return (\n              <DashboardCard\n                cardProps={{\n                  py:1,\n                  px:2,\n                  width:1,\n                }}\n              >\n                <table\n                  style={{width:'100%',borderCollapse:'collapse'}}\n                >\n                  <tbody>\n                    <tr>\n                      <td style={{padding:'3px 5px'}}>\n                        <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                      </td>\n                      <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                      <td style={{padding:'3px 5px'}}><strong>{allocation} {this.props.selectedToken}</strong></td>\n                    </tr>\n                  </tbody>\n                </table>\n              </DashboardCard>\n            )\n          }\n        }\n      break;\n      case 'ALL_PERC':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\")\n          let row = {\n            date:moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\")\n          };\n          if (tempData[date]){\n            row = tempData[date];\n          }\n\n          const totalAllocation = d.protocolsData.reduce((accumulator,protocolAllocation) => {\n            const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n            return this.functionsUtil.BNify(accumulator).plus(allocation);\n          },0);\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const protocolName = this.props.tokenConfig.protocols.filter((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() })[0].name;\n            if (!protocolPaused){\n              const allocation = this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals);\n              const allocationPerc = parseFloat(allocation.div(totalAllocation).times(100));\n              keys[protocolName] = 1;\n              row[protocolName] = allocationPerc;\n              row[`${protocolName}Color`] = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n            } else if (typeof row[protocolName] !== undefined) {\n              row[protocolName] = 0;\n            } \n          });\n          \n          tempData[date] = row;\n        });\n\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          data: chartData,\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 40, bottom: 40, left: 60 },\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => parseInt(v)+'%'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            orient: 'bottom',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days'\n          },\n          tooltip:({ id, value, color }) => {\n            const allocation = parseInt(value)===100 ? this.functionsUtil.formatMoney(value,0) : this.functionsUtil.formatMoney(value,2);\n            return (\n              <table style={{width:'100%',borderCollapse:'collapse'}}>\n                <tbody>\n                  <tr>\n                    <td style={{padding:'3px 5px'}}>\n                      <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                    </td>\n                    <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                    <td style={{padding:'3px 5px'}}><strong>{allocation}%</strong></td>\n                  </tr>\n                </tbody>\n              </table>\n            )\n          }\n        }\n      break;\n      case 'APR':\n\n        maxChartValue = 0;\n\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n          chartData.push({\n            id:p.name,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                const protocolPaused = this.functionsUtil.BNify(protocolAllocation.rate).eq(0);\n                if (!protocolPaused){\n                  const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                  const y = parseFloat(this.functionsUtil.fixTokenDecimals(protocolAllocation.rate,18));\n\n                  maxChartValue = Math.max(maxChartValue,y);\n\n                  return { x, y };\n                }\n                return undefined;\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(this.functionsUtil.fixTokenDecimals(d.idleRate,18));\n\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x, y };\n          })\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(2)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 0,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    // const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'SCORE':\n\n        let prevValue = 0;\n        maxChartValue = 0;\n\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n\n          chartData.push({\n            id:p.name,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(protocolAllocation.defiScore);\n\n                y = isNaN(y) || !y ? prevValue : y;\n                prevValue = y;\n                maxChartValue = Math.max(maxChartValue,y);\n\n                return { x, y };\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            let y = parseFloat(d.idleScore);\n            y = isNaN(y) || !y ? prevValue : y;\n            prevValue = y;\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x, y };\n          })\n        });\n\n        // debugger;\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(1),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 0,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE_V4':\n\n        itemIndex = 0;\n        maxChartValue = 0;\n        // let prevApy = null;\n        let prevApr = null;\n        let prevData = null;\n        let startBalance = this.functionsUtil.BNify(1);\n        let currentBalance = this.functionsUtil.BNify(1);\n        let avgApy = this.functionsUtil.BNify(0);\n\n        // console.log('PRICE_V4',apiResults);\n\n        idleChartData = apiResults.map((d,i) => {\n\n          let y = 0;\n          let apy = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n          const apr = this.functionsUtil.fixTokenDecimals(d.idleRate,18).div(100);\n          // const apy = this.functionsUtil.apr2apy(apr);\n          \n          avgApy = avgApy.plus(apr.times(100));\n\n          if (prevApr){\n            const days = (d.timestamp-prevData.timestamp)/86400;\n            // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n            const earnings = currentBalance.times(prevApr.times(days).div(365));\n            currentBalance = currentBalance.plus(earnings);\n\n            const earning = currentBalance.div(startBalance).minus(1).times(100);\n            y = parseFloat(earning);\n\n            // apy = earning.times(365).div(totDays).toFixed(2);\n            apy = avgApy.div(i+1).toFixed(2);\n          }\n\n          prevData = d;\n          // prevApy = apy;\n          prevApr = apr;\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          return { x, y, apy, blocknumber, itemPos };\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        protocols.forEach( p => {\n\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          // prevApy = null;\n          prevApr = null;\n          prevData = null;\n          let baseProfit = 0;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n          avgApy = this.functionsUtil.BNify(0);\n          startBalance = this.functionsUtil.BNify(1);\n          currentBalance = this.functionsUtil.BNify(1);\n\n          apiResults.forEach( (d,i) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              const protocolRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n                if (protocolData[field]){\n                  return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(protocolData[field]));\n                }\n                return this.functionsUtil.BNify(acc);\n              },0) : this.functionsUtil.BNify(protocolData[rateField]);\n\n              const protocolPaused = protocolRate.eq(0);\n              if (!protocolPaused){\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null){\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => (d1.blocknumber>=firstProtocolBlock) );\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                    }\n                  }\n                }\n\n                let rowData = {};\n\n                let y = 0;\n                let apy = 0;\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                const apr = this.functionsUtil.fixTokenDecimals(protocolRate,18).div(100);\n\n                avgApy = avgApy.plus(apr.times(100));\n                // const apy = this.functionsUtil.apr2apy(apr);\n\n                if (prevData){\n                  const days = (d.timestamp-prevData.timestamp)/86400;\n                  // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n                  const earnings = currentBalance.times(prevApr.times(days).div(365));\n                  currentBalance = currentBalance.plus(earnings);\n\n                  const earning = currentBalance.div(startBalance).minus(1).times(100);\n                  y = parseFloat(earning)+baseProfit;\n\n                  apy = avgApy.div(i+1).toFixed(2);\n                }\n\n                prevData = d;\n                prevApr = apr;\n\n                if (firstIdleBlock === null){\n                  firstIdleBlock = parseInt(d.blocknumber);\n                }\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                const itemPos = Math.floor(itemIndex/totalItems*100);\n                // const blocknumber = d.blocknumber;\n\n                itemIndex++;\n\n                rowData = {\n                  x,\n                  y,\n                  apy,\n                  itemPos\n                };\n\n                itemIndex++;\n                chartRow.data.push(rowData);\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: idleChartData\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              itemWidth: this.props.isMobile ? 70 : 100,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE':\n        // let prevTokenPrice = null;\n        maxChartValue = 0;\n        let firstTokenPrice = null;\n\n        idleChartData = apiResults.map((d,i) => {\n\n          let y = 0;\n          let apy = 0;\n          let days = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n          const tokenPrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n\n          if (!firstTokenPrice){\n            firstTokenPrice = tokenPrice;\n          } else {\n            y = parseFloat(tokenPrice.div(firstTokenPrice).minus(1).times(100));\n\n            days = (d.timestamp-apiResults[0].timestamp)/86400;\n            const earning = tokenPrice.div(firstTokenPrice).minus(1).times(100);\n            apy = earning.times(365).div(days).toFixed(2);\n\n            // console.log(firstTokenPrice.toString(),tokenPrice.toString(),earning.toString(),days,y,apy);\n          }\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          return { x, y, apy, blocknumber, itemPos };\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        await this.functionsUtil.asyncForEach(protocols,async (p) => {\n\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          let baseProfit = 0;\n          firstTokenPrice = null;\n          let lastRowData = null;\n          let lastTokenPrice = null;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n\n          await this.functionsUtil.asyncForEach(apiResults,async (d) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData && protocolData[rateField]){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              const protocolPaused = this.functionsUtil.BNify(protocolData[rateField]).eq(0);\n              if (!protocolPaused){\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null){\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => {\n                      return d1.blocknumber>=firstProtocolBlock;\n                    });\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                    }\n                  }\n                }\n\n                let rowData = {};\n                let tokenExchangeRate = protocolData.price;\n                let tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n\n                // Take data from\n                if (protocolInfo && protocolInfo.data && protocolInfo.data[p.address.toLowerCase()] && protocolInfo.data[p.address.toLowerCase()][d.blocknumber]){\n                  tokenExchangeRate = this.functionsUtil.BNify(globalConfigs.stats.protocols[p.name].data[p.address.toLowerCase()][d.blocknumber]);\n                  tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                }/* else if (p.name === 'aave'){\n                  // Token holders (aDAI = 0xc025c03e10f656d3ee76685d53d236824d8ef3da , aUSDC = 0xd2c734fbd8f5d1c809185e014016dd4097e94711)\n                  let aaveTokenBalance = await this.functionsUtil.genericContractCall(p.token,'balanceOf',['0xd2c734fbd8f5d1c809185e014016dd4097e94711'],{},d.blocknumber);\n                  if (aaveTokenBalance){\n                    if (!Object.values(aave_data).length){\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(1,p.decimals);\n                      aave_data[d.blocknumber] = aaveTokenBalance.toString();\n                    } else {\n                      const firstBalance = Object.values(aave_data)[0];\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(this.functionsUtil.BNify(aaveTokenBalance).div(this.functionsUtil.BNify(firstBalance)).toFixed(p.decimals),p.decimals);\n                      aave_data[d.blocknumber] = tokenExchangeRate.toString();\n                    }\n                  }\n                }\n                */\n\n                let y = baseProfit;\n                let apy = 0;\n\n                if (!firstTokenPrice){\n                  firstTokenPrice = tokenPriceFixed;\n                } else {\n                  if (tokenPriceFixed.lt(lastTokenPrice)){\n                    firstTokenPrice = tokenPriceFixed;\n                    const lastYDiff = chartRow.data[chartRow.data.length-1].y-chartRow.data[chartRow.data.length-2].y;\n                    y = lastRowData.y+lastYDiff;\n                    baseProfit = y;\n                  } else {\n                    y += parseFloat(tokenPriceFixed.div(firstTokenPrice).minus(1).times(100));\n                  }\n\n                  const days = (d.timestamp-apiResults[0].timestamp)/86400;\n                  const earning = tokenPriceFixed.div(firstTokenPrice).minus(1).times(100);\n                  apy = earning.times(365).div(days).toFixed(2);\n                }\n\n                y = Math.max(0,y);\n                maxChartValue = Math.max(maxChartValue,y);\n\n                const itemPos = Math.floor(itemIndex/totalItems*100);\n\n                rowData = {\n                  x,\n                  y,\n                  apy,\n                  itemPos\n                };\n\n                itemIndex++;\n                lastRowData = rowData;\n                chartRow.data.push(rowData);\n                lastTokenPrice = tokenPriceFixed;\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: idleChartData\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              itemWidth: this.props.isMobile ? 70 : 100,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      chartType,\n      chartProps,\n      chartData\n    });\n  }\n\n  render() {\n    return(\n      <GenericChart\n        showLoader={true}\n        {...this.state.chartProps}\n        height={this.props.height}\n        type={this.state.chartType}\n        data={this.state.chartData}\n        width={this.state.chartWidth}\n        isMobile={this.props.isMobile}\n        parentId={this.props.parentId}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default StatsChart;","import { Flex, Text } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\n\nclass Rebalance extends Component {\n\n  state = {\n    loading:true,\n    processing:{\n      rebalance:{\n        txHash:null,\n        loading:false\n      },\n    },\n    shouldRebalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.checkRebalance();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged || accountChanged){\n      this.checkRebalance();\n    }\n  }\n\n  checkRebalance = async () => {\n    this.setState({\n      loading:true,\n    });\n\n    const shouldRebalance = await this.functionsUtil.checkRebalance(this.props.tokenConfig);\n\n    this.setState({\n      loading:false,\n      shouldRebalance\n    });\n  }\n\n  rebalance = async (e) => {\n    e.preventDefault();\n\n    const callback = (tx,error) => {\n\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Rebalance',\n        eventAction: this.props.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      let txDenied = false;\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      if (tx.status === 'success'){\n        // Toast message\n        window.toastProvider.addMessage(`Rebalance completed`, {\n          secondaryMessage: `Now the pool is balanced!`,\n          colorTheme: 'light',\n          actionHref: \"\",\n          actionText: \"\",\n          variant: \"success\",\n        });\n\n      } else if (!txDenied){\n        window.toastProvider.addMessage(`Rebalance error`, {\n          secondaryMessage: `The rebalance has failed, try again...`,\n          colorTheme: 'light',\n          actionHref: \"\",\n          actionText: \"\",\n          variant: \"failure\",\n        });\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          rebalance:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n\n      this.checkRebalance();\n    }\n\n    const callback_receipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            rebalance:{\n              ...prevState.processing.rebalance,\n              txHash\n            }\n          }\n        })\n      );\n    };\n\n    this.props.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'rebalance', [], null , callback, callback_receipt);\n\n    this.setState({\n      processing:{\n        rebalance:{\n          txHash:null,\n          loading:true\n        }\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Flex\n        px={3}\n        width={1}\n        minHeight={'100px'}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n      {\n        this.state.loading ? (\n          <FlexLoader\n            flexProps={{\n              flexDirection:'row'\n            }}\n            loaderProps={{\n              size:'30px'\n            }}\n            textProps={{\n              ml:2\n            }}\n            text={'Checking rebalance...'}\n          />\n        ) : (\n          this.state.processing.rebalance.loading ? (\n            <TxProgressBar web3={this.props.web3} waitText={`Rebalance estimated in`} endMessage={`Finalizing rebalance request...`} hash={this.state.processing.rebalance.txHash} />\n          ) : (\n            <Flex\n              width={1}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                mt={0}\n                mb={3}\n                textAlign={'center'}\n              >\n                {this.state.shouldRebalance ? 'Rebalance the entire pool. All users will bless you.' : 'The pool is already balanced.'}\n              </Text>\n              <RoundButton\n                buttonProps={{\n                  width:'auto',\n                  disabled:!this.state.shouldRebalance\n                }}\n                handleClick={e => this.rebalance(e)}\n              >\n                Rebalance\n              </RoundButton>\n            </Flex>\n          )\n        )\n      }\n      </Flex>\n    )\n  }\n}\n\nexport default Rebalance;","import React from \"react\";\nimport {\n  Modal,\n  Button,\n  Flex,\n  Field,\n  Select\n} from \"rimble-ui\";\nimport moment from 'moment';\nimport ModalCard from './ModalCard';\nimport 'react-date-range/dist/styles.css';\nimport { DateRange } from 'react-date-range';\nimport 'react-date-range/dist/theme/default.css';\n\nclass DateRangeModal extends React.Component {\n\n  state = {\n    quickSelection:'',\n    ranges:{\n      startDate: this.props.startDate ? this.props.startDate : new Date(),\n      endDate: this.props.endDate ? this.props.endDate : new Date(),\n      key: 'selection'\n    }\n  }\n\n  handleSelect(ranges){\n    this.setState({\n      quickSelection:'',\n      ranges:ranges.selection\n    });\n  }\n\n  handleQuickSelect(e){\n    let startDate = null;\n    let endDate = moment(new Date());\n    const quickSelection = e.target.value;\n\n    switch (quickSelection){\n      case 'day':\n        startDate = endDate.clone().subtract(1,'day');\n      break;\n      case 'week':\n        startDate = endDate.clone().subtract(1,'week');\n      break;\n      case 'weeks':\n        startDate = endDate.clone().subtract(2,'week');\n      break;\n      case 'month':\n        startDate = endDate.clone().subtract(1,'month');\n      break;\n      default:\n        startDate = null;\n        endDate = null;\n      break;\n    }\n\n    if (startDate && endDate){\n      startDate = startDate._d;\n      endDate = endDate._d;\n\n      const ranges = {\n        startDate,\n        endDate,\n        key:'selection'\n      };\n\n      this.setState({\n        ranges,\n        quickSelection\n      }, () => {\n        this.closeModal();\n      });\n    }\n  }\n\n  componentDidUpdate = (prevProps) => {\n    if (prevProps.startDate !== this.props.startDate || prevProps.endDate !== this.props.endDate){\n      this.setState({\n        ranges:{\n          startDate: this.props.startDate ? this.props.startDate : new Date(),\n          endDate: this.props.endDate ? this.props.endDate : new Date(),\n          key: 'selection'\n        }\n      });\n    }\n  }\n\n  closeModal(){\n    const newState = this.props.handleSelect(this.state.ranges,this.state.quickSelection);\n    const ranges = {\n      startDate:newState.startTimestampObj ? newState.startTimestampObj._d : new Date(),\n      endDate:newState.endTimestampObj ? newState.endTimestampObj._d : new Date(),\n      key: 'selection'\n    };\n    this.setState({\n      ranges\n    });\n    this.props.closeModal();\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        <ModalCard closeFunc={this.props.closeModal}>\n          <ModalCard.Header title={'Select Date Range'}>\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex width={1} flexDirection={'column'} alignItems={'center'}>\n              <Field label=\"Quick Date Selection\" style={{display:'flex',width:'100%',alignItems:'stretch',justifyContent:'center'}}>\n                <Select\n                  style={{\n                    color:'#7d888d',\n                    fontSize:'14px',\n                    height:'2.5em',\n                    boxShadow:'none'\n                  }}\n                  width={'100%'}\n                  required={true}\n                  onChange={this.handleQuickSelect.bind(this)}\n                  value={this.state.quickSelection}\n                  options={[\n                    { value: '', label: \"Select an option\" },\n                    { value: \"day\", label: \"Last day\" },\n                    { value: \"week\", label: \"Last week\" },\n                    { value: \"weeks\", label: \"Last 2 weeks\" },\n                    { value: \"month\", label: \"Last month\" }\n                  ]}\n                />\n              </Field>\n              <DateRange\n                ranges={[this.state.ranges]}\n                minDate={this.props.minDate}\n                maxDate={this.props.maxDate}\n                onChange={this.handleSelect.bind(this)}\n              />\n            </Flex>\n          </ModalCard.Body>\n          <ModalCard.Footer>\n            <Flex px={[2,0]} flexDirection={['column', 'row']} width={1} justifyContent={'center'}>\n              <Button\n                borderRadius={4}\n                my={2}\n                mx={[0, 2]}\n                size={this.props.isMobile ? 'small' : 'medium'}\n                onClick={ e => this.closeModal(e) }\n              >\n              APPLY\n              </Button>\n            </Flex>\n          </ModalCard.Footer>\n        </ModalCard>\n      </Modal>\n    );\n  }\n\n}\n\nexport default DateRangeModal;","import { Flex } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\n\nclass ExecuteTransaction extends Component {\n\n  state = {\n    txStatus:null,\n    processing:{\n      txHash:null,\n      loading:false\n    }\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  execute(){\n\n    const callback = (tx,error) => {\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Transaction',\n        eventLabel: this.props.methodName,\n        eventAction: this.props.contractName\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      const txSucceeded = tx.status === 'success';\n      if (txSucceeded){\n        if (typeof this.props.callback === 'function'){\n          this.props.callback();\n        }\n      }\n\n      this.setState({\n        txStatus:tx.status,\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      });\n    };\n\n    const callbackReceipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        txStatus:'processing',\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    this.functionsUtil.contractMethodSendWrapper(this.props.contractName,this.props.methodName,this.props.params,callback,callbackReceipt);\n\n    this.setState((prevState) => ({\n      txStatus:'loading',\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  render() {\n    const ExecuteComponent = this.props.Component;\n    return (\n      <Flex\n        {...this.props.parentProps}\n      >\n        {\n          this.state.txStatus === 'success' && this.props.children ?\n            this.props.children\n          : this.state.processing && this.state.processing.loading ? (\n            <TxProgressBar\n              web3={this.props.web3}\n              {...this.props.progressBarProps}\n              hash={this.state.processing.txHash}\n              waitText={`${this.props.action} estimated in`}\n              cancelTransaction={this.cancelTransaction.bind(this)}\n              endMessage={`Finalizing ${this.props.action} request...`}\n            />\n          ) : (\n            <ExecuteComponent\n              onClick={this.execute.bind(this)}\n              {...this.props.componentProps}\n            >\n              {this.props.componentProps.value}\n            </ExecuteComponent>\n          )\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default ExecuteTransaction;\n","import moment from 'moment';\nimport Title from '../Title/Title';\nimport StatsChart from './StatsChart';\nimport React, { Component } from 'react';\nimport Rebalance from '../Rebalance/Rebalance';\nimport StatsCard from '../StatsCard/StatsCard';\nimport AssetsList from '../AssetsList/AssetsList';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport GenericSelector from '../GenericSelector/GenericSelector';\nimport RoundIconButton from '../RoundIconButton/RoundIconButton';\nimport VariationNumber from '../VariationNumber/VariationNumber';\nimport AllocationChart from '../AllocationChart/AllocationChart';\nimport DateRangeModal from '../utilities/components/DateRangeModal';\nimport { Flex, Text, Heading, Box, Icon, Button, Link } from 'rimble-ui';\nimport ExecuteTransaction from '../ExecuteTransaction/ExecuteTransaction';\nimport AssetsUnderManagement from '../AssetsUnderManagement/AssetsUnderManagement';\n\nclass Stats extends Component {\n  state = {\n    aum:null,\n    apr:null,\n    days:'-',\n    delta:null,\n    earning:null,\n    minDate:null,\n    maxDate:null,\n    carouselMax:1,\n    rebalances:'-',\n    buttonGroups:[],\n    apiResults:null,\n    carouselIndex:0,\n    idleVersion:null,\n    statsVersions:{},\n    minStartTime:null,\n    endTimestamp:null,\n    showAdvanced:true,\n    govTokensPool:null,\n    unlentBalance:null,\n    quickSelection:null,\n    startTimestamp:null,\n    endTimestampObj:null,\n    shouldRebalance:null,\n    carouselOffsetLeft:0,\n    startTimestampObj:null,\n    showRefreshIdleSpeed:false,\n    apiResults_unfiltered:null,\n    dateRangeModalOpened:false\n  };\n\n  quickSelections = {\n    day:'Last day',\n    week:'Last week',\n    weeks:'Last 2 weeks',\n    month:'Last month'\n  };\n\n  // Utils\n  functionsUtil = null;\n  componentUnmounted = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount() {\n    this.loadUtils();\n    await this.loadParams();\n  }\n\n  componentWillUnmount(){\n    this.componentUnmounted = true;\n  }\n\n  async setStateSafe(newState,callback=null) {\n    if (!this.componentUnmounted){\n      return this.setState(newState,callback);\n    }\n    return null;\n  }\n\n  showRefreshIdleSpeed(){\n    this.setState({\n      showRefreshIdleSpeed:true\n    });\n  }\n\n  getLatestAvailableVersion(){\n    const statsVersions = globalConfigs.stats.versions;\n    let latestVersion = null;\n    Object.keys(statsVersions).forEach( version => {\n      const versionInfo = statsVersions[version];\n      if (versionInfo.enabledStrategies.includes(this.props.selectedStrategy)){\n        latestVersion = version;\n      }\n    });\n\n    return latestVersion;\n  }\n\n  getVersionInfo(version){\n    if (!version){\n      version = this.state.idleVersion;\n    }\n\n    if (!globalConfigs.stats.versions[version]){\n      return null;\n    }\n\n    const versionInfo = Object.assign({},globalConfigs.stats.versions[version]);\n\n    if (versionInfo.strategiesParams && versionInfo.strategiesParams[this.props.selectedStrategy]){\n      const versionInfoExtra = versionInfo.strategiesParams[this.props.selectedStrategy];\n      Object.keys(versionInfoExtra).forEach( param => {\n        versionInfo[param] = versionInfoExtra[param];\n      });\n    }\n\n    return versionInfo;\n  }\n\n  async loadParams() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    const newState = {};\n    const { match: { params } } = this.props;\n\n    const currentNetworkAvailableTokens = Object.keys(this.props.availableTokens);\n\n    if (!!params.customToken && currentNetworkAvailableTokens.indexOf(params.customToken.toUpperCase()) !== -1 ){\n      newState.selectedToken = params.customToken.toUpperCase();\n    } else {\n      newState.selectedToken = this.props.selectedToken.toUpperCase();\n    }\n\n    newState.tokenConfig = this.props.availableTokens[newState.selectedToken];\n    newState.minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp,'YYYY-MM-DD');\n    newState.maxEndDate = moment();\n\n    newState.endTimestampObj = moment(moment().format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    newState.latestVersion = this.getLatestAvailableVersion();\n    newState.idleVersion = this.state.idleVersion === null ? newState.latestVersion : this.state.idleVersion;\n\n    const versionInfo = this.getVersionInfo(newState.idleVersion);\n\n    // console.log('loadParams',newState.latestVersion,newState.idleVersion,versionInfo);\n\n    if (newState.idleVersion && versionInfo.endTimestamp){\n      const newEndTimestampObj = moment(moment(versionInfo.endTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.endTimestampObj.isAfter(newEndTimestampObj)){\n        newState.endTimestampObj = newEndTimestampObj;\n        newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n      }\n\n      if (!newState.maxEndDate || newState.maxEndDate.isAfter(newEndTimestampObj)){\n        newState.maxEndDate = newEndTimestampObj;\n      }\n    }\n\n    newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n\n    // Set start date\n    newState.startTimestampObj = newState.endTimestampObj.clone().subtract(1,'month');\n    newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n\n    if (newState.idleVersion && versionInfo.startTimestamp){\n      const newStartTimestampObj = moment(moment(versionInfo.startTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.startTimestampObj.isBefore(newStartTimestampObj)){\n        newState.startTimestampObj = newStartTimestampObj;\n        newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n      }\n\n      if (newState.minStartTime.isBefore(newStartTimestampObj)){\n        newState.minStartTime = newStartTimestampObj;\n      }\n    }\n\n    newState.minDate = newState.minStartTime._d;\n    newState.maxDate = newState.maxEndDate._d;\n\n    if (newState !== this.state){\n      await this.setStateSafe(newState);\n    }\n  }\n\n  setDateRange = (ranges,quickSelection=null) => {\n\n    const minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp);\n\n    let startTimestampObj = moment(ranges.startDate).isSameOrAfter(minStartTime) ? moment(ranges.startDate) : minStartTime;\n    let endTimestampObj = moment(ranges.endDate);\n\n    if (startTimestampObj.isSame(endTimestampObj)){\n      endTimestampObj.add(1,'day');\n    }\n\n    endTimestampObj = moment(endTimestampObj.format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    if (startTimestampObj.isBefore(this.state.minStartTime)){\n      startTimestampObj = this.state.minStartTime;\n    }\n\n    if (endTimestampObj.isAfter(this.state.maxEndDate)){\n      endTimestampObj = this.state.maxEndDate;\n    }\n\n    const startTimestamp = parseInt(startTimestampObj._d.getTime()/1000);\n    const endTimestamp = parseInt(endTimestampObj._d.getTime()/1000);\n\n    const newState = {\n      minStartTime,\n      endTimestamp,\n      quickSelection,\n      startTimestamp,\n      endTimestampObj,\n      startTimestampObj\n    };\n\n    this.setStateSafe(newState);\n\n    return newState;\n  }\n\n  toggleAdvancedCharts = (e) => {\n    e.preventDefault();\n    this.setStateSafe({\n      showAdvanced:!this.state.showAdvanced\n    });\n  }\n\n  setDateRangeModal = (dateRangeModalOpened) => {\n    if (dateRangeModalOpened !== this.state.dateRangeModalOpened){\n      this.setStateSafe({\n        dateRangeModalOpened\n      });\n    }\n  }\n\n  async componentDidMount() {\n\n    if (!this.props.web3){\n      this.props.initWeb3();\n      return false;\n    }\n\n    const style = document.createElement('style');\n    style.id = 'crisp-custom-style';\n    style.type = 'text/css';\n    style.innerHTML = `\n    .crisp-client{\n      display:none !important;\n    }`;\n    document.body.appendChild(style);\n\n    this.loadUtils();\n    await this.loadParams();\n    this.loadApiData();\n    this.loadCarousel();\n  }\n\n  loadCarousel(){\n    const carouselMax = this.props.isMobile ? 3 : 2;\n    this.setStateSafe({\n      carouselMax\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const strategyChanged = prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    const dateChanged = prevState.startTimestamp !== this.state.startTimestamp || prevState.endTimestamp !== this.state.endTimestamp;\n    const versionChanged = prevState.idleVersion !== this.state.idleVersion;\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n\n    if (mobileChanged){\n      this.loadCarousel();\n    }\n\n    if (contractsInitialized || tokenChanged || strategyChanged || versionChanged){\n      // console.log('componentDidUpdate',this.props.selectedStrategy,this.props.selectedToken);\n      await this.componentDidMount();\n    } else if (dateChanged){\n      this.loadApiData();\n    }\n  }\n\n  filterTokenData = (apiResults) => {\n    return apiResults.filter((r,i) => {\n      return (!this.state.startTimestamp || r.timestamp >= this.state.startTimestamp) && (!this.state.endTimestamp || r.timestamp <= this.state.endTimestamp);\n    });\n  }\n\n  setIdleVersion = idleVersion => {\n    this.setStateSafe({\n      idleVersion\n    });\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    // Get COMP APR\n    // const compAPR = await this.functionsUtil.getCompAPR(this.props.tokenConfig);\n    // console.log('compAPR',compAPR.toString());\n\n    const startTimestamp = this.state.minDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.minDate).format('DD/MM/YYYY 00:00:00'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n    const endTimestamp = this.state.maxDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.maxDate).format('DD/MM/YYYY 23:59:59'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n\n    const isRisk = ['v3','v4'].includes(this.state.idleVersion) && this.props.selectedStrategy === 'risk';\n    let apiResults_unfiltered = await this.functionsUtil.getTokenApiData(this.props.tokenConfig.address,isRisk,startTimestamp,endTimestamp,true,7200);\n\n    const apiResults = this.filterTokenData(apiResults_unfiltered);\n\n    // console.log('loadApiData',startTimestamp,endTimestamp,new Date(startTimestamp*1000),new Date(endTimestamp*1000),apiResults,apiResults_unfiltered);\n\n    if (!apiResults || !apiResults_unfiltered || !apiResults.length || !apiResults_unfiltered.length){\n      return false;\n    }\n\n    const firstResult = apiResults[0];\n    const lastResult = Object.values(apiResults).pop();\n\n    window.moment = moment;\n\n    let days = (lastResult.timestamp-firstResult.timestamp)/86400;\n    if (days === 0){\n      days = 1;\n    }\n\n    let apr = null;\n    let delta = 'N/A';\n\n    const idleTokens = this.functionsUtil.fixTokenDecimals(lastResult.idleSupply,18);\n    const firstIdlePrice = this.functionsUtil.fixTokenDecimals(firstResult.idlePrice,this.props.tokenConfig.decimals);\n    const lastIdlePrice = this.functionsUtil.fixTokenDecimals(lastResult.idlePrice,this.props.tokenConfig.decimals);\n\n    // Calculate AUM\n    let aum = idleTokens.times(lastIdlePrice);\n    // Convert Token balance\n    aum = await this.functionsUtil.convertTokenBalance(aum,this.props.selectedToken,this.props.tokenConfig,isRisk);\n\n    const compoundInfo = this.props.tokenConfig.protocols.filter((p) => { return p.name === 'compound' })[0];\n    const firstCompoundData = compoundInfo ? firstResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n    const lastCompoundData = compoundInfo ? lastResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n\n    if (this.state.idleVersion === 'v4') {\n\n      apr = apiResults.reduce( (sum,r) => {\n        const idleRate = this.functionsUtil.fixTokenDecimals(r.idleRate,18);\n        return this.functionsUtil.BNify(sum).plus(idleRate);\n      },0);\n\n      // Calculate average\n      apr = apr.div(apiResults.length);\n\n      if (compoundInfo){\n        const compoundWithCOMPInfo = globalConfigs.stats.protocols.compoundWithCOMP;\n        const rateField = compoundWithCOMPInfo.rateField ? compoundWithCOMPInfo.rateField : 'rate';\n\n        let compoundAvgApr = apiResults.reduce( (sum,r) => {\n\n          const compoundData = r.protocolsData.find((pData,x) => {\n            return pData.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase()\n          });\n\n          let compoundRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n            if (compoundData[field]){\n              return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(compoundData[field]));\n            }\n            return this.functionsUtil.BNify(acc);\n          },0) : this.functionsUtil.BNify(compoundData[rateField]);\n\n          compoundRate = this.functionsUtil.fixTokenDecimals(compoundRate,18);\n\n          return this.functionsUtil.BNify(sum).plus(compoundRate);\n        },0);\n\n        // Calculate average\n        compoundAvgApr = compoundAvgApr.div(apiResults.length);\n\n        // compoundAvgApr = this.functionsUtil.apr2apy(compoundAvgApr.div(100)).times(100);\n        // apr = this.functionsUtil.apr2apy(apr.div(100)).times(100);\n\n        delta = apr.minus(compoundAvgApr);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n\n      apr = apr.toFixed(2);\n\n    } else {\n      const earning = lastIdlePrice.div(firstIdlePrice).minus(1).times(100);\n      apr = earning.times(365).div(days).toFixed(2);\n\n      if (firstCompoundData && lastCompoundData){\n        const firstCompoundPrice = this.functionsUtil.fixTokenDecimals(firstCompoundData.price,this.props.tokenConfig.decimals);\n        const lastCompoundPrice = this.functionsUtil.fixTokenDecimals(lastCompoundData.price,this.props.tokenConfig.decimals);\n        const compoundApr = lastCompoundPrice.div(firstCompoundPrice).minus(1).times(100);\n        delta = earning.minus(compoundApr).times(365).div(days);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n    }\n\n    // Count rebalances\n    let rebalances = 0;\n    apiResults.forEach((row,index) => {\n      if (index){\n        const prevRow = apiResults[index-1];\n\n        const totalAllocation = row.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        const prevTotalAllocation = prevRow.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        let hasRebalanced = false;\n        row.protocolsData.forEach( p => {\n          if (hasRebalanced){\n            return;\n          }\n          const prevP = prevRow.protocolsData.find( prevP => (prevP.protocolAddr.toLowerCase() === p.protocolAddr.toLowerCase()) );\n          const allocation = this.functionsUtil.fixTokenDecimals(p.allocation,this.props.tokenConfig.decimals);\n          const prevAllocation = this.functionsUtil.fixTokenDecimals(prevP.allocation,this.props.tokenConfig.decimals);\n          const allocationPerc = parseInt(parseFloat(allocation.div(totalAllocation).times(100)));\n          const prevAllocationPerc = parseInt(parseFloat(prevAllocation.div(prevTotalAllocation).times(100)));\n          if (allocationPerc!==prevAllocationPerc){\n            rebalances++;\n            hasRebalanced = true;\n          }\n        });\n      }\n    });\n\n    // Add gov tokens balance to AUM\n    const govTokensPool = await this.functionsUtil.getGovTokenPool(null,null,'DAI');\n    if (govTokensPool){\n      aum = aum.plus(govTokensPool);\n    }\n\n    // Format AUM\n    aum = this.functionsUtil.formatMoney(parseFloat(aum));\n\n    let unlentBalance = await this.functionsUtil.getUnlentBalance(this.props.tokenConfig);\n    if (unlentBalance){\n      unlentBalance = this.functionsUtil.formatMoney(parseFloat(unlentBalance));\n    }\n\n    this.setStateSafe({\n      aum,\n      apr,\n      days,\n      delta,\n      apiResults,\n      rebalances,\n      govTokensPool,\n      unlentBalance,\n      apiResults_unfiltered\n    });\n  }\n\n  selectToken = async (strategy,token) => {\n    await this.props.setStrategyToken(strategy,token);\n    this.props.changeToken(token);\n  }\n\n  handleCarousel = action => {\n    let carouselIndex = this.state.carouselIndex;\n    if (action==='next' && carouselIndex<this.state.carouselMax){\n      carouselIndex++;\n    } else if (action==='back' && carouselIndex>0){\n      carouselIndex--;\n    }\n\n    const $element = window.jQuery(`#carousel-cursor > div:eq(${carouselIndex})`);\n    const carouselOffsetLeft = -parseFloat($element.position().left)+'px';\n\n    this.setStateSafe({\n      carouselIndex,\n      carouselOffsetLeft\n    });\n  }\n\n  render() {\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const apyLong = this.functionsUtil.getGlobalConfig(['messages','apyLong']);\n\n    if (!this.props.availableStrategies){\n      return (\n        <FlexLoader\n          textProps={{\n            textSize:4,\n            fontWeight:2\n          }}\n          loaderProps={{\n            mb:3,\n            size:'40px'\n          }}\n          flexProps={{\n            minHeight:'50vh',\n            flexDirection:'column'\n          }}\n          text={'Loading assets...'}\n        />\n      );\n    }\n\n    if (!this.props.selectedToken){\n      const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n      const enabledTokens = [];\n      const statsTokens = this.functionsUtil.getGlobalConfig(['stats','tokens']);\n      const statsProtocols = this.functionsUtil.getGlobalConfig(['stats','protocols']);\n      Object.keys(statsTokens).forEach(token => {\n        const tokenInfo = statsTokens[token];\n        if (tokenInfo.enabled){\n          enabledTokens.push(token);\n        }\n      });\n      return (\n        <Flex\n          mb={3}\n          width={1}\n          flexDirection={'column'}\n        >\n          <AssetsUnderManagement\n            {...this.props}\n            loaderAlign={'flex-end'}\n          />\n          {\n            Object.keys(strategies).map(strategy => {\n              const strategyInfo = strategies[strategy];\n              const availableTokens = this.props.availableStrategies[strategy];\n              if (!availableTokens){\n                return false;\n              }\n              return (\n                <Box\n                  mb={2}\n                  width={1}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                  key={`strategy-container-${strategy}`}\n                >\n                  <Title\n                    mt={3}\n                    mb={[3,4]}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'baseline'}\n                      justifyContent={'center'}\n                    >\n                      {strategyInfo.title}\n                      {\n                        strategyInfo.titlePostfix &&\n                          <Text\n                            ml={2}\n                            fontWeight={3}\n                            fontSize={[2,4]}\n                            color={'dark-gray'}\n                          >\n                            {strategyInfo.titlePostfix}\n                          </Text>\n                      }\n                    </Flex>\n                  </Title>\n                  <AssetsList\n                    enabledTokens={enabledTokens}\n                    handleClick={(props) => this.selectToken(strategy,props.token)}\n                    cols={[\n                      {\n                        title:'CURRENCY',\n                        props:{\n                          width:[0.26,0.15]\n                        },\n                        fields:[\n                          {\n                            name:'icon',\n                            props:{\n                              mr:2,\n                              height:['1.4em','2.3em']\n                            }\n                          },\n                          {\n                            name:'tokenName'\n                          }\n                        ]\n                      },\n                      {\n                        title:'POOL',\n                        props:{\n                          width:[0.22,0.14],\n                        },\n                        fields:[\n                          {\n                            name:'allocationChart',\n                            mobile:false,\n                            parentProps:{\n                              width:0.3\n                            },\n                            style:{\n                              overflow:'visible'\n                            },\n                            showLoader:false,\n                          },\n                          {\n                            name:'pool',\n                            props:{\n                              ml:1\n                            },\n                            parentProps:{\n                              width:[1,0.7]\n                            }\n                          }\n                        ]\n                      },\n                      {\n                        title:'APY',\n                        desc:apyLong,\n                        props:{\n                          width: [0.29,0.14],\n                        },\n                        parentProps:{\n                          flexDirection:'column',\n                          alignItems:'flex-start',\n                        },\n                        fields:[\n                          {\n                            name:'apy',\n                            showTooltip:true\n                          },\n                          {\n                            name:'idleDistribution',\n                            showLoader:false,\n                            props:{\n                              decimals:this.props.isMobile ? 1 : 2,\n                              fontSize:this.props.isMobile ? '9px' : 0\n                            }\n                          },\n                        ]\n                      },\n                      {\n                        title:'RISK SCORE',\n                        desc:this.functionsUtil.getGlobalConfig(['messages','riskScore']),\n                        mobile:false,\n                        props:{\n                          width:[0.27,0.16],\n                        },\n                        fields:[\n                          {\n                            name:'score'\n                          }\n                        ]\n                      },\n                      {\n                        title:'APR LAST WEEK',\n                        mobile:false,\n                        props:{\n                          width: 0.25,\n                        },\n                        parentProps:{\n                          width:1,\n                          pr:[2,4]\n                        },\n                        fields:[\n                          {\n                            name:'aprChart',\n                          }\n                        ]\n                      },\n                      {\n                        title:'',\n                        props:{\n                          width:[0.23,0.16],\n                        },\n                        parentProps:{\n                          width:1\n                        },\n                        fields:[\n                          {\n                            name:'button',\n                            label:this.props.isMobile ? 'View' : 'View stats',\n                            props:{\n                              width:1,\n                              fontSize:3,\n                              fontWeight:3,\n                              height:'45px',\n                              borderRadius:4,\n                              boxShadow:null,\n                              mainColor:'redeem',\n                              size: this.props.isMobile ? 'small' : 'medium',\n                              handleClick:(props) => this.selectToken(strategy,props.token)\n                            }\n                          }\n                        ]\n                      }\n                    ]}\n                    {...this.props}\n                    selectedStrategy={strategy}\n                    availableTokens={availableTokens}\n                  />\n                  {\n                    !this.props.isMobile &&\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'flex-end'}\n                      >\n                        {\n                          Object.values(statsProtocols).filter( p => (p.legend) ).map( (p,index) => (\n                            <Flex\n                              mr={3}\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              key={`legend_${index}`}\n                            >\n                              <Box\n                                mr={1}\n                                width={'10px'}\n                                height={'10px'}\n                                borderRadius={'50%'}\n                                backgroundColor={`rgb(${p.color.rgb.join(',')})`}\n                              >\n                              </Box>\n                              <Text.span\n                                fontSize={1}\n                                color={'cellText'}\n                              >\n                                {p.label}\n                              </Text.span>\n                            </Flex>\n                          ))\n                        }\n                      </Flex>\n                  }\n                </Box>\n              );\n            })\n          }\n          {\n            idleTokenEnabled && !this.state.showRefreshIdleSpeed ? (\n              <Flex\n                mb={4}\n                width={1}\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <Link\n                  hoverColor={'primary'}\n                  onClick={this.showRefreshIdleSpeed.bind(this)}\n                >\n                  Refresh Idle Speed\n                </Link>\n              </Flex>\n            ) : idleTokenEnabled && this.state.showRefreshIdleSpeed &&\n              <DashboardCard\n                cardProps={{\n                  p:2,\n                  mb:4,\n                  width:1,\n                  mt:[2,3],\n                }}\n                isActive={true}\n                isInteractive={false}\n              >\n                <Flex\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                >\n                  <Text\n                    fontWeight={500}\n                    color={'flashColor'}\n                    textAlign={'center'}\n                    fontSize={[1,'15px']}\n                  >\n                    By executing this transaction you can adjust the IDLE distribution speed among the pools.\n                  </Text>\n                  <ExecuteTransaction\n                    action={'Refresh'}\n                    Component={Button}\n                    parentProps={{\n                      mt:1\n                    }}\n                    componentProps={{\n                      size:'small',\n                      mainColor:'blue',\n                      value:'REFRESH IDLE SPEED'\n                    }}\n                    params={[]}\n                    contractName={'IdleController'}\n                    methodName={'refreshIdleSpeeds'}\n                    {...this.props}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'center'}\n                      justifyContent={'center'}\n                    >\n                      <Icon\n                        mr={1}\n                        name={'Done'}\n                        size={'1.4em'}\n                        color={this.props.theme.colors.transactions.status.completed}\n                      />\n                      <Text\n                        fontWeight={500}\n                        fontSize={'15px'}\n                        color={'copyColor'}\n                        textAlign={'center'}\n                      >\n                        Idle Speed Refreshed\n                      </Text>\n                    </Flex>\n                  </ExecuteTransaction>\n                </Flex>\n              </DashboardCard>\n          }\n        </Flex>\n      );\n    } else {\n      const versionsOptions = Object.keys(globalConfigs.stats.versions).filter( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return versionInfo.enabledTokens.includes(this.props.selectedToken) && versionInfo.enabledStrategies.includes(this.props.selectedStrategy);\n      }).map( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return {\n          value:version,\n          label:versionInfo.label\n        }\n      });\n\n      const versionInfo = this.getVersionInfo(this.state.idleVersion);\n\n      let performanceTooltip = null;\n      if (this.state.idleVersion && versionInfo){\n        const showPerformanceTooltip = this.functionsUtil.getGlobalConfig(['stats','versions',this.state.idleVersion,'showPerformanceTooltip']);\n        performanceTooltip = showPerformanceTooltip ? this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'performanceTooltip']) : null;\n      }\n\n      const versionDefaultValue = versionsOptions.find( v => (v.value === this.state.idleVersion) );\n\n      return (\n        <Flex\n          p={0}\n          width={1}\n          flexDirection={'column'}\n        >\n          {\n          /*\n          }\n          <Flex position={['absolute','relative']} left={0} px={[3,0]} zIndex={10} width={1} flexDirection={'row'} mb={[0,3]}>\n            <Flex alignItems={'center'} width={[2/3,1/2]}>\n              <RouterLink to=\"/\">\n                <Image src=\"images/logo-gradient.svg\"\n                  height={['35px','48px']}\n                  position={'relative'} />\n              </RouterLink>\n              <Heading.h3 color={'dark-gray'} textAlign={'left'} fontWeight={3} lineHeight={'initial'} fontSize={[4,5]} ml={[1,2]}>\n                <Text.span fontSize={'80%'}>|</Text.span> Stats\n              </Heading.h3>\n            </Flex>\n            <Flex flexDirection={'row'} width={[1/3,1/2]} justifyContent={'flex-end'} alignItems={'center'}>\n              {\n                this.state.buttonGroups && \n                  this.props.isMobile ? (\n                    <ButtonGroup\n                      isMobile={this.props.isMobile}\n                      components={ this.state.buttonGroups.reduce((components,array) => components.concat(array),[]) }\n                      theme={'light'}\n                    />\n                  ) :\n                  this.state.buttonGroups.map((buttonGroup,i) => (\n                    <ButtonGroup\n                      key={`buttonGroup_${i}`}\n                      isMobile={this.props.isMobile}\n                      components={buttonGroup}\n                      theme={'light'}\n                    />\n                  ))\n              }\n            </Flex>\n          </Flex>\n          */\n          }\n          <Box\n            mb={[3,4]}\n          >\n            <Flex\n              flexDirection={['column','row']}\n            >\n              <Flex\n                width={[1,0.4]}\n              >\n                <Breadcrumb\n                  {...this.props}\n                  showPathMobile={true}\n                  text={'ASSETS OVERVIEW'}\n                  isMobile={this.props.isMobile}\n                  handleClick={ e => this.props.goToSection('stats') }\n                  path={[this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])]}\n                />\n              </Flex>\n              <Flex\n                mt={[3,0]}\n                width={[1,0.6]}\n                flexDirection={['column','row']}\n                justifyContent={['center','space-between']}\n              >\n                <Flex\n                  width={[1,0.26]}\n                  flexDirection={'column'}\n                >\n                  <GenericSelector\n                    innerProps={{\n                      p:1,\n                      height:['100%','46px'],\n                    }}\n                    name={'idle-version'}\n                    options={versionsOptions}\n                    defaultValue={versionDefaultValue}\n                    onChange={ v => this.setIdleVersion(v) }\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.3]}\n                  flexDirection={'column'}\n                >\n                  <AssetSelector\n                    innerProps={{\n                      p:1\n                    }}\n                    {...this.props}\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.39]}\n                  flexDirection={'column'}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:1,\n                      display:'flex',\n                      alignItems:'center',\n                      height:['46px','100%'],\n                      justifyContent:'center'\n                    }}\n                    isInteractive={true}\n                    handleClick={ e => this.setDateRangeModal(true) }\n                  >\n                    <Text\n                      fontWeight={3}\n                      color={'copyColor'}\n                    >\n                    {\n                      this.state.quickSelection\n                      ?\n                        this.quickSelections[this.state.quickSelection]\n                      : this.state.startTimestampObj && this.state.endTimestampObj &&\n                        `${this.state.startTimestampObj.format('DD/MM/YY')} - ${this.state.endTimestampObj.format('DD/MM/YY')}`\n                    }\n                    </Text>\n                  </DashboardCard>\n                </Flex>\n              </Flex>\n            </Flex>\n          </Box>\n\n          {\n            this.state.idleVersion && (versionInfo.startTimestamp>parseInt(new Date().getTime()/1000)) ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'AccessTime'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Idle Stats {this.state.idleVersion} will be available shortly!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : (\n              <Box\n                width={1}\n              >\n                <Box\n                  mt={[3,0]}\n                  mb={[3,4]}\n                >\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    justifyContent={'center'}\n                    flexDirection={['column','row']}\n                  >\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        value={this.state.aum}\n                        title={'Asset Under Management'}\n                        label={ this.state.unlentBalance ? `Unlent funds: ${this.state.unlentBalance} ${this.props.selectedToken}` : this.props.selectedToken }\n                        labelTooltip={ this.state.unlentBalance ? this.functionsUtil.getGlobalConfig(['messages','cheapRedeem']) : null}\n                      />\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Avg APY'}\n                        label={'Annualized'}\n                      >\n                        <Flex\n                          width={1}\n                          alignItems={'center'}\n                          flexDirection={['column','row']}\n                        >\n                          <VariationNumber\n                            direction={'up'}\n                            iconPos={'right'}\n                            iconSize={'1.8em'}\n                            justifyContent={'flex-start'}\n                            width={1}\n                            >\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                              fontSize={[4,5]}\n                            >\n                              {this.state.apr}\n                              <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                            </Text>\n                          </VariationNumber>\n                        </Flex>\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Overperformance on Compound'}\n                        label={'Annualized'}\n                      >\n                        {\n                          this.state.delta && !isNaN(this.state.delta) ? (\n                            <VariationNumber\n                              direction={'up'}\n                              iconPos={'right'}\n                              iconSize={'1.8em'}\n                              justifyContent={'flex-start'}\n                              >\n                              <Text\n                                lineHeight={1}\n                                fontSize={[4,5]}\n                                fontWeight={[3,4]}\n                                color={'statValue'}\n                              >\n                                {this.state.delta}\n                                <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                              </Text>\n                            </VariationNumber>\n                          ) : (\n                            <Text\n                              lineHeight={1}\n                              fontSize={[4,5]}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                            >\n                              {this.state.delta}\n                            </Text>\n                          )\n                        }\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        label={' '}\n                        title={'Rebalances'}\n                        value={this.state.rebalances.toString()}\n                      />\n                    </Flex>\n                    {\n                    /*\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Current APR</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.currApr}\n                            <Text.span color={'copyColor'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Days Live</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.days}\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    */\n                    }\n                  </Flex>\n                </Box>\n\n                <DashboardCard\n                  title={'Historical Performance'}\n                  description={performanceTooltip}\n                  cardProps={{\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex id='chart-PRICE' width={1} mb={3}>\n                    <StatsChart\n                      height={ 350 }\n                      {...this.state}\n                      parentId={'chart-PRICE'}\n                      isMobile={this.props.isMobile}\n                      contracts={this.props.contracts}\n                      apiResults={this.state.apiResults}\n                      idleVersion={this.state.idleVersion}\n                      apiResults_unfiltered={this.state.apiResults_unfiltered}\n                      chartMode={this.state.idleVersion === this.state.latestVersion ? 'PRICE_V4' : 'PRICE'}\n                    />\n                  </Flex>\n                </DashboardCard>\n\n                <DashboardCard\n                  cardProps={{\n                    pb:3,\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex\n                    flexDirection={['column','row']}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      this.state.idleVersion === this.state.latestVersion && \n                      <Flex\n                        pt={2}\n                        width={[1,1/3]}\n                        id={'allocation-chart'}\n                        flexDirection={'column'}\n                        alignItems={'flex-start'}\n                        justifyContent={'flex-start'}\n                      >\n                        <AllocationChart\n                          height={310}\n                          {...this.props}\n                          parentId={'allocation-chart'}\n                        />\n                        <Rebalance\n                          {...this.props}\n                        />\n                      </Flex>\n                    }\n                    <Flex\n                      mb={[0,3]}\n                      id={'chart-ALL'}\n                      pl={[0,this.state.idleVersion === this.state.latestVersion ? 0 : 3]}\n                      width={[1, this.state.idleVersion === this.state.latestVersion ? 2/3 : 1]}\n                    >\n                      <Flex alignItems={'flex-start'} justifyContent={'flex-start'} flexDirection={'column'} width={1}>\n                        <Heading.h4\n                          mb={2}\n                          ml={3}\n                          mt={[3,4]}\n                          fontWeight={4}\n                          fontSize={[2,3]}\n                          textAlign={'left'}\n                          color={'dark-gray'}\n                          lineHeight={'initial'}\n                        >\n                          Allocations over time\n                        </Heading.h4>\n                        <StatsChart\n                          height={350}\n                          {...this.state}\n                          chartMode={'ALL'}\n                          parentId={'chart-ALL'}\n                          isMobile={this.props.isMobile}\n                          contracts={this.props.contracts}\n                          apiResults={this.state.apiResults}\n                          idleVersion={this.state.idleVersion}\n                          apiResults_unfiltered={this.state.apiResults_unfiltered}\n                        />\n                      </Flex>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n\n                <Flex\n                  position={'relative'}\n                >\n                  <Flex\n                    width={1}\n                    id={'carousel-container'}\n                    justifyContent={'flex-end'}\n                  >\n                    <RoundIconButton\n                      buttonProps={{\n                        mr:3\n                      }}\n                      iconName={'ArrowBack'}\n                      disabled={this.state.carouselIndex === 0}\n                      handleClick={ e => this.handleCarousel('back') }\n                    />\n                    <RoundIconButton\n                      iconName={'ArrowForward'}\n                      handleClick={ e => this.handleCarousel('next') }\n                      disabled={this.state.carouselIndex === this.state.carouselMax}\n                    />\n                  </Flex>\n                  <Flex\n                    mt={5}\n                    height={'400px'}\n                    position={'absolute'}\n                    id={'carousel-cursor'}\n                    width={['444%','200%']}\n                    justifyContent={'flex-start'}\n                    left={this.state.carouselOffsetLeft}\n                    style={{\n                      transition:'left 0.3s ease-in-out'\n                    }}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        id='chart-AUM'\n                      >\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            ml={3}\n                            mt={3}\n                            mb={2}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Asset Under Management\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'AUM'}\n                            parentId={'chart-AUM'}\n                            isMobile={this.props.isMobile}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-APR' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            APRs\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'APR'}\n                            parentId={'chart-APR'}\n                            isMobile={this.props.isMobile}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                      title={'Risk Score'}\n                      description={'Idle Risk Score is a weighted average of the underlying protocols risks assessed by DeFi Score'}\n                      titleParentProps={{\n                        ml:16,\n                        mt:16\n                      }}\n                    >\n                      <Flex id='chart-SCORE' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'SCORE'}\n                            parentId={'chart-SCORE'}\n                            isMobile={this.props.isMobile}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-VOL' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Volume\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'VOL'}\n                            parentId={'chart-VOL'}\n                            isMobile={this.props.isMobile}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                </Flex>\n              </Box>\n            )\n          }\n\n          <DateRangeModal\n            minDate={this.state.minDate}\n            maxDate={this.state.maxDate}\n            handleSelect={this.setDateRange}\n            isOpen={this.state.dateRangeModalOpened}\n            closeModal={e => this.setDateRangeModal(false)}\n            startDate={this.state.startTimestampObj ? this.state.startTimestampObj._d : null}\n            endDate={this.state.endTimestampObj ? this.state.endTimestampObj._d : null}\n          />\n        </Flex>\n      );\n    }\n  }\n}\n\nexport default Stats;","import Title from '../Title/Title';\nimport IconBox from '../IconBox/IconBox';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport { Flex, Icon, Text, Box, Image } from \"rimble-ui\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass Utils extends Component {\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    const SubComponent = this.props.selectedSubsection && this.props.selectedSubsection.subComponent ? this.props.selectedSubsection.subComponent : null;\n    const viewOnly = this.props.connectorName === 'custom';\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.props.selectedSubsection ? (\n            <Box\n              width={1}\n            >\n              <Flex\n                width={1}\n              >\n                <Breadcrumb\n                  {...this.props}\n                  showPathMobile={true}\n                  isMobile={this.props.isMobile}\n                  path={[this.props.selectedSubsection.label]}\n                  text={this.props.selectedSection.label.toUpperCase()}\n                  handleClick={ e => this.props.goToSection(this.props.selectedSection.route) }\n                />\n              </Flex>\n              <Flex\n                my={[2,3]}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <Title\n                  mb={2}\n                >\n                  {this.props.selectedSubsection.label}\n                </Title>\n                <Text\n                  textAlign={'center'}\n                >\n                  {this.props.selectedSubsection.desc}\n                </Text>\n              </Flex>\n              <SubComponent\n                {...this.props}\n                {...this.props.selectedSubsection.directProps}\n                toolProps={this.props.selectedSubsection.props}\n              />\n            </Box>\n          ) : (\n            <Flex\n              my={[2,3]}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Title\n                mb={3}\n              >\n                Tools\n              </Title>\n              <Flex\n                width={1}\n                style={{\n                  flexWrap:'wrap'\n                }}\n                justifyContent={viewOnly ? 'center' : 'flex-start'}\n              >\n              {\n                viewOnly ? (\n                  <IconBox\n                    cardProps={{\n                      maxWidth:[1,'35em']\n                    }}\n                    icon={'Visibility'}\n                    text={'You are using Idle in \"Read-Only\" mode.<br />Logout and connect with your wallet to interact.'}\n                  />\n                ) : this.props.selectedSection.submenu.map( (tool,toolIndex) => (\n                  <DashboardCard\n                    isInteractive={true}\n                    key={`tool_${toolIndex}`}\n                    cardProps={{\n                      p:[3,4],\n                      mb:[3,3],\n                      mr:[0,'2%'],\n                      style:{\n                        flex: this.props.isMobile ? '1 1 100%' : '0 0 31%'\n                      },\n                      alignItems:'center',\n                      flexDirection:'column',\n                      justifyContent:'center'\n                    }}\n                    handleClick={ e => this.props.goToSection(this.props.selectedSection.route+'/'+tool.route) }\n                  >\n                    <Text\n                      fontSize={[3,4]}\n                      textAlign={'center'}\n                    >\n                      {tool.label}\n                    </Text>\n                    <Flex\n                      justifyContent={'center'}\n                    >\n                      {\n                        tool.image ? (\n                          <Image\n                            my={[0,2]}\n                            height={'2.2em'}\n                            src={tool.image}\n                          />\n                        ) : tool.icon && (\n                          <Icon\n                            my={[0,2]}\n                            size={'3em'}\n                            name={tool.icon}\n                          />\n                        )\n                      }\n                    </Flex>\n                    <Text\n                      fontSize={[2,2]}\n                      textAlign={'center'}\n                    >\n                      {tool.desc}\n                    </Text>\n                  </DashboardCard>\n                ) )\n              }\n              </Flex>\n            </Flex>\n          )\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default Utils;\n","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Heading, Text, Tooltip, Icon } from \"rimble-ui\";\nimport PortfolioEquity from '../PortfolioEquity/PortfolioEquity';\n\nclass FundsOverview extends Component {\n\n  state = {\n    govTokensAprs:null,\n    aggregatedValues:[],\n    govTokensTotalApr:null,\n    govTokensUserBalance:null,\n    govTokensDistribution:null,\n    govTokensTotalBalance:null,\n    govTokensTotalAprTooltip:null,\n    idleTokenUserDistribution:null,\n    govTokensDistributionTooltip:null,\n    govTokensTotalBalanceTooltip:null\n  };\n\n  // Utils\n  functionsUtil = null;\n  idleGovToken = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    this.idleGovToken = this.functionsUtil.getIdleGovToken();\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const isRisk = this.props.selectedStrategy === 'risk';\n\n    const [\n      govTokensAprs,\n      idleTokenUserDistribution,\n      govTokensUserBalance,\n      depositTimestamp,\n      days,\n    ] = await Promise.all([\n      this.functionsUtil.getGovTokensAprs(this.props.selectedToken,this.props.tokenConfig),\n      this.idleGovToken.getUserDistribution(this.props.account,govTokenAvailableTokens,true),\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,null),\n      this.functionsUtil.loadAssetField('depositTimestamp',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    const avgAPY = await this.functionsUtil.getAvgAPYStats(this.props.tokenConfig.address,isRisk,depositTimestamp);\n\n    const govTokensTotalBalance = govTokensUserBalance ? Object.values(govTokensUserBalance).reduce( (totBalance,govTokenBalance) => {\n      return totBalance.plus(this.functionsUtil.BNify(govTokenBalance));\n    },this.functionsUtil.BNify(0)) : null;\n\n    const govTokensTotalBalanceTooltip = govTokensUserBalance ? Object.keys(govTokensUserBalance).map( govToken => {\n      const balance = govTokensUserBalance[govToken];\n      if (balance.gt(0)){\n        return `+${balance.toFixed(2)} ${govToken}`;\n      } else {\n        return null;\n      }\n    }).filter(v => (v !== null)) : null;\n\n    // console.log(govTokensTotalBalance,govTokensUserBalance,govTokensTotalBalanceTooltip);\n\n    const govTokensTotalApr = govTokensAprs ? Object.values(govTokensAprs).reduce( (totApr,govTokenApr) => {\n      return totApr.plus(this.functionsUtil.BNify(govTokenApr));\n    },this.functionsUtil.BNify(0)) : null;\n\n    const govTokensTotalAprTooltip = govTokensAprs ? Object.keys(govTokensAprs).map( govToken => {\n      const apr = govTokensAprs[govToken];\n      if (apr.gt(0)){\n        return `${govToken}: ${apr.toFixed(2)}%`;\n      }\n      return null;\n    }).filter(v => (v !== null)) : null;\n\n    /*\n    const govTokensDistributionTooltip = govTokensUserDistribution ? Object.keys(govTokensUserDistribution).map( govToken => {\n      const speed = govTokensUserDistribution[govToken];\n      if (speed.gt(0)){\n        const distributionFrequency = this.functionsUtil.getGlobalConfig(['govTokens',govToken,'distributionFrequency']);\n        return `+${speed.toFixed(4)} ${govToken}/${distributionFrequency}`;\n      }\n      return null;\n    }).filter(v => (v !== null)) : null;\n    */\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          desc:this.functionsUtil.getGlobalConfig(['messages','apyLong']),\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '-') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    this.setState({\n      govTokensAprs,\n      aggregatedValues,\n      govTokensTotalApr,\n      govTokensUserBalance,\n      govTokensTotalBalance,\n      govTokensTotalAprTooltip,\n      idleTokenUserDistribution,\n      govTokensTotalBalanceTooltip\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Flex\n                          mt={2}\n                          width={1}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <Text\n                            fontWeight={2}\n                            fontSize={[1,2]}\n                            color={'cellText'}\n                          >\n                            {v.props.title}\n                          </Text>\n                          {\n                            v.props.desc && \n                              <Tooltip\n                                placement={'bottom'}\n                                message={v.props.desc}\n                              >\n                                <Icon\n                                  ml={2}\n                                  name={\"Info\"}\n                                  size={'1em'}\n                                  color={'cellTitle'}\n                                />\n                              </Tooltip>\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquity\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              chartToken={this.props.selectedToken}\n              enabledTokens={[this.props.selectedToken]}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLent',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:this.props.theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPerc',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.govTokensTotalBalanceTooltip && this.state.govTokensTotalBalanceTooltip.length>0 && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      this.state.govTokensTotalBalanceTooltip.map((govTokenBalance,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          mt={govTokenIndex ? 1 : 0}\n                          key={`govToken_${govTokenIndex}`}\n                        >\n                          {govTokenBalance}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                )/* : this.state.govTokensUserBalance && Object.keys(this.state.govTokensUserBalance).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + ${this.state.govTokensTotalBalance.toFixed(4)}\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalBalanceTooltip.join(' / ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Fees\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'feesCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'apy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.idleTokenUserDistribution && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      mt={1}\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      {this.state.idleTokenUserDistribution.toFixed(4)} {this.idleGovToken.tokenName}/{this.idleGovToken.tokenConfig.distributionFrequency}\n                    </Text>\n                  </Flex>\n                )\n                /*\n                this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length===1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      Object.keys(this.state.govTokensAprs).map((govToken,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          ml={govTokenIndex ? 2 : 0}\n                          key={`govToken_${govToken}`}\n                        >\n                          {this.state.govTokensAprs[govToken].toFixed(2)}% {govToken}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                ) : this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + {this.state.govTokensTotalApr.toFixed(2)}%\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalAprTooltip.join('; ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Risk Score\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'score',\n                  props:{\n                    decimals:1,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverview;","import React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Icon, Checkbox, Box, Link, Input, Tooltip } from \"rimble-ui\";\n\nclass CurveRedeem extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    tokenConfig:null,\n    unevenAmounts:null,\n    selectedToken:null,\n    availableTokens:null,\n    buttonDisabled:false,\n    showMaxSlippage:false,\n    redeemUnderlying:true,\n    curveTokenConfig:null,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    curveTokensAmounts:null,\n    fastBalanceSelector:null,\n    redeemUnevenAmounts:false,\n    curveRedeemableIdleTokens:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.initToken();\n  }\n\n  showMaxSlippage(){\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  async calculateSlippage(max_slippage=null){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (!inputValue || inputValue.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    let withdrawSlippage = null;\n    let curveTokensAmounts = null;\n    let curveIdleTokensAmounts = null;\n    if (this.state.redeemUnevenAmounts){\n      [\n        curveTokensAmounts,\n        curveIdleTokensAmounts\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokensAmounts(this.props.account,normalizedAmount,true),\n        this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,normalizedAmount)\n      ]);\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false,curveIdleTokensAmounts);\n    } else {\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false);\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const redeemableBalance = inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.times(100).plus(this.state.maxSlippage || this.functionsUtil.BNify(0)).div(100)));\n      curveTokensAmounts = {};\n      curveTokensAmounts[this.state.selectedToken] = redeemableBalance;\n    }\n\n    if (withdrawSlippage){\n      withdrawSlippage = withdrawSlippage.times(100);\n    }\n\n    this.setState({\n      withdrawSlippage,\n      curveTokensAmounts,\n      curveIdleTokensAmounts\n    });\n\n    // Add max slippage but don't save in state\n    if (withdrawSlippage && max_slippage){\n      withdrawSlippage = withdrawSlippage.plus(max_slippage);\n    }\n\n    return withdrawSlippage;\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.tokenConfig.idle.token !== this.props.tokenConfig.idle.token;\n    if (tokenChanged){\n      await this.initToken();\n    }\n\n    const redeemUnevenAmountsChanged = prevState.redeemUnevenAmounts !== this.state.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    const inputChanged = prevState.inputValue !== this.state.inputValue;\n    const maxSlippageChanged = parseFloat(prevState.maxSlippage) !== parseFloat(this.state.maxSlippage);\n    const tokenConfigChanged = JSON.stringify(prevState.tokenConfig) !== JSON.stringify(this.state.tokenConfig);\n    if (inputChanged || tokenConfigChanged || maxSlippageChanged){\n      this.calculateSlippage();\n    }\n\n    const selectedTokenChanged = prevState.selectedToken !== this.state.selectedToken;\n    if (selectedTokenChanged){\n      this.loadSelectedTokenConfig();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    let buttonDisabled = false;\n\n    // if (this.state.redeemUnevenAmounts){\n      buttonDisabled = !amount || amount.gt(this.state.curveTokenBalance);\n    // } else {\n      // buttonDisabled = !amount || amount.gt(this.state.redeemableBalance);\n    // }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    let inputValue = null;\n\n    // if (this.state.redeemUnevenAmounts){\n    inputValue = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n    // } else {\n      // inputValue = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n    // }\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  selectDestinationToken(selectedToken){\n    this.setState({\n      selectedToken\n    });\n  }\n\n  async loadSelectedTokenConfig(){\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const tokenConfig = this.state.availableTokens[this.state.selectedToken];\n    const curveTokenConfig = curveConfig.availableTokens[tokenConfig.idle.token];\n    this.setState({\n      tokenConfig,\n      curveTokenConfig\n    });\n  }\n\n  async initToken(){\n    const [curvePoolContract,curveSwapContract] = await Promise.all([\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract()\n    ]);\n\n    const [\n      curveTokenPrice,\n      curveTokenBalance,\n      curveRedeemableIdleTokens,\n    ] = await Promise.all([\n      this.functionsUtil.getCurveTokenPrice(),\n      this.functionsUtil.getCurveTokenBalance(this.props.account),\n      this.functionsUtil.getCurveRedeemableIdleTokens(this.props.account)\n    ]);\n\n    const unevenAmounts = [];\n    const redeemableBalance = curveTokenBalance ? curveTokenBalance.times(curveTokenPrice) : this.functionsUtil.BNify(0);\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();;\n    const selectedToken = Object.keys(availableTokens)[0];\n\n    this.setState({\n      selectedToken,\n      unevenAmounts,\n      curveTokenPrice,\n      availableTokens,\n      curvePoolContract,\n      curveSwapContract,\n      curveTokenBalance,\n      redeemableBalance,\n      curveRedeemableIdleTokens\n    });\n  }\n\n  async redeem(){\n\n    if (!this.state.curveTokenBalance){\n      return false;\n    }\n\n    const callbackRedeem = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveRedeem`,\n        eventAction: this.props.selectedToken,\n        eventValue: this.state.curveTokenBalance.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackRedeem === 'function' && txSucceeded){\n        this.props.callbackRedeem(tx);\n      }\n    };\n\n    const callbackReceiptRedeem = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.curveSwapContract.name;\n    const withdrawSlippage = await this.calculateSlippage(this.state.maxSlippage);\n    const max_slippage = this.functionsUtil.BNify(this.state.maxSlippage).div(100);\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    // const curveTokenBalance = this.functionsUtil.normalizeTokenAmount(this.state.curveTokenBalance,this.state.curvePoolContract.decimals);\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    if (this.state.redeemUnevenAmounts){\n      const min_amounts = this.state.redeemUnderlying ? await this.functionsUtil.getCurveTokensAmounts(this.props.account,_amount,false,true) : await this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,_amount,max_slippage);\n      console.log('remove_liquidity',_amount.toString(),min_amounts);\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    } else {\n      const coin_index = this.state.curveTokenConfig.migrationParams.coinIndex;\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.div(100))),this.state.tokenConfig.decimals);\n      // const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.minus(inputValue.times(withdrawSlippage.div(100))),this.state.curveTokenConfig.decimals);\n      // let _token_amount = await this.functionsUtil.getCurveTokenAmount(amounts,false);\n      // _token_amount = this.functionsUtil.BNify(_token_amount).isGreaterThan(curveTokenBalance) ? curveTokenBalance : this.functionsUtil.BNify(_token_amount);\n\n      console.log('remove_liquidity_one_coin',_amount, coin_index, min_amount);\n\n      // debugger;\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_one_coin', [_amount, coin_index, min_amount, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    }\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  getFastBalanceSelector(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n\n  render() {\n\n    const showSlippage = !this.state.buttonDisabled && this.state.withdrawSlippage;\n    const curveTokenName = this.functionsUtil.getGlobalConfig(['curve','poolContract','token']);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          {\n            !this.state.curveTokenBalance ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3,\n                  minHeight:'195px',\n                  style:{\n                    display:'flex',\n                    alignItems:'center',\n                    justifyContent:'center'\n                  }\n                }}\n              >\n                <FlexLoader\n                  flexProps={{\n                    flexDirection:'row'\n                  }}\n                  loaderProps={{\n                    size:'30px'\n                  }}\n                  textProps={{\n                    ml:2\n                  }}\n                  text={'Checking Curve Pool...'}\n                />\n              </DashboardCard>\n            ) : this.state.processing.loading ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3\n                }}\n              >\n                <Flex\n                  flexDirection={'column'}\n                >\n                  <TxProgressBar\n                    web3={this.props.web3}\n                    hash={this.state.processing.txHash}\n                    endMessage={`Finalizing redeem request...`}\n                    cancelTransaction={this.cancelTransaction.bind(this)}\n                    waitText={ this.props.waitText ? this.props.waitText : 'Redeem estimated in'}\n                  />\n                </Flex>\n              </DashboardCard>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    mb:2\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'1.8em'}\n                      color={'cellText'}\n                      name={'FileUpload'}\n                    />\n                    <Text\n                      mt={1}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Withdraw from the Curve Pool in a specific token or in uneven amounts of tokens (with no slippage).\n                    </Text>\n                    <Flex\n                      mt={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                    >\n                      <Checkbox\n                        required={false}\n                        label={`Redeem with no slippage`}\n                        checked={this.state.redeemUnevenAmounts}\n                        onChange={ e => this.toggleUnevenAmounts(e.target.checked) }\n                      />\n                      <Tooltip\n                        placement={'top'}\n                        message={`You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.`}\n                      >\n                        <Icon\n                          size={'1em'}\n                          color={'cellTitle'}\n                          name={\"InfoOutline\"}\n                        />\n                      </Tooltip>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n                {\n                  !this.state.redeemUnevenAmounts/* && (!this.props.selectedToken || (this.state.showMaxSlippage && showSlippage))*/ && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      {\n                        this.state.tokenConfig && \n                          <Box\n                            width={1}\n                          >\n                            <Text\n                              mb={1}\n                            >\n                              Select destination token:\n                            </Text>\n                            <AssetSelector\n                              {...this.props}\n                              id={'token-from'}\n                              showBalance={false}\n                              tokenConfig={this.state.tokenConfig}\n                              selectedToken={this.state.selectedToken}\n                              availableTokens={this.state.availableTokens}\n                              onChange={this.selectDestinationToken.bind(this)}\n                            />\n                          </Box>\n                      }\n                    </Box>\n                  )\n                }\n                {\n                  this.state.curveTokensAmounts && !this.state.buttonDisabled && (\n                    <DashboardCard\n                      cardProps={{\n                        mt:1,\n                        mb:2,\n                        py:2,\n                        px:1\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Text\n                          mt={1}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          You will receive:\n                        </Text>\n                        <Flex\n                          mt={2}\n                          width={1}\n                          boxShadow={0}\n                          style={{\n                            flexWrap:'wrap'\n                          }}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                          >\n                            {\n                              Object.keys(this.state.curveTokensAmounts).map( token => {\n                                const balance = this.state.curveTokensAmounts[token];\n                                return (\n                                  <Flex\n                                    mb={1}\n                                    mx={1}\n                                    width={'auto'}\n                                    flexDirection={'row'}\n                                    key={`tokenBalance_${token}`}\n                                    justifyContent={'flex-start'}\n                                  >\n                                    <AssetField\n                                      token={token}\n                                      tokenConfig={{\n                                        token:token\n                                      }}\n                                      fieldInfo={{\n                                        name:'icon',\n                                        props:{\n                                          mr:1,\n                                          width:['1.4em','1.6em'],\n                                          height:['1.4em','1.6em']\n                                        }\n                                      }}\n                                    />\n                                    <SmartNumber\n                                      ml={1}\n                                      fontSize={[0,1]}\n                                      fontWeight={500}\n                                      maxPrecision={4}\n                                      color={'cellText'}\n                                      number={balance.toString()}\n                                    />\n                                  </Flex>\n                                );\n                            })\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n                {\n                  this.state.showMaxSlippage && showSlippage && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Text>\n                          Choose max slippage:\n                        </Text>\n                        <Tooltip\n                          placement={'top'}\n                          message={`Max additional slippage on top of the one shown below`}\n                        >\n                          <Icon\n                            ml={1}\n                            size={'1em'}\n                            color={'cellTitle'}\n                            name={\"InfoOutline\"}\n                          />\n                        </Tooltip>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        {\n                          [0.2,0.5,1,5].map( slippage => (\n                            <FastBalanceSelector\n                              cardProps={{\n                                p:1\n                              }}\n                              textProps={{\n                                fontSize:1\n                              }}\n                              percentage={slippage}\n                              key={`selector_${slippage}`}\n                              onMouseDown={()=>this.setMaxSlippage(slippage)}\n                              isActive={this.state.maxSlippage === parseFloat(slippage)}\n                            />\n                          ))\n                        }\n                      </Flex>\n                    </Box>\n                  )\n                }\n                <Flex\n                  mb={3}\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  <Flex\n                    mb={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'flex-end'}\n                  >\n                    {\n                      showSlippage && (\n                        <Flex\n                          width={1}\n                          maxWidth={'40%'}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            textAlign={'right'}\n                            style={{\n                              whiteSpace:'nowrap'\n                            }}\n                            color={ parseFloat(this.state.withdrawSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                          >\n                            {\n                              parseFloat(this.state.withdrawSlippage.toFixed(3)) === 0 ?\n                                'No Slippage'\n                              : `${ this.state.withdrawSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.withdrawSlippage.abs().toFixed(3)}%`\n                            }\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={ this.state.redeemUnevenAmounts ? `You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.` : this.state.withdrawSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                          {\n                            !this.state.redeemUnevenAmounts &&\n                              <Link\n                                ml={1}\n                                color={'copyColor'}\n                                hoverColor={'primary'}\n                                onClick={this.showMaxSlippage.bind(this)}\n                              >\n                                change\n                              </Link>\n                          }\n                        </Flex>\n                      )\n                    }\n                    <Flex\n                      width={1}\n                      maxWidth={'60%'}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      justifyContent={'flex-end'}\n                    >\n                      <Link\n                        fontSize={1}\n                        fontWeight={3}\n                        color={'dark-gray'}\n                        textAlign={'right'}\n                        hoverColor={'copyColor'}\n                        onClick={ (e) => this.setFastBalanceSelector(100) }\n                        style={{\n                          maxWidth:'100%',\n                          overflow:'hidden',\n                          whiteSpace:'nowrap',\n                          textOverflow:'ellipsis'\n                        }}\n                      >\n                        {this.state.curveTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {curveTokenName}\n                      </Link>\n                    </Flex>\n                  </Flex>\n                  <Input\n                    min={0}\n                    type={\"number\"}\n                    required={true}\n                    height={'3.4em'}\n                    borderRadius={2}\n                    fontWeight={500}\n                    boxShadow={'none !important'}\n                    placeholder={`Insert amount`}\n                    onChange={this.changeInputValue.bind(this)}\n                    border={`1px solid ${this.props.theme.colors.divider}`}\n                    value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                  />\n                  <Flex\n                    mt={2}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      [25,50,75,100].map( percentage => (\n                        <FastBalanceSelector\n                          percentage={percentage}\n                          key={`selector_${percentage}`}\n                          onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                          isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                        />\n                      ))\n                    }\n                  </Flex>\n                </Flex>\n                <Flex\n                  justifyContent={'center'}\n                >\n                  <RoundButton\n                    buttonProps={{\n                      mt:2,\n                      width:[1,1/2],\n                      disabled:this.state.buttonDisabled\n                    }}\n                    handleClick={this.redeem.bind(this)}\n                  >\n                    Redeem\n                  </RoundButton>\n                </Flex>\n              </Flex>\n            )\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveRedeem;","import React, { Component } from 'react';\nimport {\n  Button,\n  Flex,\n  Box,\n  Text\n} from \"rimble-ui\";\nimport styles from './TwitterShareButton.module.scss';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\n\nclass TwitterShareButton extends Component {\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  componentWillMount() {\n    this.loadUtils();\n  }\n\n  componentDidMount() {\n    this.loadUtils();\n  }\n\n  componentDidUpdate() {\n    this.loadUtils();\n  }\n\n  share = () => {\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'Share',\n      eventAction: 'twitter',\n      eventLabel: this.props.parent\n    });\n\n    const w = Math.min(window.innerWidth,600);\n    const h = 350;\n    const x = (window.innerWidth-w)/2;\n    const y = 150;\n    window.open(`https://twitter.com/intent/tweet?text=${this.props.tweet}`,\"_blank\",`toolbar=yes,scrollbars=no,resizable=no,top=${y},left=${x},width=${w},height=${h}`);\n  }\n\n  render() {\n    return (\n        <Button\n          borderRadius={1}\n          mainColor={'#2aa6f2'}\n          contrastColor={'white'}\n          onClick={ e => { this.share() } }\n        >\n          <Flex flexDirection={'row'} alignItems={'center'} justifyContent={'center'}>\n            <Box className={styles.twitterIcon} />\n            <Text color={'white'} fontWeight={3} ml={2}>{ this.props.text ? this.props.text : 'Tweet' }</Text>\n          </Flex>\n        </Button>\n    );\n  }\n}\n\nexport default TwitterShareButton;\n","import React from \"react\";\nimport {\n  Text,\n  Modal,\n  Link,\n  Flex\n} from \"rimble-ui\";\nimport ModalCard from './ModalCard';\nimport TwitterShareButton from '../../TwitterShareButton/TwitterShareButton.js';\nimport Confetti from 'react-confetti/dist/react-confetti';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\n\nclass ShareModal extends React.Component {\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  componentWillMount() {\n    this.loadUtils();\n  }\n\n  componentDidMount() {\n    this.loadUtils();\n  }\n\n  componentDidUpdate() {\n    this.loadUtils();\n  }\n\n  closeModal = async (action) => {\n    const globalConfigs = this.functionsUtil.getGlobalConfigs();\n    // Send Google Analytics event\n    if (globalConfigs.analytics.google.events.enabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'Share',\n        eventAction: action,\n        eventLabel: 'ShareModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n    const tweet = window.escape(this.props.tweet);\n    const customText = {__html: this.props.text};\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        <ModalCard closeFunc={this.props.closeModal}>\n          {\n            this.props.confettiEnabled &&\n            <Confetti\n              style={{ position: 'fixed','zIndex':9999 }}\n              run={true}\n              recycle={true}\n              width={window.innerWidth}\n              height={window.innerHeight}\n            />\n          }\n          <ModalCard.Header title={this.props.title} icon={this.props.icon}></ModalCard.Header>\n          <ModalCard.Body>\n            <Flex my={3} width={1} flexDirection={'column'} mx={'auto'}>\n              <Text color={'dark-gray'} textAlign={'center'} fontSize={3} mb={2} dangerouslySetInnerHTML={customText}></Text>\n            </Flex>\n            <Flex mb={3} flexDirection={'column'} alignItems={'center'} justifyContent={'center'}>\n              <TwitterShareButton tweet={tweet} text={'Share now'} parent={'ShareModal'} />\n              <Link mt={2} onClick={ e => this.closeModal('continue_without_sharing') } hoverColor={'blue'}>continue without sharing</Link>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default ShareModal;","import Migrate from '../Migrate/Migrate';\nimport IconBox from '../IconBox/IconBox';\nimport React, { Component } from 'react';\nimport styles from './DepositRedeem.module.scss';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport ConnectBox from '../ConnectBox/ConnectBox';\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport ShareModal from '../utilities/components/ShareModal';\nimport TransactionField from '../TransactionField/TransactionField';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Input, Box, Icon, Link, Checkbox, Tooltip, Image } from \"rimble-ui\";\n\nclass DepositRedeem extends Component {\n\n  state = {\n    txError:{},\n    tokenAPY:'-',\n    inputValue:{},\n    processing:{},\n    curveAPY:null,\n    totalAUM:null,\n    canRedeem:false,\n    maxSlippage:0.2,\n    canDeposit:false,\n    action:'deposit',\n    directMint:false,\n    activeModal:null,\n    showBuyFlow:false,\n    maxUnlentPerc:null,\n    unlentBalance:null,\n    tokenApproved:false,\n    skipMigration:false,\n    showRedeemFlow:false,\n    contractPaused:false,\n    buttonDisabled:false,\n    canRedeemCurve:false,\n    minAmountForMint:null,\n    showMaxSlippage:false,\n    redeemGovTokens:false,\n    canDepositCurve:false,\n    fastBalanceSelector:{},\n    actionProxyContract:{},\n    migrationEnabled:false,\n    componentMounted:false,\n    curveTokenBalance:null,\n    redeemCurveEnabled:false,\n    depositCurveBalance:null,\n    depositCurveEnabled:true,\n    showAdvancedOptions:false,\n    depositCurveSlippage:null,\n    metaTransactionsEnabled:true,\n    minAmountForMintReached:false\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadProxyContracts();\n  }\n\n  async componentDidMount(){\n\n  }\n\n  setShowRedeemFlow = (showRedeemFlow) => {\n    this.setState({\n      showRedeemFlow\n    });\n  }\n\n  setShowBuyFlow = (showBuyFlow) => {\n    this.setState({\n      showBuyFlow\n    });\n  }\n\n  toggleShowAdvancedOptions = showAdvancedOptions => {\n    this.setState((prevState) => ({\n      showAdvancedOptions:!prevState.showAdvancedOptions\n    }));\n  }\n\n  toggleSkipMigration = skipMigration => {\n    this.setState({\n      skipMigration\n    });\n  }\n\n  toggleRedeemCurve = redeemCurveEnabled => {\n    this.setState({\n      redeemCurveEnabled\n    });\n  }\n\n  toggleDepositCurve = depositCurveEnabled => {\n    this.setState({\n      depositCurveEnabled\n    });\n  }\n\n  toggleSkipMint = (directMint) => {\n    this.setState({\n      directMint\n    });\n  }\n\n  toggleRedeemGovTokens = (redeemGovTokens) => {\n    this.setState({\n      redeemGovTokens\n    });\n  }\n\n  toggleMetaTransactionsEnabled = (metaTransactionsEnabled) => {\n    this.setState({\n      metaTransactionsEnabled\n    });\n  }\n\n  async loadProxyContracts(){\n    const actions = ['deposit','redeem'];\n    const newState = {\n      actionProxyContract:{}\n    };\n\n    await this.functionsUtil.asyncForEach(actions,async (action) => {\n      const mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract','methods',action,'proxyContract']);\n      const hasProxyContract = mintProxyContractInfo && mintProxyContractInfo.enabled;\n      newState.actionProxyContract[action] = hasProxyContract ? mintProxyContractInfo : null;\n      if (hasProxyContract){\n        const proxyContract = await this.props.initContract(mintProxyContractInfo.name,mintProxyContractInfo.address,mintProxyContractInfo.abi);\n        newState.actionProxyContract[action].contract = proxyContract.contract;\n        newState.actionProxyContract[action].approved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,mintProxyContractInfo.address,this.props.account);\n      }\n    });\n\n    this.setState(newState);\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadAPY(){\n    const tokenAprs = await this.functionsUtil.getTokenAprs(this.props.tokenConfig);\n    if (tokenAprs && tokenAprs.avgApy !== null){\n      const tokenAPY = this.functionsUtil.BNify(tokenAprs.avgApy).toFixed(2);\n\n      let curveAPY = null;\n      if (this.state.canDepositCurve){\n        curveAPY = await this.functionsUtil.getCurveAPY();\n        // console.log('curveAPY',curveAPY);\n        if (curveAPY){\n          curveAPY = curveAPY.plus(tokenAPY);\n        }\n      }\n      this.setState({\n        tokenAPY,\n        curveAPY\n      });\n    }\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    if (this.props.tokenBalance === null){\n      return false;\n    }\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    const tokenBalanceChanged = prevProps.tokenBalance !== this.props.tokenBalance && this.props.tokenBalance !== null;\n\n    if (tokenChanged || tokenBalanceChanged){\n      await this.loadProxyContracts();\n      this.loadTokenInfo();\n      return false;\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n\n    if (actionChanged || fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const inputValueChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputValueChanged){\n      this.checkMinAmountForMint();\n    }\n\n    const redeemGovTokensChanged = prevState.redeemGovTokens !== this.state.redeemGovTokens;\n    if (redeemGovTokensChanged || actionChanged){\n      this.checkButtonDisabled();\n    }\n\n    const depositCurveChanged = prevState.depositCurveEnabled !== this.state.depositCurveEnabled;\n    const metaTransactionsChanged = prevState.metaTransactionsEnabled !== this.state.metaTransactionsEnabled;\n    if (metaTransactionsChanged || depositCurveChanged){\n      const tokenApproved = await this.checkTokenApproved();\n      this.setState({\n        tokenApproved\n      });\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateCurveSlippage();\n    }\n  }\n\n  async checkMinAmountForMint(){\n    let showPoolPerc = false;\n    let totalAUM = this.state.totalAUM;\n    let maxUnlentPerc = this.state.maxUnlentPerc;\n    const isRisk = this.props.selectedStrategy === 'risk';\n    const inputValue = this.functionsUtil.BNify(this.state.inputValue[this.state.action]);\n\n    if (inputValue.gt(this.props.tokenBalance)){\n      return false;\n    }\n\n    const convertedAmount = await this.functionsUtil.convertTokenBalance(inputValue,this.props.selectedToken,this.props.tokenConfig,isRisk);\n    let minAmountForMint = this.functionsUtil.BNify(this.functionsUtil.getGlobalConfig(['contract','methods','deposit','minAmountForMint']));\n    let minAmountForMintReached = convertedAmount.gte(minAmountForMint);\n\n    // Check token minAmountForMint\n    if (minAmountForMintReached){\n      if (this.props.tokenConfig.deposit && this.props.tokenConfig.deposit.minAmountForMint && convertedAmount.lt(this.props.tokenConfig.deposit.minAmountForMint)){\n        minAmountForMintReached = false;\n      } else {\n        [\n          maxUnlentPerc,\n          totalAUM\n        ] = await Promise.all([\n          maxUnlentPerc || this.functionsUtil.genericContractCall(this.props.tokenConfig.idle.token, 'maxUnlentPerc'),\n          totalAUM ||this.functionsUtil.loadAssetField('pool',this.props.selectedToken,this.props.tokenConfig,this.props.account)\n        ]);\n\n        if (maxUnlentPerc && totalAUM){\n          const depositPerc = inputValue.div(totalAUM).times(100);\n          maxUnlentPerc = this.functionsUtil.BNify(maxUnlentPerc);\n          const maxUnlentPercFormatted = maxUnlentPerc.div(1e3).times(2);\n          if (depositPerc.lt(maxUnlentPercFormatted)){\n            minAmountForMintReached = false;\n          } else if (totalAUM.times(maxUnlentPercFormatted.div(100)).gt(minAmountForMint)) {\n            showPoolPerc = true;\n            minAmountForMint = totalAUM.times(maxUnlentPercFormatted.div(100));\n          }\n        }\n      }\n    }\n\n    this.setState({\n      totalAUM,\n      showPoolPerc,\n      maxUnlentPerc,\n      minAmountForMint,\n      minAmountForMintReached\n    });\n  }\n\n  async calculateCurveSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,curvePoolContractInfo.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositCurveBalance = amount;\n        newState.depositCurveSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      case 'redeem':\n        // newState.redeemBalance = amount;\n        // newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateCurveSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  approveContract = async (callbackApprove,callbackReceiptApprove) => {\n    if (this.state.depositCurveEnabled){\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve','depositContract']);\n      this.functionsUtil.enableERC20(this.props.selectedToken,curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n    } else {\n      const proxyContract = this.state.actionProxyContract[this.state.action];\n      if (proxyContract && this.state.metaTransactionsEnabled && this.props.biconomy){\n        this.functionsUtil.enableERC20(this.props.selectedToken,proxyContract.address,callbackApprove,callbackReceiptApprove);\n      } else {\n        this.functionsUtil.enableERC20(this.props.selectedToken,this.props.tokenConfig.idle.address,callbackApprove,callbackReceiptApprove);\n      }\n    }\n  }\n\n  checkTokenApproved = async () => {\n\n    let tokenApproved = false;\n\n    if (this.state.depositCurveEnabled){\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve','depositContract']);\n      tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,curveDepositContract.address,this.props.account);\n    } else {\n      const proxyContract = this.state.actionProxyContract[this.state.action];\n      if (proxyContract && this.state.metaTransactionsEnabled && this.props.biconomy){\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,proxyContract.address,this.props.account);\n      } else {\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,this.props.tokenConfig.idle.address,this.props.account);\n      }\n    }\n\n    return tokenApproved;\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = await this.checkTokenApproved();\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.props.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.approveContract(callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  loadTokenInfo = async () => {\n\n    if (this.state.componentMounted){\n      this.setState({\n        componentMounted:false\n      });\n    }\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token]);\n    const curveTokenEnabled = curveConfig.enabled && curveTokenConfig && curveTokenConfig.enabled;\n\n    const [\n      tokenApproved,\n      contractPaused,\n      curveSwapContract,\n      curveDepositContract,\n      unlentBalance,\n      {migrationEnabled},\n      curveTokenBalance,\n    ] = await Promise.all([\n      this.checkTokenApproved(),\n      this.functionsUtil.checkContractPaused(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract(),\n      this.functionsUtil.getUnlentBalance(this.props.tokenConfig),\n      this.functionsUtil.checkMigration(this.props.tokenConfig,this.props.account),\n      curveTokenEnabled ? this.functionsUtil.getCurveTokenBalance(this.props.account) : null\n    ]);\n\n    const canDeposit = this.props.tokenBalance && this.functionsUtil.BNify(this.props.tokenBalance).gt(0);\n    const canRedeem = this.props.idleTokenBalance && this.functionsUtil.BNify(this.props.idleTokenBalance).gt(0);\n\n    const canDepositCurve = curveTokenEnabled && canDeposit;\n    const depositCurveEnabled = canDepositCurve;\n\n    const canRedeemCurve = curveTokenEnabled && curveTokenBalance && curveTokenBalance.gt(0);\n    const redeemCurveEnabled = canRedeemCurve;\n\n    const newState = {...this.state};\n\n    // Check curve deposit enabled\n    if (newState.depositCurveEnabled && !curveTokenEnabled){\n      newState.depositCurveEnabled = false;\n    }\n    \n    newState.canRedeem = canRedeem;\n    newState.canDeposit = canDeposit;\n    newState.unlentBalance = unlentBalance;\n    newState.tokenApproved = tokenApproved;\n    newState.contractPaused = contractPaused;\n    newState.canRedeemCurve = canRedeemCurve;\n    newState.canDepositCurve = canDepositCurve;\n    newState.migrationEnabled = migrationEnabled;\n    newState.curveTokenBalance = curveTokenBalance;\n    newState.curveSwapContract = curveSwapContract;\n    newState.redeemCurveEnabled = redeemCurveEnabled;\n    newState.depositCurveEnabled = depositCurveEnabled;\n    newState.curveDepositContract = curveDepositContract;\n\n    newState.txError = {\n      redeem:false,\n      deposit:false\n    };\n    newState.processing = {\n      redeem:{\n        txHash:null,\n        loading:false\n      },\n      deposit:{\n        txHash:null,\n        loading:false\n      },\n      approve:{\n        txHash:null,\n        loading:false\n      },\n      boost:{\n        txHash:null,\n        loading:false\n      }\n    };\n    newState.inputValue = {\n      boost:null,\n      redeem:null,\n      deposit:null\n    };\n    newState.fastBalanceSelector = {\n      boost:null,\n      redeem:null,\n      deposit:null\n    };\n\n    newState.componentMounted = true;\n\n    this.setState(newState,() => {\n      this.checkAction();\n      this.loadAPY();\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const redeemGovTokens = this.state.redeemGovTokens;\n    const inputValue = this.state.inputValue[this.state.action];\n    const selectedPercentage = this.getFastBalanceSelector();\n\n    let loading = true;\n\n    switch (this.state.action){\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        if (!this.state.tokenApproved){\n          return this.approveToken();\n        }\n\n        if (localStorage){\n          this.functionsUtil.setLocalStorage('redirectToFundsAfterLogged',0);\n        }\n\n        this.setState({\n          lendingProcessing: this.props.account,\n          lendAmount: '',\n          genericError: '',\n        });\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.props.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if (this.state.metaTransactionsEnabled && txError){\n            this.setState({\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const isRisk = this.props.selectedStrategy === 'risk';\n\n        const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n        const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token,'enabled']);\n\n        // Handle Curve Deposit\n        if (curveTokenEnabled && this.state.depositCurveEnabled){\n\n          const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,curvePoolContractInfo.decimals);\n\n          const amounts = await this.functionsUtil.getCurveAmounts(this.props.tokenConfig.idle.token,tokensToDeposit);\n          let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n          if (this.state.maxSlippage){\n            minMintAmount = this.functionsUtil.BNify(minMintAmount);\n            minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n            minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n          }\n          \n          const depositParams = [amounts,minMintAmount];\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, callbackDeposit, callbackReceiptDeposit);\n        } else {\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n\n          const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','metaTransactionsEnabled']);\n          // const gasLimitDeposit = this.functionsUtil.BNify(1000000);\n          let depositParams = [];\n\n          // Use Proxy Contract if enabled\n          const mintProxyContractInfo = this.state.actionProxyContract[this.state.action];\n          if (depositMetaTransactionsEnabled && mintProxyContractInfo && this.props.biconomy && this.state.metaTransactionsEnabled){\n            const mintProxyContract = this.state.actionProxyContract[this.state.action].contract;\n            depositParams = [tokensToDeposit, this.props.tokenConfig.idle.address];\n            // console.log('mintProxyContract',mintProxyContractInfo.function,depositParams);\n            if (this.state.metaTransactionsEnabled){\n              const functionSignature = mintProxyContract.methods[mintProxyContractInfo.function](...depositParams).encodeABI();\n              contractSendResult = await this.functionsUtil.sendBiconomyTxWithPersonalSign(mintProxyContractInfo.name, functionSignature, callbackDeposit, callbackReceiptDeposit);\n            } else {\n              contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n            }\n          // Use main contract if no proxy contract exists\n          } else {\n            let _skipMint = !this.state.directMint && this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMint']);\n            _skipMint = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : _skipMint;\n\n            // Check if deposited amount is greated that general lower limit for direct mint\n            if (_skipMint && this.state.minAmountForMintReached){\n              _skipMint = false;\n            }\n\n            depositParams = [tokensToDeposit, _skipMint, '0x0000000000000000000000000000000000000000'];\n            contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'mintIdleToken', depositParams, callbackDeposit, callbackReceiptDeposit);\n          }\n        }\n      break;\n      case 'redeem':\n\n        if (redeemGovTokens){\n          const callbackRedeem = (tx,error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_gov`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: 0\n            };\n\n            if (error){\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error'){\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  txHash:null,\n                  loading:false\n                }\n              }\n            }));\n\n            if (txSucceeded){\n              this.setState((prevState) => ({\n                inputValue:{\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'redeemIdleToken', [0], callbackRedeem, callbackReceiptRedeem);\n          \n        } else {\n\n          if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n            return false;\n          }\n\n          const txData = {\n            value:this.functionsUtil.BNify(inputValue)\n          };\n\n          let idleTokenToRedeem = null;\n          if (selectedPercentage){\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage);\n          } else {\n            const idleTokenPrice = await this.functionsUtil.genericContractCall(this.props.tokenConfig.idle.token, 'tokenPrice');\n            idleTokenToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals)).div(idleTokenPrice);\n          }\n\n          // Normalize number\n          idleTokenToRedeem = this.functionsUtil.normalizeTokenAmount(idleTokenToRedeem,18);\n\n          if (!idleTokenToRedeem){\n            return false;\n          }\n\n          const callbackRedeem = (tx,error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_partial`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: parseInt(inputValue)\n            };\n\n            if (error){\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error'){\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  txHash:null,\n                  loading:false\n                }\n              }\n            }));\n\n            if (txSucceeded){\n              this.setState((prevState) => ({\n                inputValue:{\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          let redeemParams = [idleTokenToRedeem];\n          // console.log(redeemParams,idleTokenToRedeem);\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'redeemIdleToken', redeemParams, callbackRedeem, callbackReceiptRedeem, txData);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    if (contractSendResult !== false){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  showMaxSlippage = () => {\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  checkAction = () => {\n    let action = this.state.action;\n\n    switch(action){\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = 'deposit';\n        }\n      break;\n      default:\n      break;\n    }\n\n    if (action !== this.state.action){\n      this.setState({\n        action\n      },() => {\n        this.checkButtonDisabled();\n      });\n    } else {\n      this.checkButtonDisabled();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && amount.gt(this.props.tokenBalance));\n      break;\n      case 'redeem':\n        buttonDisabled = !this.state.canRedeemCurve && !this.state.redeemGovTokens && ( buttonDisabled || (amount && amount.gt(this.props.redeemableBalance)) );\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.props.tokenBalance ? this.functionsUtil.BNify(this.props.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        amount = this.props.redeemableBalance ? this.functionsUtil.BNify(this.props.redeemableBalance).times(selectedPercentage) : null;\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  changeInputValue = async (e) => {\n    if (!this.state.action){\n      return false;\n    }\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem && !this.state.canRedeemCurve){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const viewOnly = this.props.connectorName === 'custom';\n\n    const govTokensDisabled = this.props.tokenConfig.govTokensDisabled;\n    const govTokensEnabled = this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'govTokensEnabled']);\n    const skipMintForDepositEnabled = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : true;\n    const skipMintCheckboxEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMintCheckboxEnabled']) && skipMintForDepositEnabled;\n\n    const redeemGovTokenEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','redeemGovTokens','enabled']) && !govTokensDisabled && govTokensEnabled;\n    const redeemGovTokens = redeemGovTokenEnabled && this.state.redeemGovTokens && this.state.action === 'redeem';\n\n    const metaTransactionsAvailable = this.props.biconomy && this.state.actionProxyContract[this.state.action];\n    const useMetaTx = metaTransactionsAvailable && this.state.metaTransactionsEnabled;\n    const totalBalance = this.state.action === 'deposit' ? this.props.tokenBalance : this.props.redeemableBalance;\n    const migrateText = this.state.migrationEnabled && this.props.tokenConfig.migration.message !== undefined ? this.props.tokenConfig.migration.message : null;\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token,'enabled']);\n\n    const depositCurve = curveTokenEnabled && this.state.depositCurveEnabled && this.state.action === 'deposit';\n\n    const showDepositOptions = this.state.action === 'deposit' && !this.state.contractPaused && (curveTokenEnabled || this.state.tokenApproved);\n\n    const canPerformAction = /*!depositCurve && !this.state.redeemCurveEnabled && */((this.state.action === 'deposit' && this.state.canDeposit) || (this.state.action === 'redeem' && this.state.canRedeem) || redeemGovTokens);\n    const showDepositCurve = showDepositOptions && curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canDepositCurve && this.state.action === 'deposit';\n    const showRedeemCurve = curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canRedeemCurve && this.state.action === 'redeem';\n\n    const showActionFlow = !redeemGovTokens && canPerformAction;\n    const showBuyFlow = !viewOnly && this.state.componentMounted && (!showDepositCurve || this.state.showBuyFlow) && !this.state.depositCurveEnabled && this.state.tokenApproved && !this.state.contractPaused && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.action === 'deposit' && !this.state.canDeposit;\n    const showRedeemFlow = this.state.canRedeem && (!this.state.redeemCurveEnabled || this.state.showRedeemFlow);\n\n    const showCurveSlippage = depositCurve && this.state.depositCurveSlippage && this.state.depositCurveBalance && !this.state.buttonDisabled;\n\n    const showRebalanceOption = showDepositOptions && this.state.canDeposit && skipMintCheckboxEnabled && this.state.action === 'deposit';\n    const showAdvancedDepositOptions = showDepositCurve || showRebalanceOption;\n\n    const batchDepositInfo = this.functionsUtil.getGlobalConfig(['tools','batchDeposit']);\n    const batchDepositEnabled = batchDepositInfo.enabled && typeof batchDepositInfo.props.availableTokens[this.props.tokenConfig.idle.token] !== 'undefined';\n    const batchDepositDepositEnabled = batchDepositInfo.depositEnabled;\n\n    const showBatchDeposit = batchDepositEnabled && batchDepositDepositEnabled && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          <Box\n            width={1}\n          >\n            <Text mb={1}>\n              Select your asset:\n            </Text>\n            <AssetSelector\n              {...this.props}\n            />\n          </Box>\n          {\n            viewOnly ? (\n              <IconBox\n                cardProps={{\n                  mt:3\n                }}\n                icon={'Visibility'}\n                text={'You are using Idle in \"Read-Only\" mode.<br />Logout and connect with your wallet to interact.'}\n              />\n            ) : (\n              <Migrate\n                {...this.props}\n                migrateTextBefore={migrateText}\n                migrateText={migrateText !== null ? '' : null}\n                toggleSkipMigration={this.toggleSkipMigration.bind(this)}\n              >\n                {\n                  !this.props.account ? (\n                    <ConnectBox\n                      {...this.props}\n                    />\n                  ) :\n                  this.state.componentMounted ? (\n                    this.state.action ? (\n                      <Box width={1}>\n                        <Flex\n                          mt={2}\n                          flexDirection={'column'}\n                        >\n                          <Text mb={2}>\n                            Choose the action:\n                          </Text>\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'space-between'}\n                          >\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                width:0.48,\n                                onMouseDown:() => {\n                                  this.setAction('deposit');\n                                }\n                              }}\n                              isInteractive={true}\n                              isActive={ this.state.action === 'deposit' }\n                            >\n                              <Flex\n                                my={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <TransactionField\n                                  transaction={{\n                                    action:'deposit'\n                                  }}\n                                  fieldInfo={{\n                                    name:'icon',\n                                    props:{\n                                      mr:3\n                                    }\n                                  }}\n                                />\n                                <Text\n                                  fontSize={3}\n                                  fontWeight={3}\n                                >\n                                  Deposit\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                width:0.48,\n                                onMouseDown:() => {\n                                  this.setAction('redeem');\n                                }\n                              }}\n                              isInteractive={true}\n                              isActive={ this.state.action === 'redeem' }\n                              isDisabled={ !this.state.canRedeem && !this.state.canRedeemCurve }\n                            >\n                              <Flex\n                                my={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <TransactionField\n                                  transaction={{\n                                    action:'redeem'\n                                  }}\n                                  fieldInfo={{\n                                    name:'icon',\n                                    props:{\n                                      mr:3\n                                    }\n                                  }}\n                                />\n                                <Text\n                                  fontSize={3}\n                                  fontWeight={3}\n                                >\n                                  Redeem\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          </Flex>\n                        </Flex>\n                        {\n                          showAdvancedDepositOptions ? (\n                            <DashboardCard\n                              cardProps={{\n                                pt:2,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                                pb:this.state.showAdvancedOptions ? 3 : 2,\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <Link\n                                  ml={1}\n                                  mainColor={'primary'}\n                                  hoverColor={'primary'}\n                                  onClick={this.toggleShowAdvancedOptions}\n                                >\n                                  { this.state.showAdvancedOptions ? 'Hide' : 'Show' } advanced options\n                                </Link>\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={this.state.showAdvancedOptions ? 'ArrowDropUp' : 'ArrowDropDown'}\n                                />\n                              </Flex>\n                              {\n                                this.state.showAdvancedOptions &&\n                                  <Flex\n                                    mt={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      showDepositCurve && \n                                        <Flex\n                                          alignItems={'center'}\n                                          justifyContent={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            disabled={this.state.directMint}\n                                            label={`Deposit in the Curve Pool`}\n                                            checked={this.state.depositCurveEnabled}\n                                            onChange={ e => this.toggleDepositCurve(e.target.checked) }\n                                          />\n                                          <Link\n                                            mainColor={'primary'}\n                                            hoverColor={'primary'}\n                                            onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                          >\n                                            (read more)\n                                          </Link>\n                                        </Flex>\n                                    }\n                                    {\n                                      showRebalanceOption && \n                                        <Flex\n                                          alignItems={'center'}\n                                          justifyContent={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            label={`Rebalance the pool`}\n                                            checked={this.state.directMint}\n                                            disabled={this.state.depositCurveEnabled}\n                                            onChange={ e => this.toggleSkipMint(e.target.checked) }\n                                          />\n                                          <Tooltip\n                                            placement={'bottom'}\n                                            message={this.functionsUtil.getGlobalConfig(['messages','directMint'])}\n                                          >\n                                            <Icon\n                                              size={'1em'}\n                                              color={'cellTitle'}\n                                              name={\"InfoOutline\"}\n                                            />\n                                          </Tooltip>\n                                        </Flex>\n                                    }\n                                  </Flex>\n                              }\n                            </DashboardCard>\n                          ) : (\n                            <Flex\n                              width={1}\n                              flexDirection={'column'}\n                            >\n                              {\n                                showDepositCurve && (\n                                  <Flex\n                                    width={1}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <DashboardCard\n                                      isRainbow={true}\n                                      cardProps={{\n                                        py:3,\n                                        px:2,\n                                        mt:3,\n                                        display:'flex',\n                                        alignItems:'center',\n                                        flexDirection:'column',\n                                        justifyContent:'center',\n                                      }}\n                                    >\n                                      <Flex\n                                        width={1}\n                                        alignItems={'center'}\n                                        flexDirection={'column'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Image\n                                          height={'1.8em'}\n                                          src={curveConfig.params.image}\n                                        />\n                                        <Text\n                                          mt={2}\n                                          px={2}\n                                          fontSize={1}\n                                          color={'dark-gray'}\n                                          textAlign={'center'}\n                                        >\n                                          Deposit your tokens in the Curve Pool and boost your APY up to {this.state.curveAPY ? this.state.curveAPY.toFixed(2) : '-'}%.\n                                          <Link\n                                            ml={1}\n                                            mainColor={'primary'}\n                                            hoverColor={'primary'}\n                                            onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                          >\n                                            Read More\n                                          </Link>\n                                        </Text>\n                                        <Checkbox\n                                          mt={2}\n                                          required={false}\n                                          label={`Deposit in Curve`}\n                                          checked={this.state.depositCurveEnabled}\n                                          onChange={ e => this.toggleDepositCurve(e.target.checked) }\n                                        />\n                                      </Flex>\n                                    </DashboardCard>\n                                    {\n                                      (!this.state.showBuyFlow && !this.state.depositCurveEnabled && !this.state.canDeposit) &&\n                                        <Link\n                                          textAlign={'center'}\n                                          hoverColor={'primary'}\n                                          onClick={ e => this.setShowBuyFlow(true) }\n                                        >\n                                          I just want to deposit more {this.props.selectedToken}\n                                        </Link>\n                                    }\n                                  </Flex>\n                                )\n                              }\n                              {\n                                showRebalanceOption && (\n                                  <DashboardCard\n                                    cardProps={{\n                                      py:3,\n                                      px:2,\n                                      mt:3,\n                                      display:'flex',\n                                      alignItems:'center',\n                                      flexDirection:'column',\n                                      justifyContent:'center',\n                                    }}\n                                  >\n                                    <Flex\n                                      width={1}\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        color={'cellText'}\n                                        name={'InfoOutline'}\n                                      />\n                                      <Text\n                                        mt={1}\n                                        px={2}\n                                        fontSize={1}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        By checking this flag you can rebalance the pool and help all users gain an additional APR\n                                      </Text>\n                                    </Flex>\n                                    <Checkbox\n                                      mt={2}\n                                      required={false}\n                                      label={`Rebalance the pool`}\n                                      checked={this.state.directMint}\n                                      onChange={ e => this.toggleSkipMint(e.target.checked) }\n                                    />\n                                  </DashboardCard>\n                                )\n                              }\n                            </Flex>\n                          )\n                        }\n                        {\n                          (metaTransactionsAvailable && !showBuyFlow && !this.state.contractPaused) && \n                          <DashboardCard\n                            cardProps={{\n                              py:3,\n                              px:2,\n                              my:3,\n                              display:'flex',\n                              alignItems:'center',\n                              flexDirection:'column',\n                              justifyContent:'center',\n                            }}\n                          >\n                            {\n                              this.state.metaTransactionsEnabled && this.state.txError[this.state.action] && this.state.actionProxyContract[this.state.action].approved ? (\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    name={'Warning'}\n                                    color={'cellText'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    Seems like you are having some trouble with Meta-Transactions... Disable them by unchecking the box below and try again!\n                                  </Text>\n                                </Flex>\n                              ) : this.functionsUtil.getWalletProvider() === 'WalletConnect' && this.state.metaTransactionsEnabled ? (\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    name={'Warning'}\n                                    color={'cellText'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    Please disable Meta-Transactions if you are using Argent Wallet to avoid failed transactions!\n                                  </Text>\n                                </Flex>\n                              ) : (\n                                <Text\n                                  mt={1}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Meta-Transactions are {this.state.metaTransactionsEnabled ? 'available' : 'disabled'} for {this.state.action}s!<br />\n                                  {\n                                    this.state.metaTransactionsEnabled && !this.state.actionProxyContract[this.state.action].approved && `Please either enable the Smart-Contract to enjoy gas-less ${this.state.action} or just disable meta-tx.`\n                                  }\n                                </Text>\n                              )\n                            }\n                            <Checkbox\n                              mt={2}\n                              required={false}\n                              checked={this.state.metaTransactionsEnabled}\n                              onChange={ e => this.toggleMetaTransactionsEnabled(e.target.checked) }\n                              label={`${this.functionsUtil.capitalize(this.state.action)} with Meta-Transaction`}\n                            />\n                          </DashboardCard>\n                        }\n                        {\n                          (this.state.minAmountForMintReached && this.state.action === 'deposit') && (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                mt:3\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={'InfoOutline'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  By depositing more than {this.functionsUtil.formatMoney(this.state.minAmountForMint)}$ { this.state.showPoolPerc ? `(${this.state.minAmountForMint.div(this.state.totalAUM).times(100).toFixed(0)}% of the pool)` : null } the pool will be automatically rebalanced, gas cost may be higher.\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          showBatchDeposit &&\n                            <Flex\n                              p={2}\n                              mt={3}\n                              width={1}\n                              borderRadius={2}\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              justifyContent={'center'}\n                              backgroundColor={'DashboardCard'}\n                              border={`1px solid ${this.props.theme.colors.primary}`}\n                            >\n                              <Link\n                                textAlign={'center'}\n                                hoverColor={'primary'}\n                                href={`/#/dashboard/tools/${batchDepositInfo.route}/${this.props.tokenConfig.idle.token}`}\n                              >\n                                Gas fees too high? Save gas with our Batch Deposit!\n                              </Link>\n                              <Icon\n                                ml={1}\n                                size={'1em'}\n                                color={'primary'}\n                                name={'LocalGasStation'}\n                              />\n                            </Flex>\n                        }\n                        {\n                          showRedeemCurve && this.state.canRedeem && (\n                            <Flex\n                              width={1}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <DashboardCard\n                                isRainbow={true}\n                                cardProps={{\n                                  py:3,\n                                  px:2,\n                                  mt:3,\n                                  display:'flex',\n                                  alignItems:'center',\n                                  flexDirection:'column',\n                                  justifyContent:'center',\n                                }}\n                              >\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Image\n                                    height={'1.8em'}\n                                    src={curveConfig.params.image}\n                                  />\n                                  <Text\n                                    mt={2}\n                                    px={2}\n                                    fontSize={1}\n                                    color={'dark-gray'}\n                                    textAlign={'center'}\n                                  >\n                                    Redeem your tokens from the Curve Pool.\n                                    <Link\n                                      ml={1}\n                                      mainColor={'primary'}\n                                      hoverColor={'primary'}\n                                      onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                    >\n                                      Read More\n                                    </Link>\n                                  </Text>\n                                  {\n                                    this.state.canRedeem &&\n                                      <Checkbox\n                                        mt={2}\n                                        required={false}\n                                        label={`Redeem from Curve`}\n                                        checked={this.state.redeemCurveEnabled}\n                                        onChange={ e => this.toggleRedeemCurve(e.target.checked) }\n                                      />\n                                  }\n                                </Flex>\n                              </DashboardCard>\n                              {\n                                this.canRedeem &&\n                                  <Link\n                                    textAlign={'center'}\n                                    hoverColor={'primary'}\n                                    onClick={ e => this.setShowRedeemFlow(true) }\n                                  >\n                                    I just want to redeem my {this.props.selectedToken}\n                                  </Link>\n                              }\n                            </Flex>\n                          )\n                        }\n                        {\n                          (this.state.action === 'redeem' && this.state.unlentBalance && showRedeemFlow) &&\n                            <DashboardCard\n                              cardProps={{\n                                py:2,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={'LocalGasStation'}\n                                />\n                                <Text\n                                  px={2}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Available balance for Cheap Redeem\n                                </Text>\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'center'}\n                                    hoverColor={'copyColor'}\n                                  >\n                                    {this.state.unlentBalance.toFixed(4)} {this.props.selectedToken}\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.functionsUtil.getGlobalConfig(['messages','cheapRedeem'])}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              </Flex>\n                            </DashboardCard>\n                        }\n                        {\n                          (this.state.action === 'redeem' && redeemGovTokenEnabled && showRedeemFlow) && (\n                            <DashboardCard\n                              cardProps={{\n                                py:3,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={'InfoOutline'}\n                                />\n                                <Text\n                                  mt={1}\n                                  px={2}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  By redeeming your {this.props.selectedToken} you will automatically get also the proportional amount of governance tokens accrued{ this.props.govTokensBalance && this.props.govTokensBalance.gt(0) ? ` (~ $${this.props.govTokensBalance.toFixed(2)})` : null }.\n                                </Text>\n                              </Flex>\n                              <Checkbox\n                                mt={2}\n                                required={false}\n                                checked={this.state.redeemGovTokens}\n                                label={`Redeem governance tokens only`}\n                                onChange={ e => this.toggleRedeemGovTokens(e.target.checked) }\n                              />\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          (this.state.contractPaused && this.state.action === 'deposit') ? (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                mt:3\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'Warning'}\n                                  color={'cellText'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Deposits for {this.props.selectedToken} are temporarily unavailable due to Smart-Contract maintenance. Redeems are always available.\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          ) : (!this.state.tokenApproved && this.state.action === 'deposit') ? (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                mt:3\n                              }}\n                            >\n                              {\n                                this.state.processing['approve'] && this.state.processing['approve'].loading ? (\n                                  <Flex\n                                    flexDirection={'column'}\n                                  >\n                                    <TxProgressBar\n                                      web3={this.props.web3}\n                                      waitText={`Approve estimated in`}\n                                      endMessage={`Finalizing approve request...`}\n                                      hash={this.state.processing['approve'].txHash}\n                                      cancelTransaction={this.cancelTransaction.bind(this)}\n                                    />\n                                  </Flex>\n                                ) : (\n                                  <Flex\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                  >\n                                    <Icon\n                                      size={'1.8em'}\n                                      name={'LockOpen'}\n                                      color={'cellText'}\n                                    />\n                                    <Text\n                                      mt={3}\n                                      fontSize={2}\n                                      color={'cellText'}\n                                      textAlign={'center'}\n                                    >\n                                      {\n                                        this.state.depositCurveEnabled ? \n                                          `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.`\n                                        : useMetaTx ?\n                                          `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle using Meta-Transaction you need to approve our Smart-Contract first.`\n                                        :\n                                          `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle you need to approve our Smart-Contract first.`\n                                      }\n                                    </Text>\n                                    <RoundButton\n                                      buttonProps={{\n                                        mt:3,\n                                        width:[1,1/2]\n                                      }}\n                                      handleClick={this.approveToken.bind(this)}\n                                    >\n                                      Approve\n                                    </RoundButton>\n                                  </Flex>\n                                )\n                              }\n                            </DashboardCard>\n                          ) : (!showBuyFlow && canPerformAction) && (\n                            !this.state.processing[this.state.action].loading ? (\n                              <Flex\n                                mt={2}\n                                flexDirection={'column'}\n                              >\n                                {\n                                  showActionFlow && (\n                                    <Flex\n                                      mb={3}\n                                      width={1}\n                                      flexDirection={'column'}\n                                    >\n                                      {\n                                        /*\n                                        showCurveSlippage &&\n                                          <DashboardCard\n                                            cardProps={{\n                                              p:3,\n                                              mb:2\n                                            }}\n                                          >\n                                            <Flex\n                                              alignItems={'center'}\n                                              flexDirection={'column'}\n                                            >\n                                              <Icon\n                                                size={'1.8em'}\n                                                color={'cellText'}\n                                                name={'FileUpload'}\n                                              />\n                                              <Text\n                                                mt={2}\n                                                fontSize={2}\n                                                color={'cellText'}\n                                                textAlign={'center'}\n                                              >\n                                                You can deposit {this.state.depositCurveBalance.toFixed(4)} {this.props.selectedToken} in the Curve Pool{ this.state.depositCurveSlippage ? (this.state.depositCurveSlippage.gt(0) ? ` with ${this.state.depositCurveSlippage.times(100).toFixed(2)}% of slippage` : ` with ${Math.abs(parseFloat(this.state.depositCurveSlippage.times(100).toFixed(2)))}% of bonus`) : '' }.\n                                              </Text>\n                                            </Flex>\n                                          </DashboardCard>\n                                        */\n                                      }\n                                      {\n                                        (totalBalance || this.props.tokenFeesPercentage) && (\n                                          <Box\n                                            mb={1}\n                                            width={1}\n                                          >\n                                            {\n                                              this.state.showMaxSlippage && showCurveSlippage && (\n                                                <Box\n                                                  mb={2}\n                                                  width={1}\n                                                >\n                                                  <Flex\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                  >\n                                                    <Text>\n                                                      Choose max slippage:\n                                                    </Text>\n                                                    <Tooltip\n                                                      placement={'top'}\n                                                      message={`Max additional slippage on top of the one shown below`}\n                                                    >\n                                                      <Icon\n                                                        ml={1}\n                                                        size={'1em'}\n                                                        color={'cellTitle'}\n                                                        name={\"InfoOutline\"}\n                                                      />\n                                                    </Tooltip>\n                                                  </Flex>\n                                                  <Flex\n                                                    mt={2}\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                    justifyContent={'space-between'}\n                                                  >\n                                                    {\n                                                      [0.2,0.5,1,5].map( slippage => (\n                                                        <FastBalanceSelector\n                                                          cardProps={{\n                                                            p:1\n                                                          }}\n                                                          textProps={{\n                                                            fontSize:1\n                                                          }}\n                                                          percentage={slippage}\n                                                          key={`selector_${slippage}`}\n                                                          onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                                          isActive={this.state.maxSlippage === parseFloat(slippage)}\n                                                        />\n                                                      ))\n                                                    }\n                                                  </Flex>\n                                                </Box>\n                                              )\n                                            }\n                                            <Flex\n                                              width={1}\n                                              alignItems={'center'}\n                                              flexDirection={'row'}\n                                              justifyContent={'space-between'}\n                                            >\n                                            {\n                                              showCurveSlippage ? (\n                                                <Flex\n                                                  width={1}\n                                                  maxWidth={'50%'}\n                                                  alignItems={'center'}\n                                                  flexDirection={'row'}\n                                                >\n                                                  <Text\n                                                    fontSize={1}\n                                                    fontWeight={3}\n                                                    textAlign={'right'}\n                                                    style={{\n                                                      whiteSpace:'nowrap'\n                                                    }}\n                                                    color={ this.state.depositCurveSlippage.gt(0) ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                                  >\n                                                    {\n                                                      parseFloat(this.state.depositCurveSlippage.times(100).toFixed(2)) === 0 ?\n                                                        'No Slippage'\n                                                      : `${ this.state.depositCurveSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositCurveSlippage.times(100).abs().toFixed(2)}%`\n                                                    }\n                                                  </Text>\n                                                  <Tooltip\n                                                    placement={'top'}\n                                                    message={this.functionsUtil.getGlobalConfig(['messages','curveBonusSlippage'])}\n                                                  >\n                                                    <Icon\n                                                      ml={1}\n                                                      size={'1em'}\n                                                      color={'cellTitle'}\n                                                      name={\"InfoOutline\"}\n                                                    />\n                                                  </Tooltip>\n                                                  <Link\n                                                    ml={1}\n                                                    color={'copyColor'}\n                                                    hoverColor={'primary'}\n                                                    onClick={this.showMaxSlippage}\n                                                  >\n                                                    change\n                                                  </Link>\n                                                </Flex>\n                                              ) : this.props.tokenFeesPercentage && (\n                                                <Flex\n                                                  alignItems={'center'}\n                                                  flexDirection={'row'}\n                                                >\n                                                  <Text\n                                                    fontSize={1}\n                                                    fontWeight={3}\n                                                    color={'dark-gray'}\n                                                    textAlign={'right'}\n                                                    hoverColor={'copyColor'}\n                                                  >\n                                                    Performance fee: {this.props.tokenFeesPercentage.times(100).toFixed(2)}%\n                                                  </Text>\n                                                  <Tooltip\n                                                    placement={'top'}\n                                                    message={this.functionsUtil.getGlobalConfig(['messages','performanceFee'])}\n                                                  >\n                                                    <Icon\n                                                      ml={1}\n                                                      size={'1em'}\n                                                      color={'cellTitle'}\n                                                      name={\"InfoOutline\"}\n                                                    />\n                                                  </Tooltip>\n                                                </Flex>\n                                              )\n                                            }\n                                            {\n                                              totalBalance && (\n                                                <Link\n                                                  fontSize={1}\n                                                  fontWeight={3}\n                                                  color={'dark-gray'}\n                                                  textAlign={'right'}\n                                                  hoverColor={'copyColor'}\n                                                  onClick={ (e) => this.setFastBalanceSelector(100) }\n                                                >\n                                                  {totalBalance.toFixed(6)} {this.props.selectedToken}\n                                                </Link>\n                                              )\n                                            }\n                                            </Flex>\n                                          </Box>\n                                        )\n                                      }\n                                      <Input\n                                        min={0}\n                                        type={\"number\"}\n                                        required={true}\n                                        height={'3.4em'}\n                                        borderRadius={2}\n                                        fontWeight={500}\n                                        className={styles.input}\n                                        borderColor={'cardBorder'}\n                                        backgroundColor={'cardBg'}\n                                        boxShadow={'none !important'}\n                                        placeholder={`Insert amount`}\n                                        onChange={this.changeInputValue.bind(this)}\n                                        border={`1px solid ${this.props.theme.colors.divider}`}\n                                        value={this.state.inputValue[this.state.action] !== null ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]).toFixed() : ''}\n                                      />\n                                      <Flex\n                                        mt={2}\n                                        alignItems={'center'}\n                                        flexDirection={'row'}\n                                        justifyContent={'space-between'}\n                                      >\n                                        {\n                                          [25,50,75,100].map( percentage => (\n                                            <FastBalanceSelector\n                                              percentage={percentage}\n                                              key={`selector_${percentage}`}\n                                              onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                              isActive={this.state.fastBalanceSelector[this.state.action] === parseInt(percentage)}\n                                            />\n                                          ))\n                                        }\n                                      </Flex>\n                                    </Flex>\n                                  )\n                                }\n                                {\n                                  canPerformAction && \n                                    <Flex\n                                      justifyContent={'center'}\n                                      mt={ redeemGovTokens ? 2 : 0 }\n                                    >\n                                      <RoundButton\n                                        buttonProps={{\n                                          width:'auto',\n                                          minWidth:[1,1/2],\n                                          style:{\n                                            textTransform:'capitalize'\n                                          },\n                                          disabled:this.state.buttonDisabled\n                                        }}\n                                        handleClick={this.state.buttonDisabled ? null : this.executeAction.bind(this) }\n                                      >\n                                        {this.state.action}{ redeemGovTokens ? ' Gov Tokens' : '' /*(depositCurve ? ' in Curve' : '')*/ }\n                                      </RoundButton>\n                                    </Flex>\n                                }\n                              </Flex>\n                            ) : (\n                              <Flex\n                                mt={4}\n                                flexDirection={'column'}\n                              >\n                                <TxProgressBar\n                                  web3={this.props.web3}\n                                  cancelTransaction={this.cancelTransaction.bind(this)}\n                                  hash={this.state.processing[this.state.action].txHash}\n                                  endMessage={`Finalizing ${this.state.action} request...`}\n                                  waitText={`${this.functionsUtil.capitalize(this.state.action)} estimated in`}\n                                />\n                              </Flex>\n                            )\n                          )\n                        }\n                      </Box>\n                    ) : null\n                  ) : (\n                    <Flex\n                      mt={4}\n                      flexDirection={'column'}\n                    >\n                      <FlexLoader\n                        flexProps={{\n                          flexDirection:'row'\n                        }}\n                        loaderProps={{\n                          size:'30px'\n                        }}\n                        textProps={{\n                          ml:2\n                        }}\n                        text={'Loading asset info...'}\n                      />\n                    </Flex>\n                  )\n                }\n              </Migrate>\n            )\n          }\n        </Flex>\n        {\n          /*\n          showDepositCurve && this.state.depositCurveEnabled ? (\n            <CurveDeposit\n              {...this.props}\n            />\n          ) :\n          */\n          showRedeemCurve && this.state.redeemCurveEnabled && (\n            <Box\n              mt={3}\n              width={1}\n            >\n              <CurveRedeem\n                {...this.props}\n              />\n            </Box>\n          )\n        }\n        {\n          showBuyFlow &&\n            <Flex\n              mt={3}\n              width={[1,0.5]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <BuyModal\n                {...this.props}\n                showInline={true}\n                availableMethods={[]}\n                buyToken={this.props.selectedToken}\n              />\n            </Flex>\n        }\n\n        <ShareModal\n          confettiEnabled={true}\n          icon={`images/medal.svg`}\n          title={`Congratulations!`}\n          account={this.props.account}\n          closeModal={this.resetModal}\n          tokenName={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'share'}\n          text={`You have successfully deposited in Idle!<br />Enjoy <strong>${this.state.tokenAPY}% APY</strong> on your <strong>${this.props.selectedToken}</strong>!`}\n          tweet={`I'm earning ${this.state.tokenAPY}% APY on my ${this.props.selectedToken} with @idlefinance! Go to ${this.functionsUtil.getGlobalConfig(['baseURL'])} and start earning now from your idle tokens!`}\n        />\n\n      </Flex>\n    );\n  }\n}\n\nexport default DepositRedeem;\n","import theme from '../theme';\nimport { Bar } from '@nivo/bar';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Text, Input, Icon, Tooltip } from \"rimble-ui\";\n\nclass EstimatedEarnings extends Component {\n\n  state = {\n    tokenApy:null,\n    chartData:null,\n    chartProps:null,\n    inputValue:1000,\n    maxInputValue:999999999999999\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    this.loadChart();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged){\n      this.loadChart();\n    }\n  }\n\n  async getTokenApy(){\n    const tokenApy = this.state.tokenApy || await this.functionsUtil.getTokenApy(this.props.tokenConfig);\n    if (this.state.tokenApy !== tokenApy){\n      this.setState({\n        tokenApy\n      });\n    }\n    return tokenApy;\n  }\n\n  async loadChart(){\n\n    const tokenApy = await this.getTokenApy();\n\n    const amount = this.functionsUtil.BNify(this.state.inputValue);\n    const earningsYear = amount.times(tokenApy.div(100));\n\n    const amountMonth = parseFloat(earningsYear.div(12));\n    const amount3Months = parseFloat(earningsYear.div(4));\n    const amount6Months = parseFloat(earningsYear.div(2));\n    const amountYear = parseFloat(earningsYear.div(1));\n\n    const chartData = [\n      {\n        perc:1/12,\n        label:'MONTH',\n        value:amountMonth,\n        month:amountMonth,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        monthColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:3/12,\n        label:'3 MONTHS',\n        value:amount3Months,\n        month3:amount3Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month3Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:6/12,\n        label:'6 MONTHS',\n        value:amount6Months,\n        month6:amount6Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month6Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:1,\n        label:'YEAR',\n        year:amountYear,\n        value:amountYear,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        yearColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      }\n    ];\n\n    let labelTextColorModifiers = this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'chart','labelTextColorModifiers']);\n\n    const maxGridLines = 4;\n    const gridYStep = amountYear/maxGridLines;\n    const gridYValues = [0];\n    for (let i=1;i<=maxGridLines;i++){\n      const gridYValue = i*gridYStep;\n      gridYValues.push(gridYValue);\n    }\n\n    const chartProps = {\n      padding: 0.2,\n      animate: false,\n      indexBy: 'label',\n      // enableLabel: false,\n      labelSkipWidth: 16,\n      labelSkipHeight: 16,\n      keys: ['month','month3','month6','year'],\n      colors: ({ id, data }) => data[`${id}Color`],\n      label: d => this.functionsUtil.abbreviateNumber(d.value,2,4)+' '+this.props.selectedToken,\n      labelTextColor: labelTextColorModifiers ? { from: 'color', modifiers: [ labelTextColorModifiers ] } : null,\n      isInteractive:false,\n      minValue:0,\n      gridYValues,\n      // maxValue:amountYear,\n      axisLeft:{\n        format: v => this.functionsUtil.abbreviateNumber(v,1,3),\n        tickValues:gridYValues,\n        orient: 'left',\n        tickSize: 0,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendPosition: 'middle'\n      },\n      axisBottom:{\n        legend: '',\n        tickSize:0,\n        tickPadding: 15,\n        orient: 'bottom',\n      },\n      theme:{\n        labels:{\n          text:{\n            fontSize:15,\n            fontWeight:600,\n            fill:theme.colors.counter,\n            fontFamily: theme.fonts.sansSerif\n          }\n        },\n        axis: {\n          ticks: {\n            text: {\n              fontSize:14,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '9 5'\n          }\n        },\n      },\n      margin: this.props.isMobile ? { top: 0, right: 0, bottom: 30, left: 0 } : { top: 10, right: 0, bottom: 50, left: 65 }\n    }\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  changeInputValue(e){\n    let inputValue = e.target.value.length && !isNaN(e.target.value) ? Math.min(this.state.maxInputValue,parseFloat(e.target.value)) : 0;\n    inputValue = this.functionsUtil.BNify(inputValue);\n    this.setState({\n      inputValue\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const showAPYDisclaimer = idleTokenEnabled && this.functionsUtil.getGlobalConfig(['govTokens','IDLE','showAPR']);\n\n    return (\n      <DashboardCard\n        cardProps={{\n          p:[3,4]\n        }}\n      >\n        <Flex\n          width={1}\n          flexDirection={['column','row']}\n        >\n          <Flex\n            width={[1,0.3]}\n            flexDirection={'column'}\n            justifyContent={'flex-start'}\n          >\n            <Flex\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <AssetField\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'icon',\n                  props:{\n                    mb:2,\n                    height:'2.5em'\n                  }\n                }}\n              />\n              <Text\n                fontSize={2}\n                color={'cellText'}\n                textAlign={'center'}\n              >\n                Set the amount and see your estimated earnings on time based on the current APY: { this.state.tokenApy ? `${this.state.tokenApy.toFixed(2)}%` : null}\n                {\n                  showAPYDisclaimer && \n                    <Flex\n                      style={{\n                        display:'inline-flex',\n                        verticalAlign:'middle'\n                      }}\n                    >\n                      <Tooltip\n                        placement={'top'}\n                        message={this.functionsUtil.getGlobalConfig(['messages','apyLong'])}\n                      >\n                        <Icon\n                          ml={1}\n                          name={\"Info\"}\n                          size={'1em'}\n                          color={'cellTitle'}\n                        />\n                      </Tooltip>\n                    </Flex>\n                }\n              </Text>\n            </Flex>\n            <Flex\n              mt={3}\n              flexDirection={'column'}\n            >\n              <Input\n                min={0}\n                type={\"number\"}\n                required={true}\n                borderRadius={2}\n                fontWeight={500}\n                textAlign={'center'}\n                height={['3em','3.4em']}\n                borderColor={'cardBorder'}\n                boxShadow={'none !important'}\n                max={this.state.maxInputValue}\n                backgroundColor={'cardBgHover'}\n                onChange={this.changeInputValue.bind(this)}\n                border={`1px solid ${theme.colors.divider}`}\n                placeholder={`Insert ${this.props.selectedToken.toUpperCase()} amount`}\n                value={this.state.inputValue && !isNaN(this.state.inputValue) ? this.state.inputValue : ''}\n              />\n            </Flex>\n            <Flex\n              mt={3}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                buttonProps={{\n                  width:[1,1/2],\n                }}\n                handleClick={this.loadChart.bind(this)}\n              >\n                CALCULATE\n              </RoundButton>\n            </Flex>\n          </Flex>\n          <Flex\n            mt={[3,0]}\n            width={[1,0.7]}\n            id={'estimated-earnings-chart'}\n          >\n            {\n              this.props.isMobile ? (\n                <Flex\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  {\n                    this.state.chartData !== null && this.state.chartData.map((v,index) => (\n                      <Flex\n                        py={2}\n                        my={2}\n                        width={1}\n                        flexDirection={'row'}\n                        key={`earnings_${index}`}\n                      >\n                        <Flex\n                          width={0.35}\n                          alignItems={'center'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            color={'legend'}\n                          >\n                            {v.label}\n                          </Text>\n                        </Flex>\n                        <Flex\n                          width={0.65}\n                          position={'relative'}\n                          alignItems={'center'}\n                          minHeight={['20px','35px']}\n                          justifyContent={'center'}\n                        >\n                          <Flex\n                            zIndex={1}\n                            position={'relative'}\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Text\n                              fontSize={1}\n                              fontWeight={3}\n                              color={'counter'}\n                            >\n                              {this.functionsUtil.abbreviateNumber(v.value,2,4)} {this.props.selectedToken}\n                            </Text>\n                          </Flex>\n                          <Flex\n                            right={0}\n                            width={v.perc}\n                            position={'absolute'}\n                            height={['20px','35px']}\n                            borderRadius={['20px 0 0 20px','35px 0 0 35px']}\n                            style={{background:`linear-gradient(-90deg, rgba(${v.color},0) 0%, rgba(${v.color},1) 100%)`}}\n                          ></Flex>\n                        </Flex>\n                      </Flex>\n                    ))\n                  }\n                </Flex>\n              ) : (\n                <GenericChart\n                  type={Bar}\n                  height={250}\n                  showLoader={true}\n                  {...this.state.chartProps}\n                  data={this.state.chartData}\n                  parentId={'estimated-earnings-chart'}\n                />\n              )\n            }\n          </Flex>\n        </Flex>\n      </DashboardCard>\n    );\n  }\n}\n\nexport default EstimatedEarnings;","import Title from '../Title/Title';\nimport { Box, Flex } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport AssetsList from '../AssetsList/AssetsList';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport FundsOverview from '../FundsOverview/FundsOverview';\nimport DepositRedeem from '../DepositRedeem/DepositRedeem';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport EstimatedEarnings from '../EstimatedEarnings/EstimatedEarnings';\n\nclass AssetPage extends Component {\n\n  state = {\n    tokenFees:{},\n    tokenBalance:{},\n    tokenApproved:{},\n    activeModal:null,\n    govTokensBalance:{},\n    idleTokenBalance:{},\n    redeemableBalance:{},\n    govTokensDisabled:{},\n    availableGovTokens:{},\n    tokenFeesPercentage:{},\n    componentMounted:false\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadTokensInfo(){\n    if (this.props.account){\n      const newState = {...this.state};\n      await this.functionsUtil.asyncForEach(Object.keys(this.props.availableTokens),async (token) => {\n        const tokenConfig = this.props.availableTokens[token];\n        const govTokenAvailableTokens = {};\n        govTokenAvailableTokens[token] = tokenConfig;\n\n        const [\n          tokenFeesPercentage,\n          tokenBalance,\n          tokenFees,\n          idleTokenPrice,\n          idleTokenBalance,\n          tokenApproved,\n          govTokensBalance\n        ] = await Promise.all([\n          this.functionsUtil.getTokenFees(tokenConfig),\n          this.functionsUtil.getTokenBalance(token,this.props.account),\n          this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n          this.functionsUtil.genericContractCall(tokenConfig.idle.token, 'tokenPrice'),\n          this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n          this.functionsUtil.checkTokenApproved(token,tokenConfig.idle.address,this.props.account),\n          this.functionsUtil.getGovTokensUserTotalBalance(this.props.account,govTokenAvailableTokens,'DAI')\n        ]);\n\n        newState.tokenFees[token] = tokenFees;\n        newState.tokenBalance[token] = tokenBalance;\n        newState.tokenApproved[token] = tokenApproved;\n        newState.idleTokenBalance[token] = idleTokenBalance;\n        newState.govTokensBalance[token] = govTokensBalance;\n        newState.tokenFeesPercentage[token] = tokenFeesPercentage;\n        newState.govTokensDisabled[token] = tokenConfig.govTokensDisabled;\n        newState.redeemableBalance[token] = idleTokenBalance ? this.functionsUtil.fixTokenDecimals(idleTokenBalance.times(idleTokenPrice),tokenConfig.decimals) : this.functionsUtil.BNify(0);\n      });\n\n      newState.availableGovTokens = this.functionsUtil.getTokenGovTokens(this.props.tokenConfig);\n\n      newState.componentMounted = true;\n      this.setState(newState);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n    const accountChanged = prevProps.account !== this.props.account;\n    if (accountChanged || transactionsChanged){\n      this.loadTokensInfo();\n    }\n  }\n\n  render() {\n\n    const userHasFunds = this.props.account && this.state.idleTokenBalance[this.props.selectedToken] && this.functionsUtil.BNify(this.state.idleTokenBalance[this.props.selectedToken]).gt(0);\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            <Breadcrumb\n              {...this.props}\n              isMobile={this.props.isMobile}\n              path={[this.props.selectedToken]}\n              handleClick={ e => this.props.goToSection(this.props.selectedStrategy) }\n              text={this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])}\n            />\n          </Flex>\n          <Flex\n            width={0.5}\n            justifyContent={'flex-end'}\n          >\n            <CardIconButton\n              icon={'Add'}\n              {...this.props}\n              text={'Add funds'}\n              handleClick={ e => this.setActiveModal('buy') }\n            />\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Deposit / Redeem\n        </Title>\n        <Flex\n          width={1}\n        >\n          <DepositRedeem\n            {...this.props}\n            tokenFees={this.state.tokenFees[this.props.selectedToken]}\n            tokenBalance={this.state.tokenBalance[this.props.selectedToken]}\n            tokenApproved={this.state.tokenApproved[this.props.selectedToken]}\n            govTokensBalance={this.state.govTokensBalance[this.props.selectedToken]}\n            idleTokenBalance={this.state.idleTokenBalance[this.props.selectedToken]}\n            redeemableBalance={this.state.redeemableBalance[this.props.selectedToken]}\n            tokenFeesPercentage={this.state.tokenFeesPercentage[this.props.selectedToken]}\n          />\n        </Flex>\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverview\n                {...this.props}\n                tokenFees={this.state.tokenFees[this.props.selectedToken]}\n              />\n            </Flex>\n        }\n        {\n          userHasFunds && this.props.account && !this.state.govTokensDisabled[this.props.selectedToken] && Object.keys(this.state.availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id={\"yield-farming\"}\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(this.state.availableGovTokens)}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.30,0.15]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    mobile:false,\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.25],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','govTokenRedeemableBalance']),\n                    props:{\n                      width:[0.35,0.30],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                    ]\n                  },\n                  {\n                    title:'DISTRIBUTION',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','userDistributionSpeed']),\n                    props:{\n                      width:[0.35,0.30],\n                    },\n                    fields:[\n                      {\n                        name:'userDistributionSpeed',\n                        props:{\n                          decimals:6\n                        }\n                      }\n                    ]\n                  },\n                  /*\n                  {\n                    title:'APR',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','govTokenApr']),\n                    props:{\n                      width:[0.2,0.17],\n                    },\n                    fields:[\n                      {\n                        name:'apr',\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','tokenPrice']),\n                    mobile:false,\n                    props:{\n                      width: 0.17,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                  */\n                ]}\n                {...this.props}\n                availableTokens={this.state.availableGovTokens}\n              />\n            </Flex>\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'estimated-earnings-container'}\n          >\n            <Title my={[3,4]}>Estimated earnings</Title>\n            <EstimatedEarnings\n              {...this.props}\n            />\n          </Flex>\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              enabledTokens={[this.props.selectedToken]}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React, { Component } from 'react';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Box, Text, Icon, Tooltip, Link, Input } from \"rimble-ui\";\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\n\nclass CurveDeposit extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    depositSlippage:null,\n    redeemableBalance:null,\n    migrationContract:null,\n    curveTokensBalance:null,\n    migrationSucceeded:false,\n    fastBalanceSelector:null,\n    migrationContractApproved:false,\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    await this.initToken();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const idleTokenBalanceChanged = prevProps.idleTokenBalance !== this.props.idleTokenBalance;\n    if (accountChanged || idleTokenBalanceChanged){\n      await this.initToken();\n    }\n    \n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const inputValueChanged = this.state.inputValue !== prevState.inputValue;\n    if (inputValueChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  setInputValue = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    const inputValue = this.props.idleTokenBalance ? this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage) : null;\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    const buttonDisabled = !amount || amount.gt(this.state.idleTokenBalance);\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  approve = async () => {\n    const migrationContract = this.state.migrationContract;\n    if (migrationContract){\n\n      // Check if the migration contract is approved\n      const migrationContractApproved = await this.checkMigrationContractApproved();\n\n      if (!migrationContractApproved){\n\n        const callbackApprove = (tx,error) => {\n          // Send Google Analytics event\n          const eventData = {\n            eventAction: 'approve',\n            eventCategory: 'CurveDeposit',\n            eventLabel: tx ? tx.status : null\n          };\n\n          const txSucceeded = tx && tx.status === 'success';\n\n          // console.log('callbackApprove',tx,error);\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            migrationContractApproved: txSucceeded, // True\n            processing: {\n              ...prevState.processing,\n              txHash:null,\n              loading:false\n            }\n          }));\n\n          if (typeof this.props.callbackApprove === 'function' && txSucceeded){\n            this.props.callbackApprove(tx);\n          }\n\n          this.checkMigration();\n        };\n\n        const callbackReceiptApprove = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              txHash\n            }\n          }));\n        };\n\n        this.functionsUtil.enableERC20(this.props.selectedToken,migrationContract.address,callbackApprove,callbackReceiptApprove);\n\n        this.setState((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            txHash:null,\n            loading:true\n          },\n          migrationContractApproved:false\n        }));\n      } else {\n        this.setState({\n          migrationContractApproved:true\n        });\n      }\n    }\n  }\n\n  deposit = async () => {\n\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    if (!inputValue){\n      return false;\n    }\n\n    const callbackDeposit = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveDeposit`,\n        eventAction: this.props.selectedToken,\n        eventValue: inputValue.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackDeposit === 'function' && txSucceeded){\n        this.props.callbackDeposit(tx);\n      }\n    };\n\n    const callbackReceiptDeposit = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.migrationContract.name;\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n    const depositParams = await this.getMigrationParams(_amount);\n\n    this.props.contractMethodSendWrapper(contractName, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  cancelTransaction = async () => {\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  async getMigrationParams(toMigrate){\n    const migrationParams = [];\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.selectedToken]);\n\n    if (!curveTokenConfig){\n      return false;\n    }\n    \n    const migrationContractParams = curveTokenConfig.migrationParams;\n    if (migrationContractParams.n_coins){\n      const amounts = await this.functionsUtil.getCurveAmounts(this.props.selectedToken,toMigrate,true);\n      let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n\n      if (this.state.maxSlippage){\n        minMintAmount = this.functionsUtil.BNify(minMintAmount);\n        minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n        minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n      }\n\n      migrationParams.push(amounts);\n      migrationParams.push(minMintAmount);\n    }\n\n    return migrationParams;\n  }\n\n  async calculateSlippage(){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (inputValue){\n      let underlyingBalanceToDeposit = inputValue;\n      if (underlyingBalanceToDeposit){\n        const idleTokenPrice = await this.functionsUtil.getIdleTokenPrice(this.props.tokenConfig);\n        if (idleTokenPrice){\n          underlyingBalanceToDeposit = underlyingBalanceToDeposit.times(idleTokenPrice);\n        }\n      } else {\n        underlyingBalanceToDeposit = this.functionsUtil.BNify(0);\n      }\n\n      const normalizeIdleTokenBalance = this.functionsUtil.normalizeTokenAmount(underlyingBalanceToDeposit,this.props.tokenConfig.decimals);\n      let depositSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizeIdleTokenBalance);\n      if (depositSlippage){\n        depositSlippage = depositSlippage.times(100);\n      }\n\n      this.setState({\n        depositSlippage\n      });\n    }\n  }\n\n  async checkMigrationContractApproved(){\n    const migrationContract = this.state.migrationContract || await this.functionsUtil.getCurveSwapContract();\n    if (migrationContract){\n      return await this.functionsUtil.checkTokenApproved(this.props.tokenConfig.idle.token,migrationContract.address,this.props.account);\n    }\n    return false;\n  }\n\n  async initToken(){\n\n    // Init and check migration contract\n    const migrationContract = await this.functionsUtil.getCurveSwapContract();\n    const migrationContractApproved = await this.checkMigrationContractApproved();\n\n    this.setState({\n      migrationContract,\n      migrationContractApproved\n    });\n  }\n\n  approveCallback = () => {\n    this.initToken();\n  }\n\n  migrationCallback = () => {\n    this.setState({\n      migrationSucceeded:true\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken){\n      return null;\n    }\n\n    // const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const hasCurveTokens = this.state.curveTokensBalance && this.state.curveTokensBalance.gt(0);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n            {\n              this.props.idleTokenBalance && this.props.idleTokenBalance.gt(0) && (\n                <Box\n                  width={1}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:3,\n                      px:[2,4]\n                    }}\n                  >\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    > \n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ this.state.migrationContractApproved ? 'CheckBox' : 'LooksOne'}\n                          color={ this.state.migrationContractApproved ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Approve the Curve contract\n                        </Text>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ hasCurveTokens ? 'CheckBox' : 'LooksTwo'}\n                          color={ hasCurveTokens ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Deposit your {this.props.tokenConfig.idle.token}\n                        </Text>\n                      </Flex>\n                    </Flex>\n                  </DashboardCard>\n                  {\n                    !this.state.migrationContractApproved ?\n                      this.state.processing.loading ? (\n                        <Flex\n                          mt={3}\n                          flexDirection={'column'}\n                        >\n                          <TxProgressBar\n                            web3={this.props.web3}\n                            waitText={`Approve estimated in`}\n                            hash={this.state.processing.txHash}\n                            endMessage={`Finalizing approve request...`}\n                            cancelTransaction={this.cancelTransaction.bind(this)}\n                          />\n                        </Flex>\n                      ) : (\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            mt:3,\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                          >\n                            <Icon\n                              size={'2.3em'}\n                              name={'LockOpen'}\n                              color={'cellText'}\n                            />\n                            <Text\n                              mt={1}\n                              fontSize={2}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              To deposit your {this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.\n                            </Text>\n                            <RoundButton\n                              buttonProps={{\n                                mt:3,\n                                width:[1,1/2]\n                              }}\n                              handleClick={this.approve.bind(this)}\n                            >\n                              Approve\n                            </RoundButton>\n                          </Flex>\n                        </DashboardCard>\n                      )\n                    : this.state.processing.loading ? (\n                      <Flex\n                        mt={3}\n                        flexDirection={'column'}\n                      >\n                        <TxProgressBar\n                          web3={this.props.web3}\n                          waitText={`Deposit estimated in`}\n                          hash={this.state.processing.txHash}\n                          endMessage={`Finalizing deposit request...`}\n                          cancelTransaction={this.cancelTransaction.bind(this)}\n                        />\n                      </Flex>\n                    ) : (\n                      <Box\n                        mt={2}\n                        width={1}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text>\n                            Choose max slippage:\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={`Max additional slippage on top of the one shown below`}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                          justifyContent={'space-between'}\n                        >\n                          {\n                            [0.2,0.5,1,5].map( slippage => (\n                              <FastBalanceSelector\n                                cardProps={{\n                                  p:1\n                                }}\n                                textProps={{\n                                  fontSize:1\n                                }}\n                                percentage={slippage}\n                                key={`selector_${slippage}`}\n                                onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                isActive={this.state.maxSlippage === parseFloat(slippage)}\n                              />\n                            ))\n                          }\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                        >\n                          <Flex\n                            mb={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={this.state.depositSlippage ? 'space-between' : 'flex-end'}\n                          >\n                            {\n                              this.state.depositSlippage && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    textAlign={'right'}\n                                    style={{\n                                      whiteSpace:'nowrap'\n                                    }}\n                                    color={ parseFloat(this.state.depositSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                  >\n                                    {\n                                      parseFloat(this.state.depositSlippage.toFixed(3)) === 0 ?\n                                        'No Slippage'\n                                      : `${ this.state.depositSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositSlippage.abs().toFixed(3)}%`\n                                    }\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.state.depositSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              )\n                            }\n                            {\n                              this.props.idleTokenBalance && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'flex-end'}\n                                >\n                                  <Link\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'right'}\n                                    hoverColor={'copyColor'}\n                                    onClick={ (e) => this.setFastBalanceSelector(100) }\n                                    style={{\n                                      maxWidth:'100%',\n                                      overflow:'hidden',\n                                      whiteSpace:'nowrap',\n                                      textOverflow:'ellipsis'\n                                    }}\n                                  >\n                                    {this.props.idleTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {this.props.selectedToken}\n                                  </Link>\n                                </Flex>\n                              )\n                            }\n                          </Flex>\n                          <Input\n                            min={0}\n                            type={\"number\"}\n                            required={true}\n                            height={'3.4em'}\n                            borderRadius={2}\n                            fontWeight={500}\n                            boxShadow={'none !important'}\n                            placeholder={`Insert amount`}\n                            onChange={this.changeInputValue.bind(this)}\n                            border={`1px solid ${this.props.theme.colors.divider}`}\n                            value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                          />\n                          <Flex\n                            mt={2}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'space-between'}\n                          >\n                            {\n                              [25,50,75,100].map( percentage => (\n                                <FastBalanceSelector\n                                  percentage={percentage}\n                                  key={`selector_${percentage}`}\n                                  onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                  isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                                />\n                              ))\n                            }\n                          </Flex>\n                          <Flex\n                            mt={2}\n                            justifyContent={'center'}\n                          >\n                            <RoundButton\n                              buttonProps={{\n                                mt:2,\n                                width:[1,1/2],\n                                disabled:this.state.buttonDisabled\n                              }}\n                              handleClick={this.deposit.bind(this)}\n                            >\n                              Deposit\n                            </RoundButton>\n                          </Flex>\n                        </Flex>\n                      </Box>\n                    )\n                  }\n                </Box>\n              )\n            }\n          {\n            /*\n            this.state.tokenConfig && this.state.redeemableBalance ? (\n              <Box width={1}>\n                <Migrate\n                  {...this.props}\n                  showActions={false}\n                  getTokenPrice={false}\n                  migrationTextProps={{\n                    fontWeight:500\n                  }}\n                  isMigrationTool={true}\n                  migrationImage={{\n                    mb:1,\n                    height:'1.8em',\n                    src:curveConfig.params.image\n                  }}\n                  showBalanceSelector={true}\n                  waitText={'Deposit estimated in'}\n                  tokenConfig={this.state.tokenConfig}\n                  callbackApprove={this.approveCallback.bind(this)}\n                  migrationParams={this.getMigrationParams.bind(this)}\n                  migrationCallback={this.migrationCallback.bind(this)}\n                  approveText={`To deposit your ${this.props.tokenConfig.idle.token} you need to approve Curve smart-contract first.`}\n                  migrationText={`You can deposit ${this.state.redeemableBalance.toFixed(4)} ${this.props.tokenConfig.idle.token} in the Curve Pool${ this.state.depositSlippage ? (this.state.depositSlippage.gte(0) ? ` with <span style=\"color:${this.props.theme.colors.transactions.status.failed}\">${this.state.depositSlippage.times(100).toFixed(2)}% of slippage</span>` : ` with <span style=\"color:${this.props.theme.colors.transactions.status.completed}\">${Math.abs(parseFloat(this.state.depositSlippage.times(100).toFixed(2)))}% of bonus</span>`) : '' }.`}\n                >\n                  {\n                    !this.props.account ? (\n                      <DashboardCard\n                        cardProps={{\n                          p:3,\n                          mt:3\n                        }}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                        >\n                          <Icon\n                            size={'2.3em'}\n                            name={'Input'}\n                            color={'cellText'}\n                          />\n                          <Text\n                            mt={2}\n                            fontSize={2}\n                            color={'cellText'}\n                            textAlign={'center'}\n                          >\n                            Please connect with your wallet interact with Idle.\n                          </Text>\n                          <RoundButton\n                            buttonProps={{\n                              mt:2,\n                              width:[1,1/2]\n                            }}\n                            handleClick={this.props.connectAndValidateAccount}\n                          >\n                            Connect\n                          </RoundButton>\n                        </Flex>\n                      </DashboardCard>\n                    ) : (\n                      <DashboardCard\n                        cardProps={{\n                          p:3\n                        }}\n                      >\n                        {\n                          this.state.migrationSucceeded ? (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'DoneAll'}\n                                color={this.props.theme.colors.transactions.status.completed}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You have successfully deposited your {this.props.tokenConfig.idle.token} in the Curve Pool!\n                              </Text>\n                            </Flex>\n                          ) : (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'MoneyOff'}\n                                color={'cellText'}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You don't have any {this.props.tokenConfig.idle.token} in your wallet.\n                              </Text>\n                            </Flex>\n                          )\n                        }\n                      </DashboardCard>\n                    )\n                  }\n                </Migrate>\n              </Box>\n            ) : null\n            */\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveDeposit;","import theme from '../theme';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\n// import { linearGradientDef } from '@nivo/core'\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport ChartCustomTooltip from '../ChartCustomTooltip/ChartCustomTooltip';\nimport ChartCustomTooltipRow from '../ChartCustomTooltipRow/ChartCustomTooltipRow';\n\nclass PortfolioEquityCurve extends Component {\n  state = {\n    startDate:null,\n    chartData:null,\n    chartProps:null,\n    chartwidth:null,\n    chartHeight:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentDidMount(){\n    this.loadUtils();\n    this.loadChartData();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n\n    const quickDateSelectionChanged = prevProps.quickDateSelection !== this.props.quickDateSelection;\n    const tokenChanged = JSON.stringify(prevProps.enabledTokens) !== JSON.stringify(this.props.enabledTokens);\n    if (tokenChanged || quickDateSelectionChanged){\n      this.setState({\n        chartData:null\n      },() => {\n        this.componentDidMount();\n      });\n    }\n\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n    if (mobileChanged){\n      this.loadChartData();\n    }\n  }\n\n  async loadChartData() {\n\n    let enabledTokens = this.props.enabledTokens;\n    if (!enabledTokens || !enabledTokens.length){\n      enabledTokens = Object.keys(this.props.availableTokens);\n    }\n\n    const curveTxs = await this.functionsUtil.getCurveTxs(this.props.account,0,'latest',enabledTokens);\n\n    const chartData = [];\n    let tokensBalance = [];\n    const processedTxs = {};\n    let firstTxTimestamp = null;\n    let totalBalance = this.functionsUtil.BNify(0);\n    const curvePoolContract = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    if (curveTxs && curveTxs.length){\n\n      curveTxs.forEach((tx,index) => {\n\n        if (!processedTxs[tx.hash]){\n          processedTxs[tx.hash] = [];\n        }\n\n        if (processedTxs[tx.hash].includes(tx.action)){\n          return;\n        }\n        \n        firstTxTimestamp = firstTxTimestamp ? Math.min(firstTxTimestamp,parseInt(tx.timeStamp)) : parseInt(tx.timeStamp);\n\n        const curveTokens = this.functionsUtil.BNify(tx.curveTokens);\n\n        switch (tx.action){\n          case 'CurveIn':\n          case 'CurveZapIn':\n          case 'CurveDepositIn':\n          case 'CurveTransferIn':\n            totalBalance = totalBalance.plus(curveTokens);\n          break;\n          case 'CurveOut':\n          case 'CurveZapOut':\n          case 'CurveDepositOut':\n          case 'CurveTransferOut':\n            totalBalance = totalBalance.minus(curveTokens);\n          break;\n          default:\n          break;\n        }\n\n        // Reset totalBalance if below zero\n        if (totalBalance.lt(0)){\n          totalBalance = this.functionsUtil.BNify(0);\n        }\n\n        const action = tx.action;\n        const balance = totalBalance;\n        const timeStamp = parseInt(tx.timeStamp);\n        const curveTokenPrice = this.functionsUtil.fixTokenDecimals(tx.curveTokenPrice,curvePoolContract.decimals);\n\n        // console.log(this.functionsUtil.strToMoment(timeStamp*1000).format('YYYY/MM/DD HH:mm'),tx.hash,tx.action,curveTokens.toString(),totalBalance.toString());\n\n        if (!curveTokenPrice.isNaN() && !curveTokenPrice.isNaN()){\n          tokensBalance.push({\n            action,\n            balance,\n            timeStamp,\n            curveTokens,\n            curveTokenPrice\n          });\n\n          processedTxs[tx.hash].push(action);\n        }\n      });\n    }\n\n    // Calculate Start Date\n    let startDate = null;\n    const currentDate = this.functionsUtil.strToMoment(new Date());\n\n    switch (this.props.quickDateSelection){\n      case 'week':\n        startDate = currentDate.clone().subtract(1,'week');\n      break;\n      case 'month':\n        startDate = currentDate.clone().subtract(1,'month');\n      break;\n      case 'month3':\n        startDate = currentDate.clone().subtract(3,'month');\n      break;\n      case 'month6':\n        startDate = currentDate.clone().subtract(6,'month');\n      break;\n      default:\n        startDate = null;\n      break;\n    }\n\n    const days = {};\n    let prevBalances = {};\n    let prevTimestamp = null;\n    let minChartValue = null;\n    let maxChartValue = null;\n    const aggregatedBalancesKeys = {};\n    const tokensBalancesPerDate = {};\n    let aggregatedBalance = this.functionsUtil.BNify(0);\n    // let curveTokenBalance = this.functionsUtil.BNify(0);\n    const currTimestamp = parseInt(new Date().getTime()/1000)+86400;\n\n    const tokensData = await this.functionsUtil.getTokenApiData(Object.values(this.props.availableTokens)[0].address,false,firstTxTimestamp,null,false,3600);\n\n    for (let timeStamp=firstTxTimestamp;timeStamp<=currTimestamp;timeStamp+=this.props.frequencySeconds){\n\n      let foundBalances = {};\n      let tokensBalances = {};\n      timeStamp = Math.min(currTimestamp,timeStamp);\n      let momentDate = this.functionsUtil.strToMoment(timeStamp*1000);\n\n      // eslint-disable-next-line\n      const filteredTokenData = tokensData.filter(tx => (tx.timestamp>=prevTimestamp && tx.timestamp<=timeStamp));\n\n      // eslint-disable-next-line\n      let filteredBalances = tokensBalance.filter(tx => (tx.timeStamp<=timeStamp && (!prevTimestamp || tx.timeStamp>prevTimestamp)));\n      \n      if (!filteredBalances.length){\n        if (prevBalances){\n          filteredBalances = prevBalances;\n          const lastFilteredTx = Object.values(filteredBalances).pop();\n          const currentBalance = parseFloat(lastFilteredTx.balance);\n\n          const lastTokenData = Object.values(filteredTokenData).pop();\n          let curveTokenPrice = null;\n          if (lastTokenData){\n            curveTokenPrice = await this.functionsUtil.getCurveTokenPrice(lastTokenData.blocknumber);\n          }\n\n          // Take idleToken price from API and calculate new balance\n          if (currentBalance>0 && timeStamp>firstTxTimestamp && curveTokenPrice){\n            // Set new curveTokenPrice\n            lastFilteredTx.curveTokenPrice = curveTokenPrice;\n            filteredBalances = [lastFilteredTx];\n          }\n        } else {\n          filteredBalances = [{\n            balance:this.functionsUtil.BNify(0),\n            curveTokenPrice:this.functionsUtil.BNify(0)\n          }];\n        }\n      }\n\n      const lastTx = Object.assign([],filteredBalances).pop();\n      let lastTxBalance = this.functionsUtil.BNify(lastTx.balance).times(lastTx.curveTokenPrice);\n\n      tokensBalances[curvePoolContract.token] = this.functionsUtil.BNify(lastTx.balance);\n      aggregatedBalance = lastTxBalance;\n\n      foundBalances = filteredBalances;\n\n      // console.log(momentDate.format('YYYY/MM/DD 00:00'),lastTx.balance.toString(),lastTx.curveTokenPrice.toString(),lastTxBalance.toString());\n\n      if (startDate === null || momentDate.isSameOrAfter(startDate)){\n        \n        if (momentDate.isAfter(new Date(),'day')){\n          momentDate = this.functionsUtil.strToMoment(new Date());\n        }\n\n        // Force date to midnight\n        const formattedDate = momentDate.format('YYYY/MM/DD 00:00');\n\n        // Save days for axisBottom format\n        days[momentDate.format('YYYY/MM/DD')] = 1;\n\n        const aggregatedBalanceParsed = parseFloat(parseFloat(aggregatedBalance.toFixed(6)));\n\n        aggregatedBalancesKeys[formattedDate] = aggregatedBalanceParsed;\n        tokensBalancesPerDate[formattedDate] = tokensBalances;\n\n        // console.log(formattedDate,tokensBalances);\n\n        minChartValue = minChartValue === null ? aggregatedBalanceParsed : Math.min(minChartValue,aggregatedBalanceParsed);\n        maxChartValue = maxChartValue === null ? aggregatedBalanceParsed : Math.max(maxChartValue,aggregatedBalanceParsed);\n      }\n\n      prevTimestamp = timeStamp;\n      prevBalances = foundBalances;\n    }\n\n    const aggregatedBalances = Object.keys(aggregatedBalancesKeys).map(date => ({\n      x:date,\n      y:aggregatedBalancesKeys[date],\n      balances:tokensBalancesPerDate[date]\n    }));\n\n    let itemIndex = 0;\n    aggregatedBalances.forEach( (item,index) => {\n      const itemPos = Math.floor(itemIndex/aggregatedBalances.length*100);\n      aggregatedBalances[index].itemPos = itemPos;\n      itemIndex++;\n    });\n\n    /*\n    aggregatedBalances.push({\n      x:momentDate.format('YYYY/MM/DD HH:mm'),\n      y:aggregatedBalance\n    });\n    */\n\n    // Add day before to start with zero balance\n    /*\n    const firstTxMomentDate = this.functionsUtil.strToMoment(firstTxTimestamp*1000);\n    if ((startDate === null || startDate.isSameOrBefore(firstTxMomentDate)) && aggregatedBalances.length){\n      const firstItem = aggregatedBalances[0];\n      const firstDate = this.functionsUtil.strToMoment(firstItem.x,'YYYY/MM/DD HH:mm');\n      firstDate.subtract(1,'day');\n      aggregatedBalances.unshift({\n        x:firstDate.format('YYYY/MM/DD HH:mm'),\n        y:0\n      });\n    }\n    */\n\n    // Add token Data\n    chartData.push({\n      id:'USD',\n      color: 'hsl('+ this.functionsUtil.getGlobalConfig(['stats','tokens','USD','color','hsl']).join(',')+')',\n      data:aggregatedBalances\n    });\n\n    let yFormatDecimals = 2;\n    if (maxChartValue-minChartValue<1){\n      yFormatDecimals = 4;\n    }\n\n    if (maxChartValue === minChartValue){\n      minChartValue = Math.max(0,maxChartValue-1);\n    }\n\n    const maxGridLines = 5;\n    const gridYStep = (maxChartValue-minChartValue)/maxGridLines;\n    const gridYValues = [];\n    for (let i=0;i<=maxGridLines;i++){\n      const gridYValue = parseFloat(parseFloat(minChartValue+(i*gridYStep)).toFixed(6));\n      gridYValues.push(gridYValue);\n    }\n    \n    const axisBottomMaxValues = 10;\n    const daysCount = Object.values(days).length;    \n    const daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n    const chartProps = {\n      xScale:{\n        type: 'time',\n        format: '%Y/%m/%d %H:%M',\n      },\n      yScale:{\n        type: 'linear',\n        stacked: false,\n        min: minChartValue,\n        max: maxChartValue\n      },\n      xFormat:'time:%b %d %Y',\n      yFormat:value => this.functionsUtil.formatMoney(value,yFormatDecimals),\n      axisBottom: this.props.isMobile ? null : {\n        legend: '',\n        tickSize:0,\n        format: '%b %d',\n        tickPadding: 15,\n        orient: 'bottom',\n        legendOffset: 36,\n        legendPosition: 'middle',\n        tickValues:'every '+daysFrequency+' days'\n      },\n      gridYValues,\n      pointSize:0,\n      useMesh:true,\n      axisLeft: this.props.isMobile ? null : {\n        legend: '',\n        tickSize: 0,\n        orient: 'left',\n        tickPadding: 10,\n        tickRotation: 0,\n        legendOffset: -70,\n        tickValues:gridYValues,\n        legendPosition: 'middle',\n        format: v => this.functionsUtil.abbreviateNumber(v,2),\n      },\n      animate:true,\n      pointLabel:'y',\n      areaOpacity:0.1,\n      enableArea:true,\n      enableSlices:'x',\n      enableGridY:true,\n      curve:'monotoneX',\n      enableGridX:false,\n      pointBorderWidth:1,\n      colors:d => d.color,\n      pointLabelYOffset:-12,\n      areaBaselineValue:minChartValue,\n      pointColor:{ from: 'color', modifiers: []},\n      theme:{\n        axis: {\n          ticks: {\n            text: {\n              fontSize:12,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '8 4'\n          }\n        },\n      },\n      /*\n      defs:[\n        linearGradientDef('gradientA', [\n          { offset: 0, color: 'inherit' },\n          { offset: 100, color: 'inherit', opacity: 0 },\n        ]),\n      ],\n      fill:[{ match: '*', id: 'gradientA' }],\n      */\n      margin: this.props.isMobile ? { top: 20, right: 25, bottom: 25, left: 20 } : { top: 30, right: 50, bottom: 45, left: 50 },\n      sliceTooltip:(slideData) => {\n        const { slice } = slideData;\n        const point = slice.points[0];\n        return (\n          <ChartCustomTooltip\n            point={point}\n          >\n            <ChartCustomTooltipRow\n              color={point.color}\n              label={point.serieId}\n              value={`$ ${point.data.yFormatted}`}\n            />\n            {\n            typeof point.data.balances === 'object' && Object.keys(point.data.balances).length>0 &&\n              Object.keys(point.data.balances).map(token => {\n                if (token === point.serieId){\n                  return null;\n                }\n                const tokenInfo = this.functionsUtil.getGlobalConfig(['stats','tokens',token]);\n                if (tokenInfo){\n                  const tokenName = tokenInfo.name ? tokenInfo.name : token;\n                  const color = tokenInfo.color.hex;\n                  const balance = point.data.balances[token];\n                  let formattedBalance = this.functionsUtil.formatMoney(balance,2);\n                  if (parseFloat(balance)>=0.01){\n                    return (\n                      <ChartCustomTooltipRow\n                        label={tokenName}\n                        color={color}\n                        key={`row_${token}`}\n                        value={`${formattedBalance}`}\n                      />\n                    );\n                  }\n                }\n                return null;\n              })\n            }\n          </ChartCustomTooltip>\n        );\n      }\n    };\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  render() {\n    return (\n      <GenericChart\n        type={Line}\n        showLoader={true}\n        {...this.state.chartProps}\n        data={this.state.chartData}\n        parentId={this.props.parentId}\n        height={this.props.chartHeight}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default PortfolioEquityCurve;","import theme from '../theme';\nimport Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport { Flex, Heading, Text } from \"rimble-ui\";\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport PortfolioEquityCurve from '../PortfolioEquityCurve/PortfolioEquityCurve';\n\nclass FundsOverviewCurve extends Component {\n\n  state = {\n    compAPR:null,\n    aggregatedValues:[],\n    govTokensUserBalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    await this.functionsUtil.getCurveAvgBuyPrice();\n\n    // debugger;\n\n    await this.functionsUtil.getCurveAvgSlippage();\n\n    // debugger;\n    /*\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const [govTokensUserBalance,avgAPY,days] = await Promise.all([\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,'DAI'),\n      this.functionsUtil.loadAssetField('avgAPY',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '-') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    let [tokenAllocation,compAPR] = await Promise.all([\n      this.functionsUtil.getTokenAllocation(this.props.tokenConfig,false,false),\n      this.functionsUtil.getCompAPR(this.props.selectedToken,this.props.tokenConfig)\n    ]);\n\n    if (tokenAllocation){\n      const compoundInfo = this.props.tokenConfig.protocols.find( p => (p.name === 'compound') );\n      if (compoundInfo){\n        if (tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()]){\n          const compoundAllocationPerc = tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()];\n          compAPR = compAPR.times(compoundAllocationPerc);\n        }\n      }\n    }\n\n    this.setState({\n      compAPR,\n      aggregatedValues,\n      govTokensUserBalance\n    });\n    */\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Text\n                          mt={2}\n                          fontWeight={2}\n                          fontSize={[1,2]}\n                          color={'cellText'}\n                        >\n                          {v.props.title}\n                        </Text>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquityCurve\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLentCurve',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPercCurve',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            {\n              /*\n              <Flex\n                mb={[2,0]}\n                width={[1,1/5]}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'flex-start'}\n              >\n                <Title\n                  mb={2}\n                  fontSize={[3,4]}\n                  component={Heading.h3}\n                >\n                  Fees\n                </Title>\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'feesCounter',\n                    props:{\n                      decimals:7,\n                      maxPrecision:8,\n                      style:{\n                        fontWeight:300,\n                        fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                        color:theme.colors.counter\n                      },\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n              */\n            }\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveApy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Avg Slippage\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveAvgSlippage',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverviewCurve;","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport { Box, Flex, Text, Icon } from \"rimble-ui\";\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport CurveDeposit from '../CurveDeposit/CurveDeposit';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport TransactionField from '../TransactionField/TransactionField';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport FundsOverviewCurve from '../FundsOverviewCurve/FundsOverviewCurve';\n\nclass AssetPage extends Component {\n\n  state = {\n    inputValue:{},\n    processing:{},\n    tokenFees:null,\n    canRedeem:null,\n    canDeposit:null,\n    action:'deposit',\n    activeModal:null,\n    tokenConfig:null,\n    tokenBalance:null,\n    tokenApproved:null,\n    selectedToken:null,\n    availableTokens:{},\n    redeemBalance:null,\n    depositBalance:null,\n    buttonDisabled:false,\n    curveTokenPrice:null,\n    depositSlippage:null,\n    idleTokenBalance:null,\n    withdrawSlippage:null,\n    govTokensBalance:null,\n    curveZapContract:null,\n    curveTokenConfig:null,\n    curveTokensAmounts:{},\n    govTokensDisabled:null,\n    componentMounted:false,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    redeemableBalance:null,\n    fastBalanceSelector:{},\n    curveAvailableTokens:{},\n    tokenFeesPercentage:null,\n    redeemUnevenAmounts:false,\n    curveDepositContract:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  changeFromToken = (selectedToken) => {\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    this.props.goToSection(`${curveConfig.params.route}/${selectedToken}`);\n  }\n\n  getSelectedToken(){\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    return this.props.urlParams.param1 && curveAvailableTokens[this.props.urlParams.param1] ? this.props.urlParams.param1 : Object.keys(curveAvailableTokens)[0];\n  }\n\n  setSelectedToken = async (selectedToken) => {\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n    this.setState({\n      tokenConfig,\n      selectedToken,\n      availableTokens,\n      curveTokenConfig\n    });\n  }\n\n  loadTokensInfo = async () => {\n\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    this.setState({\n      curveAvailableTokens\n    });\n\n    const selectedToken = this.getSelectedToken();\n    // Check if token is set the query params\n    if (selectedToken && selectedToken !== this.props.urlParams.param1){\n      this.changeFromToken(selectedToken);\n      return await this.setSelectedToken(selectedToken);\n    } else if (selectedToken !== this.state.selectedToken){\n      await this.setSelectedToken(selectedToken);\n    }\n\n    const newState = {...this.state};\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n\n    if (newState.selectedToken !== selectedToken){\n      newState.selectedToken = selectedToken;\n    }\n\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n\n    const [\n      curveZapContract,\n      curvePoolContract,\n      curveSwapContract,\n      curveDepositContract\n    ] = await Promise.all([\n      this.functionsUtil.getCurveZapContract(),\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract()\n    ]);\n\n    newState.curveZapContract = curveZapContract;\n    newState.curvePoolContract = curvePoolContract;\n    newState.curveSwapContract = curveSwapContract;\n    newState.curveDepositContract = curveDepositContract;\n\n    newState.availableTokens = availableTokens;\n\n\n    // console.log('curveTokenPrice',newState.curveTokenPrice.toFixed(6),'curveTokenBalance',newState.curveTokenBalance.toFixed(6),'redeemableBalance',newState.redeemableBalance.toFixed(20),'tokenBalance',newState.tokenBalance.toFixed(20));\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[selectedToken] = tokenConfig;\n\n    newState.tokenConfig = tokenConfig;\n    newState.curveTokenConfig = curveTokenConfig;\n\n    if (this.props.account){\n      [\n        newState.curveTokenPrice,\n        newState.curveTokenBalance,\n        newState.tokenFeesPercentage,\n        newState.tokenFees,\n        newState.tokenBalance,\n        newState.idleTokenBalance,\n        newState.tokenApproved,\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokenPrice(),\n        this.functionsUtil.getCurveTokenBalance(),\n        this.functionsUtil.getTokenFees(tokenConfig),\n        this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n        this.functionsUtil.getTokenBalance(selectedToken,this.props.account),\n        this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n        this.functionsUtil.checkTokenApproved(selectedToken,curveDepositContract.address,this.props.account),\n      ]);\n\n\n      newState.processing = {\n        redeem:{\n          txHash:null,\n          loading:false\n        },\n        deposit:{\n          txHash:null,\n          loading:false\n        },\n        approve:{\n          txHash:null,\n          loading:false\n        },\n      };\n      newState.inputValue = {\n        redeem:null,\n        deposit:null\n      };\n      newState.fastBalanceSelector = {\n        redeem:null,\n        deposit:null\n      };\n\n      newState.componentMounted = true;\n      newState.depositBalance = newState.tokenBalance;\n      newState.redeemBalance = newState.redeemableBalance;\n      newState.govTokensDisabled = tokenConfig.govTokensDisabled;\n      newState.canRedeem = newState.curveTokenBalance && newState.curveTokenBalance.gt(0);\n      newState.canDeposit = newState.idleTokenBalance && newState.idleTokenBalance.gt(0);\n      newState.redeemableBalance = newState.curveTokenBalance ? newState.curveTokenBalance.times(newState.curveTokenPrice) : this.functionsUtil.BNify(0);\n    }\n\n    this.setState(newState);\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async calculateSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,this.state.curvePoolContract.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositBalance = amount;\n        newState.depositSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      case 'redeem':\n        newState.redeemBalance = amount;\n        newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.urlParams.param1 !== this.props.urlParams.param1;\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n\n    if (accountChanged || transactionsChanged || tokenChanged){\n      await this.loadTokensInfo();\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const redeemUnevenAmountsChanged = this.state.redeemUnevenAmounts !== prevState.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n    if (actionChanged || fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    if (actionChanged){\n      this.updateAssetSelector();\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  updateAssetSelector = async () => {\n    const newState = {};\n    switch (this.state.action){\n      case 'deposit':\n        this.loadTokensInfo();\n      break;\n      case 'redeem':\n        // this.loadTokensInfo();\n        const tokenConfig = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n        newState.curveAvailableTokens = {};\n        newState.curveTokenConfig = tokenConfig;\n        newState.selectedToken = tokenConfig.token;\n        newState.curveAvailableTokens[tokenConfig.token] = tokenConfig;\n      break;\n      default:\n      break;\n    }\n\n    this.setState(newState);\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.state.tokenBalance ? this.functionsUtil.BNify(this.state.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          amount = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n        } else {\n          amount = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  changeInputValue = (e) => {\n    if (!this.state.action){\n      return false;\n    }\n\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && amount.gt(this.state.tokenBalance));\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.curveTokenBalance)) );\n        } else {\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.redeemableBalance)) );\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = this.state.tokenApproved;\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.state.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.functionsUtil.enableERC20(this.state.selectedToken,this.state.curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const inputValue = this.state.inputValue[this.state.action];\n    const selectedPercentage = this.getFastBalanceSelector();\n\n    let loading = true;\n\n    switch (this.state.action){\n      // Handle deposit in curve\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.state.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if (this.state.metaTransactionsEnabled && txError){\n            this.setState({\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,tokensToDeposit);\n        const minMintAmount = await this.functionsUtil.genericContractCall(this.state.curveSwapContract.name,'calc_token_amount',[amounts,true]);\n        const depositParams = [amounts,minMintAmount];\n\n        // No need for callback atm\n        contractSendResult = await this.props.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n      break;\n      case 'redeem':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        let curveTokensToRedeem = null;\n        if (selectedPercentage){\n          curveTokensToRedeem = this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage);\n        } else {\n          curveTokensToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals));\n          if (!this.state.redeemUnevenAmounts){\n            const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n            curveTokensToRedeem = curveTokensToRedeem.div(curveTokenPrice);\n          }\n        }\n\n        if (!curveTokensToRedeem){\n          return false;\n        }\n\n        const callbackRedeem = (tx,error) => {\n          const txSucceeded = tx.status === 'success';\n\n          // Send Google Analytics event\n          const eventData = {\n            eventLabel: tx.status,\n            eventCategory: `CurveRedeem`,\n            eventAction: this.state.selectedToken,\n            eventValue: curveTokensToRedeem.toFixed()\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          }\n        };\n\n        const callbackReceiptRedeem = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const _amount = this.functionsUtil.normalizeTokenAmount(curveTokensToRedeem,this.state.curvePoolContract.decimals).toString();\n        let min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,0);\n\n        const contractName = this.state.curveDepositContract.name;\n        if (this.state.redeemUnevenAmounts){\n          console.log('remove_liquidity_imbalance',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_imbalance', [min_amounts, _amount], null, callbackRedeem, callbackReceiptRedeem);\n        } else {\n          min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,_amount);\n          console.log('remove_liquidity',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts], null, callbackRedeem, callbackReceiptRedeem);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    // console.log('contractSendResult',contractSendResult);\n\n    if (contractSendResult !== false){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    const userHasFunds = this.props.account && this.state.curveTokenBalance && this.functionsUtil.BNify(this.state.curveTokenBalance).gt(0);\n    const canPerformAction = true;\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            {\n              <Breadcrumb\n                {...this.props}\n                isMobile={this.props.isMobile}\n                path={['Boost',this.state.selectedToken]}\n                handleClick={ e => this.props.goToSection('best') }\n                text={this.functionsUtil.getGlobalConfig(['strategies','best','title'])}\n              />\n            }\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Curve Pool\n        </Title>\n        <Flex\n          width={1}\n        >\n          <Flex\n            width={1}\n            alignItems={'center'}\n            flexDirection={'column'}\n            justifyContent={'center'}\n          >\n            <Flex\n              width={[1,0.36]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Box\n                width={1}\n              >\n                <Text\n                  mb={1}\n                >\n                  Select your asset:\n                </Text>\n                <AssetSelector\n                  {...this.props}\n                  id={'token-from'}\n                  onChange={this.changeFromToken}\n                  selectedToken={this.state.selectedToken}\n                  tokenConfig={this.state.curveTokenConfig}\n                  showBalance={this.state.action === 'deposit'}\n                  availableTokens={this.state.curveAvailableTokens}\n                />\n              </Box>\n              <Box\n                width={1}\n              >\n                {\n                  canPerformAction ? (\n                    <Flex\n                      mt={2}\n                      flexDirection={'column'}\n                    >\n                      <Text\n                        mb={2}\n                      >\n                        Choose the action:\n                      </Text>\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('deposit');\n                            }\n                          }}\n                          isInteractive={true}\n                          isActive={ this.state.action === 'deposit' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'deposit'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Deposit\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('redeem');\n                            }\n                          }}\n                          isInteractive={true}\n                          isDisabled={ !this.state.canRedeem }\n                          isActive={ this.state.action === 'redeem' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'redeem'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Redeem\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                      </Flex>\n                    </Flex>\n                  ) : (\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    >\n                      <Icon\n                        size={'2.3em'}\n                        name={'MoneyOff'}\n                        color={'cellText'}\n                      />\n                      <Text\n                        mt={2}\n                        fontSize={2}\n                        color={'cellText'}\n                        textAlign={'center'}\n                      >\n                        You don't have any {this.state.tokenConfig.idle.token} in your wallet.\n                      </Text>\n                    </Flex>\n                  )\n                }\n              </Box>\n            </Flex>\n            <Flex\n              width={1}\n              mt={ this.props.account ? 3 : 0 }\n            >\n            {\n              this.state.action === 'deposit' ? (\n                <CurveDeposit\n                  {...this.props}\n                  {...this.state}\n                />\n              ) : this.state.action === 'redeem' && (\n                <CurveRedeem\n                  {...this.props}\n                  {...this.state}\n                />\n              )\n            }\n            </Flex>\n          </Flex>\n        </Flex>\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverviewCurve\n                {...this.props}\n                tokenFees={this.state.tokenFees}\n                tokenConfig={this.state.tokenConfig}\n                selectedToken={this.state.selectedToken}\n                availableTokens={this.state.availableTokens}\n                enabledTokens={Object.keys(this.state.availableTokens)}\n              />\n            </Flex>\n        }\n        {\n          /*\n          this.props.account && !this.state.govTokensDisabled[this.state.selectedToken] && Object.keys(availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id=\"earnings-estimation\"\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(availableGovTokens)}\n                handleClick={(props) => {}}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.33,0.22]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.26],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    props:{\n                      width:[0.33,0.26],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                      {\n                        name:'tooltip',\n                        props:{\n                          placement:'bottom',\n                          message:'The shown balance may be lower than the real one.',\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    mobile:false,\n                    props:{\n                      width: 0.26,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                ]}\n                {...this.props}\n                availableTokens={availableGovTokens}\n              />\n            </Flex>\n          */\n        }\n        {\n          /*\n          this.props.account && \n            <Flex\n              mb={[3,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'estimated-earnings-container'}\n            >\n              <Title my={[3,4]}>Estimated earnings</Title>\n              <EstimatedEarnings\n                {...this.props}\n              />\n            </Flex>\n          */\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              availableTokens={this.state.availableTokens}\n              enabledTokens={Object.keys(this.state.availableTokens)}\n              enabledActions={['CurveIn','CurveOut','CurveZapIn','CurveZapOut','CurveTransferIn','CurveTransferOut','CurveDepositIn','CurveDepositOut']}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.state.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport {\n  Text,\n  Modal,\n  Button,\n  Form,\n  Icon,\n  Flex,\n  Link\n} from \"rimble-ui\";\nimport axios from 'axios';\nimport colors from '../../colors';\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\nimport globalConfigs from '../../configs/globalConfigs';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\n\nclass WelcomeModal extends React.Component {\n\n  state = {\n    email:null,\n    error:false,\n    subscribed:false,\n    sendingForm:false\n  };\n\n  functionsUtil = null;\n\n  constructor(props) {\n    super(props);\n    this.functionsUtil = new FunctionsUtil(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleValidation = this.handleValidation.bind(this);\n  }\n\n  componentDidUpdate = async () => {\n    this.functionsUtil.setProps(this.props);\n  }\n\n  sendUserInfo = (sendEmail=true) => {\n    const walletProvider = this.functionsUtil.getWalletProvider();\n    const userInfo = {\n      address: this.props.account,\n      provider: walletProvider\n    };\n\n    if (sendEmail && this.state.email !== null){\n      userInfo.email = this.state.email;\n    }\n\n    this.functionsUtil.simpleIDPassUserInfo(userInfo);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    if (!this.state.email){\n      return false;\n    }\n\n    const callback = () => {\n      this.setState({\n        sendingForm:false,\n        subscribed:true\n      });\n      window.setTimeout(this.props.closeModal,2500);\n    };\n\n    this.sendUserInfo();\n\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'send_email',\n      eventLabel: 'WelcomeModal'\n    });\n\n    axios.post(globalConfigs.newsletterSubscription.endpoint, {\n      'email': this.state.email\n    }).then(r => {\n      callback();\n    })\n    .catch(err => {\n      callback();\n    });\n\n    // Set signedUp in the localStorage\n    if (localStorage){\n      const walletAddress = this.props.account.toLowerCase();\n      let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : null;\n      if (lastLogin && lastLogin[walletAddress] && !lastLogin[walletAddress].signedUp){\n        lastLogin[walletAddress].signedUp = true;\n        this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n      }\n    }\n\n    this.setState({\n      sendingForm:true\n    })\n  };\n\n  closeModal = async () => {\n\n    const closeModal = () => {\n      this.props.closeModal();\n    };\n\n    try{\n      // Prevent sending email\n      this.sendUserInfo(false);\n\n      // Send Google Analytics event\n      if (globalConfigs.analytics.google.events.enabled){\n        this.functionsUtil.sendGoogleAnalyticsEvent({\n          eventCategory: 'UI',\n          eventAction: 'continue_without_email',\n          eventLabel: 'WelcomeModal'\n        },closeModal);\n\n        // Call callback after 1 second if stuck\n        setTimeout(closeModal,1000);\n      } else {\n        closeModal();\n      }\n    } catch (err) {\n      closeModal();\n    }\n  }\n\n  handleValidation(e) {\n    if (e && e.target) {\n      this.setState({ email: e.target.value });\n      e.target.parentNode.classList.add(\"was-validated\");\n    }\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        {\n          this.state.subscribed ? (\n            <ModalCard\n              closeFunc={this.closeModal}\n            >\n              <ModalCard.Header title={'All done'} icon={`images/done.svg`}></ModalCard.Header>\n              <ModalCard.Body>\n                <Flex width={1} flexDirection={'column'} mb={3}>\n                  <Text color={'dark-gray'} textAlign={'center'} fontSize={3} my={0}>\n                    Thanks for subscribing!\n                  </Text>\n                  <Button\n                    my={3}\n                    width={'100%'}\n                    borderRadius={4}\n                    onClick={this.closeModal}\n                  >\n                    CLOSE\n                  </Button>\n                </Flex>\n              </ModalCard.Body>\n            </ModalCard>\n          ) : (\n            <ModalCard closeFunc={this.closeModal}>\n              <ModalCard.Header title={'Stay up-to-date!'} icon={`images/notification.svg`}>\n              </ModalCard.Header>\n              <ModalCard.Body>\n                <Form onSubmit={this.handleSubmit}>\n                  <Flex width={1} flexDirection={'column'} mb={3}>\n                    <Text color={'mid-gray'} textAlign={'left'} fontSize={3} my={0}>\n                      Add your e-mail to receive updates about:\n                    </Text>\n                  </Flex>\n                  <Flex width={1} flexDirection={'column'} mt={2}>\n                    <Flex my={2} flexDirection={'row'} alignItems={'center'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Performance reports\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        New Protocols & Tokens\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Latest updates\n                      </Text>\n                    </Flex>\n                    <Form.Field width={1} label={''}>\n                      <Form.Input\n                        type=\"email\"\n                        name=\"EMAIL\"\n                        width={1}\n                        outline={'none'}\n                        border={0}\n                        px={3}\n                        py={4}\n                        fontSize={3}\n                        textAlign={['center','left']}\n                        placeholder={'Enter your e-mail'}\n                        onChange={this.handleValidation}\n                        required\n                      />\n                    </Form.Field>\n                    <Flex mb={3} flexDirection={'column'} alignItems={'center'} justifyContent={'center'}>\n                      <ButtonLoader\n                        buttonText={'SUBMIT'}\n                        isLoading={this.state.sendingForm}\n                        buttonProps={{className:header_styles.gradientButton,width:'100%',type:'submit'}}\n                      >\n                      </ButtonLoader>\n                      <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without e-mail</Link>\n                    </Flex>\n                  </Flex>\n                </Form>\n              </ModalCard.Body>\n            </ModalCard>\n          )\n        }\n      </Modal>\n    );\n  }\n}\n\nexport default WelcomeModal;\n","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\n\nclass MigrateModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'continue_without_migrate',\n        eventLabel: 'MigrateModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowMigrateModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowMigrateModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = () => {\n    const tokenMigrationRoute = this.functionsUtil.getGlobalConfig(['tools','tokenMigration','route']);\n    this.props.goToSection('tools/'+tokenMigrationRoute);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            iconHeight={'40px'}\n            title={'Migrate to Idle'}\n            icon={`images/migrate.svg`}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={3}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                You can migrate your funds from Compound, Aave, Fulcrum, Yearn and Idle V2 with just one transaction.\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                my={2}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.protocolsTokensBalances && Object.keys(this.props.protocolsTokensBalances).map( token => (\n                    <Flex\n                      mb={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      key={`token_${token}`}\n                      justifyContent={'space-between'}\n                    >\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'icon',\n                          props:{\n                            mr:2,\n                            height:'2.3em'\n                          }\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                      <SmartNumber\n                        mr={2}\n                        {...fieldProps}\n                        minPrecision={5}\n                        number={this.props.protocolsTokensBalances[token].balance} \n                      />\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'tokenName',\n                          props:fieldProps\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                    </Flex>\n                  ) )\n                }\n                <Text\n                  mb={0}\n                  fontSize={1}\n                  color={'red'}\n                  fontWeight={500}\n                  textAlign={'center'}\n                >\n                  Please be aware that by migrating your tokens from other protocols, your open positions might be liquidated if collateralized with migrated tokens.\n                </Text>\n              </Flex>\n              <Flex\n                mb={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <ButtonLoader\n                  buttonText={'MIGRATE'}\n                  handleClick={this.migrate}\n                  isLoading={this.state.sendingForm}\n                  buttonProps={{\n                    width:['100%','50%'],\n                    className:header_styles.gradientButton\n                  }}\n                >\n                </ButtonLoader>\n                {\n                /*\n                <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without migrate</Link>\n                */\n                }\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default MigrateModal;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass UpgradeModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'close_upgrade_modal',\n        eventLabel: 'UpgradeModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowUpgradeModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowUpgradeModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = async (token,strategy=null) => {\n\n    if (!strategy){\n      strategy = this.props.selectedStrategy;\n    }\n\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  convert = async (token) => {\n    const convertTool = this.functionsUtil.getGlobalConfig(['tools','tokenMigration']);\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n\n    if (!this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            icon={`images/migrate.svg`}\n            title={'Upgrade Available'}\n            iconHeight={['35px','40px']}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={[2,3]}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                Idle now supports yield farming and governance tokens distribution, migrate now your portfolio with just one click!\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n              >\n                <Flex\n                  fontSize={[2,3]}\n                  width={[0.5,0.28]}\n                  fontWeight={[4,5]}\n                  color={'copyColor'}\n                >\n                  {\n                    this.props.isMobile ? 'ASSET' : 'ASSET TO MIGRATE'\n                  }\n                </Flex>\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      BALANCE\n                    </Flex>\n                  )\n                }\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      OLD APY\n                    </Flex>\n                  )\n                }\n                <Flex\n                  fontSize={[2,3]}\n                  fontWeight={[4,5]}\n                  width={[0.25,0.19]}\n                  color={'copyColor'}\n                  justifyContent={'center'}\n                >\n                  {\n                    this.props.isMobile ? 'APY' : 'NEW APY'\n                  }\n                </Flex>\n                <Flex\n                  width={[0.25,0.15]}\n                >\n                  \n                </Flex>\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.tokensToMigrate && Object.keys(this.props.tokensToMigrate).map( tokenKey => {\n                    const token = this.props.tokensToMigrate[tokenKey].token;\n                    const strategy = this.props.tokensToMigrate[tokenKey].strategy;\n                    const tokenConfig = this.props.tokensToMigrate[tokenKey].tokenConfig;\n                    const balance = this.props.tokensToMigrate[tokenKey].oldContractBalanceFormatted;\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${tokenKey}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={[0.5,0.28]}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:['1.8em','2.3em']\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                        </Flex>\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <SmartNumber\n                                {...fieldProps}\n                                minPrecision={5}\n                                number={balance}\n                                flexProps={{\n                                  justifyContent:'center'\n                                }}\n                              />\n                            </Flex>\n                          )\n                        }\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <AssetField\n                                {...this.props}\n                                fieldInfo={{\n                                  name:'oldApy',\n                                  props:fieldProps\n                                }}\n                                token={token}\n                                tokenConfig={tokenConfig}\n                              />\n                            </Flex>\n                          )\n                        }\n                        <Flex\n                          width={[0.25,0.19]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={token}\n                            tokenConfig={tokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={[0.25,0.15]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.migrate(token,strategy) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.oldIdleTokensToMigrate && Object.keys(this.props.oldIdleTokensToMigrate).map( token => {\n                    const tokenConfig = this.props.oldIdleTokensToMigrate[token].tokenConfig;\n\n                    if (!tokenConfig){\n                      return null;\n                    }\n\n                    const balance = this.props.oldIdleTokensToMigrate[token].balance;\n                    let newTokenConfig = null;\n\n                    if (tokenConfig.availableStrategies && !this.props.availableTokens[tokenConfig.baseToken]){\n                      newTokenConfig = this.props.availableStrategies[tokenConfig.availableStrategies[0]][tokenConfig.baseToken];\n                    } else {\n                      newTokenConfig = this.props.availableTokens[tokenConfig.baseToken];\n                    }\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${token}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={0.28}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:'2.3em'\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <SmartNumber\n                            {...fieldProps}\n                            minPrecision={5}\n                            number={balance}\n                            flexProps={{\n                              justifyContent:'center'\n                            }}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'oldApy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.15}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.convert(token) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                my={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <RoundButton\n                  handleClick={this.closeModal}\n                  buttonProps={{\n                    fontSize:[2,3],\n                    width:['100%','40%'],\n                  }}\n                >\n                  MIGRATE LATER\n                </RoundButton>\n                {\n                  <Checkbox\n                    mt={2}\n                    required={false}\n                    color={'mid-gray'}\n                    checked={this.state.dontShowAgain}\n                    label={`Don't show this popup again`}\n                    onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                  />\n                }\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default UpgradeModal;","import React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport { Flex, Card, Icon, Text } from 'rimble-ui';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardMenu from '../DashboardMenu/DashboardMenu';\n\n// Import page components\nimport Stats from '../Stats/Stats';\nimport Utils from '../Utils/Utils';\nimport AssetPage from '../AssetPage/AssetPage';\nimport RoundButton from '../RoundButton/RoundButton';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CurveStrategy from '../CurveStrategy/CurveStrategy';\nimport WelcomeModal from \"../utilities/components/WelcomeModal\";\nimport TooltipModal from \"../utilities/components/TooltipModal\";\nimport MigrateModal from \"../utilities/components/MigrateModal\";\nimport UpgradeModal from \"../utilities/components/UpgradeModal\";\nimport DashboardHeader from '../DashboardHeader/DashboardHeader';\n\nclass Dashboard extends Component {\n  state = {\n    menu:[],\n    baseRoute:null,\n    clickEvent:null,\n    activeModal:null,\n    currentRoute:null,\n    pageComponent:null,\n    currentSection:null,\n    selectedSection:null,\n    tokensToMigrate:null,\n    showResetButton:false,\n    selectedSubsection:null,\n    oldIdleTokensToMigrate:null,\n    protocolsTokensBalances:null,\n  };\n\n  timeoutId = null;\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    window.functionsUtil = this.functionsUtil;\n  }\n\n  async loadMenu() {\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n    const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n    const menu = Object.keys(strategies).filter( s => ( !strategies[s].comingSoon ) ).map(strategy => ({\n        submenu:[],\n        color:'#fff',\n        selected:false,\n        route:baseRoute+'/'+strategy,\n        label:strategies[strategy].title,\n        image:strategies[strategy].icon,\n        bgColor:strategies[strategy].color,\n        component:strategies[strategy].component,\n        imageInactive:strategies[strategy].iconInactive,\n        imageInactiveDark:strategies[strategy].iconInactiveDark\n      })\n    );\n\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n\n    // Add Curve\n    if (curveConfig.enabled){\n      const curveParams = Object.assign({\n        submenu:[],\n        selected:false,\n        component:CurveStrategy,\n      },curveConfig.params);\n\n      menu.push(curveParams);\n    }\n\n    // Add tools\n    menu.push(\n      {\n        icon:'Build',\n        label:'Tools',\n        color:'dark-gray',\n        component:Utils,\n        selected:false,\n        route:'/dashboard/tools',\n        bgColor:this.props.theme.colors.primary,\n        submenu:Object.values(this.functionsUtil.getGlobalConfig(['tools'])).filter( u => (u.enabled) )\n      }\n    );\n\n    // Add Stats\n    menu.push(\n      {\n        icon:'Equalizer',\n        label:'Stats',\n        bgColor:'#21f36b',\n        color:'dark-gray',\n        component:Stats,\n        selected:false,\n        route:'/dashboard/stats',\n        submenu:[]\n      }\n    );\n\n    // Add Forum\n    menu.push(\n      {\n        submenu:[],\n        icon:'Forum',\n        mobile:false,\n        label:'Forum',\n        selected:false,\n        component:null,\n        color:'dark-gray',\n        bgColor:'#ff0000',\n        isExternalLink:true,\n        route:this.functionsUtil.getGlobalConfig(['forumURL'])\n      }\n    );\n\n    await this.setState({\n      menu\n    });\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  openTooltipModal = (modalTitle,modalContent) => {\n\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: modalTitle,\n      eventLabel: 'TooltipModal'\n    });\n\n    this.setState({\n      modalTitle,\n      modalContent\n    },() => {\n      this.setActiveModal('tooltip');\n    })\n  }\n\n  setActiveModal = (activeModal) => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadParams() {\n    const { match: { params } } = this.props;\n\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n    let currentRoute = baseRoute;\n\n    let pageComponent = null;\n    let selectedToken = null;\n    let currentSection = null;\n    let selectedStrategy = null;\n\n    // Set strategy\n    if (params.section){\n      currentSection = params.section;\n      const param1 = params.param1;\n      const param2 = params.param2;\n\n      const section_is_strategy = Object.keys(this.props.availableStrategies).includes(currentSection.toLowerCase());\n      const param1_is_strategy = param1 && Object.keys(this.props.availableStrategies).includes(param1.toLowerCase());\n\n      if (section_is_strategy || param1_is_strategy){\n        selectedStrategy = section_is_strategy ? currentSection : param1;\n        currentRoute += '/'+selectedStrategy;\n\n        // Set token\n        const param1_is_token = param1 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param1.toUpperCase());\n        const param2_is_token = param2 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param2.toUpperCase());\n        if (param1_is_token || param2_is_token){\n          selectedToken = param1_is_token ? param1.toUpperCase() : param2.toUpperCase();\n          currentRoute += '/'+selectedToken;\n\n          if (section_is_strategy){\n            pageComponent = AssetPage;\n          }\n        }\n      } else {\n        currentRoute += '/'+params.section;\n\n        if (params.param1 && params.param1.length){\n          currentRoute += '/'+params.param1;\n        }\n\n        // if (params.param2 && params.param2.length){\n        //   currentRoute += '/'+params.param2;\n        // }\n      }\n    }\n\n    const menu = this.state.menu;\n\n    let selectedSection = null;\n    let selectedSubsection = null;\n\n    menu.forEach(m => {\n      m.selected = false;\n      const sectionRoute = baseRoute+'/'+params.section;\n      if (currentRoute.toLowerCase() === m.route.toLowerCase() || ( !m.submenu.length && m.route.toLowerCase() === sectionRoute.toLowerCase() )){\n        m.selected = true;\n        if (pageComponent === null){\n          pageComponent = m.component;\n        }\n      } else if (m.submenu.length) {\n        m.submenu.forEach(subm => {\n          subm.selected = false;\n          const submRoute = m.route+'/'+subm.route;\n          if (submRoute.toLowerCase() === currentRoute.toLowerCase()){\n            m.selected = true;\n            subm.selected = true;\n\n            // Set component, if null use parent\n            if (pageComponent === null){\n              if (subm.component){\n                pageComponent = subm.component;\n              } else {\n                pageComponent = m.component;\n              }\n            }\n          }\n\n          // Set selected subsection\n          if (subm.selected){\n            selectedSubsection = subm;\n          }\n\n        });\n      }\n\n      // Set selected section\n      if (m.selected){\n        selectedSection = m;\n      }\n    });\n\n    // console.log('pageComponent',params,pageComponent);\n\n    // Exit if no strategy and token selected\n    if (!pageComponent){\n      return this.goToSection('/',false);\n    }\n\n    // console.log('loadParams',selectedStrategy,selectedToken);\n    await this.props.setStrategyToken(selectedStrategy,selectedToken);\n\n    await this.setState({\n      menu,\n      params,\n      baseRoute,\n      currentRoute,\n      pageComponent,\n      currentSection,\n      selectedSection,\n      selectedSubsection\n    });\n  }\n\n  componentWillUnmount(){\n    if (this.timeoutId){\n      window.clearTimeout(this.timeoutId);\n    }\n  }\n\n  async componentWillMount() {\n\n    this.props.setCurrentSection('dashboard');\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n  }\n\n  async componentDidMount() {\n\n    this.timeoutId = window.setTimeout(() => {\n      if (!this.props.accountInizialized || !this.props.contractsInitialized){\n        this.setState({\n          showResetButton:true\n        });\n      }\n    },20000);\n\n    if (!this.props.web3){\n      return this.props.initWeb3();\n    } else if (!this.props.accountInizialized){\n      return this.props.initAccount();\n    } else if (!this.props.contractsInitialized){\n      return this.props.initializeContracts();\n    }\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n\n    const viewOnly = this.props.connectorName === 'custom';\n    if (!viewOnly){\n      this.checkModals();\n    }\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n\n    this.loadUtils();\n\n    const prevParams = prevProps.match.params;\n    const params = this.props.match.params;\n\n    if (JSON.stringify(prevParams) !== JSON.stringify(params)){\n      await this.setState({\n        pageComponent:null\n      }, () => {\n        this.loadParams();\n      });\n    }\n\n    const viewOnly = this.props.connectorName === 'custom';\n    const accountChanged = prevProps.account !== this.props.account;\n    const strategyChanged = this.props.selectedStrategy && prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const accountInizialized = this.props.accountInizialized && prevProps.accountInizialized !== this.props.accountInizialized;\n    const contractsInitialized = this.props.contractsInitialized && prevProps.contractsInitialized !== this.props.contractsInitialized;\n\n    if (!viewOnly && (accountChanged || accountInizialized || contractsInitialized || strategyChanged)){\n      this.checkModals();\n    }\n  }\n\n  async checkModals(){\n\n    if (this.props.selectedToken || !this.props.accountInizialized || !this.props.contractsInitialized || !this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    await this.checkTokensToMigrate();\n    await this.checkWelcomeModal();\n    await this.checkProtocolsTokensBalances();\n  }\n\n  async checkTokensToMigrate(){\n\n    const showUpgradeModal = this.functionsUtil.getStoredItem('dontShowUpgradeModal',false,null) !== null ? false : true;\n    if (this.props.selectedToken || !showUpgradeModal || !this.props.availableTokens){\n      return null;\n    }\n\n    const tokensToMigrate = await this.functionsUtil.getTokensToMigrate();\n    const oldIdleTokensToMigrate = await this.functionsUtil.getProtocolsTokensBalances('idle');\n\n    // console.log('tokensToMigrate',tokensToMigrate);\n    \n    if ((tokensToMigrate && Object.keys(tokensToMigrate).length>0) || (oldIdleTokensToMigrate && Object.keys(oldIdleTokensToMigrate).length>0)){\n      const activeModal = 'upgrade';\n      if (activeModal !== this.state.activeModal){\n        this.setState({\n          activeModal,\n          tokensToMigrate,\n          oldIdleTokensToMigrate\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkWelcomeModal(){\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show welcome modal\n    if (this.props.account && this.state.activeModal === null){\n      let welcomeIsOpen = false;\n\n      const welcomeModalProps = this.functionsUtil.getGlobalConfig(['modals','welcome']);\n\n      if (welcomeModalProps.enabled && localStorage){\n\n        // Check the last login of the wallet\n        const currTime = new Date().getTime();\n        const walletAddress = this.props.account.toLowerCase();\n        let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : {};\n\n        // First login\n        if (!lastLogin[walletAddress]){\n          lastLogin[walletAddress] = {\n            'signedUp':false,\n            'lastTime':currTime\n          };\n          welcomeIsOpen = true;\n        // User didn't sign up\n        } else if (!lastLogin[walletAddress].signedUp) {\n          const lastTime = parseInt(lastLogin[walletAddress].lastTime);\n          const timeFromLastLogin = (currTime-lastTime)/1000;\n          welcomeIsOpen = timeFromLastLogin>=welcomeModalProps.frequency; // 1 day since last login\n        }\n\n        if (welcomeIsOpen){\n          lastLogin[walletAddress].lastTime = currTime;\n          this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n        }\n      }\n\n      const activeModal = welcomeIsOpen ? 'welcome' : this.state.activeModal;\n      if (this.state.activeModal !== activeModal){\n        this.setState({\n          activeModal\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkProtocolsTokensBalances() {\n\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show migration modal if no other modals are opened\n    const migrateModalEnabled = this.functionsUtil.getGlobalConfig(['modals','migrate','enabled']);\n    const showMigrateModal = this.functionsUtil.getStoredItem('dontShowMigrateModal',false,null) !== null ? false : true;\n\n    if (this.state.activeModal === null && migrateModalEnabled && showMigrateModal && !this.state.protocolsTokensBalances){\n      const protocolsTokensBalances = await this.functionsUtil.getProtocolsTokensBalances();\n      const activeModal = protocolsTokensBalances && Object.keys(protocolsTokensBalances).length>0 ? 'migrate' : null;\n      const newState = {\n        activeModal,\n        protocolsTokensBalances\n      };\n      this.setState(newState);\n      return activeModal;\n    }\n\n    return null;\n  }\n\n  goToSection(section,isDashboard=true){\n\n    // Remove dashboard route\n    if (isDashboard){\n      section = section.replace(this.state.baseRoute +'/','');\n    }\n\n    const newRoute = isDashboard ? this.state.baseRoute +'/' + section : section;\n    window.location.hash=newRoute;\n\n    // Send GA event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'goToSection',\n      eventLabel: newRoute\n    });\n\n    window.scrollTo(0, 0);\n  }\n\n  logout = async () => {\n    this.props.setConnector('Infura','Infura');\n    await this.props.initWeb3('Infura');\n  }\n\n  changeToken(selectedToken){\n    selectedToken = selectedToken.toUpperCase();\n    if (Object.keys(this.props.availableTokens).includes(selectedToken)){\n      const routeParts = [];\n\n      // Add section\n      if (this.state.currentSection.toLowerCase() !== this.props.selectedStrategy.toLowerCase()){\n        routeParts.push(this.state.currentSection);\n      }\n\n      // Add strategy\n      routeParts.push(this.props.selectedStrategy); \n\n      // Add token\n      routeParts.push(selectedToken);\n\n      this.goToSection(routeParts.join('/'));\n    }\n  }\n\n  propagateClickEvent(clickEvent){\n    this.setState({\n      clickEvent:clickEvent.target\n    });\n  }\n\n  render() {\n    const PageComponent = this.state.pageComponent ? this.state.pageComponent : null;\n    return (\n      <Flex\n        width={'100%'}\n        position={'fixed'}\n        flexDirection={'row'}\n        backgroundColor={['dashboardBg','white']}\n        /*onClick={ e => this.propagateClickEvent(e) }*/\n        height={[(window.innerHeight-61)+'px','100vh']}\n      >\n        <Flex\n          bottom={0}\n          zIndex={99999}\n          width={[1,1/6]}\n          flexDirection={'column'}\n          position={['fixed','relative']}\n        >\n          <Card\n            p={[0,3]}\n            border={0}\n            width={['100vw','auto']}\n            height={['auto','100vh']}\n            backgroundColor={'menuBg'}\n            borderColor={this.props.theme.colors.menuRightBorder}\n            borderRight={`1px solid ${this.props.theme.colors.menuRightBorder}`}\n            >\n            <DashboardMenu\n              {...this.props}\n              menu={this.state.menu}\n            />\n          </Card>\n        </Flex>\n        <Flex\n          py={3}\n          mb={0}\n          px={[3,5]}\n          width={[1,5/6]}\n          style={{\n            overflowY:'scroll',\n            overflowX:'hidden'\n          }}\n          height={['92vh','auto']}\n          flexDirection={'columns'}\n          backgroundColor={'dashboardBg'}\n        >\n          {\n            !this.props.accountInizialized || !this.props.contractsInitialized || !PageComponent ? (\n              <Flex\n                width={1}\n                minHeight={'50vg'}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                {\n                  !this.state.showResetButton ? (\n                    <FlexLoader\n                      textProps={{\n                        textSize:4,\n                        fontWeight:2\n                      }}\n                      loaderProps={{\n                        mb:3,\n                        size:'40px'\n                      }}\n                      flexProps={{\n                        my:3,\n                        flexDirection:'column'\n                      }}\n                      text={ !this.props.accountInizialized ? 'Loading account...' : ( !this.props.contractsInitialized ? 'Loading contracts...' : 'Loading assets...' )}\n                    />\n                  ) : (\n                    <DashboardCard\n                      cardProps={{\n                        p:3,\n                        mt:3,\n                        width:[1,0.35]\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Icon\n                          size={'2.3em'}\n                          name={'Warning'}\n                          color={'cellText'}\n                        />\n                        <Text\n                          mt={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          Idle can't connect to your wallet!<br />Make sure that your wallet is unlocked and try again.\n                        </Text>\n                        <RoundButton\n                          buttonProps={{\n                            mt:3,\n                            width:[1,1/2]\n                          }}\n                          handleClick={this.logout.bind(this)}\n                        >\n                          Logout\n                        </RoundButton>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n              </Flex>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardHeader\n                  clickEvent={this.state.clickEvent}\n                  goToSection={this.goToSection.bind(this)}\n                  {...this.props}\n                />\n                {\n                  PageComponent &&\n                    <PageComponent\n                      {...this.props}\n                      match={{ params:{} }}\n                      urlParams={this.state.params}\n                      changeToken={this.changeToken.bind(this)}\n                      goToSection={this.goToSection.bind(this)}\n                      selectedSection={this.state.selectedSection}\n                      selectedSubsection={this.state.selectedSubsection}\n                      openTooltipModal={this.openTooltipModal.bind(this)}\n                      />\n                }\n              </Flex>\n            )\n          }\n        </Flex>\n        <UpgradeModal\n          {...this.props}\n          closeModal={this.resetModal}\n          goToSection={this.goToSection.bind(this)}\n          tokensToMigrate={this.state.tokensToMigrate}\n          isOpen={this.state.activeModal === 'upgrade'}\n          oldIdleTokensToMigrate={this.state.oldIdleTokensToMigrate}\n        />\n        <MigrateModal\n          {...this.props}\n          closeModal={this.resetModal}\n          goToSection={this.goToSection.bind(this)}\n          isOpen={this.state.activeModal === 'migrate'}\n          protocolsTokensBalances={this.state.protocolsTokensBalances}\n        />\n        <TooltipModal\n          closeModal={this.resetModal}\n          title={this.state.modalTitle}\n          content={this.state.modalContent}\n          isOpen={this.state.activeModal === 'tooltip'}\n        >\n        </TooltipModal>\n        <WelcomeModal\n          closeModal={this.resetModal}\n          account={this.props.account}\n          simpleID={this.props.simpleID}\n          network={this.props.network.current}\n          tokenName={this.props.selectedToken}\n          initSimpleID={this.props.initSimpleID}\n          baseTokenName={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'welcome'}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default Dashboard;"],"sourceRoot":""}