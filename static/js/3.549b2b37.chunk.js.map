{"version":3,"sources":["AssetsUnderManagement/AssetsUnderManagement.js","TwitterShareButton/TwitterShareButton.module.scss","Stats/StatsChart.js","Rebalance/Rebalance.js","utilities/components/DateRangeModal.js","ExecuteTransaction/ExecuteTransaction.js","Stats/Stats.js","Utils/Utils.js","FundsOverview/FundsOverview.js","CurveRedeem/CurveRedeem.js","TwitterShareButton/TwitterShareButton.js","utilities/components/ShareModal.js","DepositRedeem/DepositRedeem.js","EstimatedEarnings/EstimatedEarnings.js","AssetPage/AssetPage.js","utilities/components/BetaModal.js","CurveDeposit/CurveDeposit.js","PortfolioEquityCurve/PortfolioEquityCurve.js","FundsOverviewCurve/FundsOverviewCurve.js","CurveStrategy/CurveStrategy.js","utilities/components/WelcomeModal.js","utilities/components/MigrateModal.js","utilities/components/UpgradeModal.js","Dashboard/Dashboard.js"],"names":["AssetsUnderManagement","state","totalAUM","totalAUMEndOfYear","functionsUtil","this","setProps","props","FunctionsUtil","loadUtils","loadTotalAUM","prevProps","prevState","contractsInitialized","availableStrategies","JSON","stringify","getAggregatedStats","avgAPY","plus","times","div","setState","_this2","react__WEBPACK_IMPORTED_MODULE_9___default","a","createElement","rimble_ui__WEBPACK_IMPORTED_MODULE_10__","width","react_countup__WEBPACK_IMPORTED_MODULE_8___default","delay","decimals","decimal","separator","useEasing","duration","start","parseFloat","end","formattingFn","n","formatMoney","_ref2","countUpRef","style","counterStyle","display","color","whiteSpace","fontFamily","theme","fonts","counter","fontWeight","fontWeights","textAlign","isMobile","fontSize","fontSizes","ref","subtitle","_Title_Title__WEBPACK_IMPORTED_MODULE_7__","Object","assign","subtitleProps","span","alignItems","justifyContent","loaderAlign","size","Component","module","exports","twitterIcon","StatsChart","chartProps","chartType","chartData","chartWidth","parseAum","value","parseInt","toFixed","_this","selectedToken","loadApiData","_callee3","maxGridLines","apiResults","apiResults_unfiltered","totalItems","protocols","versionInfo","keys","tempData","gridYStep","itemIndex","gridYValues","maxChartValue","axisBottomIndex","idleChartData","firstIdleBlock","divergingData","startTimestamp","endTimestamp","timestamp","date","lastRow","maxRange","i","_i","_i2","_i3","prevValue","_i4","prevApr","prevData","startBalance","currentBalance","avgApy","_i5","firstTokenPrice","_i6","regenerator_default","wrap","_context3","prev","next","tokenConfig","chartMode","abrupt","length","globalConfigs","stats","versions","idleVersion","Line","t0","moment","_d","getTime","format","deposits","redeems","forEach","row","idleTokens","fixTokenDecimals","idleSupply","idleTokensPrev","eq","diff","minus","gte","Math","max","abs","values","filter","v","Bar","push","indexBy","enableLabel","minValue","maxValue","label","d","axisBottom","tickSize","legend","tickPadding","orient","legendOffset","legendPosition","tickValues","axisLeft","axisRight","tickRotation","abbreviateNumber","markers","axis","lineStyle","strokeOpacity","textStyle","fill","colors","transactions","action","deposit","legendOrientation","legendOffsetX","stroke","strokeDasharray","redeem","padding","labelTextColor","labelSkipWidth","labelSkipHeight","pointSize","useMesh","animate","pointLabel","curve","enableArea","enableSlices","enableGridX","enableGridY","pointBorderWidth","pointLabelYOffset","legends","dataFrom","itemWidth","itemHeight","translateX","translateY","symbolSize","itemsSpacing","direction","anchor","symbolShape","itemTextColor","effects","on","ticks","text","sansSerif","grid","line","lineChartStroke","textTransform","tooltip","container","boxShadow","background","pointColor","from","modifiers","margin","top","right","bottom","left","data","xFormatted","strToMoment","indexValue","point","id","depositFormatted","redeemFormatted","react_default","CustomTooltip","CustomTooltipRow","tokens","hsl","join","map","idlePrice","aum","x","y","toString","p","j","protocolsData","protocolAllocation","protocolAddr","toLowerCase","address","z","BNify","rate","allocation","foundItem","item","pos","indexOf","allocations","name","undefined","xScale","type","xFormat","yFormat","yScale","stacked","showAdvanced","sliceTooltip","slideData","slice","points","serieId","serieColor","yFormatted","protocolName","protocolInfo","protocolColor","protocolAllocationFormatted","protocolAllocationPerc","key","concat","protocolData","protocolPaused","foundProtocol","find","tableCell","_ref3","DashboardCard","cardProps","py","px","borderCollapse","height","totalAllocation","reduce","accumulator","allocationPerc","_ref4","_ref5","enabled","idle","idleRate","protocolEarning","defiScore","isNaN","idleScore","apy","apr","days","earnings","earning","blocknumber","itemPos","floor","additionalProtocols","additionalProtocol","protocol","unshift","rateField","chartRow","baseProfit","firstProtocolData","firstProtocolBlock","pData","protocolRate","acc","field","idlePerformance","d1","rowData","protocolApy","tokenPrice","asyncForEach","_ref6","asyncToGenerator","mark","_callee2","lastRowData","lastTokenPrice","_context2","_ref7","_callee","tokenExchangeRate","tokenPriceFixed","lastYDiff","_context","price","lt","stop","_x2","apply","arguments","_x","showAdvancedChanged","apiResultsChanged","tokenChanged","componentDidMount","GenericChart","showLoader","parentId","parentIdHeight","Rebalance","loading","processing","rebalance","txHash","shouldRebalance","checkRebalance","sent","e","callback","callback_receipt","preventDefault","tx","error","eventData","eventCategory","eventAction","eventLabel","status","getTransactionError","sendGoogleAnalyticsEvent","window","toastProvider","addMessage","secondaryMessage","colorTheme","actionHref","actionText","variant","objectSpread","transactionHash","contractMethodSendWrapper","token","accountChanged","account","index_es","minHeight","flexDirection","FlexLoader","flexProps","loaderProps","textProps","ml","TxProgressBar","web3","waitText","endMessage","hash","mt","mb","RoundButton","buttonProps","disabled","handleClick","DateRangeModal","quickSelection","ranges","startDate","Date","endDate","componentDidUpdate","selection","target","clone","subtract","closeModal","newState","handleSelect","startTimestampObj","endTimestampObj","_this3","isOpen","ModalCard","closeFunc","Header","title","Body","backgroundColor","cardBg","required","onChange","handleQuickSelect","bind","options","dist","minDate","maxDate","className","themeMode","Footer","my","mx","borderRadius","mainColor","onClick","React","ExecuteTransaction","txStatus","contractName","methodName","params","ExecuteComponent","parentProps","children","progressBarProps","cancelTransaction","execute","componentProps","Stats","delta","carouselMax","rebalances","buttonGroups","carouselIndex","statsVersions","minStartTime","govTokensPool","unlentBalance","carouselOffsetLeft","showRefreshIdleSpeed","dateRangeModalOpened","quickSelections","day","week","weeks","month","componentUnmounted","setDateRange","isSameOrAfter","isSame","add","isBefore","isAfter","maxEndDate","setStateSafe","toggleAdvancedCharts","setDateRangeModal","filterTokenData","r","setIdleVersion","isRisk","firstResult","lastResult","firstIdlePrice","lastIdlePrice","compoundInfo","firstCompoundData","lastCompoundData","compoundWithCOMPInfo","compoundAvgApr","firstCompoundPrice","lastCompoundPrice","compoundApr","availableTokens","includes","selectedStrategy","getTokenApiData","pop","convertTokenBalance","sum","compoundWithCOMP","compoundData","compoundRate","index","prevRow","prevTotalAllocation","hasRebalanced","prevP","prevAllocation","getGovTokenPool","getUnlentBalance","selectToken","strategy","setStrategyToken","changeToken","handleCarousel","$element","jQuery","position","loadParams","latestVersion","version","enabledStrategies","strategiesParams","versionInfoExtra","param","match","currentNetworkAvailableTokens","customToken","toUpperCase","getLatestAvailableVersion","getVersionInfo","newEndTimestampObj","newStartTimestampObj","initWeb3","loadCarousel","strategyChanged","dateChanged","versionChanged","idleTokenEnabled","getGlobalConfig","apyLong","textSize","versionsOptions","enabledTokens","performanceTooltip","versionDefaultValue","Breadcrumb","showPathMobile","goToSection","path","GenericSelector","innerProps","defaultValue","AssetSelector","isInteractive","pr","StatsCard","labelTooltip","SmartNumber","precision","lineHeight","unitProps","number","unit","VariationNumber","iconPos","iconSize","description","Stats_StatsChart","contracts","pb","pt","AllocationChart","src_Rebalance_Rebalance","pl","h4","RoundIconButton","mr","iconName","transition","titleParentProps","utilities_components_DateRangeModal","strategies","statsTokens","statsProtocols","strategyInfo","Title","titlePostfix","AssetsList","cols","fields","mobile","overflow","desc","showTooltip","rgb","hoverColor","isActive","src_ExecuteTransaction_ExecuteTransaction","Button","completed","Utils","SubComponent","selectedSubsection","subComponent","viewOnly","connectorName","showBreadCrumb","selectedSection","route","directProps","toolProps","flexWrap","IconBox","maxWidth","icon","submenu","tool","toolIndex","flex","image","src","FundsOverview","govTokensAprs","aggregatedValues","govTokensTotalApr","govTokensUserBalance","govTokensDistribution","govTokensTotalBalance","govTokensTotalAprTooltip","idleTokenUserDistribution","govTokensDistributionTooltip","govTokensTotalBalanceTooltip","idleGovToken","getIdleGovToken","govTokenAvailableTokens","Promise","all","getGovTokensAprs","getUserDistribution","getGovTokensUserBalances","loadAssetField","depositTimestamp","getAvgAPYStats","totBalance","govTokenBalance","govToken","balance","gt","totApr","govTokenApr","dangerouslySetInnerHTML","__html","AssetField","fieldInfo","placement","message","PortfolioEquity","chartHeight","chartToken","frequencySeconds","getFrequencySeconds","component","Heading","h3","maxPrecision","govTokenIndex","tokenName","distributionFrequency","CurveRedeem","inputValue","maxSlippage","unevenAmounts","buttonDisabled","showMaxSlippage","redeemUnderlying","curveTokenConfig","curvePoolContract","curveSwapContract","curveTokenBalance","curveTokensAmounts","fastBalanceSelector","redeemUnevenAmounts","curveRedeemableIdleTokens","toggleUnevenAmounts","checkButtonDisabled","amount","changeInputValue","setFastBalanceSelector","setMaxSlippage","initToken","max_slippage","lte","normalizedAmount","normalizeTokenAmount","withdrawSlippage","curveIdleTokensAmounts","getCurveTokensAmounts","getCurveIdleTokensAmounts","getCurveSlippage","getCurveTokenPrice","curveTokenPrice","redeemableBalance","redeemUnevenAmountsChanged","setInputValue","inputChanged","maxSlippageChanged","tokenConfigChanged","calculateSlippage","loadSelectedTokenConfig","selectedPercentage","curveConfig","getCurvePoolContract","getCurveSwapContract","getCurveTokenBalance","getCurveRedeemableIdleTokens","getCurveAvailableTokens","callbackRedeem","txSucceeded","eventValue","callbackReceiptRedeem","_amount","min_amounts","console","log","coin_index","migrationParams","coinIndex","min_amount","showSlippage","curveTokenName","checked","showBalance","selectDestinationToken","slippage","FastBalanceSelector","percentage","onMouseDown","failed","textOverflow","min","placeholder","border","divider","TwitterShareButton","share","parent","w","innerWidth","open","tweet","contrastColor","styles","ShareModal","getGlobalConfigs","analytics","google","events","escape","customText","confettiEnabled","react_confetti_default","zIndex","run","recycle","innerHeight","src_TwitterShareButton_TwitterShareButton","DepositRedeem","txError","tokenAPY","curveAPY","canRedeem","canDeposit","directMint","activeModal","showBuyFlow","maxUnlentPerc","tokenApproved","skipMigration","showRedeemFlow","contractPaused","canRedeemCurve","erc20ForwarderTx","signedParameters","minAmountForMint","redeemGovTokens","canDepositCurve","actionProxyContract","migrationEnabled","componentMounted","redeemCurveEnabled","depositCurveBalance","depositCurveEnabled","showAdvancedOptions","erc20ForwarderContract","depositCurveSlippage","erc20ForwarderEnabled","showETHWrapperEnabled","metaTransactionsEnabled","minAmountForMintReached","loadingErc20ForwarderTx","setShowRedeemFlow","setShowBuyFlow","toggleShowAdvancedOptions","toggleSkipMigration","toggleRedeemCurve","toggleDepositCurve","toggleShowETHWrapper","toggleSkipMint","toggleRedeemGovTokens","toggleErc20ForwarderEnabled","toggleMetaTransactionsEnabled","resetModal","setActiveModal","checkUseProxyContract","proxyContract","depositErc20ForwarderEnabled","depositMetaTransactionsEnabled","biconomy","approveContract","callbackApprove","callbackReceiptApprove","curveDepositContract","enableERC20","checkTokenApproved","approveToken","approve","loadTokenInfo","_callee4","curveTokenEnabled","_context4","checkContractPaused","getCurveDepositContract","checkMigration","slicedToArray","tokenBalance","idleTokenBalance","boost","checkAction","loadAPY","_callee5","_context5","defineProperty","executeAction","_callee8","contractSendResult","callbackDeposit","callbackReceiptDeposit","curvePoolContractInfo","tokensToDeposit","amounts","minMintAmount","depositParams","_tokensToDeposit","_depositParams","mintProxyContractInfo","mintProxyContract","_mintProxyContract$me","functionCall","functionSignature","_skipMint","_referral","txData","idleTokenToRedeem","idleTokenPriceWithFee","_callbackRedeem","_callbackReceiptRedeem","redeemParams","_context8","getFastBalanceSelector","localStorage","setLocalStorage","lendingProcessing","lendAmount","genericError","getCurveAmounts","getCurveTokenAmount","integerValue","contract","methods","function","toConsumableArray","encodeABI","sendBiconomyTxWithPersonalSign","_callee7","metaInfo","permitOptions","erc20ForwarderBaseContract","expiry","nonce","s","_context7","signPermit","allowed","holder","spender","permitData","permitType","asyncTimeout","sendBiconomyTxWithErc20Forwarder","request","_callee6","_erc20ForwarderContra","_functionCall","_functionSignature","_context6","buildBiconomyErc20ForwarderTx","skipMintForDeposit","getReferralAddress","getIdleTokenPriceWithFee","_callee9","_context9","setAction","loadProxyContracts","actions","_ref12","_callee12","erc20ForwarderContractInfo","hasProxyContract","_context12","initContract","abi","approved","_x4","getTokenAprs","tokenAprs","getCurveAPY","getQueryStringParameterByName","checkAddress","erc20ForwarderEnabledChanged","tokenBalanceChanged","actionChanged","fastBalanceSelectorChanged","checkMinAmountForMint","depositCurveChanged","calculateCurveSlippage","showPoolPerc","convertedAmount","genericContractCall","depositPerc","maxUnlentPercFormatted","govTokensDisabled","govTokensEnabled","skipMintForDepositEnabled","skipMintCheckboxEnabled","redeemGovTokenEnabled","metaTransactionsAvailable","useMetaTx","erc20ForwarderClient","totalBalance","migrateText","migration","depositCurve","showDepositOptions","showDepositCurve","showRedeemCurve","showCurveSlippage","showRebalanceOption","showAdvancedDepositOptions","batchDepositInfo","batchDepositEnabled","batchDepositDepositEnabled","depositEnabled","showBatchDeposit","isMigrationTool","ethWrapperInfo","ETHWrapperComponent","showETHWrapper","canPerformAction","showActionFlow","showReferral","Migrate","migrateTextBefore","TransactionField","transaction","isDisabled","openTooltipModal","isRainbow","CardIconButton","imageProps","ExtLink","href","getWalletProvider","capitalize","primary","fullWidth","govTokensBalance","cost","align","tokenFeesPercentage","borderColor","minWidth","ConnectBox","src_CurveRedeem_CurveRedeem","BuyModal","showInline","availableMethods","buyToken","components_ShareModal","EstimatedEarnings","maxInputValue","loadChart","getTokenApy","earningsYear","tokenApy","amountMonth","amount3Months","amount6Months","amountYear","perc","monthColor","month3","month3Color","month6","month6Color","year","yearColor","labelTextColorModifiers","gridYValue","_ref","labels","showAPYDisclaimer","verticalAlign","AssetPage","tokenFees","idleTokenPrice","availableGovTokens","getTokenFees","getTokenBalance","getUserTokenFees","getGovTokensUserTotalBalance","getTokenGovTokens","loadTokensInfo","transactionsChanged","userHasFunds","src_DepositRedeem_DepositRedeem","src_FundsOverview_FundsOverview","src_EstimatedEarnings_EstimatedEarnings","TransactionsList","BetaModal","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","iconHeight","CurveDeposit","depositSlippage","migrationContract","curveTokensBalance","migrationSucceeded","migrationContractApproved","checkMigrationContractApproved","getMigrationParams","approveCallback","migrationCallback","idleTokenBalanceChanged","toMigrate","n_coins","underlyingBalanceToDeposit","getIdleTokenPrice","normalizeIdleTokenBalance","hasCurveTokens","PortfolioEquityCurve","chartwidth","loadChartData","quickDateSelectionChanged","quickDateSelection","getCurveTxs","curveTxs","tokensBalance","processedTxs","firstTxTimestamp","timeStamp","curveTokens","currentDate","prevBalances","prevTimestamp","minChartValue","aggregatedBalancesKeys","tokensBalancesPerDate","aggregatedBalance","currTimestamp","tokensData","foundBalances","tokensBalances","momentDate","filteredTokenData","filteredBalances","lastFilteredTx","lastTokenData","lastTx","lastTxBalance","formattedDate","aggregatedBalanceParsed","aggregatedBalances","balances","yFormatDecimals","daysCount","daysFrequency","ceil","areaOpacity","areaBaselineValue","ChartCustomTooltip","ChartCustomTooltipRow","tokenInfo","hex","formattedBalance","FundsOverviewCurve","compAPR","getCurveAvgBuyPrice","getCurveAvgSlippage","src_PortfolioEquityCurve_PortfolioEquityCurve","redeemBalance","depositBalance","curveZapContract","curveAvailableTokens","changeFromToken","setSelectedToken","baseToken","getSelectedToken","urlParams","param1","getCurveZapContract","updateAssetSelector","curveTokensToRedeem","src_CurveDeposit_CurveDeposit","src_FundsOverviewCurve_FundsOverviewCurve","enabledActions","WelcomeModal","email","subscribed","sendingForm","sendUserInfo","sendEmail","walletProvider","userInfo","provider","simpleIDPassUserInfo","setTimeout","err","handleSubmit","assertThisInitialized","handleValidation","axios","post","newsletterSubscription","endpoint","then","catch","walletAddress","lastLogin","getItem","parse","signedUp","parentNode","classList","onSubmit","green","Field","Input","outline","header_styles","input","ButtonLoader","buttonText","isLoading","gradientButton","MigrateModal","dontShowAgain","toggleDontShowAgain","removeStoredItem","migrate","tokenMigrationRoute","fieldProps","protocolsTokensBalances","minPrecision","UpgradeModal","_args3","convert","convertTool","tokensToMigrate","tokenKey","oldContractBalanceFormatted","oldIdleTokensToMigrate","newTokenConfig","Dashboard","menu","baseRoute","clickEvent","currentRoute","pageComponent","currentSection","showResetButton","pageComponentProps","timeoutId","modalTitle","modalContent","logout","setConnector","comingSoon","selected","bgColor","imageInactive","iconInactive","imageInactiveDark","iconInactiveDark","curveParams","CurveStrategy","stakeConfig","u","isExternalLink","section","param2","section_is_strategy","param1_is_strategy","param1_is_token","param2_is_token","m","sectionRoute","subm","clearTimeout","setCurrentSection","loadMenu","accountInizialized","initAccount","initializeContracts","checkModals","prevParams","checkBetaApproval","checkTokensToMigrate","checkWelcomeModal","checkProtocolsTokensBalances","isOriginUrl","checkUrlOrigin","isBetaApproved","getStoredItem","showUpgradeModal","getTokensToMigrate","getProtocolsTokensBalances","welcomeIsOpen","welcomeModalProps","currTime","lastTime","frequency","migrateModalEnabled","showMigrateModal","isDashboard","replace","newRoute","location","scrollTo","routeParts","PageComponent","menuRightBorder","borderRight","DashboardMenu","overflowY","overflowX","DashboardHeader","components_BetaModal","components_UpgradeModal","components_MigrateModal","TooltipModal","content","components_WelcomeModal","simpleID","network","current","initSimpleID","baseTokenName"],"mappings":"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","file":"static/js/3.549b2b37.chunk.js","sourcesContent":["import Title from '../Title/Title';\nimport CountUp from 'react-countup';\nimport React, { Component } from 'react';\nimport { Box, Flex, Text, Loader } from \"rimble-ui\";\nimport FunctionsUtil from '../utilities/FunctionsUtil';\n\nclass AssetsUnderManagement extends Component {\n\n  state = {\n    totalAUM:null,\n    totalAUMEndOfYear:null\n  }\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.loadTotalAUM();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const availableStrategiesChanged = !prevProps.availableStrategies && JSON.stringify(prevProps.availableStrategies) !== JSON.stringify(this.props.availableStrategies);\n    if (availableStrategiesChanged || contractsInitialized){\n      this.loadTotalAUM();\n    }\n  }\n\n  async loadTotalAUM(){\n\n    if (!this.props.availableStrategies || !this.props.contractsInitialized){\n      return true;\n    }\n\n    const {\n      avgAPY,\n      totalAUM\n    } = await this.functionsUtil.getAggregatedStats();\n\n    const totalAUMEndOfYear = totalAUM.plus(totalAUM.times(avgAPY.div(100)));\n\n    this.setState({\n      totalAUM,\n      totalAUMEndOfYear\n    });\n  }\n\n  render() {\n    return this.state.totalAUM ? (\n      <Box\n        width={1}\n      >\n        <CountUp\n          delay={0}\n          decimals={4}\n          decimal={'.'}\n          separator={''}\n          useEasing={false}\n          duration={31536000}\n          start={parseFloat(this.state.totalAUM)}\n          end={parseFloat(this.state.totalAUMEndOfYear)}\n          formattingFn={ n => '$ '+this.functionsUtil.formatMoney(n,4) }\n        >\n          {({ countUpRef, start }) => (\n            <span\n              style={ this.props.counterStyle ? this.props.counterStyle : {\n                display:'block',\n                color:'dark-gray',\n                whiteSpace:'nowrap',\n                fontFamily:this.props.theme.fonts.counter,\n                fontWeight:this.props.theme.fontWeights[5],\n                textAlign: this.props.isMobile ? 'center' : 'right',\n                fontSize: this.props.isMobile ? '1.6em' : this.props.theme.fontSizes[6]\n              }}\n              ref={countUpRef}\n            />\n          )}\n        </CountUp>\n        {\n          (typeof this.props.subtitle === 'undefined' || this.props.subtitle) && (\n            <Title\n              fontWeight={3}\n              fontSize={[2,2]}\n              color={'cellTitle'}\n              textAlign={['center','right']}\n              {...this.props.subtitleProps}\n            >\n              {\n                this.props.subtitle ? this.props.subtitle : (\n                  <Text.span fontWeight={'inherit'} color={'inherit'} fontSize={'inherit'}>Assets Under Management <Text.span color={'cellTitle'} fontWeight={3} fontSize={'70%'}>(V3 + V4)</Text.span></Text.span>\n                )\n              }\n            </Title>\n          )\n        }\n      </Box>\n    ) : (\n      <Flex\n        alignItems={'center'}\n        justifyContent={this.props.loaderAlign || 'center'}\n      >\n        <Loader\n          size={\"30px\"}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default AssetsUnderManagement;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"twitterIcon\":\"TwitterShareButton_twitterIcon__2QCmn\"};","import moment from 'moment';\nimport theme from '../theme';\nimport { Bar } from '@nivo/bar';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CustomTooltip from '../CustomTooltip/CustomTooltip';\nimport CustomTooltipRow from '../CustomTooltip/CustomTooltipRow';\n\nclass StatsChart extends Component {\n  state = {\n    chartProps:{},\n    chartType:null,\n    chartData:null,\n    chartWidth:null\n  };\n\n  async componentDidMount() {\n    this.setState({\n      chartData:null,\n      chartType:null,\n      chartProps:null,\n    });\n    this.loadUtils();\n    this.loadApiData();\n  }\n\n  async componentDidUpdate(prevProps) {\n    const showAdvancedChanged = prevProps.showAdvanced !== this.props.showAdvanced;\n    const apiResultsChanged = prevProps.apiResults !== this.props.apiResults;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    if (apiResultsChanged || showAdvancedChanged || tokenChanged){\n      this.componentDidMount();\n    }\n  }\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  parseAum = value => {\n    return (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.tokenConfig || !this.props.selectedToken || !this.props.chartMode || !this.props.apiResults){\n      return false;\n    }\n\n    const maxGridLines = 4;\n    const apiResults = this.props.apiResults;\n    const apiResults_unfiltered = this.props.apiResults_unfiltered;\n    const totalItems = apiResults.length;\n    const protocols = Object.assign([],this.props.tokenConfig.protocols);\n    // const compoundProtocol = this.props.tokenConfig.protocols.find( p => (p.name === 'compound'));\n\n    const versionInfo = globalConfigs.stats.versions[this.props.idleVersion];\n\n    let keys = {};\n    let tempData = {};\n    let gridYStep = 0;\n    let itemIndex = 0;\n    let chartData = [];\n    let chartProps = {};\n    let chartType = Line;\n    let gridYValues = [];\n    let maxChartValue = 0;\n    let axisBottomIndex = 0;\n    let idleChartData = null;\n    let firstIdleBlock = null;\n\n    switch (this.props.chartMode){\n      case 'VOL':\n        let divergingData = {};\n\n        const startTimestamp = parseInt(apiResults_unfiltered[0].timestamp);\n        const endTimestamp = parseInt(moment()._d.getTime()/1000);\n\n        for (let timestamp=startTimestamp;timestamp<=endTimestamp;timestamp+=86400){\n          const date = moment(timestamp*1000).format(\"YYYY/MM/DD\");\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n        }\n\n        let lastRow = null;\n        apiResults_unfiltered.forEach(row => {\n          const date = moment(row.timestamp*1000).format(\"YYYY/MM/DD\");\n          const idleTokens = this.functionsUtil.fixTokenDecimals(row.idleSupply,18);\n\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp:row.timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n\n          if (lastRow){\n            const idleTokensPrev = this.functionsUtil.fixTokenDecimals(lastRow.idleSupply,18);\n            const idleTokensDiff = !idleTokens.eq(idleTokensPrev);\n            if (idleTokensDiff){\n              const diff = idleTokens.minus(idleTokensPrev);\n              // Deposits\n              if (diff.gte(0)){\n                divergingData[date].deposits+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,divergingData[date].deposits);\n              } else {\n                divergingData[date].redeems+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,Math.abs(divergingData[date].deposits));\n              }\n            }\n\n          } else {\n            divergingData[date].deposits+=parseFloat(idleTokens);\n          }\n\n          lastRow = row;\n        });\n\n        chartData = Object.values(divergingData).filter(v => {\n          return (!this.props.startTimestamp || v.timestamp>=this.props.startTimestamp) && (!this.props.endTimestamp || v.timestamp<=this.props.endTimestamp);\n        });\n\n        let maxRange = 0;\n        chartData.forEach(v => {\n          maxRange = Math.max(maxRange,Math.abs(v.deposits),Math.abs(v.redeems));\n        })\n\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          indexBy: 'date',\n          enableLabel: false,\n          minValue:-maxRange,\n          maxValue:maxRange,\n          label: d => {\n            return Math.abs(d.value);\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days',\n          },\n          axisLeft: null,\n          axisRight: {\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:8,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(Math.abs(v),0)\n          },\n          markers: [\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { strokeOpacity: 0 },\n              textStyle: { fill: theme.colors.transactions.action.deposit },\n              legend: 'deposits',\n              legendPosition: 'top-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { stroke: theme.colors['dark-gray'], strokeDasharray: '5 3' },\n              textStyle: { fill: theme.colors.transactions.action.redeem },\n              legend: 'redeems',\n              legendPosition: 'bottom-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n          ],\n          keys:['deposits','redeems'],\n          padding:0.4,\n          colors:[theme.colors.transactions.action.deposit, theme.colors.transactions.action.redeem],\n          labelTextColor: 'inherit:darker(1.4)',\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 80 : 100,\n              itemHeight: 18,\n              translateX: 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                textTransform:'capitalize',\n                fontFamily: theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            },\n            tooltip:{\n              container:{\n                boxShadow:null,\n                background:null\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 50, bottom: 45, left: 50 } : { top: 20, right: 70, bottom: 70, left: 50 },\n          tooltip:(data) => {\n            const xFormatted = this.functionsUtil.strToMoment(data.indexValue).format('MMM DD');\n            const point = {\n              id:data.id,\n              data:{\n                xFormatted\n              }\n            };\n            const depositFormatted = this.functionsUtil.abbreviateNumber(data.data.deposits,2)+' '+this.props.selectedToken;\n            const redeemFormatted = this.functionsUtil.abbreviateNumber(data.data.redeems,2)+' '+this.props.selectedToken;\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                <CustomTooltipRow\n                  label={'Deposits'}\n                  color={theme.colors.deposit}\n                  value={depositFormatted}\n                />\n                <CustomTooltipRow\n                  label={'Redeem'}\n                  color={theme.colors.redeem}\n                  value={redeemFormatted}\n                />\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      /*\n      case 'AUM_ALL':\n        await this.functionsUtil.asyncForEach(Object.keys(availableTokens[globalConfigs.network.requiredNetwork]),async (tokenName,i) => {\n          const tokenConfig = availableTokens[globalConfigs.network.requiredNetwork][tokenName];\n          const tokenDataApi = await this.props.getTokenData(tokenConfig.address);\n          chartData.push({\n            id:tokenName,\n            color: tokenConfig.color,\n            data: tokenDataApi.map((d,i) => {\n              const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n              const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,tokenConfig.decimals);\n              const aum = idleTokens.times(idlePrice);\n              return {\n                x: moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\"),\n                y: parseInt(aum.toString())\n              };\n            })\n          });\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken,\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v),\n            orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            legendPosition: 'middle'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            format: '%b %d',\n            tickValues: this.props.isMobile ? 'every 4 days' : 'every 3 days',\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 36,\n            legendPosition: 'middle'\n          },\n          enableArea:false,\n          curve:\"linear\",\n          enableSlices:'x',\n          enableGridX:true,\n          enableGridY:false,\n          colors:d => d.color,\n          pointSize:0,\n          pointColor:{ from: 'color', modifiers: []},\n          pointBorderWidth:1,\n          pointLabel:\"y\",\n          pointLabelYOffset:-12,\n          useMesh:true,\n          animate:false,\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 60, bottom: 40, left: 60 },\n        };\n      break;\n      */\n      case 'AUM':\n\n        maxChartValue = 0;\n\n        chartData.push({\n          id:'AUM',\n          color: 'hsl('+globalConfigs.stats.tokens[this.props.selectedToken].color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n            const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n            const aum = idleTokens.times(idlePrice);\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(aum.toString());\n\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x,y };\n          })\n        });\n\n        // Add allocation\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          apiResults.map((d,i) => {\n            return d.protocolsData.filter((protocolAllocation,x) => {\n                return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            })\n            .map((protocolAllocation,z) => {\n              const protocolPaused = this.functionsUtil.BNify(protocolAllocation.rate).eq(0);\n              if (!protocolPaused){\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals));\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                let foundItem = chartData[0].data.filter(item => { return item.x === x });\n                if (foundItem){\n                  foundItem = foundItem[0];\n                  const pos = chartData[0].data.indexOf(foundItem);\n                  if (!foundItem.allocations){\n                    foundItem.allocations = {};\n                  }\n                  foundItem.allocations[p.name] = y;\n                  chartData[0].data[pos] = foundItem;\n                }\n              }\n              return undefined;\n            })[0]\n          }).filter((v) => { return v !== undefined; } )\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:v => this.functionsUtil.formatMoney(v,v<1 ? 3 :0),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 0,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:true,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            if (typeof point === 'object' && typeof point.data === 'object'){\n              return (\n                <CustomTooltip\n                  point={point}\n                >\n                  <CustomTooltipRow\n                    label={point.serieId}\n                    color={point.serieColor}\n                    value={point.data.yFormatted}\n                  />\n                  {\n                    point.data.allocations && typeof point.data.allocations === 'object' &&\n                      Object.keys(point.data.allocations).map(protocolName => {\n                        const protocolInfo = globalConfigs.stats.protocols[protocolName];\n                        const protocolColor = 'hsl('+protocolInfo.color.hsl.join(',')+')';\n                        const protocolAllocation = point.data.allocations[protocolName];\n                        const protocolAllocationFormatted = this.functionsUtil.formatMoney(protocolAllocation,protocolAllocation<1 ? 3 : 0);\n                        const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                        return (\n                          <CustomTooltipRow\n                            color={protocolColor}\n                            label={protocolInfo.label}\n                            key={`${point.id}_${protocolName}`}\n                            value={`${protocolAllocationFormatted} (${protocolAllocationPerc})`}\n                          />\n                        );\n                      })\n                  }\n                </CustomTooltip>\n              );\n              /*\n              return (\n                <div\n                    key={point.id}\n                    style={{\n                      background: 'white',\n                      color: 'inherit',\n                      fontSize: 'inherit',\n                      borderRadius: '2px',\n                      boxShadow: 'rgba(0, 0, 0, 0.25) 0px 1px 2px',\n                      padding: '5px 9px'\n                    }}\n                >\n                  <div>\n                    <table style={{width:'100%',borderCollapse:'collapse'}}>\n                      <tbody>\n                        <tr>\n                          <td style={{padding:'3px 5px'}}>\n                            <span style={{display:'block', width: '12px', height: '12px', background: point.serieColor}}></span>\n                          </td>\n                          <td style={{padding:'3px 5px'}}>{point.serieId}</td>\n                          <td style={{padding:'3px 5px'}}><strong>{point.data.yFormatted}</strong></td>\n                        </tr>\n                        {\n                          point.data.allocations && typeof point.data.allocations === 'object' &&\n                            Object.keys(point.data.allocations).map(protocolName => {\n                              const protocolColor = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n                              const protocolAllocation = this.functionsUtil.formatMoney(point.data.allocations[protocolName],0);\n                              const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                              return (\n                                <tr key={`${point.id}_${protocolName}`}>\n                                  <td style={{padding:'3px 5px'}}>\n                                    <span style={{display:'block', width: '12px', height: '12px', background: protocolColor}}></span>\n                                  </td>\n                                  <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{protocolName}</td>\n                                  <td style={{padding:'3px 5px'}}><strong>{protocolAllocation}</strong> ({protocolAllocationPerc})</td>\n                                </tr>\n                              );\n                            })\n                        }\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              );\n              */\n            }\n\n            return null;\n          }\n        };\n      break;\n      case 'ALL':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\");\n\n          let row = {\n            date\n          };\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const foundProtocol = this.props.tokenConfig.protocols.find((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() });\n            if (foundProtocol){\n              const protocolInfo = globalConfigs.stats.protocols[foundProtocol.name];\n              if (!protocolPaused){\n                let allocation = parseFloat(this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals));\n                keys[protocolInfo.label] = 1;\n                row[protocolInfo.label] = allocation;\n                row[`${protocolInfo.label}Color`] = 'hsl('+protocolInfo.color.hsl.join(',')+')';\n                // console.log(protocolInfo.label,this.functionsUtil.BNify(protocolData.allocation).toString(),this.props.tokenConfig.decimals,allocation);\n                maxChartValue = Math.max(maxChartValue,allocation);\n              } else {\n                row[protocolInfo.label] = 0;\n              }\n            }\n          });\n\n\n          tempData[date] = row;\n        });\n\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n            orient: 'left',\n            tickSize: 0,\n            tickPadding: 10,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            tickValues:gridYValues,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickSize: 0,\n            tickPadding: 10,\n            orient: 'bottom-left',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days'\n          },\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            tooltip: {\n              container:{\n                padding:'0',\n                boxShadow:'none',\n                background:'transparent',\n              },\n              tableCell:{\n                padding:'0'\n              }\n            },\n            axis: {\n              ticks: {\n                text: {\n                  fontSize:this.props.isMobile ? 12 : 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize:this.props.isMobile ? 12 : 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 60 },\n          tooltip:({ id, value, color }) => {\n            const allocation = this.functionsUtil.formatMoney(value,0);\n            return (\n              <DashboardCard\n                cardProps={{\n                  py:1,\n                  px:2,\n                  width:1,\n                }}\n              >\n                <table\n                  style={{width:'100%',borderCollapse:'collapse'}}\n                >\n                  <tbody>\n                    <tr>\n                      <td style={{padding:'3px 5px'}}>\n                        <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                      </td>\n                      <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                      <td style={{padding:'3px 5px'}}><strong>{allocation} {this.props.selectedToken}</strong></td>\n                    </tr>\n                  </tbody>\n                </table>\n              </DashboardCard>\n            )\n          }\n        }\n      break;\n      case 'ALL_PERC':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\")\n          let row = {\n            date:moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\")\n          };\n          if (tempData[date]){\n            row = tempData[date];\n          }\n\n          const totalAllocation = d.protocolsData.reduce((accumulator,protocolAllocation) => {\n            const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n            return this.functionsUtil.BNify(accumulator).plus(allocation);\n          },0);\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const protocolName = this.props.tokenConfig.protocols.filter((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() })[0].name;\n            if (!protocolPaused){\n              const allocation = this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals);\n              const allocationPerc = parseFloat(allocation.div(totalAllocation).times(100));\n              keys[protocolName] = 1;\n              row[protocolName] = allocationPerc;\n              row[`${protocolName}Color`] = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n            } else if (typeof row[protocolName] !== undefined) {\n              row[protocolName] = 0;\n            } \n          });\n          \n          tempData[date] = row;\n        });\n\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          data: chartData,\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 40, bottom: 40, left: 60 },\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => parseInt(v)+'%'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            orient: 'bottom',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days'\n          },\n          tooltip:({ id, value, color }) => {\n            const allocation = parseInt(value)===100 ? this.functionsUtil.formatMoney(value,0) : this.functionsUtil.formatMoney(value,2);\n            return (\n              <table style={{width:'100%',borderCollapse:'collapse'}}>\n                <tbody>\n                  <tr>\n                    <td style={{padding:'3px 5px'}}>\n                      <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                    </td>\n                    <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                    <td style={{padding:'3px 5px'}}><strong>{allocation}%</strong></td>\n                  </tr>\n                </tbody>\n              </table>\n            )\n          }\n        }\n      break;\n      case 'APR':\n\n        maxChartValue = 0;\n\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n          if (!protocolInfo.enabled){\n            return;\n          }\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n          chartData.push({\n            id:protocolInfo.label,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                const protocolPaused = this.functionsUtil.BNify(protocolAllocation.rate).eq(0);\n                if (!protocolPaused){\n                  const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                  const y = parseFloat(this.functionsUtil.fixTokenDecimals(protocolAllocation.rate,18));\n\n                  maxChartValue = Math.max(maxChartValue,y);\n\n                  return { x, y };\n                }\n                return undefined;\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(this.functionsUtil.fixTokenDecimals(d.idleRate,18));\n\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x, y };\n          })\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(2)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                textTransform:'capitalize',\n                fontFamily: theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    // const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'SCORE':\n\n        let prevValue = 0;\n        maxChartValue = 0;\n\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n          if (!protocolInfo.enabled){\n            return;\n          }\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n          chartData.push({\n            id:protocolInfo.label,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(protocolAllocation.defiScore);\n\n                y = isNaN(y) || !y ? prevValue : y;\n                prevValue = y;\n                maxChartValue = Math.max(maxChartValue,y);\n\n                return { x, y };\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            let y = parseFloat(d.idleScore);\n            y = isNaN(y) || !y ? prevValue : y;\n            prevValue = y;\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x, y };\n          })\n        });\n\n        // debugger;\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(1),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 0,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                textTransform:'capitalize',\n                fontFamily: theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE_V4':\n\n        itemIndex = 0;\n        maxChartValue = 0;\n        // let prevApy = null;\n        let prevApr = null;\n        let prevData = null;\n        let startBalance = this.functionsUtil.BNify(1);\n        let currentBalance = this.functionsUtil.BNify(1);\n        let avgApy = this.functionsUtil.BNify(0);\n\n        // console.log('PRICE_V4',apiResults);\n\n        idleChartData = [];\n\n        apiResults.forEach((d,i) => {\n\n          let y = 0;\n          let apy = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n          const apr = this.functionsUtil.fixTokenDecimals(d.idleRate,18).div(100);\n          // const apy = this.functionsUtil.apr2apy(apr);\n          \n          avgApy = avgApy.plus(apr.times(100));\n\n          if (prevApr){\n            const days = (d.timestamp-prevData.timestamp)/86400;\n            // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n            const earnings = currentBalance.times(prevApr.times(days).div(365));\n            currentBalance = currentBalance.plus(earnings);\n\n            const earning = currentBalance.div(startBalance).minus(1).times(100);\n            y = parseFloat(earning);\n\n            // apy = earning.times(365).div(totDays).toFixed(2);\n            apy = avgApy.div(i+1).toFixed(2);\n          }\n\n          prevData = d;\n          // prevApy = apy;\n          prevApr = apr;\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          if (apy>0){\n            idleChartData.push({ x, y, apy, blocknumber, itemPos });\n          }\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        protocols.forEach( p => {\n\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n\n          if (!protocolInfo.enabled){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          // prevApy = null;\n          prevApr = null;\n          prevData = null;\n          let baseProfit = 0;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n          avgApy = this.functionsUtil.BNify(0);\n          startBalance = this.functionsUtil.BNify(1);\n          currentBalance = this.functionsUtil.BNify(1);\n\n          apiResults.forEach( (d,i) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              const protocolRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n                if (protocolData[field]){\n                  return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(protocolData[field]));\n                }\n                return this.functionsUtil.BNify(acc);\n              },0) : this.functionsUtil.BNify(protocolData[rateField]);\n\n              const protocolPaused = protocolRate.eq(0);\n              if (!protocolPaused){\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null){\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => (d1.blocknumber>=firstProtocolBlock) );\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                    }\n                  }\n                }\n\n                let rowData = {};\n\n                let y = 0;\n                let apy = 0;\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                const apr = this.functionsUtil.fixTokenDecimals(protocolRate,18).div(100);\n\n                avgApy = avgApy.plus(apr.times(100));\n                // const apy = this.functionsUtil.apr2apy(apr);\n\n                if (prevData){\n                  const days = (d.timestamp-prevData.timestamp)/86400;\n                  // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n                  const earnings = currentBalance.times(prevApr.times(days).div(365));\n                  currentBalance = currentBalance.plus(earnings);\n\n                  const earning = currentBalance.div(startBalance).minus(1).times(100);\n                  y = parseFloat(earning)+baseProfit;\n\n                  apy = avgApy.div(i+1).toFixed(2);\n                }\n\n                prevData = d;\n                prevApr = apr;\n\n                if (firstIdleBlock === null){\n                  firstIdleBlock = parseInt(d.blocknumber);\n                }\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                const itemPos = Math.floor(itemIndex/totalItems*100);\n                // const blocknumber = d.blocknumber;\n\n                itemIndex++;\n\n                if (apy>0){\n                  rowData = {\n                    x,\n                    y,\n                    apy,\n                    itemPos\n                  };\n\n                  itemIndex++;\n                  chartRow.data.push(rowData);\n                }\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: idleChartData\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              itemWidth: this.props.isMobile ? 70 : 100,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE':\n        // let prevTokenPrice = null;\n        maxChartValue = 0;\n        let firstTokenPrice = null;\n\n        idleChartData = apiResults.map((d,i) => {\n\n          let y = 0;\n          let apy = 0;\n          let days = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n          const tokenPrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n\n          if (!firstTokenPrice){\n            firstTokenPrice = tokenPrice;\n          } else {\n            y = parseFloat(tokenPrice.div(firstTokenPrice).minus(1).times(100));\n\n            days = (d.timestamp-apiResults[0].timestamp)/86400;\n            const earning = tokenPrice.div(firstTokenPrice).minus(1).times(100);\n            apy = earning.times(365).div(days).toFixed(2);\n\n            // console.log(firstTokenPrice.toString(),tokenPrice.toString(),earning.toString(),days,y,apy);\n          }\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          return { x, y, apy, blocknumber, itemPos };\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        await this.functionsUtil.asyncForEach(protocols,async (p) => {\n\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n\n          if (!protocolInfo.enabled){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          let baseProfit = 0;\n          firstTokenPrice = null;\n          let lastRowData = null;\n          let lastTokenPrice = null;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n\n          await this.functionsUtil.asyncForEach(apiResults,async (d) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData && protocolData[rateField]){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              const protocolPaused = this.functionsUtil.BNify(protocolData[rateField]).eq(0);\n              if (!protocolPaused){\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null){\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => {\n                      return d1.blocknumber>=firstProtocolBlock;\n                    });\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                    }\n                  }\n                }\n\n                let rowData = {};\n                let tokenExchangeRate = protocolData.price;\n                let tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n\n                // Take data from\n                if (protocolInfo && protocolInfo.data && protocolInfo.data[p.address.toLowerCase()] && protocolInfo.data[p.address.toLowerCase()][d.blocknumber]){\n                  tokenExchangeRate = this.functionsUtil.BNify(globalConfigs.stats.protocols[p.name].data[p.address.toLowerCase()][d.blocknumber]);\n                  tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                }/* else if (p.name === 'aave'){\n                  // Token holders (aDAI = 0xc025c03e10f656d3ee76685d53d236824d8ef3da , aUSDC = 0xd2c734fbd8f5d1c809185e014016dd4097e94711)\n                  let aaveTokenBalance = await this.functionsUtil.genericContractCall(p.token,'balanceOf',['0xd2c734fbd8f5d1c809185e014016dd4097e94711'],{},d.blocknumber);\n                  if (aaveTokenBalance){\n                    if (!Object.values(aave_data).length){\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(1,p.decimals);\n                      aave_data[d.blocknumber] = aaveTokenBalance.toString();\n                    } else {\n                      const firstBalance = Object.values(aave_data)[0];\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(this.functionsUtil.BNify(aaveTokenBalance).div(this.functionsUtil.BNify(firstBalance)).toFixed(p.decimals),p.decimals);\n                      aave_data[d.blocknumber] = tokenExchangeRate.toString();\n                    }\n                  }\n                }\n                */\n\n                let y = baseProfit;\n                let apy = 0;\n\n                if (!firstTokenPrice){\n                  firstTokenPrice = tokenPriceFixed;\n                } else {\n                  if (tokenPriceFixed.lt(lastTokenPrice)){\n                    firstTokenPrice = tokenPriceFixed;\n                    const lastYDiff = chartRow.data[chartRow.data.length-1].y-chartRow.data[chartRow.data.length-2].y;\n                    y = lastRowData.y+lastYDiff;\n                    baseProfit = y;\n                  } else {\n                    y += parseFloat(tokenPriceFixed.div(firstTokenPrice).minus(1).times(100));\n                  }\n\n                  const days = (d.timestamp-apiResults[0].timestamp)/86400;\n                  const earning = tokenPriceFixed.div(firstTokenPrice).minus(1).times(100);\n                  apy = earning.times(365).div(days).toFixed(2);\n                }\n\n                y = Math.max(0,y);\n                maxChartValue = Math.max(maxChartValue,y);\n\n                const itemPos = Math.floor(itemIndex/totalItems*100);\n\n                rowData = {\n                  x,\n                  y,\n                  apy,\n                  itemPos\n                };\n\n                itemIndex++;\n                lastRowData = rowData;\n                chartRow.data.push(rowData);\n                lastTokenPrice = tokenPriceFixed;\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: idleChartData\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              itemWidth: this.props.isMobile ? 70 : 100,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                textTransform:'capitalize',\n                fontFamily: theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      chartType,\n      chartProps,\n      chartData\n    });\n  }\n\n  render() {\n    return(\n      <GenericChart\n        showLoader={true}\n        {...this.state.chartProps}\n        height={this.props.height}\n        type={this.state.chartType}\n        data={this.state.chartData}\n        width={this.state.chartWidth}\n        isMobile={this.props.isMobile}\n        parentId={this.props.parentId}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default StatsChart;","import { Flex, Text } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\n\nclass Rebalance extends Component {\n\n  state = {\n    loading:true,\n    processing:{\n      rebalance:{\n        txHash:null,\n        loading:false\n      },\n    },\n    shouldRebalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.checkRebalance();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged || accountChanged){\n      this.checkRebalance();\n    }\n  }\n\n  checkRebalance = async () => {\n    this.setState({\n      loading:true,\n    });\n\n    const shouldRebalance = await this.functionsUtil.checkRebalance(this.props.tokenConfig);\n\n    this.setState({\n      loading:false,\n      shouldRebalance\n    });\n  }\n\n  rebalance = async (e) => {\n    e.preventDefault();\n\n    const callback = (tx,error) => {\n\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Rebalance',\n        eventAction: this.props.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      let txDenied = false;\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      if (tx.status === 'success'){\n        // Toast message\n        window.toastProvider.addMessage(`Rebalance completed`, {\n          secondaryMessage: `Now the pool is balanced!`,\n          colorTheme: 'light',\n          actionHref: \"\",\n          actionText: \"\",\n          variant: \"success\",\n        });\n\n      } else if (!txDenied){\n        window.toastProvider.addMessage(`Rebalance error`, {\n          secondaryMessage: `The rebalance has failed, try again...`,\n          colorTheme: 'light',\n          actionHref: \"\",\n          actionText: \"\",\n          variant: \"failure\",\n        });\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          rebalance:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n\n      this.checkRebalance();\n    }\n\n    const callback_receipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            rebalance:{\n              ...prevState.processing.rebalance,\n              txHash\n            }\n          }\n        })\n      );\n    };\n\n    this.props.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'rebalance', [], null , callback, callback_receipt);\n\n    this.setState({\n      processing:{\n        rebalance:{\n          txHash:null,\n          loading:true\n        }\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Flex\n        px={3}\n        width={1}\n        minHeight={'100px'}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n      {\n        this.state.loading ? (\n          <FlexLoader\n            flexProps={{\n              flexDirection:'row'\n            }}\n            loaderProps={{\n              size:'30px'\n            }}\n            textProps={{\n              ml:2\n            }}\n            text={'Checking rebalance...'}\n          />\n        ) : (\n          this.state.processing.rebalance.loading ? (\n            <TxProgressBar web3={this.props.web3} waitText={`Rebalance estimated in`} endMessage={`Finalizing rebalance request...`} hash={this.state.processing.rebalance.txHash} />\n          ) : (\n            <Flex\n              width={1}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                mt={0}\n                mb={3}\n                textAlign={'center'}\n              >\n                {this.state.shouldRebalance ? 'Rebalance the entire pool. All users will bless you.' : 'The pool is already balanced.'}\n              </Text>\n              <RoundButton\n                buttonProps={{\n                  width:'auto',\n                  disabled:!this.state.shouldRebalance\n                }}\n                handleClick={e => this.rebalance(e)}\n              >\n                Rebalance\n              </RoundButton>\n            </Flex>\n          )\n        )\n      }\n      </Flex>\n    )\n  }\n}\n\nexport default Rebalance;","import React from \"react\";\nimport {\n  Modal,\n  Button,\n  Flex,\n  Field,\n  Select\n} from \"rimble-ui\";\nimport moment from 'moment';\nimport ModalCard from './ModalCard';\nimport 'react-date-range/dist/styles.css';\nimport { DateRange } from 'react-date-range';\nimport 'react-date-range/dist/theme/default.css';\nimport './DateRangeModal.css';\n\nclass DateRangeModal extends React.Component {\n\n  state = {\n    quickSelection:'',\n    ranges:{\n      startDate: this.props.startDate ? this.props.startDate : new Date(),\n      endDate: this.props.endDate ? this.props.endDate : new Date(),\n      key: 'selection'\n    }\n  }\n\n  handleSelect(ranges){\n    this.setState({\n      quickSelection:'',\n      ranges:ranges.selection\n    });\n  }\n\n  handleQuickSelect(e){\n    let startDate = null;\n    let endDate = moment(new Date());\n    const quickSelection = e.target.value;\n\n    switch (quickSelection){\n      case 'day':\n        startDate = endDate.clone().subtract(1,'day');\n      break;\n      case 'week':\n        startDate = endDate.clone().subtract(1,'week');\n      break;\n      case 'weeks':\n        startDate = endDate.clone().subtract(2,'week');\n      break;\n      case 'month':\n        startDate = endDate.clone().subtract(1,'month');\n      break;\n      default:\n        startDate = null;\n        endDate = null;\n      break;\n    }\n\n    if (startDate && endDate){\n      startDate = startDate._d;\n      endDate = endDate._d;\n\n      const ranges = {\n        startDate,\n        endDate,\n        key:'selection'\n      };\n\n      this.setState({\n        ranges,\n        quickSelection\n      }, () => {\n        this.closeModal();\n      });\n    }\n  }\n\n  componentDidUpdate = (prevProps) => {\n    if (prevProps.startDate !== this.props.startDate || prevProps.endDate !== this.props.endDate){\n      this.setState({\n        ranges:{\n          startDate: this.props.startDate ? this.props.startDate : new Date(),\n          endDate: this.props.endDate ? this.props.endDate : new Date(),\n          key: 'selection'\n        }\n      });\n    }\n  }\n\n  closeModal(){\n    const newState = this.props.handleSelect(this.state.ranges,this.state.quickSelection);\n    const ranges = {\n      startDate:newState.startTimestampObj ? newState.startTimestampObj._d : new Date(),\n      endDate:newState.endTimestampObj ? newState.endTimestampObj._d : new Date(),\n      key: 'selection'\n    };\n    this.setState({\n      ranges\n    });\n    this.props.closeModal();\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        <ModalCard closeFunc={this.props.closeModal}>\n          <ModalCard.Header title={'Select Date Range'}>\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex width={1} flexDirection={'column'} alignItems={'center'}>\n              <Field label=\"Quick Date Selection\" style={{display:'flex',width:'100%',alignItems:'stretch',justifyContent:'center'}}>\n                <Select\n                  style={{\n                    fontSize:'14px',\n                    height:'2.5em',\n                    boxShadow:'none',\n                    color:this.props.theme.colors.counter,\n                    backgroundColor:this.props.theme.colors.cardBg\n                  }}\n                  width={'100%'}\n                  required={true}\n                  onChange={this.handleQuickSelect.bind(this)}\n                  value={this.state.quickSelection}\n                  options={[\n                    { value: '', label: \"Select an option\" },\n                    { value: \"day\", label: \"Last day\" },\n                    { value: \"week\", label: \"Last week\" },\n                    { value: \"weeks\", label: \"Last 2 weeks\" },\n                    { value: \"month\", label: \"Last month\" }\n                  ]}\n                />\n              </Field>\n              <DateRange\n                ranges={[this.state.ranges]}\n                minDate={this.props.minDate}\n                maxDate={this.props.maxDate}\n                className={this.props.themeMode}\n                onChange={this.handleSelect.bind(this)}\n              />\n            </Flex>\n          </ModalCard.Body>\n          <ModalCard.Footer>\n            <Flex px={[2,0]} flexDirection={['column', 'row']} width={1} justifyContent={'center'}>\n              <Button\n                my={2}\n                mx={[0, 2]}\n                borderRadius={4}\n                mainColor={'blue'}\n                onClick={ e => this.closeModal(e) }\n                size={this.props.isMobile ? 'small' : 'medium'}\n              >\n              APPLY\n              </Button>\n            </Flex>\n          </ModalCard.Footer>\n        </ModalCard>\n      </Modal>\n    );\n  }\n\n}\n\nexport default DateRangeModal;","import { Flex } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\n\nclass ExecuteTransaction extends Component {\n\n  state = {\n    txStatus:null,\n    processing:{\n      txHash:null,\n      loading:false\n    }\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  execute(){\n\n    const callback = (tx,error) => {\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Transaction',\n        eventLabel: this.props.methodName,\n        eventAction: this.props.contractName\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      const txSucceeded = tx.status === 'success';\n      if (txSucceeded){\n        if (typeof this.props.callback === 'function'){\n          this.props.callback();\n        }\n      }\n\n      this.setState({\n        txStatus:tx.status,\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      });\n    };\n\n    const callbackReceipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        txStatus:'processing',\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    this.functionsUtil.contractMethodSendWrapper(this.props.contractName,this.props.methodName,this.props.params,callback,callbackReceipt);\n\n    this.setState((prevState) => ({\n      txStatus:'loading',\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  render() {\n    const ExecuteComponent = this.props.Component;\n    return (\n      <Flex\n        {...this.props.parentProps}\n      >\n        {\n          this.state.txStatus === 'success' && this.props.children ?\n            this.props.children\n          : this.state.processing && this.state.processing.loading ? (\n            <TxProgressBar\n              web3={this.props.web3}\n              {...this.props.progressBarProps}\n              hash={this.state.processing.txHash}\n              waitText={`${this.props.action} estimated in`}\n              cancelTransaction={this.cancelTransaction.bind(this)}\n              endMessage={`Finalizing ${this.props.action} request...`}\n            />\n          ) : (\n            <ExecuteComponent\n              onClick={this.execute.bind(this)}\n              {...this.props.componentProps}\n            >\n              {this.props.componentProps.value}\n            </ExecuteComponent>\n          )\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default ExecuteTransaction;\n","import moment from 'moment';\nimport Title from '../Title/Title';\nimport StatsChart from './StatsChart';\nimport React, { Component } from 'react';\nimport Rebalance from '../Rebalance/Rebalance';\nimport StatsCard from '../StatsCard/StatsCard';\nimport AssetsList from '../AssetsList/AssetsList';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport GenericSelector from '../GenericSelector/GenericSelector';\nimport RoundIconButton from '../RoundIconButton/RoundIconButton';\nimport VariationNumber from '../VariationNumber/VariationNumber';\nimport AllocationChart from '../AllocationChart/AllocationChart';\nimport DateRangeModal from '../utilities/components/DateRangeModal';\nimport { Flex, Text, Heading, Box, Icon, Button, Link } from 'rimble-ui';\nimport ExecuteTransaction from '../ExecuteTransaction/ExecuteTransaction';\nimport AssetsUnderManagement from '../AssetsUnderManagement/AssetsUnderManagement';\n\nclass Stats extends Component {\n  state = {\n    aum:null,\n    apr:null,\n    days:'-',\n    delta:null,\n    earning:null,\n    minDate:null,\n    maxDate:null,\n    carouselMax:1,\n    rebalances:'-',\n    buttonGroups:[],\n    apiResults:null,\n    carouselIndex:0,\n    idleVersion:null,\n    statsVersions:{},\n    minStartTime:null,\n    endTimestamp:null,\n    showAdvanced:true,\n    govTokensPool:null,\n    unlentBalance:null,\n    quickSelection:null,\n    startTimestamp:null,\n    endTimestampObj:null,\n    shouldRebalance:null,\n    carouselOffsetLeft:0,\n    startTimestampObj:null,\n    showRefreshIdleSpeed:false,\n    apiResults_unfiltered:null,\n    dateRangeModalOpened:false\n  };\n\n  quickSelections = {\n    day:'Last day',\n    week:'Last week',\n    weeks:'Last 2 weeks',\n    month:'Last month'\n  };\n\n  // Utils\n  functionsUtil = null;\n  componentUnmounted = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount() {\n    this.loadUtils();\n    await this.loadParams();\n  }\n\n  componentWillUnmount(){\n    this.componentUnmounted = true;\n  }\n\n  async setStateSafe(newState,callback=null) {\n    if (!this.componentUnmounted){\n      return this.setState(newState,callback);\n    }\n    return null;\n  }\n\n  showRefreshIdleSpeed(){\n    this.setState({\n      showRefreshIdleSpeed:true\n    });\n  }\n\n  getLatestAvailableVersion(){\n    const statsVersions = globalConfigs.stats.versions;\n    let latestVersion = null;\n    Object.keys(statsVersions).forEach( version => {\n      const versionInfo = statsVersions[version];\n      if (versionInfo.enabledStrategies.includes(this.props.selectedStrategy)){\n        latestVersion = version;\n      }\n    });\n\n    return latestVersion;\n  }\n\n  getVersionInfo(version){\n    if (!version){\n      version = this.state.idleVersion;\n    }\n\n    if (!globalConfigs.stats.versions[version]){\n      return null;\n    }\n\n    const versionInfo = Object.assign({},globalConfigs.stats.versions[version]);\n\n    if (versionInfo.strategiesParams && versionInfo.strategiesParams[this.props.selectedStrategy]){\n      const versionInfoExtra = versionInfo.strategiesParams[this.props.selectedStrategy];\n      Object.keys(versionInfoExtra).forEach( param => {\n        versionInfo[param] = versionInfoExtra[param];\n      });\n    }\n\n    return versionInfo;\n  }\n\n  async loadParams() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    const newState = {};\n    const { match: { params } } = this.props;\n\n    const currentNetworkAvailableTokens = Object.keys(this.props.availableTokens);\n\n    if (!!params.customToken && currentNetworkAvailableTokens.indexOf(params.customToken.toUpperCase()) !== -1 ){\n      newState.selectedToken = params.customToken.toUpperCase();\n    } else {\n      newState.selectedToken = this.props.selectedToken.toUpperCase();\n    }\n\n    newState.tokenConfig = this.props.availableTokens[newState.selectedToken];\n    newState.minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp,'YYYY-MM-DD');\n    newState.maxEndDate = moment();\n\n    newState.endTimestampObj = moment(moment().format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    newState.latestVersion = this.getLatestAvailableVersion();\n    newState.idleVersion = this.state.idleVersion === null ? newState.latestVersion : this.state.idleVersion;\n\n    const versionInfo = this.getVersionInfo(newState.idleVersion);\n\n    // console.log('loadParams',newState.latestVersion,newState.idleVersion,versionInfo);\n\n    if (newState.idleVersion && versionInfo.endTimestamp){\n      const newEndTimestampObj = moment(moment(versionInfo.endTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.endTimestampObj.isAfter(newEndTimestampObj)){\n        newState.endTimestampObj = newEndTimestampObj;\n        newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n      }\n\n      if (!newState.maxEndDate || newState.maxEndDate.isAfter(newEndTimestampObj)){\n        newState.maxEndDate = newEndTimestampObj;\n      }\n    }\n\n    newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n\n    // Set start date\n    newState.startTimestampObj = newState.endTimestampObj.clone().subtract(1,'month');\n    newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n\n    if (newState.idleVersion && versionInfo.startTimestamp){\n      const newStartTimestampObj = moment(moment(versionInfo.startTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.startTimestampObj.isBefore(newStartTimestampObj)){\n        newState.startTimestampObj = newStartTimestampObj;\n        newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n      }\n\n      if (newState.minStartTime.isBefore(newStartTimestampObj)){\n        newState.minStartTime = newStartTimestampObj;\n      }\n    }\n\n    newState.minDate = newState.minStartTime._d;\n    newState.maxDate = newState.maxEndDate._d;\n\n    if (newState !== this.state){\n      await this.setStateSafe(newState);\n    }\n  }\n\n  setDateRange = (ranges,quickSelection=null) => {\n\n    const minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp);\n\n    let startTimestampObj = moment(ranges.startDate).isSameOrAfter(minStartTime) ? moment(ranges.startDate) : minStartTime;\n    let endTimestampObj = moment(ranges.endDate);\n\n    if (startTimestampObj.isSame(endTimestampObj)){\n      endTimestampObj.add(1,'day');\n    }\n\n    endTimestampObj = moment(endTimestampObj.format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    if (startTimestampObj.isBefore(this.state.minStartTime)){\n      startTimestampObj = this.state.minStartTime;\n    }\n\n    if (endTimestampObj.isAfter(this.state.maxEndDate)){\n      endTimestampObj = this.state.maxEndDate;\n    }\n\n    const startTimestamp = parseInt(startTimestampObj._d.getTime()/1000);\n    const endTimestamp = parseInt(endTimestampObj._d.getTime()/1000);\n\n    const newState = {\n      minStartTime,\n      endTimestamp,\n      quickSelection,\n      startTimestamp,\n      endTimestampObj,\n      startTimestampObj\n    };\n\n    this.setStateSafe(newState);\n\n    return newState;\n  }\n\n  toggleAdvancedCharts = (e) => {\n    e.preventDefault();\n    this.setStateSafe({\n      showAdvanced:!this.state.showAdvanced\n    });\n  }\n\n  setDateRangeModal = (dateRangeModalOpened) => {\n    if (dateRangeModalOpened !== this.state.dateRangeModalOpened){\n      this.setStateSafe({\n        dateRangeModalOpened\n      });\n    }\n  }\n\n  async componentDidMount() {\n\n    if (!this.props.web3){\n      this.props.initWeb3();\n      return false;\n    }\n\n    /*\n    const style = document.createElement('style');\n    style.id = 'crisp-custom-style';\n    style.type = 'text/css';\n    style.innerHTML = `\n    .crisp-client{\n      display:none !important;\n    }`;\n    document.body.appendChild(style);\n    */\n\n    this.loadUtils();\n    await this.loadParams();\n    this.loadApiData();\n    this.loadCarousel();\n  }\n\n  loadCarousel(){\n    const carouselMax = this.props.isMobile ? 3 : 2;\n    this.setStateSafe({\n      carouselMax\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const strategyChanged = prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    const dateChanged = prevState.startTimestamp !== this.state.startTimestamp || prevState.endTimestamp !== this.state.endTimestamp;\n    const versionChanged = prevState.idleVersion !== this.state.idleVersion;\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n\n    if (mobileChanged){\n      this.loadCarousel();\n    }\n\n    if (contractsInitialized || tokenChanged || strategyChanged || versionChanged){\n      // console.log('componentDidUpdate',this.props.selectedStrategy,this.props.selectedToken);\n      await this.componentDidMount();\n    } else if (dateChanged){\n      this.loadApiData();\n    }\n  }\n\n  filterTokenData = (apiResults) => {\n    return apiResults.filter((r,i) => {\n      return (!this.state.startTimestamp || r.timestamp >= this.state.startTimestamp) && (!this.state.endTimestamp || r.timestamp <= this.state.endTimestamp);\n    });\n  }\n\n  setIdleVersion = idleVersion => {\n    this.setStateSafe({\n      idleVersion\n    });\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    // Get COMP APR\n    // const compAPR = await this.functionsUtil.getCompAPR(this.props.tokenConfig);\n    // console.log('compAPR',compAPR.toString());\n\n    const startTimestamp = this.state.minDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.minDate).format('DD/MM/YYYY 00:00:00'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n    const endTimestamp = this.state.maxDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.maxDate).format('DD/MM/YYYY 23:59:59'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n\n    const isRisk = ['v3','v4'].includes(this.state.idleVersion) && this.props.selectedStrategy === 'risk';\n    let apiResults_unfiltered = await this.functionsUtil.getTokenApiData(this.props.tokenConfig.address,isRisk,startTimestamp,endTimestamp,true,7200);\n\n    const apiResults = this.filterTokenData(apiResults_unfiltered);\n\n    // console.log('loadApiData',startTimestamp,endTimestamp,new Date(startTimestamp*1000),new Date(endTimestamp*1000),apiResults,apiResults_unfiltered);\n\n    if (!apiResults || !apiResults_unfiltered || !apiResults.length || !apiResults_unfiltered.length){\n      return false;\n    }\n\n    const firstResult = apiResults[0];\n    const lastResult = Object.values(apiResults).pop();\n\n    window.moment = moment;\n\n    let days = (lastResult.timestamp-firstResult.timestamp)/86400;\n    if (days === 0){\n      days = 1;\n    }\n\n    let apr = null;\n    let delta = 'N/A';\n\n    const idleTokens = this.functionsUtil.fixTokenDecimals(lastResult.idleSupply,18);\n    const firstIdlePrice = this.functionsUtil.fixTokenDecimals(firstResult.idlePrice,this.props.tokenConfig.decimals);\n    const lastIdlePrice = this.functionsUtil.fixTokenDecimals(lastResult.idlePrice,this.props.tokenConfig.decimals);\n\n    // Calculate AUM\n    let aum = idleTokens.times(lastIdlePrice);\n\n    // Convert Token balance\n    aum = await this.functionsUtil.convertTokenBalance(aum,this.props.selectedToken,this.props.tokenConfig,isRisk);\n\n    const compoundInfo = this.props.tokenConfig.protocols.filter((p) => { return p.name === 'compound' })[0];\n    const firstCompoundData = compoundInfo ? firstResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n    const lastCompoundData = compoundInfo ? lastResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n\n    if (this.state.idleVersion === 'v4') {\n\n      apr = apiResults.reduce( (sum,r) => {\n        const idleRate = this.functionsUtil.fixTokenDecimals(r.idleRate,18);\n        return this.functionsUtil.BNify(sum).plus(idleRate);\n      },0);\n\n      // Calculate average\n      apr = apr.div(apiResults.length);\n\n      if (compoundInfo){\n        const compoundWithCOMPInfo = globalConfigs.stats.protocols.compoundWithCOMP;\n        const rateField = compoundWithCOMPInfo.rateField ? compoundWithCOMPInfo.rateField : 'rate';\n\n        let compoundAvgApr = apiResults.reduce( (sum,r) => {\n\n          const compoundData = r.protocolsData.find((pData,x) => {\n            return pData.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase()\n          });\n\n          let compoundRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n            if (compoundData[field]){\n              return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(compoundData[field]));\n            }\n            return this.functionsUtil.BNify(acc);\n          },0) : this.functionsUtil.BNify(compoundData[rateField]);\n\n          compoundRate = this.functionsUtil.fixTokenDecimals(compoundRate,18);\n\n          return this.functionsUtil.BNify(sum).plus(compoundRate);\n        },0);\n\n        // Calculate average\n        compoundAvgApr = compoundAvgApr.div(apiResults.length);\n\n        // compoundAvgApr = this.functionsUtil.apr2apy(compoundAvgApr.div(100)).times(100);\n        // apr = this.functionsUtil.apr2apy(apr.div(100)).times(100);\n\n        delta = apr.minus(compoundAvgApr);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n\n      apr = apr.toFixed(2);\n\n    } else {\n      const earning = lastIdlePrice.div(firstIdlePrice).minus(1).times(100);\n      apr = earning.times(365).div(days).toFixed(2);\n\n      if (firstCompoundData && lastCompoundData){\n        const firstCompoundPrice = this.functionsUtil.fixTokenDecimals(firstCompoundData.price,this.props.tokenConfig.decimals);\n        const lastCompoundPrice = this.functionsUtil.fixTokenDecimals(lastCompoundData.price,this.props.tokenConfig.decimals);\n        const compoundApr = lastCompoundPrice.div(firstCompoundPrice).minus(1).times(100);\n        delta = earning.minus(compoundApr).times(365).div(days);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n    }\n\n    // Count rebalances\n    let rebalances = 0;\n    apiResults.forEach((row,index) => {\n      if (index){\n        const prevRow = apiResults[index-1];\n\n        const totalAllocation = row.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        const prevTotalAllocation = prevRow.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        let hasRebalanced = false;\n        row.protocolsData.forEach( p => {\n          if (hasRebalanced){\n            return;\n          }\n          const prevP = prevRow.protocolsData.find( prevP => (prevP.protocolAddr.toLowerCase() === p.protocolAddr.toLowerCase()) );\n          const allocation = this.functionsUtil.fixTokenDecimals(p.allocation,this.props.tokenConfig.decimals);\n          const prevAllocation = prevP ? this.functionsUtil.fixTokenDecimals(prevP.allocation,this.props.tokenConfig.decimals) : this.functionsUtil.BNify(0);\n          const allocationPerc = parseInt(parseFloat(allocation.div(totalAllocation).times(100)));\n          const prevAllocationPerc = parseInt(parseFloat(prevAllocation.div(prevTotalAllocation).times(100)));\n          if (allocationPerc!==prevAllocationPerc){\n            rebalances++;\n            hasRebalanced = true;\n          }\n        });\n      }\n    });\n\n    // Add gov tokens balance to AUM\n    const availableTokens = {};\n    availableTokens[this.props.selectedToken] = this.props.tokenConfig;\n    const govTokensPool = await this.functionsUtil.getGovTokenPool(null,availableTokens,'DAI');\n    if (govTokensPool){\n      aum = aum.plus(govTokensPool);\n    }\n\n    // Format AUM\n    /*\n    aum = this.functionsUtil.formatMoney(parseFloat(aum));\n\n    const conversionRateField = this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'conversionRateField']);\n    if (conversionRateField){\n      aum += ' $';\n    }\n    */\n\n    let unlentBalance = await this.functionsUtil.getUnlentBalance(this.props.tokenConfig);\n    if (unlentBalance){\n      unlentBalance = this.functionsUtil.formatMoney(parseFloat(unlentBalance));\n    }\n\n    this.setStateSafe({\n      aum,\n      apr,\n      days,\n      delta,\n      apiResults,\n      rebalances,\n      govTokensPool,\n      unlentBalance,\n      apiResults_unfiltered\n    });\n  }\n\n  selectToken = async (strategy,token) => {\n    await this.props.setStrategyToken(strategy,token);\n    this.props.changeToken(token);\n  }\n\n  handleCarousel = action => {\n    let carouselIndex = this.state.carouselIndex;\n    if (action==='next' && carouselIndex<this.state.carouselMax){\n      carouselIndex++;\n    } else if (action==='back' && carouselIndex>0){\n      carouselIndex--;\n    }\n\n    const $element = window.jQuery(`#carousel-cursor > div:eq(${carouselIndex})`);\n    const carouselOffsetLeft = -parseFloat($element.position().left)+'px';\n\n    this.setStateSafe({\n      carouselIndex,\n      carouselOffsetLeft\n    });\n  }\n\n  render() {\n\n    const valueProps = {\n      lineHeight:1,\n      fontSize:[4,5],\n      fontWeight:[3,4],\n      color:'statValue'\n    };\n\n    const unitProps = {\n      ml:2,\n      lineHeight:1,\n      fontWeight:[2,3],\n      color:'statValue',\n      fontSize:[3,'23px'],\n    };\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const apyLong = this.functionsUtil.getGlobalConfig(['messages','apyLong']);\n\n    if (!this.props.availableStrategies){\n      return (\n        <FlexLoader\n          textProps={{\n            textSize:4,\n            fontWeight:2\n          }}\n          loaderProps={{\n            mb:3,\n            size:'40px'\n          }}\n          flexProps={{\n            minHeight:'50vh',\n            flexDirection:'column'\n          }}\n          text={'Loading assets...'}\n        />\n      );\n    }\n\n    if (!this.props.selectedToken){\n      const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n      const enabledTokens = [];\n      const statsTokens = this.functionsUtil.getGlobalConfig(['stats','tokens']);\n      const statsProtocols = this.functionsUtil.getGlobalConfig(['stats','protocols']);\n      Object.keys(statsTokens).forEach(token => {\n        const tokenInfo = statsTokens[token];\n        if (tokenInfo.enabled){\n          enabledTokens.push(token);\n        }\n      });\n      return (\n        <Flex\n          mb={3}\n          width={1}\n          flexDirection={'column'}\n        >\n          <AssetsUnderManagement\n            {...this.props}\n            loaderAlign={'flex-end'}\n          />\n          {\n            Object.keys(strategies).map(strategy => {\n              const strategyInfo = strategies[strategy];\n              const availableTokens = this.props.availableStrategies[strategy];\n              if (!availableTokens){\n                return false;\n              }\n              return (\n                <Box\n                  mb={2}\n                  width={1}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                  key={`strategy-container-${strategy}`}\n                >\n                  <Title\n                    mt={3}\n                    mb={[3,4]}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'baseline'}\n                      justifyContent={'center'}\n                    >\n                      {strategyInfo.title}\n                      {\n                        strategyInfo.titlePostfix &&\n                          <Text\n                            ml={2}\n                            fontWeight={3}\n                            fontSize={[2,4]}\n                            color={'dark-gray'}\n                          >\n                            {strategyInfo.titlePostfix}\n                          </Text>\n                      }\n                    </Flex>\n                  </Title>\n                  <AssetsList\n                    enabledTokens={enabledTokens}\n                    handleClick={(props) => this.selectToken(strategy,props.token)}\n                    cols={[\n                      {\n                        title:'CURRENCY',\n                        props:{\n                          width:[0.26,0.15]\n                        },\n                        fields:[\n                          {\n                            name:'icon',\n                            props:{\n                              mr:2,\n                              height:['1.4em','2.3em']\n                            }\n                          },\n                          {\n                            name:'tokenName'\n                          }\n                        ]\n                      },\n                      {\n                        title:'POOL',\n                        props:{\n                          width:[0.22,0.14],\n                        },\n                        fields:[\n                          {\n                            name:'allocationChart',\n                            mobile:false,\n                            parentProps:{\n                              width:0.3\n                            },\n                            style:{\n                              overflow:'visible'\n                            },\n                            showLoader:false,\n                          },\n                          {\n                            name:'pool',\n                            props:{\n                              ml:1\n                            },\n                            parentProps:{\n                              width:[1,0.7]\n                            }\n                          }\n                        ]\n                      },\n                      {\n                        title:'APY',\n                        desc:apyLong,\n                        props:{\n                          width: [0.29,0.14],\n                        },\n                        parentProps:{\n                          flexDirection:'column',\n                          alignItems:'flex-start',\n                        },\n                        fields:[\n                          {\n                            name:'apy',\n                            showTooltip:true\n                          },\n                          {\n                            name:'idleDistribution',\n                            showLoader:false,\n                            props:{\n                              decimals:this.props.isMobile ? 1 : 2,\n                              fontSize:this.props.isMobile ? '9px' : 0\n                            }\n                          },\n                        ]\n                      },\n                      {\n                        title:'RISK SCORE',\n                        desc:this.functionsUtil.getGlobalConfig(['messages','riskScore']),\n                        mobile:false,\n                        props:{\n                          width:[0.27,0.16],\n                        },\n                        fields:[\n                          {\n                            name:'score'\n                          }\n                        ]\n                      },\n                      {\n                        title:'APR LAST WEEK',\n                        mobile:false,\n                        props:{\n                          width: 0.25,\n                        },\n                        parentProps:{\n                          width:1,\n                          pr:[2,4]\n                        },\n                        fields:[\n                          {\n                            name:'aprChart',\n                            style:{\n                              overflow:'visible',\n                            },\n                          }\n                        ]\n                      },\n                      {\n                        title:'',\n                        props:{\n                          width:[0.23,0.16],\n                        },\n                        parentProps:{\n                          width:1\n                        },\n                        fields:[\n                          {\n                            name:'button',\n                            label:this.props.isMobile ? 'View' : 'View stats',\n                            props:{\n                              width:1,\n                              fontSize:3,\n                              fontWeight:3,\n                              height:'45px',\n                              borderRadius:4,\n                              boxShadow:null,\n                              mainColor:'redeem',\n                              size: this.props.isMobile ? 'small' : 'medium',\n                              handleClick:(props) => this.selectToken(strategy,props.token)\n                            }\n                          }\n                        ]\n                      }\n                    ]}\n                    {...this.props}\n                    selectedStrategy={strategy}\n                    availableTokens={availableTokens}\n                  />\n                  {\n                    !this.props.isMobile &&\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'flex-end'}\n                      >\n                        {\n                          Object.values(statsProtocols).filter( p => (p.legend) ).map( (p,index) => (\n                            <Flex\n                              mr={3}\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              key={`legend_${index}`}\n                            >\n                              <Box\n                                mr={1}\n                                width={'10px'}\n                                height={'10px'}\n                                borderRadius={'50%'}\n                                backgroundColor={`rgb(${p.color.rgb.join(',')})`}\n                              >\n                              </Box>\n                              <Text.span\n                                fontSize={1}\n                                color={'cellText'}\n                              >\n                                {p.label}\n                              </Text.span>\n                            </Flex>\n                          ))\n                        }\n                      </Flex>\n                  }\n                </Box>\n              );\n            })\n          }\n          {\n            idleTokenEnabled && !this.state.showRefreshIdleSpeed ? (\n              <Flex\n                mb={4}\n                width={1}\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <Link\n                  hoverColor={'primary'}\n                  onClick={this.showRefreshIdleSpeed.bind(this)}\n                >\n                  Refresh Idle Speed\n                </Link>\n              </Flex>\n            ) : idleTokenEnabled && this.state.showRefreshIdleSpeed &&\n              <DashboardCard\n                cardProps={{\n                  p:2,\n                  mb:4,\n                  width:1,\n                  mt:[2,3],\n                }}\n                isActive={true}\n                isInteractive={false}\n              >\n                <Flex\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                >\n                  <Text\n                    fontWeight={500}\n                    color={'flashColor'}\n                    textAlign={'center'}\n                    fontSize={[1,'15px']}\n                  >\n                    By executing this transaction you can adjust the IDLE distribution speed among the pools.\n                  </Text>\n                  <ExecuteTransaction\n                    action={'Refresh'}\n                    Component={Button}\n                    parentProps={{\n                      mt:1\n                    }}\n                    componentProps={{\n                      size:'small',\n                      mainColor:'blue',\n                      value:'REFRESH IDLE SPEED'\n                    }}\n                    params={[]}\n                    contractName={'IdleController'}\n                    methodName={'refreshIdleSpeeds'}\n                    {...this.props}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'center'}\n                      justifyContent={'center'}\n                    >\n                      <Icon\n                        mr={1}\n                        name={'Done'}\n                        size={'1.4em'}\n                        color={this.props.theme.colors.transactions.status.completed}\n                      />\n                      <Text\n                        fontWeight={500}\n                        fontSize={'15px'}\n                        color={'copyColor'}\n                        textAlign={'center'}\n                      >\n                        Idle Speed Refreshed\n                      </Text>\n                    </Flex>\n                  </ExecuteTransaction>\n                </Flex>\n              </DashboardCard>\n          }\n        </Flex>\n      );\n    } else {\n      const versionsOptions = Object.keys(globalConfigs.stats.versions).filter( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return versionInfo.enabledTokens.includes(this.props.selectedToken) && versionInfo.enabledStrategies.includes(this.props.selectedStrategy);\n      }).map( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return {\n          value:version,\n          label:versionInfo.label\n        }\n      });\n\n      const versionInfo = this.getVersionInfo(this.state.idleVersion);\n\n      let performanceTooltip = null;\n      if (this.state.idleVersion && versionInfo){\n        const showPerformanceTooltip = this.functionsUtil.getGlobalConfig(['stats','versions',this.state.idleVersion,'showPerformanceTooltip']);\n        performanceTooltip = showPerformanceTooltip ? this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'performanceTooltip']) : null;\n      }\n\n      const versionDefaultValue = versionsOptions.find( v => (v.value === this.state.idleVersion) );\n\n      return (\n        <Flex\n          p={0}\n          width={1}\n          flexDirection={'column'}\n        >\n          {\n          /*\n          }\n          <Flex position={['absolute','relative']} left={0} px={[3,0]} zIndex={10} width={1} flexDirection={'row'} mb={[0,3]}>\n            <Flex alignItems={'center'} width={[2/3,1/2]}>\n              <RouterLink to=\"/\">\n                <Image src=\"images/logo-gradient.svg\"\n                  height={['35px','48px']}\n                  position={'relative'} />\n              </RouterLink>\n              <Heading.h3 color={'dark-gray'} textAlign={'left'} fontWeight={3} lineHeight={'initial'} fontSize={[4,5]} ml={[1,2]}>\n                <Text.span fontSize={'80%'}>|</Text.span> Stats\n              </Heading.h3>\n            </Flex>\n            <Flex flexDirection={'row'} width={[1/3,1/2]} justifyContent={'flex-end'} alignItems={'center'}>\n              {\n                this.state.buttonGroups && \n                  this.props.isMobile ? (\n                    <ButtonGroup\n                      isMobile={this.props.isMobile}\n                      components={ this.state.buttonGroups.reduce((components,array) => components.concat(array),[]) }\n                      theme={'light'}\n                    />\n                  ) :\n                  this.state.buttonGroups.map((buttonGroup,i) => (\n                    <ButtonGroup\n                      key={`buttonGroup_${i}`}\n                      isMobile={this.props.isMobile}\n                      components={buttonGroup}\n                      theme={'light'}\n                    />\n                  ))\n              }\n            </Flex>\n          </Flex>\n          */\n          }\n          <Box\n            mb={[3,4]}\n          >\n            <Flex\n              flexDirection={['column','row']}\n            >\n              <Flex\n                width={[1,0.4]}\n              >\n                <Breadcrumb\n                  {...this.props}\n                  showPathMobile={true}\n                  text={'ASSETS OVERVIEW'}\n                  isMobile={this.props.isMobile}\n                  handleClick={ e => this.props.goToSection('stats') }\n                  path={[this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])]}\n                />\n              </Flex>\n              <Flex\n                mt={[3,0]}\n                width={[1,0.6]}\n                flexDirection={['column','row']}\n                justifyContent={['center','space-between']}\n              >\n                <Flex\n                  width={[1,0.26]}\n                  flexDirection={'column'}\n                >\n                  <GenericSelector\n                    innerProps={{\n                      p:1,\n                      height:['100%','46px'],\n                    }}\n                    name={'idle-version'}\n                    options={versionsOptions}\n                    defaultValue={versionDefaultValue}\n                    onChange={ v => this.setIdleVersion(v) }\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.3]}\n                  flexDirection={'column'}\n                >\n                  <AssetSelector\n                    innerProps={{\n                      p:1\n                    }}\n                    {...this.props}\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.39]}\n                  flexDirection={'column'}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:1,\n                      display:'flex',\n                      alignItems:'center',\n                      height:['46px','100%'],\n                      justifyContent:'center'\n                    }}\n                    isInteractive={true}\n                    handleClick={ e => this.setDateRangeModal(true) }\n                  >\n                    <Text\n                      fontWeight={3}\n                      color={'copyColor'}\n                    >\n                    {\n                      this.state.quickSelection\n                      ?\n                        this.quickSelections[this.state.quickSelection]\n                      : this.state.startTimestampObj && this.state.endTimestampObj &&\n                        `${this.state.startTimestampObj.format('DD/MM/YY')} - ${this.state.endTimestampObj.format('DD/MM/YY')}`\n                    }\n                    </Text>\n                  </DashboardCard>\n                </Flex>\n              </Flex>\n            </Flex>\n          </Box>\n\n          {\n            this.state.idleVersion && (versionInfo.startTimestamp>parseInt(new Date().getTime()/1000)) ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'AccessTime'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Idle Stats {this.state.idleVersion} will be available shortly!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : (\n              <Box\n                width={1}\n              >\n                <Box\n                  mt={[3,0]}\n                  mb={[3,4]}\n                >\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    justifyContent={'center'}\n                    flexDirection={['column','row']}\n                  >\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Asset Under Management'}\n                        label={ this.state.unlentBalance ? `Unlent funds: ${this.state.unlentBalance} ${this.props.selectedToken}` : this.props.selectedToken }\n                        labelTooltip={ this.state.unlentBalance ? this.functionsUtil.getGlobalConfig(['messages','cheapRedeem']) : null}\n                      >\n                        <SmartNumber\n                          precision={2}\n                          type={'money'}\n                          {...valueProps}\n                          unitProps={unitProps}\n                          number={this.state.aum}\n                          flexProps={{\n                            alignItems:'baseline',\n                            justifyContent:'flex-start'\n                          }}\n                          unit={this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'conversionRateField']) ? '$' : null}\n                        />\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Avg APY'}\n                        label={'Annualized'}\n                      >\n                        <Flex\n                          width={1}\n                          alignItems={'center'}\n                          flexDirection={['column','row']}\n                        >\n                          <VariationNumber\n                            direction={'up'}\n                            iconPos={'right'}\n                            iconSize={'1.8em'}\n                            justifyContent={'flex-start'}\n                            width={1}\n                            >\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                              fontSize={[4,5]}\n                            >\n                              {this.state.apr}\n                              <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                            </Text>\n                          </VariationNumber>\n                        </Flex>\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Overperformance on Compound'}\n                        label={'Annualized'}\n                      >\n                        {\n                          this.state.delta && !isNaN(this.state.delta) ? (\n                            <VariationNumber\n                              direction={'up'}\n                              iconPos={'right'}\n                              iconSize={'1.8em'}\n                              justifyContent={'flex-start'}\n                              >\n                              <Text\n                                lineHeight={1}\n                                fontSize={[4,5]}\n                                fontWeight={[3,4]}\n                                color={'statValue'}\n                              >\n                                {this.state.delta}\n                                <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                              </Text>\n                            </VariationNumber>\n                          ) : (\n                            <Text\n                              lineHeight={1}\n                              fontSize={[4,5]}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                            >\n                              {this.state.delta}\n                            </Text>\n                          )\n                        }\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        label={' '}\n                        title={'Rebalances'}\n                        value={this.state.rebalances.toString()}\n                      />\n                    </Flex>\n                    {\n                    /*\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Current APR</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.currApr}\n                            <Text.span color={'copyColor'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Days Live</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.days}\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    */\n                    }\n                  </Flex>\n                </Box>\n\n                <DashboardCard\n                  title={'Historical Performance'}\n                  description={performanceTooltip}\n                  cardProps={{\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex id='chart-PRICE' width={1} mb={3}>\n                    <StatsChart\n                      height={ 350 }\n                      {...this.state}\n                      parentId={'chart-PRICE'}\n                      isMobile={this.props.isMobile}\n                      contracts={this.props.contracts}\n                      apiResults={this.state.apiResults}\n                      idleVersion={this.state.idleVersion}\n                      apiResults_unfiltered={this.state.apiResults_unfiltered}\n                      chartMode={this.state.idleVersion === this.state.latestVersion ? 'PRICE_V4' : 'PRICE'}\n                    />\n                  </Flex>\n                </DashboardCard>\n\n                <DashboardCard\n                  cardProps={{\n                    pb:3,\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex\n                    flexDirection={['column','row']}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      this.state.idleVersion === this.state.latestVersion && \n                      <Flex\n                        pt={2}\n                        width={[1,1/3]}\n                        id={'allocation-chart'}\n                        flexDirection={'column'}\n                        alignItems={'flex-start'}\n                        justifyContent={'flex-start'}\n                      >\n                        <AllocationChart\n                          height={310}\n                          {...this.props}\n                          parentId={'allocation-chart'}\n                        />\n                        <Rebalance\n                          {...this.props}\n                        />\n                      </Flex>\n                    }\n                    <Flex\n                      mb={[0,3]}\n                      id={'chart-ALL'}\n                      pl={[0,this.state.idleVersion === this.state.latestVersion ? 0 : 3]}\n                      width={[1, this.state.idleVersion === this.state.latestVersion ? 2/3 : 1]}\n                    >\n                      <Flex alignItems={'flex-start'} justifyContent={'flex-start'} flexDirection={'column'} width={1}>\n                        <Heading.h4\n                          mb={2}\n                          ml={3}\n                          mt={[3,4]}\n                          fontWeight={4}\n                          fontSize={[2,3]}\n                          textAlign={'left'}\n                          color={'dark-gray'}\n                          lineHeight={'initial'}\n                        >\n                          Allocations over time\n                        </Heading.h4>\n                        <StatsChart\n                          height={350}\n                          {...this.state}\n                          chartMode={'ALL'}\n                          parentId={'chart-ALL'}\n                          isMobile={this.props.isMobile}\n                          contracts={this.props.contracts}\n                          apiResults={this.state.apiResults}\n                          idleVersion={this.state.idleVersion}\n                          apiResults_unfiltered={this.state.apiResults_unfiltered}\n                        />\n                      </Flex>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n\n                <Flex\n                  position={'relative'}\n                >\n                  <Flex\n                    width={1}\n                    id={'carousel-container'}\n                    justifyContent={'flex-end'}\n                  >\n                    <RoundIconButton\n                      buttonProps={{\n                        mr:3\n                      }}\n                      iconName={'ArrowBack'}\n                      disabled={this.state.carouselIndex === 0}\n                      handleClick={ e => this.handleCarousel('back') }\n                    />\n                    <RoundIconButton\n                      iconName={'ArrowForward'}\n                      handleClick={ e => this.handleCarousel('next') }\n                      disabled={this.state.carouselIndex === this.state.carouselMax}\n                    />\n                  </Flex>\n                  <Flex\n                    mt={5}\n                    height={'400px'}\n                    position={'absolute'}\n                    id={'carousel-cursor'}\n                    width={['444%','200%']}\n                    justifyContent={'flex-start'}\n                    left={this.state.carouselOffsetLeft}\n                    style={{\n                      transition:'left 0.3s ease-in-out'\n                    }}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        id='chart-AUM'\n                      >\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            ml={3}\n                            mt={3}\n                            mb={2}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Asset Under Management\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'AUM'}\n                            parentId={'chart-AUM'}\n                            isMobile={this.props.isMobile}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-APR' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            APRs\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'APR'}\n                            parentId={'chart-APR'}\n                            isMobile={this.props.isMobile}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                      title={'Risk Score'}\n                      description={'Idle Risk Score is a weighted average of the underlying protocols risks assessed by DeFi Score'}\n                      titleParentProps={{\n                        ml:16,\n                        mt:16\n                      }}\n                    >\n                      <Flex id='chart-SCORE' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'SCORE'}\n                            parentId={'chart-SCORE'}\n                            isMobile={this.props.isMobile}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-VOL' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Volume\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'VOL'}\n                            parentId={'chart-VOL'}\n                            isMobile={this.props.isMobile}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                </Flex>\n              </Box>\n            )\n          }\n          <DateRangeModal\n            {...this.props}\n            minDate={this.state.minDate}\n            maxDate={this.state.maxDate}\n            handleSelect={this.setDateRange}\n            isOpen={this.state.dateRangeModalOpened}\n            closeModal={e => this.setDateRangeModal(false)}\n            startDate={this.state.startTimestampObj ? this.state.startTimestampObj._d : null}\n            endDate={this.state.endTimestampObj ? this.state.endTimestampObj._d : null}\n          />\n        </Flex>\n      );\n    }\n  }\n}\n\nexport default Stats;","import Title from '../Title/Title';\nimport IconBox from '../IconBox/IconBox';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport { Flex, Icon, Text, Box, Image } from \"rimble-ui\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass Utils extends Component {\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    const SubComponent = this.props.selectedSubsection && this.props.selectedSubsection.subComponent ? this.props.selectedSubsection.subComponent : null;\n    const viewOnly = this.props.connectorName === 'custom';\n    const showBreadCrumb = typeof this.props.showBreadCrumb !== 'undefined' ? this.props.showBreadCrumb : true;\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.props.selectedSubsection ? (\n            <Box\n              width={1}\n            >\n              {\n                showBreadCrumb && (\n                  <Flex\n                    width={1}\n                  >\n                    <Breadcrumb\n                      {...this.props}\n                      showPathMobile={true}\n                      isMobile={this.props.isMobile}\n                      path={[this.props.selectedSubsection.label]}\n                      text={this.props.selectedSection.label.toUpperCase()}\n                      handleClick={ e => this.props.goToSection(this.props.selectedSection.route) }\n                    />\n                  </Flex>\n                )\n              }\n              <Flex\n                my={[2,3]}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <Title\n                  mb={2}\n                >\n                  {this.props.selectedSubsection.label}\n                </Title>\n                <Text\n                  textAlign={'center'}\n                >\n                  {this.props.selectedSubsection.desc}\n                </Text>\n              </Flex>\n              <SubComponent\n                {...this.props}\n                {...this.props.selectedSubsection.directProps}\n                toolProps={this.props.selectedSubsection.props}\n              />\n            </Box>\n          ) : (\n            <Flex\n              my={[2,3]}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Title\n                mb={3}\n              >\n                Tools\n              </Title>\n              <Flex\n                width={1}\n                style={{\n                  flexWrap:'wrap'\n                }}\n                justifyContent={viewOnly ? 'center' : 'flex-start'}\n              >\n              {\n                viewOnly ? (\n                  <IconBox\n                    cardProps={{\n                      maxWidth:[1,'35em']\n                    }}\n                    icon={'Visibility'}\n                    text={'You are using Idle in \"Read-Only\" mode.<br />Logout and connect with your wallet to interact.'}\n                  />\n                ) : this.props.selectedSection.submenu.map( (tool,toolIndex) => (\n                  <DashboardCard\n                    isInteractive={true}\n                    key={`tool_${toolIndex}`}\n                    cardProps={{\n                      p:[3,4],\n                      mb:[3,3],\n                      mr:[0,'2%'],\n                      style:{\n                        flex: this.props.isMobile ? '1 1 100%' : '0 0 31%'\n                      },\n                      alignItems:'center',\n                      flexDirection:'column',\n                      justifyContent:'center'\n                    }}\n                    handleClick={ e => this.props.goToSection(this.props.selectedSection.route+'/'+tool.route) }\n                  >\n                    <Text\n                      fontSize={[3,4]}\n                      textAlign={'center'}\n                    >\n                      {tool.label}\n                    </Text>\n                    <Flex\n                      justifyContent={'center'}\n                    >\n                      {\n                        tool.image ? (\n                          <Image\n                            my={[0,2]}\n                            height={'2.2em'}\n                            src={tool.image}\n                          />\n                        ) : tool.icon && (\n                          <Icon\n                            my={[0,2]}\n                            size={'3em'}\n                            name={tool.icon}\n                          />\n                        )\n                      }\n                    </Flex>\n                    <Text\n                      fontSize={[2,2]}\n                      textAlign={'center'}\n                    >\n                      {tool.desc}\n                    </Text>\n                  </DashboardCard>\n                ) )\n              }\n              </Flex>\n            </Flex>\n          )\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default Utils;\n","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Heading, Text, Tooltip, Icon } from \"rimble-ui\";\nimport PortfolioEquity from '../PortfolioEquity/PortfolioEquity';\n\nclass FundsOverview extends Component {\n\n  state = {\n    govTokensAprs:null,\n    aggregatedValues:[],\n    govTokensTotalApr:null,\n    govTokensUserBalance:null,\n    govTokensDistribution:null,\n    govTokensTotalBalance:null,\n    govTokensTotalAprTooltip:null,\n    idleTokenUserDistribution:null,\n    govTokensDistributionTooltip:null,\n    govTokensTotalBalanceTooltip:null\n  };\n\n  // Utils\n  functionsUtil = null;\n  idleGovToken = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    this.idleGovToken = this.functionsUtil.getIdleGovToken();\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const isRisk = this.props.selectedStrategy === 'risk';\n\n    const [\n      govTokensAprs,\n      idleTokenUserDistribution,\n      govTokensUserBalance,\n      depositTimestamp,\n      days,\n    ] = await Promise.all([\n      this.functionsUtil.getGovTokensAprs(this.props.selectedToken,this.props.tokenConfig),\n      this.idleGovToken.getUserDistribution(this.props.account,govTokenAvailableTokens,true),\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,null),\n      this.functionsUtil.loadAssetField('depositTimestamp',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    const avgAPY = await this.functionsUtil.getAvgAPYStats(this.props.tokenConfig.address,isRisk,depositTimestamp);\n\n    const govTokensTotalBalance = govTokensUserBalance ? Object.values(govTokensUserBalance).reduce( (totBalance,govTokenBalance) => {\n      return totBalance.plus(this.functionsUtil.BNify(govTokenBalance));\n    },this.functionsUtil.BNify(0)) : null;\n\n    const govTokensTotalBalanceTooltip = govTokensUserBalance ? Object.keys(govTokensUserBalance).map( govToken => {\n      const balance = govTokensUserBalance[govToken];\n      if (balance.gt(0)){\n        return `+${balance.toFixed(2)} ${govToken}`;\n      } else {\n        return null;\n      }\n    }).filter(v => (v !== null)) : null;\n\n    // console.log(govTokensTotalBalance,govTokensUserBalance,govTokensTotalBalanceTooltip);\n\n    const govTokensTotalApr = govTokensAprs ? Object.values(govTokensAprs).reduce( (totApr,govTokenApr) => {\n      return totApr.plus(this.functionsUtil.BNify(govTokenApr));\n    },this.functionsUtil.BNify(0)) : null;\n\n    const govTokensTotalAprTooltip = govTokensAprs ? Object.keys(govTokensAprs).map( govToken => {\n      const apr = govTokensAprs[govToken];\n      if (apr.gt(0)){\n        return `${govToken}: ${apr.toFixed(2)}%`;\n      }\n      return null;\n    }).filter(v => (v !== null)) : null;\n\n    /*\n    const govTokensDistributionTooltip = govTokensUserDistribution ? Object.keys(govTokensUserDistribution).map( govToken => {\n      const speed = govTokensUserDistribution[govToken];\n      if (speed.gt(0)){\n        const distributionFrequency = this.functionsUtil.getGlobalConfig(['govTokens',govToken,'distributionFrequency']);\n        return `+${speed.toFixed(4)} ${govToken}/${distributionFrequency}`;\n      }\n      return null;\n    }).filter(v => (v !== null)) : null;\n    */\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          desc:this.functionsUtil.getGlobalConfig(['messages','apyLong']),\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '-') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    this.setState({\n      govTokensAprs,\n      aggregatedValues,\n      govTokensTotalApr,\n      govTokensUserBalance,\n      govTokensTotalBalance,\n      govTokensTotalAprTooltip,\n      idleTokenUserDistribution,\n      govTokensTotalBalanceTooltip\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Flex\n                          mt={2}\n                          width={1}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <Text\n                            fontWeight={2}\n                            fontSize={[1,2]}\n                            color={'cellText'}\n                          >\n                            {v.props.title}\n                          </Text>\n                          {\n                            v.props.desc && \n                              <Tooltip\n                                placement={'bottom'}\n                                message={v.props.desc}\n                              >\n                                <Icon\n                                  ml={2}\n                                  name={\"Info\"}\n                                  size={'1em'}\n                                  color={'cellTitle'}\n                                />\n                              </Tooltip>\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquity\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              chartToken={this.props.selectedToken}\n              enabledTokens={[this.props.selectedToken]}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLent',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:this.props.theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPerc',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.govTokensTotalBalanceTooltip && this.state.govTokensTotalBalanceTooltip.length>0 && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      this.state.govTokensTotalBalanceTooltip.map((govTokenBalance,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          mt={govTokenIndex ? 1 : 0}\n                          key={`govToken_${govTokenIndex}`}\n                        >\n                          {govTokenBalance}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                )/* : this.state.govTokensUserBalance && Object.keys(this.state.govTokensUserBalance).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + ${this.state.govTokensTotalBalance.toFixed(4)}\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalBalanceTooltip.join(' / ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Fees\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'feesCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'apy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.idleTokenUserDistribution && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      mt={1}\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      {this.state.idleTokenUserDistribution.toFixed(4)} {this.idleGovToken.tokenName}/{this.idleGovToken.tokenConfig.distributionFrequency}\n                    </Text>\n                  </Flex>\n                )\n                /*\n                this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length===1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      Object.keys(this.state.govTokensAprs).map((govToken,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          ml={govTokenIndex ? 2 : 0}\n                          key={`govToken_${govToken}`}\n                        >\n                          {this.state.govTokensAprs[govToken].toFixed(2)}% {govToken}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                ) : this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + {this.state.govTokensTotalApr.toFixed(2)}%\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalAprTooltip.join('; ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Risk Score\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'score',\n                  props:{\n                    decimals:1,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverview;","import React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Icon, Checkbox, Box, Link, Input, Tooltip } from \"rimble-ui\";\n\nclass CurveRedeem extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    tokenConfig:null,\n    unevenAmounts:null,\n    selectedToken:null,\n    availableTokens:null,\n    buttonDisabled:false,\n    showMaxSlippage:false,\n    redeemUnderlying:true,\n    curveTokenConfig:null,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    curveTokensAmounts:null,\n    fastBalanceSelector:null,\n    redeemUnevenAmounts:false,\n    curveRedeemableIdleTokens:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.initToken();\n  }\n\n  showMaxSlippage(){\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  async calculateSlippage(max_slippage=null){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (!inputValue || inputValue.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    let withdrawSlippage = null;\n    let curveTokensAmounts = null;\n    let curveIdleTokensAmounts = null;\n    if (this.state.redeemUnevenAmounts){\n      [\n        curveTokensAmounts,\n        curveIdleTokensAmounts\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokensAmounts(this.props.account,normalizedAmount,true),\n        this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,normalizedAmount)\n      ]);\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false,curveIdleTokensAmounts);\n    } else {\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false);\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const redeemableBalance = inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.times(100).plus(this.state.maxSlippage || this.functionsUtil.BNify(0)).div(100)));\n      curveTokensAmounts = {};\n      curveTokensAmounts[this.state.selectedToken] = redeemableBalance;\n    }\n\n    if (withdrawSlippage){\n      withdrawSlippage = withdrawSlippage.times(100);\n    }\n\n    this.setState({\n      withdrawSlippage,\n      curveTokensAmounts,\n      curveIdleTokensAmounts\n    });\n\n    // Add max slippage but don't save in state\n    if (withdrawSlippage && max_slippage){\n      withdrawSlippage = withdrawSlippage.plus(max_slippage);\n    }\n\n    return withdrawSlippage;\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.tokenConfig.idle.token !== this.props.tokenConfig.idle.token;\n    if (tokenChanged){\n      await this.initToken();\n    }\n\n    const redeemUnevenAmountsChanged = prevState.redeemUnevenAmounts !== this.state.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    const inputChanged = prevState.inputValue !== this.state.inputValue;\n    const maxSlippageChanged = parseFloat(prevState.maxSlippage) !== parseFloat(this.state.maxSlippage);\n    const tokenConfigChanged = JSON.stringify(prevState.tokenConfig) !== JSON.stringify(this.state.tokenConfig);\n    if (inputChanged || tokenConfigChanged || maxSlippageChanged){\n      this.calculateSlippage();\n    }\n\n    const selectedTokenChanged = prevState.selectedToken !== this.state.selectedToken;\n    if (selectedTokenChanged){\n      this.loadSelectedTokenConfig();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    let buttonDisabled = false;\n\n    // if (this.state.redeemUnevenAmounts){\n      buttonDisabled = !amount || amount.gt(this.state.curveTokenBalance);\n    // } else {\n      // buttonDisabled = !amount || amount.gt(this.state.redeemableBalance);\n    // }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    let inputValue = null;\n\n    // if (this.state.redeemUnevenAmounts){\n    inputValue = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n    // } else {\n      // inputValue = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n    // }\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  selectDestinationToken(selectedToken){\n    this.setState({\n      selectedToken\n    });\n  }\n\n  async loadSelectedTokenConfig(){\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const tokenConfig = this.state.availableTokens[this.state.selectedToken];\n    const curveTokenConfig = curveConfig.availableTokens[tokenConfig.idle.token];\n    this.setState({\n      tokenConfig,\n      curveTokenConfig\n    });\n  }\n\n  async initToken(){\n    const [curvePoolContract,curveSwapContract] = await Promise.all([\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract()\n    ]);\n\n    const [\n      curveTokenPrice,\n      curveTokenBalance,\n      curveRedeemableIdleTokens,\n    ] = await Promise.all([\n      this.functionsUtil.getCurveTokenPrice(),\n      this.functionsUtil.getCurveTokenBalance(this.props.account),\n      this.functionsUtil.getCurveRedeemableIdleTokens(this.props.account)\n    ]);\n\n    const unevenAmounts = [];\n    const redeemableBalance = curveTokenBalance ? curveTokenBalance.times(curveTokenPrice) : this.functionsUtil.BNify(0);\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();;\n    const selectedToken = Object.keys(availableTokens)[0];\n\n    this.setState({\n      selectedToken,\n      unevenAmounts,\n      curveTokenPrice,\n      availableTokens,\n      curvePoolContract,\n      curveSwapContract,\n      curveTokenBalance,\n      redeemableBalance,\n      curveRedeemableIdleTokens\n    });\n  }\n\n  async redeem(){\n\n    if (!this.state.curveTokenBalance){\n      return false;\n    }\n\n    const callbackRedeem = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveRedeem`,\n        eventAction: this.props.selectedToken,\n        eventValue: this.state.curveTokenBalance.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackRedeem === 'function' && txSucceeded){\n        this.props.callbackRedeem(tx);\n      }\n    };\n\n    const callbackReceiptRedeem = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.curveSwapContract.name;\n    const withdrawSlippage = await this.calculateSlippage(this.state.maxSlippage);\n    const max_slippage = this.functionsUtil.BNify(this.state.maxSlippage).div(100);\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    // const curveTokenBalance = this.functionsUtil.normalizeTokenAmount(this.state.curveTokenBalance,this.state.curvePoolContract.decimals);\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    if (this.state.redeemUnevenAmounts){\n      const min_amounts = this.state.redeemUnderlying ? await this.functionsUtil.getCurveTokensAmounts(this.props.account,_amount,false,true) : await this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,_amount,max_slippage);\n      console.log('remove_liquidity',_amount.toString(),min_amounts);\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    } else {\n      const coin_index = this.state.curveTokenConfig.migrationParams.coinIndex;\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.div(100))),this.state.tokenConfig.decimals);\n      // const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.minus(inputValue.times(withdrawSlippage.div(100))),this.state.curveTokenConfig.decimals);\n      // let _token_amount = await this.functionsUtil.getCurveTokenAmount(amounts,false);\n      // _token_amount = this.functionsUtil.BNify(_token_amount).isGreaterThan(curveTokenBalance) ? curveTokenBalance : this.functionsUtil.BNify(_token_amount);\n\n      console.log('remove_liquidity_one_coin',_amount, coin_index, min_amount);\n\n      // debugger;\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_one_coin', [_amount, coin_index, min_amount, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    }\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  getFastBalanceSelector(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n\n  render() {\n\n    const showSlippage = !this.state.buttonDisabled && this.state.withdrawSlippage;\n    const curveTokenName = this.functionsUtil.getGlobalConfig(['curve','poolContract','token']);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          {\n            !this.state.curveTokenBalance ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3,\n                  minHeight:'195px',\n                  style:{\n                    display:'flex',\n                    alignItems:'center',\n                    justifyContent:'center'\n                  }\n                }}\n              >\n                <FlexLoader\n                  flexProps={{\n                    flexDirection:'row'\n                  }}\n                  loaderProps={{\n                    size:'30px'\n                  }}\n                  textProps={{\n                    ml:2\n                  }}\n                  text={'Checking Curve Pool...'}\n                />\n              </DashboardCard>\n            ) : this.state.processing.loading ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3\n                }}\n              >\n                <Flex\n                  flexDirection={'column'}\n                >\n                  <TxProgressBar\n                    web3={this.props.web3}\n                    hash={this.state.processing.txHash}\n                    endMessage={`Finalizing redeem request...`}\n                    cancelTransaction={this.cancelTransaction.bind(this)}\n                    waitText={ this.props.waitText ? this.props.waitText : 'Redeem estimated in'}\n                  />\n                </Flex>\n              </DashboardCard>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    mb:2\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'1.8em'}\n                      color={'cellText'}\n                      name={'FileUpload'}\n                    />\n                    <Text\n                      mt={1}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Withdraw from the Curve Pool in a specific token or in uneven amounts of tokens (with no slippage).\n                    </Text>\n                    <Flex\n                      mt={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                    >\n                      <Checkbox\n                        required={false}\n                        label={`Redeem with no slippage`}\n                        checked={this.state.redeemUnevenAmounts}\n                        onChange={ e => this.toggleUnevenAmounts(e.target.checked) }\n                      />\n                      <Tooltip\n                        placement={'top'}\n                        message={`You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.`}\n                      >\n                        <Icon\n                          size={'1em'}\n                          color={'cellTitle'}\n                          name={\"InfoOutline\"}\n                        />\n                      </Tooltip>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n                {\n                  !this.state.redeemUnevenAmounts/* && (!this.props.selectedToken || (this.state.showMaxSlippage && showSlippage))*/ && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      {\n                        this.state.tokenConfig && \n                          <Box\n                            width={1}\n                          >\n                            <Text\n                              mb={1}\n                            >\n                              Select destination token:\n                            </Text>\n                            <AssetSelector\n                              {...this.props}\n                              id={'token-from'}\n                              showBalance={false}\n                              tokenConfig={this.state.tokenConfig}\n                              selectedToken={this.state.selectedToken}\n                              availableTokens={this.state.availableTokens}\n                              onChange={this.selectDestinationToken.bind(this)}\n                            />\n                          </Box>\n                      }\n                    </Box>\n                  )\n                }\n                {\n                  this.state.curveTokensAmounts && !this.state.buttonDisabled && (\n                    <DashboardCard\n                      cardProps={{\n                        mt:1,\n                        mb:2,\n                        py:2,\n                        px:1\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Text\n                          mt={1}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          You will receive:\n                        </Text>\n                        <Flex\n                          mt={2}\n                          width={1}\n                          boxShadow={0}\n                          style={{\n                            flexWrap:'wrap'\n                          }}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                          >\n                            {\n                              Object.keys(this.state.curveTokensAmounts).map( token => {\n                                const balance = this.state.curveTokensAmounts[token];\n                                return (\n                                  <Flex\n                                    mb={1}\n                                    mx={1}\n                                    width={'auto'}\n                                    flexDirection={'row'}\n                                    key={`tokenBalance_${token}`}\n                                    justifyContent={'flex-start'}\n                                  >\n                                    <AssetField\n                                      token={token}\n                                      tokenConfig={{\n                                        token:token\n                                      }}\n                                      fieldInfo={{\n                                        name:'icon',\n                                        props:{\n                                          mr:1,\n                                          width:['1.4em','1.6em'],\n                                          height:['1.4em','1.6em']\n                                        }\n                                      }}\n                                    />\n                                    <SmartNumber\n                                      ml={1}\n                                      fontSize={[0,1]}\n                                      fontWeight={500}\n                                      maxPrecision={4}\n                                      color={'cellText'}\n                                      number={balance.toString()}\n                                    />\n                                  </Flex>\n                                );\n                            })\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n                {\n                  this.state.showMaxSlippage && showSlippage && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Text>\n                          Choose max slippage:\n                        </Text>\n                        <Tooltip\n                          placement={'top'}\n                          message={`Max additional slippage on top of the one shown below`}\n                        >\n                          <Icon\n                            ml={1}\n                            size={'1em'}\n                            color={'cellTitle'}\n                            name={\"InfoOutline\"}\n                          />\n                        </Tooltip>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        {\n                          [0.2,0.5,1,5].map( slippage => (\n                            <FastBalanceSelector\n                              cardProps={{\n                                p:1\n                              }}\n                              textProps={{\n                                fontSize:1\n                              }}\n                              percentage={slippage}\n                              key={`selector_${slippage}`}\n                              onMouseDown={()=>this.setMaxSlippage(slippage)}\n                              isActive={this.state.maxSlippage === parseFloat(slippage)}\n                            />\n                          ))\n                        }\n                      </Flex>\n                    </Box>\n                  )\n                }\n                <Flex\n                  mb={3}\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  <Flex\n                    mb={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'flex-end'}\n                  >\n                    {\n                      showSlippage && (\n                        <Flex\n                          width={1}\n                          maxWidth={'40%'}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            textAlign={'right'}\n                            style={{\n                              whiteSpace:'nowrap'\n                            }}\n                            color={ parseFloat(this.state.withdrawSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                          >\n                            {\n                              parseFloat(this.state.withdrawSlippage.toFixed(3)) === 0 ?\n                                'No Slippage'\n                              : `${ this.state.withdrawSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.withdrawSlippage.abs().toFixed(3)}%`\n                            }\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={ this.state.redeemUnevenAmounts ? `You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.` : this.state.withdrawSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                          {\n                            !this.state.redeemUnevenAmounts &&\n                              <Link\n                                ml={1}\n                                color={'copyColor'}\n                                hoverColor={'primary'}\n                                onClick={this.showMaxSlippage.bind(this)}\n                              >\n                                change\n                              </Link>\n                          }\n                        </Flex>\n                      )\n                    }\n                    <Flex\n                      width={1}\n                      maxWidth={'60%'}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      justifyContent={'flex-end'}\n                    >\n                      <Link\n                        fontSize={1}\n                        fontWeight={3}\n                        color={'dark-gray'}\n                        textAlign={'right'}\n                        hoverColor={'copyColor'}\n                        onClick={ (e) => this.setFastBalanceSelector(100) }\n                        style={{\n                          maxWidth:'100%',\n                          overflow:'hidden',\n                          whiteSpace:'nowrap',\n                          textOverflow:'ellipsis'\n                        }}\n                      >\n                        {this.state.curveTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {curveTokenName}\n                      </Link>\n                    </Flex>\n                  </Flex>\n                  <Input\n                    min={0}\n                    type={\"number\"}\n                    required={true}\n                    height={'3.4em'}\n                    borderRadius={2}\n                    fontWeight={500}\n                    boxShadow={'none !important'}\n                    placeholder={`Insert amount`}\n                    onChange={this.changeInputValue.bind(this)}\n                    border={`1px solid ${this.props.theme.colors.divider}`}\n                    value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                  />\n                  <Flex\n                    mt={2}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      [25,50,75,100].map( percentage => (\n                        <FastBalanceSelector\n                          percentage={percentage}\n                          key={`selector_${percentage}`}\n                          onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                          isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                        />\n                      ))\n                    }\n                  </Flex>\n                </Flex>\n                <Flex\n                  justifyContent={'center'}\n                >\n                  <RoundButton\n                    buttonProps={{\n                      mt:2,\n                      width:[1,1/2],\n                      disabled:this.state.buttonDisabled\n                    }}\n                    handleClick={this.redeem.bind(this)}\n                  >\n                    Redeem\n                  </RoundButton>\n                </Flex>\n              </Flex>\n            )\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveRedeem;","import React, { Component } from 'react';\nimport {\n  Button,\n  Flex,\n  Box,\n  Text\n} from \"rimble-ui\";\nimport styles from './TwitterShareButton.module.scss';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\n\nclass TwitterShareButton extends Component {\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  componentWillMount() {\n    this.loadUtils();\n  }\n\n  componentDidMount() {\n    this.loadUtils();\n  }\n\n  componentDidUpdate() {\n    this.loadUtils();\n  }\n\n  share = () => {\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'Share',\n      eventAction: 'twitter',\n      eventLabel: this.props.parent\n    });\n\n    const w = Math.min(window.innerWidth,600);\n    const h = 350;\n    const x = (window.innerWidth-w)/2;\n    const y = 150;\n    window.open(`https://twitter.com/intent/tweet?text=${this.props.tweet}`,\"_blank\",`toolbar=yes,scrollbars=no,resizable=no,top=${y},left=${x},width=${w},height=${h}`);\n  }\n\n  render() {\n    return (\n        <Button\n          borderRadius={1}\n          mainColor={'#2aa6f2'}\n          contrastColor={'white'}\n          onClick={ e => { this.share() } }\n        >\n          <Flex flexDirection={'row'} alignItems={'center'} justifyContent={'center'}>\n            <Box className={styles.twitterIcon} />\n            <Text color={'white'} fontWeight={3} ml={2}>{ this.props.text ? this.props.text : 'Tweet' }</Text>\n          </Flex>\n        </Button>\n    );\n  }\n}\n\nexport default TwitterShareButton;\n","import React from \"react\";\nimport {\n  Text,\n  Modal,\n  Link,\n  Flex\n} from \"rimble-ui\";\nimport ModalCard from './ModalCard';\nimport TwitterShareButton from '../../TwitterShareButton/TwitterShareButton.js';\nimport Confetti from 'react-confetti/dist/react-confetti';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\n\nclass ShareModal extends React.Component {\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  componentWillMount() {\n    this.loadUtils();\n  }\n\n  componentDidMount() {\n    this.loadUtils();\n  }\n\n  componentDidUpdate() {\n    this.loadUtils();\n  }\n\n  closeModal = async (action) => {\n    const globalConfigs = this.functionsUtil.getGlobalConfigs();\n    // Send Google Analytics event\n    if (globalConfigs.analytics.google.events.enabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'Share',\n        eventAction: action,\n        eventLabel: 'ShareModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n    const tweet = window.escape(this.props.tweet);\n    const customText = {__html: this.props.text};\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        <ModalCard closeFunc={this.props.closeModal}>\n          {\n            this.props.confettiEnabled &&\n            <Confetti\n              style={{ position: 'fixed','zIndex':9999 }}\n              run={true}\n              recycle={true}\n              width={window.innerWidth}\n              height={window.innerHeight}\n            />\n          }\n          <ModalCard.Header title={this.props.title} icon={this.props.icon}></ModalCard.Header>\n          <ModalCard.Body>\n            <Flex my={3} width={1} flexDirection={'column'} mx={'auto'}>\n              <Text color={'dark-gray'} textAlign={'center'} fontSize={3} mb={2} dangerouslySetInnerHTML={customText}></Text>\n            </Flex>\n            <Flex mb={3} flexDirection={'column'} alignItems={'center'} justifyContent={'center'}>\n              <TwitterShareButton tweet={tweet} text={'Share now'} parent={'ShareModal'} />\n              <Link mt={2} onClick={ e => this.closeModal('continue_without_sharing') } hoverColor={'blue'}>continue without sharing</Link>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default ShareModal;","import Migrate from '../Migrate/Migrate';\nimport IconBox from '../IconBox/IconBox';\nimport React, { Component } from 'react';\nimport ExtLink from '../ExtLink/ExtLink';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport ConnectBox from '../ConnectBox/ConnectBox';\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport ShareModal from '../utilities/components/ShareModal';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport TransactionField from '../TransactionField/TransactionField';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Input, Box, Icon, Link, Checkbox, Tooltip, Image } from \"rimble-ui\";\n\nclass DepositRedeem extends Component {\n\n  state = {\n    txError:{},\n    tokenAPY:'-',\n    inputValue:{},\n    processing:{},\n    curveAPY:null,\n    totalAUM:null,\n    canRedeem:false,\n    maxSlippage:0.2,\n    canDeposit:false,\n    action:'deposit',\n    directMint:false,\n    activeModal:null,\n    showBuyFlow:false,\n    maxUnlentPerc:null,\n    unlentBalance:null,\n    tokenApproved:false,\n    skipMigration:false,\n    showRedeemFlow:false,\n    contractPaused:false,\n    buttonDisabled:false,\n    canRedeemCurve:false,\n    erc20ForwarderTx:null,\n    signedParameters:null,\n    minAmountForMint:null,\n    showMaxSlippage:false,\n    redeemGovTokens:false,\n    canDepositCurve:false,\n    fastBalanceSelector:{},\n    actionProxyContract:{},\n    migrationEnabled:false,\n    componentMounted:false,\n    curveTokenBalance:null,\n    redeemCurveEnabled:false,\n    depositCurveBalance:null,\n    depositCurveEnabled:true,\n    showAdvancedOptions:false,\n    erc20ForwarderContract:{},\n    depositCurveSlippage:null,\n    erc20ForwarderEnabled:true,\n    showETHWrapperEnabled:false,\n    metaTransactionsEnabled:true,\n    minAmountForMintReached:false,\n    loadingErc20ForwarderTx:false\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadProxyContracts();\n  }\n\n  async componentDidMount(){\n\n  }\n\n  setShowRedeemFlow = (showRedeemFlow) => {\n    this.setState({\n      showRedeemFlow\n    });\n  }\n\n  setShowBuyFlow = (showBuyFlow) => {\n    this.setState({\n      showBuyFlow\n    });\n  }\n\n  toggleShowAdvancedOptions = showAdvancedOptions => {\n    this.setState((prevState) => ({\n      showAdvancedOptions:!prevState.showAdvancedOptions\n    }));\n  }\n\n  toggleSkipMigration = skipMigration => {\n    this.setState({\n      skipMigration\n    });\n  }\n\n  toggleRedeemCurve = redeemCurveEnabled => {\n    this.setState({\n      redeemCurveEnabled\n    });\n  }\n\n  toggleDepositCurve = depositCurveEnabled => {\n    this.setState({\n      depositCurveEnabled\n    });\n  }\n\n  toggleShowETHWrapper = showETHWrapperEnabled => {\n    this.setState({\n      showETHWrapperEnabled\n    });\n  }\n\n  toggleSkipMint = (directMint) => {\n    this.setState({\n      directMint\n    });\n  }\n\n  toggleRedeemGovTokens = (redeemGovTokens) => {\n    this.setState({\n      redeemGovTokens\n    });\n  }\n\n  toggleErc20ForwarderEnabled = (erc20ForwarderEnabled) => {\n    const newState = {\n      erc20ForwarderEnabled\n    };\n\n    this.setState(newState, () => {\n      this.cancelTransaction();\n    });\n  }\n\n  toggleMetaTransactionsEnabled = (metaTransactionsEnabled) => {\n    this.setState({\n      metaTransactionsEnabled\n    });\n  }\n\n  async loadProxyContracts(){\n    const actions = ['deposit','redeem'];\n    const newState = {\n      actionProxyContract:{},\n      erc20ForwarderContract:{}\n    };\n\n    await this.functionsUtil.asyncForEach(actions,async (action) => {\n      let mintProxyContractInfo = null;\n      const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods',action,'erc20ForwarderEnabled']);\n\n      if (depositErc20ForwarderEnabled){\n        mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract','methods',action,'erc20ForwarderProxyContract','forwarder']);\n\n        await this.props.initContract(mintProxyContractInfo.name,mintProxyContractInfo.address,mintProxyContractInfo.abi);\n\n        // Init contract for erc20 forwarder\n        const erc20ForwarderContractInfo = this.functionsUtil.getGlobalConfig(['contract','methods',action,'erc20ForwarderProxyContract','tokens',this.props.selectedToken]);\n        if (erc20ForwarderContractInfo){\n          mintProxyContractInfo = erc20ForwarderContractInfo;\n          const erc20ForwarderContract = await this.props.initContract(erc20ForwarderContractInfo.name,erc20ForwarderContractInfo.address,erc20ForwarderContractInfo.abi);\n          newState.erc20ForwarderContract[action] = erc20ForwarderContractInfo;\n          newState.erc20ForwarderContract[action].contract = erc20ForwarderContract.contract;\n        }\n      }\n\n      if (!mintProxyContractInfo){\n        mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract','methods',action,'proxyContract']);\n      }\n\n      const hasProxyContract = mintProxyContractInfo && mintProxyContractInfo.enabled;\n      newState.actionProxyContract[action] = hasProxyContract ? mintProxyContractInfo : null;\n      if (hasProxyContract){\n        const proxyContract = await this.props.initContract(mintProxyContractInfo.name,mintProxyContractInfo.address,mintProxyContractInfo.abi);\n        newState.actionProxyContract[action].contract = proxyContract.contract;\n        newState.actionProxyContract[action].approved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,mintProxyContractInfo.address,this.props.account);\n      }\n    });\n\n    this.setState(newState);\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadAPY(){\n    const tokenAprs = await this.functionsUtil.getTokenAprs(this.props.tokenConfig);\n    if (tokenAprs && tokenAprs.avgApy !== null){\n      const tokenAPY = this.functionsUtil.BNify(tokenAprs.avgApy).toFixed(2);\n\n      let curveAPY = null;\n      if (this.state.canDepositCurve){\n        curveAPY = await this.functionsUtil.getCurveAPY();\n        // console.log('curveAPY',curveAPY);\n        if (curveAPY){\n          curveAPY = curveAPY.plus(tokenAPY);\n        }\n      }\n      this.setState({\n        tokenAPY,\n        curveAPY\n      });\n    }\n  }\n\n  getReferralAddress(){\n    let _referral = this.functionsUtil.getQueryStringParameterByName('_referral');\n    if (!this.functionsUtil.checkAddress(_referral)){\n      _referral = null;\n    }\n    return _referral;\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    if (this.props.tokenBalance === null){\n      return false;\n    }\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    const erc20ForwarderEnabledChanged = prevState.erc20ForwarderEnabled !==  this.state.erc20ForwarderEnabled;\n    const tokenBalanceChanged = prevProps.tokenBalance !== this.props.tokenBalance && this.props.tokenBalance !== null;\n\n    if (tokenChanged || tokenBalanceChanged || erc20ForwarderEnabledChanged){\n      await this.loadProxyContracts();\n      this.loadTokenInfo();\n      return false;\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n\n    if (actionChanged || fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const inputValueChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputValueChanged){\n      this.checkMinAmountForMint();\n    }\n\n    const redeemGovTokensChanged = prevState.redeemGovTokens !== this.state.redeemGovTokens;\n    if (redeemGovTokensChanged || actionChanged){\n      this.checkButtonDisabled();\n    }\n\n    const depositCurveChanged = prevState.depositCurveEnabled !== this.state.depositCurveEnabled;\n    const metaTransactionsChanged = prevState.metaTransactionsEnabled !== this.state.metaTransactionsEnabled;\n    if (metaTransactionsChanged || depositCurveChanged){\n      const tokenApproved = await this.checkTokenApproved();\n      this.setState({\n        tokenApproved\n      });\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateCurveSlippage();\n    }\n  }\n\n  async checkMinAmountForMint(){\n    let showPoolPerc = false;\n    let totalAUM = this.state.totalAUM;\n    let maxUnlentPerc = this.state.maxUnlentPerc;\n    const isRisk = this.props.selectedStrategy === 'risk';\n    const inputValue = this.functionsUtil.BNify(this.state.inputValue[this.state.action]);\n\n    if (inputValue.gt(this.props.tokenBalance)){\n      return false;\n    }\n\n    const convertedAmount = await this.functionsUtil.convertTokenBalance(inputValue,this.props.selectedToken,this.props.tokenConfig,isRisk);\n    let minAmountForMint = this.functionsUtil.BNify(this.functionsUtil.getGlobalConfig(['contract','methods','deposit','minAmountForMint']));\n    let minAmountForMintReached = convertedAmount.gte(minAmountForMint);\n\n    // Check token minAmountForMint\n    if (minAmountForMintReached){\n      if (this.props.tokenConfig.deposit && this.props.tokenConfig.deposit.minAmountForMint && convertedAmount.lt(this.props.tokenConfig.deposit.minAmountForMint)){\n        minAmountForMintReached = false;\n      } else {\n        [\n          maxUnlentPerc,\n          totalAUM\n        ] = await Promise.all([\n          maxUnlentPerc || this.functionsUtil.genericContractCall(this.props.tokenConfig.idle.token, 'maxUnlentPerc'),\n          totalAUM ||this.functionsUtil.loadAssetField('pool',this.props.selectedToken,this.props.tokenConfig,this.props.account)\n        ]);\n\n        if (maxUnlentPerc && totalAUM){\n          const depositPerc = inputValue.div(totalAUM).times(100);\n          maxUnlentPerc = this.functionsUtil.BNify(maxUnlentPerc);\n          const maxUnlentPercFormatted = maxUnlentPerc.div(1e3).times(2);\n          if (depositPerc.lt(maxUnlentPercFormatted)){\n            minAmountForMintReached = false;\n          } else if (totalAUM.times(maxUnlentPercFormatted.div(100)).gt(minAmountForMint)) {\n            showPoolPerc = true;\n            minAmountForMint = totalAUM.times(maxUnlentPercFormatted.div(100));\n          }\n        }\n      }\n    }\n\n    this.setState({\n      totalAUM,\n      showPoolPerc,\n      maxUnlentPerc,\n      minAmountForMint,\n      minAmountForMintReached\n    });\n  }\n\n  async calculateCurveSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,curvePoolContractInfo.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositCurveBalance = amount;\n        newState.depositCurveSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n      break;  \n      case 'redeem':\n        // newState.redeemBalance = amount;\n        // newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateCurveSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  checkUseProxyContract = () => {\n    const proxyContract = this.state.actionProxyContract[this.state.action];\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','metaTransactionsEnabled']) && this.state.metaTransactionsEnabled;\n    return ((depositErc20ForwarderEnabled || depositMetaTransactionsEnabled) && proxyContract && this.props.biconomy);\n  }\n\n  approveContract = async (callbackApprove,callbackReceiptApprove) => {\n    if (this.state.depositCurveEnabled){\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve','depositContract']);\n      this.functionsUtil.enableERC20(this.props.selectedToken,curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n    } else {\n      // Check Proxy Contract Approved for Deposit with Biconomy\n      const useProxyContract = this.checkUseProxyContract();\n      if (useProxyContract){\n        const proxyContract = this.state.actionProxyContract[this.state.action];\n        this.functionsUtil.enableERC20(this.props.selectedToken,proxyContract.address,callbackApprove,callbackReceiptApprove);\n      } else {\n        this.functionsUtil.enableERC20(this.props.selectedToken,this.props.tokenConfig.idle.address,callbackApprove,callbackReceiptApprove);\n      }\n    }\n  }\n\n  checkTokenApproved = async () => {\n    let tokenApproved = false;\n    if (this.state.depositCurveEnabled){\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve','depositContract']);\n      tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,curveDepositContract.address,this.props.account);\n    } else {\n      // Check Proxy Contract Approved for Deposit with Biconomy\n      const useProxyContract = this.checkUseProxyContract();\n      if (useProxyContract){\n        // Check for Permit Deposit\n        const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n        if (depositErc20ForwarderEnabled){\n          const permitEnabled = this.functionsUtil.getGlobalConfig(['permit',this.props.selectedToken]);\n          if (permitEnabled){\n            return true;\n          }\n        }\n        // Check proxy contract approved\n        const proxyContract = this.state.actionProxyContract[this.state.action];\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,proxyContract.address,this.props.account);\n        // console.log('tokenApproved 1',tokenApproved);\n      } else {\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,this.props.tokenConfig.idle.address,this.props.account);\n        // console.log('tokenApproved 2',tokenApproved);\n      }\n    }\n\n    return tokenApproved;\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = await this.checkTokenApproved();\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.props.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.approveContract(callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  loadTokenInfo = async () => {\n\n    if (this.state.componentMounted){\n      this.setState({\n        componentMounted:false\n      });\n    }\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token]);\n    const curveTokenEnabled = curveConfig.enabled && curveTokenConfig && curveTokenConfig.enabled;\n\n    const [\n      tokenApproved,\n      contractPaused,\n      curveSwapContract,\n      curveDepositContract,\n      unlentBalance,\n      {migrationEnabled},\n      curveTokenBalance,\n    ] = await Promise.all([\n      this.checkTokenApproved(),\n      this.functionsUtil.checkContractPaused(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract(),\n      this.functionsUtil.getUnlentBalance(this.props.tokenConfig),\n      this.functionsUtil.checkMigration(this.props.tokenConfig,this.props.account),\n      curveTokenEnabled ? this.functionsUtil.getCurveTokenBalance(this.props.account) : null\n    ]);\n\n    const canDeposit = this.props.tokenBalance && this.functionsUtil.BNify(this.props.tokenBalance).gt(0);\n    const canRedeem = this.props.idleTokenBalance && this.functionsUtil.BNify(this.props.idleTokenBalance).gt(0);\n\n    const canDepositCurve = curveTokenEnabled && canDeposit;\n    const depositCurveEnabled = canDepositCurve;\n\n    const showETHWrapperEnabled = this.props.selectedToken === 'WETH' && (this.state.showETHWrapperEnabled || !canDeposit);\n\n    const canRedeemCurve = curveTokenEnabled && curveTokenBalance && curveTokenBalance.gt(0);\n    const redeemCurveEnabled = canRedeemCurve;\n\n    const newState = {...this.state};\n\n    // Check curve deposit enabled\n    if (newState.depositCurveEnabled && !curveTokenEnabled){\n      newState.depositCurveEnabled = false;\n    }\n    \n    newState.canRedeem = canRedeem;\n    newState.canDeposit = canDeposit;\n    newState.unlentBalance = unlentBalance;\n    newState.tokenApproved = tokenApproved;\n    newState.contractPaused = contractPaused;\n    newState.canRedeemCurve = canRedeemCurve;\n    newState.canDepositCurve = canDepositCurve;\n    newState.migrationEnabled = migrationEnabled;\n    newState.curveTokenBalance = curveTokenBalance;\n    newState.curveSwapContract = curveSwapContract;\n    newState.redeemCurveEnabled = redeemCurveEnabled;\n    newState.depositCurveEnabled = depositCurveEnabled;\n    newState.curveDepositContract = curveDepositContract;\n    newState.showETHWrapperEnabled = showETHWrapperEnabled;\n\n    newState.txError = {\n      redeem:false,\n      deposit:false\n    };\n    newState.processing = {\n      redeem:{\n        txHash:null,\n        loading:false\n      },\n      deposit:{\n        txHash:null,\n        loading:false\n      },\n      approve:{\n        txHash:null,\n        loading:false\n      },\n      boost:{\n        txHash:null,\n        loading:false\n      }\n    };\n    newState.inputValue = {\n      boost:null,\n      redeem:null,\n      deposit:null\n    };\n    newState.fastBalanceSelector = {\n      boost:null,\n      redeem:null,\n      deposit:null\n    };\n\n    newState.componentMounted = true;\n\n    this.setState(newState,() => {\n      this.checkAction();\n      this.loadAPY();\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      erc20ForwarderTx:null,\n      loadingErc20ForwarderTx:false,\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const redeemGovTokens = this.state.redeemGovTokens;\n    const inputValue = this.state.inputValue[this.state.action];\n    const selectedPercentage = this.getFastBalanceSelector();\n\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','metaTransactionsEnabled']) && this.state.metaTransactionsEnabled;\n\n    let loading = true;\n\n    switch (this.state.action){\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        if (!this.state.tokenApproved){\n          return this.approveToken();\n        }\n\n        if (localStorage){\n          this.functionsUtil.setLocalStorage('redirectToFundsAfterLogged',0);\n        }\n\n        this.setState({\n          lendingProcessing: this.props.account,\n          lendAmount: '',\n          genericError: '',\n        });\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.props.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if ((this.state.metaTransactionsEnabled || this.state.erc20ForwarderEnabled) && txError){\n            this.setState({\n              erc20ForwarderTx:null,\n              loadingErc20ForwarderTx:false,\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n        const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token,'enabled']);\n\n        // Curve Deposit\n        if (curveTokenEnabled && this.state.depositCurveEnabled){\n\n          const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,curvePoolContractInfo.decimals);\n\n          const amounts = await this.functionsUtil.getCurveAmounts(this.props.tokenConfig.idle.token,tokensToDeposit);\n          let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n          if (this.state.maxSlippage){\n            minMintAmount = this.functionsUtil.BNify(minMintAmount);\n            minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n            minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n          }\n          \n          const depositParams = [amounts,minMintAmount];\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, callbackDeposit, callbackReceiptDeposit);\n        // Normal Deposit\n        } else {\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n\n          // const gasLimitDeposit = this.functionsUtil.BNify(1000000);\n          let depositParams = [];\n\n          // Use Proxy Contract if enabled\n          const useProxyContract = this.checkUseProxyContract();\n          if (useProxyContract){\n            const mintProxyContractInfo = this.state.actionProxyContract[this.state.action];\n            const mintProxyContract = mintProxyContractInfo.contract;\n\n            // Use Meta-Transactions\n            if (depositMetaTransactionsEnabled){\n              depositParams = [tokensToDeposit, this.props.tokenConfig.idle.address];\n              const functionCall = mintProxyContract.methods[mintProxyContractInfo.function](...depositParams);\n              const functionSignature = functionCall.encodeABI();\n              // console.log('mintProxyContract',mintProxyContractInfo.function,depositParams);\n              // if (this.state.metaTransactionsEnabled){\n              contractSendResult = await this.functionsUtil.sendBiconomyTxWithPersonalSign(mintProxyContractInfo.name, functionSignature, callbackDeposit, callbackReceiptDeposit);\n              // } else {\n              //   contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n              // }\n            // Use Erc20 Forwarder\n            } else if (depositErc20ForwarderEnabled){\n              // Build ERC20 Forwarder Tx\n              if (!this.state.erc20ForwarderTx){\n                this.setState({\n                  txError:{\n                    [this.state.action]:false\n                  },\n                  loadingErc20ForwarderTx:true\n                }, async () => {\n                  const erc20ForwarderContract = this.state.erc20ForwarderContract[this.state.action];\n                  const signedParameters = await this.functionsUtil.signPermit(this.props.selectedToken, this.props.account, erc20ForwarderContract.name);\n                  console.log('signedParameters',signedParameters);\n                  if (signedParameters){\n                    const { expiry, nonce, r, s, v } = signedParameters;\n                    depositParams = [tokensToDeposit, parseInt(nonce), expiry, v, r, s];\n\n                    console.log('permitAndDeposit',mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams);\n\n                    // contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n\n                    const permitType = erc20ForwarderContract.permitType;\n                    const functionCall = erc20ForwarderContract.contract.methods[erc20ForwarderContract.function](...depositParams);\n                    const functionSignature = functionCall.encodeABI();\n\n                    // console.log('buildBiconomyErc20ForwarderTx 1',permitType, erc20ForwarderContract.function, depositParams, functionCall, functionSignature);\n\n                    const gasLimit = 1000000;//await functionCall.estimateGas({from: this.props.account}); // 5000000;\n\n                    console.log('buildBiconomyErc20ForwarderTx',mintProxyContractInfo.name, depositParams, functionSignature, gasLimit);\n\n                    // debugger;\n\n                    const erc20ForwarderTx = await this.functionsUtil.buildBiconomyErc20ForwarderTx(erc20ForwarderContract.name, this.props.tokenConfig.address, permitType, functionSignature, gasLimit);\n                    console.log('erc20ForwarderTx',erc20ForwarderTx);\n                    return this.setState({\n                      erc20ForwarderTx,\n                      loadingErc20ForwarderTx:false\n                    });\n                  } else {\n                    return this.setState((prevState) => ({\n                      processing: {\n                        ...prevState.processing,\n                        [this.state.action]:{\n                          txHash:null,\n                          loading:false\n                        }\n                      },\n                      signedParameters:null,\n                      erc20ForwarderTx:null,\n                      loadingErc20ForwarderTx:false\n                    }));\n                  }\n                });\n              // Send ERC20 Forwarder Tx\n              } else {\n                this.setState({\n                  txError:{\n                    [this.state.action]:false\n                  },\n                  loadingErc20ForwarderTx:true\n                }, async () => {\n                  const metaInfo = {};\n                  const permitOptions = {};\n                  const erc20ForwarderContract = this.state.erc20ForwarderContract[this.state.action];\n                  const erc20ForwarderBaseContract = this.functionsUtil.getGlobalConfig(['contract','methods',this.state.action,'erc20ForwarderProxyContract','forwarder']);\n\n                  const signedParameters = await this.functionsUtil.signPermit(this.props.selectedToken, this.props.account, erc20ForwarderBaseContract.name, 1);\n                  if (signedParameters){\n\n                    this.setState({\n                      signedParameters\n                    });\n\n                    const { expiry, nonce, r, s, v } = signedParameters;\n                    permitOptions.v = v;\n                    permitOptions.r = r;\n                    permitOptions.s = s;\n                    permitOptions.value = 0; //in case of DAI passing dummy value for the sake of struct (similar to token address in EIP2771)\n                    permitOptions.allowed = true;\n                    permitOptions.expiry = parseInt(expiry);\n                    permitOptions.holder = this.props.account;\n                    permitOptions.nonce = parseInt(nonce.toString());\n                    permitOptions.spender = erc20ForwarderBaseContract.address;\n\n                    metaInfo.permitData = permitOptions;\n                    metaInfo.permitType = erc20ForwarderContract.permitType;\n\n                    console.log('sendBiconomyTxWithErc20Forwarder',permitOptions,metaInfo);\n\n                    await this.functionsUtil.asyncTimeout(200);\n\n                    contractSendResult = await this.functionsUtil.sendBiconomyTxWithErc20Forwarder(this.state.erc20ForwarderTx.request, metaInfo, callbackDeposit, callbackReceiptDeposit);\n\n                    this.setState({\n                      erc20ForwarderTx:null,\n                      loadingErc20ForwarderTx:false\n                    });\n                  } else {\n                    return this.setState((prevState) => ({\n                      processing: {\n                        ...prevState.processing,\n                        [this.state.action]:{\n                          txHash:null,\n                          loading:false\n                        }\n                      },\n                      signedParameters:null,\n                      erc20ForwarderTx:null,\n                      loadingErc20ForwarderTx:false\n                    }));\n                  }\n                });\n              }\n            }\n          // Use main contract if no proxy contract exists\n          } else {\n            let _skipMint = !this.state.directMint && this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMint']);\n            _skipMint = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : _skipMint;\n\n            // Check if deposited amount is greated that general lower limit for direct mint\n            if (_skipMint && this.state.minAmountForMintReached){\n              _skipMint = false;\n            }\n\n            const _referral = this.getReferralAddress() || '0x0000000000000000000000000000000000000000';\n            depositParams = [tokensToDeposit, _skipMint, _referral];\n            // console.log('depositParams',depositParams);\n            contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'mintIdleToken', depositParams, callbackDeposit, callbackReceiptDeposit);\n          }\n        }\n      break;\n      case 'redeem':\n\n        if (redeemGovTokens){\n          const callbackRedeem = (tx,error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_gov`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: 0\n            };\n\n            if (error){\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error'){\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  txHash:null,\n                  loading:false\n                }\n              }\n            }));\n\n            if (txSucceeded){\n              this.setState((prevState) => ({\n                inputValue:{\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'redeemIdleToken', [0], callbackRedeem, callbackReceiptRedeem);\n          \n        } else {\n\n          if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n            return false;\n          }\n\n          const txData = {\n            value:this.functionsUtil.BNify(inputValue)\n          };\n\n          let idleTokenToRedeem = null;\n          if (selectedPercentage){\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage);\n          } else {\n            const idleTokenPriceWithFee = await this.functionsUtil.getIdleTokenPriceWithFee(this.props.tokenConfig,this.props.account)\n            idleTokenToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals)).div(idleTokenPriceWithFee);\n          }\n\n          // Check if idleTokens to redeem > idleToken balance\n          if (idleTokenToRedeem.gt(this.functionsUtil.BNify(this.props.idleTokenBalance))){\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance);\n          }\n\n          // Normalize number\n          idleTokenToRedeem = this.functionsUtil.normalizeTokenAmount(idleTokenToRedeem,18);\n\n          if (!idleTokenToRedeem){\n            return false;\n          }\n\n          const callbackRedeem = (tx,error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_partial`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: parseInt(inputValue)\n            };\n\n            if (error){\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error'){\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  txHash:null,\n                  loading:false\n                }\n              }\n            }));\n\n            if (txSucceeded){\n              this.setState((prevState) => ({\n                inputValue:{\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          let redeemParams = [idleTokenToRedeem];\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'redeemIdleToken', redeemParams, callbackRedeem, callbackReceiptRedeem, txData);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    if (contractSendResult !== false || loading !== this.state.processing[this.state.action].loading){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  showMaxSlippage = () => {\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  checkAction = () => {\n    let action = this.state.action;\n\n    switch(action){\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = 'deposit';\n        }\n      break;\n      default:\n      break;\n    }\n\n    if (action !== this.state.action){\n      this.setState({\n        action\n      },() => {\n        this.checkButtonDisabled();\n      });\n    } else {\n      this.checkButtonDisabled();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && amount.gt(this.props.tokenBalance));\n      break;\n      case 'redeem':\n        buttonDisabled = !this.state.canRedeemCurve && !this.state.redeemGovTokens && ( buttonDisabled || (amount && amount.gt(this.props.redeemableBalance)) );\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.props.tokenBalance ? this.functionsUtil.BNify(this.props.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        amount = this.props.redeemableBalance ? this.functionsUtil.BNify(this.props.redeemableBalance).times(selectedPercentage) : null;\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  changeInputValue = async (e) => {\n    if (!this.state.action){\n      return false;\n    }\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem && !this.state.canRedeemCurve){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const viewOnly = this.props.connectorName === 'custom';\n\n    const govTokensDisabled = this.props.tokenConfig.govTokensDisabled;\n    const govTokensEnabled = this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'govTokensEnabled']);\n    const skipMintForDepositEnabled = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : true;\n    const skipMintCheckboxEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMintCheckboxEnabled']) && skipMintForDepositEnabled;\n\n    const redeemGovTokenEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','redeemGovTokens','enabled']) && !govTokensDisabled && govTokensEnabled;\n    const redeemGovTokens = redeemGovTokenEnabled && this.state.redeemGovTokens && this.state.action === 'redeem';\n\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderEnabled']);\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','metaTransactionsEnabled']);\n\n    // Biconomy Start\n    const metaTransactionsAvailable = depositMetaTransactionsEnabled && this.props.biconomy && this.state.actionProxyContract[this.state.action];\n    const useMetaTx = metaTransactionsAvailable && this.state.metaTransactionsEnabled;\n\n    const erc20ForwarderEnabled = depositErc20ForwarderEnabled && this.props.biconomy && this.props.erc20ForwarderClient && this.state.actionProxyContract[this.state.action];\n\n    // console.log(erc20ForwarderEnabled,depositErc20ForwarderEnabled,this.props.biconomy,this.props.erc20ForwarderClient,this.state.actionProxyContract[this.state.action]);\n    // Biconomy End\n\n    const totalBalance = this.state.action === 'deposit' ? this.props.tokenBalance : this.props.redeemableBalance;\n    const migrateText = this.state.migrationEnabled && this.props.tokenConfig.migration.message !== undefined ? this.props.tokenConfig.migration.message : null;\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token,'enabled']);\n\n    const depositCurve = curveTokenEnabled && this.state.depositCurveEnabled && this.state.action === 'deposit';\n\n    const showDepositOptions = this.state.action === 'deposit' && !this.state.contractPaused && (curveTokenEnabled || this.state.tokenApproved);\n\n    const showDepositCurve = showDepositOptions && curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canDepositCurve && this.state.action === 'deposit';\n    const showRedeemCurve = curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canRedeemCurve && this.state.action === 'redeem';\n\n    const showRedeemFlow = this.state.canRedeem && (!this.state.redeemCurveEnabled || this.state.showRedeemFlow);\n\n    const showCurveSlippage = depositCurve && this.state.depositCurveSlippage && this.state.depositCurveBalance && !this.state.buttonDisabled;\n\n    const showRebalanceOption = showDepositOptions && this.state.canDeposit && skipMintCheckboxEnabled && this.state.action === 'deposit';\n    const showAdvancedDepositOptions = showDepositCurve || showRebalanceOption;\n\n    const batchDepositInfo = this.functionsUtil.getGlobalConfig(['tools','batchDeposit']);\n    const batchDepositEnabled = batchDepositInfo.enabled && typeof batchDepositInfo.props.availableTokens[this.props.tokenConfig.idle.token] !== 'undefined';\n    const batchDepositDepositEnabled = batchDepositInfo.depositEnabled;\n\n    const showBatchDeposit = !useMetaTx && batchDepositEnabled && batchDepositDepositEnabled && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    const ethWrapperInfo = this.functionsUtil.getGlobalConfig(['tools','ethWrapper']);\n    const ETHWrapperComponent = ethWrapperInfo.subComponent;\n    const showETHWrapper = this.props.selectedToken === 'WETH' && ethWrapperInfo.enabled && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    const canPerformAction = /*!depositCurve && !this.state.redeemCurveEnabled && */((this.state.action === 'deposit' && this.state.canDeposit) || (this.state.action === 'redeem' && this.state.canRedeem) || redeemGovTokens) && (!this.state.showETHWrapperEnabled || this.state.action === 'redeem');\n    const showActionFlow = !redeemGovTokens && canPerformAction;\n\n    const showBuyFlow = this.state.componentMounted && (!showDepositCurve || this.state.showBuyFlow) && !this.state.depositCurveEnabled && this.state.tokenApproved && !this.state.contractPaused && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.action === 'deposit' && !this.state.canDeposit && !this.state.showETHWrapperEnabled;\n\n    const _referral = this.getReferralAddress();\n    const showReferral = _referral && this.state.action === 'deposit' && showActionFlow && !showBuyFlow;\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          <Box\n            width={1}\n          >\n            <Text mb={1}>\n              Select your asset:\n            </Text>\n            <AssetSelector\n              {...this.props}\n            />\n          </Box>\n          {\n            viewOnly ? (\n              <IconBox\n                cardProps={{\n                  mt:3\n                }}\n                icon={'Visibility'}\n                text={'You are using Idle in \"Read-Only\" mode.<br />Logout and connect with your wallet to interact.'}\n              />\n            ) : (\n              <Migrate\n                {...this.props}\n                migrateTextBefore={migrateText}\n                migrateText={migrateText !== null ? '' : null}\n                toggleSkipMigration={this.toggleSkipMigration.bind(this)}\n              >\n                {\n                  !this.props.account ? (\n                    <ConnectBox\n                      {...this.props}\n                    />\n                  ) : this.state.componentMounted ? (\n                    this.state.action && (\n                      <Box\n                        width={1}\n                      >\n                        <Flex\n                          mt={2}\n                          flexDirection={'column'}\n                        >\n                          <Text mb={2}>\n                            Choose the action:\n                          </Text>\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'space-between'}\n                          >\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                width:0.48,\n                                onMouseDown:() => {\n                                  this.setAction('deposit');\n                                }\n                              }}\n                              isInteractive={true}\n                              isActive={ this.state.action === 'deposit' }\n                            >\n                              <Flex\n                                my={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <TransactionField\n                                  transaction={{\n                                    action:'deposit'\n                                  }}\n                                  fieldInfo={{\n                                    name:'icon',\n                                    props:{\n                                      mr:3\n                                    }\n                                  }}\n                                />\n                                <Text\n                                  fontSize={3}\n                                  fontWeight={3}\n                                >\n                                  Deposit\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                width:0.48,\n                                onMouseDown:() => {\n                                  this.setAction('redeem');\n                                }\n                              }}\n                              isInteractive={true}\n                              isActive={ this.state.action === 'redeem' }\n                              isDisabled={ !this.state.canRedeem && !this.state.canRedeemCurve }\n                            >\n                              <Flex\n                                my={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <TransactionField\n                                  transaction={{\n                                    action:'redeem'\n                                  }}\n                                  fieldInfo={{\n                                    name:'icon',\n                                    props:{\n                                      mr:3\n                                    }\n                                  }}\n                                />\n                                <Text\n                                  fontSize={3}\n                                  fontWeight={3}\n                                >\n                                  Redeem\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          </Flex>\n                        </Flex>\n                        {\n                          showAdvancedDepositOptions ? (\n                            <DashboardCard\n                              cardProps={{\n                                pt:2,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                                pb:this.state.showAdvancedOptions ? 3 : 2,\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <Link\n                                  ml={1}\n                                  mainColor={'primary'}\n                                  hoverColor={'primary'}\n                                  onClick={this.toggleShowAdvancedOptions}\n                                >\n                                  { this.state.showAdvancedOptions ? 'Hide' : 'Show' } advanced options\n                                </Link>\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={this.state.showAdvancedOptions ? 'ArrowDropUp' : 'ArrowDropDown'}\n                                />\n                              </Flex>\n                              {\n                                this.state.showAdvancedOptions &&\n                                  <Flex\n                                    mt={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      showDepositCurve && \n                                        <Flex\n                                          alignItems={'center'}\n                                          justifyContent={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            disabled={this.state.directMint}\n                                            label={`Deposit in the Curve Pool`}\n                                            checked={this.state.depositCurveEnabled}\n                                            onChange={ e => this.toggleDepositCurve(e.target.checked) }\n                                          />\n                                          <Link\n                                            mainColor={'primary'}\n                                            hoverColor={'primary'}\n                                            onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                          >\n                                            (read more)\n                                          </Link>\n                                        </Flex>\n                                    }\n                                    {\n                                      showRebalanceOption && \n                                        <Flex\n                                          alignItems={'center'}\n                                          justifyContent={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            label={`Rebalance the pool`}\n                                            checked={this.state.directMint}\n                                            disabled={this.state.depositCurveEnabled}\n                                            onChange={ e => this.toggleSkipMint(e.target.checked) }\n                                          />\n                                          <Tooltip\n                                            placement={'bottom'}\n                                            message={this.functionsUtil.getGlobalConfig(['messages','directMint'])}\n                                          >\n                                            <Icon\n                                              size={'1em'}\n                                              color={'cellTitle'}\n                                              name={\"InfoOutline\"}\n                                            />\n                                          </Tooltip>\n                                        </Flex>\n                                    }\n                                  </Flex>\n                              }\n                            </DashboardCard>\n                          ) : (\n                            <Flex\n                              width={1}\n                              flexDirection={'column'}\n                            >\n                              {\n                                showDepositCurve && (\n                                  <Flex\n                                    width={1}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <DashboardCard\n                                      isRainbow={true}\n                                      cardProps={{\n                                        py:3,\n                                        px:2,\n                                        mt:3,\n                                        display:'flex',\n                                        alignItems:'center',\n                                        flexDirection:'column',\n                                        justifyContent:'center',\n                                      }}\n                                    >\n                                      <Flex\n                                        width={1}\n                                        alignItems={'center'}\n                                        flexDirection={'column'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Image\n                                          height={'1.8em'}\n                                          src={curveConfig.params.image}\n                                        />\n                                        <Text\n                                          mt={2}\n                                          px={2}\n                                          fontSize={1}\n                                          color={'dark-gray'}\n                                          textAlign={'center'}\n                                        >\n                                          Deposit your tokens in the Curve Pool and boost your APY up to {this.state.curveAPY ? this.state.curveAPY.toFixed(2) : '-'}%.\n                                          <Link\n                                            ml={1}\n                                            mainColor={'primary'}\n                                            hoverColor={'primary'}\n                                            onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                          >\n                                            Read More\n                                          </Link>\n                                        </Text>\n                                        <Checkbox\n                                          mt={2}\n                                          required={false}\n                                          label={`Deposit in Curve`}\n                                          checked={this.state.depositCurveEnabled}\n                                          onChange={ e => this.toggleDepositCurve(e.target.checked) }\n                                        />\n                                      </Flex>\n                                    </DashboardCard>\n                                    {\n                                      (!this.state.showBuyFlow && !this.state.depositCurveEnabled && !this.state.canDeposit) &&\n                                        <Link\n                                          textAlign={'center'}\n                                          hoverColor={'primary'}\n                                          onClick={ e => this.setShowBuyFlow(true) }\n                                        >\n                                          I just want to deposit more {this.props.selectedToken}\n                                        </Link>\n                                    }\n                                  </Flex>\n                                )\n                              }\n                              {\n                                showRebalanceOption && (\n                                  <DashboardCard\n                                    cardProps={{\n                                      py:3,\n                                      px:2,\n                                      mt:3,\n                                      display:'flex',\n                                      alignItems:'center',\n                                      flexDirection:'column',\n                                      justifyContent:'center',\n                                    }}\n                                  >\n                                    <Flex\n                                      width={1}\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        color={'cellText'}\n                                        name={'InfoOutline'}\n                                      />\n                                      <Text\n                                        mt={1}\n                                        px={2}\n                                        fontSize={1}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        By checking this flag you can rebalance the pool and help all users gain an additional APR\n                                      </Text>\n                                    </Flex>\n                                    <Checkbox\n                                      mt={2}\n                                      required={false}\n                                      label={`Rebalance the pool`}\n                                      checked={this.state.directMint}\n                                      onChange={ e => this.toggleSkipMint(e.target.checked) }\n                                    />\n                                  </DashboardCard>\n                                )\n                              }\n                            </Flex>\n                          )\n                        }\n                        {\n                          showReferral && (\n                            <DashboardCard\n                              cardProps={{\n                                py:3,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'Share'}\n                                  color={'cellText'}\n                                />\n                                <Text\n                                  mt={1}\n                                  px={2}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  You are depositing with the following referral address:\n                                </Text>\n                                <Text\n                                  mt={1}\n                                  px={2}\n                                  fontSize={1}\n                                  fontWeight={500}\n                                  textAlign={'center'}\n                                  color={this.props.theme.colors.transactions.status.completed}\n                                >\n                                  {_referral}\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          (metaTransactionsAvailable && !showBuyFlow && !this.state.contractPaused) ? (\n                            <DashboardCard\n                              cardProps={{\n                                py:3,\n                                px:2,\n                                my:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              {\n                                this.state.metaTransactionsEnabled && this.state.txError[this.state.action] && this.state.actionProxyContract[this.state.action].approved ? (\n                                  <Flex\n                                    width={1}\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <Icon\n                                      size={'1.8em'}\n                                      name={'Warning'}\n                                      color={'cellText'}\n                                    />\n                                    <Text\n                                      mt={1}\n                                      fontSize={1}\n                                      color={'cellText'}\n                                      textAlign={'center'}\n                                    >\n                                      Seems like you are having some trouble with Meta-Transactions... Disable them by unchecking the box below and try again!\n                                    </Text>\n                                  </Flex>\n                                ) : this.functionsUtil.getWalletProvider() === 'WalletConnect' && this.state.metaTransactionsEnabled ? (\n                                  <Flex\n                                    width={1}\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <Icon\n                                      size={'1.8em'}\n                                      name={'Warning'}\n                                      color={'cellText'}\n                                    />\n                                    <Text\n                                      mt={1}\n                                      fontSize={1}\n                                      color={'cellText'}\n                                      textAlign={'center'}\n                                    >\n                                      Please disable Meta-Transactions if you are using Argent Wallet to avoid failed transactions!\n                                    </Text>\n                                  </Flex>\n                                ) : (\n                                  <Text\n                                    mt={1}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    Meta-Transactions are {this.state.metaTransactionsEnabled ? 'enabled' : 'disabled'} for {this.state.action}s!<br />\n                                    {\n                                      this.state.metaTransactionsEnabled && !this.state.actionProxyContract[this.state.action].approved && `Please either enable the Smart-Contract to enjoy gas-less ${this.state.action} or just disable meta-tx.`\n                                    }\n                                  </Text>\n                                )\n                              }\n                              <Checkbox\n                                mt={2}\n                                required={false}\n                                checked={this.state.metaTransactionsEnabled}\n                                onChange={ e => this.toggleMetaTransactionsEnabled(e.target.checked) }\n                                label={`${this.functionsUtil.capitalize(this.state.action)} with Meta-Transaction`}\n                              />\n                            </DashboardCard>\n                          ) : (erc20ForwarderEnabled && !showBuyFlow && !this.state.contractPaused) && (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                my:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              <Text\n                                mb={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                How do you prefer to pay gas fees for this {this.state.action}?\n                              </Text>\n                              <Flex\n                                width={[1,0.7]}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'space-between'}\n                              >\n                                <CardIconButton\n                                  {...this.props}\n                                  cardProps={{\n                                    py:2,\n                                    px:[2,3],\n                                    width:0.48\n                                  }}\n                                  textProps={{\n                                    ml:[1,2],\n                                  }}\n                                  text={this.props.selectedToken}\n                                  isActive={this.state.erc20ForwarderEnabled}\n                                  imageProps={{\n                                    height:this.props.isMobile ? '1.4em' : '1.8em',\n                                    width:this.props.isMobile ? '1.4em' : '1.8em'\n                                  }}\n                                  image={`/images/tokens/${this.props.selectedToken}.svg`}\n                                  handleClick={e => this.toggleErc20ForwarderEnabled(true)}\n                                />\n                                <CardIconButton\n                                  {...this.props}\n                                  cardProps={{\n                                    py:2,\n                                    px:[2,3],\n                                    width:0.48\n                                  }}\n                                  textProps={{\n                                    ml:[1,2],\n                                  }}\n                                  text={'ETH'}\n                                  isActive={!this.state.erc20ForwarderEnabled}\n                                  imageProps={{\n                                    height:this.props.isMobile ? '1.4em' : '1.8em',\n                                    width:this.props.isMobile ? '1.4em' : '1.8em'\n                                  }}\n                                  image={`/images/tokens/ETH.svg`}\n                                  handleClick={e => this.toggleErc20ForwarderEnabled(false)}\n                                />\n                              </Flex>\n                              {\n                                this.state.txError[this.state.action] && (\n                                  <Text\n                                    mt={2}\n                                    fontSize={1}\n                                    color={'red'}\n                                    textAlign={'center'}\n                                  >\n                                    The meta-transaction cannot be executed, select ETH and try again.\n                                  </Text>\n                                )\n                              }\n                              <Text\n                                mt={2}\n                                fontSize={'11px'}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                Powered by <ExtLink fontSize={'11px'} href={'https://biconomy.io'}>Biconomy</ExtLink>\n                              </Text>\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          (this.state.minAmountForMintReached && this.state.action === 'deposit') && (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                mt:3\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={'InfoOutline'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  By depositing more than {this.functionsUtil.formatMoney(this.state.minAmountForMint)}$ { this.state.showPoolPerc ? `(${this.state.minAmountForMint.div(this.state.totalAUM).times(100).toFixed(0)}% of the pool)` : null } the pool will be automatically rebalanced, gas cost may be higher.\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          showBatchDeposit ? (\n                            <Flex\n                              p={2}\n                              mt={3}\n                              width={1}\n                              borderRadius={2}\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              justifyContent={'center'}\n                              backgroundColor={'DashboardCard'}\n                              border={`1px solid ${this.props.theme.colors.primary}`}\n                            >\n                              <Link\n                                textAlign={'center'}\n                                hoverColor={'primary'}\n                                href={`/#/dashboard/tools/${batchDepositInfo.route}/${this.props.tokenConfig.idle.token}`}\n                              >\n                                Gas fees too high? Save gas with our Batch Deposit!\n                              </Link>\n                              <Icon\n                                ml={1}\n                                size={'1em'}\n                                color={'primary'}\n                                name={'LocalGasStation'}\n                              />\n                            </Flex>\n                          ) : showETHWrapper && (\n                            <Flex\n                              width={1}\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <DashboardCard\n                                cardProps={{\n                                  py:3,\n                                  px:2,\n                                  mt:3,\n                                  display:'flex',\n                                  alignItems:'center',\n                                  flexDirection:'column',\n                                  justifyContent:'center',\n                                  pb:this.state.showAdvancedOptions ? 3 : 2,\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  justifyContent={'row'}\n                                >\n                                  <Checkbox\n                                    required={false}\n                                    checked={this.state.showETHWrapperEnabled}\n                                    label={`Convert your ETH to WETH`}\n                                    onChange={ e => this.toggleShowETHWrapper(e.target.checked) }\n                                  />\n                                </Flex>\n                              </DashboardCard>\n                              {\n                                this.state.showETHWrapperEnabled && \n                                  <ETHWrapperComponent\n                                    {...this.props}\n                                    action={'wrap'}\n                                    fullWidth={true}\n                                    toolProps={ethWrapperInfo.props}\n                                  />\n                              }\n                            </Flex>\n                          )\n                        }\n                        {\n                          showRedeemCurve && this.state.canRedeem && (\n                            <Flex\n                              width={1}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <DashboardCard\n                                isRainbow={true}\n                                cardProps={{\n                                  py:3,\n                                  px:2,\n                                  mt:3,\n                                  display:'flex',\n                                  alignItems:'center',\n                                  flexDirection:'column',\n                                  justifyContent:'center',\n                                }}\n                              >\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Image\n                                    height={'1.8em'}\n                                    src={curveConfig.params.image}\n                                  />\n                                  <Text\n                                    mt={2}\n                                    px={2}\n                                    fontSize={1}\n                                    color={'dark-gray'}\n                                    textAlign={'center'}\n                                  >\n                                    Redeem your tokens from the Curve Pool.\n                                    <Link\n                                      ml={1}\n                                      mainColor={'primary'}\n                                      hoverColor={'primary'}\n                                      onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                    >\n                                      Read More\n                                    </Link>\n                                  </Text>\n                                  {\n                                    this.state.canRedeem &&\n                                      <Checkbox\n                                        mt={2}\n                                        required={false}\n                                        label={`Redeem from Curve`}\n                                        checked={this.state.redeemCurveEnabled}\n                                        onChange={ e => this.toggleRedeemCurve(e.target.checked) }\n                                      />\n                                  }\n                                </Flex>\n                              </DashboardCard>\n                              {\n                                this.canRedeem &&\n                                  <Link\n                                    textAlign={'center'}\n                                    hoverColor={'primary'}\n                                    onClick={ e => this.setShowRedeemFlow(true) }\n                                  >\n                                    I just want to redeem my {this.props.selectedToken}\n                                  </Link>\n                              }\n                            </Flex>\n                          )\n                        }\n                        {\n                          (this.state.action === 'redeem' && this.state.unlentBalance && showRedeemFlow) &&\n                            <DashboardCard\n                              cardProps={{\n                                py:2,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={'LocalGasStation'}\n                                />\n                                <Text\n                                  px={2}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Available balance for Cheap Redeem\n                                </Text>\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'center'}\n                                    hoverColor={'copyColor'}\n                                  >\n                                    {this.state.unlentBalance.toFixed(4)} {this.props.selectedToken}\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.functionsUtil.getGlobalConfig(['messages','cheapRedeem'])}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              </Flex>\n                            </DashboardCard>\n                        }\n                        {\n                          (this.state.action === 'redeem' && redeemGovTokenEnabled && showRedeemFlow) && (\n                            <DashboardCard\n                              cardProps={{\n                                py:3,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={'InfoOutline'}\n                                />\n                                <Text\n                                  mt={1}\n                                  px={2}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  By redeeming your {this.props.selectedToken} you will automatically get also the proportional amount of governance tokens accrued{ this.props.govTokensBalance && this.props.govTokensBalance.gt(0) ? ` (~ $${this.props.govTokensBalance.toFixed(2)})` : null }.\n                                </Text>\n                              </Flex>\n                              <Checkbox\n                                mt={2}\n                                required={false}\n                                checked={this.state.redeemGovTokens}\n                                label={`Redeem governance tokens only`}\n                                onChange={ e => this.toggleRedeemGovTokens(e.target.checked) }\n                              />\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          (this.state.contractPaused && this.state.action === 'deposit') ? (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                mt:3\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'Warning'}\n                                  color={'cellText'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Deposits for {this.props.selectedToken} are temporarily unavailable due to Smart-Contract maintenance. Redeems are always available.\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          ) : (!this.state.tokenApproved && this.state.action === 'deposit' && !this.state.showETHWrapperEnabled) ? (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                mt:3\n                              }}\n                            >\n                              {\n                                this.state.processing['approve'] && this.state.processing['approve'].loading ? (\n                                  <Flex\n                                    flexDirection={'column'}\n                                  >\n                                    <TxProgressBar\n                                      web3={this.props.web3}\n                                      waitText={`Approve estimated in`}\n                                      endMessage={`Finalizing approve request...`}\n                                      hash={this.state.processing['approve'].txHash}\n                                      cancelTransaction={this.cancelTransaction.bind(this)}\n                                    />\n                                  </Flex>\n                                ) : (\n                                  <Flex\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                  >\n                                    <Icon\n                                      size={'1.8em'}\n                                      name={'LockOpen'}\n                                      color={'cellText'}\n                                    />\n                                    <Text\n                                      mt={3}\n                                      fontSize={2}\n                                      color={'cellText'}\n                                      textAlign={'center'}\n                                    >\n                                      {\n                                        this.state.depositCurveEnabled ? \n                                          `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.`\n                                        : useMetaTx ?\n                                          `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle using Meta-Transaction you need to approve our Smart-Contract first.`\n                                        :\n                                          `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle you need to approve our Smart-Contract first.`\n                                      }\n                                    </Text>\n                                    <RoundButton\n                                      buttonProps={{\n                                        mt:3,\n                                        width:[1,1/2]\n                                      }}\n                                      handleClick={this.approveToken.bind(this)}\n                                    >\n                                      Approve\n                                    </RoundButton>\n                                  </Flex>\n                                )\n                              }\n                            </DashboardCard>\n                          ) : (!showBuyFlow && canPerformAction) && (\n                            !this.state.processing[this.state.action].loading ? (\n                              <Flex\n                                mt={2}\n                                flexDirection={'column'}\n                              >\n                                {\n                                  showActionFlow && (\n                                    <Flex\n                                      mb={3}\n                                      width={1}\n                                      flexDirection={'column'}\n                                    >\n                                      {\n                                        (totalBalance || this.props.tokenFeesPercentage) && (\n                                          <Box\n                                            mb={1}\n                                            width={1}\n                                          >\n                                            {\n                                              this.state.showMaxSlippage && showCurveSlippage && (\n                                                <Box\n                                                  mb={2}\n                                                  width={1}\n                                                >\n                                                  <Flex\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                  >\n                                                    <Text>\n                                                      Choose max slippage:\n                                                    </Text>\n                                                    <Tooltip\n                                                      placement={'top'}\n                                                      message={`Max additional slippage on top of the one shown below`}\n                                                    >\n                                                      <Icon\n                                                        ml={1}\n                                                        size={'1em'}\n                                                        color={'cellTitle'}\n                                                        name={\"InfoOutline\"}\n                                                      />\n                                                    </Tooltip>\n                                                  </Flex>\n                                                  <Flex\n                                                    mt={2}\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                    justifyContent={'space-between'}\n                                                  >\n                                                    {\n                                                      [0.2,0.5,1,5].map( slippage => (\n                                                        <FastBalanceSelector\n                                                          cardProps={{\n                                                            p:1\n                                                          }}\n                                                          textProps={{\n                                                            fontSize:1\n                                                          }}\n                                                          percentage={slippage}\n                                                          key={`selector_${slippage}`}\n                                                          onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                                          isActive={this.state.maxSlippage === parseFloat(slippage)}\n                                                        />\n                                                      ))\n                                                    }\n                                                  </Flex>\n                                                </Box>\n                                              )\n                                            }\n                                            <Flex\n                                              width={1}\n                                              alignItems={'center'}\n                                              flexDirection={'row'}\n                                              justifyContent={'space-between'}\n                                            >\n                                              {\n                                                showCurveSlippage ? (\n                                                  <Flex\n                                                    width={1}\n                                                    maxWidth={'50%'}\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                  >\n                                                    <Text\n                                                      fontSize={1}\n                                                      fontWeight={3}\n                                                      textAlign={'right'}\n                                                      style={{\n                                                        whiteSpace:'nowrap'\n                                                      }}\n                                                      color={ this.state.depositCurveSlippage.gt(0) ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                                    >\n                                                      {\n                                                        parseFloat(this.state.depositCurveSlippage.times(100).toFixed(2)) === 0 ?\n                                                          'No Slippage'\n                                                        : `${ this.state.depositCurveSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositCurveSlippage.times(100).abs().toFixed(2)}%`\n                                                      }\n                                                    </Text>\n                                                    <Tooltip\n                                                      placement={'top'}\n                                                      message={this.functionsUtil.getGlobalConfig(['messages','curveBonusSlippage'])}\n                                                    >\n                                                      <Icon\n                                                        ml={1}\n                                                        size={'1em'}\n                                                        color={'cellTitle'}\n                                                        name={\"InfoOutline\"}\n                                                      />\n                                                    </Tooltip>\n                                                    <Link\n                                                      ml={1}\n                                                      color={'copyColor'}\n                                                      hoverColor={'primary'}\n                                                      onClick={this.showMaxSlippage}\n                                                    >\n                                                      change\n                                                    </Link>\n                                                  </Flex>\n                                                ) : this.props.tokenFeesPercentage && (\n                                                  <Flex\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                  >\n                                                    <Text\n                                                      fontSize={1}\n                                                      fontWeight={3}\n                                                      color={'dark-gray'}\n                                                      textAlign={'right'}\n                                                      hoverColor={'copyColor'}\n                                                    >\n                                                      Performance fee: {this.props.tokenFeesPercentage.times(100).toFixed(2)}%\n                                                    </Text>\n                                                    <Tooltip\n                                                      placement={'top'}\n                                                      message={this.functionsUtil.getGlobalConfig(['messages','performanceFee'])}\n                                                    >\n                                                      <Icon\n                                                        ml={1}\n                                                        size={'1em'}\n                                                        color={'cellTitle'}\n                                                        name={\"InfoOutline\"}\n                                                      />\n                                                    </Tooltip>\n                                                  </Flex>\n                                                )\n                                              }\n                                              {\n                                                totalBalance && (\n                                                  <Link\n                                                    fontSize={1}\n                                                    fontWeight={3}\n                                                    color={'dark-gray'}\n                                                    textAlign={'right'}\n                                                    hoverColor={'copyColor'}\n                                                    onClick={ (e) => this.setFastBalanceSelector(100) }\n                                                  >\n                                                    {totalBalance.toFixed(6)} {this.props.selectedToken}\n                                                  </Link>\n                                                )\n                                              }\n                                            </Flex>\n                                          </Box>\n                                        )\n                                      }\n                                      <Input\n                                        min={0}\n                                        type={\"number\"}\n                                        required={true}\n                                        height={'3.4em'}\n                                        borderRadius={2}\n                                        fontWeight={500}\n                                        borderColor={'cardBorder'}\n                                        backgroundColor={'cardBg'}\n                                        boxShadow={'none !important'}\n                                        placeholder={`Insert amount`}\n                                        onChange={this.changeInputValue.bind(this)}\n                                        border={`1px solid ${this.props.theme.colors.divider}`}\n                                        value={this.state.inputValue[this.state.action] !== null ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]).toFixed() : ''}\n                                      />\n                                      <Flex\n                                        mt={2}\n                                        alignItems={'center'}\n                                        flexDirection={'row'}\n                                        justifyContent={'space-between'}\n                                      >\n                                        {\n                                          [25,50,75,100].map( percentage => (\n                                            <FastBalanceSelector\n                                              percentage={percentage}\n                                              key={`selector_${percentage}`}\n                                              onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                              isActive={this.state.fastBalanceSelector[this.state.action] === parseInt(percentage)}\n                                            />\n                                          ))\n                                        }\n                                      </Flex>\n                                    </Flex>\n                                  )\n                                }\n                                {\n                                  canPerformAction && (\n                                    <Flex\n                                      justifyContent={'center'}\n                                      mt={ redeemGovTokens ? 2 : 0 }\n                                    >\n                                      <RoundButton\n                                        buttonProps={{\n                                          width:'auto',\n                                          minWidth:[1,1/2],\n                                          style:{\n                                            textTransform:'capitalize'\n                                          },\n                                          disabled:this.state.buttonDisabled\n                                        }}\n                                        handleClick={this.state.buttonDisabled ? null : this.executeAction.bind(this) }\n                                      >\n                                        {this.state.action}{ redeemGovTokens ? ' Gov Tokens' : '' /*(depositCurve ? ' in Curve' : '')*/ }\n                                      </RoundButton>\n                                    </Flex>\n                                  )\n                                }\n                              </Flex>\n                            ) : this.state.loadingErc20ForwarderTx ? (\n                              <Flex\n                                mt={3}\n                                flexDirection={'column'}\n                              >\n                                <FlexLoader\n                                  flexProps={{\n                                    flexDirection:'row'\n                                  }}\n                                  loaderProps={{\n                                    size:'25px',\n                                  }}\n                                  textProps={{\n                                    ml:2\n                                  }}\n                                  text={ this.state.erc20ForwarderTx ? ( this.state.signedParameters ? 'Please Sign the Transaction...' : 'Please Sign the Permit...' ) : 'Calculating transaction fees...'}\n                                />\n                              </Flex>\n                            ) : this.state.erc20ForwarderTx ? (\n                              <DashboardCard\n                                cardProps={{\n                                  p:3,\n                                  mt:3,\n                                  display:'flex',\n                                  alignItems:'center',\n                                  flexDirection:'column',\n                                  justifyContent:'center',\n                                }}\n                              >\n                                <Text\n                                  mb={2}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  The required fee to perform the {this.state.action} is <strong>{this.state.erc20ForwarderTx.cost} {this.props.selectedToken}</strong>\n                                </Text>\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <DashboardCard\n                                    cardProps={{\n                                      mx:2,\n                                      py:2,\n                                      px:[2,3],\n                                      width:0.40,\n                                      onMouseDown:() => {\n                                        this.executeAction()\n                                      }\n                                    }}\n                                    isInteractive={true}\n                                  >\n                                    <Flex\n                                      my={1}\n                                      alignItems={'center'}\n                                      flexDirection={'row'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Flex\n                                        mr={2}\n                                        alignItems={'center'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Icon\n                                          align={'center'}\n                                          color={'#00b84a'}\n                                          name={'CheckCircle'}\n                                          size={this.props.isMobile ? '1em' : '1.8em'}\n                                        />\n                                      </Flex>\n                                      <Text\n                                        fontWeight={3}\n                                        fontSize={[2,3]}\n                                      >\n                                        Confirm\n                                      </Text>\n                                    </Flex>\n                                  </DashboardCard>\n                                  <DashboardCard\n                                    cardProps={{\n                                      mx:2,\n                                      py:2,\n                                      px:[2,3],\n                                      width:0.40,\n                                      onMouseDown:() => {\n                                        this.cancelTransaction();\n                                      }\n                                    }}\n                                    isInteractive={true}\n                                  >\n                                    <Flex\n                                      my={1}\n                                      alignItems={'center'}\n                                      flexDirection={'row'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Flex\n                                        mr={2}\n                                        alignItems={'center'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Icon\n                                          name={'Cancel'}\n                                          align={'center'}\n                                          color={'#e13636'}\n                                          size={this.props.isMobile ? '1em' : '1.8em'}\n                                        />\n                                      </Flex>\n                                      <Text\n                                        fontWeight={3}\n                                        fontSize={[2,3]}\n                                      >\n                                        Decline\n                                      </Text>\n                                    </Flex>\n                                  </DashboardCard>\n                                </Flex>\n                              </DashboardCard>\n                            ) : (\n                              <Flex\n                                mt={3}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <TxProgressBar\n                                  web3={this.props.web3}\n                                  cancelTransaction={this.cancelTransaction.bind(this)}\n                                  hash={this.state.processing[this.state.action].txHash}\n                                  endMessage={`Finalizing ${this.state.action} request...`}\n                                  waitText={`${this.functionsUtil.capitalize(this.state.action)} estimated in`}\n                                />\n                              </Flex>\n                            )\n                          )\n                        }\n                      </Box>\n                    )\n                  ) : (\n                    <Flex\n                      mt={4}\n                      flexDirection={'column'}\n                    >\n                      <FlexLoader\n                        flexProps={{\n                          flexDirection:'row'\n                        }}\n                        loaderProps={{\n                          size:'30px'\n                        }}\n                        textProps={{\n                          ml:2\n                        }}\n                        text={'Loading asset info...'}\n                      />\n                    </Flex>\n                  )\n                }\n              </Migrate>\n            )\n          }\n        </Flex>\n        {\n          /*\n          showDepositCurve && this.state.depositCurveEnabled ? (\n            <CurveDeposit\n              {...this.props}\n            />\n          ) :\n          */\n          showRedeemCurve && this.state.redeemCurveEnabled && (\n            <Box\n              mt={3}\n              width={1}\n            >\n              <CurveRedeem\n                {...this.props}\n              />\n            </Box>\n          )\n        }\n        {\n          showBuyFlow &&\n            <Flex\n              mt={3}\n              width={[1,0.5]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <BuyModal\n                {...this.props}\n                showInline={true}\n                availableMethods={[]}\n                buyToken={this.props.selectedToken}\n              />\n            </Flex>\n        }\n\n        <ShareModal\n          confettiEnabled={true}\n          icon={`images/medal.svg`}\n          title={`Congratulations!`}\n          account={this.props.account}\n          closeModal={this.resetModal}\n          tokenName={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'share'}\n          text={`You have successfully deposited in Idle!<br />Enjoy <strong>${this.state.tokenAPY}% APY</strong> on your <strong>${this.props.selectedToken}</strong>!`}\n          tweet={`I'm earning ${this.state.tokenAPY}% APY on my ${this.props.selectedToken} with @idlefinance! Go to ${this.functionsUtil.getGlobalConfig(['baseURL'])} and start earning now from your idle tokens!`}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default DepositRedeem;\n","import theme from '../theme';\nimport { Bar } from '@nivo/bar';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Text, Input, Icon, Tooltip } from \"rimble-ui\";\n\nclass EstimatedEarnings extends Component {\n\n  state = {\n    chartData:null,\n    chartProps:null,\n    inputValue:1000,\n    maxInputValue:999999999999999\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    this.loadChart();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged){\n      this.loadChart();\n    }\n  }\n\n  async loadChart(){\n\n    const tokenApy = await this.functionsUtil.getTokenApy(this.props.tokenConfig);\n\n    if (!tokenApy){\n      return false;\n    }\n\n    const amount = this.functionsUtil.BNify(this.state.inputValue);\n    const earningsYear = amount.times(this.props.tokenApy.div(100));\n\n    const amountMonth = parseFloat(earningsYear.div(12));\n    const amount3Months = parseFloat(earningsYear.div(4));\n    const amount6Months = parseFloat(earningsYear.div(2));\n    const amountYear = parseFloat(earningsYear.div(1));\n\n    const chartData = [\n      {\n        perc:1/12,\n        label:'MONTH',\n        value:amountMonth,\n        month:amountMonth,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        monthColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:3/12,\n        label:'3 MONTHS',\n        value:amount3Months,\n        month3:amount3Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month3Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:6/12,\n        label:'6 MONTHS',\n        value:amount6Months,\n        month6:amount6Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month6Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:1,\n        label:'YEAR',\n        year:amountYear,\n        value:amountYear,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        yearColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      }\n    ];\n\n    let labelTextColorModifiers = this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'chart','labelTextColorModifiers']);\n\n    const maxGridLines = 4;\n    const gridYStep = amountYear/maxGridLines;\n    const gridYValues = [0];\n    for (let i=1;i<=maxGridLines;i++){\n      const gridYValue = i*gridYStep;\n      gridYValues.push(gridYValue);\n    }\n\n    const chartProps = {\n      padding: 0.2,\n      animate: false,\n      indexBy: 'label',\n      // enableLabel: false,\n      labelSkipWidth: 16,\n      labelSkipHeight: 16,\n      keys: ['month','month3','month6','year'],\n      colors: ({ id, data }) => data[`${id}Color`],\n      label: d => this.functionsUtil.abbreviateNumber(d.value,2,4)+' '+this.props.selectedToken,\n      labelTextColor: labelTextColorModifiers ? { from: 'color', modifiers: [ labelTextColorModifiers ] } : null,\n      isInteractive:false,\n      minValue:0,\n      gridYValues,\n      // maxValue:amountYear,\n      axisLeft:{\n        format: v => this.functionsUtil.abbreviateNumber(v,1,3),\n        tickValues:gridYValues,\n        orient: 'left',\n        tickSize: 0,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendPosition: 'middle'\n      },\n      axisBottom:{\n        legend: '',\n        tickSize:0,\n        tickPadding: 15,\n        orient: 'bottom',\n      },\n      theme:{\n        labels:{\n          text:{\n            fontSize:15,\n            fontWeight:600,\n            fill:theme.colors.counter,\n            fontFamily: theme.fonts.sansSerif\n          }\n        },\n        axis: {\n          ticks: {\n            text: {\n              fontSize:14,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '9 5'\n          }\n        },\n      },\n      margin: this.props.isMobile ? { top: 0, right: 0, bottom: 30, left: 0 } : { top: 10, right: 0, bottom: 50, left: 65 }\n    }\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  changeInputValue(e){\n    let inputValue = e.target.value.length && !isNaN(e.target.value) ? Math.min(this.state.maxInputValue,parseFloat(e.target.value)) : 0;\n    inputValue = this.functionsUtil.BNify(inputValue);\n    this.setState({\n      inputValue\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const showAPYDisclaimer = idleTokenEnabled && this.functionsUtil.getGlobalConfig(['govTokens','IDLE','showAPR']);\n\n    return (\n      <DashboardCard\n        cardProps={{\n          p:[3,4]\n        }}\n      >\n        <Flex\n          width={1}\n          flexDirection={['column','row']}\n        >\n          <Flex\n            width={[1,0.3]}\n            flexDirection={'column'}\n            justifyContent={'flex-start'}\n          >\n            <Flex\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <AssetField\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'icon',\n                  props:{\n                    mb:2,\n                    height:'2.5em'\n                  }\n                }}\n              />\n              <Text\n                fontSize={2}\n                color={'cellText'}\n                textAlign={'center'}\n              >\n                Set the amount and see your estimated earnings on time based on the current APY: { this.props.tokenApy ? `${this.props.tokenApy.toFixed(2)}%` : null}\n                {\n                  showAPYDisclaimer && \n                    <Flex\n                      style={{\n                        display:'inline-flex',\n                        verticalAlign:'middle'\n                      }}\n                    >\n                      <Tooltip\n                        placement={'top'}\n                        message={this.functionsUtil.getGlobalConfig(['messages','apyLong'])}\n                      >\n                        <Icon\n                          ml={1}\n                          name={\"Info\"}\n                          size={'1em'}\n                          color={'cellTitle'}\n                        />\n                      </Tooltip>\n                    </Flex>\n                }\n              </Text>\n            </Flex>\n            <Flex\n              mt={3}\n              flexDirection={'column'}\n            >\n              <Input\n                min={0}\n                type={\"number\"}\n                required={true}\n                borderRadius={2}\n                fontWeight={500}\n                textAlign={'center'}\n                height={['3em','3.4em']}\n                borderColor={'cardBorder'}\n                boxShadow={'none !important'}\n                max={this.state.maxInputValue}\n                backgroundColor={'cardBgHover'}\n                onChange={this.changeInputValue.bind(this)}\n                border={`1px solid ${theme.colors.divider}`}\n                placeholder={`Insert ${this.props.selectedToken.toUpperCase()} amount`}\n                value={this.state.inputValue && !isNaN(this.state.inputValue) ? this.state.inputValue : ''}\n              />\n            </Flex>\n            <Flex\n              mt={3}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                buttonProps={{\n                  width:[1,1/2],\n                }}\n                handleClick={this.loadChart.bind(this)}\n              >\n                CALCULATE\n              </RoundButton>\n            </Flex>\n          </Flex>\n          <Flex\n            mt={[3,0]}\n            width={[1,0.7]}\n            id={'estimated-earnings-chart'}\n          >\n            {\n              this.props.isMobile ? (\n                <Flex\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  {\n                    this.state.chartData !== null && this.state.chartData.map((v,index) => (\n                      <Flex\n                        py={2}\n                        my={2}\n                        width={1}\n                        flexDirection={'row'}\n                        key={`earnings_${index}`}\n                      >\n                        <Flex\n                          width={0.35}\n                          alignItems={'center'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            color={'legend'}\n                          >\n                            {v.label}\n                          </Text>\n                        </Flex>\n                        <Flex\n                          width={0.65}\n                          position={'relative'}\n                          alignItems={'center'}\n                          minHeight={['20px','35px']}\n                          justifyContent={'center'}\n                        >\n                          <Flex\n                            zIndex={1}\n                            position={'relative'}\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Text\n                              fontSize={1}\n                              fontWeight={3}\n                              color={'counter'}\n                            >\n                              {this.functionsUtil.abbreviateNumber(v.value,2,4)} {this.props.selectedToken}\n                            </Text>\n                          </Flex>\n                          <Flex\n                            right={0}\n                            width={v.perc}\n                            position={'absolute'}\n                            height={['20px','35px']}\n                            borderRadius={['20px 0 0 20px','35px 0 0 35px']}\n                            style={{background:`linear-gradient(-90deg, rgba(${v.color},0) 0%, rgba(${v.color},1) 100%)`}}\n                          ></Flex>\n                        </Flex>\n                      </Flex>\n                    ))\n                  }\n                </Flex>\n              ) : (\n                <GenericChart\n                  type={Bar}\n                  height={250}\n                  showLoader={true}\n                  {...this.state.chartProps}\n                  data={this.state.chartData}\n                  parentId={'estimated-earnings-chart'}\n                />\n              )\n            }\n          </Flex>\n        </Flex>\n      </DashboardCard>\n    );\n  }\n}\n\nexport default EstimatedEarnings;","import Title from '../Title/Title';\nimport { Box, Flex } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport AssetsList from '../AssetsList/AssetsList';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport FundsOverview from '../FundsOverview/FundsOverview';\nimport DepositRedeem from '../DepositRedeem/DepositRedeem';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport EstimatedEarnings from '../EstimatedEarnings/EstimatedEarnings';\n\nclass AssetPage extends Component {\n\n  state = {\n    tokenApy:{},\n    tokenFees:{},\n    tokenBalance:{},\n    tokenApproved:{},\n    activeModal:null,\n    idleTokenPrice:{},\n    govTokensBalance:{},\n    idleTokenBalance:{},\n    redeemableBalance:{},\n    govTokensDisabled:{},\n    availableGovTokens:{},\n    tokenFeesPercentage:{},\n    componentMounted:false\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadTokensInfo(){\n    if (this.props.account){\n      const newState = {...this.state};\n      await this.functionsUtil.asyncForEach(Object.keys(this.props.availableTokens),async (token) => {\n        const tokenConfig = this.props.availableTokens[token];\n        const govTokenAvailableTokens = {};\n        govTokenAvailableTokens[token] = tokenConfig;\n\n        const [\n          tokenFeesPercentage,\n          tokenApy,\n          tokenBalance,\n          tokenFees,\n          idleTokenPrice,\n          idleTokenBalance,\n          tokenApproved,\n          govTokensBalance\n        ] = await Promise.all([\n          this.functionsUtil.getTokenFees(tokenConfig),\n          this.functionsUtil.getTokenApy(this.props.tokenConfig),\n          this.functionsUtil.getTokenBalance(token,this.props.account),\n          this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n          this.functionsUtil.genericContractCall(tokenConfig.idle.token, 'tokenPrice'),\n          this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n          this.functionsUtil.checkTokenApproved(token,tokenConfig.idle.address,this.props.account),\n          this.functionsUtil.getGovTokensUserTotalBalance(this.props.account,govTokenAvailableTokens,'DAI')\n        ]);\n\n        newState.tokenFees[token] = tokenFees;\n        newState.tokenBalance[token] = tokenBalance;\n        newState.tokenApproved[token] = tokenApproved;\n        newState.idleTokenPrice[token] = idleTokenPrice;\n        newState.idleTokenBalance[token] = idleTokenBalance;\n        newState.govTokensBalance[token] = govTokensBalance;\n        newState.tokenFeesPercentage[token] = tokenFeesPercentage;\n        newState.govTokensDisabled[token] = tokenConfig.govTokensDisabled;\n        newState.tokenApy[token] = tokenApy && !tokenApy.isNaN() ? tokenApy : null;\n        newState.redeemableBalance[token] = idleTokenBalance ? this.functionsUtil.fixTokenDecimals(idleTokenBalance.times(idleTokenPrice),tokenConfig.decimals) : this.functionsUtil.BNify(0);\n      });\n\n      newState.availableGovTokens = this.functionsUtil.getTokenGovTokens(this.props.tokenConfig);\n\n      newState.componentMounted = true;\n\n      this.setState(newState);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n    const accountChanged = prevProps.account !== this.props.account;\n    if (accountChanged || transactionsChanged){\n      this.loadTokensInfo();\n    }\n  }\n\n  render() {\n\n    const userHasFunds = this.props.account && this.state.idleTokenBalance[this.props.selectedToken] && this.functionsUtil.BNify(this.state.idleTokenBalance[this.props.selectedToken]).gt(0);\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            <Breadcrumb\n              {...this.props}\n              isMobile={this.props.isMobile}\n              path={[this.props.selectedToken]}\n              handleClick={ e => this.props.goToSection(this.props.selectedStrategy) }\n              text={this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])}\n            />\n          </Flex>\n          <Flex\n            width={0.5}\n            justifyContent={'flex-end'}\n          >\n            <CardIconButton\n              icon={'Add'}\n              {...this.props}\n              text={'Add funds'}\n              handleClick={ e => this.setActiveModal('buy') }\n            />\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Deposit / Redeem\n        </Title>\n        <Flex\n          width={1}\n        >\n          <DepositRedeem\n            {...this.props}\n            tokenFees={this.state.tokenFees[this.props.selectedToken]}\n            tokenBalance={this.state.tokenBalance[this.props.selectedToken]}\n            tokenApproved={this.state.tokenApproved[this.props.selectedToken]}\n            govTokensBalance={this.state.govTokensBalance[this.props.selectedToken]}\n            idleTokenBalance={this.state.idleTokenBalance[this.props.selectedToken]}\n            redeemableBalance={this.state.redeemableBalance[this.props.selectedToken]}\n            tokenFeesPercentage={this.state.tokenFeesPercentage[this.props.selectedToken]}\n          />\n        </Flex>\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverview\n                {...this.props}\n                tokenFees={this.state.tokenFees[this.props.selectedToken]}\n              />\n            </Flex>\n        }\n        {\n          userHasFunds && this.props.account && !this.state.govTokensDisabled[this.props.selectedToken] && Object.keys(this.state.availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id={\"yield-farming\"}\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(this.state.availableGovTokens)}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.30,0.15]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    mobile:false,\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.25],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','govTokenRedeemableBalance']),\n                    props:{\n                      width:[0.35,0.30],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                    ]\n                  },\n                  {\n                    title:'DISTRIBUTION',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','userDistributionSpeed']),\n                    props:{\n                      width:[0.35,0.30],\n                    },\n                    fields:[\n                      {\n                        name:'userDistributionSpeed',\n                        props:{\n                          decimals:6\n                        }\n                      }\n                    ]\n                  },\n                  /*\n                  {\n                    title:'APR',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','govTokenApr']),\n                    props:{\n                      width:[0.2,0.17],\n                    },\n                    fields:[\n                      {\n                        name:'apr',\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','tokenPrice']),\n                    mobile:false,\n                    props:{\n                      width: 0.17,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                  */\n                ]}\n                {...this.props}\n                availableTokens={this.state.availableGovTokens}\n              />\n            </Flex>\n        }\n        {\n        this.props.account && this.state.tokenApy[this.props.selectedToken] && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'estimated-earnings-container'}\n          >\n            <Title my={[3,4]}>Estimated earnings</Title>\n            <EstimatedEarnings\n              {...this.props}\n              tokenApy={this.state.tokenApy[this.props.selectedToken]}\n            />\n          </Flex>\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              enabledTokens={[this.props.selectedToken]}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport { Text, Modal, Flex, Link } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass BetaModal extends React.Component {\n\n  state = {};\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    this.functionsUtil.setLocalStorage('betaApproved',true);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','650px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            pt={3}\n            iconHeight={'40px'}\n            title={'Beta Version'}\n            icon={'images/warning.svg'}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                fontSize={2}\n                textAlign={'left'}\n                color={'dark-gray'}\n              >\n                You're about to enter Idle Finance Beta Dashboard – this is the place where several un-audited and risky features are being tested!<br />Please use at your own risk, or visit the official website at <Link fontSize={2} mainColor={'primary'} hoverColor={'primary'} href={this.functionsUtil.getGlobalConfig(['baseURL'])}>{this.functionsUtil.getGlobalConfig(['baseURL'])}</Link>.\n              </Text>\n            </Flex>\n            <Flex\n              my={3}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                handleClick={this.closeModal}\n                buttonProps={{\n                  width:['100%','40%']\n                }}\n              >\n                Continue Anyway\n              </RoundButton>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default BetaModal;","import React, { Component } from 'react';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Box, Text, Icon, Tooltip, Link, Input } from \"rimble-ui\";\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\n\nclass CurveDeposit extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    depositSlippage:null,\n    redeemableBalance:null,\n    migrationContract:null,\n    curveTokensBalance:null,\n    migrationSucceeded:false,\n    fastBalanceSelector:null,\n    migrationContractApproved:false,\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    await this.initToken();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const idleTokenBalanceChanged = prevProps.idleTokenBalance !== this.props.idleTokenBalance;\n    if (accountChanged || idleTokenBalanceChanged){\n      await this.initToken();\n    }\n    \n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const inputValueChanged = this.state.inputValue !== prevState.inputValue;\n    if (inputValueChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  setInputValue = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    const inputValue = this.props.idleTokenBalance ? this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage) : null;\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    const buttonDisabled = !amount || amount.gt(this.state.idleTokenBalance);\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  approve = async () => {\n    const migrationContract = this.state.migrationContract;\n    if (migrationContract){\n\n      // Check if the migration contract is approved\n      const migrationContractApproved = await this.checkMigrationContractApproved();\n\n      if (!migrationContractApproved){\n\n        const callbackApprove = (tx,error) => {\n          // Send Google Analytics event\n          const eventData = {\n            eventAction: 'approve',\n            eventCategory: 'CurveDeposit',\n            eventLabel: tx ? tx.status : null\n          };\n\n          const txSucceeded = tx && tx.status === 'success';\n\n          // console.log('callbackApprove',tx,error);\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            migrationContractApproved: txSucceeded, // True\n            processing: {\n              ...prevState.processing,\n              txHash:null,\n              loading:false\n            }\n          }));\n\n          if (typeof this.props.callbackApprove === 'function' && txSucceeded){\n            this.props.callbackApprove(tx);\n          }\n\n          this.checkMigration();\n        };\n\n        const callbackReceiptApprove = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              txHash\n            }\n          }));\n        };\n\n        this.functionsUtil.enableERC20(this.props.selectedToken,migrationContract.address,callbackApprove,callbackReceiptApprove);\n\n        this.setState((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            txHash:null,\n            loading:true\n          },\n          migrationContractApproved:false\n        }));\n      } else {\n        this.setState({\n          migrationContractApproved:true\n        });\n      }\n    }\n  }\n\n  deposit = async () => {\n\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    if (!inputValue){\n      return false;\n    }\n\n    const callbackDeposit = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveDeposit`,\n        eventAction: this.props.selectedToken,\n        eventValue: inputValue.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackDeposit === 'function' && txSucceeded){\n        this.props.callbackDeposit(tx);\n      }\n    };\n\n    const callbackReceiptDeposit = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.migrationContract.name;\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n    const depositParams = await this.getMigrationParams(_amount);\n\n    this.props.contractMethodSendWrapper(contractName, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  cancelTransaction = async () => {\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  async getMigrationParams(toMigrate){\n    const migrationParams = [];\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.selectedToken]);\n\n    if (!curveTokenConfig){\n      return false;\n    }\n    \n    const migrationContractParams = curveTokenConfig.migrationParams;\n    if (migrationContractParams.n_coins){\n      const amounts = await this.functionsUtil.getCurveAmounts(this.props.selectedToken,toMigrate,true);\n      let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n\n      if (this.state.maxSlippage){\n        minMintAmount = this.functionsUtil.BNify(minMintAmount);\n        minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n        minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n      }\n\n      migrationParams.push(amounts);\n      migrationParams.push(minMintAmount);\n    }\n\n    return migrationParams;\n  }\n\n  async calculateSlippage(){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (inputValue){\n      let underlyingBalanceToDeposit = inputValue;\n      if (underlyingBalanceToDeposit){\n        const idleTokenPrice = await this.functionsUtil.getIdleTokenPrice(this.props.tokenConfig);\n        if (idleTokenPrice){\n          underlyingBalanceToDeposit = underlyingBalanceToDeposit.times(idleTokenPrice);\n        }\n      } else {\n        underlyingBalanceToDeposit = this.functionsUtil.BNify(0);\n      }\n\n      const normalizeIdleTokenBalance = this.functionsUtil.normalizeTokenAmount(underlyingBalanceToDeposit,this.props.tokenConfig.decimals);\n      let depositSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizeIdleTokenBalance);\n      if (depositSlippage){\n        depositSlippage = depositSlippage.times(100);\n      }\n\n      this.setState({\n        depositSlippage\n      });\n    }\n  }\n\n  async checkMigrationContractApproved(){\n    const migrationContract = this.state.migrationContract || await this.functionsUtil.getCurveSwapContract();\n    if (migrationContract){\n      return await this.functionsUtil.checkTokenApproved(this.props.tokenConfig.idle.token,migrationContract.address,this.props.account);\n    }\n    return false;\n  }\n\n  async initToken(){\n\n    // Init and check migration contract\n    const migrationContract = await this.functionsUtil.getCurveSwapContract();\n    const migrationContractApproved = await this.checkMigrationContractApproved();\n\n    this.setState({\n      migrationContract,\n      migrationContractApproved\n    });\n  }\n\n  approveCallback = () => {\n    this.initToken();\n  }\n\n  migrationCallback = () => {\n    this.setState({\n      migrationSucceeded:true\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken){\n      return null;\n    }\n\n    // const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const hasCurveTokens = this.state.curveTokensBalance && this.state.curveTokensBalance.gt(0);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n            {\n              this.props.idleTokenBalance && this.props.idleTokenBalance.gt(0) && (\n                <Box\n                  width={1}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:3,\n                      px:[2,4]\n                    }}\n                  >\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    > \n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ this.state.migrationContractApproved ? 'CheckBox' : 'LooksOne'}\n                          color={ this.state.migrationContractApproved ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Approve the Curve contract\n                        </Text>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ hasCurveTokens ? 'CheckBox' : 'LooksTwo'}\n                          color={ hasCurveTokens ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Deposit your {this.props.tokenConfig.idle.token}\n                        </Text>\n                      </Flex>\n                    </Flex>\n                  </DashboardCard>\n                  {\n                    !this.state.migrationContractApproved ?\n                      this.state.processing.loading ? (\n                        <Flex\n                          mt={3}\n                          flexDirection={'column'}\n                        >\n                          <TxProgressBar\n                            web3={this.props.web3}\n                            waitText={`Approve estimated in`}\n                            hash={this.state.processing.txHash}\n                            endMessage={`Finalizing approve request...`}\n                            cancelTransaction={this.cancelTransaction.bind(this)}\n                          />\n                        </Flex>\n                      ) : (\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            mt:3,\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                          >\n                            <Icon\n                              size={'2.3em'}\n                              name={'LockOpen'}\n                              color={'cellText'}\n                            />\n                            <Text\n                              mt={1}\n                              fontSize={2}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              To deposit your {this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.\n                            </Text>\n                            <RoundButton\n                              buttonProps={{\n                                mt:3,\n                                width:[1,1/2]\n                              }}\n                              handleClick={this.approve.bind(this)}\n                            >\n                              Approve\n                            </RoundButton>\n                          </Flex>\n                        </DashboardCard>\n                      )\n                    : this.state.processing.loading ? (\n                      <Flex\n                        mt={3}\n                        flexDirection={'column'}\n                      >\n                        <TxProgressBar\n                          web3={this.props.web3}\n                          waitText={`Deposit estimated in`}\n                          hash={this.state.processing.txHash}\n                          endMessage={`Finalizing deposit request...`}\n                          cancelTransaction={this.cancelTransaction.bind(this)}\n                        />\n                      </Flex>\n                    ) : (\n                      <Box\n                        mt={2}\n                        width={1}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text>\n                            Choose max slippage:\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={`Max additional slippage on top of the one shown below`}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                          justifyContent={'space-between'}\n                        >\n                          {\n                            [0.2,0.5,1,5].map( slippage => (\n                              <FastBalanceSelector\n                                cardProps={{\n                                  p:1\n                                }}\n                                textProps={{\n                                  fontSize:1\n                                }}\n                                percentage={slippage}\n                                key={`selector_${slippage}`}\n                                onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                isActive={this.state.maxSlippage === parseFloat(slippage)}\n                              />\n                            ))\n                          }\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                        >\n                          <Flex\n                            mb={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={this.state.depositSlippage ? 'space-between' : 'flex-end'}\n                          >\n                            {\n                              this.state.depositSlippage && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    textAlign={'right'}\n                                    style={{\n                                      whiteSpace:'nowrap'\n                                    }}\n                                    color={ parseFloat(this.state.depositSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                  >\n                                    {\n                                      parseFloat(this.state.depositSlippage.toFixed(3)) === 0 ?\n                                        'No Slippage'\n                                      : `${ this.state.depositSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositSlippage.abs().toFixed(3)}%`\n                                    }\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.state.depositSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              )\n                            }\n                            {\n                              this.props.idleTokenBalance && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'flex-end'}\n                                >\n                                  <Link\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'right'}\n                                    hoverColor={'copyColor'}\n                                    onClick={ (e) => this.setFastBalanceSelector(100) }\n                                    style={{\n                                      maxWidth:'100%',\n                                      overflow:'hidden',\n                                      whiteSpace:'nowrap',\n                                      textOverflow:'ellipsis'\n                                    }}\n                                  >\n                                    {this.props.idleTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {this.props.selectedToken}\n                                  </Link>\n                                </Flex>\n                              )\n                            }\n                          </Flex>\n                          <Input\n                            min={0}\n                            type={\"number\"}\n                            required={true}\n                            height={'3.4em'}\n                            borderRadius={2}\n                            fontWeight={500}\n                            boxShadow={'none !important'}\n                            placeholder={`Insert amount`}\n                            onChange={this.changeInputValue.bind(this)}\n                            border={`1px solid ${this.props.theme.colors.divider}`}\n                            value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                          />\n                          <Flex\n                            mt={2}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'space-between'}\n                          >\n                            {\n                              [25,50,75,100].map( percentage => (\n                                <FastBalanceSelector\n                                  percentage={percentage}\n                                  key={`selector_${percentage}`}\n                                  onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                  isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                                />\n                              ))\n                            }\n                          </Flex>\n                          <Flex\n                            mt={2}\n                            justifyContent={'center'}\n                          >\n                            <RoundButton\n                              buttonProps={{\n                                mt:2,\n                                width:[1,1/2],\n                                disabled:this.state.buttonDisabled\n                              }}\n                              handleClick={this.deposit.bind(this)}\n                            >\n                              Deposit\n                            </RoundButton>\n                          </Flex>\n                        </Flex>\n                      </Box>\n                    )\n                  }\n                </Box>\n              )\n            }\n          {\n            /*\n            this.state.tokenConfig && this.state.redeemableBalance ? (\n              <Box width={1}>\n                <Migrate\n                  {...this.props}\n                  showActions={false}\n                  getTokenPrice={false}\n                  migrationTextProps={{\n                    fontWeight:500\n                  }}\n                  isMigrationTool={true}\n                  migrationImage={{\n                    mb:1,\n                    height:'1.8em',\n                    src:curveConfig.params.image\n                  }}\n                  showBalanceSelector={true}\n                  waitText={'Deposit estimated in'}\n                  tokenConfig={this.state.tokenConfig}\n                  callbackApprove={this.approveCallback.bind(this)}\n                  migrationParams={this.getMigrationParams.bind(this)}\n                  migrationCallback={this.migrationCallback.bind(this)}\n                  approveText={`To deposit your ${this.props.tokenConfig.idle.token} you need to approve Curve smart-contract first.`}\n                  migrationText={`You can deposit ${this.state.redeemableBalance.toFixed(4)} ${this.props.tokenConfig.idle.token} in the Curve Pool${ this.state.depositSlippage ? (this.state.depositSlippage.gte(0) ? ` with <span style=\"color:${this.props.theme.colors.transactions.status.failed}\">${this.state.depositSlippage.times(100).toFixed(2)}% of slippage</span>` : ` with <span style=\"color:${this.props.theme.colors.transactions.status.completed}\">${Math.abs(parseFloat(this.state.depositSlippage.times(100).toFixed(2)))}% of bonus</span>`) : '' }.`}\n                >\n                  {\n                    !this.props.account ? (\n                      <DashboardCard\n                        cardProps={{\n                          p:3,\n                          mt:3\n                        }}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                        >\n                          <Icon\n                            size={'2.3em'}\n                            name={'Input'}\n                            color={'cellText'}\n                          />\n                          <Text\n                            mt={2}\n                            fontSize={2}\n                            color={'cellText'}\n                            textAlign={'center'}\n                          >\n                            Please connect with your wallet interact with Idle.\n                          </Text>\n                          <RoundButton\n                            buttonProps={{\n                              mt:2,\n                              width:[1,1/2]\n                            }}\n                            handleClick={this.props.connectAndValidateAccount}\n                          >\n                            Connect\n                          </RoundButton>\n                        </Flex>\n                      </DashboardCard>\n                    ) : (\n                      <DashboardCard\n                        cardProps={{\n                          p:3\n                        }}\n                      >\n                        {\n                          this.state.migrationSucceeded ? (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'DoneAll'}\n                                color={this.props.theme.colors.transactions.status.completed}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You have successfully deposited your {this.props.tokenConfig.idle.token} in the Curve Pool!\n                              </Text>\n                            </Flex>\n                          ) : (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'MoneyOff'}\n                                color={'cellText'}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You don't have any {this.props.tokenConfig.idle.token} in your wallet.\n                              </Text>\n                            </Flex>\n                          )\n                        }\n                      </DashboardCard>\n                    )\n                  }\n                </Migrate>\n              </Box>\n            ) : null\n            */\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveDeposit;","import theme from '../theme';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\n// import { linearGradientDef } from '@nivo/core'\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport ChartCustomTooltip from '../ChartCustomTooltip/ChartCustomTooltip';\nimport ChartCustomTooltipRow from '../ChartCustomTooltipRow/ChartCustomTooltipRow';\n\nclass PortfolioEquityCurve extends Component {\n  state = {\n    startDate:null,\n    chartData:null,\n    chartProps:null,\n    chartwidth:null,\n    chartHeight:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentDidMount(){\n    this.loadUtils();\n    this.loadChartData();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n\n    const quickDateSelectionChanged = prevProps.quickDateSelection !== this.props.quickDateSelection;\n    const tokenChanged = JSON.stringify(prevProps.enabledTokens) !== JSON.stringify(this.props.enabledTokens);\n    if (tokenChanged || quickDateSelectionChanged){\n      this.setState({\n        chartData:null\n      },() => {\n        this.componentDidMount();\n      });\n    }\n\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n    if (mobileChanged){\n      this.loadChartData();\n    }\n  }\n\n  async loadChartData() {\n\n    let enabledTokens = this.props.enabledTokens;\n    if (!enabledTokens || !enabledTokens.length){\n      enabledTokens = Object.keys(this.props.availableTokens);\n    }\n\n    const curveTxs = await this.functionsUtil.getCurveTxs(this.props.account,0,'latest',enabledTokens);\n\n    const chartData = [];\n    let tokensBalance = [];\n    const processedTxs = {};\n    let firstTxTimestamp = null;\n    let totalBalance = this.functionsUtil.BNify(0);\n    const curvePoolContract = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    if (curveTxs && curveTxs.length){\n\n      curveTxs.forEach((tx,index) => {\n\n        if (!processedTxs[tx.hash]){\n          processedTxs[tx.hash] = [];\n        }\n\n        if (processedTxs[tx.hash].includes(tx.action)){\n          return;\n        }\n        \n        firstTxTimestamp = firstTxTimestamp ? Math.min(firstTxTimestamp,parseInt(tx.timeStamp)) : parseInt(tx.timeStamp);\n\n        const curveTokens = this.functionsUtil.BNify(tx.curveTokens);\n\n        switch (tx.action){\n          case 'CurveIn':\n          case 'CurveZapIn':\n          case 'CurveDepositIn':\n          case 'CurveTransferIn':\n            totalBalance = totalBalance.plus(curveTokens);\n          break;\n          case 'CurveOut':\n          case 'CurveZapOut':\n          case 'CurveDepositOut':\n          case 'CurveTransferOut':\n            totalBalance = totalBalance.minus(curveTokens);\n          break;\n          default:\n          break;\n        }\n\n        // Reset totalBalance if below zero\n        if (totalBalance.lt(0)){\n          totalBalance = this.functionsUtil.BNify(0);\n        }\n\n        const action = tx.action;\n        const balance = totalBalance;\n        const timeStamp = parseInt(tx.timeStamp);\n        const curveTokenPrice = this.functionsUtil.fixTokenDecimals(tx.curveTokenPrice,curvePoolContract.decimals);\n\n        // console.log(this.functionsUtil.strToMoment(timeStamp*1000).format('YYYY/MM/DD HH:mm'),tx.hash,tx.action,curveTokens.toString(),totalBalance.toString());\n\n        if (!curveTokenPrice.isNaN() && !curveTokenPrice.isNaN()){\n          tokensBalance.push({\n            action,\n            balance,\n            timeStamp,\n            curveTokens,\n            curveTokenPrice\n          });\n\n          processedTxs[tx.hash].push(action);\n        }\n      });\n    }\n\n    // Calculate Start Date\n    let startDate = null;\n    const currentDate = this.functionsUtil.strToMoment(new Date());\n\n    switch (this.props.quickDateSelection){\n      case 'week':\n        startDate = currentDate.clone().subtract(1,'week');\n      break;\n      case 'month':\n        startDate = currentDate.clone().subtract(1,'month');\n      break;\n      case 'month3':\n        startDate = currentDate.clone().subtract(3,'month');\n      break;\n      case 'month6':\n        startDate = currentDate.clone().subtract(6,'month');\n      break;\n      default:\n        startDate = null;\n      break;\n    }\n\n    const days = {};\n    let prevBalances = {};\n    let prevTimestamp = null;\n    let minChartValue = null;\n    let maxChartValue = null;\n    const aggregatedBalancesKeys = {};\n    const tokensBalancesPerDate = {};\n    let aggregatedBalance = this.functionsUtil.BNify(0);\n    // let curveTokenBalance = this.functionsUtil.BNify(0);\n    const currTimestamp = parseInt(new Date().getTime()/1000)+86400;\n\n    const tokensData = await this.functionsUtil.getTokenApiData(Object.values(this.props.availableTokens)[0].address,false,firstTxTimestamp,null,false,3600);\n\n    for (let timeStamp=firstTxTimestamp;timeStamp<=currTimestamp;timeStamp+=this.props.frequencySeconds){\n\n      let foundBalances = {};\n      let tokensBalances = {};\n      timeStamp = Math.min(currTimestamp,timeStamp);\n      let momentDate = this.functionsUtil.strToMoment(timeStamp*1000);\n\n      // eslint-disable-next-line\n      const filteredTokenData = tokensData.filter(tx => (tx.timestamp>=prevTimestamp && tx.timestamp<=timeStamp));\n\n      // eslint-disable-next-line\n      let filteredBalances = tokensBalance.filter(tx => (tx.timeStamp<=timeStamp && (!prevTimestamp || tx.timeStamp>prevTimestamp)));\n      \n      if (!filteredBalances.length){\n        if (prevBalances){\n          filteredBalances = prevBalances;\n          const lastFilteredTx = Object.values(filteredBalances).pop();\n          const currentBalance = parseFloat(lastFilteredTx.balance);\n\n          const lastTokenData = Object.values(filteredTokenData).pop();\n          let curveTokenPrice = null;\n          if (lastTokenData){\n            curveTokenPrice = await this.functionsUtil.getCurveTokenPrice(lastTokenData.blocknumber);\n          }\n\n          // Take idleToken price from API and calculate new balance\n          if (currentBalance>0 && timeStamp>firstTxTimestamp && curveTokenPrice){\n            // Set new curveTokenPrice\n            lastFilteredTx.curveTokenPrice = curveTokenPrice;\n            filteredBalances = [lastFilteredTx];\n          }\n        } else {\n          filteredBalances = [{\n            balance:this.functionsUtil.BNify(0),\n            curveTokenPrice:this.functionsUtil.BNify(0)\n          }];\n        }\n      }\n\n      const lastTx = Object.assign([],filteredBalances).pop();\n      let lastTxBalance = this.functionsUtil.BNify(lastTx.balance).times(lastTx.curveTokenPrice);\n\n      tokensBalances[curvePoolContract.token] = this.functionsUtil.BNify(lastTx.balance);\n      aggregatedBalance = lastTxBalance;\n\n      foundBalances = filteredBalances;\n\n      // console.log(momentDate.format('YYYY/MM/DD 00:00'),lastTx.balance.toString(),lastTx.curveTokenPrice.toString(),lastTxBalance.toString());\n\n      if (startDate === null || momentDate.isSameOrAfter(startDate)){\n        \n        if (momentDate.isAfter(new Date(),'day')){\n          momentDate = this.functionsUtil.strToMoment(new Date());\n        }\n\n        // Force date to midnight\n        const formattedDate = momentDate.format('YYYY/MM/DD 00:00');\n\n        // Save days for axisBottom format\n        days[momentDate.format('YYYY/MM/DD')] = 1;\n\n        const aggregatedBalanceParsed = parseFloat(parseFloat(aggregatedBalance.toFixed(6)));\n\n        aggregatedBalancesKeys[formattedDate] = aggregatedBalanceParsed;\n        tokensBalancesPerDate[formattedDate] = tokensBalances;\n\n        // console.log(formattedDate,tokensBalances);\n\n        minChartValue = minChartValue === null ? aggregatedBalanceParsed : Math.min(minChartValue,aggregatedBalanceParsed);\n        maxChartValue = maxChartValue === null ? aggregatedBalanceParsed : Math.max(maxChartValue,aggregatedBalanceParsed);\n      }\n\n      prevTimestamp = timeStamp;\n      prevBalances = foundBalances;\n    }\n\n    const aggregatedBalances = Object.keys(aggregatedBalancesKeys).map(date => ({\n      x:date,\n      y:aggregatedBalancesKeys[date],\n      balances:tokensBalancesPerDate[date]\n    }));\n\n    let itemIndex = 0;\n    aggregatedBalances.forEach( (item,index) => {\n      const itemPos = Math.floor(itemIndex/aggregatedBalances.length*100);\n      aggregatedBalances[index].itemPos = itemPos;\n      itemIndex++;\n    });\n\n    /*\n    aggregatedBalances.push({\n      x:momentDate.format('YYYY/MM/DD HH:mm'),\n      y:aggregatedBalance\n    });\n    */\n\n    // Add day before to start with zero balance\n    /*\n    const firstTxMomentDate = this.functionsUtil.strToMoment(firstTxTimestamp*1000);\n    if ((startDate === null || startDate.isSameOrBefore(firstTxMomentDate)) && aggregatedBalances.length){\n      const firstItem = aggregatedBalances[0];\n      const firstDate = this.functionsUtil.strToMoment(firstItem.x,'YYYY/MM/DD HH:mm');\n      firstDate.subtract(1,'day');\n      aggregatedBalances.unshift({\n        x:firstDate.format('YYYY/MM/DD HH:mm'),\n        y:0\n      });\n    }\n    */\n\n    // Add token Data\n    chartData.push({\n      id:'USD',\n      color: 'hsl('+ this.functionsUtil.getGlobalConfig(['stats','tokens','USD','color','hsl']).join(',')+')',\n      data:aggregatedBalances\n    });\n\n    let yFormatDecimals = 2;\n    if (maxChartValue-minChartValue<1){\n      yFormatDecimals = 4;\n    }\n\n    if (maxChartValue === minChartValue){\n      minChartValue = Math.max(0,maxChartValue-1);\n    }\n\n    const maxGridLines = 5;\n    const gridYStep = (maxChartValue-minChartValue)/maxGridLines;\n    const gridYValues = [];\n    for (let i=0;i<=maxGridLines;i++){\n      const gridYValue = parseFloat(parseFloat(minChartValue+(i*gridYStep)).toFixed(6));\n      gridYValues.push(gridYValue);\n    }\n    \n    const axisBottomMaxValues = 10;\n    const daysCount = Object.values(days).length;    \n    const daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n    const chartProps = {\n      xScale:{\n        type: 'time',\n        format: '%Y/%m/%d %H:%M',\n      },\n      yScale:{\n        type: 'linear',\n        stacked: false,\n        min: minChartValue,\n        max: maxChartValue\n      },\n      xFormat:'time:%b %d %Y',\n      yFormat:value => this.functionsUtil.formatMoney(value,yFormatDecimals),\n      axisBottom: this.props.isMobile ? null : {\n        legend: '',\n        tickSize:0,\n        format: '%b %d',\n        tickPadding: 15,\n        orient: 'bottom',\n        legendOffset: 36,\n        legendPosition: 'middle',\n        tickValues:'every '+daysFrequency+' days'\n      },\n      gridYValues,\n      pointSize:0,\n      useMesh:true,\n      axisLeft: this.props.isMobile ? null : {\n        legend: '',\n        tickSize: 0,\n        orient: 'left',\n        tickPadding: 10,\n        tickRotation: 0,\n        legendOffset: -70,\n        tickValues:gridYValues,\n        legendPosition: 'middle',\n        format: v => this.functionsUtil.abbreviateNumber(v,2),\n      },\n      animate:true,\n      pointLabel:'y',\n      areaOpacity:0.1,\n      enableArea:true,\n      enableSlices:'x',\n      enableGridY:true,\n      curve:'monotoneX',\n      enableGridX:false,\n      pointBorderWidth:1,\n      colors:d => d.color,\n      pointLabelYOffset:-12,\n      areaBaselineValue:minChartValue,\n      pointColor:{ from: 'color', modifiers: []},\n      theme:{\n        axis: {\n          ticks: {\n            text: {\n              fontSize:12,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '8 4'\n          }\n        },\n      },\n      /*\n      defs:[\n        linearGradientDef('gradientA', [\n          { offset: 0, color: 'inherit' },\n          { offset: 100, color: 'inherit', opacity: 0 },\n        ]),\n      ],\n      fill:[{ match: '*', id: 'gradientA' }],\n      */\n      margin: this.props.isMobile ? { top: 20, right: 25, bottom: 25, left: 20 } : { top: 30, right: 50, bottom: 45, left: 50 },\n      sliceTooltip:(slideData) => {\n        const { slice } = slideData;\n        const point = slice.points[0];\n        return (\n          <ChartCustomTooltip\n            point={point}\n          >\n            <ChartCustomTooltipRow\n              color={point.color}\n              label={point.serieId}\n              value={`$ ${point.data.yFormatted}`}\n            />\n            {\n            typeof point.data.balances === 'object' && Object.keys(point.data.balances).length>0 &&\n              Object.keys(point.data.balances).map(token => {\n                if (token === point.serieId){\n                  return null;\n                }\n                const tokenInfo = this.functionsUtil.getGlobalConfig(['stats','tokens',token]);\n                if (tokenInfo){\n                  const tokenName = tokenInfo.name ? tokenInfo.name : token;\n                  const color = tokenInfo.color.hex;\n                  const balance = point.data.balances[token];\n                  let formattedBalance = this.functionsUtil.formatMoney(balance,2);\n                  if (parseFloat(balance)>=0.01){\n                    return (\n                      <ChartCustomTooltipRow\n                        label={tokenName}\n                        color={color}\n                        key={`row_${token}`}\n                        value={`${formattedBalance}`}\n                      />\n                    );\n                  }\n                }\n                return null;\n              })\n            }\n          </ChartCustomTooltip>\n        );\n      }\n    };\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  render() {\n    return (\n      <GenericChart\n        type={Line}\n        showLoader={true}\n        {...this.state.chartProps}\n        data={this.state.chartData}\n        parentId={this.props.parentId}\n        height={this.props.chartHeight}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default PortfolioEquityCurve;","import theme from '../theme';\nimport Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport { Flex, Heading, Text } from \"rimble-ui\";\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport PortfolioEquityCurve from '../PortfolioEquityCurve/PortfolioEquityCurve';\n\nclass FundsOverviewCurve extends Component {\n\n  state = {\n    compAPR:null,\n    aggregatedValues:[],\n    govTokensUserBalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    await this.functionsUtil.getCurveAvgBuyPrice();\n\n    // debugger;\n\n    await this.functionsUtil.getCurveAvgSlippage();\n\n    // debugger;\n    /*\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const [govTokensUserBalance,avgAPY,days] = await Promise.all([\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,'DAI'),\n      this.functionsUtil.loadAssetField('avgAPY',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '-') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    let [tokenAllocation,compAPR] = await Promise.all([\n      this.functionsUtil.getTokenAllocation(this.props.tokenConfig,false,false),\n      this.functionsUtil.getCompAPR(this.props.selectedToken,this.props.tokenConfig)\n    ]);\n\n    if (tokenAllocation){\n      const compoundInfo = this.props.tokenConfig.protocols.find( p => (p.name === 'compound') );\n      if (compoundInfo){\n        if (tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()]){\n          const compoundAllocationPerc = tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()];\n          compAPR = compAPR.times(compoundAllocationPerc);\n        }\n      }\n    }\n\n    this.setState({\n      compAPR,\n      aggregatedValues,\n      govTokensUserBalance\n    });\n    */\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Text\n                          mt={2}\n                          fontWeight={2}\n                          fontSize={[1,2]}\n                          color={'cellText'}\n                        >\n                          {v.props.title}\n                        </Text>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquityCurve\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLentCurve',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPercCurve',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            {\n              /*\n              <Flex\n                mb={[2,0]}\n                width={[1,1/5]}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'flex-start'}\n              >\n                <Title\n                  mb={2}\n                  fontSize={[3,4]}\n                  component={Heading.h3}\n                >\n                  Fees\n                </Title>\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'feesCounter',\n                    props:{\n                      decimals:7,\n                      maxPrecision:8,\n                      style:{\n                        fontWeight:300,\n                        fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                        color:theme.colors.counter\n                      },\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n              */\n            }\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveApy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Avg Slippage\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveAvgSlippage',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverviewCurve;","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport { Box, Flex, Text, Icon } from \"rimble-ui\";\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport CurveDeposit from '../CurveDeposit/CurveDeposit';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport TransactionField from '../TransactionField/TransactionField';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport FundsOverviewCurve from '../FundsOverviewCurve/FundsOverviewCurve';\n\nclass AssetPage extends Component {\n\n  state = {\n    inputValue:{},\n    processing:{},\n    tokenFees:null,\n    canRedeem:null,\n    canDeposit:null,\n    action:'deposit',\n    activeModal:null,\n    tokenConfig:null,\n    tokenBalance:null,\n    tokenApproved:null,\n    selectedToken:null,\n    availableTokens:{},\n    redeemBalance:null,\n    depositBalance:null,\n    buttonDisabled:false,\n    curveTokenPrice:null,\n    depositSlippage:null,\n    idleTokenBalance:null,\n    withdrawSlippage:null,\n    govTokensBalance:null,\n    curveZapContract:null,\n    curveTokenConfig:null,\n    curveTokensAmounts:{},\n    govTokensDisabled:null,\n    componentMounted:false,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    redeemableBalance:null,\n    fastBalanceSelector:{},\n    curveAvailableTokens:{},\n    tokenFeesPercentage:null,\n    redeemUnevenAmounts:false,\n    curveDepositContract:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  changeFromToken = (selectedToken) => {\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    this.props.goToSection(`${curveConfig.params.route}/${selectedToken}`);\n  }\n\n  getSelectedToken(){\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    return this.props.urlParams.param1 && curveAvailableTokens[this.props.urlParams.param1] ? this.props.urlParams.param1 : Object.keys(curveAvailableTokens)[0];\n  }\n\n  setSelectedToken = async (selectedToken) => {\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n    this.setState({\n      tokenConfig,\n      selectedToken,\n      availableTokens,\n      curveTokenConfig\n    });\n  }\n\n  loadTokensInfo = async () => {\n\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    this.setState({\n      curveAvailableTokens\n    });\n\n    const selectedToken = this.getSelectedToken();\n    // Check if token is set the query params\n    if (selectedToken && selectedToken !== this.props.urlParams.param1){\n      this.changeFromToken(selectedToken);\n      return await this.setSelectedToken(selectedToken);\n    } else if (selectedToken !== this.state.selectedToken){\n      await this.setSelectedToken(selectedToken);\n    }\n\n    const newState = {...this.state};\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n\n    if (newState.selectedToken !== selectedToken){\n      newState.selectedToken = selectedToken;\n    }\n\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n\n    const [\n      curveZapContract,\n      curvePoolContract,\n      curveSwapContract,\n      curveDepositContract\n    ] = await Promise.all([\n      this.functionsUtil.getCurveZapContract(),\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract()\n    ]);\n\n    newState.curveZapContract = curveZapContract;\n    newState.curvePoolContract = curvePoolContract;\n    newState.curveSwapContract = curveSwapContract;\n    newState.curveDepositContract = curveDepositContract;\n\n    newState.availableTokens = availableTokens;\n\n\n    // console.log('curveTokenPrice',newState.curveTokenPrice.toFixed(6),'curveTokenBalance',newState.curveTokenBalance.toFixed(6),'redeemableBalance',newState.redeemableBalance.toFixed(20),'tokenBalance',newState.tokenBalance.toFixed(20));\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[selectedToken] = tokenConfig;\n\n    newState.tokenConfig = tokenConfig;\n    newState.curveTokenConfig = curveTokenConfig;\n\n    if (this.props.account){\n      [\n        newState.curveTokenPrice,\n        newState.curveTokenBalance,\n        newState.tokenFeesPercentage,\n        newState.tokenFees,\n        newState.tokenBalance,\n        newState.idleTokenBalance,\n        newState.tokenApproved,\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokenPrice(),\n        this.functionsUtil.getCurveTokenBalance(),\n        this.functionsUtil.getTokenFees(tokenConfig),\n        this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n        this.functionsUtil.getTokenBalance(selectedToken,this.props.account),\n        this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n        this.functionsUtil.checkTokenApproved(selectedToken,curveDepositContract.address,this.props.account),\n      ]);\n\n\n      newState.processing = {\n        redeem:{\n          txHash:null,\n          loading:false\n        },\n        deposit:{\n          txHash:null,\n          loading:false\n        },\n        approve:{\n          txHash:null,\n          loading:false\n        },\n      };\n      newState.inputValue = {\n        redeem:null,\n        deposit:null\n      };\n      newState.fastBalanceSelector = {\n        redeem:null,\n        deposit:null\n      };\n\n      newState.componentMounted = true;\n      newState.depositBalance = newState.tokenBalance;\n      newState.redeemBalance = newState.redeemableBalance;\n      newState.govTokensDisabled = tokenConfig.govTokensDisabled;\n      newState.canRedeem = newState.curveTokenBalance && newState.curveTokenBalance.gt(0);\n      newState.canDeposit = newState.idleTokenBalance && newState.idleTokenBalance.gt(0);\n      newState.redeemableBalance = newState.curveTokenBalance ? newState.curveTokenBalance.times(newState.curveTokenPrice) : this.functionsUtil.BNify(0);\n    }\n\n    this.setState(newState);\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async calculateSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,this.state.curvePoolContract.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositBalance = amount;\n        newState.depositSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      case 'redeem':\n        newState.redeemBalance = amount;\n        newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.urlParams.param1 !== this.props.urlParams.param1;\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n\n    if (accountChanged || transactionsChanged || tokenChanged){\n      await this.loadTokensInfo();\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const redeemUnevenAmountsChanged = this.state.redeemUnevenAmounts !== prevState.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n    if (actionChanged || fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    if (actionChanged){\n      this.updateAssetSelector();\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  updateAssetSelector = async () => {\n    const newState = {};\n    switch (this.state.action){\n      case 'deposit':\n        this.loadTokensInfo();\n      break;\n      case 'redeem':\n        // this.loadTokensInfo();\n        const tokenConfig = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n        newState.curveAvailableTokens = {};\n        newState.curveTokenConfig = tokenConfig;\n        newState.selectedToken = tokenConfig.token;\n        newState.curveAvailableTokens[tokenConfig.token] = tokenConfig;\n      break;\n      default:\n      break;\n    }\n\n    this.setState(newState);\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.state.tokenBalance ? this.functionsUtil.BNify(this.state.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          amount = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n        } else {\n          amount = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  changeInputValue = (e) => {\n    if (!this.state.action){\n      return false;\n    }\n\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && amount.gt(this.state.tokenBalance));\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.curveTokenBalance)) );\n        } else {\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.redeemableBalance)) );\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = this.state.tokenApproved;\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.state.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.functionsUtil.enableERC20(this.state.selectedToken,this.state.curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const inputValue = this.state.inputValue[this.state.action];\n    const selectedPercentage = this.getFastBalanceSelector();\n\n    let loading = true;\n\n    switch (this.state.action){\n      // Handle deposit in curve\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.state.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if (this.state.metaTransactionsEnabled && txError){\n            this.setState({\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,tokensToDeposit);\n        const minMintAmount = await this.functionsUtil.genericContractCall(this.state.curveSwapContract.name,'calc_token_amount',[amounts,true]);\n        const depositParams = [amounts,minMintAmount];\n\n        // No need for callback atm\n        contractSendResult = await this.props.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n      break;\n      case 'redeem':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        let curveTokensToRedeem = null;\n        if (selectedPercentage){\n          curveTokensToRedeem = this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage);\n        } else {\n          curveTokensToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals));\n          if (!this.state.redeemUnevenAmounts){\n            const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n            curveTokensToRedeem = curveTokensToRedeem.div(curveTokenPrice);\n          }\n        }\n\n        if (!curveTokensToRedeem){\n          return false;\n        }\n\n        const callbackRedeem = (tx,error) => {\n          const txSucceeded = tx.status === 'success';\n\n          // Send Google Analytics event\n          const eventData = {\n            eventLabel: tx.status,\n            eventCategory: `CurveRedeem`,\n            eventAction: this.state.selectedToken,\n            eventValue: curveTokensToRedeem.toFixed()\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          }\n        };\n\n        const callbackReceiptRedeem = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const _amount = this.functionsUtil.normalizeTokenAmount(curveTokensToRedeem,this.state.curvePoolContract.decimals).toString();\n        let min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,0);\n\n        const contractName = this.state.curveDepositContract.name;\n        if (this.state.redeemUnevenAmounts){\n          console.log('remove_liquidity_imbalance',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_imbalance', [min_amounts, _amount], null, callbackRedeem, callbackReceiptRedeem);\n        } else {\n          min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,_amount);\n          console.log('remove_liquidity',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts], null, callbackRedeem, callbackReceiptRedeem);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    // console.log('contractSendResult',contractSendResult);\n\n    if (contractSendResult !== false){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    const userHasFunds = this.props.account && this.state.curveTokenBalance && this.functionsUtil.BNify(this.state.curveTokenBalance).gt(0);\n    const canPerformAction = true;\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            {\n              <Breadcrumb\n                {...this.props}\n                isMobile={this.props.isMobile}\n                path={['Boost',this.state.selectedToken]}\n                handleClick={ e => this.props.goToSection('best') }\n                text={this.functionsUtil.getGlobalConfig(['strategies','best','title'])}\n              />\n            }\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Curve Pool\n        </Title>\n        <Flex\n          width={1}\n        >\n          <Flex\n            width={1}\n            alignItems={'center'}\n            flexDirection={'column'}\n            justifyContent={'center'}\n          >\n            <Flex\n              width={[1,0.36]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Box\n                width={1}\n              >\n                <Text\n                  mb={1}\n                >\n                  Select your asset:\n                </Text>\n                <AssetSelector\n                  {...this.props}\n                  id={'token-from'}\n                  onChange={this.changeFromToken}\n                  selectedToken={this.state.selectedToken}\n                  tokenConfig={this.state.curveTokenConfig}\n                  showBalance={this.state.action === 'deposit'}\n                  availableTokens={this.state.curveAvailableTokens}\n                />\n              </Box>\n              <Box\n                width={1}\n              >\n                {\n                  canPerformAction ? (\n                    <Flex\n                      mt={2}\n                      flexDirection={'column'}\n                    >\n                      <Text\n                        mb={2}\n                      >\n                        Choose the action:\n                      </Text>\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('deposit');\n                            }\n                          }}\n                          isInteractive={true}\n                          isActive={ this.state.action === 'deposit' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'deposit'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Deposit\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('redeem');\n                            }\n                          }}\n                          isInteractive={true}\n                          isDisabled={ !this.state.canRedeem }\n                          isActive={ this.state.action === 'redeem' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'redeem'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Redeem\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                      </Flex>\n                    </Flex>\n                  ) : (\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    >\n                      <Icon\n                        size={'2.3em'}\n                        name={'MoneyOff'}\n                        color={'cellText'}\n                      />\n                      <Text\n                        mt={2}\n                        fontSize={2}\n                        color={'cellText'}\n                        textAlign={'center'}\n                      >\n                        You don't have any {this.state.tokenConfig.idle.token} in your wallet.\n                      </Text>\n                    </Flex>\n                  )\n                }\n              </Box>\n            </Flex>\n            <Flex\n              width={1}\n              mt={ this.props.account ? 3 : 0 }\n            >\n            {\n              this.state.action === 'deposit' ? (\n                <CurveDeposit\n                  {...this.props}\n                  {...this.state}\n                />\n              ) : this.state.action === 'redeem' && (\n                <CurveRedeem\n                  {...this.props}\n                  {...this.state}\n                />\n              )\n            }\n            </Flex>\n          </Flex>\n        </Flex>\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverviewCurve\n                {...this.props}\n                tokenFees={this.state.tokenFees}\n                tokenConfig={this.state.tokenConfig}\n                selectedToken={this.state.selectedToken}\n                availableTokens={this.state.availableTokens}\n                enabledTokens={Object.keys(this.state.availableTokens)}\n              />\n            </Flex>\n        }\n        {\n          /*\n          this.props.account && !this.state.govTokensDisabled[this.state.selectedToken] && Object.keys(availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id=\"earnings-estimation\"\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(availableGovTokens)}\n                handleClick={(props) => {}}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.33,0.22]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.26],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    props:{\n                      width:[0.33,0.26],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                      {\n                        name:'tooltip',\n                        props:{\n                          placement:'bottom',\n                          message:'The shown balance may be lower than the real one.',\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    mobile:false,\n                    props:{\n                      width: 0.26,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                ]}\n                {...this.props}\n                availableTokens={availableGovTokens}\n              />\n            </Flex>\n          */\n        }\n        {\n          /*\n          this.props.account && \n            <Flex\n              mb={[3,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'estimated-earnings-container'}\n            >\n              <Title my={[3,4]}>Estimated earnings</Title>\n              <EstimatedEarnings\n                {...this.props}\n              />\n            </Flex>\n          */\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              availableTokens={this.state.availableTokens}\n              enabledTokens={Object.keys(this.state.availableTokens)}\n              enabledActions={['CurveIn','CurveOut','CurveZapIn','CurveZapOut','CurveTransferIn','CurveTransferOut','CurveDepositIn','CurveDepositOut']}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.state.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport {\n  Text,\n  Modal,\n  Button,\n  Form,\n  Icon,\n  Flex,\n  Link\n} from \"rimble-ui\";\nimport axios from 'axios';\nimport colors from '../../colors';\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\nimport globalConfigs from '../../configs/globalConfigs';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\n\nclass WelcomeModal extends React.Component {\n\n  state = {\n    email:null,\n    error:false,\n    subscribed:false,\n    sendingForm:false\n  };\n\n  functionsUtil = null;\n\n  constructor(props) {\n    super(props);\n    this.functionsUtil = new FunctionsUtil(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleValidation = this.handleValidation.bind(this);\n  }\n\n  componentDidUpdate = async () => {\n    this.functionsUtil.setProps(this.props);\n  }\n\n  sendUserInfo = (sendEmail=true) => {\n    const walletProvider = this.functionsUtil.getWalletProvider();\n    const userInfo = {\n      address: this.props.account,\n      provider: walletProvider\n    };\n\n    if (sendEmail && this.state.email !== null){\n      userInfo.email = this.state.email;\n    }\n\n    this.functionsUtil.simpleIDPassUserInfo(userInfo);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    if (!this.state.email){\n      return false;\n    }\n\n    const callback = () => {\n      this.setState({\n        sendingForm:false,\n        subscribed:true\n      });\n      window.setTimeout(this.props.closeModal,2500);\n    };\n\n    this.sendUserInfo();\n\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'send_email',\n      eventLabel: 'WelcomeModal'\n    });\n\n    axios.post(globalConfigs.newsletterSubscription.endpoint, {\n      'email': this.state.email\n    }).then(r => {\n      callback();\n    })\n    .catch(err => {\n      callback();\n    });\n\n    // Set signedUp in the localStorage\n    if (localStorage){\n      const walletAddress = this.props.account.toLowerCase();\n      let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : null;\n      if (lastLogin && lastLogin[walletAddress] && !lastLogin[walletAddress].signedUp){\n        lastLogin[walletAddress].signedUp = true;\n        this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n      }\n    }\n\n    this.setState({\n      sendingForm:true\n    })\n  };\n\n  closeModal = async () => {\n\n    const closeModal = () => {\n      this.props.closeModal();\n    };\n\n    try{\n      // Prevent sending email\n      this.sendUserInfo(false);\n\n      // Send Google Analytics event\n      if (globalConfigs.analytics.google.events.enabled){\n        this.functionsUtil.sendGoogleAnalyticsEvent({\n          eventCategory: 'UI',\n          eventAction: 'continue_without_email',\n          eventLabel: 'WelcomeModal'\n        },closeModal);\n\n        // Call callback after 1 second if stuck\n        setTimeout(closeModal,1000);\n      } else {\n        closeModal();\n      }\n    } catch (err) {\n      closeModal();\n    }\n  }\n\n  handleValidation(e) {\n    if (e && e.target) {\n      this.setState({ email: e.target.value });\n      e.target.parentNode.classList.add(\"was-validated\");\n    }\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        {\n          this.state.subscribed ? (\n            <ModalCard\n              closeFunc={this.closeModal}\n            >\n              <ModalCard.Header title={'All done'} icon={`images/done.svg`}></ModalCard.Header>\n              <ModalCard.Body>\n                <Flex width={1} flexDirection={'column'} mb={3}>\n                  <Text color={'dark-gray'} textAlign={'center'} fontSize={3} my={0}>\n                    Thanks for subscribing!\n                  </Text>\n                  <Button\n                    my={3}\n                    width={'100%'}\n                    borderRadius={4}\n                    onClick={this.closeModal}\n                  >\n                    CLOSE\n                  </Button>\n                </Flex>\n              </ModalCard.Body>\n            </ModalCard>\n          ) : (\n            <ModalCard closeFunc={this.closeModal}>\n              <ModalCard.Header title={'Stay up-to-date!'} icon={`images/notification.svg`}>\n              </ModalCard.Header>\n              <ModalCard.Body>\n                <Form onSubmit={this.handleSubmit}>\n                  <Flex width={1} flexDirection={'column'} mb={3}>\n                    <Text color={'mid-gray'} textAlign={'left'} fontSize={3} my={0}>\n                      Add your e-mail to receive updates about:\n                    </Text>\n                  </Flex>\n                  <Flex width={1} flexDirection={'column'} mt={2}>\n                    <Flex my={2} flexDirection={'row'} alignItems={'center'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Performance reports\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        New Protocols & Tokens\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Latest updates\n                      </Text>\n                    </Flex>\n                    <Form.Field width={1} label={''}>\n                      <Form.Input\n                        px={3}\n                        py={4}\n                        required\n                        width={1}\n                        border={0}\n                        fontSize={3}\n                        type={\"email\"}\n                        name={\"EMAIL\"}\n                        outline={'none'}\n                        borderColor={'cardBorder'}\n                        backgroundColor={'cardBg'}\n                        textAlign={['center','left']}\n                        className={header_styles.input}\n                        placeholder={'Enter your e-mail'}\n                        onChange={this.handleValidation}\n                      />\n                    </Form.Field>\n                    <Flex mb={3} flexDirection={'column'} alignItems={'center'} justifyContent={'center'}>\n                      <ButtonLoader\n                        buttonText={'SUBMIT'}\n                        isLoading={this.state.sendingForm}\n                        buttonProps={{className:header_styles.gradientButton,width:'100%',type:'submit'}}\n                      >\n                      </ButtonLoader>\n                      <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without e-mail</Link>\n                    </Flex>\n                  </Flex>\n                </Form>\n              </ModalCard.Body>\n            </ModalCard>\n          )\n        }\n      </Modal>\n    );\n  }\n}\n\nexport default WelcomeModal;\n","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\n\nclass MigrateModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'continue_without_migrate',\n        eventLabel: 'MigrateModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowMigrateModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowMigrateModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = () => {\n    const tokenMigrationRoute = this.functionsUtil.getGlobalConfig(['tools','tokenMigration','route']);\n    this.props.goToSection('tools/'+tokenMigrationRoute);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            iconHeight={'40px'}\n            title={'Migrate to Idle'}\n            icon={`images/migrate.svg`}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={3}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                You can migrate your funds from Compound, Aave, Fulcrum, Yearn and Idle V2 with just one transaction.\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                my={2}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.protocolsTokensBalances && Object.keys(this.props.protocolsTokensBalances).map( token => (\n                    <Flex\n                      mb={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      key={`token_${token}`}\n                      justifyContent={'space-between'}\n                    >\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'icon',\n                          props:{\n                            mr:2,\n                            height:'2.3em'\n                          }\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                      <SmartNumber\n                        mr={2}\n                        {...fieldProps}\n                        minPrecision={5}\n                        number={this.props.protocolsTokensBalances[token].balance} \n                      />\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'tokenName',\n                          props:fieldProps\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                    </Flex>\n                  ) )\n                }\n                <Text\n                  mb={0}\n                  fontSize={1}\n                  color={'red'}\n                  fontWeight={500}\n                  textAlign={'center'}\n                >\n                  Please be aware that by migrating your tokens from other protocols, your open positions might be liquidated if collateralized with migrated tokens.\n                </Text>\n              </Flex>\n              <Flex\n                mb={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <ButtonLoader\n                  buttonText={'MIGRATE'}\n                  handleClick={this.migrate}\n                  isLoading={this.state.sendingForm}\n                  buttonProps={{\n                    width:['100%','50%'],\n                    className:header_styles.gradientButton\n                  }}\n                >\n                </ButtonLoader>\n                {\n                /*\n                <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without migrate</Link>\n                */\n                }\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default MigrateModal;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass UpgradeModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'close_upgrade_modal',\n        eventLabel: 'UpgradeModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowUpgradeModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowUpgradeModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = async (token,strategy=null) => {\n\n    if (!strategy){\n      strategy = this.props.selectedStrategy;\n    }\n\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  convert = async (token) => {\n    const convertTool = this.functionsUtil.getGlobalConfig(['tools','tokenMigration']);\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n\n    if (!this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            icon={`images/migrate.svg`}\n            title={'Upgrade Available'}\n            iconHeight={['35px','40px']}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={[2,3]}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                Idle now supports yield farming and governance tokens distribution, migrate now your portfolio with just one click!\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n              >\n                <Flex\n                  fontSize={[2,3]}\n                  width={[0.5,0.28]}\n                  fontWeight={[4,5]}\n                  color={'copyColor'}\n                >\n                  {\n                    this.props.isMobile ? 'ASSET' : 'ASSET TO MIGRATE'\n                  }\n                </Flex>\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      BALANCE\n                    </Flex>\n                  )\n                }\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      OLD APY\n                    </Flex>\n                  )\n                }\n                <Flex\n                  fontSize={[2,3]}\n                  fontWeight={[4,5]}\n                  width={[0.25,0.19]}\n                  color={'copyColor'}\n                  justifyContent={'center'}\n                >\n                  {\n                    this.props.isMobile ? 'APY' : 'NEW APY'\n                  }\n                </Flex>\n                <Flex\n                  width={[0.25,0.15]}\n                >\n                  \n                </Flex>\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.tokensToMigrate && Object.keys(this.props.tokensToMigrate).map( tokenKey => {\n                    const token = this.props.tokensToMigrate[tokenKey].token;\n                    const strategy = this.props.tokensToMigrate[tokenKey].strategy;\n                    const tokenConfig = this.props.tokensToMigrate[tokenKey].tokenConfig;\n                    const balance = this.props.tokensToMigrate[tokenKey].oldContractBalanceFormatted;\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${tokenKey}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={[0.5,0.28]}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:['1.8em','2.3em']\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                        </Flex>\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <SmartNumber\n                                {...fieldProps}\n                                minPrecision={5}\n                                number={balance}\n                                flexProps={{\n                                  justifyContent:'center'\n                                }}\n                              />\n                            </Flex>\n                          )\n                        }\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <AssetField\n                                {...this.props}\n                                fieldInfo={{\n                                  name:'oldApy',\n                                  props:fieldProps\n                                }}\n                                token={token}\n                                tokenConfig={tokenConfig}\n                              />\n                            </Flex>\n                          )\n                        }\n                        <Flex\n                          width={[0.25,0.19]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={token}\n                            tokenConfig={tokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={[0.25,0.15]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.migrate(token,strategy) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.oldIdleTokensToMigrate && Object.keys(this.props.oldIdleTokensToMigrate).map( token => {\n                    const tokenConfig = this.props.oldIdleTokensToMigrate[token].tokenConfig;\n\n                    if (!tokenConfig){\n                      return null;\n                    }\n\n                    const balance = this.props.oldIdleTokensToMigrate[token].balance;\n                    let newTokenConfig = null;\n\n                    if (tokenConfig.availableStrategies && !this.props.availableTokens[tokenConfig.baseToken]){\n                      newTokenConfig = this.props.availableStrategies[tokenConfig.availableStrategies[0]][tokenConfig.baseToken];\n                    } else {\n                      newTokenConfig = this.props.availableTokens[tokenConfig.baseToken];\n                    }\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${token}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={0.28}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:'2.3em'\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <SmartNumber\n                            {...fieldProps}\n                            minPrecision={5}\n                            number={balance}\n                            flexProps={{\n                              justifyContent:'center'\n                            }}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'oldApy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.15}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.convert(token) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                my={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <RoundButton\n                  handleClick={this.closeModal}\n                  buttonProps={{\n                    fontSize:[2,3],\n                    width:['100%','40%'],\n                  }}\n                >\n                  MIGRATE LATER\n                </RoundButton>\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default UpgradeModal;","import React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport { Flex, Card, Icon, Text } from 'rimble-ui';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardMenu from '../DashboardMenu/DashboardMenu';\n\n// Import page components\nimport Stats from '../Stats/Stats';\nimport Utils from '../Utils/Utils';\nimport AssetPage from '../AssetPage/AssetPage';\nimport RoundButton from '../RoundButton/RoundButton';\nimport BetaModal from \"../utilities/components/BetaModal\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CurveStrategy from '../CurveStrategy/CurveStrategy';\nimport WelcomeModal from \"../utilities/components/WelcomeModal\";\nimport TooltipModal from \"../utilities/components/TooltipModal\";\nimport MigrateModal from \"../utilities/components/MigrateModal\";\nimport UpgradeModal from \"../utilities/components/UpgradeModal\";\nimport DashboardHeader from '../DashboardHeader/DashboardHeader';\n\nclass Dashboard extends Component {\n  state = {\n    menu:[],\n    baseRoute:null,\n    clickEvent:null,\n    activeModal:null,\n    currentRoute:null,\n    pageComponent:null,\n    currentSection:null,\n    selectedSection:null,\n    tokensToMigrate:null,\n    showResetButton:false,\n    selectedSubsection:null,\n    pageComponentProps:null,\n    oldIdleTokensToMigrate:null,\n    protocolsTokensBalances:null,\n  };\n\n  timeoutId = null;\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    window.functionsUtil = this.functionsUtil;\n  }\n\n  async loadMenu() {\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n    const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n    const menu = Object.keys(strategies).filter( s => ( !strategies[s].comingSoon ) ).map(strategy => ({\n        submenu:[],\n        color:'#fff',\n        selected:false,\n        route:baseRoute+'/'+strategy,\n        label:strategies[strategy].title,\n        image:strategies[strategy].icon,\n        bgColor:strategies[strategy].color,\n        component:strategies[strategy].component,\n        imageInactive:strategies[strategy].iconInactive,\n        imageInactiveDark:strategies[strategy].iconInactiveDark\n      })\n    );\n\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n\n    // Add Curve\n    if (curveConfig.enabled){\n      const curveParams = Object.assign({\n        submenu:[],\n        selected:false,\n        component:CurveStrategy,\n      },curveConfig.params);\n\n      menu.push(curveParams);\n    }\n\n    // Add Stake\n    const stakeConfig = this.functionsUtil.getGlobalConfig(['tools','stake']);\n    if (stakeConfig.enabled){\n      menu.push(\n        {\n          submenu:[],\n          label:'Stake',\n          selected:false,\n          color:'dark-gray',\n          icon:stakeConfig.icon,\n          route:'/dashboard/stake',\n          component:Utils,\n          componentProps:{\n            showBreadCrumb:false,\n            toolProps:stakeConfig.props,\n            selectedSubsection:stakeConfig\n          },\n          bgColor:this.props.theme.colors.primary,\n        }\n      );\n    }\n\n    // Add tools\n    menu.push(\n      {\n        icon:'Build',\n        label:'Tools',\n        color:'dark-gray',\n        component:Utils,\n        selected:false,\n        route:'/dashboard/tools',\n        bgColor:this.props.theme.colors.primary,\n        submenu:Object.values(this.functionsUtil.getGlobalConfig(['tools'])).filter( u => (u.enabled) )\n      }\n    );\n\n    // Add Stats\n    menu.push(\n      {\n        icon:'Equalizer',\n        label:'Stats',\n        bgColor:'#21f36b',\n        color:'dark-gray',\n        component:Stats,\n        selected:false,\n        route:'/dashboard/stats',\n        submenu:[]\n      }\n    );\n\n    // Add Forum\n    menu.push(\n      {\n        submenu:[],\n        icon:'Forum',\n        mobile:false,\n        label:'Forum',\n        selected:false,\n        component:null,\n        color:'dark-gray',\n        bgColor:'#ff0000',\n        isExternalLink:true,\n        route:this.functionsUtil.getGlobalConfig(['forumURL'])\n      }\n    );\n\n    await this.setState({\n      menu\n    });\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  openTooltipModal = (modalTitle,modalContent) => {\n\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: modalTitle,\n      eventLabel: 'TooltipModal'\n    });\n\n    this.setState({\n      modalTitle,\n      modalContent\n    },() => {\n      this.setActiveModal('tooltip');\n    })\n  }\n\n  setActiveModal = (activeModal) => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadParams() {\n    const { match: { params } } = this.props;\n\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n    let currentRoute = baseRoute;\n\n    let pageComponent = null;\n    let selectedToken = null;\n    let currentSection = null;\n    let selectedStrategy = null;\n    let pageComponentProps = null;\n\n    // Set strategy\n    if (params.section){\n      currentSection = params.section;\n      const param1 = params.param1;\n      const param2 = params.param2;\n\n      const section_is_strategy = Object.keys(this.props.availableStrategies).includes(currentSection.toLowerCase());\n      const param1_is_strategy = param1 && Object.keys(this.props.availableStrategies).includes(param1.toLowerCase());\n\n      if (section_is_strategy || param1_is_strategy){\n        selectedStrategy = section_is_strategy ? currentSection : param1;\n        currentRoute += '/'+selectedStrategy;\n\n        // Set token\n        const param1_is_token = param1 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param1.toUpperCase());\n        const param2_is_token = param2 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param2.toUpperCase());\n        if (param1_is_token || param2_is_token){\n          selectedToken = param1_is_token ? param1.toUpperCase() : param2.toUpperCase();\n          currentRoute += '/'+selectedToken;\n\n          if (section_is_strategy){\n            pageComponent = AssetPage;\n          }\n        }\n      } else {\n        currentRoute += '/'+params.section;\n\n        if (params.param1 && params.param1.length){\n          currentRoute += '/'+params.param1;\n        }\n\n        // if (params.param2 && params.param2.length){\n        //   currentRoute += '/'+params.param2;\n        // }\n      }\n    }\n\n    const menu = this.state.menu;\n\n    let selectedSection = null;\n    let selectedSubsection = null;\n\n    menu.forEach(m => {\n      m.selected = false;\n      const sectionRoute = baseRoute+'/'+params.section;\n      if (currentRoute.toLowerCase() === m.route.toLowerCase() || ( !m.submenu.length && m.route.toLowerCase() === sectionRoute.toLowerCase() )){\n        m.selected = true;\n        if (pageComponent === null){\n          pageComponent = m.component;\n          pageComponentProps = m.componentProps;\n        }\n      } else if (m.submenu.length) {\n        m.submenu.forEach(subm => {\n          subm.selected = false;\n          const submRoute = m.route+'/'+subm.route;\n          if (submRoute.toLowerCase() === currentRoute.toLowerCase()){\n            m.selected = true;\n            subm.selected = true;\n\n            // Set component, if null use parent\n            if (pageComponent === null){\n              if (subm.component){\n                pageComponent = subm.component;\n                pageComponentProps = m.componentProps;\n              } else {\n                pageComponent = m.component;\n                pageComponentProps = m.componentProps;\n              }\n            }\n          }\n\n          // Set selected subsection\n          if (subm.selected){\n            selectedSubsection = subm;\n          }\n\n        });\n      }\n\n      // Set selected section\n      if (m.selected){\n        selectedSection = m;\n      }\n    });\n\n    // console.log('pageComponent',params,pageComponent);\n\n    // Exit if no strategy and token selected\n    if (!pageComponent){\n      return this.goToSection('/',false);\n    }\n\n    // console.log('loadParams',selectedStrategy,selectedToken);\n    await this.props.setStrategyToken(selectedStrategy,selectedToken);\n\n    await this.setState({\n      menu,\n      params,\n      baseRoute,\n      currentRoute,\n      pageComponent,\n      currentSection,\n      selectedSection,\n      pageComponentProps,\n      selectedSubsection\n    });\n  }\n\n  componentWillUnmount(){\n    if (this.timeoutId){\n      window.clearTimeout(this.timeoutId);\n    }\n  }\n\n  async componentWillMount() {\n\n    this.props.setCurrentSection('dashboard');\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n  }\n\n  async componentDidMount() {\n\n    this.timeoutId = window.setTimeout(() => {\n      if (!this.props.accountInizialized || !this.props.contractsInitialized){\n        this.setState({\n          showResetButton:true\n        });\n      }\n    },20000);\n\n    if (!this.props.web3){\n      return this.props.initWeb3();\n    } else if (!this.props.accountInizialized){\n      return this.props.initAccount();\n    } else if (!this.props.contractsInitialized){\n      return this.props.initializeContracts();\n    }\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n\n    const viewOnly = this.props.connectorName === 'custom';\n    if (!viewOnly){\n      this.checkModals();\n    }\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n\n    this.loadUtils();\n\n    const prevParams = prevProps.match.params;\n    const params = this.props.match.params;\n\n    if (JSON.stringify(prevParams) !== JSON.stringify(params)){\n      await this.setState({\n        pageComponent:null\n      }, () => {\n        this.loadParams();\n      });\n    }\n\n    const viewOnly = this.props.connectorName === 'custom';\n    const accountChanged = prevProps.account !== this.props.account;\n    const strategyChanged = this.props.selectedStrategy && prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const accountInizialized = this.props.accountInizialized && prevProps.accountInizialized !== this.props.accountInizialized;\n    const contractsInitialized = this.props.contractsInitialized && prevProps.contractsInitialized !== this.props.contractsInitialized;\n\n    if (!viewOnly && (accountChanged || accountInizialized || contractsInitialized || strategyChanged)){\n      this.checkModals();\n    }\n  }\n\n  async checkModals(){\n\n    if (this.props.selectedToken || !this.props.accountInizialized || !this.props.contractsInitialized || !this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    await this.checkBetaApproval();\n    await this.checkTokensToMigrate();\n    await this.checkWelcomeModal();\n    await this.checkProtocolsTokensBalances();\n  }\n\n  async checkBetaApproval(){\n    const isOriginUrl = this.functionsUtil.checkUrlOrigin();\n    const isBetaApproved = this.functionsUtil.getStoredItem('betaApproved',false,false);\n\n    // Show Beta Warning modal\n    if (!isOriginUrl && !isBetaApproved){\n      const activeModal = 'beta';\n      if (activeModal !== this.state.activeModal){\n        await this.setState({\n          activeModal,\n        });\n\n        return activeModal;\n      }\n    }\n  }\n\n  async checkTokensToMigrate(){\n\n    const showUpgradeModal = this.functionsUtil.getStoredItem('dontShowUpgradeModal',false,null) !== null ? false : true;\n    if (this.props.selectedToken || !showUpgradeModal || !this.props.availableTokens || this.state.activeModal !== null){\n      return null;\n    }\n\n    const tokensToMigrate = await this.functionsUtil.getTokensToMigrate();\n    const oldIdleTokensToMigrate = await this.functionsUtil.getProtocolsTokensBalances('idle');\n\n    // console.log('tokensToMigrate',tokensToMigrate);\n    \n    if ((tokensToMigrate && Object.keys(tokensToMigrate).length>0) || (oldIdleTokensToMigrate && Object.keys(oldIdleTokensToMigrate).length>0)){\n      const activeModal = 'upgrade';\n      if (activeModal !== this.state.activeModal){\n        await this.setState({\n          activeModal,\n          tokensToMigrate,\n          oldIdleTokensToMigrate\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkWelcomeModal(){\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show welcome modal\n    if (this.props.account && this.state.activeModal === null){\n      let welcomeIsOpen = false;\n\n      const welcomeModalProps = this.functionsUtil.getGlobalConfig(['modals','welcome']);\n\n      if (welcomeModalProps.enabled && localStorage){\n\n        // Check the last login of the wallet\n        const currTime = new Date().getTime();\n        const walletAddress = this.props.account.toLowerCase();\n        let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : {};\n\n        // First login\n        if (!lastLogin[walletAddress]){\n          lastLogin[walletAddress] = {\n            'signedUp':false,\n            'lastTime':currTime\n          };\n          welcomeIsOpen = true;\n        // User didn't sign up\n        } else if (!lastLogin[walletAddress].signedUp) {\n          const lastTime = parseInt(lastLogin[walletAddress].lastTime);\n          const timeFromLastLogin = (currTime-lastTime)/1000;\n          welcomeIsOpen = timeFromLastLogin>=welcomeModalProps.frequency; // 1 day since last login\n        }\n\n        if (welcomeIsOpen){\n          lastLogin[walletAddress].lastTime = currTime;\n          this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n        }\n      }\n\n      const activeModal = welcomeIsOpen ? 'welcome' : this.state.activeModal;\n      if (this.state.activeModal !== activeModal){\n        await this.setState({\n          activeModal\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkProtocolsTokensBalances() {\n\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show migration modal if no other modals are opened\n    const migrateModalEnabled = this.functionsUtil.getGlobalConfig(['modals','migrate','enabled']);\n    const showMigrateModal = this.functionsUtil.getStoredItem('dontShowMigrateModal',false,null) !== null ? false : true;\n\n    if (this.state.activeModal === null && migrateModalEnabled && showMigrateModal && !this.state.protocolsTokensBalances){\n      const protocolsTokensBalances = await this.functionsUtil.getProtocolsTokensBalances();\n      const activeModal = protocolsTokensBalances && Object.keys(protocolsTokensBalances).length>0 ? 'migrate' : null;\n      const newState = {\n        activeModal,\n        protocolsTokensBalances\n      };\n      await this.setState(newState);\n      return activeModal;\n    }\n\n    return null;\n  }\n\n  goToSection(section,isDashboard=true){\n\n    // Remove dashboard route\n    if (isDashboard){\n      section = section.replace(this.state.baseRoute +'/','');\n    }\n\n    const newRoute = isDashboard ? this.state.baseRoute +'/' + section : section;\n    window.location.hash=newRoute;\n\n    // Send GA event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'goToSection',\n      eventLabel: newRoute\n    });\n\n    window.scrollTo(0, 0);\n  }\n\n  logout = async () => {\n    this.props.setConnector('Infura','Infura');\n    await this.props.initWeb3('Infura');\n  }\n\n  changeToken(selectedToken){\n    selectedToken = selectedToken.toUpperCase();\n    if (Object.keys(this.props.availableTokens).includes(selectedToken)){\n      const routeParts = [];\n\n      // Add section\n      if (this.state.currentSection.toLowerCase() !== this.props.selectedStrategy.toLowerCase()){\n        routeParts.push(this.state.currentSection);\n      }\n\n      // Add strategy\n      routeParts.push(this.props.selectedStrategy); \n\n      // Add token\n      routeParts.push(selectedToken);\n\n      this.goToSection(routeParts.join('/'));\n    }\n  }\n\n  propagateClickEvent(clickEvent){\n    this.setState({\n      clickEvent:clickEvent.target\n    });\n  }\n\n  render() {\n    const PageComponent = this.state.pageComponent ? this.state.pageComponent : null;\n    return (\n      <Flex\n        width={'100%'}\n        position={'fixed'}\n        flexDirection={'row'}\n        backgroundColor={['dashboardBg','white']}\n        /*onClick={ e => this.propagateClickEvent(e) }*/\n        height={[(window.innerHeight-61)+'px','100vh']}\n      >\n        <Flex\n          bottom={0}\n          zIndex={99999}\n          width={[1,1/6]}\n          flexDirection={'column'}\n          position={['fixed','relative']}\n        >\n          <Card\n            p={[0,3]}\n            border={0}\n            width={['100vw','auto']}\n            height={['auto','100vh']}\n            backgroundColor={'menuBg'}\n            borderColor={this.props.theme.colors.menuRightBorder}\n            borderRight={`1px solid ${this.props.theme.colors.menuRightBorder}`}\n            >\n            <DashboardMenu\n              {...this.props}\n              menu={this.state.menu}\n            />\n          </Card>\n        </Flex>\n        <Flex\n          py={3}\n          mb={0}\n          px={[3,5]}\n          width={[1,5/6]}\n          style={{\n            overflowY:'scroll',\n            overflowX:'hidden'\n          }}\n          height={['92vh','auto']}\n          flexDirection={'columns'}\n          backgroundColor={'dashboardBg'}\n        >\n          {\n            !this.props.accountInizialized || !this.props.contractsInitialized || !PageComponent ? (\n              <Flex\n                width={1}\n                minHeight={'50vg'}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                {\n                  !this.state.showResetButton ? (\n                    <FlexLoader\n                      textProps={{\n                        textSize:4,\n                        fontWeight:2\n                      }}\n                      loaderProps={{\n                        mb:3,\n                        size:'40px'\n                      }}\n                      flexProps={{\n                        my:3,\n                        flexDirection:'column'\n                      }}\n                      text={ !this.props.accountInizialized ? 'Loading account...' : ( !this.props.contractsInitialized ? 'Loading contracts...' : 'Loading assets...' )}\n                    />\n                  ) : (\n                    <DashboardCard\n                      cardProps={{\n                        p:3,\n                        mt:3,\n                        width:[1,0.35]\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Icon\n                          size={'2.3em'}\n                          name={'Warning'}\n                          color={'cellText'}\n                        />\n                        <Text\n                          mt={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          Idle can't connect to your wallet!<br />Make sure that your wallet is unlocked and try again.\n                        </Text>\n                        <RoundButton\n                          buttonProps={{\n                            mt:3,\n                            width:[1,1/2]\n                          }}\n                          handleClick={this.logout.bind(this)}\n                        >\n                          Logout\n                        </RoundButton>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n              </Flex>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardHeader\n                  clickEvent={this.state.clickEvent}\n                  goToSection={this.goToSection.bind(this)}\n                  {...this.props}\n                />\n                {\n                  PageComponent &&\n                    <PageComponent\n                      {...this.props}\n                      match={{ params:{} }}\n                      urlParams={this.state.params}\n                      changeToken={this.changeToken.bind(this)}\n                      goToSection={this.goToSection.bind(this)}\n                      selectedSection={this.state.selectedSection}\n                      selectedSubsection={this.state.selectedSubsection}\n                      openTooltipModal={this.openTooltipModal.bind(this)}\n                      {...this.state.pageComponentProps}\n                      />\n                }\n              </Flex>\n            )\n          }\n        </Flex>\n        <BetaModal\n          closeModal={this.resetModal}\n          isOpen={this.state.activeModal === 'beta'}\n        />\n        <UpgradeModal\n          {...this.props}\n          closeModal={this.resetModal}\n          goToSection={this.goToSection.bind(this)}\n          tokensToMigrate={this.state.tokensToMigrate}\n          isOpen={this.state.activeModal === 'upgrade'}\n          oldIdleTokensToMigrate={this.state.oldIdleTokensToMigrate}\n        />\n        <MigrateModal\n          {...this.props}\n          closeModal={this.resetModal}\n          goToSection={this.goToSection.bind(this)}\n          isOpen={this.state.activeModal === 'migrate'}\n          protocolsTokensBalances={this.state.protocolsTokensBalances}\n        />\n        <TooltipModal\n          closeModal={this.resetModal}\n          title={this.state.modalTitle}\n          content={this.state.modalContent}\n          isOpen={this.state.activeModal === 'tooltip'}\n        />\n        <WelcomeModal\n          closeModal={this.resetModal}\n          account={this.props.account}\n          simpleID={this.props.simpleID}\n          network={this.props.network.current}\n          tokenName={this.props.selectedToken}\n          initSimpleID={this.props.initSimpleID}\n          baseTokenName={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'welcome'}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default Dashboard;"],"sourceRoot":""}