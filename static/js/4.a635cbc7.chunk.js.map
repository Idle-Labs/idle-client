{"version":3,"sources":["AssetsUnderManagement/AssetsUnderManagement.js","Stats/StatsChart.js","Rebalance/Rebalance.js","utilities/components/DateRangeModal.js","Stats/Stats.js","Utils/Utils.js","FundsOverview/FundsOverview.js","CurveRedeem/CurveRedeem.js","DepositRedeem/DepositRedeem.js","EstimatedEarnings/EstimatedEarnings.js","AssetPage/AssetPage.js","utilities/components/BetaModal.js","CurveDeposit/CurveDeposit.js","PortfolioEquityCurve/PortfolioEquityCurve.js","FundsOverviewCurve/FundsOverviewCurve.js","CurveStrategy/CurveStrategy.js","utilities/components/WelcomeModal.js","utilities/components/MigrateModal.js","utilities/components/UpgradeModal.js","utilities/components/RiskAdjustedModal.js","Dashboard/Dashboard.js"],"names":["AssetsUnderManagement","state","totalAUM","totalAUMEndOfYear","functionsUtil","this","setProps","props","FunctionsUtil","loadUtils","loadTotalAUM","prevProps","prevState","contractsInitialized","availableStrategies","JSON","stringify","getAggregatedStats","avgAPY","plus","times","div","setState","_this2","react__WEBPACK_IMPORTED_MODULE_9___default","a","createElement","rimble_ui__WEBPACK_IMPORTED_MODULE_10__","width","react_countup__WEBPACK_IMPORTED_MODULE_8___default","delay","decimals","decimal","separator","useEasing","duration","start","parseFloat","end","formattingFn","n","formatMoney","_ref2","countUpRef","style","counterStyle","display","color","whiteSpace","fontFamily","theme","fonts","counter","fontWeight","fontWeights","textAlign","isMobile","fontSize","fontSizes","ref","subtitle","_Title_Title__WEBPACK_IMPORTED_MODULE_7__","Object","assign","subtitleProps","span","alignItems","justifyContent","loaderAlign","size","Component","StatsChart","chartProps","chartType","chartData","chartWidth","parseAum","value","parseInt","toFixed","_this","selectedToken","loadApiData","_callee3","maxGridLines","apiResults","apiResults_unfiltered","totalItems","protocols","versionInfo","keys","tempData","gridYStep","itemIndex","daysCount","gridYValues","maxChartValue","axisBottomIndex","daysFrequency","idleChartData","firstIdleBlock","axisBottomMaxValues","divergingData","startTimestamp","endTimestamp","timestamp","date","lastRow","maxRange","i","_i","dates","_i2","_i3","chartValues","prevValue","_i4","prevApr","prevData","avgApy","startBalance","currentBalance","aaveProtocolInfo","_i5","firstTokenPrice","_i6","regenerator_default","wrap","_context3","prev","next","tokenConfig","chartMode","abrupt","length","globalConfigs","stats","versions","idleVersion","Line","t0","moment","_d","getTime","format","deposits","redeems","forEach","row","idleTokens","fixTokenDecimals","idleSupply","idleTokensPrev","eq","diff","minus","gte","Math","max","abs","values","filter","v","sort","b","Bar","push","ceil","indexBy","enableLabel","minValue","maxValue","label","d","axisBottom","tickSize","legend","tickPadding","orient","legendOffset","tickValues","legendPosition","axisLeft","axisRight","tickRotation","abbreviateNumber","markers","axis","lineStyle","strokeOpacity","textStyle","fill","colors","transactions","action","deposit","legendOrientation","legendOffsetX","stroke","strokeDasharray","redeem","padding","labelTextColor","labelSkipWidth","labelSkipHeight","pointSize","useMesh","animate","pointLabel","curve","enableArea","enableSlices","enableGridX","enableGridY","pointBorderWidth","pointLabelYOffset","legends","dataFrom","itemWidth","itemHeight","translateX","translateY","symbolSize","itemsSpacing","direction","anchor","symbolShape","itemTextColor","effects","on","themeMode","ticks","text","sansSerif","grid","line","lineChartStroke","textTransform","tooltip","container","boxShadow","background","pointColor","from","modifiers","margin","top","right","bottom","left","data","xFormatted","strToMoment","point","id","depositFormatted","redeemFormatted","react_default","CustomTooltip","CustomTooltipRow","tokens","hsl","join","map","idlePrice","aum","x","y","toString","p","j","protocolsData","protocolAllocation","protocolAddr","toLowerCase","address","z","BNify","rate","allocation","foundItem","item","pos","indexOf","allocations","name","undefined","xScale","type","xFormat","yFormat","yScale","stacked","sliceTooltip","slideData","slice","points","serieId","serieColor","yFormatted","protocolName","protocolInfo","protocolColor","protocolAllocationFormatted","protocolAllocationPerc","key","concat","protocolData","protocolPaused","foundProtocol","find","tableCell","_ref3","DashboardCard","cardProps","py","px","borderCollapse","height","totalAllocation","reduce","accumulator","allocationPerc","_ref4","_ref5","additionalProtocols","additionalProtocol","protocol","enabledTokens","includes","enabled","unshift","objectSpread","rateField","protocolRate","acc","field","lt","aaveAdditionalAPR","gt","idle","idleRate","isBefore","protocolEarning","defiScore","isNaN","idleScore","apy","isSameOrBefore","aaveProtocolData","pData","apr","days","earnings","earning","daysSinceBeginning","blocknumber","itemPos","floor","tokensProps","tokenProps","isAfter","Date","now","chartRow","baseProfit","firstProtocolData","firstProtocolBlock","rowData","idlePerformance","d1","protocolApy","tokenPrice","asyncForEach","_ref6","asyncToGenerator","mark","_callee2","lastRowData","lastTokenPrice","_context2","_ref7","_callee","tokenExchangeRate","tokenPriceFixed","lastYDiff","_context","price","stop","_x2","apply","arguments","_x","showAdvanced","showAdvancedChanged","apiResultsChanged","tokenChanged","componentDidMount","GenericChart","showLoader","parentId","parentIdHeight","Rebalance","loading","processing","rebalance","txHash","shouldRebalance","componentUnmounted","checkRebalance","setStateSafe","sent","e","callback","callback_receipt","preventDefault","tx","error","eventData","eventLabel","status","eventCategory","eventAction","getTransactionError","sendGoogleAnalyticsEvent","window","toastProvider","addMessage","secondaryMessage","colorTheme","actionHref","actionText","variant","transactionHash","contractMethodSendWrapper","token","accountChanged","account","newState","index_es","minHeight","flexDirection","FlexLoader","flexProps","loaderProps","textProps","ml","TxProgressBar","waitText","endMessage","hash","mt","mb","RoundButton","buttonProps","disabled","handleClick","DateRangeModal","quickSelection","ranges","startDate","endDate","options","quickSelections","componentDidUpdate","selection","target","quickSelectionParams","clone","subtract","closeModal","handleSelect","startTimestampObj","endTimestampObj","_this3","isOpen","ModalCard","closeFunc","Header","title","Body","backgroundColor","cardBg","required","onChange","handleQuickSelect","bind","dist","minDate","maxDate","className","Footer","my","mx","borderRadius","mainColor","onClick","React","Stats","delta","carouselMax","rebalances","buttonGroups","carouselIndex","statsVersions","minStartTime","govTokensPool","unlentBalance","carouselOffsetLeft","showRefreshIdleSpeed","dateRangeModalOpened","day","week","weeks","month","ytd","setDateRange","isSameOrAfter","isSame","add","maxEndDate","toggleAdvancedCharts","setDateRangeModal","filterTokenData","r","setIdleVersion","isRisk","firstResult","lastResult","firstIdlePrice","lastIdlePrice","compoundInfo","firstCompoundData","lastCompoundData","compoundWithCOMPInfo","compoundAvgApr","firstCompoundPrice","lastCompoundPrice","compoundApr","availableTokens","selectedStrategy","getTokenApiData","pop","convertTokenBalance","sum","compoundWithCOMP","compoundData","compoundRate","index","prevRow","prevTotalAllocation","hasRebalanced","prevP","prevAllocation","getGovTokenPool","getUnlentBalance","selectToken","strategy","setStrategyToken","changeToken","handleCarousel","$element","jQuery","position","loadParams","latestVersion","version","enabledStrategies","strategiesParams","versionInfoExtra","param","params","match","currentNetworkAvailableTokens","customToken","toUpperCase","getLatestAvailableVersion","getVersionInfo","newEndTimestampObj","newStartTimestampObj","web3","initWeb3","loadCarousel","strategyChanged","dateChanged","versionChanged","idleTokenEnabled","getGlobalConfig","apyLong","textSize","statsTokens","versionsOptions","disabledCharts","performanceTooltip","versionDefaultValue","Breadcrumb","showPathMobile","goToSection","path","GenericSelector","innerProps","defaultValue","AssetSelector","isInteractive","pr","StatsCard","labelTooltip","SmartNumber","precision","lineHeight","unitProps","number","unit","VariationNumber","iconPos","iconSize","description","Stats_StatsChart","contracts","pb","pt","AllocationChart","src_Rebalance_Rebalance","pl","h4","RoundIconButton","mr","iconName","transition","titleParentProps","utilities_components_DateRangeModal","strategies","statsProtocols","strategyInfo","availableProtocolsKeys","availableProtocols","Title","titlePostfix","AssetsList","cols","fields","mobile","parentProps","overflow","desc","showTooltip","rgb","hoverColor","isActive","ExecuteTransaction","Button","componentProps","contractName","methodName","completed","Utils","SubComponent","selectedSubsection","subComponent","viewOnly","connectorName","showBreadCrumb","selectedSection","route","dangerouslySetInnerHTML","__html","directProps","toolProps","flexWrap","IconBox","maxWidth","icon","submenu","tool","toolIndex","flex","image","src","FundsOverview","aggregatedValues","govTokensTotalApr","govTokensUserBalance","govTokensDistribution","govTokensTotalBalance","govTokensTotalAprTooltip","idleTokenUserDistribution","govTokensDistributionTooltip","govTokensTotalBalanceTooltip","idleGovToken","getIdleGovToken","govTokenAvailableTokens","Promise","all","getUserDistribution","getGovTokensUserBalances","loadAssetField","depositTimestamp","getAvgAPYStats","lte","totBalance","govTokenBalance","govToken","balance","children","AssetField","fieldInfo","placement","message","PortfolioEquity","chartHeight","chartToken","frequencySeconds","getFrequencySeconds","component","Heading","h3","maxPrecision","govTokenIndex","tokenName","distributionFrequency","CurveRedeem","inputValue","maxSlippage","unevenAmounts","buttonDisabled","showMaxSlippage","redeemUnderlying","curveTokenConfig","curvePoolContract","curveSwapContract","curveTokenBalance","curveTokensAmounts","fastBalanceSelector","redeemUnevenAmounts","curveRedeemableIdleTokens","toggleUnevenAmounts","checkButtonDisabled","amount","changeInputValue","setFastBalanceSelector","setMaxSlippage","initToken","max_slippage","normalizedAmount","normalizeTokenAmount","withdrawSlippage","curveIdleTokensAmounts","getCurveTokensAmounts","getCurveIdleTokensAmounts","getCurveSlippage","getCurveTokenPrice","curveTokenPrice","redeemableBalance","redeemUnevenAmountsChanged","setInputValue","inputChanged","maxSlippageChanged","tokenConfigChanged","calculateSlippage","loadSelectedTokenConfig","selectedPercentage","curveConfig","getCurvePoolContract","getCurveSwapContract","getCurveTokenBalance","getCurveRedeemableIdleTokens","getCurveAvailableTokens","callbackRedeem","txSucceeded","eventValue","callbackReceiptRedeem","_amount","min_amounts","console","log","coin_index","migrationParams","coinIndex","min_amount","showSlippage","curveTokenName","cancelTransaction","checked","showBalance","selectDestinationToken","slippage","FastBalanceSelector","percentage","onMouseDown","failed","textOverflow","min","placeholder","border","divider","DepositRedeem","txError","tokenAPY","curveAPY","canRedeem","canDeposit","directMint","activeModal","tokenGovTokens","showBuyFlow","maxUnlentPerc","tokenApproved","skipMigration","redeemSkipGov","showRedeemFlow","contractPaused","canRedeemCurve","erc20ForwarderTx","signedParameters","minAmountForMint","redeemGovTokens","canDepositCurve","redeemSkipGovTokens","actionProxyContract","migrationEnabled","componentMounted","agreeSkipGovTokens","redeemCurveEnabled","depositCurveBalance","depositCurveEnabled","showAdvancedOptions","skipGovTokensGasSave","depositCurveSlippage","erc20ForwarderContract","erc20ForwarderEnabled","showETHWrapperEnabled","skipGovTokensGasSaveUSD","metaTransactionsEnabled","skippedGovTokensBalance","minAmountForMintReached","loadingErc20ForwarderTx","setShowRedeemFlow","setShowBuyFlow","toggleShowAdvancedOptions","toggleSkipMigration","toggleRedeemCurve","toggleDepositCurve","toggleShowETHWrapper","toggleAgreeSkipGovTokens","toggleSkipMint","toggleRedeemGovTokens","toggleRedeemSkipGov","getSkippedGovTokensFlags","govTokensIndexes","govTokensFlags","getGovTokensIndexes","calculateSkippedGovTokens","DAITokenConfig","_skipGovTokenRedeem","WETHTokenConfig","wethPrice","redeemGasUsage","skipGovRedeemGasUsage","govTokenConfig","govTokenPrice","skippedAmount","getUniswapConversionRate","govTokensUserBalances","estimateMethodGasUsage","idleTokenBalance","slicedToArray","setRedeemSkipGovTokens","splice","toggleErc20ForwarderEnabled","toggleMetaTransactionsEnabled","resetModal","setActiveModal","checkUseProxyContract","proxyContract","depositErc20ForwarderEnabled","depositMetaTransactionsEnabled","biconomy","approveContract","_callee4","callbackApprove","callbackReceiptApprove","curveDepositContract","_context4","enableERC20","checkTokenApproved","_callee5","_context5","approveToken","_callee6","_context6","approve","loadTokenInfo","_callee7","curveTokenEnabled","_ref10","_ref11","_context7","checkContractPaused","getCurveDepositContract","checkMigration","tokenBalance","getTokenGovTokens","boost","checkAction","loadAPY","_callee8","_context8","defineProperty","executeAction","_callee11","contractSendResult","callbackDeposit","callbackReceiptDeposit","curvePoolContractInfo","tokensToDeposit","amounts","minMintAmount","depositParams","_tokensToDeposit","_depositParams","mintProxyContractInfo","mintProxyContract","_mintProxyContract$me","functionCall","functionSignature","methodAbi","useNonce","_referral","txData","idleTokenToRedeem","idleTokenPriceWithFee","_callbackRedeem","_callbackReceiptRedeem","redeemMethod","redeemParams","_context11","getFastBalanceSelector","localStorage","setLocalStorage","lendingProcessing","lendAmount","genericError","getCurveAmounts","getCurveTokenAmount","integerValue","contract","methods","function","toConsumableArray","encodeABI","sendBiconomyTxWithPersonalSign","_jsonInterface","f","inputs","_callee10","metaInfo","permitOptions","erc20ForwarderBaseContract","permitValue","permitConfig","setValue","expiry","nonce","s","_context10","signPermit","t","allowed","holder","spender","permitData","permitType","asyncTimeout","sendBiconomyTxWithErc20Forwarder","request","_callee9","_erc20ForwarderContra","_functionCall","_functionSignature","gasLimit","_context9","estimateGas","buildBiconomyErc20ForwarderTx","getReferralAddress","getIdleTokenPriceWithFee","_callee12","_context12","setAction","loadProxyContracts","actions","_ref17","_callee15","erc20ForwarderContractInfo","hasProxyContract","_context15","initContract","abi","approved","_x5","getTokenAprs","tokenAprs","getCurveAPY","getQueryStringParameterByName","checkAddress","erc20ForwarderEnabledChanged","tokenBalanceChanged","actionChanged","fastBalanceSelectorChanged","redeemSkipGovChanged","redeemGovTokensChanged","agreeSkipGovTokensChanged","redeemSkipGovTokensChanged","depositCurveChanged","calculateCurveSlippage","showPoolPerc","convertedAmount","genericContractCall","depositPerc","maxUnlentPercFormatted","isDepositDisabled","depositDisabledMessage","disabledMessageRedeemKey","disabledMessageDepositKey","govTokensEnabled","govTokensDisabled","skipMintForDepositEnabled","skipMintForDeposit","redeemGovTokenEnabled","redeemSkipGovConfig","redeemSkipGovEnabled","disabledTokens","govTokensBalance","redeemSkipGovNoTokens","showAdvancedRedeemOptions","depositErc20ForwarderEnabledTokens","metaTransactionsAvailable","useMetaTx","erc20ForwarderClient","totalBalance","migrateText","migration","depositCurve","showDepositCurve","showRedeemCurve","showCurveSlippage","showAdvancedDepositOptions","batchDepositInfo","batchDepositEnabled","batchDepositDepositEnabled","depositEnabled","showBatchDeposit","isMigrationTool","ethWrapperInfo","ETHWrapperComponent","showETHWrapper","canPerformAction","showActionFlow","showReferral","Migrate","migrateTextBefore","TransactionField","transaction","isDisabled","iconProps","openTooltipModal","isRainbow","cursor","m","CardIconButton","imageProps","ExtLink","href","getWalletProvider","capitalize","primary","fullWidth","cost","align","tokenFeesPercentage","borderColor","minWidth","ConnectBox","src_CurveRedeem_CurveRedeem","BuyModal","showInline","availableMethods","buyToken","ShareModal","confettiEnabled","tweet","EstimatedEarnings","maxInputValue","loadChart","getTokenApy","earningsYear","tokenApy","amountMonth","amount3Months","amount6Months","amountYear","perc","monthColor","month3","month3Color","month6","month6Color","year","yearColor","labelTextColorModifiers","gridYValue","_ref","labels","showAPYDisclaimer","verticalAlign","zIndex","AssetPage","tokenFees","idleTokenPrice","availableGovTokens","getTokenFees","getIdleTokenPrice","getTokenBalance","getUserTokenFees","getGovTokensUserTotalBalance","loadTokensInfo","selectedTokenChanged","availableTokensChanged","transactionsChanged","nexusMutualConfig","userHasFunds","src_DepositRedeem_DepositRedeem","ActiveCoverages","titleProps","src_FundsOverview_FundsOverview","src_EstimatedEarnings_EstimatedEarnings","TransactionsList","BetaModal","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","iconHeight","CurveDeposit","depositSlippage","migrationContract","curveTokensBalance","migrationSucceeded","migrationContractApproved","checkMigrationContractApproved","getMigrationParams","approveCallback","migrationCallback","idleTokenBalanceChanged","toMigrate","n_coins","underlyingBalanceToDeposit","normalizeIdleTokenBalance","hasCurveTokens","PortfolioEquityCurve","chartwidth","loadChartData","quickDateSelectionChanged","quickDateSelection","getCurveTxs","curveTxs","tokensBalance","processedTxs","firstTxTimestamp","timeStamp","curveTokens","currentDate","prevBalances","prevTimestamp","minChartValue","aggregatedBalancesKeys","tokensBalancesPerDate","aggregatedBalance","currTimestamp","tokensData","foundBalances","tokensBalances","momentDate","filteredTokenData","filteredBalances","lastFilteredTx","lastTokenData","lastTx","lastTxBalance","formattedDate","aggregatedBalanceParsed","aggregatedBalances","balances","yFormatDecimals","areaOpacity","areaBaselineValue","ChartCustomTooltip","ChartCustomTooltipRow","tokenInfo","hex","formattedBalance","FundsOverviewCurve","compAPR","getCurveAvgBuyPrice","getCurveAvgSlippage","src_PortfolioEquityCurve_PortfolioEquityCurve","redeemBalance","depositBalance","curveZapContract","curveAvailableTokens","changeFromToken","setSelectedToken","baseToken","getSelectedToken","urlParams","param1","getCurveZapContract","updateAssetSelector","curveTokensToRedeem","src_CurveDeposit_CurveDeposit","src_FundsOverviewCurve_FundsOverviewCurve","enabledActions","WelcomeModal","email","subscribed","sendingForm","sendUserInfo","sendEmail","walletProvider","userInfo","provider","simpleIDPassUserInfo","analytics","google","events","setTimeout","err","handleSubmit","assertThisInitialized","handleValidation","axios","post","newsletterSubscription","endpoint","then","catch","walletAddress","lastLogin","getItem","parse","signedUp","parentNode","classList","onSubmit","green","Field","Input","outline","header_styles","input","ButtonLoader","buttonText","isLoading","gradientButton","MigrateModal","dontShowAgain","toggleDontShowAgain","removeStoredItem","migrate","tokenMigrationRoute","fieldProps","protocolsTokensBalances","minPrecision","UpgradeModal","_args3","convert","convertTool","tokensToMigrate","tokenKey","oldContractBalanceFormatted","oldIdleTokensToMigrate","newTokenConfig","RiskAdjustedModal","getAppUrl","Dashboard","menu","baseRoute","clickEvent","menuOpened","currentRoute","pageComponent","currentSection","showResetButton","pageComponentProps","timeoutId","modalTitle","modalContent","logout","setConnector","extraicons","comingSoon","enabledEnvs","currentEnv","imageInfo","selected","bgColor","visible","imageDark","iconDark","imageInactive","iconInactive","imageInactiveDark","iconInactiveDark","curveParams","CurveStrategy","stakeConfig","u","isExternalLink","section","param2","section_is_strategy","param1_is_strategy","param1_is_token","param2_is_token","sectionRoute","subm","sendGoogleAnalyticsPageview","clearTimeout","setCurrentSection","loadMenu","accountInizialized","initAccount","initializeContracts","checkModals","prevParams","_this4","checkRiskAdjusted","checkBetaApproval","checkTokensToMigrate","checkWelcomeModal","checkProtocolsTokensBalances","isOriginUrl","checkUrlOrigin","isBetaApproved","getStoredItem","showUpgradeModal","getTokensToMigrate","getProtocolsTokensBalances","welcomeIsOpen","welcomeModalProps","currTime","lastTime","frequency","migrateModalEnabled","showMigrateModal","isDashboard","replace","newRoute","location","scrollTo","routeParts","setMenu","dir","_this5","PageComponent","Swipeable","swipeCallback","menuRightBorder","borderRight","DashboardMenu","closeMenu","overflowY","overflowX","DashboardHeader","toggleMenu","network","isCorrectNetwork","current","components_BetaModal","components_RiskAdjustedModal","components_UpgradeModal","components_MigrateModal","TooltipModal","content","components_WelcomeModal","simpleID","initSimpleID","baseTokenName"],"mappings":"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","file":"static/js/4.a635cbc7.chunk.js","sourcesContent":["import Title from '../Title/Title';\nimport CountUp from 'react-countup';\nimport React, { Component } from 'react';\nimport { Box, Flex, Text, Loader } from \"rimble-ui\";\nimport FunctionsUtil from '../utilities/FunctionsUtil';\n\nclass AssetsUnderManagement extends Component {\n\n  state = {\n    totalAUM:null,\n    totalAUMEndOfYear:null\n  }\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.loadTotalAUM();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const availableStrategiesChanged = !prevProps.availableStrategies && JSON.stringify(prevProps.availableStrategies) !== JSON.stringify(this.props.availableStrategies);\n    if (availableStrategiesChanged || contractsInitialized){\n      this.loadTotalAUM();\n    }\n  }\n\n  async loadTotalAUM(){\n\n    if (!this.props.availableStrategies || !this.props.contractsInitialized){\n      return true;\n    }\n\n    const {\n      avgAPY,\n      totalAUM\n    } = await this.functionsUtil.getAggregatedStats();\n\n    const totalAUMEndOfYear = totalAUM.plus(totalAUM.times(avgAPY.div(100)));\n\n    this.setState({\n      totalAUM,\n      totalAUMEndOfYear\n    });\n  }\n\n  render() {\n    return this.state.totalAUM ? (\n      <Box\n        width={1}\n      >\n        <CountUp\n          delay={0}\n          decimals={4}\n          decimal={'.'}\n          separator={''}\n          useEasing={false}\n          duration={31536000}\n          start={parseFloat(this.state.totalAUM)}\n          end={parseFloat(this.state.totalAUMEndOfYear)}\n          formattingFn={ n => '$ '+this.functionsUtil.formatMoney(n,4) }\n        >\n          {({ countUpRef, start }) => (\n            <span\n              style={ this.props.counterStyle ? this.props.counterStyle : {\n                display:'block',\n                color:'dark-gray',\n                whiteSpace:'nowrap',\n                fontFamily:this.props.theme.fonts.counter,\n                fontWeight:this.props.theme.fontWeights[5],\n                textAlign: this.props.isMobile ? 'center' : 'right',\n                fontSize: this.props.isMobile ? '1.6em' : this.props.theme.fontSizes[6]\n              }}\n              ref={countUpRef}\n            />\n          )}\n        </CountUp>\n        {\n          (typeof this.props.subtitle === 'undefined' || this.props.subtitle) && (\n            <Title\n              fontWeight={3}\n              fontSize={[2,2]}\n              color={'cellTitle'}\n              textAlign={['center','right']}\n              {...this.props.subtitleProps}\n            >\n              {\n                this.props.subtitle ? this.props.subtitle : (\n                  <Text.span fontWeight={'inherit'} color={'inherit'} fontSize={'inherit'}>Assets Under Management <Text.span color={'cellTitle'} fontWeight={3} fontSize={'70%'}>(V3 + V4)</Text.span></Text.span>\n                )\n              }\n            </Title>\n          )\n        }\n      </Box>\n    ) : (\n      <Flex\n        alignItems={'center'}\n        justifyContent={this.props.loaderAlign || 'center'}\n      >\n        <Loader\n          size={\"30px\"}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default AssetsUnderManagement;\n","import moment from 'moment';\nimport { Bar } from '@nivo/bar';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CustomTooltip from '../CustomTooltip/CustomTooltip';\nimport CustomTooltipRow from '../CustomTooltip/CustomTooltipRow';\n\nclass StatsChart extends Component {\n  state = {\n    chartProps:{},\n    chartType:null,\n    chartData:null,\n    chartWidth:null\n  };\n\n  async componentDidMount() {\n    this.setState({\n      chartData:null,\n      chartType:null,\n      chartProps:null,\n    });\n    this.loadUtils();\n    this.loadApiData();\n  }\n\n  async componentDidUpdate(prevProps) {\n    const showAdvancedChanged = prevProps.showAdvanced !== this.props.showAdvanced;\n    const apiResultsChanged = prevProps.apiResults !== this.props.apiResults;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    if (apiResultsChanged || showAdvancedChanged || tokenChanged){\n      this.componentDidMount();\n    }\n  }\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  parseAum = value => {\n    return (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.tokenConfig || !this.props.selectedToken || !this.props.chartMode || !this.props.apiResults){\n      return false;\n    }\n\n    const maxGridLines = 4;\n    const apiResults = this.props.apiResults;\n    const apiResults_unfiltered = this.props.apiResults_unfiltered;\n    const totalItems = apiResults.length;\n    const protocols = Object.assign([],this.props.tokenConfig.protocols);\n    // const compoundProtocol = this.props.tokenConfig.protocols.find( p => (p.name === 'compound'));\n\n    const versionInfo = globalConfigs.stats.versions[this.props.idleVersion];\n\n    let keys = {};\n    let tempData = {};\n    let gridYStep = 0;\n    let itemIndex = 0;\n    let daysCount = 0;\n    let chartData = [];\n    let chartProps = {};\n    let chartType = Line;\n    let gridYValues = [];\n    let maxChartValue = 0;\n    let axisBottomIndex = 0;\n    let daysFrequency = null;\n    let idleChartData = null;\n    let firstIdleBlock = null;\n    let axisBottomMaxValues = 12;\n\n    switch (this.props.chartMode){\n      case 'VOL':\n        let divergingData = {};\n\n        const startTimestamp = parseInt(apiResults_unfiltered[0].timestamp);\n        const endTimestamp = parseInt(moment()._d.getTime()/1000);\n\n        for (let timestamp=startTimestamp;timestamp<=endTimestamp;timestamp+=86400){\n          const date = moment(timestamp*1000).format(\"YYYY/MM/DD\");\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n        }\n\n        let lastRow = null;\n        apiResults_unfiltered.forEach(row => {\n          const date = moment(row.timestamp*1000).format(\"YYYY/MM/DD\");\n          const idleTokens = this.functionsUtil.fixTokenDecimals(row.idleSupply,18);\n\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp:row.timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n\n          if (lastRow){\n            const idleTokensPrev = this.functionsUtil.fixTokenDecimals(lastRow.idleSupply,18);\n            const idleTokensDiff = !idleTokens.eq(idleTokensPrev);\n            if (idleTokensDiff){\n              const diff = idleTokens.minus(idleTokensPrev);\n              // Deposits\n              if (diff.gte(0)){\n                divergingData[date].deposits+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,divergingData[date].deposits);\n              } else {\n                divergingData[date].redeems+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,Math.abs(divergingData[date].deposits));\n              }\n            }\n\n          } else {\n            divergingData[date].deposits+=parseFloat(idleTokens);\n          }\n\n          lastRow = row;\n        });\n\n        chartData = Object.values(divergingData).filter(v => {\n          return (!this.props.startTimestamp || v.timestamp>=this.props.startTimestamp) && (!this.props.endTimestamp || v.timestamp<=this.props.endTimestamp);\n        }).sort((a,b) => (a.timestamp < b.timestamp ? -1 : 1));\n\n        let maxRange = 0;\n        chartData.forEach(v => {\n          maxRange = Math.max(maxRange,Math.abs(v.deposits),Math.abs(v.redeems));\n        });\n\n        chartType = Bar;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 6;\n        daysCount = moment(chartData[chartData.length-1].date,\"YYYY/MM/DD\").diff(moment(chartData[0].date,\"YYYY/MM/DD\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          indexBy: 'date',\n          enableLabel: false,\n          minValue:-maxRange,\n          maxValue:maxRange,\n          label: d => {\n            return Math.abs(d.value);\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            legend: '',\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            tickValues: 'every day',\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD').format('MMM DD')\n              }\n            },\n            legendPosition: 'middle',\n          },\n          axisLeft: null,\n          axisRight: {\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:8,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(Math.abs(v),0)\n          },\n          markers: [\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { strokeOpacity: 0 },\n              textStyle: { fill: this.props.theme.colors.transactions.action.deposit },\n              legend: 'deposits',\n              legendPosition: 'top-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { stroke: this.props.theme.colors['dark-gray'], strokeDasharray: '5 3' },\n              textStyle: { fill: this.props.theme.colors.transactions.action.redeem },\n              legend: 'redeems',\n              legendPosition: 'bottom-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n          ],\n          keys:['deposits','redeems'],\n          padding:0.4,\n          colors:[this.props.theme.colors.transactions.action.deposit, this.props.theme.colors.transactions.action.redeem],\n          labelTextColor: 'inherit:darker(1.4)',\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 80 : 100,\n              itemHeight: 18,\n              translateX: 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            },\n            tooltip:{\n              container:{\n                boxShadow:null,\n                background:null\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 50, bottom: 45, left: 50 } : { top: 20, right: 70, bottom: 70, left: 50 },\n          tooltip:(data) => {\n            const xFormatted = this.functionsUtil.strToMoment(data.data.timestamp*1000).format('MMM DD HH:ss');\n            const point = {\n              id:data.id,\n              data:{\n                xFormatted\n              }\n            };\n            const depositFormatted = this.functionsUtil.abbreviateNumber(data.data.deposits,2)+' '+this.props.selectedToken;\n            const redeemFormatted = this.functionsUtil.abbreviateNumber(data.data.redeems,2)+' '+this.props.selectedToken;\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                <CustomTooltipRow\n                  label={'Deposits'}\n                  color={this.props.theme.colors.deposit}\n                  value={depositFormatted}\n                />\n                <CustomTooltipRow\n                  label={'Redeem'}\n                  color={this.props.theme.colors.redeem}\n                  value={redeemFormatted}\n                />\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      /*\n      case 'AUM_ALL':\n        await this.functionsUtil.asyncForEach(Object.keys(availableTokens[globalConfigs.network.requiredNetwork]),async (tokenName,i) => {\n          const tokenConfig = availableTokens[globalConfigs.network.requiredNetwork][tokenName];\n          const tokenDataApi = await this.props.getTokenData(tokenConfig.address);\n          chartData.push({\n            id:tokenName,\n            color: tokenConfig.color,\n            data: tokenDataApi.map((d,i) => {\n              const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n              const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,tokenConfig.decimals);\n              const aum = idleTokens.times(idlePrice);\n              return {\n                x: moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\"),\n                y: parseInt(aum.toString())\n              };\n            })\n          });\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken,\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v),\n            orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            legendPosition: 'middle'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            format: '%b %d',\n            tickValues: this.props.isMobile ? 'every 4 days' : 'every 3 days',\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 36,\n            legendPosition: 'middle'\n          },\n          enableArea:false,\n          curve:\"linear\",\n          enableSlices:'x',\n          enableGridX:true,\n          enableGridY:false,\n          colors:d => d.color,\n          pointSize:0,\n          pointColor:{ from: 'color', modifiers: []},\n          pointBorderWidth:1,\n          pointLabel:\"y\",\n          pointLabelYOffset:-12,\n          useMesh:true,\n          animate:false,\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 60, bottom: 40, left: 60 },\n        };\n      break;\n      */\n      case 'AUM':\n\n        maxChartValue = 0;\n\n        chartData.push({\n          id:'AUM',\n          color: 'hsl('+globalConfigs.stats.tokens[this.props.selectedToken].color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n            const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n            const aum = idleTokens.times(idlePrice);\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(aum.toString());\n\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x,y };\n          })\n        });\n\n        // Add allocation\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          apiResults.map((d,i) => {\n            return d.protocolsData.filter((protocolAllocation,x) => {\n                return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            })\n            .map((protocolAllocation,z) => {\n              const protocolPaused = this.functionsUtil.BNify(protocolAllocation.rate).eq(0);\n              if (!protocolPaused){\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals));\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                let foundItem = chartData[0].data.filter(item => { return item.x === x });\n                if (foundItem){\n                  foundItem = foundItem[0];\n                  const pos = chartData[0].data.indexOf(foundItem);\n                  if (!foundItem.allocations){\n                    foundItem.allocations = {};\n                  }\n                  foundItem.allocations[p.name] = y;\n                  chartData[0].data[pos] = foundItem;\n                }\n              }\n              return undefined;\n            })[0]\n          }).filter((v) => { return v !== undefined; } )\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 6;\n        daysCount = moment(chartData[0].data[chartData[0].data.length-1].x,\"YYYY/MM/DD HH:mm\").diff(moment(chartData[0].data[0].x,\"YYYY/MM/DD HH:mm\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:v => this.functionsUtil.formatMoney(v,v<1 ? 3 :0),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            tickValues: 'every day',\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:true,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            if (typeof point === 'object' && typeof point.data === 'object'){\n              return (\n                <CustomTooltip\n                  point={point}\n                >\n                  <CustomTooltipRow\n                    label={point.serieId}\n                    color={point.serieColor}\n                    value={point.data.yFormatted}\n                  />\n                  {\n                    point.data.allocations && typeof point.data.allocations === 'object' &&\n                      Object.keys(point.data.allocations).map(protocolName => {\n                        const protocolInfo = globalConfigs.stats.protocols[protocolName];\n                        const protocolColor = 'hsl('+protocolInfo.color.hsl.join(',')+')';\n                        const protocolAllocation = point.data.allocations[protocolName];\n                        const protocolAllocationFormatted = this.functionsUtil.formatMoney(protocolAllocation,protocolAllocation<1 ? 3 : 0);\n                        const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                        return (\n                          <CustomTooltipRow\n                            color={protocolColor}\n                            label={protocolInfo.label}\n                            key={`${point.id}_${protocolName}`}\n                            value={`${protocolAllocationFormatted} (${protocolAllocationPerc})`}\n                          />\n                        );\n                      })\n                  }\n                </CustomTooltip>\n              );\n              /*\n              return (\n                <div\n                    key={point.id}\n                    style={{\n                      background: 'white',\n                      color: 'inherit',\n                      fontSize: 'inherit',\n                      borderRadius: '2px',\n                      boxShadow: 'rgba(0, 0, 0, 0.25) 0px 1px 2px',\n                      padding: '5px 9px'\n                    }}\n                >\n                  <div>\n                    <table style={{width:'100%',borderCollapse:'collapse'}}>\n                      <tbody>\n                        <tr>\n                          <td style={{padding:'3px 5px'}}>\n                            <span style={{display:'block', width: '12px', height: '12px', background: point.serieColor}}></span>\n                          </td>\n                          <td style={{padding:'3px 5px'}}>{point.serieId}</td>\n                          <td style={{padding:'3px 5px'}}><strong>{point.data.yFormatted}</strong></td>\n                        </tr>\n                        {\n                          point.data.allocations && typeof point.data.allocations === 'object' &&\n                            Object.keys(point.data.allocations).map(protocolName => {\n                              const protocolColor = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n                              const protocolAllocation = this.functionsUtil.formatMoney(point.data.allocations[protocolName],0);\n                              const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                              return (\n                                <tr key={`${point.id}_${protocolName}`}>\n                                  <td style={{padding:'3px 5px'}}>\n                                    <span style={{display:'block', width: '12px', height: '12px', background: protocolColor}}></span>\n                                  </td>\n                                  <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{protocolName}</td>\n                                  <td style={{padding:'3px 5px'}}><strong>{protocolAllocation}</strong> ({protocolAllocationPerc})</td>\n                                </tr>\n                              );\n                            })\n                        }\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              );\n              */\n            }\n\n            return null;\n          }\n        };\n      break;\n      case 'ALL':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\");\n\n          let row = {\n            date\n          };\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const foundProtocol = this.props.tokenConfig.protocols.find((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() });\n            if (foundProtocol){\n              const protocolInfo = globalConfigs.stats.protocols[foundProtocol.name];\n              if (!protocolPaused){\n                let allocation = parseFloat(this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals));\n                keys[protocolInfo.label] = 1;\n                row[protocolInfo.label] = allocation;\n                row[`${protocolInfo.label}Color`] = 'hsl('+protocolInfo.color.hsl.join(',')+')';\n                // console.log(protocolInfo.label,this.functionsUtil.BNify(protocolData.allocation).toString(),this.props.tokenConfig.decimals,allocation);\n                maxChartValue = Math.max(maxChartValue,allocation);\n              } else {\n                row[protocolInfo.label] = 0;\n              }\n            }\n          });\n\n\n          tempData[date] = row;\n        });\n\n        const dates = Object.keys(tempData);\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 12;\n        daysCount = moment(dates[dates.length-1],\"YYYY/MM/DD\").diff(moment(dates[0],\"YYYY/MM/DD\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n            orient: 'left',\n            tickSize: 0,\n            tickPadding: 10,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            tickValues:gridYValues,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickSize: 0,\n            tickPadding: 10,\n            legendOffset: 36,\n            orient: 'bottom-left',\n            tickValues: 'every day',\n            legendPosition: 'middle'\n          },\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            tooltip: {\n              container:{\n                padding:'0',\n                boxShadow:'none',\n                background:'transparent',\n              },\n              tableCell:{\n                padding:'0'\n              }\n            },\n            axis: {\n              ticks: {\n                text: {\n                  fontSize:this.props.isMobile ? 12 : 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize:this.props.isMobile ? 12 : 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 60 },\n          tooltip:({ id, value, color }) => {\n            const allocation = this.functionsUtil.formatMoney(value,0);\n            return (\n              <DashboardCard\n                cardProps={{\n                  py:1,\n                  px:2,\n                  width:1,\n                }}\n              >\n                <table\n                  style={{width:'100%',borderCollapse:'collapse'}}\n                >\n                  <tbody>\n                    <tr>\n                      <td style={{padding:'3px 5px'}}>\n                        <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                      </td>\n                      <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                      <td style={{padding:'3px 5px'}}><strong>{allocation} {this.props.selectedToken}</strong></td>\n                    </tr>\n                  </tbody>\n                </table>\n              </DashboardCard>\n            )\n          }\n        }\n      break;\n      case 'ALL_PERC':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\")\n          let row = {\n            date:moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\")\n          };\n          if (tempData[date]){\n            row = tempData[date];\n          }\n\n          const totalAllocation = d.protocolsData.reduce((accumulator,protocolAllocation) => {\n            const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n            return this.functionsUtil.BNify(accumulator).plus(allocation);\n          },0);\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const protocolName = this.props.tokenConfig.protocols.filter((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() })[0].name;\n            if (!protocolPaused){\n              const allocation = this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals);\n              const allocationPerc = parseFloat(allocation.div(totalAllocation).times(100));\n              keys[protocolName] = 1;\n              row[protocolName] = allocationPerc;\n              row[`${protocolName}Color`] = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n            } else if (typeof row[protocolName] !== undefined) {\n              row[protocolName] = 0;\n            } \n          });\n          \n          tempData[date] = row;\n        });\n\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          data: chartData,\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 40, bottom: 40, left: 60 },\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => parseInt(v)+'%'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            orient: 'bottom',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days'\n          },\n          tooltip:({ id, value, color }) => {\n            const allocation = parseInt(value)===100 ? this.functionsUtil.formatMoney(value,0) : this.functionsUtil.formatMoney(value,2);\n            return (\n              <table style={{width:'100%',borderCollapse:'collapse'}}>\n                <tbody>\n                  <tr>\n                    <td style={{padding:'3px 5px'}}>\n                      <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                    </td>\n                    <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                    <td style={{padding:'3px 5px'}}><strong>{allocation}%</strong></td>\n                  </tr>\n                </tbody>\n              </table>\n            )\n          }\n        }\n      break;\n      case 'APR':\n\n        maxChartValue = 0;\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo && additionalProtocol.enabledTokens.includes(this.props.selectedToken)){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        protocols.forEach((p,j) => {\n          const protocolInfo = {...globalConfigs.stats.protocols[p.name]};\n          if (!protocolInfo.enabled){\n            return;\n          }\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n          \n          chartData.push({\n            id:protocolInfo.label,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                // let protocolRate = this.functionsUtil.BNify(protocolAllocation.rate);\n\n                let protocolRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n                  if (protocolAllocation[field]){\n                    return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(protocolAllocation[field]));\n                  }\n                  return this.functionsUtil.BNify(acc);\n                },0) : this.functionsUtil.BNify(protocolAllocation[rateField]);\n\n                const protocolPaused = protocolRate.eq(0);\n                if (!protocolPaused){\n\n                  // Aave V1 wrong rate FIX\n                  if (protocolRate.lt(0) && protocolAllocation.aaveAdditionalAPR && this.functionsUtil.BNify(protocolAllocation.aaveAdditionalAPR).gt(0)){\n                    protocolRate = protocolRate.plus(this.functionsUtil.BNify(protocolAllocation.aaveAdditionalAPR));\n                  }\n\n                  protocolRate = this.functionsUtil.fixTokenDecimals(protocolRate,18);\n\n                  const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                  const y = parseFloat(protocolRate);\n\n                  maxChartValue = Math.max(maxChartValue,y);\n\n                  return { x, y };\n                }\n                return undefined;\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color:'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data:apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(this.functionsUtil.fixTokenDecimals(d.idleRate,18));\n            maxChartValue = Math.max(maxChartValue,y);\n            return { x, y };\n          })\n        });\n\n        /*\n        const csv = {};\n        chartData.forEach( protocolData => {\n          protocolData.data.forEach( d => {\n            if (!csv[d.x]){\n              csv[d.x] = {};\n            }\n            csv[d.x][protocolData.id] = d.y;\n          });\n        });\n\n        const csv_ordered = Object.keys(csv).sort().reduce(\n          (obj, key) => { \n            obj[key] = csv[key]; \n            return obj;\n          }, \n          {}\n        );\n\n        const csv_array = [];\n        const csv_header = [];\n        csv_header.push('Date');\n        chartData.forEach( pData => csv_header.push(pData.id) );\n        csv_array.push(csv_header.join(','));\n\n        Object.keys(csv_ordered).forEach( date => {\n          const csv_row = [date];\n          chartData.forEach( cData => {\n            if (csv_ordered[date][cData.id]){\n              csv_row.push(parseFloat(csv_ordered[date][cData.id]).toFixed(4));\n            } else {\n              csv_row.push('0.0000');\n            }\n          });\n          csv_array.push(csv_row.join(','));\n        });\n\n        console.log('-------DEBUG-------');\n        console.log(csv_ordered);\n        console.log('-------START-------');\n        console.log(csv_array.join('\\n'));\n        console.log('-------END-------');\n        */\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 6;\n        const chartValues = chartData[chartData.length-1].data.sort((a,b) => (moment(a.x,\"YYYY/MM/DD HH:mm\").isBefore(moment(b.x,\"YYYY/MM/DD HH:mm\")) ? -1 : 1));\n        daysCount = moment(chartValues[chartValues.length-1].x,\"YYYY/MM/DD HH:mm\").diff(moment(chartValues[0].x,\"YYYY/MM/DD HH:mm\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        // console.log('APR',chartValues,chartValues[0].x,chartValues[chartValues.length-1].x,daysCount,daysFrequency);\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(2)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            tickPadding: 15,\n            legendOffset: 0,\n            orient: 'bottom',\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickValues: 'every day',\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    // const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'SCORE':\n\n        let prevValue = 0;\n        maxChartValue = 0;\n\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n          if (!protocolInfo.enabled){\n            return;\n          }\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n          chartData.push({\n            id:protocolInfo.label,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(protocolAllocation.defiScore);\n\n                y = isNaN(y) || !y ? prevValue : y;\n                prevValue = y;\n                maxChartValue = Math.max(maxChartValue,y);\n\n                return { x, y };\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            let y = parseFloat(d.idleScore);\n            y = isNaN(y) || !y ? prevValue : y;\n            prevValue = y;\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x, y };\n          })\n        });\n\n        // debugger;\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 6;\n        daysCount = moment(chartData[0].data[chartData[0].data.length-1].x,\"YYYY/MM/DD\").diff(moment(chartData[0].data[0].x,\"YYYY/MM/DD\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(1),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            tickValues: 'every day',\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE_V4':\n\n        itemIndex = 0;\n        maxChartValue = 0;\n        // let prevApy = null;\n        let prevApr = null;\n        let prevData = null;\n        let avgApy = this.functionsUtil.BNify(0);\n        let startBalance = this.functionsUtil.BNify(1);\n        let currentBalance = this.functionsUtil.BNify(1);\n\n        idleChartData = [];\n        const aaveProtocolInfo = protocols.find( p => p.name === 'aavev2' );\n\n        apiResults.forEach((d,i) => {\n\n          let idleRate = this.functionsUtil.BNify(d.idleRate);\n          let y = 0;\n          let apy = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n\n          // Aave V1 wrong rate FIX\n          if (this.props.selectedToken === 'WETH' && moment(x).isSameOrBefore(moment('2021-05-19 12:20','YYYY-MM-DD HH:mm'))){\n            const aaveProtocolData = aaveProtocolInfo ? d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === aaveProtocolInfo.address.toLowerCase()\n            }) : null;\n            if (aaveProtocolData.aaveAdditionalAPR && this.functionsUtil.BNify(aaveProtocolData.aaveAdditionalAPR).gt(0)){\n              idleRate = idleRate.plus(this.functionsUtil.BNify(aaveProtocolData.aaveAdditionalAPR));\n            }\n          }\n\n          const apr = this.functionsUtil.fixTokenDecimals(idleRate,18).div(100);\n          // const apy = this.functionsUtil.apr2apy(apr);\n          \n          avgApy = avgApy.plus(apr.times(100));\n\n          if (prevApr){\n            const days = (d.timestamp-prevData.timestamp)/86400;\n            // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n            const earnings = currentBalance.times(prevApr.times(days).div(365));\n            currentBalance = currentBalance.plus(earnings);\n\n            const earning = currentBalance.div(startBalance).minus(1).times(100);\n            y = parseFloat(earning);\n\n            // apy = earning.times(365).div(totDays).toFixed(2);\n            const daysSinceBeginning = idleChartData.length>0 ? Math.max(1,moment(d.timestamp*1000).diff(moment(idleChartData[0].x,\"YYYY/MM/DD HH:mm\"),'days')) : 1;\n            apy = parseFloat(y*365/daysSinceBeginning).toFixed(2);\n          }\n\n          prevData = d;\n          // prevApy = apy;\n          prevApr = apr;\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          if (apy>0){\n            idleChartData.push({ x, y, apy, blocknumber, itemPos });\n          }\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo && additionalProtocol.enabledTokens.includes(this.props.selectedToken)){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        protocols.forEach( p => {\n\n          const protocolInfo = {...globalConfigs.stats.protocols[p.name]};\n\n          // Add custom protocol info\n          if (protocolInfo.tokensProps && protocolInfo.tokensProps[this.props.selectedToken]){\n            const tokenProps = protocolInfo.tokensProps[this.props.selectedToken];\n            Object.keys(tokenProps).forEach(p => {\n              protocolInfo[p] = tokenProps[p];\n            });\n          }\n\n          if (!protocolInfo.enabled || (protocolInfo.startTimestamp && this.functionsUtil.strToMoment(protocolInfo.startTimestamp).isAfter(Date.now()))){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          // prevApy = null;\n          prevApr = null;\n          prevData = null;\n          let baseProfit = 0;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n          avgApy = this.functionsUtil.BNify(0);\n          startBalance = this.functionsUtil.BNify(1);\n          currentBalance = this.functionsUtil.BNify(1);\n          const apiResults_filtered = apiResults.filter( d => (!protocolInfo.startTimestamp || moment(protocolInfo.startTimestamp).isSameOrBefore(moment(d.timestamp*1000))) );\n\n          apiResults_filtered.forEach( (d,i) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              let protocolRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n                if (protocolData[field]){\n                  return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(protocolData[field]));\n                }\n                return this.functionsUtil.BNify(acc);\n              },0) : this.functionsUtil.BNify(protocolData[rateField]);\n\n              // Aave V1 wrong rate FIX\n              if (protocolRate.lt(0) && protocolData.aaveAdditionalAPR && this.functionsUtil.BNify(protocolData.aaveAdditionalAPR).gt(0)){\n                protocolRate = protocolRate.plus(this.functionsUtil.BNify(protocolData.aaveAdditionalAPR));\n              }\n\n              const protocolPaused = protocolRate.eq(0);\n              if (!protocolPaused){\n\n                let rowData = {};\n\n                let y = 0;\n                let apy = 0;\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                const apr = this.functionsUtil.fixTokenDecimals(protocolRate,18).div(100);\n\n                avgApy = avgApy.plus(apr.times(100));\n                // const apy = this.functionsUtil.apr2apy(apr);\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null) {\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => (d1.blocknumber>=firstProtocolBlock) );\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                      y = baseProfit;\n                      apy = avgApy.toFixed(2);\n                    }\n                  }\n                }\n\n                itemIndex++;\n\n                if (prevData) {\n                  const days = (d.timestamp-prevData.timestamp)/86400;\n                  // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n                  const earnings = currentBalance.times(prevApr.times(days).div(365));\n                  currentBalance = currentBalance.plus(earnings);\n\n                  const earning = currentBalance.div(startBalance).minus(1).times(100);\n                  y = parseFloat(earning)+baseProfit;\n\n                  const daysSinceBeginning = Math.max(1,moment(d.timestamp*1000).diff(moment(idleChartData[0].x,\"YYYY/MM/DD HH:mm\"),'days'));\n                  apy = parseFloat(y*365/daysSinceBeginning).toFixed(2);\n                  // debugger;\n\n                  // apy = avgApy.div(itemIndex+1).toFixed(2);\n                  const itemPos = Math.floor(itemIndex/totalItems*100);\n                  rowData = {\n                    x,\n                    y,\n                    apy,\n                    itemPos\n                  };\n\n                  itemIndex++;\n                  chartRow.data.push(rowData);\n                }\n\n                prevData = d;\n                prevApr = apr;\n\n                if (firstIdleBlock === null){\n                  firstIdleBlock = parseInt(d.blocknumber);\n                }\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                // const blocknumber = d.blocknumber;\n\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          data: idleChartData,\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')'\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 12;\n        daysCount = moment(idleChartData[idleChartData.length-1].x,\"YYYY/MM/DD HH:mm\").diff(moment(idleChartData[0].x,\"YYYY/MM/DD HH:mm\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            tickValues:`every day`,\n            legendPosition: 'middle',\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              itemWidth: this.props.isMobile ? 70 : 160,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE':\n        // let prevTokenPrice = null;\n        maxChartValue = 0;\n        let firstTokenPrice = null;\n\n        idleChartData = apiResults.map((d,i) => {\n\n          let y = 0;\n          let apy = 0;\n          let days = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n          const tokenPrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n\n          if (!firstTokenPrice){\n            firstTokenPrice = tokenPrice;\n          } else {\n            y = parseFloat(tokenPrice.div(firstTokenPrice).minus(1).times(100));\n\n            days = (d.timestamp-apiResults[0].timestamp)/86400;\n            const earning = tokenPrice.div(firstTokenPrice).minus(1).times(100);\n            apy = earning.times(365).div(days).toFixed(2);\n\n            // console.log(firstTokenPrice.toString(),tokenPrice.toString(),earning.toString(),days,y,apy);\n          }\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          return { x, y, apy, blocknumber, itemPos };\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo && additionalProtocol.enabledTokens.includes(this.props.selectedToken)){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        await this.functionsUtil.asyncForEach(protocols,async (p) => {\n\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n\n          if (!protocolInfo.enabled){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          let baseProfit = 0;\n          firstTokenPrice = null;\n          let lastRowData = null;\n          let lastTokenPrice = null;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n\n          await this.functionsUtil.asyncForEach(apiResults,async (d) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData && protocolData[rateField]){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              const protocolPaused = this.functionsUtil.BNify(protocolData[rateField]).eq(0);\n              if (!protocolPaused){\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null){\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => {\n                      return d1.blocknumber>=firstProtocolBlock;\n                    });\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                    }\n                  }\n                }\n\n                let rowData = {};\n                let tokenExchangeRate = protocolData.price;\n                let tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n\n                // Take data from\n                if (protocolInfo && protocolInfo.data && protocolInfo.data[p.address.toLowerCase()] && protocolInfo.data[p.address.toLowerCase()][d.blocknumber]){\n                  tokenExchangeRate = this.functionsUtil.BNify(globalConfigs.stats.protocols[p.name].data[p.address.toLowerCase()][d.blocknumber]);\n                  tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                }/* else if (p.name === 'aave'){\n                  // Token holders (aDAI = 0xc025c03e10f656d3ee76685d53d236824d8ef3da , aUSDC = 0xd2c734fbd8f5d1c809185e014016dd4097e94711)\n                  let aaveTokenBalance = await this.functionsUtil.genericContractCall(p.token,'balanceOf',['0xd2c734fbd8f5d1c809185e014016dd4097e94711'],{},d.blocknumber);\n                  if (aaveTokenBalance){\n                    if (!Object.values(aave_data).length){\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(1,p.decimals);\n                      aave_data[d.blocknumber] = aaveTokenBalance.toString();\n                    } else {\n                      const firstBalance = Object.values(aave_data)[0];\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(this.functionsUtil.BNify(aaveTokenBalance).div(this.functionsUtil.BNify(firstBalance)).toFixed(p.decimals),p.decimals);\n                      aave_data[d.blocknumber] = tokenExchangeRate.toString();\n                    }\n                  }\n                }\n                */\n\n                let y = baseProfit;\n                let apy = 0;\n\n                if (!firstTokenPrice){\n                  firstTokenPrice = tokenPriceFixed;\n                } else {\n                  if (tokenPriceFixed.lt(lastTokenPrice)){\n                    firstTokenPrice = tokenPriceFixed;\n                    const lastYDiff = chartRow.data[chartRow.data.length-1].y-chartRow.data[chartRow.data.length-2].y;\n                    y = lastRowData.y+lastYDiff;\n                    baseProfit = y;\n                  } else {\n                    y += parseFloat(tokenPriceFixed.div(firstTokenPrice).minus(1).times(100));\n                  }\n\n                  const days = (d.timestamp-apiResults[0].timestamp)/86400;\n                  const earning = tokenPriceFixed.div(firstTokenPrice).minus(1).times(100);\n                  apy = earning.times(365).div(days).toFixed(2);\n                }\n\n                y = Math.max(0,y);\n                maxChartValue = Math.max(maxChartValue,y);\n\n                const itemPos = Math.floor(itemIndex/totalItems*100);\n\n                rowData = {\n                  x,\n                  y,\n                  apy,\n                  itemPos\n                };\n\n                itemIndex++;\n                lastRowData = rowData;\n                chartRow.data.push(rowData);\n                lastTokenPrice = tokenPriceFixed;\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: idleChartData\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              itemWidth: this.props.isMobile ? 70 : 100,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      chartType,\n      chartProps,\n      chartData\n    });\n  }\n\n  render() {\n    return(\n      <GenericChart\n        showLoader={true}\n        {...this.state.chartProps}\n        height={this.props.height}\n        type={this.state.chartType}\n        data={this.state.chartData}\n        width={this.state.chartWidth}\n        isMobile={this.props.isMobile}\n        parentId={this.props.parentId}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default StatsChart;","import { Flex, Text } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\n\nclass Rebalance extends Component {\n\n  state = {\n    loading:true,\n    processing:{\n      rebalance:{\n        txHash:null,\n        loading:false\n      },\n    },\n    shouldRebalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n  componentUnmounted = false;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillUnmount(){\n    this.componentUnmounted = true;\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.checkRebalance();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged || accountChanged){\n      this.checkRebalance();\n    }\n  }\n\n  async setStateSafe(newState,callback=null) {\n    if (!this.componentUnmounted){\n      return this.setState(newState,callback);\n    }\n    return null;\n  }\n\n  checkRebalance = async () => {\n    this.setStateSafe({\n      loading:true,\n    });\n\n    const shouldRebalance = await this.functionsUtil.checkRebalance(this.props.tokenConfig);\n\n    this.setStateSafe({\n      loading:false,\n      shouldRebalance\n    });\n  }\n\n  rebalance = async (e) => {\n    e.preventDefault();\n\n    const callback = (tx,error) => {\n\n      if (tx){\n        // Send Google Analytics event\n        const eventData = {\n          eventLabel: tx.status,\n          eventCategory: 'Rebalance',\n          eventAction: this.props.selectedToken,\n        };\n\n        let txDenied = false;\n\n        if (error){\n          eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n        }\n\n        // Send Google Analytics event\n        if (error || eventData.status !== 'error'){\n          this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n        }\n\n        if (tx.status === 'success'){\n          // Toast message\n          window.toastProvider.addMessage(`Rebalance completed`, {\n            secondaryMessage: `Now the pool is balanced!`,\n            colorTheme: 'light',\n            actionHref: \"\",\n            actionText: \"\",\n            variant: \"success\",\n          });\n        } else if (!txDenied){\n          window.toastProvider.addMessage(`Rebalance error`, {\n            secondaryMessage: `The rebalance has failed, try again...`,\n            colorTheme: 'light',\n            actionHref: \"\",\n            actionText: \"\",\n            variant: \"failure\",\n          });\n        }\n      }\n\n      this.setStateSafe((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          rebalance:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n\n      this.checkRebalance();\n    }\n\n    const callback_receipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setStateSafe((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            rebalance:{\n              ...prevState.processing.rebalance,\n              txHash\n            }\n          }\n        })\n      );\n    };\n\n    await this.setStateSafe({\n      processing:{\n        rebalance:{\n          txHash:null,\n          loading:true\n        }\n      }\n    });\n\n    this.props.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'rebalance', [], null , callback, callback_receipt);\n  }\n\n  render() {\n    return (\n      <Flex\n        px={3}\n        width={1}\n        minHeight={'100px'}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n      {\n        this.state.loading ? (\n          <FlexLoader\n            flexProps={{\n              flexDirection:'row'\n            }}\n            loaderProps={{\n              size:'30px'\n            }}\n            textProps={{\n              ml:2\n            }}\n            text={'Checking rebalance...'}\n          />\n        ) : (\n          this.state.processing.rebalance.loading ? (\n            <TxProgressBar {...this.props} waitText={`Rebalance estimated in`} endMessage={`Finalizing rebalance request...`} hash={this.state.processing.rebalance.txHash} />\n          ) : (\n            <Flex\n              width={1}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                mt={0}\n                mb={3}\n                textAlign={'center'}\n              >\n                {this.state.shouldRebalance ? 'Rebalance the entire pool. All users will bless you.' : 'The pool is already balanced.'}\n              </Text>\n              <RoundButton\n                buttonProps={{\n                  width:'auto',\n                  disabled:!this.state.shouldRebalance\n                }}\n                handleClick={e => this.rebalance(e)}\n              >\n                Rebalance\n              </RoundButton>\n            </Flex>\n          )\n        )\n      }\n      </Flex>\n    )\n  }\n}\n\nexport default Rebalance;","import React from \"react\";\nimport {\n  Modal,\n  Button,\n  Flex,\n  Field,\n  Select\n} from \"rimble-ui\";\nimport moment from 'moment';\nimport './DateRangeModal.css';\nimport ModalCard from './ModalCard';\nimport 'react-date-range/dist/styles.css';\nimport { DateRange } from 'react-date-range';\nimport 'react-date-range/dist/theme/default.css';\n\nclass DateRangeModal extends React.Component {\n\n  state = {\n    quickSelection:'',\n    ranges:{\n      startDate: this.props.startDate ? this.props.startDate : new Date(),\n      endDate: this.props.endDate ? this.props.endDate : new Date(),\n      key: 'selection'\n    },\n    options:Object.keys(this.props.quickSelections).map( value => ({ value,label:this.props.quickSelections[value].label }) )\n  }\n\n  handleSelect(ranges){\n    this.setState({\n      quickSelection:'',\n      ranges:ranges.selection\n    });\n  }\n\n  handleQuickSelect(e){\n    let startDate = null;\n    let endDate = moment(new Date());\n    const quickSelection = e.target.value;\n\n    if (quickSelection && this.props.quickSelections[quickSelection]){\n      const quickSelectionParams = this.props.quickSelections[quickSelection];\n      startDate = endDate.clone().subtract(quickSelectionParams.value,quickSelectionParams.type);\n    } else {\n      startDate = null;\n      endDate = null;\n    }\n\n    if (startDate && endDate){\n      startDate = startDate._d;\n      endDate = endDate._d;\n\n      const ranges = {\n        startDate,\n        endDate,\n        key:'selection'\n      };\n\n      this.setState({\n        ranges,\n        quickSelection\n      }, () => {\n        this.closeModal();\n      });\n    }\n  }\n\n  componentDidUpdate = (prevProps) => {\n    if (prevProps.startDate !== this.props.startDate || prevProps.endDate !== this.props.endDate){\n      this.setState({\n        ranges:{\n          startDate: this.props.startDate ? this.props.startDate : new Date(),\n          endDate: this.props.endDate ? this.props.endDate : new Date(),\n          key: 'selection'\n        }\n      });\n    }\n  }\n\n  closeModal(){\n    const newState = this.props.handleSelect(this.state.ranges,this.state.quickSelection);\n    const ranges = {\n      startDate:newState.startTimestampObj ? newState.startTimestampObj._d : new Date(),\n      endDate:newState.endTimestampObj ? newState.endTimestampObj._d : new Date(),\n      key: 'selection'\n    };\n    this.setState({\n      ranges\n    });\n    this.props.closeModal();\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        <ModalCard closeFunc={this.props.closeModal}>\n          <ModalCard.Header title={'Select Date Range'}>\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex width={1} flexDirection={'column'} alignItems={'center'}>\n              <Field label=\"Quick Date Selection\" style={{display:'flex',width:'100%',alignItems:'stretch',justifyContent:'center'}}>\n                <Select\n                  style={{\n                    fontSize:'14px',\n                    height:'2.5em',\n                    boxShadow:'none',\n                    color:this.props.theme.colors.counter,\n                    backgroundColor:this.props.theme.colors.cardBg\n                  }}\n                  width={'100%'}\n                  required={true}\n                  options={this.state.options}\n                  value={this.state.quickSelection}\n                  onChange={this.handleQuickSelect.bind(this)}\n                />\n              </Field>\n              <DateRange\n                ranges={[this.state.ranges]}\n                minDate={this.props.minDate}\n                maxDate={this.props.maxDate}\n                className={this.props.themeMode}\n                onChange={this.handleSelect.bind(this)}\n              />\n            </Flex>\n          </ModalCard.Body>\n          <ModalCard.Footer>\n            <Flex px={[2,0]} flexDirection={['column', 'row']} width={1} justifyContent={'center'}>\n              <Button\n                my={2}\n                mx={[0, 2]}\n                borderRadius={4}\n                mainColor={'blue'}\n                onClick={ e => this.closeModal(e) }\n                size={this.props.isMobile ? 'small' : 'medium'}\n              >\n              APPLY\n              </Button>\n            </Flex>\n          </ModalCard.Footer>\n        </ModalCard>\n      </Modal>\n    );\n  }\n\n}\n\nexport default DateRangeModal;","import moment from 'moment';\nimport Title from '../Title/Title';\nimport StatsChart from './StatsChart';\nimport React, { Component } from 'react';\nimport Rebalance from '../Rebalance/Rebalance';\nimport StatsCard from '../StatsCard/StatsCard';\nimport AssetsList from '../AssetsList/AssetsList';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport GenericSelector from '../GenericSelector/GenericSelector';\nimport RoundIconButton from '../RoundIconButton/RoundIconButton';\nimport VariationNumber from '../VariationNumber/VariationNumber';\nimport AllocationChart from '../AllocationChart/AllocationChart';\nimport DateRangeModal from '../utilities/components/DateRangeModal';\nimport { Flex, Text, Heading, Box, Icon, Button, Link } from 'rimble-ui';\nimport ExecuteTransaction from '../ExecuteTransaction/ExecuteTransaction';\nimport AssetsUnderManagement from '../AssetsUnderManagement/AssetsUnderManagement';\n\nclass Stats extends Component {\n  state = {\n    aum:null,\n    apr:null,\n    days:'-',\n    delta:null,\n    earning:null,\n    minDate:null,\n    maxDate:null,\n    carouselMax:1,\n    rebalances:'-',\n    buttonGroups:[],\n    apiResults:null,\n    carouselIndex:0,\n    idleVersion:null,\n    statsVersions:{},\n    minStartTime:null,\n    endTimestamp:null,\n    showAdvanced:true,\n    govTokensPool:null,\n    unlentBalance:null,\n    quickSelection:null,\n    startTimestamp:null,\n    endTimestampObj:null,\n    shouldRebalance:null,\n    carouselOffsetLeft:0,\n    startTimestampObj:null,\n    showRefreshIdleSpeed:false,\n    apiResults_unfiltered:null,\n    dateRangeModalOpened:false\n  };\n\n  quickSelections = {\n    day:{\n      value:1,\n      type:'day',\n      label:'Last day',\n    },\n    week:{\n      value:1,\n      type:'week',\n      label:'Last week',\n    },\n    weeks:{\n      value:2,\n      type:'week',\n      label:'Last 2 weeks',\n    },\n    month:{\n      value:1,\n      type:'month',\n      label:'Last month',\n    },\n    ytd:{\n      type:'day',\n      label:'Year to date',\n      value:moment().diff(moment('01/01/YYYY','DD/MM/YYYY'),'days'),\n    },\n  };\n\n  // Utils\n  functionsUtil = null;\n  componentUnmounted = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount() {\n    this.loadUtils();\n    await this.loadParams();\n  }\n\n  componentWillUnmount(){\n    this.componentUnmounted = true;\n  }\n\n  async setStateSafe(newState,callback=null) {\n    if (!this.componentUnmounted){\n      return this.setState(newState,callback);\n    }\n    return null;\n  }\n\n  showRefreshIdleSpeed(){\n    this.setState({\n      showRefreshIdleSpeed:true\n    });\n  }\n\n  getLatestAvailableVersion(){\n    const statsVersions = globalConfigs.stats.versions;\n    let latestVersion = null;\n    Object.keys(statsVersions).forEach( version => {\n      const versionInfo = statsVersions[version];\n      if (versionInfo.enabledStrategies.includes(this.props.selectedStrategy)){\n        latestVersion = version;\n      }\n    });\n\n    return latestVersion;\n  }\n\n  getVersionInfo(version){\n    if (!version){\n      version = this.state.idleVersion;\n    }\n\n    if (!globalConfigs.stats.versions[version]){\n      return null;\n    }\n\n    const versionInfo = Object.assign({},globalConfigs.stats.versions[version]);\n\n    if (versionInfo.strategiesParams && versionInfo.strategiesParams[this.props.selectedStrategy]){\n      const versionInfoExtra = versionInfo.strategiesParams[this.props.selectedStrategy];\n      Object.keys(versionInfoExtra).forEach( param => {\n        versionInfo[param] = versionInfoExtra[param];\n      });\n    }\n\n    return versionInfo;\n  }\n\n  async loadParams() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    const newState = {};\n    const { match: { params } } = this.props;\n\n    const currentNetworkAvailableTokens = Object.keys(this.props.availableTokens);\n\n    if (!!params.customToken && currentNetworkAvailableTokens.indexOf(params.customToken.toUpperCase()) !== -1 ){\n      newState.selectedToken = params.customToken.toUpperCase();\n    } else {\n      newState.selectedToken = this.props.selectedToken.toUpperCase();\n    }\n\n    newState.tokenConfig = this.props.availableTokens[newState.selectedToken];\n    newState.minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp,'YYYY-MM-DD');\n    newState.maxEndDate = moment();\n\n    newState.endTimestampObj = moment(moment().format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    newState.latestVersion = this.getLatestAvailableVersion();\n    newState.idleVersion = this.state.idleVersion === null ? newState.latestVersion : this.state.idleVersion;\n\n    const versionInfo = this.getVersionInfo(newState.idleVersion);\n\n    // console.log('loadParams',newState.latestVersion,newState.idleVersion,versionInfo);\n\n    if (newState.idleVersion && versionInfo.endTimestamp){\n      const newEndTimestampObj = moment(moment(versionInfo.endTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.endTimestampObj.isAfter(newEndTimestampObj)){\n        newState.endTimestampObj = newEndTimestampObj;\n        newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n      }\n\n      if (!newState.maxEndDate || newState.maxEndDate.isAfter(newEndTimestampObj)){\n        newState.maxEndDate = newEndTimestampObj;\n      }\n    }\n\n    newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n\n    // Set start date\n    newState.startTimestampObj = newState.endTimestampObj.clone().subtract(1,'month');\n    newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n\n    if (newState.idleVersion && versionInfo.startTimestamp){\n      const newStartTimestampObj = moment(moment(versionInfo.startTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.startTimestampObj.isBefore(newStartTimestampObj)){\n        newState.startTimestampObj = newStartTimestampObj;\n        newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n      }\n\n      if (newState.minStartTime.isBefore(newStartTimestampObj)){\n        newState.minStartTime = newStartTimestampObj;\n      }\n    }\n\n    newState.minDate = newState.minStartTime._d;\n    newState.maxDate = newState.maxEndDate._d;\n\n    if (newState !== this.state){\n      await this.setStateSafe(newState);\n    }\n  }\n\n  setDateRange = (ranges,quickSelection=null) => {\n\n    const minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp);\n\n    let startTimestampObj = moment(ranges.startDate).isSameOrAfter(minStartTime) ? moment(ranges.startDate) : minStartTime;\n    let endTimestampObj = moment(ranges.endDate);\n\n    if (startTimestampObj.isSame(endTimestampObj)){\n      endTimestampObj.add(1,'day');\n    }\n\n    endTimestampObj = moment(endTimestampObj.format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    if (startTimestampObj.isBefore(this.state.minStartTime)){\n      startTimestampObj = this.state.minStartTime;\n    }\n\n    if (endTimestampObj.isAfter(this.state.maxEndDate)){\n      endTimestampObj = this.state.maxEndDate;\n    }\n\n    const startTimestamp = parseInt(startTimestampObj._d.getTime()/1000);\n    const endTimestamp = parseInt(endTimestampObj._d.getTime()/1000);\n\n    const newState = {\n      minStartTime,\n      endTimestamp,\n      quickSelection,\n      startTimestamp,\n      endTimestampObj,\n      startTimestampObj\n    };\n\n    this.setStateSafe(newState);\n\n    return newState;\n  }\n\n  toggleAdvancedCharts = (e) => {\n    e.preventDefault();\n    this.setStateSafe({\n      showAdvanced:!this.state.showAdvanced\n    });\n  }\n\n  setDateRangeModal = (dateRangeModalOpened) => {\n    if (dateRangeModalOpened !== this.state.dateRangeModalOpened){\n      this.setStateSafe({\n        dateRangeModalOpened\n      });\n    }\n  }\n\n  async componentDidMount() {\n\n    if (!this.props.web3){\n      this.props.initWeb3();\n      return false;\n    }\n\n    /*\n    const style = document.createElement('style');\n    style.id = 'crisp-custom-style';\n    style.type = 'text/css';\n    style.innerHTML = `\n    .crisp-client{\n      display:none !important;\n    }`;\n    document.body.appendChild(style);\n    */\n\n    this.loadUtils();\n    await this.loadParams();\n    this.loadApiData();\n    this.loadCarousel();\n  }\n\n  loadCarousel(){\n    const carouselMax = this.props.isMobile ? 3 : 2;\n    this.setStateSafe({\n      carouselMax\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const strategyChanged = prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    const dateChanged = prevState.startTimestamp !== this.state.startTimestamp || prevState.endTimestamp !== this.state.endTimestamp;\n    const versionChanged = prevState.idleVersion !== this.state.idleVersion;\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n\n    if (mobileChanged){\n      this.loadCarousel();\n    }\n\n    if (contractsInitialized || tokenChanged || strategyChanged || versionChanged){\n      // console.log('componentDidUpdate',this.props.selectedStrategy,this.props.selectedToken);\n      await this.componentDidMount();\n    } else if (dateChanged){\n      this.loadApiData();\n    }\n  }\n\n  filterTokenData = (apiResults) => {\n    return apiResults.filter((r,i) => {\n      return (!this.state.startTimestamp || r.timestamp >= this.state.startTimestamp) && (!this.state.endTimestamp || r.timestamp <= this.state.endTimestamp);\n    });\n  }\n\n  setIdleVersion = idleVersion => {\n    this.setStateSafe({\n      idleVersion\n    });\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    // Get COMP APR\n    // const compAPR = await this.functionsUtil.getCompAPR(this.props.tokenConfig);\n    // console.log('compAPR',compAPR.toString());\n\n    const startTimestamp = this.state.minDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.minDate).format('DD/MM/YYYY 00:00:00'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n    const endTimestamp = this.state.maxDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.maxDate).format('DD/MM/YYYY 23:59:59'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n\n    const isRisk = ['v3','v4'].includes(this.state.idleVersion) && this.props.selectedStrategy === 'risk';\n    let apiResults_unfiltered = await this.functionsUtil.getTokenApiData(this.props.tokenConfig.address,isRisk,startTimestamp,endTimestamp,true,7200);\n\n    const apiResults = this.filterTokenData(apiResults_unfiltered);\n\n    // console.log('loadApiData',startTimestamp,endTimestamp,new Date(startTimestamp*1000),new Date(endTimestamp*1000),apiResults,apiResults_unfiltered);\n\n    if (!apiResults || !apiResults_unfiltered || !apiResults.length || !apiResults_unfiltered.length){\n      return false;\n    }\n\n    const firstResult = apiResults[0];\n    const lastResult = Object.values(apiResults).pop();\n\n    window.moment = moment;\n\n    let days = (lastResult.timestamp-firstResult.timestamp)/86400;\n    if (days === 0){\n      days = 1;\n    }\n\n    let apr = null;\n    let delta = 'N/A';\n\n    const idleTokens = this.functionsUtil.fixTokenDecimals(lastResult.idleSupply,18);\n    const firstIdlePrice = this.functionsUtil.fixTokenDecimals(firstResult.idlePrice,this.props.tokenConfig.decimals);\n    const lastIdlePrice = this.functionsUtil.fixTokenDecimals(lastResult.idlePrice,this.props.tokenConfig.decimals);\n\n    // Calculate AUM\n    let aum = idleTokens.times(lastIdlePrice);\n\n    // Convert Token balance\n    aum = await this.functionsUtil.convertTokenBalance(aum,this.props.selectedToken,this.props.tokenConfig,isRisk);\n\n    const compoundInfo = this.props.tokenConfig.protocols.filter((p) => { return p.name === 'compound' })[0];\n    const firstCompoundData = compoundInfo ? firstResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n    const lastCompoundData = compoundInfo ? lastResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n\n    if (this.state.idleVersion === 'v4') {\n\n      apr = apiResults.reduce( (sum,r) => {\n        const idleRate = this.functionsUtil.fixTokenDecimals(r.idleRate,18);\n        return this.functionsUtil.BNify(sum).plus(idleRate);\n      },0);\n\n      // Calculate average\n      apr = apr.div(apiResults.length);\n\n      if (compoundInfo){\n        const compoundWithCOMPInfo = globalConfigs.stats.protocols.compoundWithCOMP;\n        const rateField = compoundWithCOMPInfo.rateField ? compoundWithCOMPInfo.rateField : 'rate';\n\n        let compoundAvgApr = apiResults.reduce( (sum,r) => {\n\n          const compoundData = r.protocolsData.find((pData,x) => {\n            return pData.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase()\n          });\n\n          let compoundRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n            if (compoundData && compoundData[field]){\n              return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(compoundData[field]));\n            }\n            return this.functionsUtil.BNify(acc);\n          },0) : this.functionsUtil.BNify(compoundData[rateField]);\n\n          compoundRate = this.functionsUtil.fixTokenDecimals(compoundRate,18);\n\n          return this.functionsUtil.BNify(sum).plus(compoundRate);\n        },0);\n\n        // Calculate average\n        compoundAvgApr = compoundAvgApr.div(apiResults.length);\n\n        // compoundAvgApr = this.functionsUtil.apr2apy(compoundAvgApr.div(100)).times(100);\n        // apr = this.functionsUtil.apr2apy(apr.div(100)).times(100);\n\n        delta = apr.minus(compoundAvgApr);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n\n      apr = apr.toFixed(2);\n\n    } else {\n      const earning = lastIdlePrice.div(firstIdlePrice).minus(1).times(100);\n      apr = earning.times(365).div(days).toFixed(2);\n\n      if (firstCompoundData && lastCompoundData){\n        const firstCompoundPrice = this.functionsUtil.fixTokenDecimals(firstCompoundData.price,this.props.tokenConfig.decimals);\n        const lastCompoundPrice = this.functionsUtil.fixTokenDecimals(lastCompoundData.price,this.props.tokenConfig.decimals);\n        const compoundApr = lastCompoundPrice.div(firstCompoundPrice).minus(1).times(100);\n        delta = earning.minus(compoundApr).times(365).div(days);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n    }\n\n    // Count rebalances\n    let rebalances = 0;\n    apiResults.forEach((row,index) => {\n      if (index){\n        const prevRow = apiResults[index-1];\n\n        const totalAllocation = row.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        const prevTotalAllocation = prevRow.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        let hasRebalanced = false;\n        row.protocolsData.forEach( p => {\n          if (hasRebalanced){\n            return;\n          }\n          const prevP = prevRow.protocolsData.find( prevP => (prevP.protocolAddr.toLowerCase() === p.protocolAddr.toLowerCase()) );\n          const allocation = this.functionsUtil.fixTokenDecimals(p.allocation,this.props.tokenConfig.decimals);\n          const prevAllocation = prevP ? this.functionsUtil.fixTokenDecimals(prevP.allocation,this.props.tokenConfig.decimals) : this.functionsUtil.BNify(0);\n          const allocationPerc = parseInt(parseFloat(allocation.div(totalAllocation).times(100)));\n          const prevAllocationPerc = parseInt(parseFloat(prevAllocation.div(prevTotalAllocation).times(100)));\n          if (allocationPerc!==prevAllocationPerc){\n            rebalances++;\n            hasRebalanced = true;\n          }\n        });\n      }\n    });\n\n    // Add gov tokens balance to AUM\n    const availableTokens = {};\n    availableTokens[this.props.selectedToken] = this.props.tokenConfig;\n    const govTokensPool = await this.functionsUtil.getGovTokenPool(null,availableTokens,'DAI');\n    if (govTokensPool){\n      aum = aum.plus(govTokensPool);\n    }\n\n    // Format AUM\n    /*\n    aum = this.functionsUtil.formatMoney(parseFloat(aum));\n\n    const conversionRateField = this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'conversionRateField']);\n    if (conversionRateField){\n      aum += ' $';\n    }\n    */\n\n    let unlentBalance = await this.functionsUtil.getUnlentBalance(this.props.tokenConfig);\n    if (unlentBalance){\n      unlentBalance = this.functionsUtil.formatMoney(parseFloat(unlentBalance));\n    }\n\n    this.setStateSafe({\n      aum,\n      apr,\n      days,\n      delta,\n      apiResults,\n      rebalances,\n      govTokensPool,\n      unlentBalance,\n      apiResults_unfiltered\n    });\n  }\n\n  selectToken = async (strategy,token) => {\n    await this.props.setStrategyToken(strategy,token);\n    this.props.changeToken(token);\n  }\n\n  handleCarousel = action => {\n    let carouselIndex = this.state.carouselIndex;\n    if (action==='next' && carouselIndex<this.state.carouselMax){\n      carouselIndex++;\n    } else if (action==='back' && carouselIndex>0){\n      carouselIndex--;\n    }\n\n    const $element = window.jQuery(`#carousel-cursor > div:eq(${carouselIndex})`);\n    const carouselOffsetLeft = -parseFloat($element.position().left)+'px';\n\n    this.setStateSafe({\n      carouselIndex,\n      carouselOffsetLeft\n    });\n  }\n\n  render() {\n\n    const valueProps = {\n      lineHeight:1,\n      fontSize:[4,5],\n      fontWeight:[3,4],\n      color:'statValue'\n    };\n\n    const unitProps = {\n      ml:2,\n      lineHeight:1,\n      fontWeight:[2,3],\n      color:'statValue',\n      fontSize:[3,'23px'],\n    };\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const apyLong = this.functionsUtil.getGlobalConfig(['messages','apyLong']);\n\n    if (!this.props.availableStrategies){\n      return (\n        <FlexLoader\n          textProps={{\n            textSize:4,\n            fontWeight:2\n          }}\n          loaderProps={{\n            mb:3,\n            size:'40px'\n          }}\n          flexProps={{\n            minHeight:'50vh',\n            flexDirection:'column'\n          }}\n          text={'Loading assets...'}\n        />\n      );\n    }\n\n    const statsTokens = this.functionsUtil.getGlobalConfig(['stats','tokens']);\n\n    if (!this.props.selectedToken){\n      const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n      const enabledTokens = [];\n      const statsProtocols = this.functionsUtil.getGlobalConfig(['stats','protocols']);\n\n      Object.keys(statsTokens).forEach(token => {\n        const tokenInfo = statsTokens[token];\n        if (tokenInfo.enabled){\n          enabledTokens.push(token);\n        }\n      });\n      return (\n        <Flex\n          mb={3}\n          width={1}\n          flexDirection={'column'}\n        >\n          <AssetsUnderManagement\n            {...this.props}\n            loaderAlign={'flex-end'}\n          />\n          {\n            Object.keys(strategies).map(strategy => {\n              const strategyInfo = strategies[strategy];\n              const availableTokens = this.props.availableStrategies[strategy];\n\n              if (!availableTokens){\n                return false;\n              }\n              \n              // Get available protocols name\n              const availableProtocolsKeys = [];\n              Object.keys(availableTokens).forEach( token => {\n                availableTokens[token].protocols.forEach( protocolInfo => {\n                  if (availableProtocolsKeys.indexOf(protocolInfo.name)<0){\n                    availableProtocolsKeys.push(protocolInfo.name);\n                  }\n                });\n              });\n\n              const availableProtocols = availableProtocolsKeys.map( protocolName => {\n                return statsProtocols[protocolName];\n              },{});\n\n              return (\n                <Box\n                  mb={2}\n                  width={1}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                  key={`strategy-container-${strategy}`}\n                >\n                  <Title\n                    mt={3}\n                    mb={[3,4]}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'baseline'}\n                      justifyContent={'center'}\n                    >\n                      {strategyInfo.title}\n                      {\n                        strategyInfo.titlePostfix &&\n                          <Text\n                            ml={2}\n                            fontWeight={3}\n                            fontSize={[2,4]}\n                            color={'dark-gray'}\n                          >\n                            {strategyInfo.titlePostfix}\n                          </Text>\n                      }\n                    </Flex>\n                  </Title>\n                  <AssetsList\n                    enabledTokens={enabledTokens}\n                    handleClick={(props) => this.selectToken(strategy,props.token)}\n                    cols={[\n                      {\n                        title:'CURRENCY',\n                        props:{\n                          width:[0.26,0.15]\n                        },\n                        fields:[\n                          {\n                            name:'icon',\n                            props:{\n                              mr:2,\n                              height:['1.4em','2.3em']\n                            }\n                          },\n                          {\n                            name:'tokenName'\n                          }\n                        ]\n                      },\n                      {\n                        title:'POOL',\n                        props:{\n                          width:[0.22,0.14],\n                        },\n                        fields:[\n                          {\n                            name:'allocationChart',\n                            mobile:false,\n                            parentProps:{\n                              width:0.3\n                            },\n                            style:{\n                              overflow:'visible'\n                            },\n                            showLoader:false,\n                          },\n                          {\n                            name:'pool',\n                            props:{\n                              ml:1\n                            },\n                            parentProps:{\n                              width:[1,0.7]\n                            }\n                          }\n                        ]\n                      },\n                      {\n                        title:'APY',\n                        desc:apyLong,\n                        props:{\n                          width: [0.29,0.14],\n                        },\n                        parentProps:{\n                          flexDirection:'column',\n                          alignItems:'flex-start',\n                        },\n                        fields:[\n                          {\n                            name:'apy',\n                            showTooltip:true\n                          },\n                          {\n                            name:'idleDistribution',\n                            showLoader:false,\n                            props:{\n                              decimals:this.props.isMobile ? 1 : 2,\n                              fontSize:this.props.isMobile ? '9px' : 0\n                            }\n                          },\n                        ]\n                      },\n                      {\n                        title:'RISK SCORE',\n                        desc:this.functionsUtil.getGlobalConfig(['messages','riskScore']),\n                        mobile:false,\n                        props:{\n                          width:[0.27,0.16],\n                        },\n                        fields:[\n                          {\n                            name:'score'\n                          }\n                        ]\n                      },\n                      {\n                        title:'APR LAST WEEK',\n                        mobile:false,\n                        props:{\n                          width: 0.25,\n                        },\n                        parentProps:{\n                          width:1,\n                          pr:[2,4]\n                        },\n                        fields:[\n                          {\n                            name:'aprChart',\n                            style:{\n                              overflow:'visible',\n                            },\n                          }\n                        ]\n                      },\n                      {\n                        title:'',\n                        props:{\n                          width:[0.23,0.16],\n                        },\n                        parentProps:{\n                          width:1\n                        },\n                        fields:[\n                          {\n                            name:'button',\n                            label:this.props.isMobile ? 'View' : 'View stats',\n                            props:{\n                              width:1,\n                              fontSize:3,\n                              fontWeight:3,\n                              height:'45px',\n                              borderRadius:4,\n                              boxShadow:null,\n                              mainColor:'redeem',\n                              size: this.props.isMobile ? 'small' : 'medium',\n                              handleClick:(props) => this.selectToken(strategy,props.token)\n                            }\n                          }\n                        ]\n                      }\n                    ]}\n                    {...this.props}\n                    selectedStrategy={strategy}\n                    availableTokens={availableTokens}\n                  />\n                  {\n                    !this.props.isMobile &&\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'flex-end'}\n                      >\n                        {\n                          availableProtocols.filter( p => p.legend ).map( (p,index) => (\n                            <Flex\n                              mr={3}\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              key={`legend_${index}`}\n                            >\n                              <Box\n                                mr={1}\n                                width={'10px'}\n                                height={'10px'}\n                                borderRadius={'50%'}\n                                backgroundColor={`rgb(${p.color.rgb.join(',')})`}\n                              >\n                              </Box>\n                              <Text.span\n                                fontSize={1}\n                                color={'cellText'}\n                              >\n                                {p.label}\n                              </Text.span>\n                            </Flex>\n                          ))\n                        }\n                      </Flex>\n                  }\n                </Box>\n              );\n            })\n          }\n          {\n            idleTokenEnabled && !this.state.showRefreshIdleSpeed ? (\n              <Flex\n                mb={4}\n                width={1}\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <Link\n                  hoverColor={'primary'}\n                  onClick={this.showRefreshIdleSpeed.bind(this)}\n                >\n                  Refresh Idle Speed\n                </Link>\n              </Flex>\n            ) : idleTokenEnabled && this.state.showRefreshIdleSpeed &&\n              <DashboardCard\n                cardProps={{\n                  p:2,\n                  mb:4,\n                  width:1,\n                  mt:[2,3],\n                }}\n                isActive={true}\n                isInteractive={false}\n              >\n                <Flex\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                >\n                  <Text\n                    fontWeight={500}\n                    color={'flashColor'}\n                    textAlign={'center'}\n                    fontSize={[1,'15px']}\n                  >\n                    By executing this transaction you can adjust the IDLE distribution speed among the pools.\n                  </Text>\n                  <ExecuteTransaction\n                    action={'Refresh'}\n                    Component={Button}\n                    parentProps={{\n                      mt:1\n                    }}\n                    componentProps={{\n                      size:'small',\n                      mainColor:'blue',\n                      value:'REFRESH IDLE SPEED'\n                    }}\n                    params={[]}\n                    contractName={'IdleController'}\n                    methodName={'refreshIdleSpeeds'}\n                    {...this.props}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'center'}\n                      justifyContent={'center'}\n                    >\n                      <Icon\n                        mr={1}\n                        name={'Done'}\n                        size={'1.4em'}\n                        color={this.props.theme.colors.transactions.status.completed}\n                      />\n                      <Text\n                        fontWeight={500}\n                        fontSize={'15px'}\n                        color={'copyColor'}\n                        textAlign={'center'}\n                      >\n                        Idle Speed Refreshed\n                      </Text>\n                    </Flex>\n                  </ExecuteTransaction>\n                </Flex>\n              </DashboardCard>\n          }\n        </Flex>\n      );\n    } else {\n\n      const tokenConfig = statsTokens[this.props.selectedToken];\n\n      const versionsOptions = Object.keys(globalConfigs.stats.versions).filter( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return versionInfo.enabledTokens.includes(this.props.selectedToken) && versionInfo.enabledStrategies.includes(this.props.selectedStrategy);\n      }).map( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return {\n          value:version,\n          label:versionInfo.label\n        }\n      });\n\n      const disabledCharts = tokenConfig.disabledCharts || [];\n\n      const versionInfo = this.getVersionInfo(this.state.idleVersion);\n\n      let performanceTooltip = null;\n      if (this.state.idleVersion && versionInfo){\n        const showPerformanceTooltip = this.functionsUtil.getGlobalConfig(['stats','versions',this.state.idleVersion,'showPerformanceTooltip']);\n        performanceTooltip = showPerformanceTooltip ? this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'performanceTooltip']) : null;\n      }\n\n      const versionDefaultValue = versionsOptions.find( v => (v.value === this.state.idleVersion) );\n\n      return (\n        <Flex\n          p={0}\n          width={1}\n          flexDirection={'column'}\n        >\n          {\n          /*\n          }\n          <Flex position={['absolute','relative']} left={0} px={[3,0]} zIndex={10} width={1} flexDirection={'row'} mb={[0,3]}>\n            <Flex alignItems={'center'} width={[2/3,1/2]}>\n              <RouterLink to=\"/\">\n                <Image src=\"images/logo-gradient.svg\"\n                  height={['35px','48px']}\n                  position={'relative'} />\n              </RouterLink>\n              <Heading.h3 color={'dark-gray'} textAlign={'left'} fontWeight={3} lineHeight={'initial'} fontSize={[4,5]} ml={[1,2]}>\n                <Text.span fontSize={'80%'}>|</Text.span> Stats\n              </Heading.h3>\n            </Flex>\n            <Flex flexDirection={'row'} width={[1/3,1/2]} justifyContent={'flex-end'} alignItems={'center'}>\n              {\n                this.state.buttonGroups && \n                  this.props.isMobile ? (\n                    <ButtonGroup\n                      isMobile={this.props.isMobile}\n                      components={ this.state.buttonGroups.reduce((components,array) => components.concat(array),[]) }\n                      theme={'light'}\n                    />\n                  ) :\n                  this.state.buttonGroups.map((buttonGroup,i) => (\n                    <ButtonGroup\n                      key={`buttonGroup_${i}`}\n                      isMobile={this.props.isMobile}\n                      components={buttonGroup}\n                      theme={'light'}\n                    />\n                  ))\n              }\n            </Flex>\n          </Flex>\n          */\n          }\n          <Box\n            mb={[3,4]}\n          >\n            <Flex\n              flexDirection={['column','row']}\n            >\n              <Flex\n                width={[1,0.4]}\n              >\n                <Breadcrumb\n                  {...this.props}\n                  showPathMobile={true}\n                  text={'ASSETS OVERVIEW'}\n                  isMobile={this.props.isMobile}\n                  handleClick={ e => this.props.goToSection('stats') }\n                  path={[this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])]}\n                />\n              </Flex>\n              <Flex\n                mt={[3,0]}\n                width={[1,0.6]}\n                flexDirection={['column','row']}\n                justifyContent={['center','space-between']}\n              >\n                <Flex\n                  width={[1,0.26]}\n                  flexDirection={'column'}\n                >\n                  <GenericSelector\n                    innerProps={{\n                      p:1,\n                      height:['100%','46px'],\n                    }}\n                    name={'idle-version'}\n                    options={versionsOptions}\n                    defaultValue={versionDefaultValue}\n                    onChange={ v => this.setIdleVersion(v) }\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.3]}\n                  flexDirection={'column'}\n                >\n                  <AssetSelector\n                    innerProps={{\n                      p:1\n                    }}\n                    {...this.props}\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.39]}\n                  flexDirection={'column'}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:1,\n                      display:'flex',\n                      alignItems:'center',\n                      height:['46px','100%'],\n                      justifyContent:'center'\n                    }}\n                    isInteractive={true}\n                    handleClick={ e => this.setDateRangeModal(true) }\n                  >\n                    <Text\n                      fontWeight={3}\n                      color={'copyColor'}\n                    >\n                    {\n                      this.state.quickSelection\n                      ?\n                        this.quickSelections[this.state.quickSelection].label\n                      : this.state.startTimestampObj && this.state.endTimestampObj &&\n                        `${this.state.startTimestampObj.format('DD/MM/YY')} - ${this.state.endTimestampObj.format('DD/MM/YY')}`\n                    }\n                    </Text>\n                  </DashboardCard>\n                </Flex>\n              </Flex>\n            </Flex>\n          </Box>\n          {\n            !tokenConfig.enabled ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'DoNotDisturb'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Stats for {this.props.selectedToken} are not available!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : this.state.idleVersion && this.functionsUtil.strToMoment(versionInfo.startTimestamp).isAfter(Date.now()) ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'AccessTime'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Idle Stats {this.state.idleVersion} will be available shortly!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : this.functionsUtil.strToMoment(tokenConfig.startTimestamp).isAfter(Date.now()) ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'AccessTime'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Stats for {this.props.selectedToken} will be available shortly!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : (\n              <Box\n                width={1}\n              >\n                <Box\n                  mt={[3,0]}\n                  mb={[3,4]}\n                >\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    justifyContent={'center'}\n                    flexDirection={['column','row']}\n                  >\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Asset Under Management'}\n                        label={ this.state.unlentBalance ? `Unlent funds: ${this.state.unlentBalance} ${this.props.selectedToken}` : this.props.selectedToken }\n                        labelTooltip={ this.state.unlentBalance ? this.functionsUtil.getGlobalConfig(['messages','cheapRedeem']) : null}\n                      >\n                        <SmartNumber\n                          precision={2}\n                          type={'money'}\n                          {...valueProps}\n                          unitProps={unitProps}\n                          number={this.state.aum}\n                          flexProps={{\n                            alignItems:'baseline',\n                            justifyContent:'flex-start'\n                          }}\n                          unit={this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'conversionRateField']) ? '$' : null}\n                        />\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Avg APY'}\n                        label={'Annualized'}\n                      >\n                        <Flex\n                          width={1}\n                          alignItems={'center'}\n                          flexDirection={['column','row']}\n                        >\n                          <VariationNumber\n                            direction={'up'}\n                            iconPos={'right'}\n                            iconSize={'1.8em'}\n                            justifyContent={'flex-start'}\n                            width={1}\n                            >\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                              fontSize={[4,5]}\n                            >\n                              {this.state.apr}\n                              <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                            </Text>\n                          </VariationNumber>\n                        </Flex>\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Overperformance on Compound'}\n                        label={'Annualized'}\n                      >\n                        {\n                          this.state.delta && !isNaN(this.state.delta) ? (\n                            <VariationNumber\n                              direction={'up'}\n                              iconPos={'right'}\n                              iconSize={'1.8em'}\n                              justifyContent={'flex-start'}\n                              >\n                              <Text\n                                lineHeight={1}\n                                fontSize={[4,5]}\n                                fontWeight={[3,4]}\n                                color={'statValue'}\n                              >\n                                {this.state.delta}\n                                <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                              </Text>\n                            </VariationNumber>\n                          ) : (\n                            <Text\n                              lineHeight={1}\n                              fontSize={[4,5]}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                            >\n                              {this.state.delta}\n                            </Text>\n                          )\n                        }\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        label={' '}\n                        title={'Rebalances'}\n                        value={this.state.rebalances.toString()}\n                      />\n                    </Flex>\n                    {\n                    /*\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Current APR</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.currApr}\n                            <Text.span color={'copyColor'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Days Live</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.days}\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    */\n                    }\n                  </Flex>\n                </Box>\n\n                <DashboardCard\n                  title={'Historical Performance'}\n                  description={performanceTooltip}\n                  cardProps={{\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex id='chart-PRICE' width={1} mb={3}>\n                    <StatsChart\n                      height={ 350 }\n                      {...this.state}\n                      parentId={'chart-PRICE'}\n                      theme={this.props.theme}\n                      isMobile={this.props.isMobile}\n                      contracts={this.props.contracts}\n                      themeMode={this.props.themeMode}\n                      apiResults={this.state.apiResults}\n                      idleVersion={this.state.idleVersion}\n                      selectedToken={this.props.selectedToken}\n                      apiResults_unfiltered={this.state.apiResults_unfiltered}\n                      chartMode={this.state.idleVersion === this.state.latestVersion ? 'PRICE_V4' : 'PRICE'}\n                    />\n                  </Flex>\n                </DashboardCard>\n\n                <DashboardCard\n                  cardProps={{\n                    pb:3,\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex\n                    flexDirection={['column','row']}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      this.state.idleVersion === this.state.latestVersion && \n                      <Flex\n                        pt={2}\n                        width={[1,1/3]}\n                        id={'allocation-chart'}\n                        flexDirection={'column'}\n                        alignItems={'flex-start'}\n                        justifyContent={'flex-start'}\n                      >\n                        <AllocationChart\n                          height={310}\n                          {...this.props}\n                          parentId={'allocation-chart'}\n                        />\n                        <Rebalance\n                          {...this.props}\n                        />\n                      </Flex>\n                    }\n                    <Flex\n                      mb={[0,3]}\n                      id={'chart-ALL'}\n                      pl={[0,this.state.idleVersion === this.state.latestVersion ? 0 : 3]}\n                      width={[1, this.state.idleVersion === this.state.latestVersion ? 2/3 : 1]}\n                    >\n                      <Flex alignItems={'flex-start'} justifyContent={'flex-start'} flexDirection={'column'} width={1}>\n                        <Heading.h4\n                          mb={2}\n                          ml={3}\n                          mt={[3,4]}\n                          fontWeight={4}\n                          fontSize={[2,3]}\n                          textAlign={'left'}\n                          color={'dark-gray'}\n                          lineHeight={'initial'}\n                        >\n                          Allocations over time\n                        </Heading.h4>\n                        <StatsChart\n                          height={350}\n                          {...this.state}\n                          chartMode={'ALL'}\n                          parentId={'chart-ALL'}\n                          theme={this.props.theme}\n                          isMobile={this.props.isMobile}\n                          themeMode={this.props.themeMode}\n                          contracts={this.props.contracts}\n                          apiResults={this.state.apiResults}\n                          idleVersion={this.state.idleVersion}\n                          apiResults_unfiltered={this.state.apiResults_unfiltered}\n                        />\n                      </Flex>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n\n                <Flex\n                  position={'relative'}\n                >\n                  <Flex\n                    width={1}\n                    id={'carousel-container'}\n                    justifyContent={'flex-end'}\n                  >\n                    <RoundIconButton\n                      buttonProps={{\n                        mr:3\n                      }}\n                      iconName={'ArrowBack'}\n                      disabled={this.state.carouselIndex === 0}\n                      handleClick={ e => this.handleCarousel('back') }\n                    />\n                    <RoundIconButton\n                      iconName={'ArrowForward'}\n                      handleClick={ e => this.handleCarousel('next') }\n                      disabled={this.state.carouselIndex === this.state.carouselMax}\n                    />\n                  </Flex>\n                  <Flex\n                    mt={5}\n                    height={'400px'}\n                    position={'absolute'}\n                    id={'carousel-cursor'}\n                    width={['444%','200%']}\n                    justifyContent={'flex-start'}\n                    left={this.state.carouselOffsetLeft}\n                    style={{\n                      transition:'left 0.3s ease-in-out'\n                    }}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        id='chart-AUM'\n                      >\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            ml={3}\n                            mt={3}\n                            mb={2}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Asset Under Management\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'AUM'}\n                            parentId={'chart-AUM'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-APR' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            APRs\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'APR'}\n                            parentId={'chart-APR'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    {\n                      !disabledCharts.includes('score') &&\n                        <DashboardCard\n                          cardProps={{\n                            mr:4,\n                            height:'fit-content',\n                            style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                          }}\n                          title={'Risk Score'}\n                          description={'Idle Risk Score is a weighted average of the underlying protocols risks assessed by DeFi Score'}\n                          titleParentProps={{\n                            ml:16,\n                            mt:16\n                          }}\n                        >\n                          <Flex id='chart-SCORE' width={1}>\n                            <Flex\n                              mb={3}\n                              width={1}\n                              flexDirection={'column'}\n                              alignItems={'flex-start'}\n                              justifyContent={'center'}\n                            >\n                              <StatsChart\n                                height={300}\n                                {...this.state}\n                                chartMode={'SCORE'}\n                                parentId={'chart-SCORE'}\n                                theme={this.props.theme}\n                                isMobile={this.props.isMobile}\n                                themeMode={this.props.themeMode}\n                                contracts={this.props.contracts}\n                                apiResults={this.state.apiResults}\n                                idleVersion={this.state.idleVersion}\n                                apiResults_unfiltered={this.state.apiResults_unfiltered}\n                              />\n                            </Flex>\n                          </Flex>\n                        </DashboardCard>\n                    }\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-VOL' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Volume\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'VOL'}\n                            parentId={'chart-VOL'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                </Flex>\n              </Box>\n            )\n          }\n          <DateRangeModal\n            {...this.props}\n            minDate={this.state.minDate}\n            maxDate={this.state.maxDate}\n            handleSelect={this.setDateRange}\n            quickSelections={this.quickSelections}\n            isOpen={this.state.dateRangeModalOpened}\n            closeModal={e => this.setDateRangeModal(false)}\n            startDate={this.state.startTimestampObj ? this.state.startTimestampObj._d : null}\n            endDate={this.state.endTimestampObj ? this.state.endTimestampObj._d : null}\n          />\n        </Flex>\n      );\n    }\n  }\n}\n\nexport default Stats;","import Title from '../Title/Title';\nimport IconBox from '../IconBox/IconBox';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport { Flex, Icon, Text, Box, Image } from \"rimble-ui\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass Utils extends Component {\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    const SubComponent = this.props.selectedSubsection && this.props.selectedSubsection.subComponent ? this.props.selectedSubsection.subComponent : null;\n    const viewOnly = this.props.connectorName === 'custom';\n    const showBreadCrumb = typeof this.props.showBreadCrumb !== 'undefined' ? this.props.showBreadCrumb : true;\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.props.selectedSubsection ? (\n            <Box\n              width={1}\n            >\n              {\n                showBreadCrumb && (\n                  <Flex\n                    width={1}\n                  >\n                    <Breadcrumb\n                      {...this.props}\n                      showPathMobile={true}\n                      isMobile={this.props.isMobile}\n                      path={[this.props.selectedSubsection.label]}\n                      text={this.props.selectedSection.label.toUpperCase()}\n                      handleClick={ e => this.props.goToSection(this.props.selectedSection.route) }\n                    />\n                  </Flex>\n                )\n              }\n              <Flex\n                my={[2,3]}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <Title\n                  mb={2}\n                >\n                  {this.props.selectedSubsection.label}\n                </Title>\n                <Text\n                  textAlign={'center'}\n                  dangerouslySetInnerHTML={{\n                    __html:this.props.selectedSubsection.desc\n                  }}\n                >\n                </Text>\n              </Flex>\n              <SubComponent\n                {...this.props}\n                {...this.props.selectedSubsection.directProps}\n                toolProps={this.props.selectedSubsection.props}\n              />\n            </Box>\n          ) : (\n            <Flex\n              my={[2,3]}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Title\n                mb={3}\n              >\n                Tools\n              </Title>\n              <Flex\n                width={1}\n                style={{\n                  flexWrap:'wrap'\n                }}\n                justifyContent={viewOnly ? 'center' : 'flex-start'}\n              >\n              {\n                viewOnly ? (\n                  <IconBox\n                    cardProps={{\n                      maxWidth:[1,'35em']\n                    }}\n                    icon={'Visibility'}\n                    text={'You are using Idle in \"Read-Only\" mode.<br />Logout and connect with your wallet to interact.'}\n                  />\n                ) : this.props.selectedSection.submenu.map( (tool,toolIndex) => (\n                  <DashboardCard\n                    isInteractive={true}\n                    key={`tool_${toolIndex}`}\n                    cardProps={{\n                      p:[3,4],\n                      mb:[3,3],\n                      mr:[0,'2%'],\n                      style:{\n                        flex: this.props.isMobile ? '1 1 100%' : '0 0 31%'\n                      },\n                      alignItems:'center',\n                      flexDirection:'column',\n                      justifyContent:'center'\n                    }}\n                    handleClick={ e => this.props.goToSection(this.props.selectedSection.route+'/'+tool.route) }\n                  >\n                    <Text\n                      fontSize={[3,4]}\n                      textAlign={'center'}\n                    >\n                      {tool.label}\n                    </Text>\n                    <Flex\n                      justifyContent={'center'}\n                    >\n                      {\n                        tool.image ? (\n                          <Image\n                            my={[0,2]}\n                            height={'2.2em'}\n                            src={tool.image}\n                          />\n                        ) : tool.icon && (\n                          <Icon\n                            my={[0,2]}\n                            size={'3em'}\n                            name={tool.icon}\n                          />\n                        )\n                      }\n                    </Flex>\n                    <Text\n                      fontSize={[2,2]}\n                      textAlign={'center'}\n                      dangerouslySetInnerHTML={{\n                        __html:tool.desc\n                      }}\n                    >\n                    </Text>\n                  </DashboardCard>\n                ) )\n              }\n              </Flex>\n            </Flex>\n          )\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default Utils;\n","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Heading, Text, Tooltip, Icon } from \"rimble-ui\";\nimport PortfolioEquity from '../PortfolioEquity/PortfolioEquity';\n\nclass FundsOverview extends Component {\n\n  state = {\n    // govTokensAprs:null,\n    aggregatedValues:[],\n    govTokensTotalApr:null,\n    govTokensUserBalance:null,\n    govTokensDistribution:null,\n    govTokensTotalBalance:null,\n    govTokensTotalAprTooltip:null,\n    idleTokenUserDistribution:null,\n    govTokensDistributionTooltip:null,\n    govTokensTotalBalanceTooltip:null\n  };\n\n  // Utils\n  functionsUtil = null;\n  idleGovToken = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    this.idleGovToken = this.functionsUtil.getIdleGovToken();\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const isRisk = this.props.selectedStrategy === 'risk';\n\n    const [\n      // govTokensAprs,\n      idleTokenUserDistribution,\n      govTokensUserBalance,\n      apy,\n      depositTimestamp,\n      days\n    ] = await Promise.all([\n      // this.functionsUtil.getGovTokensAprs(this.props.selectedToken,this.props.tokenConfig),\n      this.idleGovToken.getUserDistribution(this.props.account,govTokenAvailableTokens,true),\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,null),\n      this.functionsUtil.loadAssetField('apy',this.props.selectedToken,this.props.tokenConfig,this.props.account,false),\n      this.functionsUtil.loadAssetField('depositTimestamp',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    let avgAPY = await this.functionsUtil.getAvgAPYStats(this.props.tokenConfig.address,isRisk,depositTimestamp);\n\n    if (!avgAPY || this.functionsUtil.BNify(avgAPY).lte(0)){\n      avgAPY = apy;\n    }\n\n    const govTokensTotalBalance = govTokensUserBalance ? Object.values(govTokensUserBalance).reduce( (totBalance,govTokenBalance) => {\n      return totBalance.plus(this.functionsUtil.BNify(govTokenBalance));\n    },this.functionsUtil.BNify(0)) : null;\n\n    const govTokensTotalBalanceTooltip = govTokensUserBalance ? Object.keys(govTokensUserBalance).map( govToken => {\n      const balance = govTokensUserBalance[govToken];\n      if (balance.gt(0)){\n        return `+${balance.toFixed(2)} ${govToken}`;\n      } else {\n        return null;\n      }\n    }).filter(v => (v !== null)) : null;\n\n    // console.log(govTokensTotalBalance,govTokensUserBalance,govTokensTotalBalanceTooltip);\n\n    // const govTokensTotalApr = govTokensAprs ? Object.values(govTokensAprs).reduce( (totApr,govTokenApr) => {\n    //   return totApr.plus(this.functionsUtil.BNify(govTokenApr));\n    // },this.functionsUtil.BNify(0)) : null;\n\n    // const govTokensTotalAprTooltip = govTokensAprs ? Object.keys(govTokensAprs).map( govToken => {\n    //   const apr = govTokensAprs[govToken];\n    //   if (apr.gt(0)){\n    //     return `${govToken}: ${apr.toFixed(2)}%`;\n    //   }\n    //   return null;\n    // }).filter(v => (v !== null)) : null;\n\n    /*\n    const govTokensDistributionTooltip = govTokensUserDistribution ? Object.keys(govTokensUserDistribution).map( govToken => {\n      const speed = govTokensUserDistribution[govToken];\n      if (speed.gt(0)){\n        const distributionFrequency = this.functionsUtil.getGlobalConfig(['govTokens',govToken,'distributionFrequency']);\n        return `+${speed.toFixed(4)} ${govToken}/${distributionFrequency}`;\n      }\n      return null;\n    }).filter(v => (v !== null)) : null;\n    */\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          desc:this.functionsUtil.getGlobalConfig(['messages','apyLong']),\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '0.00%') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    this.setState({\n      // govTokensAprs,\n      aggregatedValues,\n      // govTokensTotalApr,\n      govTokensUserBalance,\n      govTokensTotalBalance,\n      // govTokensTotalAprTooltip,\n      idleTokenUserDistribution,\n      govTokensTotalBalanceTooltip\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Flex\n                          mt={2}\n                          width={1}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <Text\n                            fontWeight={2}\n                            fontSize={[1,2]}\n                            color={'cellText'}\n                          >\n                            {v.props.title}\n                          </Text>\n                          {\n                            v.props.desc && \n                              <Tooltip\n                                placement={'bottom'}\n                                message={v.props.desc}\n                              >\n                                <Icon\n                                  ml={2}\n                                  name={\"Info\"}\n                                  size={'1em'}\n                                  color={'cellTitle'}\n                                />\n                              </Tooltip>\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquity\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              chartToken={this.props.selectedToken}\n              enabledTokens={[this.props.selectedToken]}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLent',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:this.props.theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPerc',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.govTokensTotalBalanceTooltip && this.state.govTokensTotalBalanceTooltip.length>0 && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      this.state.govTokensTotalBalanceTooltip.map((govTokenBalance,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          mt={govTokenIndex ? 1 : 0}\n                          key={`govToken_${govTokenIndex}`}\n                        >\n                          {govTokenBalance}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                )/* : this.state.govTokensUserBalance && Object.keys(this.state.govTokensUserBalance).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + ${this.state.govTokensTotalBalance.toFixed(4)}\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalBalanceTooltip.join(' / ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Fees\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'feesCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'apy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.idleTokenUserDistribution && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      mt={1}\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      {this.state.idleTokenUserDistribution.toFixed(4)} {this.idleGovToken.tokenName}/{this.idleGovToken.tokenConfig.distributionFrequency}\n                    </Text>\n                  </Flex>\n                )\n                /*\n                this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length===1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      Object.keys(this.state.govTokensAprs).map((govToken,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          ml={govTokenIndex ? 2 : 0}\n                          key={`govToken_${govToken}`}\n                        >\n                          {this.state.govTokensAprs[govToken].toFixed(2)}% {govToken}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                ) : this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + {this.state.govTokensTotalApr.toFixed(2)}%\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalAprTooltip.join('; ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Risk Score\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'score',\n                  props:{\n                    decimals:1,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverview;","import React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Icon, Checkbox, Box, Link, Input, Tooltip } from \"rimble-ui\";\n\nclass CurveRedeem extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    tokenConfig:null,\n    unevenAmounts:null,\n    selectedToken:null,\n    availableTokens:null,\n    buttonDisabled:false,\n    showMaxSlippage:false,\n    redeemUnderlying:true,\n    curveTokenConfig:null,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    curveTokensAmounts:null,\n    fastBalanceSelector:null,\n    redeemUnevenAmounts:false,\n    curveRedeemableIdleTokens:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.initToken();\n  }\n\n  showMaxSlippage(){\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  async calculateSlippage(max_slippage=null){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (!inputValue || inputValue.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    let withdrawSlippage = null;\n    let curveTokensAmounts = null;\n    let curveIdleTokensAmounts = null;\n    if (this.state.redeemUnevenAmounts){\n      [\n        curveTokensAmounts,\n        curveIdleTokensAmounts\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokensAmounts(this.props.account,normalizedAmount,true),\n        this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,normalizedAmount)\n      ]);\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false,curveIdleTokensAmounts);\n    } else {\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false);\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const redeemableBalance = inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.times(100).plus(this.state.maxSlippage || this.functionsUtil.BNify(0)).div(100)));\n      curveTokensAmounts = {};\n      curveTokensAmounts[this.state.selectedToken] = redeemableBalance;\n    }\n\n    if (withdrawSlippage){\n      withdrawSlippage = withdrawSlippage.times(100);\n    }\n\n    this.setState({\n      withdrawSlippage,\n      curveTokensAmounts,\n      curveIdleTokensAmounts\n    });\n\n    // Add max slippage but don't save in state\n    if (withdrawSlippage && max_slippage){\n      withdrawSlippage = withdrawSlippage.plus(max_slippage);\n    }\n\n    return withdrawSlippage;\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.tokenConfig.idle.token !== this.props.tokenConfig.idle.token;\n    if (tokenChanged){\n      await this.initToken();\n    }\n\n    const redeemUnevenAmountsChanged = prevState.redeemUnevenAmounts !== this.state.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    const inputChanged = prevState.inputValue !== this.state.inputValue;\n    const maxSlippageChanged = parseFloat(prevState.maxSlippage) !== parseFloat(this.state.maxSlippage);\n    const tokenConfigChanged = JSON.stringify(prevState.tokenConfig) !== JSON.stringify(this.state.tokenConfig);\n    if (inputChanged || tokenConfigChanged || maxSlippageChanged){\n      this.calculateSlippage();\n    }\n\n    const selectedTokenChanged = prevState.selectedToken !== this.state.selectedToken;\n    if (selectedTokenChanged){\n      this.loadSelectedTokenConfig();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    let buttonDisabled = false;\n\n    // if (this.state.redeemUnevenAmounts){\n      buttonDisabled = !amount || amount.gt(this.state.curveTokenBalance);\n    // } else {\n      // buttonDisabled = !amount || amount.gt(this.state.redeemableBalance);\n    // }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    let inputValue = null;\n\n    // if (this.state.redeemUnevenAmounts){\n    inputValue = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n    // } else {\n      // inputValue = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n    // }\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  selectDestinationToken(selectedToken){\n    this.setState({\n      selectedToken\n    });\n  }\n\n  async loadSelectedTokenConfig(){\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const tokenConfig = this.state.availableTokens[this.state.selectedToken];\n    const curveTokenConfig = curveConfig.availableTokens[tokenConfig.idle.token];\n    this.setState({\n      tokenConfig,\n      curveTokenConfig\n    });\n  }\n\n  async initToken(){\n    const [curvePoolContract,curveSwapContract] = await Promise.all([\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract()\n    ]);\n\n    const [\n      curveTokenPrice,\n      curveTokenBalance,\n      curveRedeemableIdleTokens,\n    ] = await Promise.all([\n      this.functionsUtil.getCurveTokenPrice(),\n      this.functionsUtil.getCurveTokenBalance(this.props.account),\n      this.functionsUtil.getCurveRedeemableIdleTokens(this.props.account)\n    ]);\n\n    const unevenAmounts = [];\n    const redeemableBalance = curveTokenBalance ? curveTokenBalance.times(curveTokenPrice) : this.functionsUtil.BNify(0);\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();;\n    const selectedToken = Object.keys(availableTokens)[0];\n\n    this.setState({\n      selectedToken,\n      unevenAmounts,\n      curveTokenPrice,\n      availableTokens,\n      curvePoolContract,\n      curveSwapContract,\n      curveTokenBalance,\n      redeemableBalance,\n      curveRedeemableIdleTokens\n    });\n  }\n\n  async redeem(){\n\n    if (!this.state.curveTokenBalance){\n      return false;\n    }\n\n    const callbackRedeem = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveRedeem`,\n        eventAction: this.props.selectedToken,\n        eventValue: this.state.curveTokenBalance.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackRedeem === 'function' && txSucceeded){\n        this.props.callbackRedeem(tx);\n      }\n    };\n\n    const callbackReceiptRedeem = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.curveSwapContract.name;\n    const withdrawSlippage = await this.calculateSlippage(this.state.maxSlippage);\n    const max_slippage = this.functionsUtil.BNify(this.state.maxSlippage).div(100);\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    // const curveTokenBalance = this.functionsUtil.normalizeTokenAmount(this.state.curveTokenBalance,this.state.curvePoolContract.decimals);\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    if (this.state.redeemUnevenAmounts){\n      const min_amounts = this.state.redeemUnderlying ? await this.functionsUtil.getCurveTokensAmounts(this.props.account,_amount,false,true) : await this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,_amount,max_slippage);\n      console.log('remove_liquidity',_amount.toString(),min_amounts);\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    } else {\n      const coin_index = this.state.curveTokenConfig.migrationParams.coinIndex;\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.div(100))),this.state.tokenConfig.decimals);\n      // const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.minus(inputValue.times(withdrawSlippage.div(100))),this.state.curveTokenConfig.decimals);\n      // let _token_amount = await this.functionsUtil.getCurveTokenAmount(amounts,false);\n      // _token_amount = this.functionsUtil.BNify(_token_amount).isGreaterThan(curveTokenBalance) ? curveTokenBalance : this.functionsUtil.BNify(_token_amount);\n\n      console.log('remove_liquidity_one_coin',_amount, coin_index, min_amount);\n\n      // debugger;\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_one_coin', [_amount, coin_index, min_amount, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    }\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  getFastBalanceSelector(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n\n  render() {\n\n    const showSlippage = !this.state.buttonDisabled && this.state.withdrawSlippage;\n    const curveTokenName = this.functionsUtil.getGlobalConfig(['curve','poolContract','token']);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          {\n            !this.state.curveTokenBalance ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3,\n                  minHeight:'195px',\n                  style:{\n                    display:'flex',\n                    alignItems:'center',\n                    justifyContent:'center'\n                  }\n                }}\n              >\n                <FlexLoader\n                  flexProps={{\n                    flexDirection:'row'\n                  }}\n                  loaderProps={{\n                    size:'30px'\n                  }}\n                  textProps={{\n                    ml:2\n                  }}\n                  text={'Checking Curve Pool...'}\n                />\n              </DashboardCard>\n            ) : this.state.processing.loading ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3\n                }}\n              >\n                <Flex\n                  flexDirection={'column'}\n                >\n                  <TxProgressBar\n                    web3={this.props.web3}\n                    hash={this.state.processing.txHash}\n                    endMessage={`Finalizing redeem request...`}\n                    cancelTransaction={this.cancelTransaction.bind(this)}\n                    waitText={ this.props.waitText ? this.props.waitText : 'Redeem estimated in'}\n                  />\n                </Flex>\n              </DashboardCard>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    mb:2\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'1.8em'}\n                      color={'cellText'}\n                      name={'FileUpload'}\n                    />\n                    <Text\n                      mt={1}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Withdraw from the Curve Pool in a specific token or in uneven amounts of tokens (with no slippage).\n                    </Text>\n                    <Flex\n                      mt={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                    >\n                      <Checkbox\n                        required={false}\n                        label={`Redeem with no slippage`}\n                        checked={this.state.redeemUnevenAmounts}\n                        onChange={ e => this.toggleUnevenAmounts(e.target.checked) }\n                      />\n                      <Tooltip\n                        placement={'top'}\n                        message={`You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.`}\n                      >\n                        <Icon\n                          size={'1em'}\n                          color={'cellTitle'}\n                          name={\"InfoOutline\"}\n                        />\n                      </Tooltip>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n                {\n                  !this.state.redeemUnevenAmounts/* && (!this.props.selectedToken || (this.state.showMaxSlippage && showSlippage))*/ && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      {\n                        this.state.tokenConfig && \n                          <Box\n                            width={1}\n                          >\n                            <Text\n                              mb={1}\n                            >\n                              Select destination token:\n                            </Text>\n                            <AssetSelector\n                              {...this.props}\n                              id={'token-from'}\n                              showBalance={false}\n                              tokenConfig={this.state.tokenConfig}\n                              selectedToken={this.state.selectedToken}\n                              availableTokens={this.state.availableTokens}\n                              onChange={this.selectDestinationToken.bind(this)}\n                            />\n                          </Box>\n                      }\n                    </Box>\n                  )\n                }\n                {\n                  this.state.curveTokensAmounts && !this.state.buttonDisabled && (\n                    <DashboardCard\n                      cardProps={{\n                        mt:1,\n                        mb:2,\n                        py:2,\n                        px:1\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Text\n                          mt={1}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          You will receive:\n                        </Text>\n                        <Flex\n                          mt={2}\n                          width={1}\n                          boxShadow={0}\n                          style={{\n                            flexWrap:'wrap'\n                          }}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                          >\n                            {\n                              Object.keys(this.state.curveTokensAmounts).map( token => {\n                                const balance = this.state.curveTokensAmounts[token];\n                                return (\n                                  <Flex\n                                    mb={1}\n                                    mx={1}\n                                    width={'auto'}\n                                    flexDirection={'row'}\n                                    key={`tokenBalance_${token}`}\n                                    justifyContent={'flex-start'}\n                                  >\n                                    <AssetField\n                                      token={token}\n                                      tokenConfig={{\n                                        token:token\n                                      }}\n                                      fieldInfo={{\n                                        name:'icon',\n                                        props:{\n                                          mr:1,\n                                          width:['1.4em','1.6em'],\n                                          height:['1.4em','1.6em']\n                                        }\n                                      }}\n                                    />\n                                    <SmartNumber\n                                      ml={1}\n                                      fontSize={[0,1]}\n                                      fontWeight={500}\n                                      maxPrecision={4}\n                                      color={'cellText'}\n                                      number={balance.toString()}\n                                    />\n                                  </Flex>\n                                );\n                            })\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n                {\n                  this.state.showMaxSlippage && showSlippage && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Text>\n                          Choose max slippage:\n                        </Text>\n                        <Tooltip\n                          placement={'top'}\n                          message={`Max additional slippage on top of the one shown below`}\n                        >\n                          <Icon\n                            ml={1}\n                            size={'1em'}\n                            color={'cellTitle'}\n                            name={\"InfoOutline\"}\n                          />\n                        </Tooltip>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        {\n                          [0.2,0.5,1,5].map( slippage => (\n                            <FastBalanceSelector\n                              cardProps={{\n                                p:1\n                              }}\n                              textProps={{\n                                fontSize:1\n                              }}\n                              percentage={slippage}\n                              key={`selector_${slippage}`}\n                              onMouseDown={()=>this.setMaxSlippage(slippage)}\n                              isActive={this.state.maxSlippage === parseFloat(slippage)}\n                            />\n                          ))\n                        }\n                      </Flex>\n                    </Box>\n                  )\n                }\n                <Flex\n                  mb={3}\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  <Flex\n                    mb={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'flex-end'}\n                  >\n                    {\n                      showSlippage && (\n                        <Flex\n                          width={1}\n                          maxWidth={'40%'}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            textAlign={'right'}\n                            style={{\n                              whiteSpace:'nowrap'\n                            }}\n                            color={ parseFloat(this.state.withdrawSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                          >\n                            {\n                              parseFloat(this.state.withdrawSlippage.toFixed(3)) === 0 ?\n                                'No Slippage'\n                              : `${ this.state.withdrawSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.withdrawSlippage.abs().toFixed(3)}%`\n                            }\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={ this.state.redeemUnevenAmounts ? `You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.` : this.state.withdrawSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                          {\n                            !this.state.redeemUnevenAmounts &&\n                              <Link\n                                ml={1}\n                                color={'copyColor'}\n                                hoverColor={'primary'}\n                                onClick={this.showMaxSlippage.bind(this)}\n                              >\n                                change\n                              </Link>\n                          }\n                        </Flex>\n                      )\n                    }\n                    <Flex\n                      width={1}\n                      maxWidth={'60%'}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      justifyContent={'flex-end'}\n                    >\n                      <Link\n                        fontSize={1}\n                        fontWeight={3}\n                        color={'dark-gray'}\n                        textAlign={'right'}\n                        hoverColor={'copyColor'}\n                        onClick={ (e) => this.setFastBalanceSelector(100) }\n                        style={{\n                          maxWidth:'100%',\n                          overflow:'hidden',\n                          whiteSpace:'nowrap',\n                          textOverflow:'ellipsis'\n                        }}\n                      >\n                        {this.state.curveTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {curveTokenName}\n                      </Link>\n                    </Flex>\n                  </Flex>\n                  <Input\n                    min={0}\n                    type={\"number\"}\n                    required={true}\n                    height={'3.4em'}\n                    borderRadius={2}\n                    fontWeight={500}\n                    boxShadow={'none !important'}\n                    placeholder={`Insert amount`}\n                    onChange={this.changeInputValue.bind(this)}\n                    border={`1px solid ${this.props.theme.colors.divider}`}\n                    value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                  />\n                  <Flex\n                    mt={2}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      [25,50,75,100].map( percentage => (\n                        <FastBalanceSelector\n                          percentage={percentage}\n                          key={`selector_${percentage}`}\n                          onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                          isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                        />\n                      ))\n                    }\n                  </Flex>\n                </Flex>\n                <Flex\n                  justifyContent={'center'}\n                >\n                  <RoundButton\n                    buttonProps={{\n                      mt:2,\n                      width:[1,1/2],\n                      disabled:this.state.buttonDisabled\n                    }}\n                    handleClick={this.redeem.bind(this)}\n                  >\n                    Redeem\n                  </RoundButton>\n                </Flex>\n              </Flex>\n            )\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveRedeem;","import Migrate from '../Migrate/Migrate';\nimport IconBox from '../IconBox/IconBox';\nimport React, { Component } from 'react';\nimport ExtLink from '../ExtLink/ExtLink';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport ConnectBox from '../ConnectBox/ConnectBox';\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport RoundButton from '../RoundButton/RoundButton';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport ShareModal from '../utilities/components/ShareModal';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport TransactionField from '../TransactionField/TransactionField';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Input, Box, Icon, Link, Checkbox, Tooltip, Image } from \"rimble-ui\";\n\nclass DepositRedeem extends Component {\n\n  state = {\n    txError: {},\n    tokenAPY: '-',\n    inputValue: {},\n    processing: {},\n    curveAPY: null,\n    totalAUM: null,\n    canRedeem: false,\n    maxSlippage: 0.2,\n    canDeposit: false,\n    action: 'deposit',\n    directMint: false,\n    activeModal: null,\n    tokenGovTokens: {},\n    showBuyFlow: false,\n    maxUnlentPerc: null,\n    unlentBalance: null,\n    tokenApproved: false,\n    skipMigration: false,\n    redeemSkipGov: false,\n    showRedeemFlow: false,\n    contractPaused: false,\n    buttonDisabled: false,\n    canRedeemCurve: false,\n    erc20ForwarderTx: null,\n    signedParameters: null,\n    minAmountForMint: null,\n    showMaxSlippage: false,\n    redeemGovTokens: false,\n    canDepositCurve: false,\n    redeemSkipGovTokens: [],\n    fastBalanceSelector: {},\n    actionProxyContract: {},\n    migrationEnabled: false,\n    componentMounted: false,\n    curveTokenBalance: null,\n    agreeSkipGovTokens: false,\n    redeemCurveEnabled: false,\n    depositCurveBalance: null,\n    depositCurveEnabled: true,\n    showAdvancedOptions: false,\n    skipGovTokensGasSave: null,\n    depositCurveSlippage: null,\n    erc20ForwarderContract: {},\n    erc20ForwarderEnabled: false,\n    showETHWrapperEnabled: false,\n    skipGovTokensGasSaveUSD: null,\n    metaTransactionsEnabled: true,\n    skippedGovTokensBalance: null,\n    minAmountForMintReached: false,\n    loadingErc20ForwarderTx: false\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils() {\n    if (this.functionsUtil) {\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount() {\n    this.loadUtils();\n    await this.loadProxyContracts();\n  }\n\n  async componentDidMount() {\n\n  }\n\n  setShowRedeemFlow = (showRedeemFlow) => {\n    this.setState({\n      showRedeemFlow\n    });\n  }\n\n  setShowBuyFlow = (showBuyFlow) => {\n    this.setState({\n      showBuyFlow\n    });\n  }\n\n  toggleShowAdvancedOptions = showAdvancedOptions => {\n    this.setState((prevState) => ({\n      showAdvancedOptions: !prevState.showAdvancedOptions\n    }));\n  }\n\n  toggleSkipMigration = skipMigration => {\n    this.setState({\n      skipMigration\n    });\n  }\n\n  toggleRedeemCurve = redeemCurveEnabled => {\n    this.setState({\n      redeemCurveEnabled\n    });\n  }\n\n  toggleDepositCurve = depositCurveEnabled => {\n    this.setState({\n      depositCurveEnabled\n    });\n  }\n\n  toggleShowETHWrapper = showETHWrapperEnabled => {\n    this.setState({\n      showETHWrapperEnabled\n    });\n  }\n\n  toggleAgreeSkipGovTokens = agreeSkipGovTokens => {\n    this.setState({\n      agreeSkipGovTokens\n    });\n  }\n\n  toggleSkipMint = (directMint) => {\n    this.setState({\n      directMint\n    });\n  }\n\n  toggleRedeemGovTokens = (redeemGovTokens) => {\n    this.setState({\n      redeemGovTokens,\n      redeemSkipGovTokens: [],\n      agreeSkipGovTokens: false,\n      skippedGovTokensBalance: this.functionsUtil.BNify(0),\n      redeemSkipGov: redeemGovTokens ? false : this.state.redeemSkipGov\n    });\n  }\n\n  toggleRedeemSkipGov = (redeemSkipGov) => {\n    this.setState({\n      redeemSkipGov,\n      redeemSkipGovTokens: [],\n      agreeSkipGovTokens: false,\n      skippedGovTokensBalance: this.functionsUtil.BNify(0),\n      redeemGovTokens: redeemSkipGov ? false : this.state.redeemGovTokens\n    });\n  }\n\n  getSkippedGovTokensFlags = async () => {\n    const govTokensIndexes = await this.functionsUtil.getGovTokensIndexes(this.props.account, this.props.tokenConfig);\n    const govTokensFlags = Object.keys(govTokensIndexes).map(token => {\n      return this.state.redeemSkipGovTokens.includes(token);\n    });\n    // console.log('getSkippedGovTokensFlags',govTokensIndexes,govTokensFlags);\n    return govTokensFlags;\n  }\n\n  calculateSkippedGovTokens = async () => {\n    let skippedGovTokensBalance = this.functionsUtil.BNify(0);\n    const DAITokenConfig = this.functionsUtil.getGlobalConfig(['stats', 'tokens', 'DAI']);\n\n    await this.functionsUtil.asyncForEach(this.state.redeemSkipGovTokens, async (govToken) => {\n      const govTokenConfig = this.functionsUtil.getGlobalConfig(['govTokens', govToken]);\n      const govTokenPrice = await this.functionsUtil.getUniswapConversionRate(DAITokenConfig, govTokenConfig);\n      const skippedAmount = this.props.govTokensUserBalances[govToken].times(govTokenPrice);\n      skippedGovTokensBalance = skippedGovTokensBalance.plus(skippedAmount);\n    });\n\n    const _skipGovTokenRedeem = await this.getSkippedGovTokensFlags();\n    const WETHTokenConfig = this.functionsUtil.getGlobalConfig(['stats', 'tokens', 'WETH']);\n\n    const [\n      wethPrice,\n      redeemGasUsage,\n      skipGovRedeemGasUsage\n    ] = await Promise.all([\n      this.functionsUtil.getUniswapConversionRate(DAITokenConfig, WETHTokenConfig),\n      this.functionsUtil.estimateMethodGasUsage(this.props.tokenConfig.idle.token, 'redeemIdleToken', [this.functionsUtil.normalizeTokenAmount(this.props.idleTokenBalance, this.props.tokenConfig.decimals)], this.props.account),\n      this.functionsUtil.estimateMethodGasUsage(this.props.tokenConfig.idle.token, 'redeemIdleTokenSkipGov', [this.functionsUtil.normalizeTokenAmount(this.props.idleTokenBalance, this.props.tokenConfig.decimals), _skipGovTokenRedeem], this.props.account)\n    ]);\n\n    const skipGovTokensGasSave = redeemGasUsage && skipGovRedeemGasUsage ? redeemGasUsage.minus(skipGovRedeemGasUsage) : this.functionsUtil.BNify(0);\n    const skipGovTokensGasSaveUSD = skipGovTokensGasSave ? skipGovTokensGasSave.times(wethPrice) : this.functionsUtil.BNify(0);\n\n    this.setState({\n      skipGovTokensGasSave,\n      skipGovTokensGasSaveUSD,\n      skippedGovTokensBalance\n    });\n    return skippedGovTokensBalance;\n  }\n\n  setRedeemSkipGovTokens = (token, checked) => {\n    this.setState((prevState) => {\n      const redeemSkipGovTokens = Object.assign([], prevState.redeemSkipGovTokens);\n      if (!checked && redeemSkipGovTokens.includes(token)) {\n        redeemSkipGovTokens.splice(redeemSkipGovTokens.indexOf(token), 1);\n      } else if (checked && !redeemSkipGovTokens.includes(token)) {\n        redeemSkipGovTokens.push(token);\n      }\n      return {\n        redeemSkipGovTokens\n      };\n    }, () => {\n      this.calculateSkippedGovTokens();\n    });\n  }\n\n  toggleErc20ForwarderEnabled = (erc20ForwarderEnabled) => {\n    const newState = {\n      erc20ForwarderEnabled\n    };\n\n    this.setState(newState, () => {\n      this.cancelTransaction();\n    });\n  }\n\n  toggleMetaTransactionsEnabled = (metaTransactionsEnabled) => {\n    this.setState({\n      metaTransactionsEnabled\n    });\n  }\n\n  async loadProxyContracts() {\n    const actions = ['deposit', 'redeem'];\n    const newState = {\n      actionProxyContract: {},\n      erc20ForwarderContract: {}\n    };\n\n    await this.functionsUtil.asyncForEach(actions, async (action) => {\n      let mintProxyContractInfo = null;\n      const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', action, 'erc20ForwarderEnabled']);\n\n      if (depositErc20ForwarderEnabled) {\n        mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract', 'methods', action, 'erc20ForwarderProxyContract', 'forwarder']);\n\n        await this.props.initContract(mintProxyContractInfo.name, mintProxyContractInfo.address, mintProxyContractInfo.abi);\n\n        // Init contract for erc20 forwarder\n        const erc20ForwarderContractInfo = this.functionsUtil.getGlobalConfig(['contract', 'methods', action, 'erc20ForwarderProxyContract', 'tokens', this.props.selectedToken]);\n        if (erc20ForwarderContractInfo) {\n          mintProxyContractInfo = erc20ForwarderContractInfo;\n          const erc20ForwarderContract = await this.props.initContract(erc20ForwarderContractInfo.name, erc20ForwarderContractInfo.address, erc20ForwarderContractInfo.abi);\n          newState.erc20ForwarderContract[action] = erc20ForwarderContractInfo;\n          newState.erc20ForwarderContract[action].contract = erc20ForwarderContract.contract;\n        }\n      }\n\n      if (!mintProxyContractInfo) {\n        mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract', 'methods', action, 'proxyContract']);\n      }\n\n      const hasProxyContract = mintProxyContractInfo && mintProxyContractInfo.enabled;\n      newState.actionProxyContract[action] = hasProxyContract ? mintProxyContractInfo : null;\n      if (hasProxyContract) {\n        const proxyContract = await this.props.initContract(mintProxyContractInfo.name, mintProxyContractInfo.address, mintProxyContractInfo.abi);\n        newState.actionProxyContract[action].contract = proxyContract.contract;\n        newState.actionProxyContract[action].approved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken, mintProxyContractInfo.address, this.props.account);\n      }\n    });\n\n    this.setState(newState);\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadAPY() {\n    const tokenAprs = await this.functionsUtil.getTokenAprs(this.props.tokenConfig);\n    if (tokenAprs && tokenAprs.avgApy !== null) {\n      const tokenAPY = this.functionsUtil.BNify(tokenAprs.avgApy).toFixed(2);\n\n      let curveAPY = null;\n      if (this.state.canDepositCurve) {\n        curveAPY = await this.functionsUtil.getCurveAPY();\n        // console.log('curveAPY',curveAPY);\n        if (curveAPY) {\n          curveAPY = curveAPY.plus(tokenAPY);\n        }\n      }\n      this.setState({\n        tokenAPY,\n        curveAPY\n      });\n    }\n  }\n\n  getReferralAddress() {\n    let _referral = this.functionsUtil.getQueryStringParameterByName('_referral');\n    if (!this.functionsUtil.checkAddress(_referral)) {\n      _referral = null;\n    }\n    return _referral;\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n\n    // console.log('componentDidUpdate',this.props.tokenBalance);\n\n    if (this.props.tokenBalance === null) {\n      return false;\n    }\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    const erc20ForwarderEnabledChanged = prevState.erc20ForwarderEnabled !== this.state.erc20ForwarderEnabled;\n    const tokenBalanceChanged = prevProps.tokenBalance !== this.props.tokenBalance && this.props.tokenBalance !== null;\n\n    if (tokenChanged || tokenBalanceChanged || erc20ForwarderEnabledChanged) {\n      await this.loadProxyContracts();\n      this.loadTokenInfo();\n      return false;\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n\n    if (actionChanged || fastBalanceSelectorChanged) {\n      this.setInputValue();\n    }\n\n    const inputValueChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputValueChanged) {\n      // this.checkMinAmountForMint();\n    }\n\n    const redeemSkipGovChanged = prevState.redeemSkipGov !== this.state.redeemSkipGov;\n    const redeemGovTokensChanged = prevState.redeemGovTokens !== this.state.redeemGovTokens;\n    const agreeSkipGovTokensChanged = prevState.agreeSkipGovTokens !== this.state.agreeSkipGovTokens;\n    const redeemSkipGovTokensChanged = JSON.stringify(prevState.redeemSkipGovTokens) !== JSON.stringify(this.state.redeemSkipGovTokens);\n\n    if (redeemGovTokensChanged || actionChanged || redeemSkipGovTokensChanged || redeemSkipGovChanged || agreeSkipGovTokensChanged) {\n      this.checkButtonDisabled();\n    }\n\n    const depositCurveChanged = prevState.depositCurveEnabled !== this.state.depositCurveEnabled;\n    const metaTransactionsChanged = prevState.metaTransactionsEnabled !== this.state.metaTransactionsEnabled;\n    if (metaTransactionsChanged || depositCurveChanged) {\n      const tokenApproved = await this.checkTokenApproved();\n      this.setState({\n        tokenApproved\n      });\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged) {\n      this.calculateCurveSlippage();\n    }\n  }\n\n  async checkMinAmountForMint() {\n    let showPoolPerc = false;\n    let totalAUM = this.state.totalAUM;\n    let maxUnlentPerc = this.state.maxUnlentPerc;\n    const isRisk = this.props.selectedStrategy === 'risk';\n    const inputValue = this.functionsUtil.BNify(this.state.inputValue[this.state.action]);\n\n    if (inputValue.gt(this.props.tokenBalance)) {\n      return false;\n    }\n\n    const convertedAmount = await this.functionsUtil.convertTokenBalance(inputValue, this.props.selectedToken, this.props.tokenConfig, isRisk);\n    let minAmountForMint = this.functionsUtil.BNify(this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'minAmountForMint']));\n    let minAmountForMintReached = convertedAmount.gte(minAmountForMint);\n\n    // Check token minAmountForMint\n    if (minAmountForMintReached) {\n      if (this.props.tokenConfig.deposit && this.props.tokenConfig.deposit.minAmountForMint && convertedAmount.lt(this.props.tokenConfig.deposit.minAmountForMint)) {\n        minAmountForMintReached = false;\n      } else {\n        [\n          maxUnlentPerc,\n          totalAUM\n        ] = await Promise.all([\n          maxUnlentPerc || this.functionsUtil.genericContractCall(this.props.tokenConfig.idle.token, 'maxUnlentPerc'),\n          totalAUM || this.functionsUtil.loadAssetField('pool', this.props.selectedToken, this.props.tokenConfig, this.props.account)\n        ]);\n\n        if (maxUnlentPerc && totalAUM) {\n          const depositPerc = inputValue.div(totalAUM).times(100);\n          maxUnlentPerc = this.functionsUtil.BNify(maxUnlentPerc);\n          const maxUnlentPercFormatted = maxUnlentPerc.div(1e3).times(2);\n          if (depositPerc.lt(maxUnlentPercFormatted)) {\n            minAmountForMintReached = false;\n          } else if (totalAUM.times(maxUnlentPercFormatted.div(100)).gt(minAmountForMint)) {\n            showPoolPerc = true;\n            minAmountForMint = totalAUM.times(maxUnlentPercFormatted.div(100));\n          }\n        }\n      }\n    }\n\n    this.setState({\n      totalAUM,\n      showPoolPerc,\n      maxUnlentPerc,\n      minAmountForMint,\n      minAmountForMintReached\n    });\n  }\n\n  async calculateCurveSlippage() {\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)) {\n      return false;\n    }\n\n    const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve', 'poolContract']);\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount, curvePoolContractInfo.decimals);\n    const newState = {};\n\n    switch (this.state.action) {\n      case 'deposit':\n        newState.depositCurveBalance = amount;\n        newState.depositCurveSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token, normalizedAmount, true);\n        break;\n      case 'redeem':\n        // newState.redeemBalance = amount;\n        // newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n        break;\n      default:\n        break;\n    }\n    // console.log('calculateCurveSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  checkUseProxyContract = () => {\n    const proxyContract = this.state.actionProxyContract[this.state.action];\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'metaTransactionsEnabled']) && this.state.metaTransactionsEnabled;\n    return ((depositErc20ForwarderEnabled || depositMetaTransactionsEnabled) && proxyContract && this.props.biconomy);\n  }\n\n  approveContract = async (callbackApprove, callbackReceiptApprove) => {\n    if (this.state.depositCurveEnabled) {\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve', 'depositContract']);\n      this.functionsUtil.enableERC20(this.props.selectedToken, curveDepositContract.address, callbackApprove, callbackReceiptApprove);\n    } else {\n      // Check Proxy Contract Approved for Deposit with Biconomy\n      const useProxyContract = this.checkUseProxyContract();\n      if (useProxyContract) {\n        const proxyContract = this.state.actionProxyContract[this.state.action];\n        this.functionsUtil.enableERC20(this.props.selectedToken, proxyContract.address, callbackApprove, callbackReceiptApprove);\n      } else {\n        this.functionsUtil.enableERC20(this.props.selectedToken, this.props.tokenConfig.idle.address, callbackApprove, callbackReceiptApprove);\n      }\n    }\n  }\n\n  checkTokenApproved = async () => {\n    let tokenApproved = false;\n    if (this.state.depositCurveEnabled) {\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve', 'depositContract']);\n      tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken, curveDepositContract.address, this.props.account);\n    } else {\n      // Check Proxy Contract Approved for Deposit with Biconomy\n      const useProxyContract = this.checkUseProxyContract();\n      if (useProxyContract) {\n        // Check for Permit Deposit\n        const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n        if (depositErc20ForwarderEnabled) {\n          const permitEnabled = this.functionsUtil.getGlobalConfig(['permit', this.props.selectedToken]);\n          if (permitEnabled) {\n            return true;\n          }\n        }\n        // Check proxy contract approved\n        const proxyContract = this.state.actionProxyContract[this.state.action];\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken, proxyContract.address, this.props.account);\n        // console.log('tokenApproved 1',tokenApproved);\n      } else {\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken, this.props.tokenConfig.idle.address, this.props.account);\n        // console.log('tokenApproved 2',tokenApproved);\n      }\n    }\n\n    return tokenApproved;\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = await this.checkTokenApproved();\n\n    if (tokenApproved) {\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve: {\n            txHash: null,\n            loading: false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx, error) => {\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.props.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error) {\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error') {\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve: {\n            txHash: null,\n            loading: false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve: {\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.approveContract(callbackApprove, callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve: {\n          txHash: null,\n          loading: true\n        }\n      }\n    }));\n  }\n\n  loadTokenInfo = async () => {\n\n    if (this.state.componentMounted) {\n      this.setState({\n        componentMounted: false\n      });\n    }\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve', 'availableTokens', this.props.tokenConfig.idle.token]);\n    const curveTokenEnabled = curveConfig.enabled && curveTokenConfig && curveTokenConfig.enabled;\n\n    const [\n      tokenApproved,\n      contractPaused,\n      curveSwapContract,\n      curveDepositContract,\n      unlentBalance,\n      { migrationEnabled },\n      curveTokenBalance,\n    ] = await Promise.all([\n      this.checkTokenApproved(),\n      this.functionsUtil.checkContractPaused(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract(),\n      this.functionsUtil.getUnlentBalance(this.props.tokenConfig),\n      this.functionsUtil.checkMigration(this.props.tokenConfig, this.props.account),\n      curveTokenEnabled ? this.functionsUtil.getCurveTokenBalance(this.props.account) : null\n    ]);\n\n    const canDeposit = this.props.tokenBalance && this.functionsUtil.BNify(this.props.tokenBalance).gt(0);\n    const canRedeem = this.props.idleTokenBalance && this.functionsUtil.BNify(this.props.idleTokenBalance).gt(0);\n\n    const canDepositCurve = curveTokenEnabled && canDeposit;\n    const depositCurveEnabled = canDepositCurve;\n\n    const showETHWrapperEnabled = this.props.selectedToken === 'WETH' && (this.state.showETHWrapperEnabled || !canDeposit);\n\n    const canRedeemCurve = curveTokenEnabled && curveTokenBalance && curveTokenBalance.gt(0);\n    const redeemCurveEnabled = canRedeemCurve;\n\n    const tokenGovTokens = this.functionsUtil.getTokenGovTokens(this.props.tokenConfig);\n\n    const newState = { ...this.state };\n\n    // Check curve deposit enabled\n    if (newState.depositCurveEnabled && !curveTokenEnabled) {\n      newState.depositCurveEnabled = false;\n    }\n\n\n    newState.canRedeem = canRedeem;\n    newState.canDeposit = canDeposit;\n    newState.unlentBalance = unlentBalance;\n    newState.tokenApproved = tokenApproved;\n    newState.tokenGovTokens = tokenGovTokens;\n    newState.contractPaused = contractPaused;\n    newState.canRedeemCurve = canRedeemCurve;\n    newState.canDepositCurve = canDepositCurve;\n    newState.migrationEnabled = migrationEnabled;\n    newState.curveTokenBalance = curveTokenBalance;\n    newState.curveSwapContract = curveSwapContract;\n    newState.redeemCurveEnabled = redeemCurveEnabled;\n    newState.depositCurveEnabled = depositCurveEnabled;\n    newState.curveDepositContract = curveDepositContract;\n    newState.showETHWrapperEnabled = showETHWrapperEnabled;\n\n    newState.txError = {\n      redeem: false,\n      deposit: false\n    };\n    newState.processing = {\n      redeem: {\n        txHash: null,\n        loading: false\n      },\n      deposit: {\n        txHash: null,\n        loading: false\n      },\n      approve: {\n        txHash: null,\n        loading: false\n      },\n      boost: {\n        txHash: null,\n        loading: false\n      }\n    };\n    newState.inputValue = {\n      boost: null,\n      redeem: null,\n      deposit: null\n    };\n    newState.fastBalanceSelector = {\n      boost: null,\n      redeem: null,\n      deposit: null\n    };\n\n    newState.componentMounted = true;\n\n    // console.log('loadTokenInfo',newState);\n\n    this.setState(newState, () => {\n      this.checkAction();\n      this.loadAPY();\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      erc20ForwarderTx: null,\n      loadingErc20ForwarderTx: false,\n      processing: {\n        ...prevState.processing,\n        approve: {\n          txHash: null,\n          loading: false\n        },\n        [this.state.action]: {\n          txHash: null,\n          loading: false\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const redeemGovTokens = this.state.redeemGovTokens;\n    const selectedPercentage = this.getFastBalanceSelector();\n    const inputValue = this.state.inputValue[this.state.action];\n    const redeemSkipGov = this.state.redeemSkipGov && this.state.redeemSkipGovTokens.length > 0 && this.state.agreeSkipGovTokens;\n\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'metaTransactionsEnabled']) && this.state.metaTransactionsEnabled;\n\n    let loading = true;\n\n    switch (this.state.action) {\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)) {\n          return false;\n        }\n\n        if (!this.state.tokenApproved) {\n          return this.approveToken();\n        }\n\n        if (localStorage) {\n          this.functionsUtil.setLocalStorage('redirectToFundsAfterLogged', 0);\n        }\n\n        this.setState({\n          lendingProcessing: this.props.account,\n          lendAmount: '',\n          genericError: '',\n        });\n\n        const callbackDeposit = (tx, error) => {\n\n          if (!tx && error) {\n            tx = {\n              status: 'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.props.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error) {\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error') {\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]: {\n                txHash: null,\n                loading: false\n              }\n            }\n          }));\n\n          if (txSucceeded) {\n            this.setState((prevState) => ({\n              activeModal: 'share',\n              inputValue: {\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if ((this.state.metaTransactionsEnabled || this.state.erc20ForwarderEnabled) && txError) {\n            this.setState({\n              erc20ForwarderTx: null,\n              loadingErc20ForwarderTx: false,\n              txError: {\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          // console.log('callbackReceiptDeposit',tx);\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]: {\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n        const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve', 'availableTokens', this.props.tokenConfig.idle.token, 'enabled']);\n\n        // Curve Deposit\n        if (curveTokenEnabled && this.state.depositCurveEnabled) {\n\n          const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve', 'poolContract']);\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue, curvePoolContractInfo.decimals);\n\n          const amounts = await this.functionsUtil.getCurveAmounts(this.props.tokenConfig.idle.token, tokensToDeposit);\n          let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n          if (this.state.maxSlippage) {\n            minMintAmount = this.functionsUtil.BNify(minMintAmount);\n            minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n            minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n          }\n\n          const depositParams = [amounts, minMintAmount];\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, callbackDeposit, callbackReceiptDeposit);\n          // Normal Deposit\n        } else {\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue, this.props.tokenConfig.decimals);\n\n          // const gasLimitDeposit = this.functionsUtil.BNify(1000000);\n          let depositParams = [];\n\n          // Use Proxy Contract if enabled\n          const useProxyContract = this.checkUseProxyContract();\n          if (useProxyContract) {\n            const mintProxyContractInfo = this.state.actionProxyContract[this.state.action];\n            const mintProxyContract = mintProxyContractInfo.contract;\n\n            // Use Meta-Transactions\n            if (depositMetaTransactionsEnabled) {\n              depositParams = [tokensToDeposit, this.props.tokenConfig.idle.address];\n              const functionCall = mintProxyContract.methods[mintProxyContractInfo.function](...depositParams);\n              const functionSignature = functionCall.encodeABI();\n              // console.log('mintProxyContract',mintProxyContractInfo.function,depositParams);\n              // if (this.state.metaTransactionsEnabled){\n              contractSendResult = await this.functionsUtil.sendBiconomyTxWithPersonalSign(mintProxyContractInfo.name, functionSignature, callbackDeposit, callbackReceiptDeposit);\n              // } else {\n              //   contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n              // }\n              // Use Erc20 Forwarder\n            } else if (depositErc20ForwarderEnabled) {\n\n              // Check if the deposit method require the nonce\n              const methodAbi = mintProxyContractInfo.contract._jsonInterface.find(f => f.name === mintProxyContractInfo.function);\n              const useNonce = methodAbi ? methodAbi.inputs.find(i => i.name === 'nonce') : true;\n\n              // Build ERC20 Forwarder Tx\n              if (!this.state.erc20ForwarderTx) {\n                this.setState({\n                  txError: {\n                    [this.state.action]: false\n                  },\n                  loadingErc20ForwarderTx: true\n                }, async () => {\n                  const erc20ForwarderContract = this.state.erc20ForwarderContract[this.state.action];\n                  const signedParameters = await this.functionsUtil.signPermit(this.props.selectedToken, this.props.account, erc20ForwarderContract.name, 0, tokensToDeposit);\n\n                  // console.log('signedParameters_1',signedParameters);\n\n                  if (signedParameters) {\n\n                    const { expiry, nonce, r, s, v } = signedParameters;\n\n                    if (useNonce) {\n                      depositParams = [tokensToDeposit, parseInt(nonce), expiry, v, r, s];\n                    } else {\n                      depositParams = [tokensToDeposit, expiry, v, r, s];\n                    }\n\n                    if (mintProxyContractInfo.function === 'foo') {\n                      depositParams = [];\n                    }\n\n                    // console.log('permitAndDeposit',mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams);\n\n                    // contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n\n                    const permitType = erc20ForwarderContract.permitType;\n                    const functionCall = erc20ForwarderContract.contract.methods[erc20ForwarderContract.function](...depositParams);\n                    const functionSignature = functionCall.encodeABI();\n\n                    // console.log('functionSignature',permitType, erc20ForwarderContract.function, depositParams);\n\n                    let gasLimit = null;\n                    try {\n                      gasLimit = await functionCall.estimateGas({ from: this.props.account }); // 5000000;\n                      if (gasLimit) {\n                        gasLimit = this.functionsUtil.BNify(gasLimit).times(1.2);\n                      } else {\n                        gasLimit = this.functionsUtil.BNify(1000000);\n                      }\n                    } catch (error) {\n                      // console.log('Gas Estimate - Error: ',error);\n                    }\n\n                    if (!gasLimit) {\n                      gasLimit = this.functionsUtil.BNify(1000000);\n                    }\n\n                    // console.log('gasEstimate',mintProxyContractInfo.name, depositParams, parseFloat(gasLimit));\n\n                    // debugger;\n\n                    const erc20ForwarderTx = await this.functionsUtil.buildBiconomyErc20ForwarderTx(erc20ForwarderContract.name, this.props.tokenConfig.address, permitType, functionSignature, gasLimit);\n                    // console.log('erc20ForwarderTx',erc20ForwarderTx);\n                    return this.setState({\n                      erc20ForwarderTx,\n                      loadingErc20ForwarderTx: false\n                    });\n                  } else {\n                    return this.setState((prevState) => ({\n                      processing: {\n                        ...prevState.processing,\n                        [this.state.action]: {\n                          txHash: null,\n                          loading: false\n                        }\n                      },\n                      signedParameters: null,\n                      erc20ForwarderTx: null,\n                      loadingErc20ForwarderTx: false\n                    }));\n                  }\n                });\n                // Send ERC20 Forwarder Tx\n              } else {\n                this.setState({\n                  txError: {\n                    [this.state.action]: false\n                  },\n                  loadingErc20ForwarderTx: true\n                }, async () => {\n                  const metaInfo = {};\n                  const permitOptions = {};\n                  const erc20ForwarderContract = this.state.erc20ForwarderContract[this.state.action];\n                  const erc20ForwarderBaseContract = this.functionsUtil.getGlobalConfig(['contract', 'methods', this.state.action, 'erc20ForwarderProxyContract', 'forwarder']);\n\n                  const permitValue = `${tokensToDeposit}00`;\n                  const incrementNonce = 1; // useNonce ? 1 : 0;\n                  const signedParameters = await this.functionsUtil.signPermit(this.props.selectedToken, this.props.account, erc20ForwarderBaseContract.name, incrementNonce, permitValue);\n\n                  // console.log('signedParameters_2',signedParameters);\n\n                  if (signedParameters) {\n\n                    this.setState({\n                      signedParameters\n                    });\n\n                    const permitConfig = this.functionsUtil.getGlobalConfig(['permit', this.props.selectedToken]);\n                    const setValue = permitConfig.type.find(t => t.name === 'value');\n\n                    const { expiry, nonce, r, s, v } = signedParameters;\n                    permitOptions.v = v;\n                    permitOptions.r = r;\n                    permitOptions.s = s;\n                    permitOptions.allowed = true;\n                    permitOptions.expiry = parseInt(expiry);\n                    permitOptions.holder = this.props.account;\n                    permitOptions.value = setValue ? permitValue : 0;\n                    permitOptions.nonce = parseInt(nonce.toString());\n                    permitOptions.spender = erc20ForwarderBaseContract.address;\n\n                    metaInfo.permitData = permitOptions;\n                    metaInfo.permitType = erc20ForwarderContract.permitType;\n\n                    // console.log('sendBiconomyTxWithErc20Forwarder',permitOptions,metaInfo);\n\n                    await this.functionsUtil.asyncTimeout(200);\n\n                    contractSendResult = await this.functionsUtil.sendBiconomyTxWithErc20Forwarder(this.state.erc20ForwarderTx.request, metaInfo, callbackDeposit, callbackReceiptDeposit);\n\n                    this.setState({\n                      erc20ForwarderTx: null,\n                      loadingErc20ForwarderTx: false\n                    });\n                  } else {\n                    return this.setState((prevState) => ({\n                      processing: {\n                        ...prevState.processing,\n                        [this.state.action]: {\n                          txHash: null,\n                          loading: false\n                        }\n                      },\n                      signedParameters: null,\n                      erc20ForwarderTx: null,\n                      loadingErc20ForwarderTx: false\n                    }));\n                  }\n                });\n              }\n            }\n            // Use main contract if no proxy contract exists\n          } else {\n            /*\n            let _skipMint = !this.state.directMint && this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMint']);\n            _skipMint = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : _skipMint;\n\n            // Check if deposited amount is greated that general lower limit for direct mint\n            if (_skipMint && this.state.minAmountForMintReached){\n              _skipMint = false;\n            }\n            */\n            // Always skip mint\n            let _skipMint = true;\n\n            const _referral = this.getReferralAddress() || '0x0000000000000000000000000000000000000000';\n            depositParams = [tokensToDeposit, _skipMint, _referral];\n            // console.log('depositParams',depositParams);\n            contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'mintIdleToken', depositParams, callbackDeposit, callbackReceiptDeposit);\n          }\n        }\n        break;\n      case 'redeem':\n\n        if (redeemGovTokens) {\n          const callbackRedeem = (tx, error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_gov`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: 0\n            };\n\n            if (error) {\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error') {\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]: {\n                  txHash: null,\n                  loading: false\n                }\n              }\n            }));\n\n            if (txSucceeded) {\n              this.setState((prevState) => ({\n                inputValue: {\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]: {\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'redeemIdleToken', [0], callbackRedeem, callbackReceiptRedeem);\n\n        } else {\n\n          if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)) {\n            return false;\n          }\n\n          const txData = {\n            value: this.functionsUtil.BNify(inputValue)\n          };\n\n          let idleTokenToRedeem = null;\n          if (selectedPercentage) {\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage);\n          } else {\n            const idleTokenPriceWithFee = await this.functionsUtil.getIdleTokenPriceWithFee(this.props.tokenConfig, this.props.account)\n            idleTokenToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue, this.props.tokenConfig.decimals)).div(idleTokenPriceWithFee);\n          }\n\n          // Check if idleTokens to redeem > idleToken balance\n          if (idleTokenToRedeem.gt(this.functionsUtil.BNify(this.props.idleTokenBalance))) {\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance);\n          }\n\n          // Normalize number\n          idleTokenToRedeem = this.functionsUtil.normalizeTokenAmount(idleTokenToRedeem, 18);\n\n          if (!idleTokenToRedeem) {\n            return false;\n          }\n\n          const callbackRedeem = (tx, error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_partial`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: parseInt(inputValue)\n            };\n\n            if (error) {\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error') {\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]: {\n                  txHash: null,\n                  loading: false\n                }\n              }\n            }));\n\n            if (txSucceeded) {\n              this.setState((prevState) => ({\n                inputValue: {\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]: {\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          let redeemMethod = 'redeemIdleToken';\n          let redeemParams = [idleTokenToRedeem];\n\n          if (redeemSkipGov) {\n            redeemMethod = 'redeemIdleTokenSkipGov';\n            const _skipGovTokenRedeem = await this.getSkippedGovTokensFlags();\n            redeemParams.push(_skipGovTokenRedeem);\n          }\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, redeemMethod, redeemParams, callbackRedeem, callbackReceiptRedeem, txData);\n        }\n        break;\n      default: // Reset loading if not handled action\n        loading = false;\n        break;\n    }\n\n    if (contractSendResult !== false || loading !== this.state.processing[this.state.action].loading) {\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]: {\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  showMaxSlippage = () => {\n    this.setState({\n      showMaxSlippage: true\n    });\n  }\n\n  checkAction = () => {\n    let action = this.state.action;\n\n    switch (action) {\n      case 'redeem':\n        if (!this.state.canRedeem) {\n          action = 'deposit';\n        }\n        break;\n      default:\n        break;\n    }\n\n    if (action !== this.state.action) {\n      this.setState({\n        action\n      }, () => {\n        this.checkButtonDisabled();\n      });\n    } else {\n      this.checkButtonDisabled();\n    }\n  }\n\n  checkButtonDisabled = (amount = null) => {\n\n    if (!this.state.action) {\n      return false;\n    }\n\n    if (!amount) {\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action) {\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && (amount.lte(0) || amount.gt(this.props.tokenBalance)));\n        break;\n      case 'redeem':\n        buttonDisabled = !this.state.canRedeemCurve && !this.state.redeemGovTokens && (buttonDisabled || (!amount || amount.lte(0) || amount.gt(this.props.redeemableBalance)));\n\n        if (!buttonDisabled && this.state.redeemSkipGov && this.state.redeemSkipGovTokens.length > 0 && !this.state.agreeSkipGovTokens) {\n          buttonDisabled = true;\n        }\n        // console.log('checkButtonDisabled',this.state.redeemSkipGov,this.state.redeemSkipGovTokens.length,this.state.agreeSkipGovTokens,buttonDisabled);\n        break;\n      default:\n        break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null) {\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch (this.state.action) {\n      case 'deposit':\n        amount = this.props.tokenBalance ? this.functionsUtil.BNify(this.props.tokenBalance).times(selectedPercentage) : null;\n        break;\n      case 'redeem':\n        amount = this.props.redeemableBalance ? this.functionsUtil.BNify(this.props.redeemableBalance).times(selectedPercentage) : null;\n        break;\n      default:\n        break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue: {\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null) {\n      return false;\n    }\n\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action) {\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector: {\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  changeInputValue = async (e) => {\n    if (!this.state.action) {\n      return false;\n    }\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector: {\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue: {\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()) {\n      case 'deposit':\n\n        break;\n      case 'redeem':\n        if (!this.state.canRedeem && !this.state.canRedeemCurve) {\n          action = null;\n        }\n        break;\n      default:\n        action = null;\n        break;\n    }\n\n    if (action !== null) {\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig) {\n      return null;\n    }\n\n    const viewOnly = this.props.connectorName === 'custom';\n\n    const isDepositDisabled = this.props.tokenConfig.canDeposit && !this.props.tokenConfig.canDeposit.enabled;\n    // const depositDisabledMessage1 = isDepositDisabled && this.props.tokenConfig.canDeposit.disabledMessageDepositKey ? this.functionsUtil.getGlobalConfig(['messages', this.props.tokenConfig.canDeposit.disabledMessageDepositKey]) : null;\n    // const depositDisabledMessage2 = this.state.canRedeem ? this.functionsUtil.getGlobalConfig(['messages', this.props.tokenConfig.canDeposit.disabledMessageRedeemKey]) : \"\";\n    const depositDisabledMessage = isDepositDisabled ? (this.state.canRedeem && this.props.tokenConfig.canDeposit.disabledMessageRedeemKey ? this.functionsUtil.getGlobalConfig(['messages', this.props.tokenConfig.canDeposit.disabledMessageRedeemKey]) : (this.props.tokenConfig.canDeposit.disabledMessageDepositKey ? this.functionsUtil.getGlobalConfig(['messages', this.props.tokenConfig.canDeposit.disabledMessageDepositKey]) : null) ) : null;\n\n    const govTokensDisabled = this.props.tokenConfig.govTokensDisabled;\n    const govTokensEnabled = !govTokensDisabled && this.functionsUtil.getGlobalConfig(['strategies', this.props.selectedStrategy, 'govTokensEnabled']) && Object.keys(this.state.tokenGovTokens).length > 0;\n    const skipMintForDepositEnabled = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : true;\n    const skipMintCheckboxEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'skipMintCheckboxEnabled']) && skipMintForDepositEnabled;\n\n    const showRedeemFlow = this.state.canRedeem && (!this.state.redeemCurveEnabled || this.state.showRedeemFlow) && this.state.action === 'redeem';\n\n    const redeemGovTokenEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'redeemGovTokens', 'enabled']) && govTokensEnabled && showRedeemFlow;// && this.props.govTokensBalance.gt(0);\n    const redeemGovTokens = redeemGovTokenEnabled && this.state.redeemGovTokens;\n\n    const redeemSkipGovConfig = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'redeemSkipGov']);\n    const redeemSkipGovEnabled = redeemSkipGovConfig && !redeemSkipGovConfig.disabledTokens.includes(this.props.tokenConfig.idle.token) && govTokensEnabled && showRedeemFlow;\n    const redeemSkipGov = redeemSkipGovEnabled && this.state.redeemSkipGov && Object.keys(this.props.govTokensUserBalances).length > 0 && this.props.govTokensBalance.gt(0);\n    const redeemSkipGovNoTokens = redeemSkipGovEnabled && this.state.redeemSkipGov && (!Object.keys(this.props.govTokensUserBalances).length || this.props.govTokensBalance.lte(0));\n\n\n    const showAdvancedRedeemOptions = redeemGovTokenEnabled || redeemSkipGovEnabled;\n    // console.log('showAdvancedRedeemOptions',showAdvancedRedeemOptions,redeemGovTokenEnabled,redeemSkipGovEnabled,govTokensEnabled,showRedeemFlow);\n\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'erc20ForwarderEnabled']);\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'metaTransactionsEnabled']);\n    const depositErc20ForwarderEnabledTokens = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'erc20ForwarderProxyContract', 'tokens']);\n\n    // Biconomy Start\n    const metaTransactionsAvailable = depositMetaTransactionsEnabled && this.props.biconomy && this.state.actionProxyContract[this.state.action];\n    const useMetaTx = metaTransactionsAvailable && this.state.metaTransactionsEnabled;\n\n    const erc20ForwarderEnabled = depositErc20ForwarderEnabled && Object.keys(depositErc20ForwarderEnabledTokens).includes(this.props.selectedToken) && depositErc20ForwarderEnabledTokens[this.props.selectedToken].enabled && this.props.biconomy && this.props.erc20ForwarderClient && this.state.actionProxyContract[this.state.action] && !isDepositDisabled;\n\n    // console.log(erc20ForwarderEnabled,depositErc20ForwarderEnabled,this.props.biconomy,this.props.erc20ForwarderClient,this.state.actionProxyContract[this.state.action]);\n    // Biconomy End\n\n    const totalBalance = this.state.action === 'deposit' ? this.props.tokenBalance : this.props.redeemableBalance;\n    const migrateText = this.state.migrationEnabled && this.props.tokenConfig.migration.message !== undefined ? this.props.tokenConfig.migration.message : null;\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve', 'availableTokens', this.props.tokenConfig.idle.token, 'enabled']);\n\n    const depositCurve = curveTokenEnabled && this.state.depositCurveEnabled && this.state.action === 'deposit';\n\n    const showDepositOptions = this.state.action === 'deposit' && !this.state.contractPaused && (curveTokenEnabled || this.state.tokenApproved);\n\n    const showDepositCurve = showDepositOptions && curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canDepositCurve && this.state.action === 'deposit';\n    const showRedeemCurve = curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canRedeemCurve && this.state.action === 'redeem';\n\n    const showCurveSlippage = depositCurve && this.state.depositCurveSlippage && this.state.depositCurveBalance && !this.state.buttonDisabled;\n\n    const showRebalanceOption = false && this.state.canDeposit && skipMintCheckboxEnabled && this.state.action === 'deposit';\n    const showAdvancedDepositOptions = showDepositCurve || showRebalanceOption;\n\n    const batchDepositInfo = this.functionsUtil.getGlobalConfig(['tools', 'batchDeposit']);\n    const batchDepositEnabled = batchDepositInfo.enabled && typeof batchDepositInfo.props.availableTokens[this.props.tokenConfig.idle.token] !== 'undefined';\n    const batchDepositDepositEnabled = batchDepositInfo.depositEnabled;\n\n    const showBatchDeposit = !useMetaTx && batchDepositEnabled && batchDepositDepositEnabled && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    const ethWrapperInfo = this.functionsUtil.getGlobalConfig(['tools', 'ethWrapper']);\n    const ETHWrapperComponent = ethWrapperInfo.subComponent;\n    const showETHWrapper = this.props.selectedToken === 'WETH' && ethWrapperInfo.enabled && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    const canPerformAction = /*!depositCurve && !this.state.redeemCurveEnabled && */((this.state.action === 'deposit' && this.state.canDeposit && !isDepositDisabled) || (this.state.action === 'redeem' && this.state.canRedeem) || redeemGovTokens) && (!this.state.showETHWrapperEnabled || this.state.action === 'redeem');\n    const showActionFlow = !redeemGovTokens && canPerformAction;\n\n    const showBuyFlow = this.state.componentMounted && (!showDepositCurve || this.state.showBuyFlow) && !this.state.depositCurveEnabled && this.state.tokenApproved && !this.state.contractPaused && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.action === 'deposit' && !isDepositDisabled && !this.state.canDeposit && !this.state.showETHWrapperEnabled;\n\n    const _referral = this.getReferralAddress();\n    const showReferral = _referral && this.state.action === 'deposit' && showActionFlow && !showBuyFlow;\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1, 0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          <Box\n            width={1}\n          >\n            <Text mb={1}>\n              Select your asset:\n            </Text>\n            <AssetSelector\n              {...this.props}\n            />\n          </Box>\n          {\n            viewOnly ? (\n              <IconBox\n                cardProps={{\n                  mt: 3\n                }}\n                icon={'Visibility'}\n                text={'You are using Idle in \"Read-Only\" mode.<br />Logout and connect with your wallet to interact.'}\n              />\n            ) : (\n                <Migrate\n                  {...this.props}\n                  migrateTextBefore={migrateText}\n                  migrateText={migrateText !== null ? '' : null}\n                  toggleSkipMigration={this.toggleSkipMigration.bind(this)}\n                >\n                  {\n                    !this.props.account ? (\n                      <ConnectBox\n                        {...this.props}\n                      />\n                    ) : this.state.componentMounted ? (\n                      this.state.action && (\n                        <Box\n                          width={1}\n                        >\n                          <Flex\n                            mt={2}\n                            flexDirection={'column'}\n                          >\n                            <Text mb={2}>\n                              Choose the action:\n                          </Text>\n\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              justifyContent={'space-between'}\n                            >\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  width: 0.48,\n                                  onMouseDown: () => {\n                                    this.setAction('deposit');\n                                  }\n                                }}\n                                isInteractive={true}\n                                isActive={this.state.action === 'deposit'}\n\n                              >\n                                <Flex\n                                  my={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <TransactionField\n                                    transaction={{\n                                      action: 'deposit'\n                                    }}\n                                    fieldInfo={{\n                                      name: 'icon',\n                                      props: {\n                                        mr: 3\n                                      }\n                                    }}\n                                  />\n                                  <Text\n                                    fontSize={3}\n                                    fontWeight={3}\n                                  >\n                                    Deposit\n                                </Text>\n                                </Flex>\n                              </DashboardCard>\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  width: 0.48,\n                                  onMouseDown: () => {\n                                    this.setAction('redeem');\n                                  }\n                                }}\n                                isInteractive={true}\n                                isActive={this.state.action === 'redeem'}\n                                isDisabled={!this.state.canRedeem && !this.state.canRedeemCurve}\n                              >\n                                <Flex\n                                  my={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <TransactionField\n                                    transaction={{\n                                      action: 'redeem'\n                                    }}\n                                    fieldInfo={{\n                                      name: 'icon',\n                                      props: {\n                                        mr: 3\n                                      }\n                                    }}\n                                  />\n                                  <Text\n                                    fontSize={3}\n                                    fontWeight={3}\n                                  >\n                                    Redeem\n                                </Text>\n                                </Flex>\n                              </DashboardCard>\n                            </Flex>\n                            {\n                              isDepositDisabled && (\n                                <IconBox\n                                  cardProps={{\n                                    mt: 3\n                                  }}\n                                  iconProps={{\n                                    color:'#ffe000'\n                                  }}\n                                  icon={'Warning'}\n                                  text={depositDisabledMessage}\n                                >\n                                  {\n                                    this.state.action === 'deposit' && this.state.canRedeem && (\n                                      <RoundButton\n                                        buttonProps={{\n                                          mt:3,\n                                          width:[1,1/2]\n                                        }}\n                                        handleClick={e => this.setAction('redeem')}\n                                      >\n                                        Redeem\n                                      </RoundButton>\n                                    )\n                                  }\n                                </IconBox>\n                              )\n                            }\n                          </Flex>\n                          {\n                            (showRedeemFlow && this.state.unlentBalance) &&\n                            <DashboardCard\n                              cardProps={{\n                                py: 2,\n                                px: 2,\n                                mt: 3,\n                                display: 'flex',\n                                alignItems: 'center',\n                                flexDirection: 'column',\n                                justifyContent: 'center',\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={'LocalGasStation'}\n                                />\n                                <Text\n                                  px={2}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Available balance for Cheap Redeem\n                                </Text>\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'center'}\n                                    hoverColor={'copyColor'}\n                                  >\n                                    {this.state.unlentBalance.toFixed(4)} {this.props.selectedToken}\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.functionsUtil.getGlobalConfig(['messages', 'cheapRedeem'])}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              </Flex>\n                            </DashboardCard>\n                          }\n                          {\n                            showAdvancedRedeemOptions ? (\n                              <DashboardCard\n                                cardProps={{\n                                  pt: 2,\n                                  px: 2,\n                                  mt: 3,\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                  flexDirection: 'column',\n                                  justifyContent: 'center',\n                                  pb: this.state.showAdvancedOptions ? 3 : 2,\n                                }}\n                              >\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <Link\n                                    ml={1}\n                                    mainColor={'primary'}\n                                    hoverColor={'primary'}\n                                    onClick={this.toggleShowAdvancedOptions}\n                                  >\n                                    {this.state.showAdvancedOptions ? 'Hide' : 'Show'} advanced options\n                                </Link>\n                                  <Icon\n                                    size={'1.8em'}\n                                    color={'cellText'}\n                                    name={this.state.showAdvancedOptions ? 'ArrowDropUp' : 'ArrowDropDown'}\n                                  />\n                                </Flex>\n                                {\n                                  this.state.showAdvancedOptions &&\n                                  <Flex\n                                    mt={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      redeemGovTokenEnabled &&\n                                      <Flex\n                                        alignItems={'center'}\n                                        justifyContent={'row'}\n                                      >\n                                        <Checkbox\n                                          required={false}\n                                          checked={this.state.redeemGovTokens}\n                                          label={`Redeem governance tokens only`}\n                                          onChange={e => this.toggleRedeemGovTokens(e.target.checked)}\n                                        />\n                                        <Link\n                                          color={'link'}\n                                          hoverColor={'link'}\n                                          onClick={e => this.props.openTooltipModal('Redeem governance tokens', `This feature allows you to redeem just the amount of governance tokens accrued${this.props.govTokensBalance && this.props.govTokensBalance.gt(0) ? ` (~${this.props.govTokensBalance.toFixed(2)}$)` : null} without redeeming the underlying token.`)}\n                                        >\n                                          (read more)\n                                          </Link>\n                                      </Flex>\n                                    }\n                                    {\n                                      redeemSkipGovEnabled &&\n                                      <Flex\n                                        alignItems={'center'}\n                                        flexDirection={'row'}\n                                      >\n                                        <Checkbox\n                                          required={false}\n                                          checked={this.state.redeemSkipGov}\n                                          label={`Redeem without governance tokens`}\n                                          onChange={e => this.toggleRedeemSkipGov(e.target.checked)}\n                                        />\n                                        <Icon\n                                          mr={1}\n                                          size={'1.2em'}\n                                          name={'Warning'}\n                                          color={'#ffe000'}\n                                        />\n                                        <Link\n                                          color={'link'}\n                                          hoverColor={'link'}\n                                          onClick={e => this.props.openTooltipModal('Redeem without governance tokens', this.functionsUtil.getGlobalConfig(['messages', 'redeemSkipGov']))}\n                                        >\n                                          (read more)\n                                          </Link>\n                                      </Flex>\n                                    }\n                                  </Flex>\n                                }\n                              </DashboardCard>\n                            ) : showAdvancedDepositOptions ? (\n                              <DashboardCard\n                                cardProps={{\n                                  pt: 2,\n                                  px: 2,\n                                  mt: 3,\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                  flexDirection: 'column',\n                                  justifyContent: 'center',\n                                  pb: this.state.showAdvancedOptions ? 3 : 2,\n                                }}\n                              >\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <Link\n                                    ml={1}\n                                    mainColor={'primary'}\n                                    hoverColor={'primary'}\n                                    onClick={this.toggleShowAdvancedOptions}\n                                  >\n                                    {this.state.showAdvancedOptions ? 'Hide' : 'Show'} advanced options\n                                </Link>\n                                  <Icon\n                                    size={'1.8em'}\n                                    color={'cellText'}\n                                    name={this.state.showAdvancedOptions ? 'ArrowDropUp' : 'ArrowDropDown'}\n                                  />\n                                </Flex>\n                                {\n                                  this.state.showAdvancedOptions &&\n                                  <Flex\n                                    mt={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      showDepositCurve &&\n                                      <Flex\n                                        alignItems={'center'}\n                                        justifyContent={'row'}\n                                      >\n                                        <Checkbox\n                                          required={false}\n                                          disabled={this.state.directMint}\n                                          label={`Deposit in the Curve Pool`}\n                                          checked={this.state.depositCurveEnabled}\n                                          onChange={e => this.toggleDepositCurve(e.target.checked)}\n                                        />\n                                        <Link\n                                          mainColor={'primary'}\n                                          hoverColor={'primary'}\n                                          onClick={e => this.props.openTooltipModal('How Curve works', this.functionsUtil.getGlobalConfig(['messages', 'curveInstructions']))}\n                                        >\n                                          (read more)\n                                          </Link>\n                                      </Flex>\n                                    }\n                                    {\n                                      showRebalanceOption &&\n                                      <Flex\n                                        alignItems={'center'}\n                                        justifyContent={'row'}\n                                      >\n                                        <Checkbox\n                                          required={false}\n                                          label={`Rebalance the pool`}\n                                          checked={this.state.directMint}\n                                          disabled={this.state.depositCurveEnabled}\n                                          onChange={e => this.toggleSkipMint(e.target.checked)}\n                                        />\n                                        <Tooltip\n                                          placement={'bottom'}\n                                          message={this.functionsUtil.getGlobalConfig(['messages', 'directMint'])}\n                                        >\n                                          <Icon\n                                            size={'1em'}\n                                            color={'cellTitle'}\n                                            name={\"InfoOutline\"}\n                                          />\n                                        </Tooltip>\n                                      </Flex>\n                                    }\n                                  </Flex>\n                                }\n                              </DashboardCard>\n                            ) : (\n                                  <Flex\n                                    width={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      showDepositCurve && (\n                                        <Flex\n                                          width={1}\n                                          flexDirection={'column'}\n                                          justifyContent={'center'}\n                                        >\n                                          <DashboardCard\n                                            isRainbow={true}\n                                            cardProps={{\n                                              py: 3,\n                                              px: 2,\n                                              mt: 3,\n                                              display: 'flex',\n                                              alignItems: 'center',\n                                              flexDirection: 'column',\n                                              justifyContent: 'center',\n                                            }}\n                                          >\n                                            <Flex\n                                              width={1}\n                                              alignItems={'center'}\n                                              flexDirection={'column'}\n                                              justifyContent={'center'}\n                                            >\n                                              <Image\n                                                height={'1.8em'}\n                                                src={curveConfig.params.image}\n                                              />\n                                              <Text\n                                                mt={2}\n                                                px={2}\n                                                fontSize={1}\n                                                color={'dark-gray'}\n                                                textAlign={'center'}\n                                              >\n                                                Deposit your tokens in the Curve Pool and boost your APY up to {this.state.curveAPY ? this.state.curveAPY.toFixed(2) : '-'}%.\n                                          <Link\n                                                  ml={1}\n                                                  mainColor={'primary'}\n                                                  hoverColor={'primary'}\n                                                  onClick={e => this.props.openTooltipModal('How Curve works', this.functionsUtil.getGlobalConfig(['messages', 'curveInstructions']))}\n                                                >\n                                                  Read More\n                                          </Link>\n                                              </Text>\n                                              <Checkbox\n                                                mt={2}\n                                                required={false}\n                                                label={`Deposit in Curve`}\n                                                checked={this.state.depositCurveEnabled}\n                                                onChange={e => this.toggleDepositCurve(e.target.checked)}\n                                              />\n                                            </Flex>\n                                          </DashboardCard>\n                                          {\n                                            (!this.state.showBuyFlow && !this.state.depositCurveEnabled && !this.state.canDeposit) &&\n                                            <Link\n                                              textAlign={'center'}\n                                              hoverColor={'primary'}\n                                              onClick={e => this.setShowBuyFlow(true)}\n                                            >\n                                              I just want to deposit more {this.props.selectedToken}\n                                            </Link>\n                                          }\n                                        </Flex>\n                                      )\n                                    }\n                                    {\n                                      showRebalanceOption && (\n                                        <DashboardCard\n                                          cardProps={{\n                                            py: 3,\n                                            px: 2,\n                                            mt: 3,\n                                            display: 'flex',\n                                            alignItems: 'center',\n                                            flexDirection: 'column',\n                                            justifyContent: 'center',\n                                          }}\n                                        >\n                                          <Flex\n                                            width={1}\n                                            alignItems={'center'}\n                                            flexDirection={'column'}\n                                            justifyContent={'center'}\n                                          >\n                                            <Icon\n                                              size={'1.8em'}\n                                              color={'cellText'}\n                                              name={'InfoOutline'}\n                                            />\n                                            <Text\n                                              mt={1}\n                                              px={2}\n                                              fontSize={1}\n                                              color={'cellText'}\n                                              textAlign={'center'}\n                                            >\n                                              By checking this flag you can rebalance the pool and help all users gain an additional APR\n                                      </Text>\n                                          </Flex>\n                                          <Checkbox\n                                            mt={2}\n                                            required={false}\n                                            label={`Rebalance the pool`}\n                                            checked={this.state.directMint}\n                                            onChange={e => this.toggleSkipMint(e.target.checked)}\n                                          />\n                                        </DashboardCard>\n                                      )\n                                    }\n                                    {\n                                      redeemGovTokenEnabled && (\n                                        <DashboardCard\n                                          cardProps={{\n                                            py: 3,\n                                            px: 2,\n                                            mt: 3,\n                                            display: 'flex',\n                                            alignItems: 'center',\n                                            flexDirection: 'column',\n                                            justifyContent: 'center',\n                                          }}\n                                        >\n                                          <Flex\n                                            width={1}\n                                            alignItems={'center'}\n                                            flexDirection={'column'}\n                                            justifyContent={'center'}\n                                          >\n                                            <Icon\n                                              size={'1.8em'}\n                                              color={'cellText'}\n                                              name={'InfoOutline'}\n                                            />\n                                            <Text\n                                              mt={1}\n                                              px={2}\n                                              fontSize={1}\n                                              color={'cellText'}\n                                              textAlign={'center'}\n                                            >\n                                              By redeeming your {this.props.selectedToken} you will automatically get also the proportional amount of governance tokens accrued{this.props.govTokensBalance && this.props.govTokensBalance.gt(0) ? ` (~ $${this.props.govTokensBalance.toFixed(2)})` : null}.\n                                      </Text>\n                                          </Flex>\n                                          <Checkbox\n                                            mt={2}\n                                            required={false}\n                                            checked={this.state.redeemGovTokens}\n                                            label={`Redeem governance tokens only`}\n                                            onChange={e => this.toggleRedeemGovTokens(e.target.checked)}\n                                          />\n                                        </DashboardCard>\n                                      )\n                                    }\n                                  </Flex>\n                                )\n                          }\n                          {\n                            redeemSkipGov ? (\n                              <DashboardCard\n                                cardProps={{\n                                  mt: 2,\n                                  mb: 2,\n                                  py: 2,\n                                  px: 1\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                >\n                                  <Text\n                                    mt={1}\n                                    fontSize={2}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    Select the gov tokens you want to give away:\n                                </Text>\n                                  <Flex\n                                    mt={2}\n                                    width={1}\n                                    boxShadow={0}\n                                    style={{\n                                      flexWrap: 'wrap'\n                                    }}\n                                    alignItems={'center'}\n                                    justifyContent={'center'}\n                                  >\n                                    {\n                                      Object.keys(this.props.govTokensUserBalances).map(token => {\n                                        const balance = this.props.govTokensUserBalances[token];\n                                        const isActive = this.state.redeemSkipGovTokens.includes(token);\n                                        const tokenConfig = this.functionsUtil.getGlobalConfig(['govTokens', token]);\n                                        return (\n                                          <Flex\n                                            p={2}\n                                            mb={1}\n                                            mx={1}\n                                            width={'auto'}\n                                            style={{\n                                              cursor: 'pointer'\n                                            }}\n                                            borderRadius={2}\n                                            flexDirection={'row'}\n                                            key={`skipGovToken_${token}`}\n                                            justifyContent={'flex-start'}\n                                            backgroundColor={isActive ? '#2a4b78' : 'cardBgHover'}\n                                            onClick={e => this.setRedeemSkipGovTokens(token, !this.state.redeemSkipGovTokens.includes(token))}\n                                          >\n                                            <Checkbox\n                                              m={0}\n                                              required={false}\n                                              checked={isActive}\n                                              onChange={e => this.setRedeemSkipGovTokens(token, e.target.checked)}\n                                            />\n                                            <AssetField\n                                              token={token}\n                                              tokenConfig={tokenConfig}\n                                              fieldInfo={{\n                                                name: 'icon',\n                                                props: {\n                                                  mr: 1,\n                                                  width: ['1.4em', '1.6em'],\n                                                  height: ['1.4em', '1.6em']\n                                                }\n                                              }}\n                                            />\n                                            <SmartNumber\n                                              ml={1}\n                                              fontSize={[0, 2]}\n                                              fontWeight={500}\n                                              maxPrecision={4}\n                                              color={'cellText'}\n                                              number={balance.toString()}\n                                            />\n                                          </Flex>\n                                        );\n                                      })\n                                    }\n                                  </Flex>\n                                </Flex>\n                              </DashboardCard>\n                            ) : redeemSkipGovNoTokens && (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 2,\n                                  my: 2\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    name={'MoneyOff'}\n                                    color={'cellText'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    You don't have any gov tokens to give away.\n                                </Text>\n                                </Flex>\n                              </DashboardCard>\n                            )\n                          }\n                          {\n                            redeemSkipGov && this.functionsUtil.BNify(this.state.skippedGovTokensBalance).gt(0) ? (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 2,\n                                  my: 2\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    name={'Warning'}\n                                    color={'#ffe000'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    fontSize={1}\n                                    color={'red'}\n                                    textAlign={'center'}\n                                  >\n                                    You are giving away {this.functionsUtil.formatMoney(this.state.skippedGovTokensBalance)}$ worth of governance tokens!\n                                </Text>\n                                  {\n                                    this.state.skipGovTokensGasSave && this.state.skipGovTokensGasSave.gte(0.0001) && (\n                                      <Text\n                                        mt={1}\n                                        fontSize={1}\n                                        color={'#00b84a'}\n                                        textAlign={'center'}\n                                      >\n                                        This will save you {this.state.skipGovTokensGasSave.toFixed(4)} ETH of gas (~{this.state.skipGovTokensGasSaveUSD.toFixed(2)}$)\n                                    </Text>\n                                    )\n                                  }\n                                  <Text\n                                    mt={1}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    To proceed with the redeem please give your authorization by checking the following flag:\n                                </Text>\n                                  <Checkbox\n                                    my={1}\n                                    required={false}\n                                    checked={this.state.agreeSkipGovTokens}\n                                    label={`I agree to give away my governance tokens`}\n                                    onChange={e => this.toggleAgreeSkipGovTokens(e.target.checked)}\n                                  />\n                                </Flex>\n                              </DashboardCard>\n                            ) : redeemSkipGov && this.state.redeemSkipGovTokens.length > 0 && (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  my: 2\n                                }}\n                              >\n                                <FlexLoader\n                                  flexProps={{\n                                    flexDirection: 'row'\n                                  }}\n                                  loaderProps={{\n                                    size: '25px',\n                                  }}\n                                  textProps={{\n                                    ml: 2\n                                  }}\n                                  text={'Loading estimated gas usage...'}\n                                />\n                              </DashboardCard>\n                            )\n                          }\n                          {\n                            showReferral && (\n                              <DashboardCard\n                                cardProps={{\n                                  py: 3,\n                                  px: 2,\n                                  mt: 3,\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                  flexDirection: 'column',\n                                  justifyContent: 'center',\n                                }}\n                              >\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    name={'Share'}\n                                    color={'cellText'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    px={2}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    You are depositing with the following referral address:\n                                </Text>\n                                  <Text\n                                    mt={1}\n                                    px={2}\n                                    fontSize={1}\n                                    fontWeight={500}\n                                    textAlign={'center'}\n                                    color={this.props.theme.colors.transactions.status.completed}\n                                  >\n                                    {_referral}\n                                  </Text>\n                                </Flex>\n                              </DashboardCard>\n                            )\n                          }\n                          {\n                            (metaTransactionsAvailable && !showBuyFlow && !this.state.contractPaused) ? (\n                              <DashboardCard\n                                cardProps={{\n                                  py: 3,\n                                  px: 2,\n                                  my: 3,\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                  flexDirection: 'column',\n                                  justifyContent: 'center',\n                                }}\n                              >\n                                {\n                                  this.state.metaTransactionsEnabled && this.state.txError[this.state.action] && this.state.actionProxyContract[this.state.action].approved ? (\n                                    <Flex\n                                      width={1}\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        name={'Warning'}\n                                        color={'cellText'}\n                                      />\n                                      <Text\n                                        mt={1}\n                                        fontSize={1}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        Seems like you are having some trouble with Meta-Transactions... Disable them by unchecking the box below and try again!\n                                    </Text>\n                                    </Flex>\n                                  ) : this.functionsUtil.getWalletProvider() === 'WalletConnect' && this.state.metaTransactionsEnabled ? (\n                                    <Flex\n                                      width={1}\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        name={'Warning'}\n                                        color={'cellText'}\n                                      />\n                                      <Text\n                                        mt={1}\n                                        fontSize={1}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        Please disable Meta-Transactions if you are using Argent Wallet to avoid failed transactions!\n                                    </Text>\n                                    </Flex>\n                                  ) : (\n                                        <Text\n                                          mt={1}\n                                          fontSize={1}\n                                          color={'cellText'}\n                                          textAlign={'center'}\n                                        >\n                                          Meta-Transactions are {this.state.metaTransactionsEnabled ? 'enabled' : 'disabled'} for {this.state.action}s!<br />\n                                          {\n                                            this.state.metaTransactionsEnabled && !this.state.actionProxyContract[this.state.action].approved && `Please either enable the Smart-Contract to enjoy gas-less ${this.state.action} or just disable meta-tx.`\n                                          }\n                                        </Text>\n                                      )\n                                }\n                                <Checkbox\n                                  mt={2}\n                                  required={false}\n                                  checked={this.state.metaTransactionsEnabled}\n                                  onChange={e => this.toggleMetaTransactionsEnabled(e.target.checked)}\n                                  label={`${this.functionsUtil.capitalize(this.state.action)} with Meta-Transaction`}\n                                />\n                              </DashboardCard>\n                            ) : (erc20ForwarderEnabled && !showBuyFlow && !this.state.contractPaused) && (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  my: 3,\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                  flexDirection: 'column',\n                                  justifyContent: 'center',\n                                }}\n                              >\n                                <Text\n                                  mb={2}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  How do you prefer to pay gas fees for this {this.state.action}?\n                              </Text>\n                                <Flex\n                                  width={[1, 0.7]}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'space-between'}\n                                >\n                                  <CardIconButton\n                                    {...this.props}\n                                    cardProps={{\n                                      py: 2,\n                                      px: [2, 3],\n                                      width: 0.48\n                                    }}\n                                    textProps={{\n                                      ml: [1, 2],\n                                    }}\n                                    text={this.props.selectedToken}\n                                    isActive={this.state.erc20ForwarderEnabled}\n                                    imageProps={{\n                                      height: this.props.isMobile ? '1.4em' : '1.8em',\n                                      width: this.props.isMobile ? '1.4em' : '1.8em'\n                                    }}\n                                    image={`/images/tokens/${this.props.selectedToken}.svg`}\n                                    handleClick={e => this.toggleErc20ForwarderEnabled(true)}\n                                  />\n                                  <CardIconButton\n                                    {...this.props}\n                                    cardProps={{\n                                      py: 2,\n                                      px: [2, 3],\n                                      width: 0.48\n                                    }}\n                                    textProps={{\n                                      ml: [1, 2],\n                                    }}\n                                    text={'ETH'}\n                                    isActive={!this.state.erc20ForwarderEnabled}\n                                    imageProps={{\n                                      height: this.props.isMobile ? '1.4em' : '1.8em',\n                                      width: this.props.isMobile ? '1.4em' : '1.8em'\n                                    }}\n                                    image={`/images/tokens/ETH.svg`}\n                                    handleClick={e => this.toggleErc20ForwarderEnabled(false)}\n                                  />\n                                </Flex>\n                                {\n                                  this.state.erc20ForwarderEnabled && this.state.txError[this.state.action] && (\n                                    <Text\n                                      mt={2}\n                                      fontSize={1}\n                                      color={'red'}\n                                      textAlign={'center'}\n                                    >\n                                      The meta-transaction cannot be executed due to insufficient funds, fund your wallet or select ETH and try again.\n                                  </Text>\n                                  )\n                                }\n                                <Text\n                                  mt={2}\n                                  fontSize={'11px'}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Powered by <ExtLink fontSize={'11px'} href={'https://biconomy.io'}>Biconomy</ExtLink>\n                                </Text>\n                              </DashboardCard>\n                            )\n                          }\n                          {\n                            (this.state.minAmountForMintReached && this.state.action === 'deposit') && (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  mt: 3\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    color={'cellText'}\n                                    name={'InfoOutline'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    fontSize={2}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    By depositing more than {this.functionsUtil.formatMoney(this.state.minAmountForMint)}$ {this.state.showPoolPerc ? `(${this.state.minAmountForMint.div(this.state.totalAUM).times(100).toFixed(0)}% of the pool)` : null} the pool will be automatically rebalanced, gas cost may be higher.\n                                </Text>\n                                </Flex>\n                              </DashboardCard>\n                            )\n                          }\n                          {\n                            showBatchDeposit ? (\n                              <Flex\n                                p={2}\n                                mt={3}\n                                width={1}\n                                borderRadius={2}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                                backgroundColor={'DashboardCard'}\n                                border={`1px solid ${this.props.theme.colors.primary}`}\n                              >\n                                <Link\n                                  textAlign={'center'}\n                                  hoverColor={'primary'}\n                                  href={`/#/dashboard/tools/${batchDepositInfo.route}/${this.props.tokenConfig.idle.token}`}\n                                >\n                                  Gas fees too high? Save gas with our Batch Deposit!\n                              </Link>\n                                <Icon\n                                  ml={1}\n                                  size={'1em'}\n                                  color={'primary'}\n                                  name={'LocalGasStation'}\n                                />\n                              </Flex>\n                            ) : showETHWrapper && (\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <DashboardCard\n                                  cardProps={{\n                                    py: 3,\n                                    px: 2,\n                                    mt: 3,\n                                    display: 'flex',\n                                    alignItems: 'center',\n                                    flexDirection: 'column',\n                                    justifyContent: 'center',\n                                    pb: this.state.showAdvancedOptions ? 3 : 2,\n                                  }}\n                                >\n                                  <Flex\n                                    alignItems={'center'}\n                                    justifyContent={'row'}\n                                  >\n                                    <Checkbox\n                                      required={false}\n                                      checked={this.state.showETHWrapperEnabled}\n                                      label={`Convert your ETH to WETH`}\n                                      onChange={e => this.toggleShowETHWrapper(e.target.checked)}\n                                    />\n                                  </Flex>\n                                </DashboardCard>\n                                {\n                                  this.state.showETHWrapperEnabled &&\n                                  <ETHWrapperComponent\n                                    {...this.props}\n                                    action={'wrap'}\n                                    fullWidth={true}\n                                    toolProps={ethWrapperInfo.props}\n                                  />\n                                }\n                              </Flex>\n                            )\n                          }\n                          {\n                            showRedeemCurve && this.state.canRedeem && (\n                              <Flex\n                                width={1}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <DashboardCard\n                                  isRainbow={true}\n                                  cardProps={{\n                                    py: 3,\n                                    px: 2,\n                                    mt: 3,\n                                    display: 'flex',\n                                    alignItems: 'center',\n                                    flexDirection: 'column',\n                                    justifyContent: 'center',\n                                  }}\n                                >\n                                  <Flex\n                                    width={1}\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <Image\n                                      height={'1.8em'}\n                                      src={curveConfig.params.image}\n                                    />\n                                    <Text\n                                      mt={2}\n                                      px={2}\n                                      fontSize={1}\n                                      color={'dark-gray'}\n                                      textAlign={'center'}\n                                    >\n                                      Redeem your tokens from the Curve Pool.\n                                    <Link\n                                        ml={1}\n                                        mainColor={'primary'}\n                                        hoverColor={'primary'}\n                                        onClick={e => this.props.openTooltipModal('How Curve works', this.functionsUtil.getGlobalConfig(['messages', 'curveInstructions']))}\n                                      >\n                                        Read More\n                                    </Link>\n                                    </Text>\n                                    {\n                                      this.state.canRedeem &&\n                                      <Checkbox\n                                        mt={2}\n                                        required={false}\n                                        label={`Redeem from Curve`}\n                                        checked={this.state.redeemCurveEnabled}\n                                        onChange={e => this.toggleRedeemCurve(e.target.checked)}\n                                      />\n                                    }\n                                  </Flex>\n                                </DashboardCard>\n                                {\n                                  this.canRedeem &&\n                                  <Link\n                                    textAlign={'center'}\n                                    hoverColor={'primary'}\n                                    onClick={e => this.setShowRedeemFlow(true)}\n                                  >\n                                    I just want to redeem my {this.props.selectedToken}\n                                  </Link>\n                                }\n                              </Flex>\n                            )\n                          }\n                          {\n                            (this.state.contractPaused && this.state.action === 'deposit') ? (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  mt: 3\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    name={'Warning'}\n                                    color={'cellText'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    fontSize={2}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    Deposits for {this.props.selectedToken} are temporarily unavailable due to Smart-Contract maintenance. Redeems are always available.\n                                </Text>\n                                </Flex>\n                              </DashboardCard>\n                            ) : (!this.state.tokenApproved && this.state.action === 'deposit' && !this.state.showETHWrapperEnabled && !isDepositDisabled) ? (\n                              <DashboardCard\n                                isDisabled={isDepositDisabled}\n                                cardProps={{\n                                  p: 3,\n                                  mt: 3\n                                }}\n                              >\n                                {\n                                  this.state.processing['approve'] && this.state.processing['approve'].loading ? (\n                                    <Flex\n                                      flexDirection={'column'}\n                                    >\n                                      <TxProgressBar\n                                        {...this.props}\n                                        waitText={`Approve estimated in`}\n                                        endMessage={`Finalizing approve request...`}\n                                        hash={this.state.processing['approve'].txHash}\n                                        cancelTransaction={this.cancelTransaction.bind(this)}\n                                      />\n                                    </Flex>\n                                  ) : (\n                                    <Flex\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        name={'LockOpen'}\n                                        color={'cellText'}\n                                      />\n                                      <Text\n                                        mt={3}\n                                        fontSize={2}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        {\n                                          this.state.depositCurveEnabled ?\n                                            `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.`\n                                            : useMetaTx ?\n                                              `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle using Meta-Transaction you need to approve our Smart-Contract first.`\n                                              :\n                                              `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle you need to approve our Smart-Contract first.`\n                                        }\n                                      </Text>\n                                      <RoundButton\n                                        buttonProps={{\n                                          mt: 3,\n                                          width: [1, 1 / 2]\n                                        }}\n                                        handleClick={this.approveToken.bind(this)}\n                                      >\n                                        Approve\n                                      </RoundButton>\n                                    </Flex>\n                                  )\n                                }\n                              </DashboardCard>\n                            ) : (!showBuyFlow && canPerformAction) && (\n                              !this.state.processing[this.state.action].loading ? (\n                                <Flex\n                                  mt={2}\n                                  flexDirection={'column'}\n                                >\n                                  {\n                                    showActionFlow && (\n                                      <Flex\n                                        mb={3}\n                                        width={1}\n                                        flexDirection={'column'}\n                                      >\n                                        {\n                                          (totalBalance || this.props.tokenFeesPercentage) && (\n                                            <Box\n                                              mb={1}\n                                              width={1}\n                                            >\n                                              {\n                                                this.state.showMaxSlippage && showCurveSlippage && (\n                                                  <Box\n                                                    mb={2}\n                                                    width={1}\n                                                  >\n                                                    <Flex\n                                                      alignItems={'center'}\n                                                      flexDirection={'row'}\n                                                    >\n                                                      <Text>\n                                                        Choose max slippage:\n                                                    </Text>\n                                                      <Tooltip\n                                                        placement={'top'}\n                                                        message={`Max additional slippage on top of the one shown below`}\n                                                      >\n                                                        <Icon\n                                                          ml={1}\n                                                          size={'1em'}\n                                                          color={'cellTitle'}\n                                                          name={\"InfoOutline\"}\n                                                        />\n                                                      </Tooltip>\n                                                    </Flex>\n                                                    <Flex\n                                                      mt={2}\n                                                      alignItems={'center'}\n                                                      flexDirection={'row'}\n                                                      justifyContent={'space-between'}\n                                                    >\n                                                      {\n                                                        [0.2, 0.5, 1, 5].map(slippage => (\n                                                          <FastBalanceSelector\n                                                            cardProps={{\n                                                              p: 1\n                                                            }}\n                                                            textProps={{\n                                                              fontSize: 1\n                                                            }}\n                                                            percentage={slippage}\n                                                            key={`selector_${slippage}`}\n                                                            onMouseDown={() => this.setMaxSlippage(slippage)}\n                                                            isActive={this.state.maxSlippage === parseFloat(slippage)}\n                                                          />\n                                                        ))\n                                                      }\n                                                    </Flex>\n                                                  </Box>\n                                                )\n                                              }\n                                              <Flex\n                                                width={1}\n                                                alignItems={'center'}\n                                                flexDirection={'row'}\n                                                justifyContent={'space-between'}\n                                              >\n                                                {\n                                                  showCurveSlippage ? (\n                                                    <Flex\n                                                      width={1}\n                                                      maxWidth={'50%'}\n                                                      alignItems={'center'}\n                                                      flexDirection={'row'}\n                                                    >\n                                                      <Text\n                                                        fontSize={1}\n                                                        fontWeight={3}\n                                                        textAlign={'right'}\n                                                        style={{\n                                                          whiteSpace: 'nowrap'\n                                                        }}\n                                                        color={this.state.depositCurveSlippage.gt(0) ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed}\n                                                      >\n                                                        {\n                                                          parseFloat(this.state.depositCurveSlippage.times(100).toFixed(2)) === 0 ?\n                                                            'No Slippage'\n                                                            : `${this.state.depositCurveSlippage.gt(0) ? 'Slippage: ' : 'Bonus: '} ${this.state.depositCurveSlippage.times(100).abs().toFixed(2)}%`\n                                                        }\n                                                      </Text>\n                                                      <Tooltip\n                                                        placement={'top'}\n                                                        message={this.functionsUtil.getGlobalConfig(['messages', 'curveBonusSlippage'])}\n                                                      >\n                                                        <Icon\n                                                          ml={1}\n                                                          size={'1em'}\n                                                          color={'cellTitle'}\n                                                          name={\"InfoOutline\"}\n                                                        />\n                                                      </Tooltip>\n                                                      <Link\n                                                        ml={1}\n                                                        color={'copyColor'}\n                                                        hoverColor={'primary'}\n                                                        onClick={this.showMaxSlippage}\n                                                      >\n                                                        change\n                                                    </Link>\n                                                    </Flex>\n                                                  ) : this.props.tokenFeesPercentage && (\n                                                    <Flex\n                                                      alignItems={'center'}\n                                                      flexDirection={'row'}\n                                                    >\n                                                      <Text\n                                                        fontSize={1}\n                                                        fontWeight={3}\n                                                        color={'dark-gray'}\n                                                        textAlign={'right'}\n                                                        hoverColor={'copyColor'}\n                                                      >\n                                                        Performance fee: {this.props.tokenFeesPercentage.times(100).toFixed(2)}%\n                                                    </Text>\n                                                      <Tooltip\n                                                        placement={'top'}\n                                                        message={this.functionsUtil.getGlobalConfig(['messages', 'performanceFee'])}\n                                                      >\n                                                        <Icon\n                                                          ml={1}\n                                                          size={'1em'}\n                                                          color={'cellTitle'}\n                                                          name={\"InfoOutline\"}\n                                                        />\n                                                      </Tooltip>\n                                                    </Flex>\n                                                  )\n                                                }\n                                                {\n                                                  totalBalance && (\n                                                    <Link\n                                                      fontSize={1}\n                                                      fontWeight={3}\n                                                      color={'dark-gray'}\n                                                      textAlign={'right'}\n                                                      hoverColor={'copyColor'}\n                                                      onClick={(e) => this.setFastBalanceSelector(100)}\n                                                    >\n                                                      {totalBalance.toFixed(6)} {this.props.selectedToken}\n                                                    </Link>\n                                                  )\n                                                }\n                                              </Flex>\n                                            </Box>\n                                          )\n                                        }\n                                        <Input\n                                          min={0}\n                                          type={\"number\"}\n                                          required={true}\n                                          height={'3.4em'}\n                                          borderRadius={2}\n                                          fontWeight={500}\n                                          borderColor={'cardBorder'}\n                                          backgroundColor={'cardBg'}\n                                          boxShadow={'none !important'}\n                                          placeholder={`Insert amount`}\n                                          onChange={this.changeInputValue.bind(this)}\n                                          border={`1px solid ${this.props.theme.colors.divider}`}\n                                          value={this.state.inputValue[this.state.action] !== null ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]).toFixed() : ''}\n                                        />\n                                        <Flex\n                                          mt={2}\n                                          alignItems={'center'}\n                                          flexDirection={'row'}\n                                          justifyContent={'space-between'}\n                                        >\n                                          {\n                                            [25, 50, 75, 100].map(percentage => (\n                                              <FastBalanceSelector\n                                                percentage={percentage}\n                                                key={`selector_${percentage}`}\n                                                onMouseDown={() => this.setFastBalanceSelector(percentage)}\n                                                isActive={this.state.fastBalanceSelector[this.state.action] === parseInt(percentage)}\n                                              />\n                                            ))\n                                          }\n                                        </Flex>\n                                      </Flex>\n                                    )\n                                  }\n                                  {\n                                    canPerformAction && (\n                                      <Flex\n                                        justifyContent={'center'}\n                                        mt={redeemGovTokens ? 2 : 0}\n                                      >\n                                        <RoundButton\n                                          buttonProps={{\n                                            width: 'auto',\n                                            minWidth: [1, 1 / 2],\n                                            style: {\n                                              textTransform: 'capitalize'\n                                            },\n                                            disabled: this.state.buttonDisabled\n                                          }}\n                                          handleClick={this.state.buttonDisabled ? null : this.executeAction.bind(this)}\n                                        >\n                                          {this.state.action}{redeemGovTokens ? ' Gov Tokens' : '' /*(depositCurve ? ' in Curve' : '')*/}\n                                        </RoundButton>\n                                      </Flex>\n                                    )\n                                  }\n                                </Flex>\n                              ) : this.state.loadingErc20ForwarderTx ? (\n                                <Flex\n                                  mt={3}\n                                  flexDirection={'column'}\n                                >\n                                  <FlexLoader\n                                    flexProps={{\n                                      flexDirection: 'row'\n                                    }}\n                                    loaderProps={{\n                                      size: '25px',\n                                    }}\n                                    textProps={{\n                                      ml: 2\n                                    }}\n                                    text={this.state.erc20ForwarderTx ? (this.state.signedParameters ? 'Please Sign the Transaction...' : 'Please Sign the Permit...') : 'Calculating transaction fees...'}\n                                  />\n                                </Flex>\n                              ) : this.state.erc20ForwarderTx ? (\n                                <DashboardCard\n                                  cardProps={{\n                                    p: 3,\n                                    mt: 3,\n                                    display: 'flex',\n                                    alignItems: 'center',\n                                    flexDirection: 'column',\n                                    justifyContent: 'center',\n                                  }}\n                                >\n                                  <Text\n                                    mb={2}\n                                    fontSize={2}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    The required gas fee to perform the {this.state.action} is <strong>{this.state.erc20ForwarderTx.cost} {this.props.selectedToken}</strong>\n                                  </Text>\n                                  <Flex\n                                    width={1}\n                                    alignItems={'center'}\n                                    flexDirection={'row'}\n                                    justifyContent={'center'}\n                                  >\n                                    <DashboardCard\n                                      cardProps={{\n                                        mx: 2,\n                                        py: 2,\n                                        px: [2, 3],\n                                        width: 0.40,\n                                        onMouseDown: () => {\n                                          this.executeAction()\n                                        }\n                                      }}\n                                      isInteractive={true}\n                                    >\n                                      <Flex\n                                        my={1}\n                                        alignItems={'center'}\n                                        flexDirection={'row'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Flex\n                                          mr={2}\n                                          alignItems={'center'}\n                                          justifyContent={'center'}\n                                        >\n                                          <Icon\n                                            align={'center'}\n                                            color={'#00b84a'}\n                                            name={'CheckCircle'}\n                                            size={this.props.isMobile ? '1em' : '1.8em'}\n                                          />\n                                        </Flex>\n                                        <Text\n                                          fontWeight={3}\n                                          fontSize={[2, 3]}\n                                        >\n                                          Confirm\n                                      </Text>\n                                      </Flex>\n                                    </DashboardCard>\n                                    <DashboardCard\n                                      cardProps={{\n                                        mx: 2,\n                                        py: 2,\n                                        px: [2, 3],\n                                        width: 0.40,\n                                        onMouseDown: () => {\n                                          this.cancelTransaction();\n                                        }\n                                      }}\n                                      isInteractive={true}\n                                    >\n                                      <Flex\n                                        my={1}\n                                        alignItems={'center'}\n                                        flexDirection={'row'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Flex\n                                          mr={2}\n                                          alignItems={'center'}\n                                          justifyContent={'center'}\n                                        >\n                                          <Icon\n                                            name={'Cancel'}\n                                            align={'center'}\n                                            color={'#e13636'}\n                                            size={this.props.isMobile ? '1em' : '1.8em'}\n                                          />\n                                        </Flex>\n                                        <Text\n                                          fontWeight={3}\n                                          fontSize={[2, 3]}\n                                        >\n                                          Decline\n                                      </Text>\n                                      </Flex>\n                                    </DashboardCard>\n                                  </Flex>\n                                </DashboardCard>\n                              ) : (\n                                      <Flex\n                                        mt={3}\n                                        alignItems={'center'}\n                                        flexDirection={'column'}\n                                        justifyContent={'center'}\n                                      >\n                                        <TxProgressBar\n                                          {...this.props}\n                                          cancelTransaction={this.cancelTransaction.bind(this)}\n                                          hash={this.state.processing[this.state.action].txHash}\n                                          endMessage={`Finalizing ${this.state.action} request...`}\n                                          waitText={`${this.functionsUtil.capitalize(this.state.action)} estimated in`}\n                                        />\n                                      </Flex>\n                                    )\n                            )\n                          }\n                        </Box>\n                      )\n                    ) : (\n                          <Flex\n                            mt={4}\n                            flexDirection={'column'}\n                          >\n                            <FlexLoader\n                              flexProps={{\n                                flexDirection: 'row'\n                              }}\n                              loaderProps={{\n                                size: '30px'\n                              }}\n                              textProps={{\n                                ml: 2\n                              }}\n                              text={'Loading asset info...'}\n                            />\n                          </Flex>\n                        )\n                  }\n                </Migrate>\n              )\n          }\n        </Flex>\n        {\n          /*\n          showDepositCurve && this.state.depositCurveEnabled ? (\n            <CurveDeposit\n              {...this.props}\n            />\n          ) :\n          */\n          showRedeemCurve && this.state.redeemCurveEnabled && (\n            <Box\n              mt={3}\n              width={1}\n            >\n              <CurveRedeem\n                {...this.props}\n              />\n            </Box>\n          )\n        }\n        {\n          showBuyFlow &&\n          (<Flex\n            mt={3}\n            width={[1, 0.5]}\n            alignItems={'stretch'}\n            flexDirection={'column'}\n            justifyContent={'center'}\n          >\n            <BuyModal\n              {...this.props}\n              showInline={true}\n              availableMethods={[]}\n              buyToken={this.props.selectedToken}\n            />\n          </Flex>)\n        }\n\n        <ShareModal\n          confettiEnabled={true}\n          icon={`images/medal.svg`}\n          title={`Congratulations!`}\n          account={this.props.account}\n          closeModal={this.resetModal}\n          tokenName={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'share'}\n          text={`You have successfully deposited in Idle!<br />Enjoy <strong>${this.state.tokenAPY}% APY</strong> on your <strong>${this.props.selectedToken}</strong>!`}\n          tweet={`I'm earning ${this.state.tokenAPY}% APY on my ${this.props.selectedToken} with @idlefinance! Go to ${this.functionsUtil.getGlobalConfig(['baseURL'])} and start earning now from your idle tokens!`}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default DepositRedeem;\n","import theme from '../theme';\nimport { Bar } from '@nivo/bar';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Text, Input, Icon, Tooltip } from \"rimble-ui\";\n\nclass EstimatedEarnings extends Component {\n\n  state = {\n    chartData:null,\n    chartProps:null,\n    inputValue:1000,\n    maxInputValue:999999999999999\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    this.loadChart();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged){\n      this.loadChart();\n    }\n  }\n\n  async loadChart(){\n\n    const tokenApy = await this.functionsUtil.getTokenApy(this.props.tokenConfig);\n\n    if (!tokenApy){\n      return false;\n    }\n\n    const amount = this.functionsUtil.BNify(this.state.inputValue);\n    const earningsYear = amount.times(this.props.tokenApy.div(100));\n\n    const amountMonth = parseFloat(earningsYear.div(12));\n    const amount3Months = parseFloat(earningsYear.div(4));\n    const amount6Months = parseFloat(earningsYear.div(2));\n    const amountYear = parseFloat(earningsYear.div(1));\n\n    const chartData = [\n      {\n        perc:1/12,\n        label:'MONTH',\n        value:amountMonth,\n        month:amountMonth,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        monthColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:3/12,\n        label:'3 MONTHS',\n        value:amount3Months,\n        month3:amount3Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month3Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:6/12,\n        label:'6 MONTHS',\n        value:amount6Months,\n        month6:amount6Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month6Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:1,\n        label:'YEAR',\n        year:amountYear,\n        value:amountYear,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        yearColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      }\n    ];\n\n    let labelTextColorModifiers = this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'chart','labelTextColorModifiers']);\n\n    const maxGridLines = 4;\n    const gridYStep = amountYear/maxGridLines;\n    const gridYValues = [0];\n    for (let i=1;i<=maxGridLines;i++){\n      const gridYValue = i*gridYStep;\n      gridYValues.push(gridYValue);\n    }\n\n    const chartProps = {\n      padding: 0.2,\n      animate: false,\n      indexBy: 'label',\n      // enableLabel: false,\n      labelSkipWidth: 16,\n      labelSkipHeight: 16,\n      keys: ['month','month3','month6','year'],\n      colors: ({ id, data }) => data[`${id}Color`],\n      label: d => this.functionsUtil.abbreviateNumber(d.value,2,4)+' '+this.props.selectedToken,\n      labelTextColor: labelTextColorModifiers ? { from: 'color', modifiers: [ labelTextColorModifiers ] } : null,\n      isInteractive:false,\n      minValue:0,\n      gridYValues,\n      // maxValue:amountYear,\n      axisLeft:{\n        format: v => this.functionsUtil.abbreviateNumber(v,1,3),\n        tickValues:gridYValues,\n        orient: 'left',\n        tickSize: 0,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendPosition: 'middle'\n      },\n      axisBottom:{\n        legend: '',\n        tickSize:0,\n        tickPadding: 15,\n        orient: 'bottom',\n      },\n      theme:{\n        labels:{\n          text:{\n            fontSize:15,\n            fontWeight:600,\n            fill:theme.colors.counter,\n            fontFamily: theme.fonts.sansSerif\n          }\n        },\n        axis: {\n          ticks: {\n            text: {\n              fontSize:14,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '9 5'\n          }\n        },\n      },\n      margin: this.props.isMobile ? { top: 0, right: 0, bottom: 30, left: 0 } : { top: 10, right: 0, bottom: 50, left: 65 }\n    }\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  changeInputValue(e){\n    let inputValue = e.target.value.length && !isNaN(e.target.value) ? Math.min(this.state.maxInputValue,parseFloat(e.target.value)) : 0;\n    inputValue = this.functionsUtil.BNify(inputValue);\n    this.setState({\n      inputValue\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const showAPYDisclaimer = idleTokenEnabled && this.functionsUtil.getGlobalConfig(['govTokens','IDLE','showAPR']);\n\n    return (\n      <DashboardCard\n        cardProps={{\n          p:[3,4]\n        }}\n      >\n        <Flex\n          width={1}\n          flexDirection={['column','row']}\n        >\n          <Flex\n            width={[1,0.3]}\n            flexDirection={'column'}\n            justifyContent={'flex-start'}\n          >\n            <Flex\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <AssetField\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n                fieldInfo={{\n                  name:'icon',\n                  props:{\n                    mb:2,\n                    height:'2.5em'\n                  }\n                }}\n              />\n              <Text\n                fontSize={2}\n                color={'cellText'}\n                textAlign={'center'}\n              >\n                Set the amount and see your estimated earnings on time based on the current APY: { this.props.tokenApy ? `${this.props.tokenApy.toFixed(2)}%` : null}\n                {\n                  showAPYDisclaimer && \n                    <Flex\n                      style={{\n                        display:'inline-flex',\n                        verticalAlign:'middle'\n                      }}\n                    >\n                      <Tooltip\n                        placement={'top'}\n                        message={this.functionsUtil.getGlobalConfig(['messages','apyLong'])}\n                      >\n                        <Icon\n                          ml={1}\n                          name={\"Info\"}\n                          size={'1em'}\n                          color={'cellTitle'}\n                        />\n                      </Tooltip>\n                    </Flex>\n                }\n              </Text>\n            </Flex>\n            <Flex\n              mt={3}\n              flexDirection={'column'}\n            >\n              <Input\n                min={0}\n                type={\"number\"}\n                required={true}\n                borderRadius={2}\n                fontWeight={500}\n                textAlign={'center'}\n                height={['3em','3.4em']}\n                borderColor={'cardBorder'}\n                boxShadow={'none !important'}\n                max={this.state.maxInputValue}\n                backgroundColor={'cardBgHover'}\n                onChange={this.changeInputValue.bind(this)}\n                border={`1px solid ${theme.colors.divider}`}\n                placeholder={`Insert ${this.props.selectedToken.toUpperCase()} amount`}\n                value={this.state.inputValue && !isNaN(this.state.inputValue) ? this.state.inputValue : ''}\n              />\n            </Flex>\n            <Flex\n              mt={3}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                buttonProps={{\n                  width:[1,1/2],\n                }}\n                handleClick={this.loadChart.bind(this)}\n              >\n                CALCULATE\n              </RoundButton>\n            </Flex>\n          </Flex>\n          <Flex\n            mt={[3,0]}\n            width={[1,0.7]}\n            id={'estimated-earnings-chart'}\n          >\n            {\n              this.props.isMobile ? (\n                <Flex\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  {\n                    this.state.chartData !== null && this.state.chartData.map((v,index) => (\n                      <Flex\n                        py={2}\n                        my={2}\n                        width={1}\n                        flexDirection={'row'}\n                        key={`earnings_${index}`}\n                      >\n                        <Flex\n                          width={0.35}\n                          alignItems={'center'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            color={'legend'}\n                          >\n                            {v.label}\n                          </Text>\n                        </Flex>\n                        <Flex\n                          width={0.65}\n                          position={'relative'}\n                          alignItems={'center'}\n                          minHeight={['20px','35px']}\n                          justifyContent={'center'}\n                        >\n                          <Flex\n                            zIndex={1}\n                            position={'relative'}\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Text\n                              fontSize={1}\n                              fontWeight={3}\n                              color={'counter'}\n                            >\n                              {this.functionsUtil.abbreviateNumber(v.value,2,4)} {this.props.selectedToken}\n                            </Text>\n                          </Flex>\n                          <Flex\n                            right={0}\n                            width={v.perc}\n                            position={'absolute'}\n                            height={['20px','35px']}\n                            borderRadius={['20px 0 0 20px','35px 0 0 35px']}\n                            style={{background:`linear-gradient(-90deg, rgba(${v.color},0) 0%, rgba(${v.color},1) 100%)`}}\n                          ></Flex>\n                        </Flex>\n                      </Flex>\n                    ))\n                  }\n                </Flex>\n              ) : (\n                <GenericChart\n                  type={Bar}\n                  height={250}\n                  showLoader={true}\n                  {...this.state.chartProps}\n                  data={this.state.chartData}\n                  parentId={'estimated-earnings-chart'}\n                />\n              )\n            }\n          </Flex>\n        </Flex>\n      </DashboardCard>\n    );\n  }\n}\n\nexport default EstimatedEarnings;","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport { Box, Flex, Icon, Text } from \"rimble-ui\";\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport AssetsList from '../AssetsList/AssetsList';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport FundsOverview from '../FundsOverview/FundsOverview';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport DepositRedeem from '../DepositRedeem/DepositRedeem';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport ActiveCoverages from '../ActiveCoverages/ActiveCoverages';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport EstimatedEarnings from '../EstimatedEarnings/EstimatedEarnings';\n\nclass AssetPage extends Component {\n\n  state = {\n    tokenApy:{},\n    tokenFees:{},\n    tokenBalance:{},\n    tokenApproved:{},\n    activeModal:null,\n    idleTokenPrice:{},\n    govTokensBalance:{},\n    idleTokenBalance:{},\n    redeemableBalance:{},\n    govTokensDisabled:{},\n    availableGovTokens:{},\n    tokenFeesPercentage:{},\n    componentMounted:false,\n    govTokensUserBalances:{}\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadTokensInfo(){\n    if (this.props.account){\n      const newState = {...this.state};\n      // await this.functionsUtil.asyncForEach(Object.keys(this.props.availableTokens),async (token) => {\n      const token = this.props.selectedToken;\n      const tokenConfig = this.props.availableTokens[token];\n      const govTokenAvailableTokens = {};\n      govTokenAvailableTokens[token] = tokenConfig;\n\n      const [\n        tokenFeesPercentage,\n        idleTokenPrice,\n        tokenApy,\n        tokenBalance,\n        tokenFees,\n        idleTokenBalance,\n        tokenApproved,\n        govTokensUserBalances,\n        govTokensBalance\n      ] = await Promise.all([\n        this.functionsUtil.getTokenFees(tokenConfig),\n        this.functionsUtil.getIdleTokenPrice(tokenConfig),\n        this.functionsUtil.getTokenApy(this.props.tokenConfig),\n        this.functionsUtil.getTokenBalance(token,this.props.account),\n        this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n        this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n        this.functionsUtil.checkTokenApproved(token,tokenConfig.idle.address,this.props.account),\n        this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,null,null),\n        this.functionsUtil.getGovTokensUserTotalBalance(this.props.account,govTokenAvailableTokens,'DAI',false)\n      ]);\n\n      newState.tokenFees[token] = tokenFees;\n      newState.tokenBalance[token] = tokenBalance;\n      newState.tokenApproved[token] = tokenApproved;\n      newState.idleTokenPrice[token] = idleTokenPrice;\n      newState.idleTokenBalance[token] = idleTokenBalance;\n      newState.govTokensBalance[token] = govTokensBalance;\n      newState.tokenFeesPercentage[token] = tokenFeesPercentage;\n      newState.govTokensUserBalances[token] = govTokensUserBalances;\n      newState.govTokensDisabled[token] = tokenConfig.govTokensDisabled;\n      newState.tokenApy[token] = tokenApy && !tokenApy.isNaN() ? tokenApy : null;\n      newState.redeemableBalance[token] = idleTokenBalance && idleTokenPrice ? idleTokenBalance.times(idleTokenPrice) : this.functionsUtil.BNify(0);\n      // });\n\n      newState.availableGovTokens = this.functionsUtil.getTokenGovTokens(this.props.tokenConfig);\n\n      // console.log('govTokensBalance',newState.govTokensBalance);\n      // console.log('availableGovTokens',newState.availableGovTokens);\n      // console.log('govTokensUserBalances',newState.govTokensUserBalances);\n\n      newState.componentMounted = true;\n\n      this.setState(newState);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    const selectedTokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    const availableTokensChanged = JSON.stringify(prevProps.availableTokens) !== JSON.stringify(this.props.availableTokens);\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n    if (accountChanged || transactionsChanged || availableTokensChanged || selectedTokenChanged){\n      // console.log('AssetPage - availableTokensChanged',availableTokensChanged);\n      this.loadTokensInfo();\n    }\n  }\n\n  render() {\n\n    const nexusMutualConfig = this.functionsUtil.getGlobalConfig(['tools','nexusMutual']);\n    const userHasFunds = this.props.account && this.state.idleTokenBalance[this.props.selectedToken] && this.functionsUtil.BNify(this.state.idleTokenBalance[this.props.selectedToken]).gt(0);\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            <Breadcrumb\n              {...this.props}\n              isMobile={this.props.isMobile}\n              path={[this.props.selectedToken]}\n              handleClick={ e => this.props.goToSection(this.props.selectedStrategy) }\n              text={this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])}\n            />\n          </Flex>\n          <Flex\n            width={0.5}\n            justifyContent={'flex-end'}\n          >\n            <CardIconButton\n              icon={'Add'}\n              {...this.props}\n              text={'Add funds'}\n              handleClick={ e => this.setActiveModal('buy') }\n            />\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Deposit / Redeem\n        </Title>\n        <Flex\n          width={1}\n        >\n          <DepositRedeem\n            {...this.props}\n            tokenFees={this.state.tokenFees[this.props.selectedToken]}\n            tokenBalance={this.state.tokenBalance[this.props.selectedToken]}\n            tokenApproved={this.state.tokenApproved[this.props.selectedToken]}\n            govTokensBalance={this.state.govTokensBalance[this.props.selectedToken]}\n            idleTokenBalance={this.state.idleTokenBalance[this.props.selectedToken]}\n            redeemableBalance={this.state.redeemableBalance[this.props.selectedToken]}\n            tokenFeesPercentage={this.state.tokenFeesPercentage[this.props.selectedToken]}\n            govTokensUserBalances={this.state.govTokensUserBalances[this.props.selectedToken]}\n          />\n        </Flex>\n        {\n          userHasFunds && nexusMutualConfig.enabled && Object.keys(nexusMutualConfig.props.availableTokens).includes(this.props.tokenConfig.idle.token) &&\n            <Flex\n              width={1}\n              id={'active-coverages'}\n              flexDirection={'column'}\n            >\n              <ActiveCoverages\n                {...this.props}\n                titleProps={{\n                  mb:3,\n                  mt:[3,4],\n                }}\n                title={'Coverage'}\n                availableTokens={[this.props.tokenConfig.idle.token]}\n              >\n                <Flex\n                  width={1}\n                  alignItems={'center'}\n                  id={'no-active-cover'}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      py:3,\n                      px:[3,4],\n                      width:[1,'auto'],\n                    }}\n                  >\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                      justifyContent={'center'}\n                    >\n                      <Icon\n                        my={[0,2]}\n                        size={'3em'}\n                        name={nexusMutualConfig.icon}\n                      />\n                      <Text\n                        mb={1}\n                        fontSize={[2,3]}\n                        fontWeight={500}\n                        textAlign={'center'}\n                      >\n                        You don't have an active coverage\n                      </Text>\n                      <Text\n                        mb={2}\n                        color={'link'}\n                        fontSize={[1,2]}\n                        fontWeight={500}\n                        textAlign={'center'}\n                      >\n                        {nexusMutualConfig.desc}\n                      </Text>\n                      <RoundButton\n                        buttonProps={{\n                          mt:1,\n                          width:'auto',\n                          minHeight:'40px',\n                          mainColor:'redeem',\n                          size:this.props.isMobile ? 'small' : 'medium'\n                        }}\n                        handleClick={ e => this.props.goToSection(`tools/${nexusMutualConfig.route}/deposit/${this.props.tokenConfig.idle.token}`) }\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                          justifyContent={'center'}\n                        >\n                          <Text\n                            color={'white'}\n                            fontSize={[1,2]}\n                            fontWeight={500}\n                          >\n                            Get Covered\n                          </Text>\n                          <Icon\n                            ml={1}\n                            size={'1.3em'}\n                            name={'KeyboardArrowRight'}\n                          />\n                        </Flex>\n                      </RoundButton>\n                    </Flex>\n                  </DashboardCard>\n                </Flex>\n              </ActiveCoverages>\n            </Flex>\n        }\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverview\n                {...this.props}\n                tokenFees={this.state.tokenFees[this.props.selectedToken]}\n              />\n            </Flex>\n        }\n        {\n          userHasFunds && this.props.account && !this.state.govTokensDisabled[this.props.selectedToken] && Object.keys(this.state.availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id={\"yield-farming\"}\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(this.state.availableGovTokens)}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.30,0.15]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    mobile:false,\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.25],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','govTokenRedeemableBalance']),\n                    props:{\n                      width:[0.35,0.30],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                    ]\n                  },\n                  {\n                    title:'DISTRIBUTION',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','userDistributionSpeed']),\n                    props:{\n                      width:[0.35,0.30],\n                    },\n                    fields:[\n                      {\n                        name:'userDistributionSpeed',\n                        props:{\n                          decimals:6\n                        }\n                      }\n                    ]\n                  },\n                  /*\n                  {\n                    title:'APR',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','govTokenApr']),\n                    props:{\n                      width:[0.2,0.17],\n                    },\n                    fields:[\n                      {\n                        name:'apr',\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','tokenPrice']),\n                    mobile:false,\n                    props:{\n                      width: 0.17,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                  */\n                ]}\n                {...this.props}\n                availableTokens={this.state.availableGovTokens}\n              />\n            </Flex>\n        }\n        {\n        this.props.account && this.state.tokenApy[this.props.selectedToken] && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'estimated-earnings-container'}\n          >\n            <Title my={[3,4]}>Estimated earnings</Title>\n            <EstimatedEarnings\n              {...this.props}\n              tokenApy={this.state.tokenApy[this.props.selectedToken]}\n            />\n          </Flex>\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              enabledTokens={[this.props.selectedToken]}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport { Text, Modal, Flex, Link } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass BetaModal extends React.Component {\n\n  state = {};\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    this.functionsUtil.setLocalStorage('betaApproved',true);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','650px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            pt={3}\n            iconHeight={'40px'}\n            title={'Beta Version'}\n            icon={'images/warning.svg'}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                fontSize={2}\n                textAlign={'left'}\n                color={'dark-gray'}\n              >\n                You're about to enter Idle Finance Beta Dashboard – this is the place where several un-audited and risky features are being tested!<br />Please use at your own risk, or visit the official website at <Link fontSize={2} mainColor={'primary'} hoverColor={'primary'} href={this.functionsUtil.getGlobalConfig(['baseURL'])}>{this.functionsUtil.getGlobalConfig(['baseURL'])}</Link>.\n              </Text>\n            </Flex>\n            <Flex\n              my={3}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                handleClick={this.closeModal}\n                buttonProps={{\n                  width:['100%','40%']\n                }}\n              >\n                Continue Anyway\n              </RoundButton>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default BetaModal;","import React, { Component } from 'react';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Box, Text, Icon, Tooltip, Link, Input } from \"rimble-ui\";\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\n\nclass CurveDeposit extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    depositSlippage:null,\n    redeemableBalance:null,\n    migrationContract:null,\n    curveTokensBalance:null,\n    migrationSucceeded:false,\n    fastBalanceSelector:null,\n    migrationContractApproved:false,\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    await this.initToken();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const idleTokenBalanceChanged = prevProps.idleTokenBalance !== this.props.idleTokenBalance;\n    if (accountChanged || idleTokenBalanceChanged){\n      await this.initToken();\n    }\n    \n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const inputValueChanged = this.state.inputValue !== prevState.inputValue;\n    if (inputValueChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  setInputValue = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    const inputValue = this.props.idleTokenBalance ? this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage) : null;\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    const buttonDisabled = !amount || amount.gt(this.state.idleTokenBalance);\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  approve = async () => {\n    const migrationContract = this.state.migrationContract;\n    if (migrationContract){\n\n      // Check if the migration contract is approved\n      const migrationContractApproved = await this.checkMigrationContractApproved();\n\n      if (!migrationContractApproved){\n\n        const callbackApprove = (tx,error) => {\n          // Send Google Analytics event\n          const eventData = {\n            eventAction: 'approve',\n            eventCategory: 'CurveDeposit',\n            eventLabel: tx ? tx.status : null\n          };\n\n          const txSucceeded = tx && tx.status === 'success';\n\n          // console.log('callbackApprove',tx,error);\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            migrationContractApproved: txSucceeded, // True\n            processing: {\n              ...prevState.processing,\n              txHash:null,\n              loading:false\n            }\n          }));\n\n          if (typeof this.props.callbackApprove === 'function' && txSucceeded){\n            this.props.callbackApprove(tx);\n          }\n\n          this.checkMigration();\n        };\n\n        const callbackReceiptApprove = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              txHash\n            }\n          }));\n        };\n\n        this.functionsUtil.enableERC20(this.props.selectedToken,migrationContract.address,callbackApprove,callbackReceiptApprove);\n\n        this.setState((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            txHash:null,\n            loading:true\n          },\n          migrationContractApproved:false\n        }));\n      } else {\n        this.setState({\n          migrationContractApproved:true\n        });\n      }\n    }\n  }\n\n  deposit = async () => {\n\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    if (!inputValue){\n      return false;\n    }\n\n    const callbackDeposit = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveDeposit`,\n        eventAction: this.props.selectedToken,\n        eventValue: inputValue.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackDeposit === 'function' && txSucceeded){\n        this.props.callbackDeposit(tx);\n      }\n    };\n\n    const callbackReceiptDeposit = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.migrationContract.name;\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n    const depositParams = await this.getMigrationParams(_amount);\n\n    this.props.contractMethodSendWrapper(contractName, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  cancelTransaction = async () => {\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  async getMigrationParams(toMigrate){\n    const migrationParams = [];\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.selectedToken]);\n\n    if (!curveTokenConfig){\n      return false;\n    }\n    \n    const migrationContractParams = curveTokenConfig.migrationParams;\n    if (migrationContractParams.n_coins){\n      const amounts = await this.functionsUtil.getCurveAmounts(this.props.selectedToken,toMigrate,true);\n      let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n\n      if (this.state.maxSlippage){\n        minMintAmount = this.functionsUtil.BNify(minMintAmount);\n        minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n        minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n      }\n\n      migrationParams.push(amounts);\n      migrationParams.push(minMintAmount);\n    }\n\n    return migrationParams;\n  }\n\n  async calculateSlippage(){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (inputValue){\n      let underlyingBalanceToDeposit = inputValue;\n      if (underlyingBalanceToDeposit){\n        const idleTokenPrice = await this.functionsUtil.getIdleTokenPrice(this.props.tokenConfig);\n        if (idleTokenPrice){\n          underlyingBalanceToDeposit = underlyingBalanceToDeposit.times(idleTokenPrice);\n        }\n      } else {\n        underlyingBalanceToDeposit = this.functionsUtil.BNify(0);\n      }\n\n      const normalizeIdleTokenBalance = this.functionsUtil.normalizeTokenAmount(underlyingBalanceToDeposit,this.props.tokenConfig.decimals);\n      let depositSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizeIdleTokenBalance);\n      if (depositSlippage){\n        depositSlippage = depositSlippage.times(100);\n      }\n\n      this.setState({\n        depositSlippage\n      });\n    }\n  }\n\n  async checkMigrationContractApproved(){\n    const migrationContract = this.state.migrationContract || await this.functionsUtil.getCurveSwapContract();\n    if (migrationContract){\n      return await this.functionsUtil.checkTokenApproved(this.props.tokenConfig.idle.token,migrationContract.address,this.props.account);\n    }\n    return false;\n  }\n\n  async initToken(){\n\n    // Init and check migration contract\n    const migrationContract = await this.functionsUtil.getCurveSwapContract();\n    const migrationContractApproved = await this.checkMigrationContractApproved();\n\n    this.setState({\n      migrationContract,\n      migrationContractApproved\n    });\n  }\n\n  approveCallback = () => {\n    this.initToken();\n  }\n\n  migrationCallback = () => {\n    this.setState({\n      migrationSucceeded:true\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken){\n      return null;\n    }\n\n    // const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const hasCurveTokens = this.state.curveTokensBalance && this.state.curveTokensBalance.gt(0);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n            {\n              this.props.idleTokenBalance && this.props.idleTokenBalance.gt(0) && (\n                <Box\n                  width={1}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:3,\n                      px:[2,4]\n                    }}\n                  >\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    > \n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ this.state.migrationContractApproved ? 'CheckBox' : 'LooksOne'}\n                          color={ this.state.migrationContractApproved ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Approve the Curve contract\n                        </Text>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ hasCurveTokens ? 'CheckBox' : 'LooksTwo'}\n                          color={ hasCurveTokens ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Deposit your {this.props.tokenConfig.idle.token}\n                        </Text>\n                      </Flex>\n                    </Flex>\n                  </DashboardCard>\n                  {\n                    !this.state.migrationContractApproved ?\n                      this.state.processing.loading ? (\n                        <Flex\n                          mt={3}\n                          flexDirection={'column'}\n                        >\n                          <TxProgressBar\n                            web3={this.props.web3}\n                            waitText={`Approve estimated in`}\n                            hash={this.state.processing.txHash}\n                            endMessage={`Finalizing approve request...`}\n                            cancelTransaction={this.cancelTransaction.bind(this)}\n                          />\n                        </Flex>\n                      ) : (\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            mt:3,\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                          >\n                            <Icon\n                              size={'2.3em'}\n                              name={'LockOpen'}\n                              color={'cellText'}\n                            />\n                            <Text\n                              mt={1}\n                              fontSize={2}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              To deposit your {this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.\n                            </Text>\n                            <RoundButton\n                              buttonProps={{\n                                mt:3,\n                                width:[1,1/2]\n                              }}\n                              handleClick={this.approve.bind(this)}\n                            >\n                              Approve\n                            </RoundButton>\n                          </Flex>\n                        </DashboardCard>\n                      )\n                    : this.state.processing.loading ? (\n                      <Flex\n                        mt={3}\n                        flexDirection={'column'}\n                      >\n                        <TxProgressBar\n                          web3={this.props.web3}\n                          waitText={`Deposit estimated in`}\n                          hash={this.state.processing.txHash}\n                          endMessage={`Finalizing deposit request...`}\n                          cancelTransaction={this.cancelTransaction.bind(this)}\n                        />\n                      </Flex>\n                    ) : (\n                      <Box\n                        mt={2}\n                        width={1}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text>\n                            Choose max slippage:\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={`Max additional slippage on top of the one shown below`}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                          justifyContent={'space-between'}\n                        >\n                          {\n                            [0.2,0.5,1,5].map( slippage => (\n                              <FastBalanceSelector\n                                cardProps={{\n                                  p:1\n                                }}\n                                textProps={{\n                                  fontSize:1\n                                }}\n                                percentage={slippage}\n                                key={`selector_${slippage}`}\n                                onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                isActive={this.state.maxSlippage === parseFloat(slippage)}\n                              />\n                            ))\n                          }\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                        >\n                          <Flex\n                            mb={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={this.state.depositSlippage ? 'space-between' : 'flex-end'}\n                          >\n                            {\n                              this.state.depositSlippage && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    textAlign={'right'}\n                                    style={{\n                                      whiteSpace:'nowrap'\n                                    }}\n                                    color={ parseFloat(this.state.depositSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                  >\n                                    {\n                                      parseFloat(this.state.depositSlippage.toFixed(3)) === 0 ?\n                                        'No Slippage'\n                                      : `${ this.state.depositSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositSlippage.abs().toFixed(3)}%`\n                                    }\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.state.depositSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              )\n                            }\n                            {\n                              this.props.idleTokenBalance && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'flex-end'}\n                                >\n                                  <Link\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'right'}\n                                    hoverColor={'copyColor'}\n                                    onClick={ (e) => this.setFastBalanceSelector(100) }\n                                    style={{\n                                      maxWidth:'100%',\n                                      overflow:'hidden',\n                                      whiteSpace:'nowrap',\n                                      textOverflow:'ellipsis'\n                                    }}\n                                  >\n                                    {this.props.idleTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {this.props.selectedToken}\n                                  </Link>\n                                </Flex>\n                              )\n                            }\n                          </Flex>\n                          <Input\n                            min={0}\n                            type={\"number\"}\n                            required={true}\n                            height={'3.4em'}\n                            borderRadius={2}\n                            fontWeight={500}\n                            boxShadow={'none !important'}\n                            placeholder={`Insert amount`}\n                            onChange={this.changeInputValue.bind(this)}\n                            border={`1px solid ${this.props.theme.colors.divider}`}\n                            value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                          />\n                          <Flex\n                            mt={2}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'space-between'}\n                          >\n                            {\n                              [25,50,75,100].map( percentage => (\n                                <FastBalanceSelector\n                                  percentage={percentage}\n                                  key={`selector_${percentage}`}\n                                  onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                  isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                                />\n                              ))\n                            }\n                          </Flex>\n                          <Flex\n                            mt={2}\n                            justifyContent={'center'}\n                          >\n                            <RoundButton\n                              buttonProps={{\n                                mt:2,\n                                width:[1,1/2],\n                                disabled:this.state.buttonDisabled\n                              }}\n                              handleClick={this.deposit.bind(this)}\n                            >\n                              Deposit\n                            </RoundButton>\n                          </Flex>\n                        </Flex>\n                      </Box>\n                    )\n                  }\n                </Box>\n              )\n            }\n          {\n            /*\n            this.state.tokenConfig && this.state.redeemableBalance ? (\n              <Box width={1}>\n                <Migrate\n                  {...this.props}\n                  showActions={false}\n                  getTokenPrice={false}\n                  migrationTextProps={{\n                    fontWeight:500\n                  }}\n                  isMigrationTool={true}\n                  migrationImage={{\n                    mb:1,\n                    height:'1.8em',\n                    src:curveConfig.params.image\n                  }}\n                  showBalanceSelector={true}\n                  waitText={'Deposit estimated in'}\n                  tokenConfig={this.state.tokenConfig}\n                  callbackApprove={this.approveCallback.bind(this)}\n                  migrationParams={this.getMigrationParams.bind(this)}\n                  migrationCallback={this.migrationCallback.bind(this)}\n                  approveText={`To deposit your ${this.props.tokenConfig.idle.token} you need to approve Curve smart-contract first.`}\n                  migrationText={`You can deposit ${this.state.redeemableBalance.toFixed(4)} ${this.props.tokenConfig.idle.token} in the Curve Pool${ this.state.depositSlippage ? (this.state.depositSlippage.gte(0) ? ` with <span style=\"color:${this.props.theme.colors.transactions.status.failed}\">${this.state.depositSlippage.times(100).toFixed(2)}% of slippage</span>` : ` with <span style=\"color:${this.props.theme.colors.transactions.status.completed}\">${Math.abs(parseFloat(this.state.depositSlippage.times(100).toFixed(2)))}% of bonus</span>`) : '' }.`}\n                >\n                  {\n                    !this.props.account ? (\n                      <DashboardCard\n                        cardProps={{\n                          p:3,\n                          mt:3\n                        }}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                        >\n                          <Icon\n                            size={'2.3em'}\n                            name={'Input'}\n                            color={'cellText'}\n                          />\n                          <Text\n                            mt={2}\n                            fontSize={2}\n                            color={'cellText'}\n                            textAlign={'center'}\n                          >\n                            Please connect with your wallet interact with Idle.\n                          </Text>\n                          <RoundButton\n                            buttonProps={{\n                              mt:2,\n                              width:[1,1/2]\n                            }}\n                            handleClick={this.props.connectAndValidateAccount}\n                          >\n                            Connect\n                          </RoundButton>\n                        </Flex>\n                      </DashboardCard>\n                    ) : (\n                      <DashboardCard\n                        cardProps={{\n                          p:3\n                        }}\n                      >\n                        {\n                          this.state.migrationSucceeded ? (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'DoneAll'}\n                                color={this.props.theme.colors.transactions.status.completed}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You have successfully deposited your {this.props.tokenConfig.idle.token} in the Curve Pool!\n                              </Text>\n                            </Flex>\n                          ) : (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'MoneyOff'}\n                                color={'cellText'}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You don't have any {this.props.tokenConfig.idle.token} in your wallet.\n                              </Text>\n                            </Flex>\n                          )\n                        }\n                      </DashboardCard>\n                    )\n                  }\n                </Migrate>\n              </Box>\n            ) : null\n            */\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveDeposit;","import theme from '../theme';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\n// import { linearGradientDef } from '@nivo/core'\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport ChartCustomTooltip from '../ChartCustomTooltip/ChartCustomTooltip';\nimport ChartCustomTooltipRow from '../ChartCustomTooltipRow/ChartCustomTooltipRow';\n\nclass PortfolioEquityCurve extends Component {\n  state = {\n    startDate:null,\n    chartData:null,\n    chartProps:null,\n    chartwidth:null,\n    chartHeight:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentDidMount(){\n    this.loadUtils();\n    this.loadChartData();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n\n    const quickDateSelectionChanged = prevProps.quickDateSelection !== this.props.quickDateSelection;\n    const tokenChanged = JSON.stringify(prevProps.enabledTokens) !== JSON.stringify(this.props.enabledTokens);\n    if (tokenChanged || quickDateSelectionChanged){\n      this.setState({\n        chartData:null\n      },() => {\n        this.componentDidMount();\n      });\n    }\n\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n    if (mobileChanged){\n      this.loadChartData();\n    }\n  }\n\n  async loadChartData() {\n\n    let enabledTokens = this.props.enabledTokens;\n    if (!enabledTokens || !enabledTokens.length){\n      enabledTokens = Object.keys(this.props.availableTokens);\n    }\n\n    const curveTxs = await this.functionsUtil.getCurveTxs(this.props.account,0,'latest',enabledTokens);\n\n    const chartData = [];\n    let tokensBalance = [];\n    const processedTxs = {};\n    let firstTxTimestamp = null;\n    let totalBalance = this.functionsUtil.BNify(0);\n    const curvePoolContract = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    if (curveTxs && curveTxs.length){\n\n      curveTxs.forEach((tx,index) => {\n\n        if (!processedTxs[tx.hash]){\n          processedTxs[tx.hash] = [];\n        }\n\n        if (processedTxs[tx.hash].includes(tx.action)){\n          return;\n        }\n        \n        firstTxTimestamp = firstTxTimestamp ? Math.min(firstTxTimestamp,parseInt(tx.timeStamp)) : parseInt(tx.timeStamp);\n\n        const curveTokens = this.functionsUtil.BNify(tx.curveTokens);\n\n        switch (tx.action){\n          case 'CurveIn':\n          case 'CurveZapIn':\n          case 'CurveDepositIn':\n          case 'CurveTransferIn':\n            totalBalance = totalBalance.plus(curveTokens);\n          break;\n          case 'CurveOut':\n          case 'CurveZapOut':\n          case 'CurveDepositOut':\n          case 'CurveTransferOut':\n            totalBalance = totalBalance.minus(curveTokens);\n          break;\n          default:\n          break;\n        }\n\n        // Reset totalBalance if below zero\n        if (totalBalance.lt(0)){\n          totalBalance = this.functionsUtil.BNify(0);\n        }\n\n        const action = tx.action;\n        const balance = totalBalance;\n        const timeStamp = parseInt(tx.timeStamp);\n        const curveTokenPrice = this.functionsUtil.fixTokenDecimals(tx.curveTokenPrice,curvePoolContract.decimals);\n\n        // console.log(this.functionsUtil.strToMoment(timeStamp*1000).format('YYYY/MM/DD HH:mm'),tx.hash,tx.action,curveTokens.toString(),totalBalance.toString());\n\n        if (!curveTokenPrice.isNaN() && !curveTokenPrice.isNaN()){\n          tokensBalance.push({\n            action,\n            balance,\n            timeStamp,\n            curveTokens,\n            curveTokenPrice\n          });\n\n          processedTxs[tx.hash].push(action);\n        }\n      });\n    }\n\n    // Calculate Start Date\n    let startDate = null;\n    const currentDate = this.functionsUtil.strToMoment(new Date());\n\n    switch (this.props.quickDateSelection){\n      case 'week':\n        startDate = currentDate.clone().subtract(1,'week');\n      break;\n      case 'month':\n        startDate = currentDate.clone().subtract(1,'month');\n      break;\n      case 'month3':\n        startDate = currentDate.clone().subtract(3,'month');\n      break;\n      case 'month6':\n        startDate = currentDate.clone().subtract(6,'month');\n      break;\n      default:\n        startDate = null;\n      break;\n    }\n\n    const days = {};\n    let prevBalances = {};\n    let prevTimestamp = null;\n    let minChartValue = null;\n    let maxChartValue = null;\n    const aggregatedBalancesKeys = {};\n    const tokensBalancesPerDate = {};\n    let aggregatedBalance = this.functionsUtil.BNify(0);\n    // let curveTokenBalance = this.functionsUtil.BNify(0);\n    const currTimestamp = parseInt(new Date().getTime()/1000)+86400;\n\n    const tokensData = await this.functionsUtil.getTokenApiData(Object.values(this.props.availableTokens)[0].address,false,firstTxTimestamp,null,false,3600);\n\n    for (let timeStamp=firstTxTimestamp;timeStamp<=currTimestamp;timeStamp+=this.props.frequencySeconds){\n\n      let foundBalances = {};\n      let tokensBalances = {};\n      timeStamp = Math.min(currTimestamp,timeStamp);\n      let momentDate = this.functionsUtil.strToMoment(timeStamp*1000);\n\n      // eslint-disable-next-line\n      const filteredTokenData = tokensData.filter(tx => (tx.timestamp>=prevTimestamp && tx.timestamp<=timeStamp));\n\n      // eslint-disable-next-line\n      let filteredBalances = tokensBalance.filter(tx => (tx.timeStamp<=timeStamp && (!prevTimestamp || tx.timeStamp>prevTimestamp)));\n      \n      if (!filteredBalances.length){\n        if (prevBalances){\n          filteredBalances = prevBalances;\n          const lastFilteredTx = Object.values(filteredBalances).pop();\n          const currentBalance = parseFloat(lastFilteredTx.balance);\n\n          const lastTokenData = Object.values(filteredTokenData).pop();\n          let curveTokenPrice = null;\n          if (lastTokenData){\n            curveTokenPrice = await this.functionsUtil.getCurveTokenPrice(lastTokenData.blocknumber);\n          }\n\n          // Take idleToken price from API and calculate new balance\n          if (currentBalance>0 && timeStamp>firstTxTimestamp && curveTokenPrice){\n            // Set new curveTokenPrice\n            lastFilteredTx.curveTokenPrice = curveTokenPrice;\n            filteredBalances = [lastFilteredTx];\n          }\n        } else {\n          filteredBalances = [{\n            balance:this.functionsUtil.BNify(0),\n            curveTokenPrice:this.functionsUtil.BNify(0)\n          }];\n        }\n      }\n\n      const lastTx = Object.assign([],filteredBalances).pop();\n      let lastTxBalance = this.functionsUtil.BNify(lastTx.balance).times(lastTx.curveTokenPrice);\n\n      tokensBalances[curvePoolContract.token] = this.functionsUtil.BNify(lastTx.balance);\n      aggregatedBalance = lastTxBalance;\n\n      foundBalances = filteredBalances;\n\n      // console.log(momentDate.format('YYYY/MM/DD 00:00'),lastTx.balance.toString(),lastTx.curveTokenPrice.toString(),lastTxBalance.toString());\n\n      if (startDate === null || momentDate.isSameOrAfter(startDate)){\n        \n        if (momentDate.isAfter(new Date(),'day')){\n          momentDate = this.functionsUtil.strToMoment(new Date());\n        }\n\n        // Force date to midnight\n        const formattedDate = momentDate.format('YYYY/MM/DD 00:00');\n\n        // Save days for axisBottom format\n        days[momentDate.format('YYYY/MM/DD')] = 1;\n\n        const aggregatedBalanceParsed = parseFloat(parseFloat(aggregatedBalance.toFixed(6)));\n\n        aggregatedBalancesKeys[formattedDate] = aggregatedBalanceParsed;\n        tokensBalancesPerDate[formattedDate] = tokensBalances;\n\n        // console.log(formattedDate,tokensBalances);\n\n        minChartValue = minChartValue === null ? aggregatedBalanceParsed : Math.min(minChartValue,aggregatedBalanceParsed);\n        maxChartValue = maxChartValue === null ? aggregatedBalanceParsed : Math.max(maxChartValue,aggregatedBalanceParsed);\n      }\n\n      prevTimestamp = timeStamp;\n      prevBalances = foundBalances;\n    }\n\n    const aggregatedBalances = Object.keys(aggregatedBalancesKeys).map(date => ({\n      x:date,\n      y:aggregatedBalancesKeys[date],\n      balances:tokensBalancesPerDate[date]\n    }));\n\n    let itemIndex = 0;\n    aggregatedBalances.forEach( (item,index) => {\n      const itemPos = Math.floor(itemIndex/aggregatedBalances.length*100);\n      aggregatedBalances[index].itemPos = itemPos;\n      itemIndex++;\n    });\n\n    /*\n    aggregatedBalances.push({\n      x:momentDate.format('YYYY/MM/DD HH:mm'),\n      y:aggregatedBalance\n    });\n    */\n\n    // Add day before to start with zero balance\n    /*\n    const firstTxMomentDate = this.functionsUtil.strToMoment(firstTxTimestamp*1000);\n    if ((startDate === null || startDate.isSameOrBefore(firstTxMomentDate)) && aggregatedBalances.length){\n      const firstItem = aggregatedBalances[0];\n      const firstDate = this.functionsUtil.strToMoment(firstItem.x,'YYYY/MM/DD HH:mm');\n      firstDate.subtract(1,'day');\n      aggregatedBalances.unshift({\n        x:firstDate.format('YYYY/MM/DD HH:mm'),\n        y:0\n      });\n    }\n    */\n\n    // Add token Data\n    chartData.push({\n      id:'USD',\n      color: 'hsl('+ this.functionsUtil.getGlobalConfig(['stats','tokens','USD','color','hsl']).join(',')+')',\n      data:aggregatedBalances\n    });\n\n    let yFormatDecimals = 2;\n    if (maxChartValue-minChartValue<1){\n      yFormatDecimals = 4;\n    }\n\n    if (maxChartValue === minChartValue){\n      minChartValue = Math.max(0,maxChartValue-1);\n    }\n\n    const maxGridLines = 5;\n    const gridYStep = (maxChartValue-minChartValue)/maxGridLines;\n    const gridYValues = [];\n    for (let i=0;i<=maxGridLines;i++){\n      const gridYValue = parseFloat(parseFloat(minChartValue+(i*gridYStep)).toFixed(6));\n      gridYValues.push(gridYValue);\n    }\n    \n    const axisBottomMaxValues = 10;\n    const daysCount = Object.values(days).length;    \n    const daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n    const chartProps = {\n      xScale:{\n        type: 'time',\n        format: '%Y/%m/%d %H:%M',\n      },\n      yScale:{\n        type: 'linear',\n        stacked: false,\n        min: minChartValue,\n        max: maxChartValue\n      },\n      xFormat:'time:%b %d %Y',\n      yFormat:value => this.functionsUtil.formatMoney(value,yFormatDecimals),\n      axisBottom: this.props.isMobile ? null : {\n        legend: '',\n        tickSize:0,\n        format: '%b %d',\n        tickPadding: 15,\n        orient: 'bottom',\n        legendOffset: 36,\n        legendPosition: 'middle',\n        tickValues:'every '+daysFrequency+' days'\n      },\n      gridYValues,\n      pointSize:0,\n      useMesh:true,\n      axisLeft: this.props.isMobile ? null : {\n        legend: '',\n        tickSize: 0,\n        orient: 'left',\n        tickPadding: 10,\n        tickRotation: 0,\n        legendOffset: -70,\n        tickValues:gridYValues,\n        legendPosition: 'middle',\n        format: v => this.functionsUtil.abbreviateNumber(v,2),\n      },\n      animate:true,\n      pointLabel:'y',\n      areaOpacity:0.1,\n      enableArea:true,\n      enableSlices:'x',\n      enableGridY:true,\n      curve:'monotoneX',\n      enableGridX:false,\n      pointBorderWidth:1,\n      colors:d => d.color,\n      pointLabelYOffset:-12,\n      areaBaselineValue:minChartValue,\n      pointColor:{ from: 'color', modifiers: []},\n      theme:{\n        axis: {\n          ticks: {\n            text: {\n              fontSize:12,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '8 4'\n          }\n        },\n      },\n      /*\n      defs:[\n        linearGradientDef('gradientA', [\n          { offset: 0, color: 'inherit' },\n          { offset: 100, color: 'inherit', opacity: 0 },\n        ]),\n      ],\n      fill:[{ match: '*', id: 'gradientA' }],\n      */\n      margin: this.props.isMobile ? { top: 20, right: 25, bottom: 25, left: 20 } : { top: 30, right: 50, bottom: 45, left: 50 },\n      sliceTooltip:(slideData) => {\n        const { slice } = slideData;\n        const point = slice.points[0];\n        return (\n          <ChartCustomTooltip\n            point={point}\n          >\n            <ChartCustomTooltipRow\n              color={point.color}\n              label={point.serieId}\n              value={`$ ${point.data.yFormatted}`}\n            />\n            {\n            typeof point.data.balances === 'object' && Object.keys(point.data.balances).length>0 &&\n              Object.keys(point.data.balances).map(token => {\n                if (token === point.serieId){\n                  return null;\n                }\n                const tokenInfo = this.functionsUtil.getGlobalConfig(['stats','tokens',token]);\n                if (tokenInfo){\n                  const tokenName = tokenInfo.name ? tokenInfo.name : token;\n                  const color = tokenInfo.color.hex;\n                  const balance = point.data.balances[token];\n                  let formattedBalance = this.functionsUtil.formatMoney(balance,2);\n                  if (parseFloat(balance)>=0.01){\n                    return (\n                      <ChartCustomTooltipRow\n                        label={tokenName}\n                        color={color}\n                        key={`row_${token}`}\n                        value={`${formattedBalance}`}\n                      />\n                    );\n                  }\n                }\n                return null;\n              })\n            }\n          </ChartCustomTooltip>\n        );\n      }\n    };\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  render() {\n    return (\n      <GenericChart\n        type={Line}\n        showLoader={true}\n        {...this.state.chartProps}\n        data={this.state.chartData}\n        parentId={this.props.parentId}\n        height={this.props.chartHeight}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default PortfolioEquityCurve;","import theme from '../theme';\nimport Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport { Flex, Heading, Text } from \"rimble-ui\";\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport PortfolioEquityCurve from '../PortfolioEquityCurve/PortfolioEquityCurve';\n\nclass FundsOverviewCurve extends Component {\n\n  state = {\n    compAPR:null,\n    aggregatedValues:[],\n    govTokensUserBalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    await this.functionsUtil.getCurveAvgBuyPrice();\n\n    // debugger;\n\n    await this.functionsUtil.getCurveAvgSlippage();\n\n    // debugger;\n    /*\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const [govTokensUserBalance,avgAPY,days] = await Promise.all([\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,'DAI'),\n      this.functionsUtil.loadAssetField('avgAPY',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '-') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    let [tokenAllocation,compAPR] = await Promise.all([\n      this.functionsUtil.getTokenAllocation(this.props.tokenConfig,false,false),\n      this.functionsUtil.getCompAPR(this.props.selectedToken,this.props.tokenConfig)\n    ]);\n\n    if (tokenAllocation){\n      const compoundInfo = this.props.tokenConfig.protocols.find( p => (p.name === 'compound') );\n      if (compoundInfo){\n        if (tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()]){\n          const compoundAllocationPerc = tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()];\n          compAPR = compAPR.times(compoundAllocationPerc);\n        }\n      }\n    }\n\n    this.setState({\n      compAPR,\n      aggregatedValues,\n      govTokensUserBalance\n    });\n    */\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Text\n                          mt={2}\n                          fontWeight={2}\n                          fontSize={[1,2]}\n                          color={'cellText'}\n                        >\n                          {v.props.title}\n                        </Text>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquityCurve\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLentCurve',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPercCurve',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            {\n              /*\n              <Flex\n                mb={[2,0]}\n                width={[1,1/5]}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'flex-start'}\n              >\n                <Title\n                  mb={2}\n                  fontSize={[3,4]}\n                  component={Heading.h3}\n                >\n                  Fees\n                </Title>\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'feesCounter',\n                    props:{\n                      decimals:7,\n                      maxPrecision:8,\n                      style:{\n                        fontWeight:300,\n                        fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                        color:theme.colors.counter\n                      },\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n              */\n            }\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveApy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Avg Slippage\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveAvgSlippage',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverviewCurve;","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport { Box, Flex, Text, Icon } from \"rimble-ui\";\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport CurveDeposit from '../CurveDeposit/CurveDeposit';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport TransactionField from '../TransactionField/TransactionField';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport FundsOverviewCurve from '../FundsOverviewCurve/FundsOverviewCurve';\n\nclass AssetPage extends Component {\n\n  state = {\n    inputValue:{},\n    processing:{},\n    tokenFees:null,\n    canRedeem:null,\n    canDeposit:null,\n    action:'deposit',\n    activeModal:null,\n    tokenConfig:null,\n    tokenBalance:null,\n    tokenApproved:null,\n    selectedToken:null,\n    availableTokens:{},\n    redeemBalance:null,\n    depositBalance:null,\n    buttonDisabled:false,\n    curveTokenPrice:null,\n    depositSlippage:null,\n    idleTokenBalance:null,\n    withdrawSlippage:null,\n    govTokensBalance:null,\n    curveZapContract:null,\n    curveTokenConfig:null,\n    curveTokensAmounts:{},\n    govTokensDisabled:null,\n    componentMounted:false,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    redeemableBalance:null,\n    fastBalanceSelector:{},\n    curveAvailableTokens:{},\n    tokenFeesPercentage:null,\n    redeemUnevenAmounts:false,\n    curveDepositContract:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  changeFromToken = (selectedToken) => {\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    this.props.goToSection(`${curveConfig.params.route}/${selectedToken}`);\n  }\n\n  getSelectedToken(){\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    return this.props.urlParams.param1 && curveAvailableTokens[this.props.urlParams.param1] ? this.props.urlParams.param1 : Object.keys(curveAvailableTokens)[0];\n  }\n\n  setSelectedToken = async (selectedToken) => {\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n    this.setState({\n      tokenConfig,\n      selectedToken,\n      availableTokens,\n      curveTokenConfig\n    });\n  }\n\n  loadTokensInfo = async () => {\n\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    this.setState({\n      curveAvailableTokens\n    });\n\n    const selectedToken = this.getSelectedToken();\n    // Check if token is set the query params\n    if (selectedToken && selectedToken !== this.props.urlParams.param1){\n      this.changeFromToken(selectedToken);\n      return await this.setSelectedToken(selectedToken);\n    } else if (selectedToken !== this.state.selectedToken){\n      await this.setSelectedToken(selectedToken);\n    }\n\n    const newState = {...this.state};\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n\n    if (newState.selectedToken !== selectedToken){\n      newState.selectedToken = selectedToken;\n    }\n\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n\n    const [\n      curveZapContract,\n      curvePoolContract,\n      curveSwapContract,\n      curveDepositContract\n    ] = await Promise.all([\n      this.functionsUtil.getCurveZapContract(),\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract()\n    ]);\n\n    newState.curveZapContract = curveZapContract;\n    newState.curvePoolContract = curvePoolContract;\n    newState.curveSwapContract = curveSwapContract;\n    newState.curveDepositContract = curveDepositContract;\n\n    newState.availableTokens = availableTokens;\n\n\n    // console.log('curveTokenPrice',newState.curveTokenPrice.toFixed(6),'curveTokenBalance',newState.curveTokenBalance.toFixed(6),'redeemableBalance',newState.redeemableBalance.toFixed(20),'tokenBalance',newState.tokenBalance.toFixed(20));\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[selectedToken] = tokenConfig;\n\n    newState.tokenConfig = tokenConfig;\n    newState.curveTokenConfig = curveTokenConfig;\n\n    if (this.props.account){\n      [\n        newState.curveTokenPrice,\n        newState.curveTokenBalance,\n        newState.tokenFeesPercentage,\n        newState.tokenFees,\n        newState.tokenBalance,\n        newState.idleTokenBalance,\n        newState.tokenApproved,\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokenPrice(),\n        this.functionsUtil.getCurveTokenBalance(),\n        this.functionsUtil.getTokenFees(tokenConfig),\n        this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n        this.functionsUtil.getTokenBalance(selectedToken,this.props.account),\n        this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n        this.functionsUtil.checkTokenApproved(selectedToken,curveDepositContract.address,this.props.account),\n      ]);\n\n\n      newState.processing = {\n        redeem:{\n          txHash:null,\n          loading:false\n        },\n        deposit:{\n          txHash:null,\n          loading:false\n        },\n        approve:{\n          txHash:null,\n          loading:false\n        },\n      };\n      newState.inputValue = {\n        redeem:null,\n        deposit:null\n      };\n      newState.fastBalanceSelector = {\n        redeem:null,\n        deposit:null\n      };\n\n      newState.componentMounted = true;\n      newState.depositBalance = newState.tokenBalance;\n      newState.redeemBalance = newState.redeemableBalance;\n      newState.govTokensDisabled = tokenConfig.govTokensDisabled;\n      newState.canRedeem = newState.curveTokenBalance && newState.curveTokenBalance.gt(0);\n      newState.canDeposit = newState.idleTokenBalance && newState.idleTokenBalance.gt(0);\n      newState.redeemableBalance = newState.curveTokenBalance ? newState.curveTokenBalance.times(newState.curveTokenPrice) : this.functionsUtil.BNify(0);\n    }\n\n    this.setState(newState);\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async calculateSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,this.state.curvePoolContract.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositBalance = amount;\n        newState.depositSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      case 'redeem':\n        newState.redeemBalance = amount;\n        newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.urlParams.param1 !== this.props.urlParams.param1;\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n\n    if (accountChanged || transactionsChanged || tokenChanged){\n      await this.loadTokensInfo();\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const redeemUnevenAmountsChanged = this.state.redeemUnevenAmounts !== prevState.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n    if (actionChanged || fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    if (actionChanged){\n      this.updateAssetSelector();\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  updateAssetSelector = async () => {\n    const newState = {};\n    switch (this.state.action){\n      case 'deposit':\n        this.loadTokensInfo();\n      break;\n      case 'redeem':\n        // this.loadTokensInfo();\n        const tokenConfig = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n        newState.curveAvailableTokens = {};\n        newState.curveTokenConfig = tokenConfig;\n        newState.selectedToken = tokenConfig.token;\n        newState.curveAvailableTokens[tokenConfig.token] = tokenConfig;\n      break;\n      default:\n      break;\n    }\n\n    this.setState(newState);\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.state.tokenBalance ? this.functionsUtil.BNify(this.state.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          amount = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n        } else {\n          amount = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  changeInputValue = (e) => {\n    if (!this.state.action){\n      return false;\n    }\n\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && amount.gt(this.state.tokenBalance));\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.curveTokenBalance)) );\n        } else {\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.redeemableBalance)) );\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = this.state.tokenApproved;\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.state.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.functionsUtil.enableERC20(this.state.selectedToken,this.state.curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const inputValue = this.state.inputValue[this.state.action];\n    const selectedPercentage = this.getFastBalanceSelector();\n\n    let loading = true;\n\n    switch (this.state.action){\n      // Handle deposit in curve\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.state.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if (this.state.metaTransactionsEnabled && txError){\n            this.setState({\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,tokensToDeposit);\n        const minMintAmount = await this.functionsUtil.genericContractCall(this.state.curveSwapContract.name,'calc_token_amount',[amounts,true]);\n        const depositParams = [amounts,minMintAmount];\n\n        // No need for callback atm\n        contractSendResult = await this.props.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n      break;\n      case 'redeem':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        let curveTokensToRedeem = null;\n        if (selectedPercentage){\n          curveTokensToRedeem = this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage);\n        } else {\n          curveTokensToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals));\n          if (!this.state.redeemUnevenAmounts){\n            const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n            curveTokensToRedeem = curveTokensToRedeem.div(curveTokenPrice);\n          }\n        }\n\n        if (!curveTokensToRedeem){\n          return false;\n        }\n\n        const callbackRedeem = (tx,error) => {\n          const txSucceeded = tx.status === 'success';\n\n          // Send Google Analytics event\n          const eventData = {\n            eventLabel: tx.status,\n            eventCategory: `CurveRedeem`,\n            eventAction: this.state.selectedToken,\n            eventValue: curveTokensToRedeem.toFixed()\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          }\n        };\n\n        const callbackReceiptRedeem = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const _amount = this.functionsUtil.normalizeTokenAmount(curveTokensToRedeem,this.state.curvePoolContract.decimals).toString();\n        let min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,0);\n\n        const contractName = this.state.curveDepositContract.name;\n        if (this.state.redeemUnevenAmounts){\n          console.log('remove_liquidity_imbalance',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_imbalance', [min_amounts, _amount], null, callbackRedeem, callbackReceiptRedeem);\n        } else {\n          min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,_amount);\n          console.log('remove_liquidity',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts], null, callbackRedeem, callbackReceiptRedeem);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    // console.log('contractSendResult',contractSendResult);\n\n    if (contractSendResult !== false){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    const userHasFunds = this.props.account && this.state.curveTokenBalance && this.functionsUtil.BNify(this.state.curveTokenBalance).gt(0);\n    const canPerformAction = true;\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            {\n              <Breadcrumb\n                {...this.props}\n                isMobile={this.props.isMobile}\n                path={['Boost',this.state.selectedToken]}\n                handleClick={ e => this.props.goToSection('best') }\n                text={this.functionsUtil.getGlobalConfig(['strategies','best','title'])}\n              />\n            }\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Curve Pool\n        </Title>\n        <Flex\n          width={1}\n        >\n          <Flex\n            width={1}\n            alignItems={'center'}\n            flexDirection={'column'}\n            justifyContent={'center'}\n          >\n            <Flex\n              width={[1,0.36]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Box\n                width={1}\n              >\n                <Text\n                  mb={1}\n                >\n                  Select your asset:\n                </Text>\n                <AssetSelector\n                  {...this.props}\n                  id={'token-from'}\n                  onChange={this.changeFromToken}\n                  selectedToken={this.state.selectedToken}\n                  tokenConfig={this.state.curveTokenConfig}\n                  showBalance={this.state.action === 'deposit'}\n                  availableTokens={this.state.curveAvailableTokens}\n                />\n              </Box>\n              <Box\n                width={1}\n              >\n                {\n                  canPerformAction ? (\n                    <Flex\n                      mt={2}\n                      flexDirection={'column'}\n                    >\n                      <Text\n                        mb={2}\n                      >\n                        Choose the action:\n                      </Text>\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('deposit');\n                            }\n                          }}\n                          isInteractive={true}\n                          isActive={ this.state.action === 'deposit' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'deposit'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Deposit\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('redeem');\n                            }\n                          }}\n                          isInteractive={true}\n                          isDisabled={ !this.state.canRedeem }\n                          isActive={ this.state.action === 'redeem' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'redeem'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Redeem\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                      </Flex>\n                    </Flex>\n                  ) : (\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    >\n                      <Icon\n                        size={'2.3em'}\n                        name={'MoneyOff'}\n                        color={'cellText'}\n                      />\n                      <Text\n                        mt={2}\n                        fontSize={2}\n                        color={'cellText'}\n                        textAlign={'center'}\n                      >\n                        You don't have any {this.state.tokenConfig.idle.token} in your wallet.\n                      </Text>\n                    </Flex>\n                  )\n                }\n              </Box>\n            </Flex>\n            <Flex\n              width={1}\n              mt={ this.props.account ? 3 : 0 }\n            >\n            {\n              this.state.action === 'deposit' ? (\n                <CurveDeposit\n                  {...this.props}\n                  {...this.state}\n                />\n              ) : this.state.action === 'redeem' && (\n                <CurveRedeem\n                  {...this.props}\n                  {...this.state}\n                />\n              )\n            }\n            </Flex>\n          </Flex>\n        </Flex>\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverviewCurve\n                {...this.props}\n                tokenFees={this.state.tokenFees}\n                tokenConfig={this.state.tokenConfig}\n                selectedToken={this.state.selectedToken}\n                availableTokens={this.state.availableTokens}\n                enabledTokens={Object.keys(this.state.availableTokens)}\n              />\n            </Flex>\n        }\n        {\n          /*\n          this.props.account && !this.state.govTokensDisabled[this.state.selectedToken] && Object.keys(availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id=\"earnings-estimation\"\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(availableGovTokens)}\n                handleClick={(props) => {}}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.33,0.22]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.26],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    props:{\n                      width:[0.33,0.26],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                      {\n                        name:'tooltip',\n                        props:{\n                          placement:'bottom',\n                          message:'The shown balance may be lower than the real one.',\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    mobile:false,\n                    props:{\n                      width: 0.26,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                ]}\n                {...this.props}\n                availableTokens={availableGovTokens}\n              />\n            </Flex>\n          */\n        }\n        {\n          /*\n          this.props.account && \n            <Flex\n              mb={[3,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'estimated-earnings-container'}\n            >\n              <Title my={[3,4]}>Estimated earnings</Title>\n              <EstimatedEarnings\n                {...this.props}\n              />\n            </Flex>\n          */\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              availableTokens={this.state.availableTokens}\n              enabledTokens={Object.keys(this.state.availableTokens)}\n              enabledActions={['CurveIn','CurveOut','CurveZapIn','CurveZapOut','CurveTransferIn','CurveTransferOut','CurveDepositIn','CurveDepositOut']}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.state.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport {\n  Text,\n  Modal,\n  Button,\n  Form,\n  Icon,\n  Flex,\n  Link\n} from \"rimble-ui\";\nimport axios from 'axios';\nimport colors from '../../colors';\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\nimport globalConfigs from '../../configs/globalConfigs';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\n\nclass WelcomeModal extends React.Component {\n\n  state = {\n    email:null,\n    error:false,\n    subscribed:false,\n    sendingForm:false\n  };\n\n  functionsUtil = null;\n\n  constructor(props) {\n    super(props);\n    this.functionsUtil = new FunctionsUtil(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleValidation = this.handleValidation.bind(this);\n  }\n\n  componentDidUpdate = async () => {\n    this.functionsUtil.setProps(this.props);\n  }\n\n  sendUserInfo = (sendEmail=true) => {\n    const walletProvider = this.functionsUtil.getWalletProvider();\n    const userInfo = {\n      address: this.props.account,\n      provider: walletProvider\n    };\n\n    if (sendEmail && this.state.email !== null){\n      userInfo.email = this.state.email;\n    }\n\n    this.functionsUtil.simpleIDPassUserInfo(userInfo);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    if (!this.state.email){\n      return false;\n    }\n\n    const callback = () => {\n      this.setState({\n        sendingForm:false,\n        subscribed:true\n      });\n      window.setTimeout(this.props.closeModal,2500);\n    };\n\n    this.sendUserInfo();\n\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'send_email',\n      eventLabel: 'WelcomeModal'\n    });\n\n    axios.post(globalConfigs.newsletterSubscription.endpoint, {\n      'email': this.state.email\n    }).then(r => {\n      callback();\n    })\n    .catch(err => {\n      callback();\n    });\n\n    // Set signedUp in the localStorage\n    if (localStorage){\n      const walletAddress = this.props.account.toLowerCase();\n      let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : null;\n      if (lastLogin && lastLogin[walletAddress] && !lastLogin[walletAddress].signedUp){\n        lastLogin[walletAddress].signedUp = true;\n        this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n      }\n    }\n\n    this.setState({\n      sendingForm:true\n    })\n  };\n\n  closeModal = async () => {\n\n    const closeModal = () => {\n      this.props.closeModal();\n    };\n\n    try{\n      // Prevent sending email\n      this.sendUserInfo(false);\n\n      // Send Google Analytics event\n      if (globalConfigs.analytics.google.events.enabled){\n        this.functionsUtil.sendGoogleAnalyticsEvent({\n          eventCategory: 'UI',\n          eventAction: 'continue_without_email',\n          eventLabel: 'WelcomeModal'\n        },closeModal);\n\n        // Call callback after 1 second if stuck\n        setTimeout(closeModal,1000);\n      } else {\n        closeModal();\n      }\n    } catch (err) {\n      closeModal();\n    }\n  }\n\n  handleValidation(e) {\n    if (e && e.target) {\n      this.setState({ email: e.target.value });\n      e.target.parentNode.classList.add(\"was-validated\");\n    }\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        {\n          this.state.subscribed ? (\n            <ModalCard\n              closeFunc={this.closeModal}\n            >\n              <ModalCard.Header title={'All done'} icon={`images/done.svg`}></ModalCard.Header>\n              <ModalCard.Body>\n                <Flex width={1} flexDirection={'column'} mb={3}>\n                  <Text color={'dark-gray'} textAlign={'center'} fontSize={3} my={0}>\n                    Thanks for subscribing!\n                  </Text>\n                  <Button\n                    my={3}\n                    width={'100%'}\n                    borderRadius={4}\n                    onClick={this.closeModal}\n                  >\n                    CLOSE\n                  </Button>\n                </Flex>\n              </ModalCard.Body>\n            </ModalCard>\n          ) : (\n            <ModalCard closeFunc={this.closeModal}>\n              <ModalCard.Header title={'Stay up-to-date!'} icon={`images/notification.svg`}>\n              </ModalCard.Header>\n              <ModalCard.Body>\n                <Form onSubmit={this.handleSubmit}>\n                  <Flex width={1} flexDirection={'column'} mb={3}>\n                    <Text color={'mid-gray'} textAlign={'left'} fontSize={3} my={0}>\n                      Add your e-mail to receive updates about:\n                    </Text>\n                  </Flex>\n                  <Flex width={1} flexDirection={'column'} mt={2}>\n                    <Flex my={2} flexDirection={'row'} alignItems={'center'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Performance reports\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        New Protocols & Tokens\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Latest updates\n                      </Text>\n                    </Flex>\n                    <Form.Field width={1} label={''}>\n                      <Form.Input\n                        px={3}\n                        py={4}\n                        required\n                        width={1}\n                        border={0}\n                        fontSize={3}\n                        type={\"email\"}\n                        name={\"EMAIL\"}\n                        outline={'none'}\n                        borderColor={'cardBorder'}\n                        backgroundColor={'cardBg'}\n                        textAlign={['center','left']}\n                        className={header_styles.input}\n                        placeholder={'Enter your e-mail'}\n                        onChange={this.handleValidation}\n                      />\n                    </Form.Field>\n                    <Flex mb={3} flexDirection={'column'} alignItems={'center'} justifyContent={'center'}>\n                      <ButtonLoader\n                        buttonText={'SUBMIT'}\n                        isLoading={this.state.sendingForm}\n                        buttonProps={{className:header_styles.gradientButton,width:'100%',type:'submit'}}\n                      >\n                      </ButtonLoader>\n                      <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without e-mail</Link>\n                    </Flex>\n                  </Flex>\n                </Form>\n              </ModalCard.Body>\n            </ModalCard>\n          )\n        }\n      </Modal>\n    );\n  }\n}\n\nexport default WelcomeModal;\n","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\n\nclass MigrateModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'continue_without_migrate',\n        eventLabel: 'MigrateModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowMigrateModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowMigrateModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = () => {\n    const tokenMigrationRoute = this.functionsUtil.getGlobalConfig(['tools','tokenMigration','route']);\n    this.props.goToSection('tools/'+tokenMigrationRoute);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            iconHeight={'40px'}\n            title={'Migrate to Idle'}\n            icon={`images/migrate.svg`}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={3}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                You can migrate your funds from Compound, Aave, Fulcrum, Yearn and Idle V2 with just one transaction.\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                my={2}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.protocolsTokensBalances && Object.keys(this.props.protocolsTokensBalances).map( token => (\n                    <Flex\n                      mb={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      key={`token_${token}`}\n                      justifyContent={'space-between'}\n                    >\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'icon',\n                          props:{\n                            mr:2,\n                            height:'2.3em'\n                          }\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                      <SmartNumber\n                        mr={2}\n                        {...fieldProps}\n                        minPrecision={5}\n                        number={this.props.protocolsTokensBalances[token].balance} \n                      />\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'tokenName',\n                          props:fieldProps\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                    </Flex>\n                  ) )\n                }\n                <Text\n                  mb={0}\n                  fontSize={1}\n                  color={'red'}\n                  fontWeight={500}\n                  textAlign={'center'}\n                >\n                  Please be aware that by migrating your tokens from other protocols, your open positions might be liquidated if collateralized with migrated tokens.\n                </Text>\n              </Flex>\n              <Flex\n                mb={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <ButtonLoader\n                  buttonText={'MIGRATE'}\n                  handleClick={this.migrate}\n                  isLoading={this.state.sendingForm}\n                  buttonProps={{\n                    width:['100%','50%'],\n                    className:header_styles.gradientButton\n                  }}\n                >\n                </ButtonLoader>\n                {\n                /*\n                <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without migrate</Link>\n                */\n                }\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default MigrateModal;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass UpgradeModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'close_upgrade_modal',\n        eventLabel: 'UpgradeModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowUpgradeModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowUpgradeModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = async (token,strategy=null) => {\n\n    if (!strategy){\n      strategy = this.props.selectedStrategy;\n    }\n\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  convert = async (token) => {\n    const convertTool = this.functionsUtil.getGlobalConfig(['tools','tokenMigration']);\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n\n    if (!this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            icon={`images/migrate.svg`}\n            title={'Upgrade Available'}\n            iconHeight={['35px','40px']}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={[2,3]}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                Idle now supports yield farming and governance tokens distribution, migrate now your portfolio with just one click!\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n              >\n                <Flex\n                  fontSize={[2,3]}\n                  width={[0.5,0.28]}\n                  fontWeight={[4,5]}\n                  color={'copyColor'}\n                >\n                  {\n                    this.props.isMobile ? 'ASSET' : 'ASSET TO MIGRATE'\n                  }\n                </Flex>\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      BALANCE\n                    </Flex>\n                  )\n                }\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      OLD APY\n                    </Flex>\n                  )\n                }\n                <Flex\n                  fontSize={[2,3]}\n                  fontWeight={[4,5]}\n                  width={[0.25,0.19]}\n                  color={'copyColor'}\n                  justifyContent={'center'}\n                >\n                  {\n                    this.props.isMobile ? 'APY' : 'NEW APY'\n                  }\n                </Flex>\n                <Flex\n                  width={[0.25,0.15]}\n                >\n                  \n                </Flex>\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.tokensToMigrate && Object.keys(this.props.tokensToMigrate).map( tokenKey => {\n                    const token = this.props.tokensToMigrate[tokenKey].token;\n                    const strategy = this.props.tokensToMigrate[tokenKey].strategy;\n                    const tokenConfig = this.props.tokensToMigrate[tokenKey].tokenConfig;\n                    const balance = this.props.tokensToMigrate[tokenKey].oldContractBalanceFormatted;\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${tokenKey}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={[0.5,0.28]}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:['1.8em','2.3em']\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                        </Flex>\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <SmartNumber\n                                {...fieldProps}\n                                minPrecision={5}\n                                number={balance}\n                                flexProps={{\n                                  justifyContent:'center'\n                                }}\n                              />\n                            </Flex>\n                          )\n                        }\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <AssetField\n                                {...this.props}\n                                fieldInfo={{\n                                  name:'oldApy',\n                                  props:fieldProps\n                                }}\n                                token={token}\n                                tokenConfig={tokenConfig}\n                              />\n                            </Flex>\n                          )\n                        }\n                        <Flex\n                          width={[0.25,0.19]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={token}\n                            tokenConfig={tokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={[0.25,0.15]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.migrate(token,strategy) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.oldIdleTokensToMigrate && Object.keys(this.props.oldIdleTokensToMigrate).map( token => {\n                    const tokenConfig = this.props.oldIdleTokensToMigrate[token].tokenConfig;\n\n                    if (!tokenConfig){\n                      return null;\n                    }\n\n                    const balance = this.props.oldIdleTokensToMigrate[token].balance;\n                    let newTokenConfig = null;\n\n                    if (tokenConfig.availableStrategies && !this.props.availableTokens[tokenConfig.baseToken]){\n                      newTokenConfig = this.props.availableStrategies[tokenConfig.availableStrategies[0]][tokenConfig.baseToken];\n                    } else {\n                      newTokenConfig = this.props.availableTokens[tokenConfig.baseToken];\n                    }\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${token}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={0.28}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:'2.3em'\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <SmartNumber\n                            {...fieldProps}\n                            minPrecision={5}\n                            number={balance}\n                            flexProps={{\n                              justifyContent:'center'\n                            }}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'oldApy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.15}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.convert(token) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                my={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <RoundButton\n                  handleClick={this.closeModal}\n                  buttonProps={{\n                    fontSize:[2,3],\n                    width:['100%','40%'],\n                  }}\n                >\n                  MIGRATE LATER\n                </RoundButton>\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default UpgradeModal;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport { Text, Modal, Flex } from \"rimble-ui\";\nimport ExtLink from '../../ExtLink/ExtLink.js';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass RiskAdjustedModal extends React.Component {\n\n  state = {};\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    this.props.closeModal();\n  }\n\n  render() {\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','650px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            pt={3}\n            iconHeight={'40px'}\n            icon={'images/warning.svg'}\n            title={'Risk Adjusted Dismissed'}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                fontSize={2}\n                textAlign={'left'}\n                color={'dark-gray'}\n              >\n                The Risk Adjusted strategy has been dismissed after the execution of <ExtLink fontSize={2} href={this.functionsUtil.getAppUrl('#/governance/proposals/14')}>IIP-14</ExtLink> on the 13th October 2021. An incentive program has been released to let users migrate their funds in the <ExtLink fontSize={2} href={'https://beta.idle.finance/#/dashboard/tranches/senior/idle'}>Senior Tranche</ExtLink> in order to keep a similar risk profile as the Risk-Adjusted strategy. Read the <ExtLink fontSize={2} href={'https://gov.idle.finance/t/risk-adjusted-removal-for-tranches-migration/673'}>Governance Forum Post</ExtLink> for further information about the migration program.\n              </Text>\n            </Flex>\n            <Flex\n              my={3}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                handleClick={this.closeModal}\n                buttonProps={{\n                  width:['100%','40%']\n                }}\n              >\n                Got it\n              </RoundButton>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default RiskAdjustedModal;","import React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport { Flex, Card, Icon, Text } from 'rimble-ui';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardMenu from '../DashboardMenu/DashboardMenu';\n\n// Import page components\nimport Stats from '../Stats/Stats';\nimport Utils from '../Utils/Utils';\nimport AssetPage from '../AssetPage/AssetPage';\nimport RoundButton from '../RoundButton/RoundButton';\nimport Swipeable from '../utilities/components/Swipeable';\nimport BetaModal from \"../utilities/components/BetaModal\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CurveStrategy from '../CurveStrategy/CurveStrategy';\nimport WelcomeModal from \"../utilities/components/WelcomeModal\";\nimport TooltipModal from \"../utilities/components/TooltipModal\";\nimport MigrateModal from \"../utilities/components/MigrateModal\";\nimport UpgradeModal from \"../utilities/components/UpgradeModal\";\nimport DashboardHeader from '../DashboardHeader/DashboardHeader';\nimport RiskAdjustedModal from \"../utilities/components/RiskAdjustedModal\";\n\nclass Dashboard extends Component {\n  state = {\n    menu:[],\n    baseRoute:null,\n    clickEvent:null,\n    activeModal:null,\n    menuOpened:false,\n    currentRoute:null,\n    pageComponent:null,\n    currentSection:null,\n    selectedSection:null,\n    tokensToMigrate:null,\n    showResetButton:false,\n    selectedSubsection:null,\n    pageComponentProps:null,\n    oldIdleTokensToMigrate:null,\n    protocolsTokensBalances:null,\n  };\n\n  timeoutId = null;\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    window.functionsUtil = this.functionsUtil;\n  }\n\n  async loadMenu() {\n    const extraicons=this.functionsUtil.getGlobalConfig(['extraicons']);\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n\n    const menu = [];\n\n    const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n    Object.keys(strategies).filter( s => ( !strategies[s].comingSoon && (!strategies[s].enabledEnvs.length || strategies[s].enabledEnvs.includes(this.props.currentEnv)) ) ).forEach(strategy => {\n      const strategyInfo = strategies[strategy];\n      const imageInfo=extraicons[strategy];\n      menu.push({\n        submenu:[],\n        color:'#fff',\n        selected:false,\n        image:imageInfo.icon,\n        label:strategyInfo.title,\n        bgColor:strategyInfo.color,\n        route:baseRoute+'/'+strategy,\n        visible:strategyInfo.visible,\n        imageDark:imageInfo.iconDark,\n        component:strategyInfo.component,\n        imageInactive:imageInfo.iconInactive,\n        imageInactiveDark:imageInfo.iconInactiveDark\n      });\n    });\n    \n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n\n    // Add Curve\n    if (curveConfig.enabled){\n      const curveParams = Object.assign({\n        submenu:[],\n        selected:false,\n        component:CurveStrategy,\n      },curveConfig.params);\n\n      menu.push(curveParams);\n    }\n\n    // Add Stake\n    const stakeConfig = this.functionsUtil.getGlobalConfig(['tools','stake']);\n    if (stakeConfig.enabled){\n      menu.push(\n        {\n          submenu:[],\n          label:'Stake',\n          selected:false,\n          color:'dark-gray',\n          route:'/dashboard/stake',\n          image:extraicons['stake'].icon,\n          imageDark:extraicons['stake'].iconDark,\n          bgColor:this.props.theme.colors.primary,\n          imageInactive:extraicons['stake'].iconInactive,\n          imageInactiveDark:extraicons['stake'].iconInactiveDark,\n          component:Utils,\n          componentProps:{\n            showBreadCrumb:false,\n            toolProps:stakeConfig.props,\n            selectedSubsection:stakeConfig\n          },\n        }\n      );\n    }\n\n    // Add Stats\n    menu.push(\n      {\n        submenu:[],\n        label:'Stats',\n        selected:false,\n        component:Stats,\n        bgColor:'#21f36b',\n        color:'dark-gray',\n        route:'/dashboard/stats',\n        image:extraicons['stats'].icon,\n        imageDark:extraicons['stats'].iconDark,\n        imageInactive:extraicons['stats'].iconInactive,\n        imageInactiveDark:extraicons['stats'].iconInactiveDark,\n      }\n    );\n\n    // Add tools\n    menu.push(\n      {\n        label:'Tools',\n        selected:false,\n        component:Utils,\n        color:'dark-gray',\n        route:'/dashboard/tools',\n        image:extraicons['tools'].icon,\n        imageDark:extraicons['tools'].iconDark,\n        bgColor:this.props.theme.colors.primary,\n        imageInactive:extraicons['tools'].iconInactive,\n        imageInactiveDark:extraicons['tools'].iconInactiveDark,\n        submenu:Object.values(this.functionsUtil.getGlobalConfig(['tools'])).filter( u => (u.enabled) )\n      }\n    );\n\n    // Add Forum\n    menu.push(\n      {\n        submenu:[],\n        mobile:false,\n        label:'Forum',\n        selected:false,\n        component:null,\n        color:'dark-gray',\n        bgColor:'#ff0000',\n        isExternalLink:true,\n        image:extraicons['forum'].icon,\n        imageDark:extraicons['forum'].iconDark,\n        imageInactive:extraicons['forum'].iconInactive,\n        imageInactiveDark:extraicons['forum'].iconInactiveDark,\n        route:this.functionsUtil.getGlobalConfig(['forumURL'])\n      }\n    );\n\n    await this.setState({\n      menu\n    });\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  openTooltipModal = (modalTitle,modalContent) => {\n\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: modalTitle,\n      eventLabel: 'TooltipModal'\n    });\n\n    this.setState({\n      modalTitle,\n      modalContent\n    },() => {\n      this.setActiveModal('tooltip');\n    })\n  }\n\n  setActiveModal = (activeModal) => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadParams() {\n    const { match: { params } } = this.props;\n\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n    let currentRoute = baseRoute;\n\n    let pageComponent = null;\n    let selectedToken = null;\n    let currentSection = null;\n    let selectedStrategy = null;\n    let pageComponentProps = null;\n\n    // Set strategy\n    if (params.section){\n      currentSection = params.section;\n      const param1 = params.param1;\n      const param2 = params.param2;\n\n      const section_is_strategy = Object.keys(this.props.availableStrategies).includes(currentSection.toLowerCase());\n      const param1_is_strategy = param1 && Object.keys(this.props.availableStrategies).includes(param1.toLowerCase());\n\n      if (section_is_strategy || param1_is_strategy){\n\n        if (!section_is_strategy){\n          currentRoute += '/'+currentSection;\n        }\n\n        selectedStrategy = section_is_strategy ? currentSection : param1;\n        currentRoute += '/'+selectedStrategy;\n\n        // Set token\n        const param1_is_token = param1 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param1.toUpperCase());\n        const param2_is_token = param2 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param2.toUpperCase());\n        if (param1_is_token || param2_is_token){\n          selectedToken = param1_is_token ? param1.toUpperCase() : param2.toUpperCase();\n          currentRoute += '/'+selectedToken;\n\n          if (section_is_strategy){\n            pageComponent = AssetPage;\n          }\n        }\n      } else {\n        currentRoute += '/'+params.section;\n\n        if (params.param1 && params.param1.length){\n          currentRoute += '/'+params.param1;\n        }\n\n        // if (params.param2 && params.param2.length){\n        //   currentRoute += '/'+params.param2;\n        // }\n      }\n    }\n\n    const menu = this.state.menu;\n\n    let selectedSection = null;\n    let selectedSubsection = null;\n\n    menu.forEach(m => {\n      m.selected = false;\n      const sectionRoute = baseRoute+'/'+params.section;\n      if (currentRoute.toLowerCase() === m.route.toLowerCase() || ( !m.submenu.length && m.route.toLowerCase() === sectionRoute.toLowerCase() )){\n        m.selected = true;\n        if (pageComponent === null){\n          pageComponent = m.component;\n          pageComponentProps = m.componentProps;\n        }\n      } else if (m.submenu.length) {\n        m.submenu.forEach(subm => {\n          subm.selected = false;\n          const submRoute = m.route+'/'+subm.route;\n          if (submRoute.toLowerCase() === currentRoute.toLowerCase()){\n            m.selected = true;\n            subm.selected = true;\n\n            // Set component, if null use parent\n            if (pageComponent === null){\n              if (subm.component){\n                pageComponent = subm.component;\n                pageComponentProps = m.componentProps;\n              } else {\n                pageComponent = m.component;\n                pageComponentProps = m.componentProps;\n              }\n            }\n          }\n\n          // Set selected subsection\n          if (subm.selected){\n            selectedSubsection = subm;\n          }\n\n        });\n      }\n\n      // Set selected section\n      if (m.selected){\n        selectedSection = m;\n      }\n    });\n\n    // console.log('pageComponent',params,pageComponent);\n\n    // Exit if no strategy and token selected\n    if (!pageComponent){\n      return this.goToSection('/',false);\n    }\n\n    // console.log('loadParams',selectedStrategy,selectedToken);\n    await this.props.setStrategyToken(selectedStrategy,selectedToken);\n    \n    // Send GA pageview\n    this.functionsUtil.sendGoogleAnalyticsPageview(currentRoute);\n\n    const newState = {\n      menu,\n      params,\n      baseRoute,\n      currentRoute,\n      pageComponent,\n      currentSection,\n      selectedSection,\n      pageComponentProps,\n      selectedSubsection\n    };\n\n    await this.setState(newState);\n\n    return newState;\n  }\n\n  componentWillUnmount(){\n    if (this.timeoutId){\n      window.clearTimeout(this.timeoutId);\n    }\n  }\n\n  async componentWillMount() {\n\n    this.props.setCurrentSection('dashboard');\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n  }\n\n  async componentDidMount() {\n\n    this.timeoutId = window.setTimeout(() => {\n      if (!this.props.accountInizialized || !this.props.contractsInitialized){\n        this.setState({\n          showResetButton:true\n        });\n      }\n    },20000);\n\n    if (!this.props.web3){\n      return this.props.initWeb3();\n    } else if (!this.props.accountInizialized){\n      return this.props.initAccount();\n    } else if (!this.props.contractsInitialized){\n      return this.props.initializeContracts();\n    }\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n\n    const viewOnly = this.props.connectorName === 'custom';\n    if (!viewOnly){\n      this.checkModals();\n    }\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n\n    this.loadUtils();\n\n    const prevParams = prevProps.match.params;\n    const params = this.props.match.params;\n\n    const isMobileChanged = prevProps.isMobile !== this.props.isMobile;\n    if (isMobileChanged){\n      this.setState({\n        menuOpened:false\n      });\n    }\n\n    if (JSON.stringify(prevParams) !== JSON.stringify(params)){\n      await this.setState({\n        pageComponent:null\n      }, () => {\n        this.loadParams();\n      });\n    }\n\n    const viewOnly = this.props.connectorName === 'custom';\n    const accountChanged = prevProps.account !== this.props.account;\n    const strategyChanged = this.props.selectedStrategy && prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const availableTokensChanged = JSON.stringify(prevProps.availableTokens) !== JSON.stringify(this.props.availableTokens);\n    const accountInizialized = this.props.accountInizialized && prevProps.accountInizialized !== this.props.accountInizialized;\n    const contractsInitialized = this.props.contractsInitialized && prevProps.contractsInitialized !== this.props.contractsInitialized;\n\n    if (!viewOnly && (accountChanged || accountInizialized || contractsInitialized || strategyChanged || availableTokensChanged)){\n      this.checkModals();\n    }\n  }\n\n  async checkModals(){\n\n    if (this.props.selectedToken || !this.props.accountInizialized || !this.props.contractsInitialized || !this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    await this.checkRiskAdjusted();\n    await this.checkBetaApproval();\n    await this.checkTokensToMigrate();\n    await this.checkWelcomeModal();\n    await this.checkProtocolsTokensBalances();\n  }\n\n  async checkRiskAdjusted(){\n    const isRiskAdjusted = this.props.selectedStrategy === 'risk';\n    if (isRiskAdjusted){\n      const activeModal = 'risk';\n      if (activeModal !== this.state.activeModal){\n        await this.setState({\n          activeModal,\n        });\n        return activeModal;\n      }\n    }\n  }\n\n  async checkBetaApproval(){\n    const isOriginUrl = this.functionsUtil.checkUrlOrigin();\n    const isBetaApproved = this.functionsUtil.getStoredItem('betaApproved',false,false);\n\n    // Show Beta Warning modal\n    if (!isOriginUrl && !isBetaApproved){\n      const activeModal = 'beta';\n      if (activeModal !== this.state.activeModal){\n        await this.setState({\n          activeModal,\n        });\n        return activeModal;\n      }\n    }\n  }\n\n  async checkTokensToMigrate(){\n\n    const showUpgradeModal = this.functionsUtil.getStoredItem('dontShowUpgradeModal',false,null) !== null ? false : true;\n    if (this.props.selectedToken || !showUpgradeModal || !this.props.availableTokens || this.state.activeModal !== null){\n      return null;\n    }\n\n    const tokensToMigrate = await this.functionsUtil.getTokensToMigrate();\n    const oldIdleTokensToMigrate = await this.functionsUtil.getProtocolsTokensBalances('idle');\n\n    // console.log('tokensToMigrate',tokensToMigrate);\n    \n    if ((tokensToMigrate && Object.keys(tokensToMigrate).length>0) || (oldIdleTokensToMigrate && Object.keys(oldIdleTokensToMigrate).length>0)){\n      const activeModal = 'upgrade';\n      if (activeModal !== this.state.activeModal){\n        await this.setState({\n          activeModal,\n          tokensToMigrate,\n          oldIdleTokensToMigrate\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkWelcomeModal(){\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show welcome modal\n    if (this.props.account && this.state.activeModal === null){\n      let welcomeIsOpen = false;\n\n      const welcomeModalProps = this.functionsUtil.getGlobalConfig(['modals','welcome']);\n\n      if (welcomeModalProps.enabled && localStorage){\n\n        // Check the last login of the wallet\n        const currTime = new Date().getTime();\n        const walletAddress = this.props.account.toLowerCase();\n        let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : {};\n\n        // First login\n        if (!lastLogin[walletAddress]){\n          lastLogin[walletAddress] = {\n            'signedUp':false,\n            'lastTime':currTime\n          };\n          welcomeIsOpen = true;\n        // User didn't sign up\n        } else if (!lastLogin[walletAddress].signedUp) {\n          const lastTime = parseInt(lastLogin[walletAddress].lastTime);\n          const timeFromLastLogin = (currTime-lastTime)/1000;\n          welcomeIsOpen = timeFromLastLogin>=welcomeModalProps.frequency; // 1 day since last login\n        }\n\n        if (welcomeIsOpen){\n          lastLogin[walletAddress].lastTime = currTime;\n          this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n        }\n      }\n\n      const activeModal = welcomeIsOpen ? 'welcome' : this.state.activeModal;\n      if (this.state.activeModal !== activeModal){\n        await this.setState({\n          activeModal\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkProtocolsTokensBalances() {\n\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show migration modal if no other modals are opened\n    const migrateModalEnabled = this.functionsUtil.getGlobalConfig(['modals','migrate','enabled']);\n    const showMigrateModal = this.functionsUtil.getStoredItem('dontShowMigrateModal',false,null) !== null ? false : true;\n\n    if (this.state.activeModal === null && migrateModalEnabled && showMigrateModal && !this.state.protocolsTokensBalances){\n      const protocolsTokensBalances = await this.functionsUtil.getProtocolsTokensBalances();\n      const activeModal = protocolsTokensBalances && Object.keys(protocolsTokensBalances).length>0 ? 'migrate' : null;\n      const newState = {\n        activeModal,\n        protocolsTokensBalances\n      };\n      await this.setState(newState);\n      return activeModal;\n    }\n\n    return null;\n  }\n\n  goToSection(section,isDashboard=true){\n\n    // Remove dashboard route\n    if (isDashboard){\n      section = section.replace(this.state.baseRoute +'/','');\n    }\n\n    const newRoute = isDashboard ? this.state.baseRoute +'/' + section : section;\n    window.location.hash=newRoute;\n\n    // Send GA event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'goToSection',\n      eventLabel: newRoute\n    });\n\n    window.scrollTo(0, 0);\n  }\n\n  logout = async () => {\n    this.props.setConnector('Infura','Infura');\n    await this.props.initWeb3('Infura');\n  }\n\n  changeToken(selectedToken){\n    selectedToken = selectedToken.toUpperCase();\n    if (Object.keys(this.props.availableTokens).includes(selectedToken)){\n      const routeParts = [];\n\n      // Add section\n      if (this.state.currentSection.toLowerCase() !== this.props.selectedStrategy.toLowerCase()){\n        routeParts.push(this.state.currentSection);\n      }\n\n      // Add strategy\n      routeParts.push(this.props.selectedStrategy); \n\n      // Add token\n      routeParts.push(selectedToken);\n\n      this.goToSection(routeParts.join('/'));\n    }\n  }\n\n  propagateClickEvent(clickEvent){\n    this.setState({\n      clickEvent:clickEvent.target\n    });\n  }\n\n  setMenu(menuOpened){\n    this.setState({\n      menuOpened\n    });\n  }\n\n  toggleMenu(){\n    const menuOpened = !this.state.menuOpened;\n    this.setMenu(menuOpened);\n  }\n\n  swipeCallback(eventData){\n    // console.log('swipeCallback',eventData);\n    if (eventData.dir === 'Right'){\n      this.setMenu(true);\n    } else if (eventData.dir === 'Left'){\n      this.setMenu(false);\n    }\n  }\n\n  render() {\n\n    const PageComponent = this.state.pageComponent ? this.state.pageComponent : null;\n    return (\n      <Swipeable\n        callback={this.swipeCallback.bind(this)}\n      >\n        <Flex\n          height={'100vh'}\n          position={'fixed'}\n          flexDirection={'row'}\n          className={this.props.themeMode}\n          backgroundColor={['dashboardBg','white']}\n          width={this.props.isMobile && this.state.menuOpened ? '180vw' : '100vw'}\n          /*onClick={ e => this.propagateClickEvent(e) }*/\n        >\n          {\n            (!this.props.isMobile || this.state.menuOpened) && (\n              <Flex\n                bottom={0}\n                zIndex={99999}\n                width={['80vw',1/6]}\n                position={'relative'}\n                flexDirection={'column'}\n              >\n                <Card\n                  p={3}\n                  border={0}\n                  width={'auto'}\n                  height={'100vh'}\n                  backgroundColor={'menuBg'}\n                  borderColor={this.props.theme.colors.menuRightBorder}\n                  borderRight={`1px solid ${this.props.theme.colors.menuRightBorder}`}\n                  >\n                  <DashboardMenu\n                    {...this.props}\n                    menu={this.state.menu}\n                    closeMenu={e => this.setMenu(false)}\n                  />\n                </Card>\n              </Flex>\n            )\n          }\n          <Flex\n            py={3}\n            mb={0}\n            px={[3,5]}\n            width={['100vw',5/6]}\n            style={{\n              overflowY:'scroll',\n              overflowX:'hidden'\n            }}\n            height={['100vh','auto']}\n            flexDirection={'columns'}\n            backgroundColor={'dashboardBg'}\n          >\n            {\n              !this.props.accountInizialized || !this.props.contractsInitialized || !PageComponent ? (\n                <Flex\n                  width={1}\n                  minHeight={'50vg'}\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                >\n                  {\n                    !this.props.network.isCorrectNetwork ? (\n                      <DashboardCard\n                        cardProps={{\n                          p:3,\n                          mt:3,\n                          width:[1,0.35]\n                        }}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                        >\n                          <Icon\n                            size={'2.3em'}\n                            name={'Warning'}\n                            color={'cellText'}\n                          />\n                          <Text\n                            mt={2}\n                            fontSize={2}\n                            color={'cellText'}\n                            textAlign={'center'}\n                          >\n                            The <strong>{this.functionsUtil.capitalize(this.props.network.current.name)} Network</strong> is not supported, please switch to the correct network.\n                          </Text>\n                        </Flex>\n                      </DashboardCard>\n                    ) : !this.state.showResetButton ? (\n                      <FlexLoader\n                        textProps={{\n                          textSize:4,\n                          fontWeight:2\n                        }}\n                        loaderProps={{\n                          mb:3,\n                          size:'40px'\n                        }}\n                        flexProps={{\n                          my:3,\n                          flexDirection:'column'\n                        }}\n                        text={ !this.props.accountInizialized ? 'Loading account...' : ( !this.props.contractsInitialized ? 'Loading contracts...' : 'Loading assets...' )}\n                      />\n                    ) : (\n                      <DashboardCard\n                        cardProps={{\n                          p:3,\n                          mt:3,\n                          width:[1,0.35]\n                        }}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                        >\n                          <Icon\n                            size={'2.3em'}\n                            name={'Warning'}\n                            color={'cellText'}\n                          />\n                          <Text\n                            mt={2}\n                            fontSize={2}\n                            color={'cellText'}\n                            textAlign={'center'}\n                          >\n                            Idle can't connect to your wallet!<br />Make sure that your wallet is unlocked and try again.\n                          </Text>\n                          <RoundButton\n                            buttonProps={{\n                              mt:3,\n                              width:[1,1/2]\n                            }}\n                            handleClick={this.logout.bind(this)}\n                          >\n                            Logout\n                          </RoundButton>\n                        </Flex>\n                      </DashboardCard>\n                    )\n                  }\n                </Flex>\n              ) : (\n                <Flex\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  <DashboardHeader\n                    menuOpened={this.state.menuOpened}\n                    clickEvent={this.state.clickEvent}\n                    toggleMenu={this.toggleMenu.bind(this)}\n                    goToSection={this.goToSection.bind(this)}\n                    {...this.props}\n                  />\n                  {\n                    PageComponent &&\n                      <PageComponent\n                        {...this.props}\n                        match={{ params:{} }}\n                        urlParams={this.state.params}\n                        changeToken={this.changeToken.bind(this)}\n                        goToSection={this.goToSection.bind(this)}\n                        selectedSection={this.state.selectedSection}\n                        selectedSubsection={this.state.selectedSubsection}\n                        openTooltipModal={this.openTooltipModal.bind(this)}\n                        {...this.state.pageComponentProps}\n                        />\n                  }\n                </Flex>\n              )\n            }\n          </Flex>\n          <BetaModal\n            closeModal={this.resetModal}\n            isOpen={this.state.activeModal === 'beta'}\n          />\n          <RiskAdjustedModal\n            closeModal={this.resetModal}\n            isOpen={this.state.activeModal === 'risk'}\n          />\n          <UpgradeModal\n            {...this.props}\n            closeModal={this.resetModal}\n            goToSection={this.goToSection.bind(this)}\n            tokensToMigrate={this.state.tokensToMigrate}\n            isOpen={this.state.activeModal === 'upgrade'}\n            oldIdleTokensToMigrate={this.state.oldIdleTokensToMigrate}\n          />\n          <MigrateModal\n            {...this.props}\n            closeModal={this.resetModal}\n            goToSection={this.goToSection.bind(this)}\n            isOpen={this.state.activeModal === 'migrate'}\n            protocolsTokensBalances={this.state.protocolsTokensBalances}\n          />\n          <TooltipModal\n            closeModal={this.resetModal}\n            title={this.state.modalTitle}\n            content={this.state.modalContent}\n            isOpen={this.state.activeModal === 'tooltip'}\n          />\n          <WelcomeModal\n            closeModal={this.resetModal}\n            account={this.props.account}\n            simpleID={this.props.simpleID}\n            network={this.props.network.current}\n            tokenName={this.props.selectedToken}\n            initSimpleID={this.props.initSimpleID}\n            baseTokenName={this.props.selectedToken}\n            isOpen={this.state.activeModal === 'welcome'}\n          />\n        </Flex>\n      </Swipeable>\n    );\n  }\n}\n\nexport default Dashboard;"],"sourceRoot":""}