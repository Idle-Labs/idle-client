{"version":3,"sources":["AssetsUnderManagement/AssetsUnderManagement.js","TwitterShareButton/TwitterShareButton.module.scss","Stats/StatsChart.js","Rebalance/Rebalance.js","utilities/components/DateRangeModal.js","ExecuteTransaction/ExecuteTransaction.js","Stats/Stats.js","Utils/Utils.js","FundsOverview/FundsOverview.js","CurveRedeem/CurveRedeem.js","TwitterShareButton/TwitterShareButton.js","utilities/components/ShareModal.js","DepositRedeem/DepositRedeem.js","EstimatedEarnings/EstimatedEarnings.js","AssetPage/AssetPage.js","utilities/components/BetaModal.js","CurveDeposit/CurveDeposit.js","PortfolioEquityCurve/PortfolioEquityCurve.js","FundsOverviewCurve/FundsOverviewCurve.js","CurveStrategy/CurveStrategy.js","utilities/components/WelcomeModal.js","utilities/components/MigrateModal.js","utilities/components/UpgradeModal.js","Dashboard/Dashboard.js"],"names":["AssetsUnderManagement","state","totalAUM","totalAUMEndOfYear","functionsUtil","this","setProps","props","FunctionsUtil","loadUtils","loadTotalAUM","prevProps","prevState","contractsInitialized","availableStrategies","JSON","stringify","getAggregatedStats","avgAPY","plus","times","div","setState","_this2","react__WEBPACK_IMPORTED_MODULE_9___default","a","createElement","rimble_ui__WEBPACK_IMPORTED_MODULE_10__","width","react_countup__WEBPACK_IMPORTED_MODULE_8___default","delay","decimals","decimal","separator","useEasing","duration","start","parseFloat","end","formattingFn","n","formatMoney","_ref2","countUpRef","style","counterStyle","display","color","whiteSpace","fontFamily","theme","fonts","counter","fontWeight","fontWeights","textAlign","isMobile","fontSize","fontSizes","ref","subtitle","_Title_Title__WEBPACK_IMPORTED_MODULE_7__","Object","assign","subtitleProps","span","alignItems","justifyContent","loaderAlign","size","Component","module","exports","twitterIcon","StatsChart","chartProps","chartType","chartData","chartWidth","parseAum","value","parseInt","toFixed","_this","selectedToken","loadApiData","_callee3","maxGridLines","apiResults","apiResults_unfiltered","totalItems","protocols","versionInfo","keys","tempData","gridYStep","itemIndex","gridYValues","maxChartValue","axisBottomIndex","idleChartData","firstIdleBlock","divergingData","startTimestamp","endTimestamp","timestamp","date","lastRow","maxRange","i","_i","_i2","_i3","prevValue","_i4","prevApr","prevData","avgApy","startBalance","currentBalance","_i5","firstTokenPrice","_i6","regenerator_default","wrap","_context3","prev","next","tokenConfig","chartMode","abrupt","length","globalConfigs","stats","versions","idleVersion","Line","t0","moment","_d","getTime","format","deposits","redeems","forEach","row","idleTokens","fixTokenDecimals","idleSupply","idleTokensPrev","eq","diff","minus","gte","Math","max","abs","values","filter","v","Bar","push","indexBy","enableLabel","minValue","maxValue","label","d","axisBottom","tickSize","legend","tickPadding","orient","legendOffset","legendPosition","tickValues","axisLeft","axisRight","tickRotation","abbreviateNumber","markers","axis","lineStyle","strokeOpacity","textStyle","fill","colors","transactions","action","deposit","legendOrientation","legendOffsetX","stroke","strokeDasharray","redeem","padding","labelTextColor","labelSkipWidth","labelSkipHeight","pointSize","useMesh","animate","pointLabel","curve","enableArea","enableSlices","enableGridX","enableGridY","pointBorderWidth","pointLabelYOffset","legends","dataFrom","itemWidth","itemHeight","translateX","translateY","symbolSize","itemsSpacing","direction","anchor","symbolShape","itemTextColor","effects","on","themeMode","ticks","text","sansSerif","grid","line","lineChartStroke","textTransform","tooltip","container","boxShadow","background","pointColor","from","modifiers","margin","top","right","bottom","left","data","xFormatted","strToMoment","indexValue","point","id","depositFormatted","redeemFormatted","react_default","CustomTooltip","CustomTooltipRow","tokens","hsl","join","map","idlePrice","aum","x","y","toString","p","j","protocolsData","protocolAllocation","protocolAddr","toLowerCase","address","z","BNify","rate","allocation","foundItem","item","pos","indexOf","allocations","name","undefined","xScale","type","xFormat","yFormat","yScale","stacked","showAdvanced","sliceTooltip","slideData","slice","points","serieId","serieColor","yFormatted","protocolName","protocolInfo","protocolColor","protocolAllocationFormatted","protocolAllocationPerc","key","concat","protocolData","protocolPaused","foundProtocol","find","tableCell","_ref3","DashboardCard","cardProps","py","px","borderCollapse","height","totalAllocation","reduce","accumulator","allocationPerc","_ref4","_ref5","enabled","protocolRate","lt","aaveAdditionalAPR","gt","idle","idleRate","protocolEarning","defiScore","isNaN","idleScore","apy","apr","days","earnings","earning","blocknumber","itemPos","floor","additionalProtocols","additionalProtocol","protocol","unshift","isAfter","Date","now","rateField","chartRow","baseProfit","firstProtocolData","firstProtocolBlock","isSameOrBefore","pData","acc","field","rowData","idlePerformance","d1","protocolApy","tokenPrice","asyncForEach","_ref6","asyncToGenerator","mark","_callee2","lastRowData","lastTokenPrice","_context2","_ref7","_callee","tokenExchangeRate","tokenPriceFixed","lastYDiff","_context","price","stop","_x2","apply","arguments","_x","showAdvancedChanged","apiResultsChanged","tokenChanged","componentDidMount","GenericChart","showLoader","parentId","parentIdHeight","Rebalance","loading","processing","rebalance","txHash","shouldRebalance","componentUnmounted","checkRebalance","setStateSafe","sent","e","callback","callback_receipt","preventDefault","tx","error","eventData","eventLabel","status","eventCategory","eventAction","getTransactionError","sendGoogleAnalyticsEvent","window","toastProvider","addMessage","secondaryMessage","colorTheme","actionHref","actionText","variant","objectSpread","transactionHash","contractMethodSendWrapper","token","accountChanged","account","newState","index_es","minHeight","flexDirection","FlexLoader","flexProps","loaderProps","textProps","ml","TxProgressBar","waitText","endMessage","hash","mt","mb","RoundButton","buttonProps","disabled","handleClick","DateRangeModal","quickSelection","ranges","startDate","endDate","componentDidUpdate","selection","target","clone","subtract","closeModal","handleSelect","startTimestampObj","endTimestampObj","_this3","isOpen","ModalCard","closeFunc","Header","title","Body","backgroundColor","cardBg","required","onChange","handleQuickSelect","bind","options","dist","minDate","maxDate","className","Footer","my","mx","borderRadius","mainColor","onClick","React","ExecuteTransaction","txStatus","contractName","methodName","params","ExecuteComponent","parentProps","children","web3","network","progressBarProps","cancelTransaction","execute","componentProps","Stats","delta","carouselMax","rebalances","buttonGroups","carouselIndex","statsVersions","minStartTime","govTokensPool","unlentBalance","carouselOffsetLeft","showRefreshIdleSpeed","dateRangeModalOpened","quickSelections","day","week","weeks","month","setDateRange","isSameOrAfter","isSame","add","isBefore","maxEndDate","toggleAdvancedCharts","setDateRangeModal","filterTokenData","r","setIdleVersion","isRisk","firstResult","lastResult","firstIdlePrice","lastIdlePrice","compoundInfo","firstCompoundData","lastCompoundData","compoundWithCOMPInfo","compoundAvgApr","firstCompoundPrice","lastCompoundPrice","compoundApr","availableTokens","includes","selectedStrategy","getTokenApiData","pop","convertTokenBalance","sum","compoundWithCOMP","compoundData","compoundRate","index","prevRow","prevTotalAllocation","hasRebalanced","prevP","prevAllocation","getGovTokenPool","getUnlentBalance","selectToken","strategy","setStrategyToken","changeToken","handleCarousel","$element","jQuery","position","loadParams","latestVersion","version","enabledStrategies","strategiesParams","versionInfoExtra","param","match","currentNetworkAvailableTokens","customToken","toUpperCase","getLatestAvailableVersion","getVersionInfo","newEndTimestampObj","newStartTimestampObj","initWeb3","loadCarousel","strategyChanged","dateChanged","versionChanged","idleTokenEnabled","getGlobalConfig","apyLong","textSize","statsTokens","versionsOptions","enabledTokens","performanceTooltip","versionDefaultValue","Breadcrumb","showPathMobile","goToSection","path","GenericSelector","innerProps","defaultValue","AssetSelector","isInteractive","pr","StatsCard","labelTooltip","SmartNumber","precision","lineHeight","unitProps","number","unit","VariationNumber","iconPos","iconSize","description","Stats_StatsChart","contracts","pb","pt","AllocationChart","src_Rebalance_Rebalance","pl","h4","RoundIconButton","mr","iconName","transition","titleParentProps","utilities_components_DateRangeModal","strategies","statsProtocols","strategyInfo","availableProtocolsKeys","availableProtocols","Title","titlePostfix","AssetsList","cols","fields","mobile","overflow","desc","showTooltip","rgb","hoverColor","isActive","src_ExecuteTransaction_ExecuteTransaction","Button","completed","Utils","SubComponent","selectedSubsection","subComponent","viewOnly","connectorName","showBreadCrumb","selectedSection","route","directProps","toolProps","flexWrap","IconBox","maxWidth","icon","submenu","tool","toolIndex","flex","image","src","FundsOverview","aggregatedValues","govTokensTotalApr","govTokensUserBalance","govTokensDistribution","govTokensTotalBalance","govTokensTotalAprTooltip","idleTokenUserDistribution","govTokensDistributionTooltip","govTokensTotalBalanceTooltip","idleGovToken","getIdleGovToken","govTokenAvailableTokens","Promise","all","getUserDistribution","getGovTokensUserBalances","loadAssetField","depositTimestamp","getAvgAPYStats","lte","totBalance","govTokenBalance","govToken","balance","dangerouslySetInnerHTML","__html","AssetField","fieldInfo","placement","message","PortfolioEquity","chartHeight","chartToken","frequencySeconds","getFrequencySeconds","component","Heading","h3","maxPrecision","govTokenIndex","tokenName","distributionFrequency","CurveRedeem","inputValue","maxSlippage","unevenAmounts","buttonDisabled","showMaxSlippage","redeemUnderlying","curveTokenConfig","curvePoolContract","curveSwapContract","curveTokenBalance","curveTokensAmounts","fastBalanceSelector","redeemUnevenAmounts","curveRedeemableIdleTokens","toggleUnevenAmounts","checkButtonDisabled","amount","changeInputValue","setFastBalanceSelector","setMaxSlippage","initToken","max_slippage","normalizedAmount","normalizeTokenAmount","withdrawSlippage","curveIdleTokensAmounts","getCurveTokensAmounts","getCurveIdleTokensAmounts","getCurveSlippage","getCurveTokenPrice","curveTokenPrice","redeemableBalance","redeemUnevenAmountsChanged","setInputValue","inputChanged","maxSlippageChanged","tokenConfigChanged","calculateSlippage","loadSelectedTokenConfig","selectedPercentage","curveConfig","getCurvePoolContract","getCurveSwapContract","getCurveTokenBalance","getCurveRedeemableIdleTokens","getCurveAvailableTokens","callbackRedeem","txSucceeded","eventValue","callbackReceiptRedeem","_amount","min_amounts","console","log","coin_index","migrationParams","coinIndex","min_amount","showSlippage","curveTokenName","checked","showBalance","selectDestinationToken","slippage","FastBalanceSelector","percentage","onMouseDown","failed","textOverflow","min","placeholder","border","divider","TwitterShareButton","share","parent","w","innerWidth","open","tweet","contrastColor","styles","ShareModal","getGlobalConfigs","analytics","google","events","escape","customText","confettiEnabled","react_confetti_default","zIndex","run","recycle","innerHeight","src_TwitterShareButton_TwitterShareButton","DepositRedeem","txError","tokenAPY","curveAPY","canRedeem","canDeposit","directMint","activeModal","tokenGovTokens","showBuyFlow","maxUnlentPerc","tokenApproved","skipMigration","redeemSkipGov","showRedeemFlow","contractPaused","canRedeemCurve","erc20ForwarderTx","signedParameters","minAmountForMint","redeemGovTokens","canDepositCurve","redeemSkipGovTokens","actionProxyContract","migrationEnabled","componentMounted","agreeSkipGovTokens","redeemCurveEnabled","depositCurveBalance","depositCurveEnabled","showAdvancedOptions","skipGovTokensGasSave","depositCurveSlippage","erc20ForwarderContract","erc20ForwarderEnabled","showETHWrapperEnabled","skipGovTokensGasSaveUSD","metaTransactionsEnabled","skippedGovTokensBalance","minAmountForMintReached","loadingErc20ForwarderTx","setShowRedeemFlow","setShowBuyFlow","toggleShowAdvancedOptions","toggleSkipMigration","toggleRedeemCurve","toggleDepositCurve","toggleShowETHWrapper","toggleAgreeSkipGovTokens","toggleSkipMint","toggleRedeemGovTokens","toggleRedeemSkipGov","getSkippedGovTokensFlags","govTokensIndexes","govTokensFlags","getGovTokensIndexes","calculateSkippedGovTokens","DAITokenConfig","_skipGovTokenRedeem","WETHTokenConfig","wethPrice","redeemGasUsage","skipGovRedeemGasUsage","govTokenConfig","govTokenPrice","skippedAmount","getUniswapConversionRate","govTokensUserBalances","estimateMethodGasUsage","idleTokenBalance","slicedToArray","setRedeemSkipGovTokens","splice","toggleErc20ForwarderEnabled","toggleMetaTransactionsEnabled","resetModal","setActiveModal","checkUseProxyContract","proxyContract","depositErc20ForwarderEnabled","depositMetaTransactionsEnabled","biconomy","approveContract","_callee4","callbackApprove","callbackReceiptApprove","curveDepositContract","_context4","enableERC20","checkTokenApproved","_callee5","_context5","approveToken","_callee6","_context6","approve","loadTokenInfo","_callee7","curveTokenEnabled","_ref10","_ref11","_context7","checkContractPaused","getCurveDepositContract","checkMigration","tokenBalance","getTokenGovTokens","boost","checkAction","loadAPY","_callee8","_context8","defineProperty","executeAction","_callee11","contractSendResult","callbackDeposit","callbackReceiptDeposit","curvePoolContractInfo","tokensToDeposit","amounts","minMintAmount","depositParams","_tokensToDeposit","_depositParams","mintProxyContractInfo","mintProxyContract","_mintProxyContract$me","functionCall","functionSignature","_referral","txData","idleTokenToRedeem","idleTokenPriceWithFee","_callbackRedeem","_callbackReceiptRedeem","redeemMethod","redeemParams","_context11","getFastBalanceSelector","localStorage","setLocalStorage","lendingProcessing","lendAmount","genericError","getCurveAmounts","getCurveTokenAmount","integerValue","contract","methods","function","toConsumableArray","encodeABI","sendBiconomyTxWithPersonalSign","_callee10","metaInfo","permitOptions","erc20ForwarderBaseContract","expiry","nonce","s","_context10","signPermit","allowed","holder","spender","permitData","permitType","asyncTimeout","sendBiconomyTxWithErc20Forwarder","request","_callee9","_erc20ForwarderContra","_functionCall","_functionSignature","_context9","buildBiconomyErc20ForwarderTx","getReferralAddress","getIdleTokenPriceWithFee","_callee12","_context12","setAction","loadProxyContracts","actions","_ref17","_callee15","erc20ForwarderContractInfo","hasProxyContract","_context15","initContract","abi","approved","_x5","getTokenAprs","tokenAprs","getCurveAPY","getQueryStringParameterByName","checkAddress","erc20ForwarderEnabledChanged","tokenBalanceChanged","actionChanged","fastBalanceSelectorChanged","redeemSkipGovChanged","redeemGovTokensChanged","agreeSkipGovTokensChanged","redeemSkipGovTokensChanged","depositCurveChanged","calculateCurveSlippage","showPoolPerc","convertedAmount","genericContractCall","depositPerc","maxUnlentPercFormatted","govTokensEnabled","govTokensDisabled","skipMintForDepositEnabled","skipMintForDeposit","redeemGovTokenEnabled","govTokensBalance","redeemSkipGovConfig","redeemSkipGovEnabled","disabledTokens","redeemSkipGovNoTokens","showAdvancedRedeemOptions","metaTransactionsAvailable","useMetaTx","erc20ForwarderClient","totalBalance","migrateText","migration","depositCurve","showDepositCurve","showRedeemCurve","showCurveSlippage","showAdvancedDepositOptions","batchDepositInfo","batchDepositEnabled","batchDepositDepositEnabled","depositEnabled","showBatchDeposit","isMigrationTool","ethWrapperInfo","ETHWrapperComponent","showETHWrapper","canPerformAction","showActionFlow","showReferral","Migrate","migrateTextBefore","TransactionField","transaction","isDisabled","openTooltipModal","isRainbow","cursor","m","CardIconButton","imageProps","ExtLink","href","getWalletProvider","capitalize","primary","fullWidth","cost","align","tokenFeesPercentage","borderColor","minWidth","ConnectBox","src_CurveRedeem_CurveRedeem","BuyModal","showInline","availableMethods","buyToken","components_ShareModal","EstimatedEarnings","maxInputValue","loadChart","getTokenApy","earningsYear","tokenApy","amountMonth","amount3Months","amount6Months","amountYear","perc","monthColor","month3","month3Color","month6","month6Color","year","yearColor","labelTextColorModifiers","gridYValue","_ref","labels","showAPYDisclaimer","verticalAlign","AssetPage","tokenFees","idleTokenPrice","availableGovTokens","getTokenFees","getIdleTokenPrice","getTokenBalance","getUserTokenFees","getGovTokensUserTotalBalance","loadTokensInfo","availableTokensChanged","transactionsChanged","userHasFunds","src_DepositRedeem_DepositRedeem","src_FundsOverview_FundsOverview","src_EstimatedEarnings_EstimatedEarnings","TransactionsList","BetaModal","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","iconHeight","CurveDeposit","depositSlippage","migrationContract","curveTokensBalance","migrationSucceeded","migrationContractApproved","checkMigrationContractApproved","getMigrationParams","approveCallback","migrationCallback","idleTokenBalanceChanged","toMigrate","n_coins","underlyingBalanceToDeposit","normalizeIdleTokenBalance","hasCurveTokens","PortfolioEquityCurve","chartwidth","loadChartData","quickDateSelectionChanged","quickDateSelection","getCurveTxs","curveTxs","tokensBalance","processedTxs","firstTxTimestamp","timeStamp","curveTokens","currentDate","prevBalances","prevTimestamp","minChartValue","aggregatedBalancesKeys","tokensBalancesPerDate","aggregatedBalance","currTimestamp","tokensData","foundBalances","tokensBalances","momentDate","filteredTokenData","filteredBalances","lastFilteredTx","lastTokenData","lastTx","lastTxBalance","formattedDate","aggregatedBalanceParsed","aggregatedBalances","balances","yFormatDecimals","daysCount","daysFrequency","ceil","areaOpacity","areaBaselineValue","ChartCustomTooltip","ChartCustomTooltipRow","tokenInfo","hex","formattedBalance","FundsOverviewCurve","compAPR","getCurveAvgBuyPrice","getCurveAvgSlippage","src_PortfolioEquityCurve_PortfolioEquityCurve","redeemBalance","depositBalance","curveZapContract","curveAvailableTokens","changeFromToken","setSelectedToken","baseToken","getSelectedToken","urlParams","param1","getCurveZapContract","updateAssetSelector","curveTokensToRedeem","src_CurveDeposit_CurveDeposit","src_FundsOverviewCurve_FundsOverviewCurve","enabledActions","WelcomeModal","email","subscribed","sendingForm","sendUserInfo","sendEmail","walletProvider","userInfo","provider","simpleIDPassUserInfo","setTimeout","err","handleSubmit","assertThisInitialized","handleValidation","axios","post","newsletterSubscription","endpoint","then","catch","walletAddress","lastLogin","getItem","parse","signedUp","parentNode","classList","onSubmit","green","Field","Input","outline","header_styles","input","ButtonLoader","buttonText","isLoading","gradientButton","MigrateModal","dontShowAgain","toggleDontShowAgain","removeStoredItem","migrate","tokenMigrationRoute","fieldProps","protocolsTokensBalances","minPrecision","UpgradeModal","_args3","convert","convertTool","tokensToMigrate","tokenKey","oldContractBalanceFormatted","oldIdleTokensToMigrate","newTokenConfig","Dashboard","menu","baseRoute","clickEvent","currentRoute","pageComponent","currentSection","showResetButton","pageComponentProps","timeoutId","modalTitle","modalContent","logout","setConnector","comingSoon","selected","bgColor","imageInactive","iconInactive","imageInactiveDark","iconInactiveDark","curveParams","CurveStrategy","stakeConfig","u","isExternalLink","section","param2","section_is_strategy","param1_is_strategy","param1_is_token","param2_is_token","sectionRoute","subm","sendGoogleAnalyticsPageview","clearTimeout","setCurrentSection","loadMenu","accountInizialized","initAccount","initializeContracts","checkModals","prevParams","checkBetaApproval","checkTokensToMigrate","checkWelcomeModal","checkProtocolsTokensBalances","isOriginUrl","checkUrlOrigin","isBetaApproved","getStoredItem","showUpgradeModal","getTokensToMigrate","getProtocolsTokensBalances","welcomeIsOpen","welcomeModalProps","currTime","lastTime","frequency","migrateModalEnabled","showMigrateModal","isDashboard","replace","newRoute","location","scrollTo","routeParts","PageComponent","menuRightBorder","borderRight","DashboardMenu","overflowY","overflowX","DashboardHeader","isCorrectNetwork","current","components_BetaModal","components_UpgradeModal","components_MigrateModal","TooltipModal","content","components_WelcomeModal","simpleID","initSimpleID","baseTokenName"],"mappings":"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","file":"static/js/3.d3cc1c6e.chunk.js","sourcesContent":["import Title from '../Title/Title';\nimport CountUp from 'react-countup';\nimport React, { Component } from 'react';\nimport { Box, Flex, Text, Loader } from \"rimble-ui\";\nimport FunctionsUtil from '../utilities/FunctionsUtil';\n\nclass AssetsUnderManagement extends Component {\n\n  state = {\n    totalAUM:null,\n    totalAUMEndOfYear:null\n  }\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.loadTotalAUM();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const availableStrategiesChanged = !prevProps.availableStrategies && JSON.stringify(prevProps.availableStrategies) !== JSON.stringify(this.props.availableStrategies);\n    if (availableStrategiesChanged || contractsInitialized){\n      this.loadTotalAUM();\n    }\n  }\n\n  async loadTotalAUM(){\n\n    if (!this.props.availableStrategies || !this.props.contractsInitialized){\n      return true;\n    }\n\n    const {\n      avgAPY,\n      totalAUM\n    } = await this.functionsUtil.getAggregatedStats();\n\n    const totalAUMEndOfYear = totalAUM.plus(totalAUM.times(avgAPY.div(100)));\n\n    this.setState({\n      totalAUM,\n      totalAUMEndOfYear\n    });\n  }\n\n  render() {\n    return this.state.totalAUM ? (\n      <Box\n        width={1}\n      >\n        <CountUp\n          delay={0}\n          decimals={4}\n          decimal={'.'}\n          separator={''}\n          useEasing={false}\n          duration={31536000}\n          start={parseFloat(this.state.totalAUM)}\n          end={parseFloat(this.state.totalAUMEndOfYear)}\n          formattingFn={ n => '$ '+this.functionsUtil.formatMoney(n,4) }\n        >\n          {({ countUpRef, start }) => (\n            <span\n              style={ this.props.counterStyle ? this.props.counterStyle : {\n                display:'block',\n                color:'dark-gray',\n                whiteSpace:'nowrap',\n                fontFamily:this.props.theme.fonts.counter,\n                fontWeight:this.props.theme.fontWeights[5],\n                textAlign: this.props.isMobile ? 'center' : 'right',\n                fontSize: this.props.isMobile ? '1.6em' : this.props.theme.fontSizes[6]\n              }}\n              ref={countUpRef}\n            />\n          )}\n        </CountUp>\n        {\n          (typeof this.props.subtitle === 'undefined' || this.props.subtitle) && (\n            <Title\n              fontWeight={3}\n              fontSize={[2,2]}\n              color={'cellTitle'}\n              textAlign={['center','right']}\n              {...this.props.subtitleProps}\n            >\n              {\n                this.props.subtitle ? this.props.subtitle : (\n                  <Text.span fontWeight={'inherit'} color={'inherit'} fontSize={'inherit'}>Assets Under Management <Text.span color={'cellTitle'} fontWeight={3} fontSize={'70%'}>(V3 + V4)</Text.span></Text.span>\n                )\n              }\n            </Title>\n          )\n        }\n      </Box>\n    ) : (\n      <Flex\n        alignItems={'center'}\n        justifyContent={this.props.loaderAlign || 'center'}\n      >\n        <Loader\n          size={\"30px\"}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default AssetsUnderManagement;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"twitterIcon\":\"TwitterShareButton_twitterIcon__2QCmn\"};","import moment from 'moment';\nimport { Bar } from '@nivo/bar';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CustomTooltip from '../CustomTooltip/CustomTooltip';\nimport CustomTooltipRow from '../CustomTooltip/CustomTooltipRow';\n\nclass StatsChart extends Component {\n  state = {\n    chartProps:{},\n    chartType:null,\n    chartData:null,\n    chartWidth:null\n  };\n\n  async componentDidMount() {\n    this.setState({\n      chartData:null,\n      chartType:null,\n      chartProps:null,\n    });\n    this.loadUtils();\n    this.loadApiData();\n  }\n\n  async componentDidUpdate(prevProps) {\n    const showAdvancedChanged = prevProps.showAdvanced !== this.props.showAdvanced;\n    const apiResultsChanged = prevProps.apiResults !== this.props.apiResults;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    if (apiResultsChanged || showAdvancedChanged || tokenChanged){\n      this.componentDidMount();\n    }\n  }\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  parseAum = value => {\n    return (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.tokenConfig || !this.props.selectedToken || !this.props.chartMode || !this.props.apiResults){\n      return false;\n    }\n\n    const maxGridLines = 4;\n    const apiResults = this.props.apiResults;\n    const apiResults_unfiltered = this.props.apiResults_unfiltered;\n    const totalItems = apiResults.length;\n    const protocols = Object.assign([],this.props.tokenConfig.protocols);\n    // const compoundProtocol = this.props.tokenConfig.protocols.find( p => (p.name === 'compound'));\n\n    const versionInfo = globalConfigs.stats.versions[this.props.idleVersion];\n\n    let keys = {};\n    let tempData = {};\n    let gridYStep = 0;\n    let itemIndex = 0;\n    let chartData = [];\n    let chartProps = {};\n    let chartType = Line;\n    let gridYValues = [];\n    let maxChartValue = 0;\n    let axisBottomIndex = 0;\n    let idleChartData = null;\n    let firstIdleBlock = null;\n\n    switch (this.props.chartMode){\n      case 'VOL':\n        let divergingData = {};\n\n        const startTimestamp = parseInt(apiResults_unfiltered[0].timestamp);\n        const endTimestamp = parseInt(moment()._d.getTime()/1000);\n\n        for (let timestamp=startTimestamp;timestamp<=endTimestamp;timestamp+=86400){\n          const date = moment(timestamp*1000).format(\"YYYY/MM/DD\");\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n        }\n\n        let lastRow = null;\n        apiResults_unfiltered.forEach(row => {\n          const date = moment(row.timestamp*1000).format(\"YYYY/MM/DD\");\n          const idleTokens = this.functionsUtil.fixTokenDecimals(row.idleSupply,18);\n\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp:row.timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n\n          if (lastRow){\n            const idleTokensPrev = this.functionsUtil.fixTokenDecimals(lastRow.idleSupply,18);\n            const idleTokensDiff = !idleTokens.eq(idleTokensPrev);\n            if (idleTokensDiff){\n              const diff = idleTokens.minus(idleTokensPrev);\n              // Deposits\n              if (diff.gte(0)){\n                divergingData[date].deposits+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,divergingData[date].deposits);\n              } else {\n                divergingData[date].redeems+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,Math.abs(divergingData[date].deposits));\n              }\n            }\n\n          } else {\n            divergingData[date].deposits+=parseFloat(idleTokens);\n          }\n\n          lastRow = row;\n        });\n\n        chartData = Object.values(divergingData).filter(v => {\n          return (!this.props.startTimestamp || v.timestamp>=this.props.startTimestamp) && (!this.props.endTimestamp || v.timestamp<=this.props.endTimestamp);\n        });\n\n        let maxRange = 0;\n        chartData.forEach(v => {\n          maxRange = Math.max(maxRange,Math.abs(v.deposits),Math.abs(v.redeems));\n        })\n\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          indexBy: 'date',\n          enableLabel: false,\n          minValue:-maxRange,\n          maxValue:maxRange,\n          label: d => {\n            return Math.abs(d.value);\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days',\n          },\n          axisLeft: null,\n          axisRight: {\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:8,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(Math.abs(v),0)\n          },\n          markers: [\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { strokeOpacity: 0 },\n              textStyle: { fill: this.props.theme.colors.transactions.action.deposit },\n              legend: 'deposits',\n              legendPosition: 'top-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { stroke: this.props.theme.colors['dark-gray'], strokeDasharray: '5 3' },\n              textStyle: { fill: this.props.theme.colors.transactions.action.redeem },\n              legend: 'redeems',\n              legendPosition: 'bottom-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n          ],\n          keys:['deposits','redeems'],\n          padding:0.4,\n          colors:[this.props.theme.colors.transactions.action.deposit, this.props.theme.colors.transactions.action.redeem],\n          labelTextColor: 'inherit:darker(1.4)',\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 80 : 100,\n              itemHeight: 18,\n              translateX: 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            },\n            tooltip:{\n              container:{\n                boxShadow:null,\n                background:null\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 50, bottom: 45, left: 50 } : { top: 20, right: 70, bottom: 70, left: 50 },\n          tooltip:(data) => {\n            const xFormatted = this.functionsUtil.strToMoment(data.indexValue).format('MMM DD');\n            const point = {\n              id:data.id,\n              data:{\n                xFormatted\n              }\n            };\n            const depositFormatted = this.functionsUtil.abbreviateNumber(data.data.deposits,2)+' '+this.props.selectedToken;\n            const redeemFormatted = this.functionsUtil.abbreviateNumber(data.data.redeems,2)+' '+this.props.selectedToken;\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                <CustomTooltipRow\n                  label={'Deposits'}\n                  color={this.props.theme.colors.deposit}\n                  value={depositFormatted}\n                />\n                <CustomTooltipRow\n                  label={'Redeem'}\n                  color={this.props.theme.colors.redeem}\n                  value={redeemFormatted}\n                />\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      /*\n      case 'AUM_ALL':\n        await this.functionsUtil.asyncForEach(Object.keys(availableTokens[globalConfigs.network.requiredNetwork]),async (tokenName,i) => {\n          const tokenConfig = availableTokens[globalConfigs.network.requiredNetwork][tokenName];\n          const tokenDataApi = await this.props.getTokenData(tokenConfig.address);\n          chartData.push({\n            id:tokenName,\n            color: tokenConfig.color,\n            data: tokenDataApi.map((d,i) => {\n              const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n              const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,tokenConfig.decimals);\n              const aum = idleTokens.times(idlePrice);\n              return {\n                x: moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\"),\n                y: parseInt(aum.toString())\n              };\n            })\n          });\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken,\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v),\n            orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            legendPosition: 'middle'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            format: '%b %d',\n            tickValues: this.props.isMobile ? 'every 4 days' : 'every 3 days',\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 36,\n            legendPosition: 'middle'\n          },\n          enableArea:false,\n          curve:\"linear\",\n          enableSlices:'x',\n          enableGridX:true,\n          enableGridY:false,\n          colors:d => d.color,\n          pointSize:0,\n          pointColor:{ from: 'color', modifiers: []},\n          pointBorderWidth:1,\n          pointLabel:\"y\",\n          pointLabelYOffset:-12,\n          useMesh:true,\n          animate:false,\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 60, bottom: 40, left: 60 },\n        };\n      break;\n      */\n      case 'AUM':\n\n        maxChartValue = 0;\n\n        chartData.push({\n          id:'AUM',\n          color: 'hsl('+globalConfigs.stats.tokens[this.props.selectedToken].color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n            const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n            const aum = idleTokens.times(idlePrice);\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(aum.toString());\n\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x,y };\n          })\n        });\n\n        // Add allocation\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          apiResults.map((d,i) => {\n            return d.protocolsData.filter((protocolAllocation,x) => {\n                return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            })\n            .map((protocolAllocation,z) => {\n              const protocolPaused = this.functionsUtil.BNify(protocolAllocation.rate).eq(0);\n              if (!protocolPaused){\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals));\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                let foundItem = chartData[0].data.filter(item => { return item.x === x });\n                if (foundItem){\n                  foundItem = foundItem[0];\n                  const pos = chartData[0].data.indexOf(foundItem);\n                  if (!foundItem.allocations){\n                    foundItem.allocations = {};\n                  }\n                  foundItem.allocations[p.name] = y;\n                  chartData[0].data[pos] = foundItem;\n                }\n              }\n              return undefined;\n            })[0]\n          }).filter((v) => { return v !== undefined; } )\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:v => this.functionsUtil.formatMoney(v,v<1 ? 3 :0),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 0,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:true,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            if (typeof point === 'object' && typeof point.data === 'object'){\n              return (\n                <CustomTooltip\n                  point={point}\n                >\n                  <CustomTooltipRow\n                    label={point.serieId}\n                    color={point.serieColor}\n                    value={point.data.yFormatted}\n                  />\n                  {\n                    point.data.allocations && typeof point.data.allocations === 'object' &&\n                      Object.keys(point.data.allocations).map(protocolName => {\n                        const protocolInfo = globalConfigs.stats.protocols[protocolName];\n                        const protocolColor = 'hsl('+protocolInfo.color.hsl.join(',')+')';\n                        const protocolAllocation = point.data.allocations[protocolName];\n                        const protocolAllocationFormatted = this.functionsUtil.formatMoney(protocolAllocation,protocolAllocation<1 ? 3 : 0);\n                        const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                        return (\n                          <CustomTooltipRow\n                            color={protocolColor}\n                            label={protocolInfo.label}\n                            key={`${point.id}_${protocolName}`}\n                            value={`${protocolAllocationFormatted} (${protocolAllocationPerc})`}\n                          />\n                        );\n                      })\n                  }\n                </CustomTooltip>\n              );\n              /*\n              return (\n                <div\n                    key={point.id}\n                    style={{\n                      background: 'white',\n                      color: 'inherit',\n                      fontSize: 'inherit',\n                      borderRadius: '2px',\n                      boxShadow: 'rgba(0, 0, 0, 0.25) 0px 1px 2px',\n                      padding: '5px 9px'\n                    }}\n                >\n                  <div>\n                    <table style={{width:'100%',borderCollapse:'collapse'}}>\n                      <tbody>\n                        <tr>\n                          <td style={{padding:'3px 5px'}}>\n                            <span style={{display:'block', width: '12px', height: '12px', background: point.serieColor}}></span>\n                          </td>\n                          <td style={{padding:'3px 5px'}}>{point.serieId}</td>\n                          <td style={{padding:'3px 5px'}}><strong>{point.data.yFormatted}</strong></td>\n                        </tr>\n                        {\n                          point.data.allocations && typeof point.data.allocations === 'object' &&\n                            Object.keys(point.data.allocations).map(protocolName => {\n                              const protocolColor = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n                              const protocolAllocation = this.functionsUtil.formatMoney(point.data.allocations[protocolName],0);\n                              const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                              return (\n                                <tr key={`${point.id}_${protocolName}`}>\n                                  <td style={{padding:'3px 5px'}}>\n                                    <span style={{display:'block', width: '12px', height: '12px', background: protocolColor}}></span>\n                                  </td>\n                                  <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{protocolName}</td>\n                                  <td style={{padding:'3px 5px'}}><strong>{protocolAllocation}</strong> ({protocolAllocationPerc})</td>\n                                </tr>\n                              );\n                            })\n                        }\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              );\n              */\n            }\n\n            return null;\n          }\n        };\n      break;\n      case 'ALL':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\");\n\n          let row = {\n            date\n          };\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const foundProtocol = this.props.tokenConfig.protocols.find((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() });\n            if (foundProtocol){\n              const protocolInfo = globalConfigs.stats.protocols[foundProtocol.name];\n              if (!protocolPaused){\n                let allocation = parseFloat(this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals));\n                keys[protocolInfo.label] = 1;\n                row[protocolInfo.label] = allocation;\n                row[`${protocolInfo.label}Color`] = 'hsl('+protocolInfo.color.hsl.join(',')+')';\n                // console.log(protocolInfo.label,this.functionsUtil.BNify(protocolData.allocation).toString(),this.props.tokenConfig.decimals,allocation);\n                maxChartValue = Math.max(maxChartValue,allocation);\n              } else {\n                row[protocolInfo.label] = 0;\n              }\n            }\n          });\n\n\n          tempData[date] = row;\n        });\n\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n            orient: 'left',\n            tickSize: 0,\n            tickPadding: 10,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            tickValues:gridYValues,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickSize: 0,\n            tickPadding: 10,\n            orient: 'bottom-left',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days'\n          },\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            tooltip: {\n              container:{\n                padding:'0',\n                boxShadow:'none',\n                background:'transparent',\n              },\n              tableCell:{\n                padding:'0'\n              }\n            },\n            axis: {\n              ticks: {\n                text: {\n                  fontSize:this.props.isMobile ? 12 : 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize:this.props.isMobile ? 12 : 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 60 },\n          tooltip:({ id, value, color }) => {\n            const allocation = this.functionsUtil.formatMoney(value,0);\n            return (\n              <DashboardCard\n                cardProps={{\n                  py:1,\n                  px:2,\n                  width:1,\n                }}\n              >\n                <table\n                  style={{width:'100%',borderCollapse:'collapse'}}\n                >\n                  <tbody>\n                    <tr>\n                      <td style={{padding:'3px 5px'}}>\n                        <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                      </td>\n                      <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                      <td style={{padding:'3px 5px'}}><strong>{allocation} {this.props.selectedToken}</strong></td>\n                    </tr>\n                  </tbody>\n                </table>\n              </DashboardCard>\n            )\n          }\n        }\n      break;\n      case 'ALL_PERC':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\")\n          let row = {\n            date:moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\")\n          };\n          if (tempData[date]){\n            row = tempData[date];\n          }\n\n          const totalAllocation = d.protocolsData.reduce((accumulator,protocolAllocation) => {\n            const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n            return this.functionsUtil.BNify(accumulator).plus(allocation);\n          },0);\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const protocolName = this.props.tokenConfig.protocols.filter((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() })[0].name;\n            if (!protocolPaused){\n              const allocation = this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals);\n              const allocationPerc = parseFloat(allocation.div(totalAllocation).times(100));\n              keys[protocolName] = 1;\n              row[protocolName] = allocationPerc;\n              row[`${protocolName}Color`] = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n            } else if (typeof row[protocolName] !== undefined) {\n              row[protocolName] = 0;\n            } \n          });\n          \n          tempData[date] = row;\n        });\n\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          data: chartData,\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 40, bottom: 40, left: 60 },\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => parseInt(v)+'%'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            orient: 'bottom',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days'\n          },\n          tooltip:({ id, value, color }) => {\n            const allocation = parseInt(value)===100 ? this.functionsUtil.formatMoney(value,0) : this.functionsUtil.formatMoney(value,2);\n            return (\n              <table style={{width:'100%',borderCollapse:'collapse'}}>\n                <tbody>\n                  <tr>\n                    <td style={{padding:'3px 5px'}}>\n                      <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                    </td>\n                    <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                    <td style={{padding:'3px 5px'}}><strong>{allocation}%</strong></td>\n                  </tr>\n                </tbody>\n              </table>\n            )\n          }\n        }\n      break;\n      case 'APR':\n\n        maxChartValue = 0;\n\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n          if (!protocolInfo.enabled){\n            return;\n          }\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n          chartData.push({\n            id:protocolInfo.label,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                let protocolRate = this.functionsUtil.BNify(protocolAllocation.rate);\n                const protocolPaused = protocolRate.eq(0);\n                if (!protocolPaused){\n\n                  // Aave V1 wrong rate FIX\n                  if (protocolRate.lt(0) && protocolAllocation.aaveAdditionalAPR && this.functionsUtil.BNify(protocolAllocation.aaveAdditionalAPR).gt(0)){\n                    protocolRate = protocolRate.plus(this.functionsUtil.BNify(protocolAllocation.aaveAdditionalAPR));\n                  }\n\n                  protocolRate = this.functionsUtil.fixTokenDecimals(protocolRate,18);\n\n                  const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                  const y = parseFloat(protocolRate);\n\n                  maxChartValue = Math.max(maxChartValue,y);\n\n                  return { x, y };\n                }\n                return undefined;\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color:'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data:apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(this.functionsUtil.fixTokenDecimals(d.idleRate,18));\n            maxChartValue = Math.max(maxChartValue,y);\n            return { x, y };\n          })\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(2)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    // const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'SCORE':\n\n        let prevValue = 0;\n        maxChartValue = 0;\n\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n          if (!protocolInfo.enabled){\n            return;\n          }\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n          chartData.push({\n            id:protocolInfo.label,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(protocolAllocation.defiScore);\n\n                y = isNaN(y) || !y ? prevValue : y;\n                prevValue = y;\n                maxChartValue = Math.max(maxChartValue,y);\n\n                return { x, y };\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            let y = parseFloat(d.idleScore);\n            y = isNaN(y) || !y ? prevValue : y;\n            prevValue = y;\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x, y };\n          })\n        });\n\n        // debugger;\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(1),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 0,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE_V4':\n\n        itemIndex = 0;\n        maxChartValue = 0;\n        // let prevApy = null;\n        let prevApr = null;\n        let prevData = null;\n        let avgApy = this.functionsUtil.BNify(0);\n        let startBalance = this.functionsUtil.BNify(1);\n        let currentBalance = this.functionsUtil.BNify(1);\n\n        // console.log('PRICE_V4',apiResults);\n\n        idleChartData = [];\n\n        apiResults.forEach((d,i) => {\n\n          let y = 0;\n          let apy = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n          const apr = this.functionsUtil.fixTokenDecimals(d.idleRate,18).div(100);\n          // const apy = this.functionsUtil.apr2apy(apr);\n          \n          avgApy = avgApy.plus(apr.times(100));\n\n          if (prevApr){\n            const days = (d.timestamp-prevData.timestamp)/86400;\n            // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n            const earnings = currentBalance.times(prevApr.times(days).div(365));\n            currentBalance = currentBalance.plus(earnings);\n\n            const earning = currentBalance.div(startBalance).minus(1).times(100);\n            y = parseFloat(earning);\n\n            // apy = earning.times(365).div(totDays).toFixed(2);\n            apy = avgApy.div(i+1).toFixed(2);\n          }\n\n          prevData = d;\n          // prevApy = apy;\n          prevApr = apr;\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          if (apy>0){\n            idleChartData.push({ x, y, apy, blocknumber, itemPos });\n          }\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        protocols.forEach( p => {\n\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n\n          if (!protocolInfo.enabled || (protocolInfo.startTimestamp && this.functionsUtil.strToMoment(protocolInfo.startTimestamp).isAfter(Date.now()))){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          // prevApy = null;\n          prevApr = null;\n          prevData = null;\n          let baseProfit = 0;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n          avgApy = this.functionsUtil.BNify(0);\n          startBalance = this.functionsUtil.BNify(1);\n          currentBalance = this.functionsUtil.BNify(1);\n          const apiResults_filtered = apiResults.filter( d => (!protocolInfo.startTimestamp || moment(protocolInfo.startTimestamp).isSameOrBefore(moment(d.timestamp*1000))) );\n\n          apiResults_filtered.forEach( (d,i) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              let protocolRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n                if (protocolData[field]){\n                  return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(protocolData[field]));\n                }\n                return this.functionsUtil.BNify(acc);\n              },0) : this.functionsUtil.BNify(protocolData[rateField]);\n\n              // Aave V1 wrong rate FIX\n              if (protocolRate.lt(0) && protocolData.aaveAdditionalAPR && this.functionsUtil.BNify(protocolData.aaveAdditionalAPR).gt(0)){\n                protocolRate = protocolRate.plus(this.functionsUtil.BNify(protocolData.aaveAdditionalAPR));\n              }\n\n              const protocolPaused = protocolRate.eq(0);\n              if (!protocolPaused){\n\n                let rowData = {};\n\n                let y = 0;\n                let apy = 0;\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                const apr = this.functionsUtil.fixTokenDecimals(protocolRate,18).div(100);\n\n                avgApy = avgApy.plus(apr.times(100));\n                // const apy = this.functionsUtil.apr2apy(apr);\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null) {\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => (d1.blocknumber>=firstProtocolBlock) );\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                      y = baseProfit;\n                      apy = avgApy.toFixed(2);\n                    }\n                  }\n                }\n\n                if (prevData) {\n                  const days = (d.timestamp-prevData.timestamp)/86400;\n                  // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n                  const earnings = currentBalance.times(prevApr.times(days).div(365));\n                  currentBalance = currentBalance.plus(earnings);\n\n                  const earning = currentBalance.div(startBalance).minus(1).times(100);\n                  y = parseFloat(earning)+baseProfit;\n\n                  apy = avgApy.div(i+1).toFixed(2);\n                }\n\n                prevData = d;\n                prevApr = apr;\n\n                if (firstIdleBlock === null){\n                  firstIdleBlock = parseInt(d.blocknumber);\n                }\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                const itemPos = Math.floor(itemIndex/totalItems*100);\n                // const blocknumber = d.blocknumber;\n\n                itemIndex++;\n\n                if (apy>0){\n                  rowData = {\n                    x,\n                    y,\n                    apy,\n                    itemPos\n                  };\n\n                  itemIndex++;\n                  chartRow.data.push(rowData);\n                }\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          data: idleChartData,\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')'\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              itemWidth: this.props.isMobile ? 70 : 160,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE':\n        // let prevTokenPrice = null;\n        maxChartValue = 0;\n        let firstTokenPrice = null;\n\n        idleChartData = apiResults.map((d,i) => {\n\n          let y = 0;\n          let apy = 0;\n          let days = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n          const tokenPrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n\n          if (!firstTokenPrice){\n            firstTokenPrice = tokenPrice;\n          } else {\n            y = parseFloat(tokenPrice.div(firstTokenPrice).minus(1).times(100));\n\n            days = (d.timestamp-apiResults[0].timestamp)/86400;\n            const earning = tokenPrice.div(firstTokenPrice).minus(1).times(100);\n            apy = earning.times(365).div(days).toFixed(2);\n\n            // console.log(firstTokenPrice.toString(),tokenPrice.toString(),earning.toString(),days,y,apy);\n          }\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          return { x, y, apy, blocknumber, itemPos };\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        await this.functionsUtil.asyncForEach(protocols,async (p) => {\n\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n\n          if (!protocolInfo.enabled){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          let baseProfit = 0;\n          firstTokenPrice = null;\n          let lastRowData = null;\n          let lastTokenPrice = null;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n\n          await this.functionsUtil.asyncForEach(apiResults,async (d) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData && protocolData[rateField]){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              const protocolPaused = this.functionsUtil.BNify(protocolData[rateField]).eq(0);\n              if (!protocolPaused){\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null){\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => {\n                      return d1.blocknumber>=firstProtocolBlock;\n                    });\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                    }\n                  }\n                }\n\n                let rowData = {};\n                let tokenExchangeRate = protocolData.price;\n                let tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n\n                // Take data from\n                if (protocolInfo && protocolInfo.data && protocolInfo.data[p.address.toLowerCase()] && protocolInfo.data[p.address.toLowerCase()][d.blocknumber]){\n                  tokenExchangeRate = this.functionsUtil.BNify(globalConfigs.stats.protocols[p.name].data[p.address.toLowerCase()][d.blocknumber]);\n                  tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                }/* else if (p.name === 'aave'){\n                  // Token holders (aDAI = 0xc025c03e10f656d3ee76685d53d236824d8ef3da , aUSDC = 0xd2c734fbd8f5d1c809185e014016dd4097e94711)\n                  let aaveTokenBalance = await this.functionsUtil.genericContractCall(p.token,'balanceOf',['0xd2c734fbd8f5d1c809185e014016dd4097e94711'],{},d.blocknumber);\n                  if (aaveTokenBalance){\n                    if (!Object.values(aave_data).length){\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(1,p.decimals);\n                      aave_data[d.blocknumber] = aaveTokenBalance.toString();\n                    } else {\n                      const firstBalance = Object.values(aave_data)[0];\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(this.functionsUtil.BNify(aaveTokenBalance).div(this.functionsUtil.BNify(firstBalance)).toFixed(p.decimals),p.decimals);\n                      aave_data[d.blocknumber] = tokenExchangeRate.toString();\n                    }\n                  }\n                }\n                */\n\n                let y = baseProfit;\n                let apy = 0;\n\n                if (!firstTokenPrice){\n                  firstTokenPrice = tokenPriceFixed;\n                } else {\n                  if (tokenPriceFixed.lt(lastTokenPrice)){\n                    firstTokenPrice = tokenPriceFixed;\n                    const lastYDiff = chartRow.data[chartRow.data.length-1].y-chartRow.data[chartRow.data.length-2].y;\n                    y = lastRowData.y+lastYDiff;\n                    baseProfit = y;\n                  } else {\n                    y += parseFloat(tokenPriceFixed.div(firstTokenPrice).minus(1).times(100));\n                  }\n\n                  const days = (d.timestamp-apiResults[0].timestamp)/86400;\n                  const earning = tokenPriceFixed.div(firstTokenPrice).minus(1).times(100);\n                  apy = earning.times(365).div(days).toFixed(2);\n                }\n\n                y = Math.max(0,y);\n                maxChartValue = Math.max(maxChartValue,y);\n\n                const itemPos = Math.floor(itemIndex/totalItems*100);\n\n                rowData = {\n                  x,\n                  y,\n                  apy,\n                  itemPos\n                };\n\n                itemIndex++;\n                lastRowData = rowData;\n                chartRow.data.push(rowData);\n                lastTokenPrice = tokenPriceFixed;\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: idleChartData\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              itemWidth: this.props.isMobile ? 70 : 100,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      chartType,\n      chartProps,\n      chartData\n    });\n  }\n\n  render() {\n    return(\n      <GenericChart\n        showLoader={true}\n        {...this.state.chartProps}\n        height={this.props.height}\n        type={this.state.chartType}\n        data={this.state.chartData}\n        width={this.state.chartWidth}\n        isMobile={this.props.isMobile}\n        parentId={this.props.parentId}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default StatsChart;","import { Flex, Text } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\n\nclass Rebalance extends Component {\n\n  state = {\n    loading:true,\n    processing:{\n      rebalance:{\n        txHash:null,\n        loading:false\n      },\n    },\n    shouldRebalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n  componentUnmounted = false;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillUnmount(){\n    this.componentUnmounted = true;\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.checkRebalance();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged || accountChanged){\n      this.checkRebalance();\n    }\n  }\n\n  async setStateSafe(newState,callback=null) {\n    if (!this.componentUnmounted){\n      return this.setState(newState,callback);\n    }\n    return null;\n  }\n\n  checkRebalance = async () => {\n    this.setStateSafe({\n      loading:true,\n    });\n\n    const shouldRebalance = await this.functionsUtil.checkRebalance(this.props.tokenConfig);\n\n    this.setStateSafe({\n      loading:false,\n      shouldRebalance\n    });\n  }\n\n  rebalance = async (e) => {\n    e.preventDefault();\n\n    const callback = (tx,error) => {\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: 'Rebalance',\n        eventAction: this.props.selectedToken,\n      };\n\n      let txDenied = false;\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      if (tx.status === 'success'){\n        // Toast message\n        window.toastProvider.addMessage(`Rebalance completed`, {\n          secondaryMessage: `Now the pool is balanced!`,\n          colorTheme: 'light',\n          actionHref: \"\",\n          actionText: \"\",\n          variant: \"success\",\n        });\n\n      } else if (!txDenied){\n        window.toastProvider.addMessage(`Rebalance error`, {\n          secondaryMessage: `The rebalance has failed, try again...`,\n          colorTheme: 'light',\n          actionHref: \"\",\n          actionText: \"\",\n          variant: \"failure\",\n        });\n      }\n\n      this.setStateSafe((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          rebalance:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n\n      this.checkRebalance();\n    }\n\n    const callback_receipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setStateSafe((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            rebalance:{\n              ...prevState.processing.rebalance,\n              txHash\n            }\n          }\n        })\n      );\n    };\n\n    this.props.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'rebalance', [], null , callback, callback_receipt);\n\n    this.setStateSafe({\n      processing:{\n        rebalance:{\n          txHash:null,\n          loading:true\n        }\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Flex\n        px={3}\n        width={1}\n        minHeight={'100px'}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n      {\n        this.state.loading ? (\n          <FlexLoader\n            flexProps={{\n              flexDirection:'row'\n            }}\n            loaderProps={{\n              size:'30px'\n            }}\n            textProps={{\n              ml:2\n            }}\n            text={'Checking rebalance...'}\n          />\n        ) : (\n          this.state.processing.rebalance.loading ? (\n            <TxProgressBar {...this.props} waitText={`Rebalance estimated in`} endMessage={`Finalizing rebalance request...`} hash={this.state.processing.rebalance.txHash} />\n          ) : (\n            <Flex\n              width={1}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                mt={0}\n                mb={3}\n                textAlign={'center'}\n              >\n                {this.state.shouldRebalance ? 'Rebalance the entire pool. All users will bless you.' : 'The pool is already balanced.'}\n              </Text>\n              <RoundButton\n                buttonProps={{\n                  width:'auto',\n                  disabled:!this.state.shouldRebalance\n                }}\n                handleClick={e => this.rebalance(e)}\n              >\n                Rebalance\n              </RoundButton>\n            </Flex>\n          )\n        )\n      }\n      </Flex>\n    )\n  }\n}\n\nexport default Rebalance;","import React from \"react\";\nimport {\n  Modal,\n  Button,\n  Flex,\n  Field,\n  Select\n} from \"rimble-ui\";\nimport moment from 'moment';\nimport ModalCard from './ModalCard';\nimport 'react-date-range/dist/styles.css';\nimport { DateRange } from 'react-date-range';\nimport 'react-date-range/dist/theme/default.css';\nimport './DateRangeModal.css';\n\nclass DateRangeModal extends React.Component {\n\n  state = {\n    quickSelection:'',\n    ranges:{\n      startDate: this.props.startDate ? this.props.startDate : new Date(),\n      endDate: this.props.endDate ? this.props.endDate : new Date(),\n      key: 'selection'\n    }\n  }\n\n  handleSelect(ranges){\n    this.setState({\n      quickSelection:'',\n      ranges:ranges.selection\n    });\n  }\n\n  handleQuickSelect(e){\n    let startDate = null;\n    let endDate = moment(new Date());\n    const quickSelection = e.target.value;\n\n    switch (quickSelection){\n      case 'day':\n        startDate = endDate.clone().subtract(1,'day');\n      break;\n      case 'week':\n        startDate = endDate.clone().subtract(1,'week');\n      break;\n      case 'weeks':\n        startDate = endDate.clone().subtract(2,'week');\n      break;\n      case 'month':\n        startDate = endDate.clone().subtract(1,'month');\n      break;\n      default:\n        startDate = null;\n        endDate = null;\n      break;\n    }\n\n    if (startDate && endDate){\n      startDate = startDate._d;\n      endDate = endDate._d;\n\n      const ranges = {\n        startDate,\n        endDate,\n        key:'selection'\n      };\n\n      this.setState({\n        ranges,\n        quickSelection\n      }, () => {\n        this.closeModal();\n      });\n    }\n  }\n\n  componentDidUpdate = (prevProps) => {\n    if (prevProps.startDate !== this.props.startDate || prevProps.endDate !== this.props.endDate){\n      this.setState({\n        ranges:{\n          startDate: this.props.startDate ? this.props.startDate : new Date(),\n          endDate: this.props.endDate ? this.props.endDate : new Date(),\n          key: 'selection'\n        }\n      });\n    }\n  }\n\n  closeModal(){\n    const newState = this.props.handleSelect(this.state.ranges,this.state.quickSelection);\n    const ranges = {\n      startDate:newState.startTimestampObj ? newState.startTimestampObj._d : new Date(),\n      endDate:newState.endTimestampObj ? newState.endTimestampObj._d : new Date(),\n      key: 'selection'\n    };\n    this.setState({\n      ranges\n    });\n    this.props.closeModal();\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        <ModalCard closeFunc={this.props.closeModal}>\n          <ModalCard.Header title={'Select Date Range'}>\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex width={1} flexDirection={'column'} alignItems={'center'}>\n              <Field label=\"Quick Date Selection\" style={{display:'flex',width:'100%',alignItems:'stretch',justifyContent:'center'}}>\n                <Select\n                  style={{\n                    fontSize:'14px',\n                    height:'2.5em',\n                    boxShadow:'none',\n                    color:this.props.theme.colors.counter,\n                    backgroundColor:this.props.theme.colors.cardBg\n                  }}\n                  width={'100%'}\n                  required={true}\n                  onChange={this.handleQuickSelect.bind(this)}\n                  value={this.state.quickSelection}\n                  options={[\n                    { value: '', label: \"Select an option\" },\n                    { value: \"day\", label: \"Last day\" },\n                    { value: \"week\", label: \"Last week\" },\n                    { value: \"weeks\", label: \"Last 2 weeks\" },\n                    { value: \"month\", label: \"Last month\" }\n                  ]}\n                />\n              </Field>\n              <DateRange\n                ranges={[this.state.ranges]}\n                minDate={this.props.minDate}\n                maxDate={this.props.maxDate}\n                className={this.props.themeMode}\n                onChange={this.handleSelect.bind(this)}\n              />\n            </Flex>\n          </ModalCard.Body>\n          <ModalCard.Footer>\n            <Flex px={[2,0]} flexDirection={['column', 'row']} width={1} justifyContent={'center'}>\n              <Button\n                my={2}\n                mx={[0, 2]}\n                borderRadius={4}\n                mainColor={'blue'}\n                onClick={ e => this.closeModal(e) }\n                size={this.props.isMobile ? 'small' : 'medium'}\n              >\n              APPLY\n              </Button>\n            </Flex>\n          </ModalCard.Footer>\n        </ModalCard>\n      </Modal>\n    );\n  }\n\n}\n\nexport default DateRangeModal;","import { Flex } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\n\nclass ExecuteTransaction extends Component {\n\n  state = {\n    txStatus:null,\n    processing:{\n      txHash:null,\n      loading:false\n    }\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  execute(){\n\n    const callback = (tx,error) => {\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Transaction',\n        eventLabel: this.props.methodName,\n        eventAction: this.props.contractName\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      const txSucceeded = tx.status === 'success';\n      if (txSucceeded){\n        if (typeof this.props.callback === 'function'){\n          this.props.callback();\n        }\n      }\n\n      this.setState({\n        txStatus:tx.status,\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      });\n    };\n\n    const callbackReceipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        txStatus:'processing',\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    this.functionsUtil.contractMethodSendWrapper(this.props.contractName,this.props.methodName,this.props.params,callback,callbackReceipt);\n\n    this.setState((prevState) => ({\n      txStatus:'loading',\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  render() {\n    const ExecuteComponent = this.props.Component;\n    return (\n      <Flex\n        {...this.props.parentProps}\n      >\n        {\n          this.state.txStatus === 'success' && this.props.children ?\n            this.props.children\n          : this.state.processing && this.state.processing.loading ? (\n            <TxProgressBar\n              web3={this.props.web3}\n              network={this.props.network}\n              {...this.props.progressBarProps}\n              hash={this.state.processing.txHash}\n              waitText={`${this.props.action} estimated in`}\n              cancelTransaction={this.cancelTransaction.bind(this)}\n              endMessage={`Finalizing ${this.props.action} request...`}\n            />\n          ) : (\n            <ExecuteComponent\n              onClick={this.execute.bind(this)}\n              {...this.props.componentProps}\n            >\n              {this.props.componentProps.value}\n            </ExecuteComponent>\n          )\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default ExecuteTransaction;\n","import moment from 'moment';\nimport Title from '../Title/Title';\nimport StatsChart from './StatsChart';\nimport React, { Component } from 'react';\nimport Rebalance from '../Rebalance/Rebalance';\nimport StatsCard from '../StatsCard/StatsCard';\nimport AssetsList from '../AssetsList/AssetsList';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport GenericSelector from '../GenericSelector/GenericSelector';\nimport RoundIconButton from '../RoundIconButton/RoundIconButton';\nimport VariationNumber from '../VariationNumber/VariationNumber';\nimport AllocationChart from '../AllocationChart/AllocationChart';\nimport DateRangeModal from '../utilities/components/DateRangeModal';\nimport { Flex, Text, Heading, Box, Icon, Button, Link } from 'rimble-ui';\nimport ExecuteTransaction from '../ExecuteTransaction/ExecuteTransaction';\nimport AssetsUnderManagement from '../AssetsUnderManagement/AssetsUnderManagement';\n\nclass Stats extends Component {\n  state = {\n    aum:null,\n    apr:null,\n    days:'-',\n    delta:null,\n    earning:null,\n    minDate:null,\n    maxDate:null,\n    carouselMax:1,\n    rebalances:'-',\n    buttonGroups:[],\n    apiResults:null,\n    carouselIndex:0,\n    idleVersion:null,\n    statsVersions:{},\n    minStartTime:null,\n    endTimestamp:null,\n    showAdvanced:true,\n    govTokensPool:null,\n    unlentBalance:null,\n    quickSelection:null,\n    startTimestamp:null,\n    endTimestampObj:null,\n    shouldRebalance:null,\n    carouselOffsetLeft:0,\n    startTimestampObj:null,\n    showRefreshIdleSpeed:false,\n    apiResults_unfiltered:null,\n    dateRangeModalOpened:false\n  };\n\n  quickSelections = {\n    day:'Last day',\n    week:'Last week',\n    weeks:'Last 2 weeks',\n    month:'Last month'\n  };\n\n  // Utils\n  functionsUtil = null;\n  componentUnmounted = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount() {\n    this.loadUtils();\n    await this.loadParams();\n  }\n\n  componentWillUnmount(){\n    this.componentUnmounted = true;\n  }\n\n  async setStateSafe(newState,callback=null) {\n    if (!this.componentUnmounted){\n      return this.setState(newState,callback);\n    }\n    return null;\n  }\n\n  showRefreshIdleSpeed(){\n    this.setState({\n      showRefreshIdleSpeed:true\n    });\n  }\n\n  getLatestAvailableVersion(){\n    const statsVersions = globalConfigs.stats.versions;\n    let latestVersion = null;\n    Object.keys(statsVersions).forEach( version => {\n      const versionInfo = statsVersions[version];\n      if (versionInfo.enabledStrategies.includes(this.props.selectedStrategy)){\n        latestVersion = version;\n      }\n    });\n\n    return latestVersion;\n  }\n\n  getVersionInfo(version){\n    if (!version){\n      version = this.state.idleVersion;\n    }\n\n    if (!globalConfigs.stats.versions[version]){\n      return null;\n    }\n\n    const versionInfo = Object.assign({},globalConfigs.stats.versions[version]);\n\n    if (versionInfo.strategiesParams && versionInfo.strategiesParams[this.props.selectedStrategy]){\n      const versionInfoExtra = versionInfo.strategiesParams[this.props.selectedStrategy];\n      Object.keys(versionInfoExtra).forEach( param => {\n        versionInfo[param] = versionInfoExtra[param];\n      });\n    }\n\n    return versionInfo;\n  }\n\n  async loadParams() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    const newState = {};\n    const { match: { params } } = this.props;\n\n    const currentNetworkAvailableTokens = Object.keys(this.props.availableTokens);\n\n    if (!!params.customToken && currentNetworkAvailableTokens.indexOf(params.customToken.toUpperCase()) !== -1 ){\n      newState.selectedToken = params.customToken.toUpperCase();\n    } else {\n      newState.selectedToken = this.props.selectedToken.toUpperCase();\n    }\n\n    newState.tokenConfig = this.props.availableTokens[newState.selectedToken];\n    newState.minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp,'YYYY-MM-DD');\n    newState.maxEndDate = moment();\n\n    newState.endTimestampObj = moment(moment().format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    newState.latestVersion = this.getLatestAvailableVersion();\n    newState.idleVersion = this.state.idleVersion === null ? newState.latestVersion : this.state.idleVersion;\n\n    const versionInfo = this.getVersionInfo(newState.idleVersion);\n\n    // console.log('loadParams',newState.latestVersion,newState.idleVersion,versionInfo);\n\n    if (newState.idleVersion && versionInfo.endTimestamp){\n      const newEndTimestampObj = moment(moment(versionInfo.endTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.endTimestampObj.isAfter(newEndTimestampObj)){\n        newState.endTimestampObj = newEndTimestampObj;\n        newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n      }\n\n      if (!newState.maxEndDate || newState.maxEndDate.isAfter(newEndTimestampObj)){\n        newState.maxEndDate = newEndTimestampObj;\n      }\n    }\n\n    newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n\n    // Set start date\n    newState.startTimestampObj = newState.endTimestampObj.clone().subtract(1,'month');\n    newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n\n    if (newState.idleVersion && versionInfo.startTimestamp){\n      const newStartTimestampObj = moment(moment(versionInfo.startTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.startTimestampObj.isBefore(newStartTimestampObj)){\n        newState.startTimestampObj = newStartTimestampObj;\n        newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n      }\n\n      if (newState.minStartTime.isBefore(newStartTimestampObj)){\n        newState.minStartTime = newStartTimestampObj;\n      }\n    }\n\n    newState.minDate = newState.minStartTime._d;\n    newState.maxDate = newState.maxEndDate._d;\n\n    if (newState !== this.state){\n      await this.setStateSafe(newState);\n    }\n  }\n\n  setDateRange = (ranges,quickSelection=null) => {\n\n    const minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp);\n\n    let startTimestampObj = moment(ranges.startDate).isSameOrAfter(minStartTime) ? moment(ranges.startDate) : minStartTime;\n    let endTimestampObj = moment(ranges.endDate);\n\n    if (startTimestampObj.isSame(endTimestampObj)){\n      endTimestampObj.add(1,'day');\n    }\n\n    endTimestampObj = moment(endTimestampObj.format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    if (startTimestampObj.isBefore(this.state.minStartTime)){\n      startTimestampObj = this.state.minStartTime;\n    }\n\n    if (endTimestampObj.isAfter(this.state.maxEndDate)){\n      endTimestampObj = this.state.maxEndDate;\n    }\n\n    const startTimestamp = parseInt(startTimestampObj._d.getTime()/1000);\n    const endTimestamp = parseInt(endTimestampObj._d.getTime()/1000);\n\n    const newState = {\n      minStartTime,\n      endTimestamp,\n      quickSelection,\n      startTimestamp,\n      endTimestampObj,\n      startTimestampObj\n    };\n\n    this.setStateSafe(newState);\n\n    return newState;\n  }\n\n  toggleAdvancedCharts = (e) => {\n    e.preventDefault();\n    this.setStateSafe({\n      showAdvanced:!this.state.showAdvanced\n    });\n  }\n\n  setDateRangeModal = (dateRangeModalOpened) => {\n    if (dateRangeModalOpened !== this.state.dateRangeModalOpened){\n      this.setStateSafe({\n        dateRangeModalOpened\n      });\n    }\n  }\n\n  async componentDidMount() {\n\n    if (!this.props.web3){\n      this.props.initWeb3();\n      return false;\n    }\n\n    /*\n    const style = document.createElement('style');\n    style.id = 'crisp-custom-style';\n    style.type = 'text/css';\n    style.innerHTML = `\n    .crisp-client{\n      display:none !important;\n    }`;\n    document.body.appendChild(style);\n    */\n\n    this.loadUtils();\n    await this.loadParams();\n    this.loadApiData();\n    this.loadCarousel();\n  }\n\n  loadCarousel(){\n    const carouselMax = this.props.isMobile ? 3 : 2;\n    this.setStateSafe({\n      carouselMax\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const strategyChanged = prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    const dateChanged = prevState.startTimestamp !== this.state.startTimestamp || prevState.endTimestamp !== this.state.endTimestamp;\n    const versionChanged = prevState.idleVersion !== this.state.idleVersion;\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n\n    if (mobileChanged){\n      this.loadCarousel();\n    }\n\n    if (contractsInitialized || tokenChanged || strategyChanged || versionChanged){\n      // console.log('componentDidUpdate',this.props.selectedStrategy,this.props.selectedToken);\n      await this.componentDidMount();\n    } else if (dateChanged){\n      this.loadApiData();\n    }\n  }\n\n  filterTokenData = (apiResults) => {\n    return apiResults.filter((r,i) => {\n      return (!this.state.startTimestamp || r.timestamp >= this.state.startTimestamp) && (!this.state.endTimestamp || r.timestamp <= this.state.endTimestamp);\n    });\n  }\n\n  setIdleVersion = idleVersion => {\n    this.setStateSafe({\n      idleVersion\n    });\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    // Get COMP APR\n    // const compAPR = await this.functionsUtil.getCompAPR(this.props.tokenConfig);\n    // console.log('compAPR',compAPR.toString());\n\n    const startTimestamp = this.state.minDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.minDate).format('DD/MM/YYYY 00:00:00'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n    const endTimestamp = this.state.maxDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.maxDate).format('DD/MM/YYYY 23:59:59'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n\n    const isRisk = ['v3','v4'].includes(this.state.idleVersion) && this.props.selectedStrategy === 'risk';\n    let apiResults_unfiltered = await this.functionsUtil.getTokenApiData(this.props.tokenConfig.address,isRisk,startTimestamp,endTimestamp,true,7200);\n\n    const apiResults = this.filterTokenData(apiResults_unfiltered);\n\n    // console.log('loadApiData',startTimestamp,endTimestamp,new Date(startTimestamp*1000),new Date(endTimestamp*1000),apiResults,apiResults_unfiltered);\n\n    if (!apiResults || !apiResults_unfiltered || !apiResults.length || !apiResults_unfiltered.length){\n      return false;\n    }\n\n    const firstResult = apiResults[0];\n    const lastResult = Object.values(apiResults).pop();\n\n    window.moment = moment;\n\n    let days = (lastResult.timestamp-firstResult.timestamp)/86400;\n    if (days === 0){\n      days = 1;\n    }\n\n    let apr = null;\n    let delta = 'N/A';\n\n    const idleTokens = this.functionsUtil.fixTokenDecimals(lastResult.idleSupply,18);\n    const firstIdlePrice = this.functionsUtil.fixTokenDecimals(firstResult.idlePrice,this.props.tokenConfig.decimals);\n    const lastIdlePrice = this.functionsUtil.fixTokenDecimals(lastResult.idlePrice,this.props.tokenConfig.decimals);\n\n    // Calculate AUM\n    let aum = idleTokens.times(lastIdlePrice);\n\n    // Convert Token balance\n    aum = await this.functionsUtil.convertTokenBalance(aum,this.props.selectedToken,this.props.tokenConfig,isRisk);\n\n    const compoundInfo = this.props.tokenConfig.protocols.filter((p) => { return p.name === 'compound' })[0];\n    const firstCompoundData = compoundInfo ? firstResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n    const lastCompoundData = compoundInfo ? lastResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n\n    if (this.state.idleVersion === 'v4') {\n\n      apr = apiResults.reduce( (sum,r) => {\n        const idleRate = this.functionsUtil.fixTokenDecimals(r.idleRate,18);\n        return this.functionsUtil.BNify(sum).plus(idleRate);\n      },0);\n\n      // Calculate average\n      apr = apr.div(apiResults.length);\n\n      if (compoundInfo){\n        const compoundWithCOMPInfo = globalConfigs.stats.protocols.compoundWithCOMP;\n        const rateField = compoundWithCOMPInfo.rateField ? compoundWithCOMPInfo.rateField : 'rate';\n\n        let compoundAvgApr = apiResults.reduce( (sum,r) => {\n\n          const compoundData = r.protocolsData.find((pData,x) => {\n            return pData.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase()\n          });\n\n          let compoundRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n            if (compoundData && compoundData[field]){\n              return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(compoundData[field]));\n            }\n            return this.functionsUtil.BNify(acc);\n          },0) : this.functionsUtil.BNify(compoundData[rateField]);\n\n          compoundRate = this.functionsUtil.fixTokenDecimals(compoundRate,18);\n\n          return this.functionsUtil.BNify(sum).plus(compoundRate);\n        },0);\n\n        // Calculate average\n        compoundAvgApr = compoundAvgApr.div(apiResults.length);\n\n        // compoundAvgApr = this.functionsUtil.apr2apy(compoundAvgApr.div(100)).times(100);\n        // apr = this.functionsUtil.apr2apy(apr.div(100)).times(100);\n\n        delta = apr.minus(compoundAvgApr);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n\n      apr = apr.toFixed(2);\n\n    } else {\n      const earning = lastIdlePrice.div(firstIdlePrice).minus(1).times(100);\n      apr = earning.times(365).div(days).toFixed(2);\n\n      if (firstCompoundData && lastCompoundData){\n        const firstCompoundPrice = this.functionsUtil.fixTokenDecimals(firstCompoundData.price,this.props.tokenConfig.decimals);\n        const lastCompoundPrice = this.functionsUtil.fixTokenDecimals(lastCompoundData.price,this.props.tokenConfig.decimals);\n        const compoundApr = lastCompoundPrice.div(firstCompoundPrice).minus(1).times(100);\n        delta = earning.minus(compoundApr).times(365).div(days);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n    }\n\n    // Count rebalances\n    let rebalances = 0;\n    apiResults.forEach((row,index) => {\n      if (index){\n        const prevRow = apiResults[index-1];\n\n        const totalAllocation = row.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        const prevTotalAllocation = prevRow.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        let hasRebalanced = false;\n        row.protocolsData.forEach( p => {\n          if (hasRebalanced){\n            return;\n          }\n          const prevP = prevRow.protocolsData.find( prevP => (prevP.protocolAddr.toLowerCase() === p.protocolAddr.toLowerCase()) );\n          const allocation = this.functionsUtil.fixTokenDecimals(p.allocation,this.props.tokenConfig.decimals);\n          const prevAllocation = prevP ? this.functionsUtil.fixTokenDecimals(prevP.allocation,this.props.tokenConfig.decimals) : this.functionsUtil.BNify(0);\n          const allocationPerc = parseInt(parseFloat(allocation.div(totalAllocation).times(100)));\n          const prevAllocationPerc = parseInt(parseFloat(prevAllocation.div(prevTotalAllocation).times(100)));\n          if (allocationPerc!==prevAllocationPerc){\n            rebalances++;\n            hasRebalanced = true;\n          }\n        });\n      }\n    });\n\n    // Add gov tokens balance to AUM\n    const availableTokens = {};\n    availableTokens[this.props.selectedToken] = this.props.tokenConfig;\n    const govTokensPool = await this.functionsUtil.getGovTokenPool(null,availableTokens,'DAI');\n    if (govTokensPool){\n      aum = aum.plus(govTokensPool);\n    }\n\n    // Format AUM\n    /*\n    aum = this.functionsUtil.formatMoney(parseFloat(aum));\n\n    const conversionRateField = this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'conversionRateField']);\n    if (conversionRateField){\n      aum += ' $';\n    }\n    */\n\n    let unlentBalance = await this.functionsUtil.getUnlentBalance(this.props.tokenConfig);\n    if (unlentBalance){\n      unlentBalance = this.functionsUtil.formatMoney(parseFloat(unlentBalance));\n    }\n\n    this.setStateSafe({\n      aum,\n      apr,\n      days,\n      delta,\n      apiResults,\n      rebalances,\n      govTokensPool,\n      unlentBalance,\n      apiResults_unfiltered\n    });\n  }\n\n  selectToken = async (strategy,token) => {\n    await this.props.setStrategyToken(strategy,token);\n    this.props.changeToken(token);\n  }\n\n  handleCarousel = action => {\n    let carouselIndex = this.state.carouselIndex;\n    if (action==='next' && carouselIndex<this.state.carouselMax){\n      carouselIndex++;\n    } else if (action==='back' && carouselIndex>0){\n      carouselIndex--;\n    }\n\n    const $element = window.jQuery(`#carousel-cursor > div:eq(${carouselIndex})`);\n    const carouselOffsetLeft = -parseFloat($element.position().left)+'px';\n\n    this.setStateSafe({\n      carouselIndex,\n      carouselOffsetLeft\n    });\n  }\n\n  render() {\n\n    const valueProps = {\n      lineHeight:1,\n      fontSize:[4,5],\n      fontWeight:[3,4],\n      color:'statValue'\n    };\n\n    const unitProps = {\n      ml:2,\n      lineHeight:1,\n      fontWeight:[2,3],\n      color:'statValue',\n      fontSize:[3,'23px'],\n    };\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const apyLong = this.functionsUtil.getGlobalConfig(['messages','apyLong']);\n\n    if (!this.props.availableStrategies){\n      return (\n        <FlexLoader\n          textProps={{\n            textSize:4,\n            fontWeight:2\n          }}\n          loaderProps={{\n            mb:3,\n            size:'40px'\n          }}\n          flexProps={{\n            minHeight:'50vh',\n            flexDirection:'column'\n          }}\n          text={'Loading assets...'}\n        />\n      );\n    }\n\n    const statsTokens = this.functionsUtil.getGlobalConfig(['stats','tokens']);\n\n    if (!this.props.selectedToken){\n      const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n      const enabledTokens = [];\n      const statsProtocols = this.functionsUtil.getGlobalConfig(['stats','protocols']);\n\n      Object.keys(statsTokens).forEach(token => {\n        const tokenInfo = statsTokens[token];\n        if (tokenInfo.enabled){\n          enabledTokens.push(token);\n        }\n      });\n      return (\n        <Flex\n          mb={3}\n          width={1}\n          flexDirection={'column'}\n        >\n          <AssetsUnderManagement\n            {...this.props}\n            loaderAlign={'flex-end'}\n          />\n          {\n            Object.keys(strategies).map(strategy => {\n              const strategyInfo = strategies[strategy];\n              const availableTokens = this.props.availableStrategies[strategy];\n\n              if (!availableTokens){\n                return false;\n              }\n              \n              // Get available protocols name\n              const availableProtocolsKeys = [];\n              Object.keys(availableTokens).forEach( token => {\n                availableTokens[token].protocols.forEach( protocolInfo => {\n                  if (availableProtocolsKeys.indexOf(protocolInfo.name)<0){\n                    availableProtocolsKeys.push(protocolInfo.name);\n                  }\n                });\n              });\n\n              const availableProtocols = availableProtocolsKeys.map( protocolName => {\n                return statsProtocols[protocolName];\n              },{});\n\n              return (\n                <Box\n                  mb={2}\n                  width={1}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                  key={`strategy-container-${strategy}`}\n                >\n                  <Title\n                    mt={3}\n                    mb={[3,4]}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'baseline'}\n                      justifyContent={'center'}\n                    >\n                      {strategyInfo.title}\n                      {\n                        strategyInfo.titlePostfix &&\n                          <Text\n                            ml={2}\n                            fontWeight={3}\n                            fontSize={[2,4]}\n                            color={'dark-gray'}\n                          >\n                            {strategyInfo.titlePostfix}\n                          </Text>\n                      }\n                    </Flex>\n                  </Title>\n                  <AssetsList\n                    enabledTokens={enabledTokens}\n                    handleClick={(props) => this.selectToken(strategy,props.token)}\n                    cols={[\n                      {\n                        title:'CURRENCY',\n                        props:{\n                          width:[0.26,0.15]\n                        },\n                        fields:[\n                          {\n                            name:'icon',\n                            props:{\n                              mr:2,\n                              height:['1.4em','2.3em']\n                            }\n                          },\n                          {\n                            name:'tokenName'\n                          }\n                        ]\n                      },\n                      {\n                        title:'POOL',\n                        props:{\n                          width:[0.22,0.14],\n                        },\n                        fields:[\n                          {\n                            name:'allocationChart',\n                            mobile:false,\n                            parentProps:{\n                              width:0.3\n                            },\n                            style:{\n                              overflow:'visible'\n                            },\n                            showLoader:false,\n                          },\n                          {\n                            name:'pool',\n                            props:{\n                              ml:1\n                            },\n                            parentProps:{\n                              width:[1,0.7]\n                            }\n                          }\n                        ]\n                      },\n                      {\n                        title:'APY',\n                        desc:apyLong,\n                        props:{\n                          width: [0.29,0.14],\n                        },\n                        parentProps:{\n                          flexDirection:'column',\n                          alignItems:'flex-start',\n                        },\n                        fields:[\n                          {\n                            name:'apy',\n                            showTooltip:true\n                          },\n                          {\n                            name:'idleDistribution',\n                            showLoader:false,\n                            props:{\n                              decimals:this.props.isMobile ? 1 : 2,\n                              fontSize:this.props.isMobile ? '9px' : 0\n                            }\n                          },\n                        ]\n                      },\n                      {\n                        title:'RISK SCORE',\n                        desc:this.functionsUtil.getGlobalConfig(['messages','riskScore']),\n                        mobile:false,\n                        props:{\n                          width:[0.27,0.16],\n                        },\n                        fields:[\n                          {\n                            name:'score'\n                          }\n                        ]\n                      },\n                      {\n                        title:'APR LAST WEEK',\n                        mobile:false,\n                        props:{\n                          width: 0.25,\n                        },\n                        parentProps:{\n                          width:1,\n                          pr:[2,4]\n                        },\n                        fields:[\n                          {\n                            name:'aprChart',\n                            style:{\n                              overflow:'visible',\n                            },\n                          }\n                        ]\n                      },\n                      {\n                        title:'',\n                        props:{\n                          width:[0.23,0.16],\n                        },\n                        parentProps:{\n                          width:1\n                        },\n                        fields:[\n                          {\n                            name:'button',\n                            label:this.props.isMobile ? 'View' : 'View stats',\n                            props:{\n                              width:1,\n                              fontSize:3,\n                              fontWeight:3,\n                              height:'45px',\n                              borderRadius:4,\n                              boxShadow:null,\n                              mainColor:'redeem',\n                              size: this.props.isMobile ? 'small' : 'medium',\n                              handleClick:(props) => this.selectToken(strategy,props.token)\n                            }\n                          }\n                        ]\n                      }\n                    ]}\n                    {...this.props}\n                    selectedStrategy={strategy}\n                    availableTokens={availableTokens}\n                  />\n                  {\n                    !this.props.isMobile &&\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'flex-end'}\n                      >\n                        {\n                          availableProtocols.filter( p => p.legend ).map( (p,index) => (\n                            <Flex\n                              mr={3}\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              key={`legend_${index}`}\n                            >\n                              <Box\n                                mr={1}\n                                width={'10px'}\n                                height={'10px'}\n                                borderRadius={'50%'}\n                                backgroundColor={`rgb(${p.color.rgb.join(',')})`}\n                              >\n                              </Box>\n                              <Text.span\n                                fontSize={1}\n                                color={'cellText'}\n                              >\n                                {p.label}\n                              </Text.span>\n                            </Flex>\n                          ))\n                        }\n                      </Flex>\n                  }\n                </Box>\n              );\n            })\n          }\n          {\n            idleTokenEnabled && !this.state.showRefreshIdleSpeed ? (\n              <Flex\n                mb={4}\n                width={1}\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <Link\n                  hoverColor={'primary'}\n                  onClick={this.showRefreshIdleSpeed.bind(this)}\n                >\n                  Refresh Idle Speed\n                </Link>\n              </Flex>\n            ) : idleTokenEnabled && this.state.showRefreshIdleSpeed &&\n              <DashboardCard\n                cardProps={{\n                  p:2,\n                  mb:4,\n                  width:1,\n                  mt:[2,3],\n                }}\n                isActive={true}\n                isInteractive={false}\n              >\n                <Flex\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                >\n                  <Text\n                    fontWeight={500}\n                    color={'flashColor'}\n                    textAlign={'center'}\n                    fontSize={[1,'15px']}\n                  >\n                    By executing this transaction you can adjust the IDLE distribution speed among the pools.\n                  </Text>\n                  <ExecuteTransaction\n                    action={'Refresh'}\n                    Component={Button}\n                    parentProps={{\n                      mt:1\n                    }}\n                    componentProps={{\n                      size:'small',\n                      mainColor:'blue',\n                      value:'REFRESH IDLE SPEED'\n                    }}\n                    params={[]}\n                    contractName={'IdleController'}\n                    methodName={'refreshIdleSpeeds'}\n                    {...this.props}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'center'}\n                      justifyContent={'center'}\n                    >\n                      <Icon\n                        mr={1}\n                        name={'Done'}\n                        size={'1.4em'}\n                        color={this.props.theme.colors.transactions.status.completed}\n                      />\n                      <Text\n                        fontWeight={500}\n                        fontSize={'15px'}\n                        color={'copyColor'}\n                        textAlign={'center'}\n                      >\n                        Idle Speed Refreshed\n                      </Text>\n                    </Flex>\n                  </ExecuteTransaction>\n                </Flex>\n              </DashboardCard>\n          }\n        </Flex>\n      );\n    } else {\n\n      const tokenConfig = statsTokens[this.props.selectedToken];\n\n      const versionsOptions = Object.keys(globalConfigs.stats.versions).filter( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return versionInfo.enabledTokens.includes(this.props.selectedToken) && versionInfo.enabledStrategies.includes(this.props.selectedStrategy);\n      }).map( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return {\n          value:version,\n          label:versionInfo.label\n        }\n      });\n\n      const versionInfo = this.getVersionInfo(this.state.idleVersion);\n\n      let performanceTooltip = null;\n      if (this.state.idleVersion && versionInfo){\n        const showPerformanceTooltip = this.functionsUtil.getGlobalConfig(['stats','versions',this.state.idleVersion,'showPerformanceTooltip']);\n        performanceTooltip = showPerformanceTooltip ? this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'performanceTooltip']) : null;\n      }\n\n      const versionDefaultValue = versionsOptions.find( v => (v.value === this.state.idleVersion) );\n\n      return (\n        <Flex\n          p={0}\n          width={1}\n          flexDirection={'column'}\n        >\n          {\n          /*\n          }\n          <Flex position={['absolute','relative']} left={0} px={[3,0]} zIndex={10} width={1} flexDirection={'row'} mb={[0,3]}>\n            <Flex alignItems={'center'} width={[2/3,1/2]}>\n              <RouterLink to=\"/\">\n                <Image src=\"images/logo-gradient.svg\"\n                  height={['35px','48px']}\n                  position={'relative'} />\n              </RouterLink>\n              <Heading.h3 color={'dark-gray'} textAlign={'left'} fontWeight={3} lineHeight={'initial'} fontSize={[4,5]} ml={[1,2]}>\n                <Text.span fontSize={'80%'}>|</Text.span> Stats\n              </Heading.h3>\n            </Flex>\n            <Flex flexDirection={'row'} width={[1/3,1/2]} justifyContent={'flex-end'} alignItems={'center'}>\n              {\n                this.state.buttonGroups && \n                  this.props.isMobile ? (\n                    <ButtonGroup\n                      isMobile={this.props.isMobile}\n                      components={ this.state.buttonGroups.reduce((components,array) => components.concat(array),[]) }\n                      theme={'light'}\n                    />\n                  ) :\n                  this.state.buttonGroups.map((buttonGroup,i) => (\n                    <ButtonGroup\n                      key={`buttonGroup_${i}`}\n                      isMobile={this.props.isMobile}\n                      components={buttonGroup}\n                      theme={'light'}\n                    />\n                  ))\n              }\n            </Flex>\n          </Flex>\n          */\n          }\n          <Box\n            mb={[3,4]}\n          >\n            <Flex\n              flexDirection={['column','row']}\n            >\n              <Flex\n                width={[1,0.4]}\n              >\n                <Breadcrumb\n                  {...this.props}\n                  showPathMobile={true}\n                  text={'ASSETS OVERVIEW'}\n                  isMobile={this.props.isMobile}\n                  handleClick={ e => this.props.goToSection('stats') }\n                  path={[this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])]}\n                />\n              </Flex>\n              <Flex\n                mt={[3,0]}\n                width={[1,0.6]}\n                flexDirection={['column','row']}\n                justifyContent={['center','space-between']}\n              >\n                <Flex\n                  width={[1,0.26]}\n                  flexDirection={'column'}\n                >\n                  <GenericSelector\n                    innerProps={{\n                      p:1,\n                      height:['100%','46px'],\n                    }}\n                    name={'idle-version'}\n                    options={versionsOptions}\n                    defaultValue={versionDefaultValue}\n                    onChange={ v => this.setIdleVersion(v) }\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.3]}\n                  flexDirection={'column'}\n                >\n                  <AssetSelector\n                    innerProps={{\n                      p:1\n                    }}\n                    {...this.props}\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.39]}\n                  flexDirection={'column'}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:1,\n                      display:'flex',\n                      alignItems:'center',\n                      height:['46px','100%'],\n                      justifyContent:'center'\n                    }}\n                    isInteractive={true}\n                    handleClick={ e => this.setDateRangeModal(true) }\n                  >\n                    <Text\n                      fontWeight={3}\n                      color={'copyColor'}\n                    >\n                    {\n                      this.state.quickSelection\n                      ?\n                        this.quickSelections[this.state.quickSelection]\n                      : this.state.startTimestampObj && this.state.endTimestampObj &&\n                        `${this.state.startTimestampObj.format('DD/MM/YY')} - ${this.state.endTimestampObj.format('DD/MM/YY')}`\n                    }\n                    </Text>\n                  </DashboardCard>\n                </Flex>\n              </Flex>\n            </Flex>\n          </Box>\n          {\n            !tokenConfig.enabled ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'DoNotDisturb'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Stats for {this.props.selectedToken} are not available!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : this.state.idleVersion && this.functionsUtil.strToMoment(versionInfo.startTimestamp).isAfter(Date.now()) ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'AccessTime'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Idle Stats {this.state.idleVersion} will be available shortly!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : this.functionsUtil.strToMoment(tokenConfig.startTimestamp).isAfter(Date.now()) ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'AccessTime'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Stats for {this.props.selectedToken} will be available shortly!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : (\n              <Box\n                width={1}\n              >\n                <Box\n                  mt={[3,0]}\n                  mb={[3,4]}\n                >\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    justifyContent={'center'}\n                    flexDirection={['column','row']}\n                  >\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Asset Under Management'}\n                        label={ this.state.unlentBalance ? `Unlent funds: ${this.state.unlentBalance} ${this.props.selectedToken}` : this.props.selectedToken }\n                        labelTooltip={ this.state.unlentBalance ? this.functionsUtil.getGlobalConfig(['messages','cheapRedeem']) : null}\n                      >\n                        <SmartNumber\n                          precision={2}\n                          type={'money'}\n                          {...valueProps}\n                          unitProps={unitProps}\n                          number={this.state.aum}\n                          flexProps={{\n                            alignItems:'baseline',\n                            justifyContent:'flex-start'\n                          }}\n                          unit={this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'conversionRateField']) ? '$' : null}\n                        />\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Avg APY'}\n                        label={'Annualized'}\n                      >\n                        <Flex\n                          width={1}\n                          alignItems={'center'}\n                          flexDirection={['column','row']}\n                        >\n                          <VariationNumber\n                            direction={'up'}\n                            iconPos={'right'}\n                            iconSize={'1.8em'}\n                            justifyContent={'flex-start'}\n                            width={1}\n                            >\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                              fontSize={[4,5]}\n                            >\n                              {this.state.apr}\n                              <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                            </Text>\n                          </VariationNumber>\n                        </Flex>\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Overperformance on Compound'}\n                        label={'Annualized'}\n                      >\n                        {\n                          this.state.delta && !isNaN(this.state.delta) ? (\n                            <VariationNumber\n                              direction={'up'}\n                              iconPos={'right'}\n                              iconSize={'1.8em'}\n                              justifyContent={'flex-start'}\n                              >\n                              <Text\n                                lineHeight={1}\n                                fontSize={[4,5]}\n                                fontWeight={[3,4]}\n                                color={'statValue'}\n                              >\n                                {this.state.delta}\n                                <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                              </Text>\n                            </VariationNumber>\n                          ) : (\n                            <Text\n                              lineHeight={1}\n                              fontSize={[4,5]}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                            >\n                              {this.state.delta}\n                            </Text>\n                          )\n                        }\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        label={' '}\n                        title={'Rebalances'}\n                        value={this.state.rebalances.toString()}\n                      />\n                    </Flex>\n                    {\n                    /*\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Current APR</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.currApr}\n                            <Text.span color={'copyColor'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Days Live</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.days}\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    */\n                    }\n                  </Flex>\n                </Box>\n\n                <DashboardCard\n                  title={'Historical Performance'}\n                  description={performanceTooltip}\n                  cardProps={{\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex id='chart-PRICE' width={1} mb={3}>\n                    <StatsChart\n                      height={ 350 }\n                      {...this.state}\n                      parentId={'chart-PRICE'}\n                      theme={this.props.theme}\n                      isMobile={this.props.isMobile}\n                      contracts={this.props.contracts}\n                      themeMode={this.props.themeMode}\n                      apiResults={this.state.apiResults}\n                      idleVersion={this.state.idleVersion}\n                      apiResults_unfiltered={this.state.apiResults_unfiltered}\n                      chartMode={this.state.idleVersion === this.state.latestVersion ? 'PRICE_V4' : 'PRICE'}\n                    />\n                  </Flex>\n                </DashboardCard>\n\n                <DashboardCard\n                  cardProps={{\n                    pb:3,\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex\n                    flexDirection={['column','row']}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      this.state.idleVersion === this.state.latestVersion && \n                      <Flex\n                        pt={2}\n                        width={[1,1/3]}\n                        id={'allocation-chart'}\n                        flexDirection={'column'}\n                        alignItems={'flex-start'}\n                        justifyContent={'flex-start'}\n                      >\n                        <AllocationChart\n                          height={310}\n                          {...this.props}\n                          parentId={'allocation-chart'}\n                        />\n                        <Rebalance\n                          {...this.props}\n                        />\n                      </Flex>\n                    }\n                    <Flex\n                      mb={[0,3]}\n                      id={'chart-ALL'}\n                      pl={[0,this.state.idleVersion === this.state.latestVersion ? 0 : 3]}\n                      width={[1, this.state.idleVersion === this.state.latestVersion ? 2/3 : 1]}\n                    >\n                      <Flex alignItems={'flex-start'} justifyContent={'flex-start'} flexDirection={'column'} width={1}>\n                        <Heading.h4\n                          mb={2}\n                          ml={3}\n                          mt={[3,4]}\n                          fontWeight={4}\n                          fontSize={[2,3]}\n                          textAlign={'left'}\n                          color={'dark-gray'}\n                          lineHeight={'initial'}\n                        >\n                          Allocations over time\n                        </Heading.h4>\n                        <StatsChart\n                          height={350}\n                          {...this.state}\n                          chartMode={'ALL'}\n                          parentId={'chart-ALL'}\n                          theme={this.props.theme}\n                          isMobile={this.props.isMobile}\n                          themeMode={this.props.themeMode}\n                          contracts={this.props.contracts}\n                          apiResults={this.state.apiResults}\n                          idleVersion={this.state.idleVersion}\n                          apiResults_unfiltered={this.state.apiResults_unfiltered}\n                        />\n                      </Flex>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n\n                <Flex\n                  position={'relative'}\n                >\n                  <Flex\n                    width={1}\n                    id={'carousel-container'}\n                    justifyContent={'flex-end'}\n                  >\n                    <RoundIconButton\n                      buttonProps={{\n                        mr:3\n                      }}\n                      iconName={'ArrowBack'}\n                      disabled={this.state.carouselIndex === 0}\n                      handleClick={ e => this.handleCarousel('back') }\n                    />\n                    <RoundIconButton\n                      iconName={'ArrowForward'}\n                      handleClick={ e => this.handleCarousel('next') }\n                      disabled={this.state.carouselIndex === this.state.carouselMax}\n                    />\n                  </Flex>\n                  <Flex\n                    mt={5}\n                    height={'400px'}\n                    position={'absolute'}\n                    id={'carousel-cursor'}\n                    width={['444%','200%']}\n                    justifyContent={'flex-start'}\n                    left={this.state.carouselOffsetLeft}\n                    style={{\n                      transition:'left 0.3s ease-in-out'\n                    }}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        id='chart-AUM'\n                      >\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            ml={3}\n                            mt={3}\n                            mb={2}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Asset Under Management\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'AUM'}\n                            parentId={'chart-AUM'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-APR' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            APRs\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'APR'}\n                            parentId={'chart-APR'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                      title={'Risk Score'}\n                      description={'Idle Risk Score is a weighted average of the underlying protocols risks assessed by DeFi Score'}\n                      titleParentProps={{\n                        ml:16,\n                        mt:16\n                      }}\n                    >\n                      <Flex id='chart-SCORE' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'SCORE'}\n                            parentId={'chart-SCORE'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-VOL' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Volume\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'VOL'}\n                            parentId={'chart-VOL'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                </Flex>\n              </Box>\n            )\n          }\n          <DateRangeModal\n            {...this.props}\n            minDate={this.state.minDate}\n            maxDate={this.state.maxDate}\n            handleSelect={this.setDateRange}\n            isOpen={this.state.dateRangeModalOpened}\n            closeModal={e => this.setDateRangeModal(false)}\n            startDate={this.state.startTimestampObj ? this.state.startTimestampObj._d : null}\n            endDate={this.state.endTimestampObj ? this.state.endTimestampObj._d : null}\n          />\n        </Flex>\n      );\n    }\n  }\n}\n\nexport default Stats;","import Title from '../Title/Title';\nimport IconBox from '../IconBox/IconBox';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport { Flex, Icon, Text, Box, Image } from \"rimble-ui\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass Utils extends Component {\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    const SubComponent = this.props.selectedSubsection && this.props.selectedSubsection.subComponent ? this.props.selectedSubsection.subComponent : null;\n    const viewOnly = this.props.connectorName === 'custom';\n    const showBreadCrumb = typeof this.props.showBreadCrumb !== 'undefined' ? this.props.showBreadCrumb : true;\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.props.selectedSubsection ? (\n            <Box\n              width={1}\n            >\n              {\n                showBreadCrumb && (\n                  <Flex\n                    width={1}\n                  >\n                    <Breadcrumb\n                      {...this.props}\n                      showPathMobile={true}\n                      isMobile={this.props.isMobile}\n                      path={[this.props.selectedSubsection.label]}\n                      text={this.props.selectedSection.label.toUpperCase()}\n                      handleClick={ e => this.props.goToSection(this.props.selectedSection.route) }\n                    />\n                  </Flex>\n                )\n              }\n              <Flex\n                my={[2,3]}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <Title\n                  mb={2}\n                >\n                  {this.props.selectedSubsection.label}\n                </Title>\n                <Text\n                  textAlign={'center'}\n                >\n                  {this.props.selectedSubsection.desc}\n                </Text>\n              </Flex>\n              <SubComponent\n                {...this.props}\n                {...this.props.selectedSubsection.directProps}\n                toolProps={this.props.selectedSubsection.props}\n              />\n            </Box>\n          ) : (\n            <Flex\n              my={[2,3]}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Title\n                mb={3}\n              >\n                Tools\n              </Title>\n              <Flex\n                width={1}\n                style={{\n                  flexWrap:'wrap'\n                }}\n                justifyContent={viewOnly ? 'center' : 'flex-start'}\n              >\n              {\n                viewOnly ? (\n                  <IconBox\n                    cardProps={{\n                      maxWidth:[1,'35em']\n                    }}\n                    icon={'Visibility'}\n                    text={'You are using Idle in \"Read-Only\" mode.<br />Logout and connect with your wallet to interact.'}\n                  />\n                ) : this.props.selectedSection.submenu.map( (tool,toolIndex) => (\n                  <DashboardCard\n                    isInteractive={true}\n                    key={`tool_${toolIndex}`}\n                    cardProps={{\n                      p:[3,4],\n                      mb:[3,3],\n                      mr:[0,'2%'],\n                      style:{\n                        flex: this.props.isMobile ? '1 1 100%' : '0 0 31%'\n                      },\n                      alignItems:'center',\n                      flexDirection:'column',\n                      justifyContent:'center'\n                    }}\n                    handleClick={ e => this.props.goToSection(this.props.selectedSection.route+'/'+tool.route) }\n                  >\n                    <Text\n                      fontSize={[3,4]}\n                      textAlign={'center'}\n                    >\n                      {tool.label}\n                    </Text>\n                    <Flex\n                      justifyContent={'center'}\n                    >\n                      {\n                        tool.image ? (\n                          <Image\n                            my={[0,2]}\n                            height={'2.2em'}\n                            src={tool.image}\n                          />\n                        ) : tool.icon && (\n                          <Icon\n                            my={[0,2]}\n                            size={'3em'}\n                            name={tool.icon}\n                          />\n                        )\n                      }\n                    </Flex>\n                    <Text\n                      fontSize={[2,2]}\n                      textAlign={'center'}\n                    >\n                      {tool.desc}\n                    </Text>\n                  </DashboardCard>\n                ) )\n              }\n              </Flex>\n            </Flex>\n          )\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default Utils;\n","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Heading, Text, Tooltip, Icon } from \"rimble-ui\";\nimport PortfolioEquity from '../PortfolioEquity/PortfolioEquity';\n\nclass FundsOverview extends Component {\n\n  state = {\n    // govTokensAprs:null,\n    aggregatedValues:[],\n    govTokensTotalApr:null,\n    govTokensUserBalance:null,\n    govTokensDistribution:null,\n    govTokensTotalBalance:null,\n    govTokensTotalAprTooltip:null,\n    idleTokenUserDistribution:null,\n    govTokensDistributionTooltip:null,\n    govTokensTotalBalanceTooltip:null\n  };\n\n  // Utils\n  functionsUtil = null;\n  idleGovToken = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    this.idleGovToken = this.functionsUtil.getIdleGovToken();\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const isRisk = this.props.selectedStrategy === 'risk';\n\n    const [\n      // govTokensAprs,\n      idleTokenUserDistribution,\n      govTokensUserBalance,\n      apy,\n      depositTimestamp,\n      days\n    ] = await Promise.all([\n      // this.functionsUtil.getGovTokensAprs(this.props.selectedToken,this.props.tokenConfig),\n      this.idleGovToken.getUserDistribution(this.props.account,govTokenAvailableTokens,true),\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,null),\n      this.functionsUtil.loadAssetField('apy',this.props.selectedToken,this.props.tokenConfig,this.props.account,false),\n      this.functionsUtil.loadAssetField('depositTimestamp',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    let avgAPY = await this.functionsUtil.getAvgAPYStats(this.props.tokenConfig.address,isRisk,depositTimestamp);\n\n    if (!avgAPY || this.functionsUtil.BNify(avgAPY).lte(0)){\n      avgAPY = apy;\n    }\n\n    const govTokensTotalBalance = govTokensUserBalance ? Object.values(govTokensUserBalance).reduce( (totBalance,govTokenBalance) => {\n      return totBalance.plus(this.functionsUtil.BNify(govTokenBalance));\n    },this.functionsUtil.BNify(0)) : null;\n\n    const govTokensTotalBalanceTooltip = govTokensUserBalance ? Object.keys(govTokensUserBalance).map( govToken => {\n      const balance = govTokensUserBalance[govToken];\n      if (balance.gt(0)){\n        return `+${balance.toFixed(2)} ${govToken}`;\n      } else {\n        return null;\n      }\n    }).filter(v => (v !== null)) : null;\n\n    // console.log(govTokensTotalBalance,govTokensUserBalance,govTokensTotalBalanceTooltip);\n\n    // const govTokensTotalApr = govTokensAprs ? Object.values(govTokensAprs).reduce( (totApr,govTokenApr) => {\n    //   return totApr.plus(this.functionsUtil.BNify(govTokenApr));\n    // },this.functionsUtil.BNify(0)) : null;\n\n    // const govTokensTotalAprTooltip = govTokensAprs ? Object.keys(govTokensAprs).map( govToken => {\n    //   const apr = govTokensAprs[govToken];\n    //   if (apr.gt(0)){\n    //     return `${govToken}: ${apr.toFixed(2)}%`;\n    //   }\n    //   return null;\n    // }).filter(v => (v !== null)) : null;\n\n    /*\n    const govTokensDistributionTooltip = govTokensUserDistribution ? Object.keys(govTokensUserDistribution).map( govToken => {\n      const speed = govTokensUserDistribution[govToken];\n      if (speed.gt(0)){\n        const distributionFrequency = this.functionsUtil.getGlobalConfig(['govTokens',govToken,'distributionFrequency']);\n        return `+${speed.toFixed(4)} ${govToken}/${distributionFrequency}`;\n      }\n      return null;\n    }).filter(v => (v !== null)) : null;\n    */\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          desc:this.functionsUtil.getGlobalConfig(['messages','apyLong']),\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '0.00%') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    this.setState({\n      // govTokensAprs,\n      aggregatedValues,\n      // govTokensTotalApr,\n      govTokensUserBalance,\n      govTokensTotalBalance,\n      // govTokensTotalAprTooltip,\n      idleTokenUserDistribution,\n      govTokensTotalBalanceTooltip\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Flex\n                          mt={2}\n                          width={1}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <Text\n                            fontWeight={2}\n                            fontSize={[1,2]}\n                            color={'cellText'}\n                          >\n                            {v.props.title}\n                          </Text>\n                          {\n                            v.props.desc && \n                              <Tooltip\n                                placement={'bottom'}\n                                message={v.props.desc}\n                              >\n                                <Icon\n                                  ml={2}\n                                  name={\"Info\"}\n                                  size={'1em'}\n                                  color={'cellTitle'}\n                                />\n                              </Tooltip>\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquity\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              chartToken={this.props.selectedToken}\n              enabledTokens={[this.props.selectedToken]}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLent',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:this.props.theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPerc',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.govTokensTotalBalanceTooltip && this.state.govTokensTotalBalanceTooltip.length>0 && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      this.state.govTokensTotalBalanceTooltip.map((govTokenBalance,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          mt={govTokenIndex ? 1 : 0}\n                          key={`govToken_${govTokenIndex}`}\n                        >\n                          {govTokenBalance}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                )/* : this.state.govTokensUserBalance && Object.keys(this.state.govTokensUserBalance).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + ${this.state.govTokensTotalBalance.toFixed(4)}\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalBalanceTooltip.join(' / ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Fees\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'feesCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'apy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.idleTokenUserDistribution && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      mt={1}\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      {this.state.idleTokenUserDistribution.toFixed(4)} {this.idleGovToken.tokenName}/{this.idleGovToken.tokenConfig.distributionFrequency}\n                    </Text>\n                  </Flex>\n                )\n                /*\n                this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length===1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      Object.keys(this.state.govTokensAprs).map((govToken,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          ml={govTokenIndex ? 2 : 0}\n                          key={`govToken_${govToken}`}\n                        >\n                          {this.state.govTokensAprs[govToken].toFixed(2)}% {govToken}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                ) : this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + {this.state.govTokensTotalApr.toFixed(2)}%\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalAprTooltip.join('; ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Risk Score\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'score',\n                  props:{\n                    decimals:1,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverview;","import React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Icon, Checkbox, Box, Link, Input, Tooltip } from \"rimble-ui\";\n\nclass CurveRedeem extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    tokenConfig:null,\n    unevenAmounts:null,\n    selectedToken:null,\n    availableTokens:null,\n    buttonDisabled:false,\n    showMaxSlippage:false,\n    redeemUnderlying:true,\n    curveTokenConfig:null,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    curveTokensAmounts:null,\n    fastBalanceSelector:null,\n    redeemUnevenAmounts:false,\n    curveRedeemableIdleTokens:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.initToken();\n  }\n\n  showMaxSlippage(){\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  async calculateSlippage(max_slippage=null){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (!inputValue || inputValue.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    let withdrawSlippage = null;\n    let curveTokensAmounts = null;\n    let curveIdleTokensAmounts = null;\n    if (this.state.redeemUnevenAmounts){\n      [\n        curveTokensAmounts,\n        curveIdleTokensAmounts\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokensAmounts(this.props.account,normalizedAmount,true),\n        this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,normalizedAmount)\n      ]);\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false,curveIdleTokensAmounts);\n    } else {\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false);\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const redeemableBalance = inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.times(100).plus(this.state.maxSlippage || this.functionsUtil.BNify(0)).div(100)));\n      curveTokensAmounts = {};\n      curveTokensAmounts[this.state.selectedToken] = redeemableBalance;\n    }\n\n    if (withdrawSlippage){\n      withdrawSlippage = withdrawSlippage.times(100);\n    }\n\n    this.setState({\n      withdrawSlippage,\n      curveTokensAmounts,\n      curveIdleTokensAmounts\n    });\n\n    // Add max slippage but don't save in state\n    if (withdrawSlippage && max_slippage){\n      withdrawSlippage = withdrawSlippage.plus(max_slippage);\n    }\n\n    return withdrawSlippage;\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.tokenConfig.idle.token !== this.props.tokenConfig.idle.token;\n    if (tokenChanged){\n      await this.initToken();\n    }\n\n    const redeemUnevenAmountsChanged = prevState.redeemUnevenAmounts !== this.state.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    const inputChanged = prevState.inputValue !== this.state.inputValue;\n    const maxSlippageChanged = parseFloat(prevState.maxSlippage) !== parseFloat(this.state.maxSlippage);\n    const tokenConfigChanged = JSON.stringify(prevState.tokenConfig) !== JSON.stringify(this.state.tokenConfig);\n    if (inputChanged || tokenConfigChanged || maxSlippageChanged){\n      this.calculateSlippage();\n    }\n\n    const selectedTokenChanged = prevState.selectedToken !== this.state.selectedToken;\n    if (selectedTokenChanged){\n      this.loadSelectedTokenConfig();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    let buttonDisabled = false;\n\n    // if (this.state.redeemUnevenAmounts){\n      buttonDisabled = !amount || amount.gt(this.state.curveTokenBalance);\n    // } else {\n      // buttonDisabled = !amount || amount.gt(this.state.redeemableBalance);\n    // }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    let inputValue = null;\n\n    // if (this.state.redeemUnevenAmounts){\n    inputValue = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n    // } else {\n      // inputValue = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n    // }\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  selectDestinationToken(selectedToken){\n    this.setState({\n      selectedToken\n    });\n  }\n\n  async loadSelectedTokenConfig(){\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const tokenConfig = this.state.availableTokens[this.state.selectedToken];\n    const curveTokenConfig = curveConfig.availableTokens[tokenConfig.idle.token];\n    this.setState({\n      tokenConfig,\n      curveTokenConfig\n    });\n  }\n\n  async initToken(){\n    const [curvePoolContract,curveSwapContract] = await Promise.all([\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract()\n    ]);\n\n    const [\n      curveTokenPrice,\n      curveTokenBalance,\n      curveRedeemableIdleTokens,\n    ] = await Promise.all([\n      this.functionsUtil.getCurveTokenPrice(),\n      this.functionsUtil.getCurveTokenBalance(this.props.account),\n      this.functionsUtil.getCurveRedeemableIdleTokens(this.props.account)\n    ]);\n\n    const unevenAmounts = [];\n    const redeemableBalance = curveTokenBalance ? curveTokenBalance.times(curveTokenPrice) : this.functionsUtil.BNify(0);\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();;\n    const selectedToken = Object.keys(availableTokens)[0];\n\n    this.setState({\n      selectedToken,\n      unevenAmounts,\n      curveTokenPrice,\n      availableTokens,\n      curvePoolContract,\n      curveSwapContract,\n      curveTokenBalance,\n      redeemableBalance,\n      curveRedeemableIdleTokens\n    });\n  }\n\n  async redeem(){\n\n    if (!this.state.curveTokenBalance){\n      return false;\n    }\n\n    const callbackRedeem = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveRedeem`,\n        eventAction: this.props.selectedToken,\n        eventValue: this.state.curveTokenBalance.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackRedeem === 'function' && txSucceeded){\n        this.props.callbackRedeem(tx);\n      }\n    };\n\n    const callbackReceiptRedeem = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.curveSwapContract.name;\n    const withdrawSlippage = await this.calculateSlippage(this.state.maxSlippage);\n    const max_slippage = this.functionsUtil.BNify(this.state.maxSlippage).div(100);\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    // const curveTokenBalance = this.functionsUtil.normalizeTokenAmount(this.state.curveTokenBalance,this.state.curvePoolContract.decimals);\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    if (this.state.redeemUnevenAmounts){\n      const min_amounts = this.state.redeemUnderlying ? await this.functionsUtil.getCurveTokensAmounts(this.props.account,_amount,false,true) : await this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,_amount,max_slippage);\n      console.log('remove_liquidity',_amount.toString(),min_amounts);\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    } else {\n      const coin_index = this.state.curveTokenConfig.migrationParams.coinIndex;\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.div(100))),this.state.tokenConfig.decimals);\n      // const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.minus(inputValue.times(withdrawSlippage.div(100))),this.state.curveTokenConfig.decimals);\n      // let _token_amount = await this.functionsUtil.getCurveTokenAmount(amounts,false);\n      // _token_amount = this.functionsUtil.BNify(_token_amount).isGreaterThan(curveTokenBalance) ? curveTokenBalance : this.functionsUtil.BNify(_token_amount);\n\n      console.log('remove_liquidity_one_coin',_amount, coin_index, min_amount);\n\n      // debugger;\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_one_coin', [_amount, coin_index, min_amount, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    }\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  getFastBalanceSelector(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n\n  render() {\n\n    const showSlippage = !this.state.buttonDisabled && this.state.withdrawSlippage;\n    const curveTokenName = this.functionsUtil.getGlobalConfig(['curve','poolContract','token']);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          {\n            !this.state.curveTokenBalance ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3,\n                  minHeight:'195px',\n                  style:{\n                    display:'flex',\n                    alignItems:'center',\n                    justifyContent:'center'\n                  }\n                }}\n              >\n                <FlexLoader\n                  flexProps={{\n                    flexDirection:'row'\n                  }}\n                  loaderProps={{\n                    size:'30px'\n                  }}\n                  textProps={{\n                    ml:2\n                  }}\n                  text={'Checking Curve Pool...'}\n                />\n              </DashboardCard>\n            ) : this.state.processing.loading ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3\n                }}\n              >\n                <Flex\n                  flexDirection={'column'}\n                >\n                  <TxProgressBar\n                    web3={this.props.web3}\n                    hash={this.state.processing.txHash}\n                    endMessage={`Finalizing redeem request...`}\n                    cancelTransaction={this.cancelTransaction.bind(this)}\n                    waitText={ this.props.waitText ? this.props.waitText : 'Redeem estimated in'}\n                  />\n                </Flex>\n              </DashboardCard>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    mb:2\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'1.8em'}\n                      color={'cellText'}\n                      name={'FileUpload'}\n                    />\n                    <Text\n                      mt={1}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Withdraw from the Curve Pool in a specific token or in uneven amounts of tokens (with no slippage).\n                    </Text>\n                    <Flex\n                      mt={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                    >\n                      <Checkbox\n                        required={false}\n                        label={`Redeem with no slippage`}\n                        checked={this.state.redeemUnevenAmounts}\n                        onChange={ e => this.toggleUnevenAmounts(e.target.checked) }\n                      />\n                      <Tooltip\n                        placement={'top'}\n                        message={`You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.`}\n                      >\n                        <Icon\n                          size={'1em'}\n                          color={'cellTitle'}\n                          name={\"InfoOutline\"}\n                        />\n                      </Tooltip>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n                {\n                  !this.state.redeemUnevenAmounts/* && (!this.props.selectedToken || (this.state.showMaxSlippage && showSlippage))*/ && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      {\n                        this.state.tokenConfig && \n                          <Box\n                            width={1}\n                          >\n                            <Text\n                              mb={1}\n                            >\n                              Select destination token:\n                            </Text>\n                            <AssetSelector\n                              {...this.props}\n                              id={'token-from'}\n                              showBalance={false}\n                              tokenConfig={this.state.tokenConfig}\n                              selectedToken={this.state.selectedToken}\n                              availableTokens={this.state.availableTokens}\n                              onChange={this.selectDestinationToken.bind(this)}\n                            />\n                          </Box>\n                      }\n                    </Box>\n                  )\n                }\n                {\n                  this.state.curveTokensAmounts && !this.state.buttonDisabled && (\n                    <DashboardCard\n                      cardProps={{\n                        mt:1,\n                        mb:2,\n                        py:2,\n                        px:1\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Text\n                          mt={1}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          You will receive:\n                        </Text>\n                        <Flex\n                          mt={2}\n                          width={1}\n                          boxShadow={0}\n                          style={{\n                            flexWrap:'wrap'\n                          }}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                          >\n                            {\n                              Object.keys(this.state.curveTokensAmounts).map( token => {\n                                const balance = this.state.curveTokensAmounts[token];\n                                return (\n                                  <Flex\n                                    mb={1}\n                                    mx={1}\n                                    width={'auto'}\n                                    flexDirection={'row'}\n                                    key={`tokenBalance_${token}`}\n                                    justifyContent={'flex-start'}\n                                  >\n                                    <AssetField\n                                      token={token}\n                                      tokenConfig={{\n                                        token:token\n                                      }}\n                                      fieldInfo={{\n                                        name:'icon',\n                                        props:{\n                                          mr:1,\n                                          width:['1.4em','1.6em'],\n                                          height:['1.4em','1.6em']\n                                        }\n                                      }}\n                                    />\n                                    <SmartNumber\n                                      ml={1}\n                                      fontSize={[0,1]}\n                                      fontWeight={500}\n                                      maxPrecision={4}\n                                      color={'cellText'}\n                                      number={balance.toString()}\n                                    />\n                                  </Flex>\n                                );\n                            })\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n                {\n                  this.state.showMaxSlippage && showSlippage && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Text>\n                          Choose max slippage:\n                        </Text>\n                        <Tooltip\n                          placement={'top'}\n                          message={`Max additional slippage on top of the one shown below`}\n                        >\n                          <Icon\n                            ml={1}\n                            size={'1em'}\n                            color={'cellTitle'}\n                            name={\"InfoOutline\"}\n                          />\n                        </Tooltip>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        {\n                          [0.2,0.5,1,5].map( slippage => (\n                            <FastBalanceSelector\n                              cardProps={{\n                                p:1\n                              }}\n                              textProps={{\n                                fontSize:1\n                              }}\n                              percentage={slippage}\n                              key={`selector_${slippage}`}\n                              onMouseDown={()=>this.setMaxSlippage(slippage)}\n                              isActive={this.state.maxSlippage === parseFloat(slippage)}\n                            />\n                          ))\n                        }\n                      </Flex>\n                    </Box>\n                  )\n                }\n                <Flex\n                  mb={3}\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  <Flex\n                    mb={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'flex-end'}\n                  >\n                    {\n                      showSlippage && (\n                        <Flex\n                          width={1}\n                          maxWidth={'40%'}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            textAlign={'right'}\n                            style={{\n                              whiteSpace:'nowrap'\n                            }}\n                            color={ parseFloat(this.state.withdrawSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                          >\n                            {\n                              parseFloat(this.state.withdrawSlippage.toFixed(3)) === 0 ?\n                                'No Slippage'\n                              : `${ this.state.withdrawSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.withdrawSlippage.abs().toFixed(3)}%`\n                            }\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={ this.state.redeemUnevenAmounts ? `You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.` : this.state.withdrawSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                          {\n                            !this.state.redeemUnevenAmounts &&\n                              <Link\n                                ml={1}\n                                color={'copyColor'}\n                                hoverColor={'primary'}\n                                onClick={this.showMaxSlippage.bind(this)}\n                              >\n                                change\n                              </Link>\n                          }\n                        </Flex>\n                      )\n                    }\n                    <Flex\n                      width={1}\n                      maxWidth={'60%'}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      justifyContent={'flex-end'}\n                    >\n                      <Link\n                        fontSize={1}\n                        fontWeight={3}\n                        color={'dark-gray'}\n                        textAlign={'right'}\n                        hoverColor={'copyColor'}\n                        onClick={ (e) => this.setFastBalanceSelector(100) }\n                        style={{\n                          maxWidth:'100%',\n                          overflow:'hidden',\n                          whiteSpace:'nowrap',\n                          textOverflow:'ellipsis'\n                        }}\n                      >\n                        {this.state.curveTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {curveTokenName}\n                      </Link>\n                    </Flex>\n                  </Flex>\n                  <Input\n                    min={0}\n                    type={\"number\"}\n                    required={true}\n                    height={'3.4em'}\n                    borderRadius={2}\n                    fontWeight={500}\n                    boxShadow={'none !important'}\n                    placeholder={`Insert amount`}\n                    onChange={this.changeInputValue.bind(this)}\n                    border={`1px solid ${this.props.theme.colors.divider}`}\n                    value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                  />\n                  <Flex\n                    mt={2}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      [25,50,75,100].map( percentage => (\n                        <FastBalanceSelector\n                          percentage={percentage}\n                          key={`selector_${percentage}`}\n                          onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                          isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                        />\n                      ))\n                    }\n                  </Flex>\n                </Flex>\n                <Flex\n                  justifyContent={'center'}\n                >\n                  <RoundButton\n                    buttonProps={{\n                      mt:2,\n                      width:[1,1/2],\n                      disabled:this.state.buttonDisabled\n                    }}\n                    handleClick={this.redeem.bind(this)}\n                  >\n                    Redeem\n                  </RoundButton>\n                </Flex>\n              </Flex>\n            )\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveRedeem;","import React, { Component } from 'react';\nimport {\n  Button,\n  Flex,\n  Box,\n  Text\n} from \"rimble-ui\";\nimport styles from './TwitterShareButton.module.scss';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\n\nclass TwitterShareButton extends Component {\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  componentWillMount() {\n    this.loadUtils();\n  }\n\n  componentDidMount() {\n    this.loadUtils();\n  }\n\n  componentDidUpdate() {\n    this.loadUtils();\n  }\n\n  share = () => {\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'Share',\n      eventAction: 'twitter',\n      eventLabel: this.props.parent\n    });\n\n    const w = Math.min(window.innerWidth,600);\n    const h = 350;\n    const x = (window.innerWidth-w)/2;\n    const y = 150;\n    window.open(`https://twitter.com/intent/tweet?text=${this.props.tweet}`,\"_blank\",`toolbar=yes,scrollbars=no,resizable=no,top=${y},left=${x},width=${w},height=${h}`);\n  }\n\n  render() {\n    return (\n        <Button\n          borderRadius={1}\n          mainColor={'#2aa6f2'}\n          contrastColor={'white'}\n          onClick={ e => { this.share() } }\n        >\n          <Flex flexDirection={'row'} alignItems={'center'} justifyContent={'center'}>\n            <Box className={styles.twitterIcon} />\n            <Text color={'white'} fontWeight={3} ml={2}>{ this.props.text ? this.props.text : 'Tweet' }</Text>\n          </Flex>\n        </Button>\n    );\n  }\n}\n\nexport default TwitterShareButton;\n","import React from \"react\";\nimport {\n  Text,\n  Modal,\n  Link,\n  Flex\n} from \"rimble-ui\";\nimport ModalCard from './ModalCard';\nimport TwitterShareButton from '../../TwitterShareButton/TwitterShareButton.js';\nimport Confetti from 'react-confetti/dist/react-confetti';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\n\nclass ShareModal extends React.Component {\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  componentWillMount() {\n    this.loadUtils();\n  }\n\n  componentDidMount() {\n    this.loadUtils();\n  }\n\n  componentDidUpdate() {\n    this.loadUtils();\n  }\n\n  closeModal = async (action) => {\n    const globalConfigs = this.functionsUtil.getGlobalConfigs();\n    // Send Google Analytics event\n    if (globalConfigs.analytics.google.events.enabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'Share',\n        eventAction: action,\n        eventLabel: 'ShareModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n    const tweet = window.escape(this.props.tweet);\n    const customText = {__html: this.props.text};\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        <ModalCard closeFunc={this.props.closeModal}>\n          {\n            this.props.confettiEnabled &&\n            <Confetti\n              style={{ position: 'fixed','zIndex':9999 }}\n              run={true}\n              recycle={true}\n              width={window.innerWidth}\n              height={window.innerHeight}\n            />\n          }\n          <ModalCard.Header title={this.props.title} icon={this.props.icon}></ModalCard.Header>\n          <ModalCard.Body>\n            <Flex my={3} width={1} flexDirection={'column'} mx={'auto'}>\n              <Text color={'dark-gray'} textAlign={'center'} fontSize={3} mb={2} dangerouslySetInnerHTML={customText}></Text>\n            </Flex>\n            <Flex mb={3} flexDirection={'column'} alignItems={'center'} justifyContent={'center'}>\n              <TwitterShareButton tweet={tweet} text={'Share now'} parent={'ShareModal'} />\n              <Link mt={2} onClick={ e => this.closeModal('continue_without_sharing') } hoverColor={'blue'}>continue without sharing</Link>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default ShareModal;","import Migrate from '../Migrate/Migrate';\nimport IconBox from '../IconBox/IconBox';\nimport React, { Component } from 'react';\nimport ExtLink from '../ExtLink/ExtLink';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport ConnectBox from '../ConnectBox/ConnectBox';\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport RoundButton from '../RoundButton/RoundButton';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport ShareModal from '../utilities/components/ShareModal';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport TransactionField from '../TransactionField/TransactionField';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Input, Box, Icon, Link, Checkbox, Tooltip, Image } from \"rimble-ui\";\n\nclass DepositRedeem extends Component {\n\n  state = {\n    txError:{},\n    tokenAPY:'-',\n    inputValue:{},\n    processing:{},\n    curveAPY:null,\n    totalAUM:null,\n    canRedeem:false,\n    maxSlippage:0.2,\n    canDeposit:false,\n    action:'deposit',\n    directMint:false,\n    activeModal:null,\n    tokenGovTokens:{},\n    showBuyFlow:false,\n    maxUnlentPerc:null,\n    unlentBalance:null,\n    tokenApproved:false,\n    skipMigration:false,\n    redeemSkipGov:false,\n    showRedeemFlow:false,\n    contractPaused:false,\n    buttonDisabled:false,\n    canRedeemCurve:false,\n    erc20ForwarderTx:null,\n    signedParameters:null,\n    minAmountForMint:null,\n    showMaxSlippage:false,\n    redeemGovTokens:false,\n    canDepositCurve:false,\n    redeemSkipGovTokens:[],\n    fastBalanceSelector:{},\n    actionProxyContract:{},\n    migrationEnabled:false,\n    componentMounted:false,\n    curveTokenBalance:null,\n    agreeSkipGovTokens:false,\n    redeemCurveEnabled:false,\n    depositCurveBalance:null,\n    depositCurveEnabled:true,\n    showAdvancedOptions:false,\n    skipGovTokensGasSave:null,\n    depositCurveSlippage:null,\n    erc20ForwarderContract:{},\n    erc20ForwarderEnabled:true,\n    showETHWrapperEnabled:false,\n    skipGovTokensGasSaveUSD:null,\n    metaTransactionsEnabled:true,\n    skippedGovTokensBalance:null,\n    minAmountForMintReached:false,\n    loadingErc20ForwarderTx:false\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadProxyContracts();\n  }\n\n  async componentDidMount(){\n\n  }\n\n  setShowRedeemFlow = (showRedeemFlow) => {\n    this.setState({\n      showRedeemFlow\n    });\n  }\n\n  setShowBuyFlow = (showBuyFlow) => {\n    this.setState({\n      showBuyFlow\n    });\n  }\n\n  toggleShowAdvancedOptions = showAdvancedOptions => {\n    this.setState((prevState) => ({\n      showAdvancedOptions:!prevState.showAdvancedOptions\n    }));\n  }\n\n  toggleSkipMigration = skipMigration => {\n    this.setState({\n      skipMigration\n    });\n  }\n\n  toggleRedeemCurve = redeemCurveEnabled => {\n    this.setState({\n      redeemCurveEnabled\n    });\n  }\n\n  toggleDepositCurve = depositCurveEnabled => {\n    this.setState({\n      depositCurveEnabled\n    });\n  }\n\n  toggleShowETHWrapper = showETHWrapperEnabled => {\n    this.setState({\n      showETHWrapperEnabled\n    });\n  }\n\n  toggleAgreeSkipGovTokens = agreeSkipGovTokens => {\n    this.setState({\n      agreeSkipGovTokens\n    });\n  }\n\n  toggleSkipMint = (directMint) => {\n    this.setState({\n      directMint\n    });\n  }\n\n  toggleRedeemGovTokens = (redeemGovTokens) => {\n    this.setState({\n      redeemGovTokens,\n      redeemSkipGovTokens:[],\n      agreeSkipGovTokens:false,\n      skippedGovTokensBalance:this.functionsUtil.BNify(0),\n      redeemSkipGov:redeemGovTokens?false:this.state.redeemSkipGov\n    });\n  }\n\n  toggleRedeemSkipGov = (redeemSkipGov) => {\n    this.setState({\n      redeemSkipGov,\n      redeemSkipGovTokens:[],\n      agreeSkipGovTokens:false,\n      skippedGovTokensBalance:this.functionsUtil.BNify(0),\n      redeemGovTokens:redeemSkipGov?false:this.state.redeemGovTokens\n    });\n  }\n\n  getSkippedGovTokensFlags = async () => {\n    const govTokensIndexes = await this.functionsUtil.getGovTokensIndexes(this.props.account,this.props.tokenConfig);\n    const govTokensFlags = Object.keys(govTokensIndexes).map( token => {\n      return this.state.redeemSkipGovTokens.includes(token);\n    });\n    // console.log('getSkippedGovTokensFlags',govTokensIndexes,govTokensFlags);\n    return govTokensFlags;\n  }\n\n  calculateSkippedGovTokens = async () => {\n    let skippedGovTokensBalance = this.functionsUtil.BNify(0);\n    const DAITokenConfig = this.functionsUtil.getGlobalConfig(['stats','tokens','DAI']);\n\n    await this.functionsUtil.asyncForEach(this.state.redeemSkipGovTokens, async (govToken) => {\n      const govTokenConfig = this.functionsUtil.getGlobalConfig(['govTokens',govToken]);\n      const govTokenPrice = await this.functionsUtil.getUniswapConversionRate(DAITokenConfig,govTokenConfig);\n      const skippedAmount = this.props.govTokensUserBalances[govToken].times(govTokenPrice);\n      skippedGovTokensBalance = skippedGovTokensBalance.plus(skippedAmount);\n    });\n\n    const _skipGovTokenRedeem = await this.getSkippedGovTokensFlags();\n    const WETHTokenConfig = this.functionsUtil.getGlobalConfig(['stats','tokens','WETH']);\n\n    const [\n      wethPrice,\n      redeemGasUsage,\n      skipGovRedeemGasUsage\n    ] = await Promise.all([\n      this.functionsUtil.getUniswapConversionRate(DAITokenConfig,WETHTokenConfig),\n      this.functionsUtil.estimateMethodGasUsage(this.props.tokenConfig.idle.token, 'redeemIdleToken', [this.functionsUtil.normalizeTokenAmount(this.props.idleTokenBalance,this.props.tokenConfig.decimals)], this.props.account),\n      this.functionsUtil.estimateMethodGasUsage(this.props.tokenConfig.idle.token, 'redeemIdleTokenSkipGov', [this.functionsUtil.normalizeTokenAmount(this.props.idleTokenBalance,this.props.tokenConfig.decimals),_skipGovTokenRedeem], this.props.account)\n    ]);\n\n    const skipGovTokensGasSave = redeemGasUsage && skipGovRedeemGasUsage ? redeemGasUsage.minus(skipGovRedeemGasUsage) : this.functionsUtil.BNify(0);\n    const skipGovTokensGasSaveUSD = skipGovTokensGasSave ? skipGovTokensGasSave.times(wethPrice) : this.functionsUtil.BNify(0);\n\n    this.setState({\n      skipGovTokensGasSave,\n      skipGovTokensGasSaveUSD,\n      skippedGovTokensBalance\n    });\n    return skippedGovTokensBalance;\n  }\n\n  setRedeemSkipGovTokens = (token,checked) => {\n    this.setState((prevState) => {\n      const redeemSkipGovTokens = Object.assign([],prevState.redeemSkipGovTokens);\n      if (!checked && redeemSkipGovTokens.includes(token)){\n        redeemSkipGovTokens.splice(redeemSkipGovTokens.indexOf(token),1);\n      } else if (checked && !redeemSkipGovTokens.includes(token)) {\n        redeemSkipGovTokens.push(token);\n      }\n      return {\n        redeemSkipGovTokens\n      };\n    },() => {\n      this.calculateSkippedGovTokens();\n    });\n  }\n\n  toggleErc20ForwarderEnabled = (erc20ForwarderEnabled) => {\n    const newState = {\n      erc20ForwarderEnabled\n    };\n\n    this.setState(newState, () => {\n      this.cancelTransaction();\n    });\n  }\n\n  toggleMetaTransactionsEnabled = (metaTransactionsEnabled) => {\n    this.setState({\n      metaTransactionsEnabled\n    });\n  }\n\n  async loadProxyContracts(){\n    const actions = ['deposit','redeem'];\n    const newState = {\n      actionProxyContract:{},\n      erc20ForwarderContract:{}\n    };\n\n    await this.functionsUtil.asyncForEach(actions,async (action) => {\n      let mintProxyContractInfo = null;\n      const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods',action,'erc20ForwarderEnabled']);\n\n      if (depositErc20ForwarderEnabled){\n        mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract','methods',action,'erc20ForwarderProxyContract','forwarder']);\n\n        await this.props.initContract(mintProxyContractInfo.name,mintProxyContractInfo.address,mintProxyContractInfo.abi);\n\n        // Init contract for erc20 forwarder\n        const erc20ForwarderContractInfo = this.functionsUtil.getGlobalConfig(['contract','methods',action,'erc20ForwarderProxyContract','tokens',this.props.selectedToken]);\n        if (erc20ForwarderContractInfo){\n          mintProxyContractInfo = erc20ForwarderContractInfo;\n          const erc20ForwarderContract = await this.props.initContract(erc20ForwarderContractInfo.name,erc20ForwarderContractInfo.address,erc20ForwarderContractInfo.abi);\n          newState.erc20ForwarderContract[action] = erc20ForwarderContractInfo;\n          newState.erc20ForwarderContract[action].contract = erc20ForwarderContract.contract;\n        }\n      }\n\n      if (!mintProxyContractInfo){\n        mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract','methods',action,'proxyContract']);\n      }\n\n      const hasProxyContract = mintProxyContractInfo && mintProxyContractInfo.enabled;\n      newState.actionProxyContract[action] = hasProxyContract ? mintProxyContractInfo : null;\n      if (hasProxyContract){\n        const proxyContract = await this.props.initContract(mintProxyContractInfo.name,mintProxyContractInfo.address,mintProxyContractInfo.abi);\n        newState.actionProxyContract[action].contract = proxyContract.contract;\n        newState.actionProxyContract[action].approved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,mintProxyContractInfo.address,this.props.account);\n      }\n    });\n\n    this.setState(newState);\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadAPY(){\n    const tokenAprs = await this.functionsUtil.getTokenAprs(this.props.tokenConfig);\n    if (tokenAprs && tokenAprs.avgApy !== null){\n      const tokenAPY = this.functionsUtil.BNify(tokenAprs.avgApy).toFixed(2);\n\n      let curveAPY = null;\n      if (this.state.canDepositCurve){\n        curveAPY = await this.functionsUtil.getCurveAPY();\n        // console.log('curveAPY',curveAPY);\n        if (curveAPY){\n          curveAPY = curveAPY.plus(tokenAPY);\n        }\n      }\n      this.setState({\n        tokenAPY,\n        curveAPY\n      });\n    }\n  }\n\n  getReferralAddress(){\n    let _referral = this.functionsUtil.getQueryStringParameterByName('_referral');\n    if (!this.functionsUtil.checkAddress(_referral)){\n      _referral = null;\n    }\n    return _referral;\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    if (this.props.tokenBalance === null){\n      return false;\n    }\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    const erc20ForwarderEnabledChanged = prevState.erc20ForwarderEnabled !==  this.state.erc20ForwarderEnabled;\n    const tokenBalanceChanged = prevProps.tokenBalance !== this.props.tokenBalance && this.props.tokenBalance !== null;\n\n    if (tokenChanged || tokenBalanceChanged || erc20ForwarderEnabledChanged){\n      await this.loadProxyContracts();\n      this.loadTokenInfo();\n      return false;\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n\n    if (actionChanged || fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const inputValueChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputValueChanged){\n      // this.checkMinAmountForMint();\n    }\n\n    const redeemSkipGovChanged = prevState.redeemSkipGov !== this.state.redeemSkipGov;\n    const redeemGovTokensChanged = prevState.redeemGovTokens !== this.state.redeemGovTokens;\n    const agreeSkipGovTokensChanged = prevState.agreeSkipGovTokens !== this.state.agreeSkipGovTokens;\n    const redeemSkipGovTokensChanged = JSON.stringify(prevState.redeemSkipGovTokens) !== JSON.stringify(this.state.redeemSkipGovTokens);\n\n    if (redeemGovTokensChanged || actionChanged || redeemSkipGovTokensChanged || redeemSkipGovChanged || agreeSkipGovTokensChanged){\n      this.checkButtonDisabled();\n    }\n\n    const depositCurveChanged = prevState.depositCurveEnabled !== this.state.depositCurveEnabled;\n    const metaTransactionsChanged = prevState.metaTransactionsEnabled !== this.state.metaTransactionsEnabled;\n    if (metaTransactionsChanged || depositCurveChanged){\n      const tokenApproved = await this.checkTokenApproved();\n      this.setState({\n        tokenApproved\n      });\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateCurveSlippage();\n    }\n  }\n\n  async checkMinAmountForMint(){\n    let showPoolPerc = false;\n    let totalAUM = this.state.totalAUM;\n    let maxUnlentPerc = this.state.maxUnlentPerc;\n    const isRisk = this.props.selectedStrategy === 'risk';\n    const inputValue = this.functionsUtil.BNify(this.state.inputValue[this.state.action]);\n\n    if (inputValue.gt(this.props.tokenBalance)){\n      return false;\n    }\n\n    const convertedAmount = await this.functionsUtil.convertTokenBalance(inputValue,this.props.selectedToken,this.props.tokenConfig,isRisk);\n    let minAmountForMint = this.functionsUtil.BNify(this.functionsUtil.getGlobalConfig(['contract','methods','deposit','minAmountForMint']));\n    let minAmountForMintReached = convertedAmount.gte(minAmountForMint);\n\n    // Check token minAmountForMint\n    if (minAmountForMintReached){\n      if (this.props.tokenConfig.deposit && this.props.tokenConfig.deposit.minAmountForMint && convertedAmount.lt(this.props.tokenConfig.deposit.minAmountForMint)){\n        minAmountForMintReached = false;\n      } else {\n        [\n          maxUnlentPerc,\n          totalAUM\n        ] = await Promise.all([\n          maxUnlentPerc || this.functionsUtil.genericContractCall(this.props.tokenConfig.idle.token, 'maxUnlentPerc'),\n          totalAUM ||this.functionsUtil.loadAssetField('pool',this.props.selectedToken,this.props.tokenConfig,this.props.account)\n        ]);\n\n        if (maxUnlentPerc && totalAUM){\n          const depositPerc = inputValue.div(totalAUM).times(100);\n          maxUnlentPerc = this.functionsUtil.BNify(maxUnlentPerc);\n          const maxUnlentPercFormatted = maxUnlentPerc.div(1e3).times(2);\n          if (depositPerc.lt(maxUnlentPercFormatted)){\n            minAmountForMintReached = false;\n          } else if (totalAUM.times(maxUnlentPercFormatted.div(100)).gt(minAmountForMint)) {\n            showPoolPerc = true;\n            minAmountForMint = totalAUM.times(maxUnlentPercFormatted.div(100));\n          }\n        }\n      }\n    }\n\n    this.setState({\n      totalAUM,\n      showPoolPerc,\n      maxUnlentPerc,\n      minAmountForMint,\n      minAmountForMintReached\n    });\n  }\n\n  async calculateCurveSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,curvePoolContractInfo.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositCurveBalance = amount;\n        newState.depositCurveSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n      break;  \n      case 'redeem':\n        // newState.redeemBalance = amount;\n        // newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateCurveSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  checkUseProxyContract = () => {\n    const proxyContract = this.state.actionProxyContract[this.state.action];\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','metaTransactionsEnabled']) && this.state.metaTransactionsEnabled;\n    return ((depositErc20ForwarderEnabled || depositMetaTransactionsEnabled) && proxyContract && this.props.biconomy);\n  }\n\n  approveContract = async (callbackApprove,callbackReceiptApprove) => {\n    if (this.state.depositCurveEnabled){\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve','depositContract']);\n      this.functionsUtil.enableERC20(this.props.selectedToken,curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n    } else {\n      // Check Proxy Contract Approved for Deposit with Biconomy\n      const useProxyContract = this.checkUseProxyContract();\n      if (useProxyContract){\n        const proxyContract = this.state.actionProxyContract[this.state.action];\n        this.functionsUtil.enableERC20(this.props.selectedToken,proxyContract.address,callbackApprove,callbackReceiptApprove);\n      } else {\n        this.functionsUtil.enableERC20(this.props.selectedToken,this.props.tokenConfig.idle.address,callbackApprove,callbackReceiptApprove);\n      }\n    }\n  }\n\n  checkTokenApproved = async () => {\n    let tokenApproved = false;\n    if (this.state.depositCurveEnabled){\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve','depositContract']);\n      tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,curveDepositContract.address,this.props.account);\n    } else {\n      // Check Proxy Contract Approved for Deposit with Biconomy\n      const useProxyContract = this.checkUseProxyContract();\n      if (useProxyContract){\n        // Check for Permit Deposit\n        const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n        if (depositErc20ForwarderEnabled){\n          const permitEnabled = this.functionsUtil.getGlobalConfig(['permit',this.props.selectedToken]);\n          if (permitEnabled){\n            return true;\n          }\n        }\n        // Check proxy contract approved\n        const proxyContract = this.state.actionProxyContract[this.state.action];\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,proxyContract.address,this.props.account);\n        // console.log('tokenApproved 1',tokenApproved);\n      } else {\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,this.props.tokenConfig.idle.address,this.props.account);\n        // console.log('tokenApproved 2',tokenApproved);\n      }\n    }\n\n    return tokenApproved;\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = await this.checkTokenApproved();\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.props.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.approveContract(callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  loadTokenInfo = async () => {\n\n    if (this.state.componentMounted){\n      this.setState({\n        componentMounted:false\n      });\n    }\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token]);\n    const curveTokenEnabled = curveConfig.enabled && curveTokenConfig && curveTokenConfig.enabled;\n\n    const [\n      tokenApproved,\n      contractPaused,\n      curveSwapContract,\n      curveDepositContract,\n      unlentBalance,\n      {migrationEnabled},\n      curveTokenBalance,\n    ] = await Promise.all([\n      this.checkTokenApproved(),\n      this.functionsUtil.checkContractPaused(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract(),\n      this.functionsUtil.getUnlentBalance(this.props.tokenConfig),\n      this.functionsUtil.checkMigration(this.props.tokenConfig,this.props.account),\n      curveTokenEnabled ? this.functionsUtil.getCurveTokenBalance(this.props.account) : null\n    ]);\n\n    const canDeposit = this.props.tokenBalance && this.functionsUtil.BNify(this.props.tokenBalance).gt(0);\n    const canRedeem = this.props.idleTokenBalance && this.functionsUtil.BNify(this.props.idleTokenBalance).gt(0);\n\n    const canDepositCurve = curveTokenEnabled && canDeposit;\n    const depositCurveEnabled = canDepositCurve;\n\n    const showETHWrapperEnabled = this.props.selectedToken === 'WETH' && (this.state.showETHWrapperEnabled || !canDeposit);\n\n    const canRedeemCurve = curveTokenEnabled && curveTokenBalance && curveTokenBalance.gt(0);\n    const redeemCurveEnabled = canRedeemCurve;\n\n    const tokenGovTokens = this.functionsUtil.getTokenGovTokens(this.props.tokenConfig);\n\n    const newState = {...this.state};\n\n    // Check curve deposit enabled\n    if (newState.depositCurveEnabled && !curveTokenEnabled){\n      newState.depositCurveEnabled = false;\n    }\n    \n\n    newState.canRedeem = canRedeem;\n    newState.canDeposit = canDeposit;\n    newState.unlentBalance = unlentBalance;\n    newState.tokenApproved = tokenApproved;\n    newState.tokenGovTokens = tokenGovTokens;\n    newState.contractPaused = contractPaused;\n    newState.canRedeemCurve = canRedeemCurve;\n    newState.canDepositCurve = canDepositCurve;\n    newState.migrationEnabled = migrationEnabled;\n    newState.curveTokenBalance = curveTokenBalance;\n    newState.curveSwapContract = curveSwapContract;\n    newState.redeemCurveEnabled = redeemCurveEnabled;\n    newState.depositCurveEnabled = depositCurveEnabled;\n    newState.curveDepositContract = curveDepositContract;\n    newState.showETHWrapperEnabled = showETHWrapperEnabled;\n\n    newState.txError = {\n      redeem:false,\n      deposit:false\n    };\n    newState.processing = {\n      redeem:{\n        txHash:null,\n        loading:false\n      },\n      deposit:{\n        txHash:null,\n        loading:false\n      },\n      approve:{\n        txHash:null,\n        loading:false\n      },\n      boost:{\n        txHash:null,\n        loading:false\n      }\n    };\n    newState.inputValue = {\n      boost:null,\n      redeem:null,\n      deposit:null\n    };\n    newState.fastBalanceSelector = {\n      boost:null,\n      redeem:null,\n      deposit:null\n    };\n\n    newState.componentMounted = true;\n\n    this.setState(newState,() => {\n      this.checkAction();\n      this.loadAPY();\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      erc20ForwarderTx:null,\n      loadingErc20ForwarderTx:false,\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const redeemGovTokens = this.state.redeemGovTokens;\n    const selectedPercentage = this.getFastBalanceSelector();\n    const inputValue = this.state.inputValue[this.state.action];\n    const redeemSkipGov = this.state.redeemSkipGov && this.state.redeemSkipGovTokens.length>0 && this.state.agreeSkipGovTokens;\n\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','metaTransactionsEnabled']) && this.state.metaTransactionsEnabled;\n\n    let loading = true;\n\n    switch (this.state.action){\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        if (!this.state.tokenApproved){\n          return this.approveToken();\n        }\n\n        if (localStorage){\n          this.functionsUtil.setLocalStorage('redirectToFundsAfterLogged',0);\n        }\n\n        this.setState({\n          lendingProcessing: this.props.account,\n          lendAmount: '',\n          genericError: '',\n        });\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.props.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if ((this.state.metaTransactionsEnabled || this.state.erc20ForwarderEnabled) && txError){\n            this.setState({\n              erc20ForwarderTx:null,\n              loadingErc20ForwarderTx:false,\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n        const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token,'enabled']);\n\n        // Curve Deposit\n        if (curveTokenEnabled && this.state.depositCurveEnabled){\n\n          const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,curvePoolContractInfo.decimals);\n\n          const amounts = await this.functionsUtil.getCurveAmounts(this.props.tokenConfig.idle.token,tokensToDeposit);\n          let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n          if (this.state.maxSlippage){\n            minMintAmount = this.functionsUtil.BNify(minMintAmount);\n            minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n            minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n          }\n          \n          const depositParams = [amounts,minMintAmount];\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, callbackDeposit, callbackReceiptDeposit);\n        // Normal Deposit\n        } else {\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n\n          // const gasLimitDeposit = this.functionsUtil.BNify(1000000);\n          let depositParams = [];\n\n          // Use Proxy Contract if enabled\n          const useProxyContract = this.checkUseProxyContract();\n          if (useProxyContract){\n            const mintProxyContractInfo = this.state.actionProxyContract[this.state.action];\n            const mintProxyContract = mintProxyContractInfo.contract;\n\n            // Use Meta-Transactions\n            if (depositMetaTransactionsEnabled){\n              depositParams = [tokensToDeposit, this.props.tokenConfig.idle.address];\n              const functionCall = mintProxyContract.methods[mintProxyContractInfo.function](...depositParams);\n              const functionSignature = functionCall.encodeABI();\n              // console.log('mintProxyContract',mintProxyContractInfo.function,depositParams);\n              // if (this.state.metaTransactionsEnabled){\n              contractSendResult = await this.functionsUtil.sendBiconomyTxWithPersonalSign(mintProxyContractInfo.name, functionSignature, callbackDeposit, callbackReceiptDeposit);\n              // } else {\n              //   contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n              // }\n            // Use Erc20 Forwarder\n            } else if (depositErc20ForwarderEnabled){\n              // Build ERC20 Forwarder Tx\n              if (!this.state.erc20ForwarderTx){\n                this.setState({\n                  txError:{\n                    [this.state.action]:false\n                  },\n                  loadingErc20ForwarderTx:true\n                }, async () => {\n                  const erc20ForwarderContract = this.state.erc20ForwarderContract[this.state.action];\n                  const signedParameters = await this.functionsUtil.signPermit(this.props.selectedToken, this.props.account, erc20ForwarderContract.name);\n                  console.log('signedParameters',signedParameters);\n                  if (signedParameters){\n                    const { expiry, nonce, r, s, v } = signedParameters;\n                    depositParams = [tokensToDeposit, parseInt(nonce), expiry, v, r, s];\n\n                    console.log('permitAndDeposit',mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams);\n\n                    // contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n\n                    const permitType = erc20ForwarderContract.permitType;\n                    const functionCall = erc20ForwarderContract.contract.methods[erc20ForwarderContract.function](...depositParams);\n                    const functionSignature = functionCall.encodeABI();\n\n                    // console.log('buildBiconomyErc20ForwarderTx 1',permitType, erc20ForwarderContract.function, depositParams, functionCall, functionSignature);\n\n                    const gasLimit = 1000000;//await functionCall.estimateGas({from: this.props.account}); // 5000000;\n\n                    console.log('buildBiconomyErc20ForwarderTx',mintProxyContractInfo.name, depositParams, functionSignature, gasLimit);\n\n                    // debugger;\n\n                    const erc20ForwarderTx = await this.functionsUtil.buildBiconomyErc20ForwarderTx(erc20ForwarderContract.name, this.props.tokenConfig.address, permitType, functionSignature, gasLimit);\n                    console.log('erc20ForwarderTx',erc20ForwarderTx);\n                    return this.setState({\n                      erc20ForwarderTx,\n                      loadingErc20ForwarderTx:false\n                    });\n                  } else {\n                    return this.setState((prevState) => ({\n                      processing: {\n                        ...prevState.processing,\n                        [this.state.action]:{\n                          txHash:null,\n                          loading:false\n                        }\n                      },\n                      signedParameters:null,\n                      erc20ForwarderTx:null,\n                      loadingErc20ForwarderTx:false\n                    }));\n                  }\n                });\n              // Send ERC20 Forwarder Tx\n              } else {\n                this.setState({\n                  txError:{\n                    [this.state.action]:false\n                  },\n                  loadingErc20ForwarderTx:true\n                }, async () => {\n                  const metaInfo = {};\n                  const permitOptions = {};\n                  const erc20ForwarderContract = this.state.erc20ForwarderContract[this.state.action];\n                  const erc20ForwarderBaseContract = this.functionsUtil.getGlobalConfig(['contract','methods',this.state.action,'erc20ForwarderProxyContract','forwarder']);\n\n                  const signedParameters = await this.functionsUtil.signPermit(this.props.selectedToken, this.props.account, erc20ForwarderBaseContract.name, 1);\n                  if (signedParameters){\n\n                    this.setState({\n                      signedParameters\n                    });\n\n                    const { expiry, nonce, r, s, v } = signedParameters;\n                    permitOptions.v = v;\n                    permitOptions.r = r;\n                    permitOptions.s = s;\n                    permitOptions.value = 0; //in case of DAI passing dummy value for the sake of struct (similar to token address in EIP2771)\n                    permitOptions.allowed = true;\n                    permitOptions.expiry = parseInt(expiry);\n                    permitOptions.holder = this.props.account;\n                    permitOptions.nonce = parseInt(nonce.toString());\n                    permitOptions.spender = erc20ForwarderBaseContract.address;\n\n                    metaInfo.permitData = permitOptions;\n                    metaInfo.permitType = erc20ForwarderContract.permitType;\n\n                    console.log('sendBiconomyTxWithErc20Forwarder',permitOptions,metaInfo);\n\n                    await this.functionsUtil.asyncTimeout(200);\n\n                    contractSendResult = await this.functionsUtil.sendBiconomyTxWithErc20Forwarder(this.state.erc20ForwarderTx.request, metaInfo, callbackDeposit, callbackReceiptDeposit);\n\n                    this.setState({\n                      erc20ForwarderTx:null,\n                      loadingErc20ForwarderTx:false\n                    });\n                  } else {\n                    return this.setState((prevState) => ({\n                      processing: {\n                        ...prevState.processing,\n                        [this.state.action]:{\n                          txHash:null,\n                          loading:false\n                        }\n                      },\n                      signedParameters:null,\n                      erc20ForwarderTx:null,\n                      loadingErc20ForwarderTx:false\n                    }));\n                  }\n                });\n              }\n            }\n          // Use main contract if no proxy contract exists\n          } else {\n            /*\n            let _skipMint = !this.state.directMint && this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMint']);\n            _skipMint = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : _skipMint;\n\n            // Check if deposited amount is greated that general lower limit for direct mint\n            if (_skipMint && this.state.minAmountForMintReached){\n              _skipMint = false;\n            }\n            */\n            // Always skip mint\n            let _skipMint = true;\n\n            const _referral = this.getReferralAddress() || '0x0000000000000000000000000000000000000000';\n            depositParams = [tokensToDeposit, _skipMint, _referral];\n            // console.log('depositParams',depositParams);\n            contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'mintIdleToken', depositParams, callbackDeposit, callbackReceiptDeposit);\n          }\n        }\n      break;\n      case 'redeem':\n\n        if (redeemGovTokens){\n          const callbackRedeem = (tx,error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_gov`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: 0\n            };\n\n            if (error){\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error'){\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  txHash:null,\n                  loading:false\n                }\n              }\n            }));\n\n            if (txSucceeded){\n              this.setState((prevState) => ({\n                inputValue:{\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'redeemIdleToken', [0], callbackRedeem, callbackReceiptRedeem);\n          \n        } else {\n\n          if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n            return false;\n          }\n\n          const txData = {\n            value:this.functionsUtil.BNify(inputValue)\n          };\n\n          let idleTokenToRedeem = null;\n          if (selectedPercentage){\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage);\n          } else {\n            const idleTokenPriceWithFee = await this.functionsUtil.getIdleTokenPriceWithFee(this.props.tokenConfig,this.props.account)\n            idleTokenToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals)).div(idleTokenPriceWithFee);\n          }\n\n          // Check if idleTokens to redeem > idleToken balance\n          if (idleTokenToRedeem.gt(this.functionsUtil.BNify(this.props.idleTokenBalance))){\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance);\n          }\n\n          // Normalize number\n          idleTokenToRedeem = this.functionsUtil.normalizeTokenAmount(idleTokenToRedeem,18);\n\n          if (!idleTokenToRedeem){\n            return false;\n          }\n\n          const callbackRedeem = (tx,error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_partial`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: parseInt(inputValue)\n            };\n\n            if (error){\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error'){\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  txHash:null,\n                  loading:false\n                }\n              }\n            }));\n\n            if (txSucceeded){\n              this.setState((prevState) => ({\n                inputValue:{\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          let redeemMethod = 'redeemIdleToken';\n          let redeemParams = [idleTokenToRedeem];\n\n          if (redeemSkipGov){\n            redeemMethod = 'redeemIdleTokenSkipGov';\n            const _skipGovTokenRedeem = await this.getSkippedGovTokensFlags();\n            redeemParams.push(_skipGovTokenRedeem);\n          }\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, redeemMethod, redeemParams, callbackRedeem, callbackReceiptRedeem, txData);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    if (contractSendResult !== false || loading !== this.state.processing[this.state.action].loading){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  showMaxSlippage = () => {\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  checkAction = () => {\n    let action = this.state.action;\n\n    switch(action){\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = 'deposit';\n        }\n      break;\n      default:\n      break;\n    }\n\n    if (action !== this.state.action){\n      this.setState({\n        action\n      },() => {\n        this.checkButtonDisabled();\n      });\n    } else {\n      this.checkButtonDisabled();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && (amount.lte(0) || amount.gt(this.props.tokenBalance)));\n      break;\n      case 'redeem':\n        buttonDisabled = !this.state.canRedeemCurve && !this.state.redeemGovTokens && (buttonDisabled || ( !amount || amount.lte(0) || amount.gt(this.props.redeemableBalance) ));\n\n        if (!buttonDisabled && this.state.redeemSkipGov && this.state.redeemSkipGovTokens.length>0 && !this.state.agreeSkipGovTokens){\n          buttonDisabled = true;\n        }\n        // console.log('checkButtonDisabled',this.state.redeemSkipGov,this.state.redeemSkipGovTokens.length,this.state.agreeSkipGovTokens,buttonDisabled);\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.props.tokenBalance ? this.functionsUtil.BNify(this.props.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        amount = this.props.redeemableBalance ? this.functionsUtil.BNify(this.props.redeemableBalance).times(selectedPercentage) : null;\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  changeInputValue = async (e) => {\n    if (!this.state.action){\n      return false;\n    }\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem && !this.state.canRedeemCurve){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const viewOnly = this.props.connectorName === 'custom';\n\n    const govTokensDisabled = this.props.tokenConfig.govTokensDisabled;\n    const govTokensEnabled = !govTokensDisabled && this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'govTokensEnabled']) && Object.keys(this.state.tokenGovTokens).length>0;\n    const skipMintForDepositEnabled = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : true;\n    const skipMintCheckboxEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMintCheckboxEnabled']) && skipMintForDepositEnabled;\n\n    const showRedeemFlow = this.state.canRedeem && (!this.state.redeemCurveEnabled || this.state.showRedeemFlow) && this.state.action==='redeem';\n\n    const redeemGovTokenEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','redeemGovTokens','enabled']) && govTokensEnabled && showRedeemFlow && this.props.govTokensBalance.gt(0);\n    const redeemGovTokens = redeemGovTokenEnabled && this.state.redeemGovTokens;\n\n    const redeemSkipGovConfig = this.functionsUtil.getGlobalConfig(['contract','methods','redeemSkipGov']);\n    const redeemSkipGovEnabled = redeemSkipGovConfig && !redeemSkipGovConfig.disabledTokens.includes(this.props.tokenConfig.idle.token) && govTokensEnabled && showRedeemFlow;\n    const redeemSkipGov = redeemSkipGovEnabled && this.state.redeemSkipGov && Object.keys(this.props.govTokensUserBalances).length>0 && this.props.govTokensBalance.gt(0);\n    const redeemSkipGovNoTokens = redeemSkipGovEnabled && this.state.redeemSkipGov && (!Object.keys(this.props.govTokensUserBalances).length || this.props.govTokensBalance.lte(0));\n\n\n    const showAdvancedRedeemOptions = redeemGovTokenEnabled || redeemSkipGovEnabled;\n    // console.log('showAdvancedRedeemOptions',showAdvancedRedeemOptions,redeemGovTokenEnabled,redeemSkipGovEnabled,govTokensEnabled,showRedeemFlow);\n\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderEnabled']);\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','metaTransactionsEnabled']);\n\n    // Biconomy Start\n    const metaTransactionsAvailable = depositMetaTransactionsEnabled && this.props.biconomy && this.state.actionProxyContract[this.state.action];\n    const useMetaTx = metaTransactionsAvailable && this.state.metaTransactionsEnabled;\n\n    const erc20ForwarderEnabled = depositErc20ForwarderEnabled && this.props.biconomy && this.props.erc20ForwarderClient && this.state.actionProxyContract[this.state.action];\n\n    // console.log(erc20ForwarderEnabled,depositErc20ForwarderEnabled,this.props.biconomy,this.props.erc20ForwarderClient,this.state.actionProxyContract[this.state.action]);\n    // Biconomy End\n\n    const totalBalance = this.state.action === 'deposit' ? this.props.tokenBalance : this.props.redeemableBalance;\n    const migrateText = this.state.migrationEnabled && this.props.tokenConfig.migration.message !== undefined ? this.props.tokenConfig.migration.message : null;\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token,'enabled']);\n\n    const depositCurve = curveTokenEnabled && this.state.depositCurveEnabled && this.state.action === 'deposit';\n\n    const showDepositOptions = this.state.action === 'deposit' && !this.state.contractPaused && (curveTokenEnabled || this.state.tokenApproved);\n\n    const showDepositCurve = showDepositOptions && curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canDepositCurve && this.state.action === 'deposit';\n    const showRedeemCurve = curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canRedeemCurve && this.state.action === 'redeem';\n\n    const showCurveSlippage = depositCurve && this.state.depositCurveSlippage && this.state.depositCurveBalance && !this.state.buttonDisabled;\n\n    const showRebalanceOption = false && this.state.canDeposit && skipMintCheckboxEnabled && this.state.action === 'deposit';\n    const showAdvancedDepositOptions = showDepositCurve || showRebalanceOption;\n\n    const batchDepositInfo = this.functionsUtil.getGlobalConfig(['tools','batchDeposit']);\n    const batchDepositEnabled = batchDepositInfo.enabled && typeof batchDepositInfo.props.availableTokens[this.props.tokenConfig.idle.token] !== 'undefined';\n    const batchDepositDepositEnabled = batchDepositInfo.depositEnabled;\n\n    const showBatchDeposit = !useMetaTx && batchDepositEnabled && batchDepositDepositEnabled && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    const ethWrapperInfo = this.functionsUtil.getGlobalConfig(['tools','ethWrapper']);\n    const ETHWrapperComponent = ethWrapperInfo.subComponent;\n    const showETHWrapper = this.props.selectedToken === 'WETH' && ethWrapperInfo.enabled && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    const canPerformAction = /*!depositCurve && !this.state.redeemCurveEnabled && */((this.state.action === 'deposit' && this.state.canDeposit) || (this.state.action === 'redeem' && this.state.canRedeem) || redeemGovTokens) && (!this.state.showETHWrapperEnabled || this.state.action === 'redeem');\n    const showActionFlow = !redeemGovTokens && canPerformAction;\n\n    const showBuyFlow = this.state.componentMounted && (!showDepositCurve || this.state.showBuyFlow) && !this.state.depositCurveEnabled && this.state.tokenApproved && !this.state.contractPaused && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.action === 'deposit' && !this.state.canDeposit && !this.state.showETHWrapperEnabled;\n\n    const _referral = this.getReferralAddress();\n    const showReferral = _referral && this.state.action === 'deposit' && showActionFlow && !showBuyFlow;\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          <Box\n            width={1}\n          >\n            <Text mb={1}>\n              Select your asset:\n            </Text>\n            <AssetSelector\n              {...this.props}\n            />\n          </Box>\n          {\n            viewOnly ? (\n              <IconBox\n                cardProps={{\n                  mt:3\n                }}\n                icon={'Visibility'}\n                text={'You are using Idle in \"Read-Only\" mode.<br />Logout and connect with your wallet to interact.'}\n              />\n            ) : (\n              <Migrate\n                {...this.props}\n                migrateTextBefore={migrateText}\n                migrateText={migrateText !== null ? '' : null}\n                toggleSkipMigration={this.toggleSkipMigration.bind(this)}\n              >\n                {\n                  !this.props.account ? (\n                    <ConnectBox\n                      {...this.props}\n                    />\n                  ) : this.state.componentMounted ? (\n                    this.state.action && (\n                      <Box\n                        width={1}\n                      >\n                        <Flex\n                          mt={2}\n                          flexDirection={'column'}\n                        >\n                          <Text mb={2}>\n                            Choose the action:\n                          </Text>\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'space-between'}\n                          >\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                width:0.48,\n                                onMouseDown:() => {\n                                  this.setAction('deposit');\n                                }\n                              }}\n                              isInteractive={true}\n                              isActive={ this.state.action === 'deposit' }\n                            >\n                              <Flex\n                                my={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <TransactionField\n                                  transaction={{\n                                    action:'deposit'\n                                  }}\n                                  fieldInfo={{\n                                    name:'icon',\n                                    props:{\n                                      mr:3\n                                    }\n                                  }}\n                                />\n                                <Text\n                                  fontSize={3}\n                                  fontWeight={3}\n                                >\n                                  Deposit\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                width:0.48,\n                                onMouseDown:() => {\n                                  this.setAction('redeem');\n                                }\n                              }}\n                              isInteractive={true}\n                              isActive={ this.state.action === 'redeem' }\n                              isDisabled={ !this.state.canRedeem && !this.state.canRedeemCurve }\n                            >\n                              <Flex\n                                my={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <TransactionField\n                                  transaction={{\n                                    action:'redeem'\n                                  }}\n                                  fieldInfo={{\n                                    name:'icon',\n                                    props:{\n                                      mr:3\n                                    }\n                                  }}\n                                />\n                                <Text\n                                  fontSize={3}\n                                  fontWeight={3}\n                                >\n                                  Redeem\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          </Flex>\n                        </Flex>\n                        {\n                          (showRedeemFlow && this.state.unlentBalance) &&\n                            <DashboardCard\n                              cardProps={{\n                                py:2,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={'LocalGasStation'}\n                                />\n                                <Text\n                                  px={2}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Available balance for Cheap Redeem\n                                </Text>\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'center'}\n                                    hoverColor={'copyColor'}\n                                  >\n                                    {this.state.unlentBalance.toFixed(4)} {this.props.selectedToken}\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.functionsUtil.getGlobalConfig(['messages','cheapRedeem'])}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              </Flex>\n                            </DashboardCard>\n                        }\n                        {\n                          showAdvancedRedeemOptions ? (\n                            <DashboardCard\n                              cardProps={{\n                                pt:2,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                                pb:this.state.showAdvancedOptions ? 3 : 2,\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <Link\n                                  ml={1}\n                                  mainColor={'primary'}\n                                  hoverColor={'primary'}\n                                  onClick={this.toggleShowAdvancedOptions}\n                                >\n                                  { this.state.showAdvancedOptions ? 'Hide' : 'Show' } advanced options\n                                </Link>\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={this.state.showAdvancedOptions ? 'ArrowDropUp' : 'ArrowDropDown'}\n                                />\n                              </Flex>\n                              {\n                                this.state.showAdvancedOptions &&\n                                  <Flex\n                                    mt={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      redeemGovTokenEnabled && \n                                        <Flex\n                                          alignItems={'center'}\n                                          justifyContent={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            checked={this.state.redeemGovTokens}\n                                            label={`Redeem governance tokens only`}\n                                            onChange={ e => this.toggleRedeemGovTokens(e.target.checked) }\n                                          />\n                                          <Link\n                                            color={'link'}\n                                            hoverColor={'link'}\n                                            onClick={ e => this.props.openTooltipModal('Redeem governance tokens',`This feature allows you to redeem just the amount of governance tokens accrued${ this.props.govTokensBalance && this.props.govTokensBalance.gt(0) ? ` (~${this.props.govTokensBalance.toFixed(2)}$)` : null } without redeeming the underlying token.`) }\n                                          >\n                                            (read more)\n                                          </Link>\n                                        </Flex>\n                                    }\n                                    {\n                                      redeemSkipGovEnabled && \n                                        <Flex\n                                          alignItems={'center'}\n                                          flexDirection={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            checked={this.state.redeemSkipGov}\n                                            label={`Redeem without governance tokens`}\n                                            onChange={ e => this.toggleRedeemSkipGov(e.target.checked) }\n                                          />\n                                          <Icon\n                                            mr={1}\n                                            size={'1.2em'}\n                                            name={'Warning'}\n                                            color={'#ffe000'}\n                                          />\n                                          <Link\n                                            color={'link'}\n                                            hoverColor={'link'}\n                                            onClick={ e => this.props.openTooltipModal('Redeem without governance tokens',this.functionsUtil.getGlobalConfig(['messages','redeemSkipGov'])) }\n                                          >\n                                            (read more)\n                                          </Link>\n                                        </Flex>\n                                    }\n                                  </Flex>\n                              }\n                            </DashboardCard>\n                          ) :  showAdvancedDepositOptions ? (\n                            <DashboardCard\n                              cardProps={{\n                                pt:2,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                                pb:this.state.showAdvancedOptions ? 3 : 2,\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <Link\n                                  ml={1}\n                                  mainColor={'primary'}\n                                  hoverColor={'primary'}\n                                  onClick={this.toggleShowAdvancedOptions}\n                                >\n                                  { this.state.showAdvancedOptions ? 'Hide' : 'Show' } advanced options\n                                </Link>\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={this.state.showAdvancedOptions ? 'ArrowDropUp' : 'ArrowDropDown'}\n                                />\n                              </Flex>\n                              {\n                                this.state.showAdvancedOptions &&\n                                  <Flex\n                                    mt={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      showDepositCurve && \n                                        <Flex\n                                          alignItems={'center'}\n                                          justifyContent={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            disabled={this.state.directMint}\n                                            label={`Deposit in the Curve Pool`}\n                                            checked={this.state.depositCurveEnabled}\n                                            onChange={ e => this.toggleDepositCurve(e.target.checked) }\n                                          />\n                                          <Link\n                                            mainColor={'primary'}\n                                            hoverColor={'primary'}\n                                            onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                          >\n                                            (read more)\n                                          </Link>\n                                        </Flex>\n                                    }\n                                    {\n                                      showRebalanceOption && \n                                        <Flex\n                                          alignItems={'center'}\n                                          justifyContent={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            label={`Rebalance the pool`}\n                                            checked={this.state.directMint}\n                                            disabled={this.state.depositCurveEnabled}\n                                            onChange={ e => this.toggleSkipMint(e.target.checked) }\n                                          />\n                                          <Tooltip\n                                            placement={'bottom'}\n                                            message={this.functionsUtil.getGlobalConfig(['messages','directMint'])}\n                                          >\n                                            <Icon\n                                              size={'1em'}\n                                              color={'cellTitle'}\n                                              name={\"InfoOutline\"}\n                                            />\n                                          </Tooltip>\n                                        </Flex>\n                                    }\n                                  </Flex>\n                              }\n                            </DashboardCard>\n                          ) : (\n                            <Flex\n                              width={1}\n                              flexDirection={'column'}\n                            >\n                              {\n                                showDepositCurve && (\n                                  <Flex\n                                    width={1}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <DashboardCard\n                                      isRainbow={true}\n                                      cardProps={{\n                                        py:3,\n                                        px:2,\n                                        mt:3,\n                                        display:'flex',\n                                        alignItems:'center',\n                                        flexDirection:'column',\n                                        justifyContent:'center',\n                                      }}\n                                    >\n                                      <Flex\n                                        width={1}\n                                        alignItems={'center'}\n                                        flexDirection={'column'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Image\n                                          height={'1.8em'}\n                                          src={curveConfig.params.image}\n                                        />\n                                        <Text\n                                          mt={2}\n                                          px={2}\n                                          fontSize={1}\n                                          color={'dark-gray'}\n                                          textAlign={'center'}\n                                        >\n                                          Deposit your tokens in the Curve Pool and boost your APY up to {this.state.curveAPY ? this.state.curveAPY.toFixed(2) : '-'}%.\n                                          <Link\n                                            ml={1}\n                                            mainColor={'primary'}\n                                            hoverColor={'primary'}\n                                            onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                          >\n                                            Read More\n                                          </Link>\n                                        </Text>\n                                        <Checkbox\n                                          mt={2}\n                                          required={false}\n                                          label={`Deposit in Curve`}\n                                          checked={this.state.depositCurveEnabled}\n                                          onChange={ e => this.toggleDepositCurve(e.target.checked) }\n                                        />\n                                      </Flex>\n                                    </DashboardCard>\n                                    {\n                                      (!this.state.showBuyFlow && !this.state.depositCurveEnabled && !this.state.canDeposit) &&\n                                        <Link\n                                          textAlign={'center'}\n                                          hoverColor={'primary'}\n                                          onClick={ e => this.setShowBuyFlow(true) }\n                                        >\n                                          I just want to deposit more {this.props.selectedToken}\n                                        </Link>\n                                    }\n                                  </Flex>\n                                )\n                              }\n                              {\n                                showRebalanceOption && (\n                                  <DashboardCard\n                                    cardProps={{\n                                      py:3,\n                                      px:2,\n                                      mt:3,\n                                      display:'flex',\n                                      alignItems:'center',\n                                      flexDirection:'column',\n                                      justifyContent:'center',\n                                    }}\n                                  >\n                                    <Flex\n                                      width={1}\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        color={'cellText'}\n                                        name={'InfoOutline'}\n                                      />\n                                      <Text\n                                        mt={1}\n                                        px={2}\n                                        fontSize={1}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        By checking this flag you can rebalance the pool and help all users gain an additional APR\n                                      </Text>\n                                    </Flex>\n                                    <Checkbox\n                                      mt={2}\n                                      required={false}\n                                      label={`Rebalance the pool`}\n                                      checked={this.state.directMint}\n                                      onChange={ e => this.toggleSkipMint(e.target.checked) }\n                                    />\n                                  </DashboardCard>\n                                )\n                              }\n                              {\n                                redeemGovTokenEnabled && (\n                                  <DashboardCard\n                                    cardProps={{\n                                      py:3,\n                                      px:2,\n                                      mt:3,\n                                      display:'flex',\n                                      alignItems:'center',\n                                      flexDirection:'column',\n                                      justifyContent:'center',\n                                    }}\n                                  >\n                                    <Flex\n                                      width={1}\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        color={'cellText'}\n                                        name={'InfoOutline'}\n                                      />\n                                      <Text\n                                        mt={1}\n                                        px={2}\n                                        fontSize={1}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        By redeeming your {this.props.selectedToken} you will automatically get also the proportional amount of governance tokens accrued{ this.props.govTokensBalance && this.props.govTokensBalance.gt(0) ? ` (~ $${this.props.govTokensBalance.toFixed(2)})` : null }.\n                                      </Text>\n                                    </Flex>\n                                    <Checkbox\n                                      mt={2}\n                                      required={false}\n                                      checked={this.state.redeemGovTokens}\n                                      label={`Redeem governance tokens only`}\n                                      onChange={ e => this.toggleRedeemGovTokens(e.target.checked) }\n                                    />\n                                  </DashboardCard>\n                                )\n                              }\n                            </Flex>\n                          )\n                        }\n                        {\n                          redeemSkipGov ? (\n                            <DashboardCard\n                              cardProps={{\n                                mt:2,\n                                mb:2,\n                                py:2,\n                                px:1\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                              >\n                                <Text\n                                  mt={1}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Select the gov tokens you want to give away:\n                                </Text>\n                                <Flex\n                                  mt={2}\n                                  width={1}\n                                  boxShadow={0}\n                                  style={{\n                                    flexWrap:'wrap'\n                                  }}\n                                  alignItems={'center'}\n                                  justifyContent={'center'}\n                                  >\n                                    {\n                                      Object.keys(this.props.govTokensUserBalances).map( token => {\n                                        const balance = this.props.govTokensUserBalances[token];\n                                        const isActive = this.state.redeemSkipGovTokens.includes(token);\n                                        const tokenConfig = this.functionsUtil.getGlobalConfig(['govTokens',token]);\n                                        return (\n                                          <Flex\n                                            p={2}\n                                            mb={1}\n                                            mx={1}\n                                            width={'auto'}\n                                            style={{\n                                              cursor:'pointer'\n                                            }}\n                                            borderRadius={2}\n                                            flexDirection={'row'}\n                                            key={`skipGovToken_${token}`}\n                                            justifyContent={'flex-start'}\n                                            backgroundColor={isActive ? '#2a4b78' : 'cardBgHover'}\n                                            onClick={ e => this.setRedeemSkipGovTokens(token,!this.state.redeemSkipGovTokens.includes(token)) }\n                                          >\n                                            <Checkbox\n                                              m={0}\n                                              required={false}\n                                              checked={isActive}\n                                              onChange={ e => this.setRedeemSkipGovTokens(token,e.target.checked) }\n                                            />\n                                            <AssetField\n                                              token={token}\n                                              tokenConfig={tokenConfig}\n                                              fieldInfo={{\n                                                name:'icon',\n                                                props:{\n                                                  mr:1,\n                                                  width:['1.4em','1.6em'],\n                                                  height:['1.4em','1.6em']\n                                                }\n                                              }}\n                                            />\n                                            <SmartNumber\n                                              ml={1}\n                                              fontSize={[0,2]}\n                                              fontWeight={500}\n                                              maxPrecision={4}\n                                              color={'cellText'}\n                                              number={balance.toString()}\n                                            />\n                                          </Flex>\n                                        );\n                                    })\n                                  }\n                                </Flex>\n                              </Flex>\n                            </DashboardCard>\n                          ) : redeemSkipGovNoTokens && (\n                            <DashboardCard\n                              cardProps={{\n                                p:2,\n                                my:2\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'MoneyOff'}\n                                  color={'cellText'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  You don't have any gov tokens to give away.\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          redeemSkipGov && this.functionsUtil.BNify(this.state.skippedGovTokensBalance).gt(0) ? (\n                            <DashboardCard\n                              cardProps={{\n                                p:2,\n                                my:2\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'Warning'}\n                                  color={'#ffe000'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={1}\n                                  color={'red'}\n                                  textAlign={'center'}\n                                >\n                                  You are giving away {this.functionsUtil.formatMoney(this.state.skippedGovTokensBalance)}$ worth of governance tokens!\n                                </Text>\n                                {\n                                  this.state.skipGovTokensGasSave && this.state.skipGovTokensGasSave.gte(0.0001) && (\n                                    <Text\n                                      mt={1}\n                                      fontSize={1}\n                                      color={'#00b84a'}\n                                      textAlign={'center'}\n                                    >\n                                      This will save you {this.state.skipGovTokensGasSave.toFixed(4)} ETH of gas (~{this.state.skipGovTokensGasSaveUSD.toFixed(2)}$)\n                                    </Text>\n                                  )\n                                }\n                                <Text\n                                  mt={1}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  To proceed with the redeem please give your authorization by checking the following flag:\n                                </Text>\n                                <Checkbox\n                                  my={1}\n                                  required={false}\n                                  checked={this.state.agreeSkipGovTokens}\n                                  label={`I agree to give away my governance tokens`}\n                                  onChange={ e => this.toggleAgreeSkipGovTokens(e.target.checked) }\n                                />\n                              </Flex>\n                            </DashboardCard>\n                          ) : redeemSkipGov && this.state.redeemSkipGovTokens.length>0 && (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                my:2\n                              }}\n                            >\n                              <FlexLoader\n                                flexProps={{\n                                  flexDirection:'row'\n                                }}\n                                loaderProps={{\n                                  size:'25px',\n                                }}\n                                textProps={{\n                                  ml:2\n                                }}\n                                text={'Loading estimated gas usage...'}\n                              />\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          showReferral && (\n                            <DashboardCard\n                              cardProps={{\n                                py:3,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'Share'}\n                                  color={'cellText'}\n                                />\n                                <Text\n                                  mt={1}\n                                  px={2}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  You are depositing with the following referral address:\n                                </Text>\n                                <Text\n                                  mt={1}\n                                  px={2}\n                                  fontSize={1}\n                                  fontWeight={500}\n                                  textAlign={'center'}\n                                  color={this.props.theme.colors.transactions.status.completed}\n                                >\n                                  {_referral}\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          (metaTransactionsAvailable && !showBuyFlow && !this.state.contractPaused) ? (\n                            <DashboardCard\n                              cardProps={{\n                                py:3,\n                                px:2,\n                                my:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              {\n                                this.state.metaTransactionsEnabled && this.state.txError[this.state.action] && this.state.actionProxyContract[this.state.action].approved ? (\n                                  <Flex\n                                    width={1}\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <Icon\n                                      size={'1.8em'}\n                                      name={'Warning'}\n                                      color={'cellText'}\n                                    />\n                                    <Text\n                                      mt={1}\n                                      fontSize={1}\n                                      color={'cellText'}\n                                      textAlign={'center'}\n                                    >\n                                      Seems like you are having some trouble with Meta-Transactions... Disable them by unchecking the box below and try again!\n                                    </Text>\n                                  </Flex>\n                                ) : this.functionsUtil.getWalletProvider() === 'WalletConnect' && this.state.metaTransactionsEnabled ? (\n                                  <Flex\n                                    width={1}\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <Icon\n                                      size={'1.8em'}\n                                      name={'Warning'}\n                                      color={'cellText'}\n                                    />\n                                    <Text\n                                      mt={1}\n                                      fontSize={1}\n                                      color={'cellText'}\n                                      textAlign={'center'}\n                                    >\n                                      Please disable Meta-Transactions if you are using Argent Wallet to avoid failed transactions!\n                                    </Text>\n                                  </Flex>\n                                ) : (\n                                  <Text\n                                    mt={1}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    Meta-Transactions are {this.state.metaTransactionsEnabled ? 'enabled' : 'disabled'} for {this.state.action}s!<br />\n                                    {\n                                      this.state.metaTransactionsEnabled && !this.state.actionProxyContract[this.state.action].approved && `Please either enable the Smart-Contract to enjoy gas-less ${this.state.action} or just disable meta-tx.`\n                                    }\n                                  </Text>\n                                )\n                              }\n                              <Checkbox\n                                mt={2}\n                                required={false}\n                                checked={this.state.metaTransactionsEnabled}\n                                onChange={ e => this.toggleMetaTransactionsEnabled(e.target.checked) }\n                                label={`${this.functionsUtil.capitalize(this.state.action)} with Meta-Transaction`}\n                              />\n                            </DashboardCard>\n                          ) : (erc20ForwarderEnabled && !showBuyFlow && !this.state.contractPaused) && (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                my:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              <Text\n                                mb={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                How do you prefer to pay gas fees for this {this.state.action}?\n                              </Text>\n                              <Flex\n                                width={[1,0.7]}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'space-between'}\n                              >\n                                <CardIconButton\n                                  {...this.props}\n                                  cardProps={{\n                                    py:2,\n                                    px:[2,3],\n                                    width:0.48\n                                  }}\n                                  textProps={{\n                                    ml:[1,2],\n                                  }}\n                                  text={this.props.selectedToken}\n                                  isActive={this.state.erc20ForwarderEnabled}\n                                  imageProps={{\n                                    height:this.props.isMobile ? '1.4em' : '1.8em',\n                                    width:this.props.isMobile ? '1.4em' : '1.8em'\n                                  }}\n                                  image={`/images/tokens/${this.props.selectedToken}.svg`}\n                                  handleClick={e => this.toggleErc20ForwarderEnabled(true)}\n                                />\n                                <CardIconButton\n                                  {...this.props}\n                                  cardProps={{\n                                    py:2,\n                                    px:[2,3],\n                                    width:0.48\n                                  }}\n                                  textProps={{\n                                    ml:[1,2],\n                                  }}\n                                  text={'ETH'}\n                                  isActive={!this.state.erc20ForwarderEnabled}\n                                  imageProps={{\n                                    height:this.props.isMobile ? '1.4em' : '1.8em',\n                                    width:this.props.isMobile ? '1.4em' : '1.8em'\n                                  }}\n                                  image={`/images/tokens/ETH.svg`}\n                                  handleClick={e => this.toggleErc20ForwarderEnabled(false)}\n                                />\n                              </Flex>\n                              {\n                                this.state.txError[this.state.action] && (\n                                  <Text\n                                    mt={2}\n                                    fontSize={1}\n                                    color={'red'}\n                                    textAlign={'center'}\n                                  >\n                                    The meta-transaction cannot be executed, select ETH and try again.\n                                  </Text>\n                                )\n                              }\n                              <Text\n                                mt={2}\n                                fontSize={'11px'}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                Powered by <ExtLink fontSize={'11px'} href={'https://biconomy.io'}>Biconomy</ExtLink>\n                              </Text>\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          (this.state.minAmountForMintReached && this.state.action === 'deposit') && (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                mt:3\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={'InfoOutline'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  By depositing more than {this.functionsUtil.formatMoney(this.state.minAmountForMint)}$ { this.state.showPoolPerc ? `(${this.state.minAmountForMint.div(this.state.totalAUM).times(100).toFixed(0)}% of the pool)` : null } the pool will be automatically rebalanced, gas cost may be higher.\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          showBatchDeposit ? (\n                            <Flex\n                              p={2}\n                              mt={3}\n                              width={1}\n                              borderRadius={2}\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              justifyContent={'center'}\n                              backgroundColor={'DashboardCard'}\n                              border={`1px solid ${this.props.theme.colors.primary}`}\n                            >\n                              <Link\n                                textAlign={'center'}\n                                hoverColor={'primary'}\n                                href={`/#/dashboard/tools/${batchDepositInfo.route}/${this.props.tokenConfig.idle.token}`}\n                              >\n                                Gas fees too high? Save gas with our Batch Deposit!\n                              </Link>\n                              <Icon\n                                ml={1}\n                                size={'1em'}\n                                color={'primary'}\n                                name={'LocalGasStation'}\n                              />\n                            </Flex>\n                          ) : showETHWrapper && (\n                            <Flex\n                              width={1}\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <DashboardCard\n                                cardProps={{\n                                  py:3,\n                                  px:2,\n                                  mt:3,\n                                  display:'flex',\n                                  alignItems:'center',\n                                  flexDirection:'column',\n                                  justifyContent:'center',\n                                  pb:this.state.showAdvancedOptions ? 3 : 2,\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  justifyContent={'row'}\n                                >\n                                  <Checkbox\n                                    required={false}\n                                    checked={this.state.showETHWrapperEnabled}\n                                    label={`Convert your ETH to WETH`}\n                                    onChange={ e => this.toggleShowETHWrapper(e.target.checked) }\n                                  />\n                                </Flex>\n                              </DashboardCard>\n                              {\n                                this.state.showETHWrapperEnabled && \n                                  <ETHWrapperComponent\n                                    {...this.props}\n                                    action={'wrap'}\n                                    fullWidth={true}\n                                    toolProps={ethWrapperInfo.props}\n                                  />\n                              }\n                            </Flex>\n                          )\n                        }\n                        {\n                          showRedeemCurve && this.state.canRedeem && (\n                            <Flex\n                              width={1}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <DashboardCard\n                                isRainbow={true}\n                                cardProps={{\n                                  py:3,\n                                  px:2,\n                                  mt:3,\n                                  display:'flex',\n                                  alignItems:'center',\n                                  flexDirection:'column',\n                                  justifyContent:'center',\n                                }}\n                              >\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Image\n                                    height={'1.8em'}\n                                    src={curveConfig.params.image}\n                                  />\n                                  <Text\n                                    mt={2}\n                                    px={2}\n                                    fontSize={1}\n                                    color={'dark-gray'}\n                                    textAlign={'center'}\n                                  >\n                                    Redeem your tokens from the Curve Pool.\n                                    <Link\n                                      ml={1}\n                                      mainColor={'primary'}\n                                      hoverColor={'primary'}\n                                      onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                    >\n                                      Read More\n                                    </Link>\n                                  </Text>\n                                  {\n                                    this.state.canRedeem &&\n                                      <Checkbox\n                                        mt={2}\n                                        required={false}\n                                        label={`Redeem from Curve`}\n                                        checked={this.state.redeemCurveEnabled}\n                                        onChange={ e => this.toggleRedeemCurve(e.target.checked) }\n                                      />\n                                  }\n                                </Flex>\n                              </DashboardCard>\n                              {\n                                this.canRedeem &&\n                                  <Link\n                                    textAlign={'center'}\n                                    hoverColor={'primary'}\n                                    onClick={ e => this.setShowRedeemFlow(true) }\n                                  >\n                                    I just want to redeem my {this.props.selectedToken}\n                                  </Link>\n                              }\n                            </Flex>\n                          )\n                        }\n                        {\n                          (this.state.contractPaused && this.state.action === 'deposit') ? (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                mt:3\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'Warning'}\n                                  color={'cellText'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Deposits for {this.props.selectedToken} are temporarily unavailable due to Smart-Contract maintenance. Redeems are always available.\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          ) : (!this.state.tokenApproved && this.state.action === 'deposit' && !this.state.showETHWrapperEnabled) ? (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                mt:3\n                              }}\n                            >\n                              {\n                                this.state.processing['approve'] && this.state.processing['approve'].loading ? (\n                                  <Flex\n                                    flexDirection={'column'}\n                                  >\n                                    <TxProgressBar\n                                      {...this.props}\n                                      waitText={`Approve estimated in`}\n                                      endMessage={`Finalizing approve request...`}\n                                      hash={this.state.processing['approve'].txHash}\n                                      cancelTransaction={this.cancelTransaction.bind(this)}\n                                    />\n                                  </Flex>\n                                ) : (\n                                  <Flex\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                  >\n                                    <Icon\n                                      size={'1.8em'}\n                                      name={'LockOpen'}\n                                      color={'cellText'}\n                                    />\n                                    <Text\n                                      mt={3}\n                                      fontSize={2}\n                                      color={'cellText'}\n                                      textAlign={'center'}\n                                    >\n                                      {\n                                        this.state.depositCurveEnabled ? \n                                          `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.`\n                                        : useMetaTx ?\n                                          `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle using Meta-Transaction you need to approve our Smart-Contract first.`\n                                        :\n                                          `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle you need to approve our Smart-Contract first.`\n                                      }\n                                    </Text>\n                                    <RoundButton\n                                      buttonProps={{\n                                        mt:3,\n                                        width:[1,1/2]\n                                      }}\n                                      handleClick={this.approveToken.bind(this)}\n                                    >\n                                      Approve\n                                    </RoundButton>\n                                  </Flex>\n                                )\n                              }\n                            </DashboardCard>\n                          ) : (!showBuyFlow && canPerformAction) && (\n                            !this.state.processing[this.state.action].loading ? (\n                              <Flex\n                                mt={2}\n                                flexDirection={'column'}\n                              >\n                                {\n                                  showActionFlow && (\n                                    <Flex\n                                      mb={3}\n                                      width={1}\n                                      flexDirection={'column'}\n                                    >\n                                      {\n                                        (totalBalance || this.props.tokenFeesPercentage) && (\n                                          <Box\n                                            mb={1}\n                                            width={1}\n                                          >\n                                            {\n                                              this.state.showMaxSlippage && showCurveSlippage && (\n                                                <Box\n                                                  mb={2}\n                                                  width={1}\n                                                >\n                                                  <Flex\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                  >\n                                                    <Text>\n                                                      Choose max slippage:\n                                                    </Text>\n                                                    <Tooltip\n                                                      placement={'top'}\n                                                      message={`Max additional slippage on top of the one shown below`}\n                                                    >\n                                                      <Icon\n                                                        ml={1}\n                                                        size={'1em'}\n                                                        color={'cellTitle'}\n                                                        name={\"InfoOutline\"}\n                                                      />\n                                                    </Tooltip>\n                                                  </Flex>\n                                                  <Flex\n                                                    mt={2}\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                    justifyContent={'space-between'}\n                                                  >\n                                                    {\n                                                      [0.2,0.5,1,5].map( slippage => (\n                                                        <FastBalanceSelector\n                                                          cardProps={{\n                                                            p:1\n                                                          }}\n                                                          textProps={{\n                                                            fontSize:1\n                                                          }}\n                                                          percentage={slippage}\n                                                          key={`selector_${slippage}`}\n                                                          onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                                          isActive={this.state.maxSlippage === parseFloat(slippage)}\n                                                        />\n                                                      ))\n                                                    }\n                                                  </Flex>\n                                                </Box>\n                                              )\n                                            }\n                                            <Flex\n                                              width={1}\n                                              alignItems={'center'}\n                                              flexDirection={'row'}\n                                              justifyContent={'space-between'}\n                                            >\n                                              {\n                                                showCurveSlippage ? (\n                                                  <Flex\n                                                    width={1}\n                                                    maxWidth={'50%'}\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                  >\n                                                    <Text\n                                                      fontSize={1}\n                                                      fontWeight={3}\n                                                      textAlign={'right'}\n                                                      style={{\n                                                        whiteSpace:'nowrap'\n                                                      }}\n                                                      color={ this.state.depositCurveSlippage.gt(0) ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                                    >\n                                                      {\n                                                        parseFloat(this.state.depositCurveSlippage.times(100).toFixed(2)) === 0 ?\n                                                          'No Slippage'\n                                                        : `${ this.state.depositCurveSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositCurveSlippage.times(100).abs().toFixed(2)}%`\n                                                      }\n                                                    </Text>\n                                                    <Tooltip\n                                                      placement={'top'}\n                                                      message={this.functionsUtil.getGlobalConfig(['messages','curveBonusSlippage'])}\n                                                    >\n                                                      <Icon\n                                                        ml={1}\n                                                        size={'1em'}\n                                                        color={'cellTitle'}\n                                                        name={\"InfoOutline\"}\n                                                      />\n                                                    </Tooltip>\n                                                    <Link\n                                                      ml={1}\n                                                      color={'copyColor'}\n                                                      hoverColor={'primary'}\n                                                      onClick={this.showMaxSlippage}\n                                                    >\n                                                      change\n                                                    </Link>\n                                                  </Flex>\n                                                ) : this.props.tokenFeesPercentage && (\n                                                  <Flex\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                  >\n                                                    <Text\n                                                      fontSize={1}\n                                                      fontWeight={3}\n                                                      color={'dark-gray'}\n                                                      textAlign={'right'}\n                                                      hoverColor={'copyColor'}\n                                                    >\n                                                      Performance fee: {this.props.tokenFeesPercentage.times(100).toFixed(2)}%\n                                                    </Text>\n                                                    <Tooltip\n                                                      placement={'top'}\n                                                      message={this.functionsUtil.getGlobalConfig(['messages','performanceFee'])}\n                                                    >\n                                                      <Icon\n                                                        ml={1}\n                                                        size={'1em'}\n                                                        color={'cellTitle'}\n                                                        name={\"InfoOutline\"}\n                                                      />\n                                                    </Tooltip>\n                                                  </Flex>\n                                                )\n                                              }\n                                              {\n                                                totalBalance && (\n                                                  <Link\n                                                    fontSize={1}\n                                                    fontWeight={3}\n                                                    color={'dark-gray'}\n                                                    textAlign={'right'}\n                                                    hoverColor={'copyColor'}\n                                                    onClick={ (e) => this.setFastBalanceSelector(100) }\n                                                  >\n                                                    {totalBalance.toFixed(6)} {this.props.selectedToken}\n                                                  </Link>\n                                                )\n                                              }\n                                            </Flex>\n                                          </Box>\n                                        )\n                                      }\n                                      <Input\n                                        min={0}\n                                        type={\"number\"}\n                                        required={true}\n                                        height={'3.4em'}\n                                        borderRadius={2}\n                                        fontWeight={500}\n                                        borderColor={'cardBorder'}\n                                        backgroundColor={'cardBg'}\n                                        boxShadow={'none !important'}\n                                        placeholder={`Insert amount`}\n                                        onChange={this.changeInputValue.bind(this)}\n                                        border={`1px solid ${this.props.theme.colors.divider}`}\n                                        value={this.state.inputValue[this.state.action] !== null ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]).toFixed() : ''}\n                                      />\n                                      <Flex\n                                        mt={2}\n                                        alignItems={'center'}\n                                        flexDirection={'row'}\n                                        justifyContent={'space-between'}\n                                      >\n                                        {\n                                          [25,50,75,100].map( percentage => (\n                                            <FastBalanceSelector\n                                              percentage={percentage}\n                                              key={`selector_${percentage}`}\n                                              onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                              isActive={this.state.fastBalanceSelector[this.state.action] === parseInt(percentage)}\n                                            />\n                                          ))\n                                        }\n                                      </Flex>\n                                    </Flex>\n                                  )\n                                }\n                                {\n                                  canPerformAction && (\n                                    <Flex\n                                      justifyContent={'center'}\n                                      mt={ redeemGovTokens ? 2 : 0 }\n                                    >\n                                      <RoundButton\n                                        buttonProps={{\n                                          width:'auto',\n                                          minWidth:[1,1/2],\n                                          style:{\n                                            textTransform:'capitalize'\n                                          },\n                                          disabled:this.state.buttonDisabled\n                                        }}\n                                        handleClick={this.state.buttonDisabled ? null : this.executeAction.bind(this) }\n                                      >\n                                        {this.state.action}{ redeemGovTokens ? ' Gov Tokens' : '' /*(depositCurve ? ' in Curve' : '')*/ }\n                                      </RoundButton>\n                                    </Flex>\n                                  )\n                                }\n                              </Flex>\n                            ) : this.state.loadingErc20ForwarderTx ? (\n                              <Flex\n                                mt={3}\n                                flexDirection={'column'}\n                              >\n                                <FlexLoader\n                                  flexProps={{\n                                    flexDirection:'row'\n                                  }}\n                                  loaderProps={{\n                                    size:'25px',\n                                  }}\n                                  textProps={{\n                                    ml:2\n                                  }}\n                                  text={ this.state.erc20ForwarderTx ? ( this.state.signedParameters ? 'Please Sign the Transaction...' : 'Please Sign the Permit...' ) : 'Calculating transaction fees...'}\n                                />\n                              </Flex>\n                            ) : this.state.erc20ForwarderTx ? (\n                              <DashboardCard\n                                cardProps={{\n                                  p:3,\n                                  mt:3,\n                                  display:'flex',\n                                  alignItems:'center',\n                                  flexDirection:'column',\n                                  justifyContent:'center',\n                                }}\n                              >\n                                <Text\n                                  mb={2}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  The required fee to perform the {this.state.action} is <strong>{this.state.erc20ForwarderTx.cost} {this.props.selectedToken}</strong>\n                                </Text>\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <DashboardCard\n                                    cardProps={{\n                                      mx:2,\n                                      py:2,\n                                      px:[2,3],\n                                      width:0.40,\n                                      onMouseDown:() => {\n                                        this.executeAction()\n                                      }\n                                    }}\n                                    isInteractive={true}\n                                  >\n                                    <Flex\n                                      my={1}\n                                      alignItems={'center'}\n                                      flexDirection={'row'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Flex\n                                        mr={2}\n                                        alignItems={'center'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Icon\n                                          align={'center'}\n                                          color={'#00b84a'}\n                                          name={'CheckCircle'}\n                                          size={this.props.isMobile ? '1em' : '1.8em'}\n                                        />\n                                      </Flex>\n                                      <Text\n                                        fontWeight={3}\n                                        fontSize={[2,3]}\n                                      >\n                                        Confirm\n                                      </Text>\n                                    </Flex>\n                                  </DashboardCard>\n                                  <DashboardCard\n                                    cardProps={{\n                                      mx:2,\n                                      py:2,\n                                      px:[2,3],\n                                      width:0.40,\n                                      onMouseDown:() => {\n                                        this.cancelTransaction();\n                                      }\n                                    }}\n                                    isInteractive={true}\n                                  >\n                                    <Flex\n                                      my={1}\n                                      alignItems={'center'}\n                                      flexDirection={'row'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Flex\n                                        mr={2}\n                                        alignItems={'center'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Icon\n                                          name={'Cancel'}\n                                          align={'center'}\n                                          color={'#e13636'}\n                                          size={this.props.isMobile ? '1em' : '1.8em'}\n                                        />\n                                      </Flex>\n                                      <Text\n                                        fontWeight={3}\n                                        fontSize={[2,3]}\n                                      >\n                                        Decline\n                                      </Text>\n                                    </Flex>\n                                  </DashboardCard>\n                                </Flex>\n                              </DashboardCard>\n                            ) : (\n                              <Flex\n                                mt={3}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <TxProgressBar\n                                  {...this.props}\n                                  cancelTransaction={this.cancelTransaction.bind(this)}\n                                  hash={this.state.processing[this.state.action].txHash}\n                                  endMessage={`Finalizing ${this.state.action} request...`}\n                                  waitText={`${this.functionsUtil.capitalize(this.state.action)} estimated in`}\n                                />\n                              </Flex>\n                            )\n                          )\n                        }\n                      </Box>\n                    )\n                  ) : (\n                    <Flex\n                      mt={4}\n                      flexDirection={'column'}\n                    >\n                      <FlexLoader\n                        flexProps={{\n                          flexDirection:'row'\n                        }}\n                        loaderProps={{\n                          size:'30px'\n                        }}\n                        textProps={{\n                          ml:2\n                        }}\n                        text={'Loading asset info...'}\n                      />\n                    </Flex>\n                  )\n                }\n              </Migrate>\n            )\n          }\n        </Flex>\n        {\n          /*\n          showDepositCurve && this.state.depositCurveEnabled ? (\n            <CurveDeposit\n              {...this.props}\n            />\n          ) :\n          */\n          showRedeemCurve && this.state.redeemCurveEnabled && (\n            <Box\n              mt={3}\n              width={1}\n            >\n              <CurveRedeem\n                {...this.props}\n              />\n            </Box>\n          )\n        }\n        {\n          showBuyFlow &&\n            <Flex\n              mt={3}\n              width={[1,0.5]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <BuyModal\n                {...this.props}\n                showInline={true}\n                availableMethods={[]}\n                buyToken={this.props.selectedToken}\n              />\n            </Flex>\n        }\n\n        <ShareModal\n          confettiEnabled={true}\n          icon={`images/medal.svg`}\n          title={`Congratulations!`}\n          account={this.props.account}\n          closeModal={this.resetModal}\n          tokenName={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'share'}\n          text={`You have successfully deposited in Idle!<br />Enjoy <strong>${this.state.tokenAPY}% APY</strong> on your <strong>${this.props.selectedToken}</strong>!`}\n          tweet={`I'm earning ${this.state.tokenAPY}% APY on my ${this.props.selectedToken} with @idlefinance! Go to ${this.functionsUtil.getGlobalConfig(['baseURL'])} and start earning now from your idle tokens!`}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default DepositRedeem;\n","import theme from '../theme';\nimport { Bar } from '@nivo/bar';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Text, Input, Icon, Tooltip } from \"rimble-ui\";\n\nclass EstimatedEarnings extends Component {\n\n  state = {\n    chartData:null,\n    chartProps:null,\n    inputValue:1000,\n    maxInputValue:999999999999999\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    this.loadChart();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged){\n      this.loadChart();\n    }\n  }\n\n  async loadChart(){\n\n    const tokenApy = await this.functionsUtil.getTokenApy(this.props.tokenConfig);\n\n    if (!tokenApy){\n      return false;\n    }\n\n    const amount = this.functionsUtil.BNify(this.state.inputValue);\n    const earningsYear = amount.times(this.props.tokenApy.div(100));\n\n    const amountMonth = parseFloat(earningsYear.div(12));\n    const amount3Months = parseFloat(earningsYear.div(4));\n    const amount6Months = parseFloat(earningsYear.div(2));\n    const amountYear = parseFloat(earningsYear.div(1));\n\n    const chartData = [\n      {\n        perc:1/12,\n        label:'MONTH',\n        value:amountMonth,\n        month:amountMonth,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        monthColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:3/12,\n        label:'3 MONTHS',\n        value:amount3Months,\n        month3:amount3Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month3Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:6/12,\n        label:'6 MONTHS',\n        value:amount6Months,\n        month6:amount6Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month6Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:1,\n        label:'YEAR',\n        year:amountYear,\n        value:amountYear,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        yearColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      }\n    ];\n\n    let labelTextColorModifiers = this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'chart','labelTextColorModifiers']);\n\n    const maxGridLines = 4;\n    const gridYStep = amountYear/maxGridLines;\n    const gridYValues = [0];\n    for (let i=1;i<=maxGridLines;i++){\n      const gridYValue = i*gridYStep;\n      gridYValues.push(gridYValue);\n    }\n\n    const chartProps = {\n      padding: 0.2,\n      animate: false,\n      indexBy: 'label',\n      // enableLabel: false,\n      labelSkipWidth: 16,\n      labelSkipHeight: 16,\n      keys: ['month','month3','month6','year'],\n      colors: ({ id, data }) => data[`${id}Color`],\n      label: d => this.functionsUtil.abbreviateNumber(d.value,2,4)+' '+this.props.selectedToken,\n      labelTextColor: labelTextColorModifiers ? { from: 'color', modifiers: [ labelTextColorModifiers ] } : null,\n      isInteractive:false,\n      minValue:0,\n      gridYValues,\n      // maxValue:amountYear,\n      axisLeft:{\n        format: v => this.functionsUtil.abbreviateNumber(v,1,3),\n        tickValues:gridYValues,\n        orient: 'left',\n        tickSize: 0,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendPosition: 'middle'\n      },\n      axisBottom:{\n        legend: '',\n        tickSize:0,\n        tickPadding: 15,\n        orient: 'bottom',\n      },\n      theme:{\n        labels:{\n          text:{\n            fontSize:15,\n            fontWeight:600,\n            fill:theme.colors.counter,\n            fontFamily: theme.fonts.sansSerif\n          }\n        },\n        axis: {\n          ticks: {\n            text: {\n              fontSize:14,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '9 5'\n          }\n        },\n      },\n      margin: this.props.isMobile ? { top: 0, right: 0, bottom: 30, left: 0 } : { top: 10, right: 0, bottom: 50, left: 65 }\n    }\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  changeInputValue(e){\n    let inputValue = e.target.value.length && !isNaN(e.target.value) ? Math.min(this.state.maxInputValue,parseFloat(e.target.value)) : 0;\n    inputValue = this.functionsUtil.BNify(inputValue);\n    this.setState({\n      inputValue\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const showAPYDisclaimer = idleTokenEnabled && this.functionsUtil.getGlobalConfig(['govTokens','IDLE','showAPR']);\n\n    return (\n      <DashboardCard\n        cardProps={{\n          p:[3,4]\n        }}\n      >\n        <Flex\n          width={1}\n          flexDirection={['column','row']}\n        >\n          <Flex\n            width={[1,0.3]}\n            flexDirection={'column'}\n            justifyContent={'flex-start'}\n          >\n            <Flex\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <AssetField\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n                fieldInfo={{\n                  name:'icon',\n                  props:{\n                    mb:2,\n                    height:'2.5em'\n                  }\n                }}\n              />\n              <Text\n                fontSize={2}\n                color={'cellText'}\n                textAlign={'center'}\n              >\n                Set the amount and see your estimated earnings on time based on the current APY: { this.props.tokenApy ? `${this.props.tokenApy.toFixed(2)}%` : null}\n                {\n                  showAPYDisclaimer && \n                    <Flex\n                      style={{\n                        display:'inline-flex',\n                        verticalAlign:'middle'\n                      }}\n                    >\n                      <Tooltip\n                        placement={'top'}\n                        message={this.functionsUtil.getGlobalConfig(['messages','apyLong'])}\n                      >\n                        <Icon\n                          ml={1}\n                          name={\"Info\"}\n                          size={'1em'}\n                          color={'cellTitle'}\n                        />\n                      </Tooltip>\n                    </Flex>\n                }\n              </Text>\n            </Flex>\n            <Flex\n              mt={3}\n              flexDirection={'column'}\n            >\n              <Input\n                min={0}\n                type={\"number\"}\n                required={true}\n                borderRadius={2}\n                fontWeight={500}\n                textAlign={'center'}\n                height={['3em','3.4em']}\n                borderColor={'cardBorder'}\n                boxShadow={'none !important'}\n                max={this.state.maxInputValue}\n                backgroundColor={'cardBgHover'}\n                onChange={this.changeInputValue.bind(this)}\n                border={`1px solid ${theme.colors.divider}`}\n                placeholder={`Insert ${this.props.selectedToken.toUpperCase()} amount`}\n                value={this.state.inputValue && !isNaN(this.state.inputValue) ? this.state.inputValue : ''}\n              />\n            </Flex>\n            <Flex\n              mt={3}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                buttonProps={{\n                  width:[1,1/2],\n                }}\n                handleClick={this.loadChart.bind(this)}\n              >\n                CALCULATE\n              </RoundButton>\n            </Flex>\n          </Flex>\n          <Flex\n            mt={[3,0]}\n            width={[1,0.7]}\n            id={'estimated-earnings-chart'}\n          >\n            {\n              this.props.isMobile ? (\n                <Flex\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  {\n                    this.state.chartData !== null && this.state.chartData.map((v,index) => (\n                      <Flex\n                        py={2}\n                        my={2}\n                        width={1}\n                        flexDirection={'row'}\n                        key={`earnings_${index}`}\n                      >\n                        <Flex\n                          width={0.35}\n                          alignItems={'center'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            color={'legend'}\n                          >\n                            {v.label}\n                          </Text>\n                        </Flex>\n                        <Flex\n                          width={0.65}\n                          position={'relative'}\n                          alignItems={'center'}\n                          minHeight={['20px','35px']}\n                          justifyContent={'center'}\n                        >\n                          <Flex\n                            zIndex={1}\n                            position={'relative'}\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Text\n                              fontSize={1}\n                              fontWeight={3}\n                              color={'counter'}\n                            >\n                              {this.functionsUtil.abbreviateNumber(v.value,2,4)} {this.props.selectedToken}\n                            </Text>\n                          </Flex>\n                          <Flex\n                            right={0}\n                            width={v.perc}\n                            position={'absolute'}\n                            height={['20px','35px']}\n                            borderRadius={['20px 0 0 20px','35px 0 0 35px']}\n                            style={{background:`linear-gradient(-90deg, rgba(${v.color},0) 0%, rgba(${v.color},1) 100%)`}}\n                          ></Flex>\n                        </Flex>\n                      </Flex>\n                    ))\n                  }\n                </Flex>\n              ) : (\n                <GenericChart\n                  type={Bar}\n                  height={250}\n                  showLoader={true}\n                  {...this.state.chartProps}\n                  data={this.state.chartData}\n                  parentId={'estimated-earnings-chart'}\n                />\n              )\n            }\n          </Flex>\n        </Flex>\n      </DashboardCard>\n    );\n  }\n}\n\nexport default EstimatedEarnings;","import Title from '../Title/Title';\nimport { Box, Flex } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport AssetsList from '../AssetsList/AssetsList';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport FundsOverview from '../FundsOverview/FundsOverview';\nimport DepositRedeem from '../DepositRedeem/DepositRedeem';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport EstimatedEarnings from '../EstimatedEarnings/EstimatedEarnings';\n\nclass AssetPage extends Component {\n\n  state = {\n    tokenApy:{},\n    tokenFees:{},\n    tokenBalance:{},\n    tokenApproved:{},\n    activeModal:null,\n    idleTokenPrice:{},\n    govTokensBalance:{},\n    idleTokenBalance:{},\n    redeemableBalance:{},\n    govTokensDisabled:{},\n    availableGovTokens:{},\n    tokenFeesPercentage:{},\n    componentMounted:false,\n    govTokensUserBalances:{}\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadTokensInfo(){\n    if (this.props.account){\n      const newState = {...this.state};\n      await this.functionsUtil.asyncForEach(Object.keys(this.props.availableTokens),async (token) => {\n        const tokenConfig = this.props.availableTokens[token];\n        const govTokenAvailableTokens = {};\n        govTokenAvailableTokens[token] = tokenConfig;\n\n        const [\n          tokenFeesPercentage,\n          idleTokenPrice,\n          tokenApy,\n          tokenBalance,\n          tokenFees,\n          idleTokenBalance,\n          tokenApproved,\n          govTokensUserBalances,\n          govTokensBalance\n        ] = await Promise.all([\n          this.functionsUtil.getTokenFees(tokenConfig),\n          this.functionsUtil.getIdleTokenPrice(tokenConfig),\n          this.functionsUtil.getTokenApy(this.props.tokenConfig),\n          this.functionsUtil.getTokenBalance(token,this.props.account),\n          this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n          this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n          this.functionsUtil.checkTokenApproved(token,tokenConfig.idle.address,this.props.account),\n          this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,null,null),\n          this.functionsUtil.getGovTokensUserTotalBalance(this.props.account,govTokenAvailableTokens,'DAI',false)\n        ]);\n\n        newState.tokenFees[token] = tokenFees;\n        newState.tokenBalance[token] = tokenBalance;\n        newState.tokenApproved[token] = tokenApproved;\n        newState.idleTokenPrice[token] = idleTokenPrice;\n        newState.idleTokenBalance[token] = idleTokenBalance;\n        newState.govTokensBalance[token] = govTokensBalance;\n        newState.tokenFeesPercentage[token] = tokenFeesPercentage;\n        newState.govTokensUserBalances[token] = govTokensUserBalances;\n        newState.govTokensDisabled[token] = tokenConfig.govTokensDisabled;\n        newState.tokenApy[token] = tokenApy && !tokenApy.isNaN() ? tokenApy : null;\n        newState.redeemableBalance[token] = idleTokenBalance && idleTokenPrice ? idleTokenBalance.times(idleTokenPrice) : this.functionsUtil.BNify(0);\n      });\n\n      newState.availableGovTokens = this.functionsUtil.getTokenGovTokens(this.props.tokenConfig);\n\n      // console.log('govTokensBalance',newState.govTokensBalance);\n      // console.log('availableGovTokens',newState.availableGovTokens);\n      // console.log('govTokensUserBalances',newState.govTokensUserBalances);\n\n      newState.componentMounted = true;\n\n      this.setState(newState);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    const availableTokensChanged = JSON.stringify(prevProps.availableTokens) !== JSON.stringify(this.props.availableTokens);\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n    if (accountChanged || transactionsChanged || availableTokensChanged){\n      // console.log('AssetPage - availableTokensChanged',availableTokensChanged);\n      this.loadTokensInfo();\n    }\n  }\n\n  render() {\n\n    const userHasFunds = this.props.account && this.state.idleTokenBalance[this.props.selectedToken] && this.functionsUtil.BNify(this.state.idleTokenBalance[this.props.selectedToken]).gt(0);\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            <Breadcrumb\n              {...this.props}\n              isMobile={this.props.isMobile}\n              path={[this.props.selectedToken]}\n              handleClick={ e => this.props.goToSection(this.props.selectedStrategy) }\n              text={this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])}\n            />\n          </Flex>\n          <Flex\n            width={0.5}\n            justifyContent={'flex-end'}\n          >\n            <CardIconButton\n              icon={'Add'}\n              {...this.props}\n              text={'Add funds'}\n              handleClick={ e => this.setActiveModal('buy') }\n            />\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Deposit / Redeem\n        </Title>\n        <Flex\n          width={1}\n        >\n          <DepositRedeem\n            {...this.props}\n            tokenFees={this.state.tokenFees[this.props.selectedToken]}\n            tokenBalance={this.state.tokenBalance[this.props.selectedToken]}\n            tokenApproved={this.state.tokenApproved[this.props.selectedToken]}\n            govTokensBalance={this.state.govTokensBalance[this.props.selectedToken]}\n            idleTokenBalance={this.state.idleTokenBalance[this.props.selectedToken]}\n            redeemableBalance={this.state.redeemableBalance[this.props.selectedToken]}\n            tokenFeesPercentage={this.state.tokenFeesPercentage[this.props.selectedToken]}\n            govTokensUserBalances={this.state.govTokensUserBalances[this.props.selectedToken]}\n          />\n        </Flex>\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverview\n                {...this.props}\n                tokenFees={this.state.tokenFees[this.props.selectedToken]}\n              />\n            </Flex>\n        }\n        {\n          userHasFunds && this.props.account && !this.state.govTokensDisabled[this.props.selectedToken] && Object.keys(this.state.availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id={\"yield-farming\"}\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(this.state.availableGovTokens)}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.30,0.15]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    mobile:false,\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.25],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','govTokenRedeemableBalance']),\n                    props:{\n                      width:[0.35,0.30],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                    ]\n                  },\n                  {\n                    title:'DISTRIBUTION',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','userDistributionSpeed']),\n                    props:{\n                      width:[0.35,0.30],\n                    },\n                    fields:[\n                      {\n                        name:'userDistributionSpeed',\n                        props:{\n                          decimals:6\n                        }\n                      }\n                    ]\n                  },\n                  /*\n                  {\n                    title:'APR',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','govTokenApr']),\n                    props:{\n                      width:[0.2,0.17],\n                    },\n                    fields:[\n                      {\n                        name:'apr',\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','tokenPrice']),\n                    mobile:false,\n                    props:{\n                      width: 0.17,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                  */\n                ]}\n                {...this.props}\n                availableTokens={this.state.availableGovTokens}\n              />\n            </Flex>\n        }\n        {\n        this.props.account && this.state.tokenApy[this.props.selectedToken] && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'estimated-earnings-container'}\n          >\n            <Title my={[3,4]}>Estimated earnings</Title>\n            <EstimatedEarnings\n              {...this.props}\n              tokenApy={this.state.tokenApy[this.props.selectedToken]}\n            />\n          </Flex>\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              enabledTokens={[this.props.selectedToken]}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport { Text, Modal, Flex, Link } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass BetaModal extends React.Component {\n\n  state = {};\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    this.functionsUtil.setLocalStorage('betaApproved',true);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','650px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            pt={3}\n            iconHeight={'40px'}\n            title={'Beta Version'}\n            icon={'images/warning.svg'}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                fontSize={2}\n                textAlign={'left'}\n                color={'dark-gray'}\n              >\n                You're about to enter Idle Finance Beta Dashboard – this is the place where several un-audited and risky features are being tested!<br />Please use at your own risk, or visit the official website at <Link fontSize={2} mainColor={'primary'} hoverColor={'primary'} href={this.functionsUtil.getGlobalConfig(['baseURL'])}>{this.functionsUtil.getGlobalConfig(['baseURL'])}</Link>.\n              </Text>\n            </Flex>\n            <Flex\n              my={3}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                handleClick={this.closeModal}\n                buttonProps={{\n                  width:['100%','40%']\n                }}\n              >\n                Continue Anyway\n              </RoundButton>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default BetaModal;","import React, { Component } from 'react';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Box, Text, Icon, Tooltip, Link, Input } from \"rimble-ui\";\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\n\nclass CurveDeposit extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    depositSlippage:null,\n    redeemableBalance:null,\n    migrationContract:null,\n    curveTokensBalance:null,\n    migrationSucceeded:false,\n    fastBalanceSelector:null,\n    migrationContractApproved:false,\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    await this.initToken();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const idleTokenBalanceChanged = prevProps.idleTokenBalance !== this.props.idleTokenBalance;\n    if (accountChanged || idleTokenBalanceChanged){\n      await this.initToken();\n    }\n    \n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const inputValueChanged = this.state.inputValue !== prevState.inputValue;\n    if (inputValueChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  setInputValue = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    const inputValue = this.props.idleTokenBalance ? this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage) : null;\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    const buttonDisabled = !amount || amount.gt(this.state.idleTokenBalance);\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  approve = async () => {\n    const migrationContract = this.state.migrationContract;\n    if (migrationContract){\n\n      // Check if the migration contract is approved\n      const migrationContractApproved = await this.checkMigrationContractApproved();\n\n      if (!migrationContractApproved){\n\n        const callbackApprove = (tx,error) => {\n          // Send Google Analytics event\n          const eventData = {\n            eventAction: 'approve',\n            eventCategory: 'CurveDeposit',\n            eventLabel: tx ? tx.status : null\n          };\n\n          const txSucceeded = tx && tx.status === 'success';\n\n          // console.log('callbackApprove',tx,error);\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            migrationContractApproved: txSucceeded, // True\n            processing: {\n              ...prevState.processing,\n              txHash:null,\n              loading:false\n            }\n          }));\n\n          if (typeof this.props.callbackApprove === 'function' && txSucceeded){\n            this.props.callbackApprove(tx);\n          }\n\n          this.checkMigration();\n        };\n\n        const callbackReceiptApprove = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              txHash\n            }\n          }));\n        };\n\n        this.functionsUtil.enableERC20(this.props.selectedToken,migrationContract.address,callbackApprove,callbackReceiptApprove);\n\n        this.setState((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            txHash:null,\n            loading:true\n          },\n          migrationContractApproved:false\n        }));\n      } else {\n        this.setState({\n          migrationContractApproved:true\n        });\n      }\n    }\n  }\n\n  deposit = async () => {\n\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    if (!inputValue){\n      return false;\n    }\n\n    const callbackDeposit = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveDeposit`,\n        eventAction: this.props.selectedToken,\n        eventValue: inputValue.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackDeposit === 'function' && txSucceeded){\n        this.props.callbackDeposit(tx);\n      }\n    };\n\n    const callbackReceiptDeposit = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.migrationContract.name;\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n    const depositParams = await this.getMigrationParams(_amount);\n\n    this.props.contractMethodSendWrapper(contractName, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  cancelTransaction = async () => {\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  async getMigrationParams(toMigrate){\n    const migrationParams = [];\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.selectedToken]);\n\n    if (!curveTokenConfig){\n      return false;\n    }\n    \n    const migrationContractParams = curveTokenConfig.migrationParams;\n    if (migrationContractParams.n_coins){\n      const amounts = await this.functionsUtil.getCurveAmounts(this.props.selectedToken,toMigrate,true);\n      let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n\n      if (this.state.maxSlippage){\n        minMintAmount = this.functionsUtil.BNify(minMintAmount);\n        minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n        minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n      }\n\n      migrationParams.push(amounts);\n      migrationParams.push(minMintAmount);\n    }\n\n    return migrationParams;\n  }\n\n  async calculateSlippage(){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (inputValue){\n      let underlyingBalanceToDeposit = inputValue;\n      if (underlyingBalanceToDeposit){\n        const idleTokenPrice = await this.functionsUtil.getIdleTokenPrice(this.props.tokenConfig);\n        if (idleTokenPrice){\n          underlyingBalanceToDeposit = underlyingBalanceToDeposit.times(idleTokenPrice);\n        }\n      } else {\n        underlyingBalanceToDeposit = this.functionsUtil.BNify(0);\n      }\n\n      const normalizeIdleTokenBalance = this.functionsUtil.normalizeTokenAmount(underlyingBalanceToDeposit,this.props.tokenConfig.decimals);\n      let depositSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizeIdleTokenBalance);\n      if (depositSlippage){\n        depositSlippage = depositSlippage.times(100);\n      }\n\n      this.setState({\n        depositSlippage\n      });\n    }\n  }\n\n  async checkMigrationContractApproved(){\n    const migrationContract = this.state.migrationContract || await this.functionsUtil.getCurveSwapContract();\n    if (migrationContract){\n      return await this.functionsUtil.checkTokenApproved(this.props.tokenConfig.idle.token,migrationContract.address,this.props.account);\n    }\n    return false;\n  }\n\n  async initToken(){\n\n    // Init and check migration contract\n    const migrationContract = await this.functionsUtil.getCurveSwapContract();\n    const migrationContractApproved = await this.checkMigrationContractApproved();\n\n    this.setState({\n      migrationContract,\n      migrationContractApproved\n    });\n  }\n\n  approveCallback = () => {\n    this.initToken();\n  }\n\n  migrationCallback = () => {\n    this.setState({\n      migrationSucceeded:true\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken){\n      return null;\n    }\n\n    // const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const hasCurveTokens = this.state.curveTokensBalance && this.state.curveTokensBalance.gt(0);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n            {\n              this.props.idleTokenBalance && this.props.idleTokenBalance.gt(0) && (\n                <Box\n                  width={1}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:3,\n                      px:[2,4]\n                    }}\n                  >\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    > \n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ this.state.migrationContractApproved ? 'CheckBox' : 'LooksOne'}\n                          color={ this.state.migrationContractApproved ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Approve the Curve contract\n                        </Text>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ hasCurveTokens ? 'CheckBox' : 'LooksTwo'}\n                          color={ hasCurveTokens ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Deposit your {this.props.tokenConfig.idle.token}\n                        </Text>\n                      </Flex>\n                    </Flex>\n                  </DashboardCard>\n                  {\n                    !this.state.migrationContractApproved ?\n                      this.state.processing.loading ? (\n                        <Flex\n                          mt={3}\n                          flexDirection={'column'}\n                        >\n                          <TxProgressBar\n                            web3={this.props.web3}\n                            waitText={`Approve estimated in`}\n                            hash={this.state.processing.txHash}\n                            endMessage={`Finalizing approve request...`}\n                            cancelTransaction={this.cancelTransaction.bind(this)}\n                          />\n                        </Flex>\n                      ) : (\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            mt:3,\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                          >\n                            <Icon\n                              size={'2.3em'}\n                              name={'LockOpen'}\n                              color={'cellText'}\n                            />\n                            <Text\n                              mt={1}\n                              fontSize={2}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              To deposit your {this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.\n                            </Text>\n                            <RoundButton\n                              buttonProps={{\n                                mt:3,\n                                width:[1,1/2]\n                              }}\n                              handleClick={this.approve.bind(this)}\n                            >\n                              Approve\n                            </RoundButton>\n                          </Flex>\n                        </DashboardCard>\n                      )\n                    : this.state.processing.loading ? (\n                      <Flex\n                        mt={3}\n                        flexDirection={'column'}\n                      >\n                        <TxProgressBar\n                          web3={this.props.web3}\n                          waitText={`Deposit estimated in`}\n                          hash={this.state.processing.txHash}\n                          endMessage={`Finalizing deposit request...`}\n                          cancelTransaction={this.cancelTransaction.bind(this)}\n                        />\n                      </Flex>\n                    ) : (\n                      <Box\n                        mt={2}\n                        width={1}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text>\n                            Choose max slippage:\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={`Max additional slippage on top of the one shown below`}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                          justifyContent={'space-between'}\n                        >\n                          {\n                            [0.2,0.5,1,5].map( slippage => (\n                              <FastBalanceSelector\n                                cardProps={{\n                                  p:1\n                                }}\n                                textProps={{\n                                  fontSize:1\n                                }}\n                                percentage={slippage}\n                                key={`selector_${slippage}`}\n                                onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                isActive={this.state.maxSlippage === parseFloat(slippage)}\n                              />\n                            ))\n                          }\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                        >\n                          <Flex\n                            mb={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={this.state.depositSlippage ? 'space-between' : 'flex-end'}\n                          >\n                            {\n                              this.state.depositSlippage && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    textAlign={'right'}\n                                    style={{\n                                      whiteSpace:'nowrap'\n                                    }}\n                                    color={ parseFloat(this.state.depositSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                  >\n                                    {\n                                      parseFloat(this.state.depositSlippage.toFixed(3)) === 0 ?\n                                        'No Slippage'\n                                      : `${ this.state.depositSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositSlippage.abs().toFixed(3)}%`\n                                    }\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.state.depositSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              )\n                            }\n                            {\n                              this.props.idleTokenBalance && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'flex-end'}\n                                >\n                                  <Link\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'right'}\n                                    hoverColor={'copyColor'}\n                                    onClick={ (e) => this.setFastBalanceSelector(100) }\n                                    style={{\n                                      maxWidth:'100%',\n                                      overflow:'hidden',\n                                      whiteSpace:'nowrap',\n                                      textOverflow:'ellipsis'\n                                    }}\n                                  >\n                                    {this.props.idleTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {this.props.selectedToken}\n                                  </Link>\n                                </Flex>\n                              )\n                            }\n                          </Flex>\n                          <Input\n                            min={0}\n                            type={\"number\"}\n                            required={true}\n                            height={'3.4em'}\n                            borderRadius={2}\n                            fontWeight={500}\n                            boxShadow={'none !important'}\n                            placeholder={`Insert amount`}\n                            onChange={this.changeInputValue.bind(this)}\n                            border={`1px solid ${this.props.theme.colors.divider}`}\n                            value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                          />\n                          <Flex\n                            mt={2}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'space-between'}\n                          >\n                            {\n                              [25,50,75,100].map( percentage => (\n                                <FastBalanceSelector\n                                  percentage={percentage}\n                                  key={`selector_${percentage}`}\n                                  onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                  isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                                />\n                              ))\n                            }\n                          </Flex>\n                          <Flex\n                            mt={2}\n                            justifyContent={'center'}\n                          >\n                            <RoundButton\n                              buttonProps={{\n                                mt:2,\n                                width:[1,1/2],\n                                disabled:this.state.buttonDisabled\n                              }}\n                              handleClick={this.deposit.bind(this)}\n                            >\n                              Deposit\n                            </RoundButton>\n                          </Flex>\n                        </Flex>\n                      </Box>\n                    )\n                  }\n                </Box>\n              )\n            }\n          {\n            /*\n            this.state.tokenConfig && this.state.redeemableBalance ? (\n              <Box width={1}>\n                <Migrate\n                  {...this.props}\n                  showActions={false}\n                  getTokenPrice={false}\n                  migrationTextProps={{\n                    fontWeight:500\n                  }}\n                  isMigrationTool={true}\n                  migrationImage={{\n                    mb:1,\n                    height:'1.8em',\n                    src:curveConfig.params.image\n                  }}\n                  showBalanceSelector={true}\n                  waitText={'Deposit estimated in'}\n                  tokenConfig={this.state.tokenConfig}\n                  callbackApprove={this.approveCallback.bind(this)}\n                  migrationParams={this.getMigrationParams.bind(this)}\n                  migrationCallback={this.migrationCallback.bind(this)}\n                  approveText={`To deposit your ${this.props.tokenConfig.idle.token} you need to approve Curve smart-contract first.`}\n                  migrationText={`You can deposit ${this.state.redeemableBalance.toFixed(4)} ${this.props.tokenConfig.idle.token} in the Curve Pool${ this.state.depositSlippage ? (this.state.depositSlippage.gte(0) ? ` with <span style=\"color:${this.props.theme.colors.transactions.status.failed}\">${this.state.depositSlippage.times(100).toFixed(2)}% of slippage</span>` : ` with <span style=\"color:${this.props.theme.colors.transactions.status.completed}\">${Math.abs(parseFloat(this.state.depositSlippage.times(100).toFixed(2)))}% of bonus</span>`) : '' }.`}\n                >\n                  {\n                    !this.props.account ? (\n                      <DashboardCard\n                        cardProps={{\n                          p:3,\n                          mt:3\n                        }}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                        >\n                          <Icon\n                            size={'2.3em'}\n                            name={'Input'}\n                            color={'cellText'}\n                          />\n                          <Text\n                            mt={2}\n                            fontSize={2}\n                            color={'cellText'}\n                            textAlign={'center'}\n                          >\n                            Please connect with your wallet interact with Idle.\n                          </Text>\n                          <RoundButton\n                            buttonProps={{\n                              mt:2,\n                              width:[1,1/2]\n                            }}\n                            handleClick={this.props.connectAndValidateAccount}\n                          >\n                            Connect\n                          </RoundButton>\n                        </Flex>\n                      </DashboardCard>\n                    ) : (\n                      <DashboardCard\n                        cardProps={{\n                          p:3\n                        }}\n                      >\n                        {\n                          this.state.migrationSucceeded ? (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'DoneAll'}\n                                color={this.props.theme.colors.transactions.status.completed}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You have successfully deposited your {this.props.tokenConfig.idle.token} in the Curve Pool!\n                              </Text>\n                            </Flex>\n                          ) : (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'MoneyOff'}\n                                color={'cellText'}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You don't have any {this.props.tokenConfig.idle.token} in your wallet.\n                              </Text>\n                            </Flex>\n                          )\n                        }\n                      </DashboardCard>\n                    )\n                  }\n                </Migrate>\n              </Box>\n            ) : null\n            */\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveDeposit;","import theme from '../theme';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\n// import { linearGradientDef } from '@nivo/core'\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport ChartCustomTooltip from '../ChartCustomTooltip/ChartCustomTooltip';\nimport ChartCustomTooltipRow from '../ChartCustomTooltipRow/ChartCustomTooltipRow';\n\nclass PortfolioEquityCurve extends Component {\n  state = {\n    startDate:null,\n    chartData:null,\n    chartProps:null,\n    chartwidth:null,\n    chartHeight:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentDidMount(){\n    this.loadUtils();\n    this.loadChartData();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n\n    const quickDateSelectionChanged = prevProps.quickDateSelection !== this.props.quickDateSelection;\n    const tokenChanged = JSON.stringify(prevProps.enabledTokens) !== JSON.stringify(this.props.enabledTokens);\n    if (tokenChanged || quickDateSelectionChanged){\n      this.setState({\n        chartData:null\n      },() => {\n        this.componentDidMount();\n      });\n    }\n\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n    if (mobileChanged){\n      this.loadChartData();\n    }\n  }\n\n  async loadChartData() {\n\n    let enabledTokens = this.props.enabledTokens;\n    if (!enabledTokens || !enabledTokens.length){\n      enabledTokens = Object.keys(this.props.availableTokens);\n    }\n\n    const curveTxs = await this.functionsUtil.getCurveTxs(this.props.account,0,'latest',enabledTokens);\n\n    const chartData = [];\n    let tokensBalance = [];\n    const processedTxs = {};\n    let firstTxTimestamp = null;\n    let totalBalance = this.functionsUtil.BNify(0);\n    const curvePoolContract = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    if (curveTxs && curveTxs.length){\n\n      curveTxs.forEach((tx,index) => {\n\n        if (!processedTxs[tx.hash]){\n          processedTxs[tx.hash] = [];\n        }\n\n        if (processedTxs[tx.hash].includes(tx.action)){\n          return;\n        }\n        \n        firstTxTimestamp = firstTxTimestamp ? Math.min(firstTxTimestamp,parseInt(tx.timeStamp)) : parseInt(tx.timeStamp);\n\n        const curveTokens = this.functionsUtil.BNify(tx.curveTokens);\n\n        switch (tx.action){\n          case 'CurveIn':\n          case 'CurveZapIn':\n          case 'CurveDepositIn':\n          case 'CurveTransferIn':\n            totalBalance = totalBalance.plus(curveTokens);\n          break;\n          case 'CurveOut':\n          case 'CurveZapOut':\n          case 'CurveDepositOut':\n          case 'CurveTransferOut':\n            totalBalance = totalBalance.minus(curveTokens);\n          break;\n          default:\n          break;\n        }\n\n        // Reset totalBalance if below zero\n        if (totalBalance.lt(0)){\n          totalBalance = this.functionsUtil.BNify(0);\n        }\n\n        const action = tx.action;\n        const balance = totalBalance;\n        const timeStamp = parseInt(tx.timeStamp);\n        const curveTokenPrice = this.functionsUtil.fixTokenDecimals(tx.curveTokenPrice,curvePoolContract.decimals);\n\n        // console.log(this.functionsUtil.strToMoment(timeStamp*1000).format('YYYY/MM/DD HH:mm'),tx.hash,tx.action,curveTokens.toString(),totalBalance.toString());\n\n        if (!curveTokenPrice.isNaN() && !curveTokenPrice.isNaN()){\n          tokensBalance.push({\n            action,\n            balance,\n            timeStamp,\n            curveTokens,\n            curveTokenPrice\n          });\n\n          processedTxs[tx.hash].push(action);\n        }\n      });\n    }\n\n    // Calculate Start Date\n    let startDate = null;\n    const currentDate = this.functionsUtil.strToMoment(new Date());\n\n    switch (this.props.quickDateSelection){\n      case 'week':\n        startDate = currentDate.clone().subtract(1,'week');\n      break;\n      case 'month':\n        startDate = currentDate.clone().subtract(1,'month');\n      break;\n      case 'month3':\n        startDate = currentDate.clone().subtract(3,'month');\n      break;\n      case 'month6':\n        startDate = currentDate.clone().subtract(6,'month');\n      break;\n      default:\n        startDate = null;\n      break;\n    }\n\n    const days = {};\n    let prevBalances = {};\n    let prevTimestamp = null;\n    let minChartValue = null;\n    let maxChartValue = null;\n    const aggregatedBalancesKeys = {};\n    const tokensBalancesPerDate = {};\n    let aggregatedBalance = this.functionsUtil.BNify(0);\n    // let curveTokenBalance = this.functionsUtil.BNify(0);\n    const currTimestamp = parseInt(new Date().getTime()/1000)+86400;\n\n    const tokensData = await this.functionsUtil.getTokenApiData(Object.values(this.props.availableTokens)[0].address,false,firstTxTimestamp,null,false,3600);\n\n    for (let timeStamp=firstTxTimestamp;timeStamp<=currTimestamp;timeStamp+=this.props.frequencySeconds){\n\n      let foundBalances = {};\n      let tokensBalances = {};\n      timeStamp = Math.min(currTimestamp,timeStamp);\n      let momentDate = this.functionsUtil.strToMoment(timeStamp*1000);\n\n      // eslint-disable-next-line\n      const filteredTokenData = tokensData.filter(tx => (tx.timestamp>=prevTimestamp && tx.timestamp<=timeStamp));\n\n      // eslint-disable-next-line\n      let filteredBalances = tokensBalance.filter(tx => (tx.timeStamp<=timeStamp && (!prevTimestamp || tx.timeStamp>prevTimestamp)));\n      \n      if (!filteredBalances.length){\n        if (prevBalances){\n          filteredBalances = prevBalances;\n          const lastFilteredTx = Object.values(filteredBalances).pop();\n          const currentBalance = parseFloat(lastFilteredTx.balance);\n\n          const lastTokenData = Object.values(filteredTokenData).pop();\n          let curveTokenPrice = null;\n          if (lastTokenData){\n            curveTokenPrice = await this.functionsUtil.getCurveTokenPrice(lastTokenData.blocknumber);\n          }\n\n          // Take idleToken price from API and calculate new balance\n          if (currentBalance>0 && timeStamp>firstTxTimestamp && curveTokenPrice){\n            // Set new curveTokenPrice\n            lastFilteredTx.curveTokenPrice = curveTokenPrice;\n            filteredBalances = [lastFilteredTx];\n          }\n        } else {\n          filteredBalances = [{\n            balance:this.functionsUtil.BNify(0),\n            curveTokenPrice:this.functionsUtil.BNify(0)\n          }];\n        }\n      }\n\n      const lastTx = Object.assign([],filteredBalances).pop();\n      let lastTxBalance = this.functionsUtil.BNify(lastTx.balance).times(lastTx.curveTokenPrice);\n\n      tokensBalances[curvePoolContract.token] = this.functionsUtil.BNify(lastTx.balance);\n      aggregatedBalance = lastTxBalance;\n\n      foundBalances = filteredBalances;\n\n      // console.log(momentDate.format('YYYY/MM/DD 00:00'),lastTx.balance.toString(),lastTx.curveTokenPrice.toString(),lastTxBalance.toString());\n\n      if (startDate === null || momentDate.isSameOrAfter(startDate)){\n        \n        if (momentDate.isAfter(new Date(),'day')){\n          momentDate = this.functionsUtil.strToMoment(new Date());\n        }\n\n        // Force date to midnight\n        const formattedDate = momentDate.format('YYYY/MM/DD 00:00');\n\n        // Save days for axisBottom format\n        days[momentDate.format('YYYY/MM/DD')] = 1;\n\n        const aggregatedBalanceParsed = parseFloat(parseFloat(aggregatedBalance.toFixed(6)));\n\n        aggregatedBalancesKeys[formattedDate] = aggregatedBalanceParsed;\n        tokensBalancesPerDate[formattedDate] = tokensBalances;\n\n        // console.log(formattedDate,tokensBalances);\n\n        minChartValue = minChartValue === null ? aggregatedBalanceParsed : Math.min(minChartValue,aggregatedBalanceParsed);\n        maxChartValue = maxChartValue === null ? aggregatedBalanceParsed : Math.max(maxChartValue,aggregatedBalanceParsed);\n      }\n\n      prevTimestamp = timeStamp;\n      prevBalances = foundBalances;\n    }\n\n    const aggregatedBalances = Object.keys(aggregatedBalancesKeys).map(date => ({\n      x:date,\n      y:aggregatedBalancesKeys[date],\n      balances:tokensBalancesPerDate[date]\n    }));\n\n    let itemIndex = 0;\n    aggregatedBalances.forEach( (item,index) => {\n      const itemPos = Math.floor(itemIndex/aggregatedBalances.length*100);\n      aggregatedBalances[index].itemPos = itemPos;\n      itemIndex++;\n    });\n\n    /*\n    aggregatedBalances.push({\n      x:momentDate.format('YYYY/MM/DD HH:mm'),\n      y:aggregatedBalance\n    });\n    */\n\n    // Add day before to start with zero balance\n    /*\n    const firstTxMomentDate = this.functionsUtil.strToMoment(firstTxTimestamp*1000);\n    if ((startDate === null || startDate.isSameOrBefore(firstTxMomentDate)) && aggregatedBalances.length){\n      const firstItem = aggregatedBalances[0];\n      const firstDate = this.functionsUtil.strToMoment(firstItem.x,'YYYY/MM/DD HH:mm');\n      firstDate.subtract(1,'day');\n      aggregatedBalances.unshift({\n        x:firstDate.format('YYYY/MM/DD HH:mm'),\n        y:0\n      });\n    }\n    */\n\n    // Add token Data\n    chartData.push({\n      id:'USD',\n      color: 'hsl('+ this.functionsUtil.getGlobalConfig(['stats','tokens','USD','color','hsl']).join(',')+')',\n      data:aggregatedBalances\n    });\n\n    let yFormatDecimals = 2;\n    if (maxChartValue-minChartValue<1){\n      yFormatDecimals = 4;\n    }\n\n    if (maxChartValue === minChartValue){\n      minChartValue = Math.max(0,maxChartValue-1);\n    }\n\n    const maxGridLines = 5;\n    const gridYStep = (maxChartValue-minChartValue)/maxGridLines;\n    const gridYValues = [];\n    for (let i=0;i<=maxGridLines;i++){\n      const gridYValue = parseFloat(parseFloat(minChartValue+(i*gridYStep)).toFixed(6));\n      gridYValues.push(gridYValue);\n    }\n    \n    const axisBottomMaxValues = 10;\n    const daysCount = Object.values(days).length;    \n    const daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n    const chartProps = {\n      xScale:{\n        type: 'time',\n        format: '%Y/%m/%d %H:%M',\n      },\n      yScale:{\n        type: 'linear',\n        stacked: false,\n        min: minChartValue,\n        max: maxChartValue\n      },\n      xFormat:'time:%b %d %Y',\n      yFormat:value => this.functionsUtil.formatMoney(value,yFormatDecimals),\n      axisBottom: this.props.isMobile ? null : {\n        legend: '',\n        tickSize:0,\n        format: '%b %d',\n        tickPadding: 15,\n        orient: 'bottom',\n        legendOffset: 36,\n        legendPosition: 'middle',\n        tickValues:'every '+daysFrequency+' days'\n      },\n      gridYValues,\n      pointSize:0,\n      useMesh:true,\n      axisLeft: this.props.isMobile ? null : {\n        legend: '',\n        tickSize: 0,\n        orient: 'left',\n        tickPadding: 10,\n        tickRotation: 0,\n        legendOffset: -70,\n        tickValues:gridYValues,\n        legendPosition: 'middle',\n        format: v => this.functionsUtil.abbreviateNumber(v,2),\n      },\n      animate:true,\n      pointLabel:'y',\n      areaOpacity:0.1,\n      enableArea:true,\n      enableSlices:'x',\n      enableGridY:true,\n      curve:'monotoneX',\n      enableGridX:false,\n      pointBorderWidth:1,\n      colors:d => d.color,\n      pointLabelYOffset:-12,\n      areaBaselineValue:minChartValue,\n      pointColor:{ from: 'color', modifiers: []},\n      theme:{\n        axis: {\n          ticks: {\n            text: {\n              fontSize:12,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '8 4'\n          }\n        },\n      },\n      /*\n      defs:[\n        linearGradientDef('gradientA', [\n          { offset: 0, color: 'inherit' },\n          { offset: 100, color: 'inherit', opacity: 0 },\n        ]),\n      ],\n      fill:[{ match: '*', id: 'gradientA' }],\n      */\n      margin: this.props.isMobile ? { top: 20, right: 25, bottom: 25, left: 20 } : { top: 30, right: 50, bottom: 45, left: 50 },\n      sliceTooltip:(slideData) => {\n        const { slice } = slideData;\n        const point = slice.points[0];\n        return (\n          <ChartCustomTooltip\n            point={point}\n          >\n            <ChartCustomTooltipRow\n              color={point.color}\n              label={point.serieId}\n              value={`$ ${point.data.yFormatted}`}\n            />\n            {\n            typeof point.data.balances === 'object' && Object.keys(point.data.balances).length>0 &&\n              Object.keys(point.data.balances).map(token => {\n                if (token === point.serieId){\n                  return null;\n                }\n                const tokenInfo = this.functionsUtil.getGlobalConfig(['stats','tokens',token]);\n                if (tokenInfo){\n                  const tokenName = tokenInfo.name ? tokenInfo.name : token;\n                  const color = tokenInfo.color.hex;\n                  const balance = point.data.balances[token];\n                  let formattedBalance = this.functionsUtil.formatMoney(balance,2);\n                  if (parseFloat(balance)>=0.01){\n                    return (\n                      <ChartCustomTooltipRow\n                        label={tokenName}\n                        color={color}\n                        key={`row_${token}`}\n                        value={`${formattedBalance}`}\n                      />\n                    );\n                  }\n                }\n                return null;\n              })\n            }\n          </ChartCustomTooltip>\n        );\n      }\n    };\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  render() {\n    return (\n      <GenericChart\n        type={Line}\n        showLoader={true}\n        {...this.state.chartProps}\n        data={this.state.chartData}\n        parentId={this.props.parentId}\n        height={this.props.chartHeight}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default PortfolioEquityCurve;","import theme from '../theme';\nimport Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport { Flex, Heading, Text } from \"rimble-ui\";\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport PortfolioEquityCurve from '../PortfolioEquityCurve/PortfolioEquityCurve';\n\nclass FundsOverviewCurve extends Component {\n\n  state = {\n    compAPR:null,\n    aggregatedValues:[],\n    govTokensUserBalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    await this.functionsUtil.getCurveAvgBuyPrice();\n\n    // debugger;\n\n    await this.functionsUtil.getCurveAvgSlippage();\n\n    // debugger;\n    /*\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const [govTokensUserBalance,avgAPY,days] = await Promise.all([\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,'DAI'),\n      this.functionsUtil.loadAssetField('avgAPY',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '-') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    let [tokenAllocation,compAPR] = await Promise.all([\n      this.functionsUtil.getTokenAllocation(this.props.tokenConfig,false,false),\n      this.functionsUtil.getCompAPR(this.props.selectedToken,this.props.tokenConfig)\n    ]);\n\n    if (tokenAllocation){\n      const compoundInfo = this.props.tokenConfig.protocols.find( p => (p.name === 'compound') );\n      if (compoundInfo){\n        if (tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()]){\n          const compoundAllocationPerc = tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()];\n          compAPR = compAPR.times(compoundAllocationPerc);\n        }\n      }\n    }\n\n    this.setState({\n      compAPR,\n      aggregatedValues,\n      govTokensUserBalance\n    });\n    */\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Text\n                          mt={2}\n                          fontWeight={2}\n                          fontSize={[1,2]}\n                          color={'cellText'}\n                        >\n                          {v.props.title}\n                        </Text>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquityCurve\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLentCurve',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPercCurve',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            {\n              /*\n              <Flex\n                mb={[2,0]}\n                width={[1,1/5]}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'flex-start'}\n              >\n                <Title\n                  mb={2}\n                  fontSize={[3,4]}\n                  component={Heading.h3}\n                >\n                  Fees\n                </Title>\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'feesCounter',\n                    props:{\n                      decimals:7,\n                      maxPrecision:8,\n                      style:{\n                        fontWeight:300,\n                        fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                        color:theme.colors.counter\n                      },\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n              */\n            }\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveApy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Avg Slippage\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveAvgSlippage',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverviewCurve;","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport { Box, Flex, Text, Icon } from \"rimble-ui\";\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport CurveDeposit from '../CurveDeposit/CurveDeposit';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport TransactionField from '../TransactionField/TransactionField';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport FundsOverviewCurve from '../FundsOverviewCurve/FundsOverviewCurve';\n\nclass AssetPage extends Component {\n\n  state = {\n    inputValue:{},\n    processing:{},\n    tokenFees:null,\n    canRedeem:null,\n    canDeposit:null,\n    action:'deposit',\n    activeModal:null,\n    tokenConfig:null,\n    tokenBalance:null,\n    tokenApproved:null,\n    selectedToken:null,\n    availableTokens:{},\n    redeemBalance:null,\n    depositBalance:null,\n    buttonDisabled:false,\n    curveTokenPrice:null,\n    depositSlippage:null,\n    idleTokenBalance:null,\n    withdrawSlippage:null,\n    govTokensBalance:null,\n    curveZapContract:null,\n    curveTokenConfig:null,\n    curveTokensAmounts:{},\n    govTokensDisabled:null,\n    componentMounted:false,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    redeemableBalance:null,\n    fastBalanceSelector:{},\n    curveAvailableTokens:{},\n    tokenFeesPercentage:null,\n    redeemUnevenAmounts:false,\n    curveDepositContract:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  changeFromToken = (selectedToken) => {\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    this.props.goToSection(`${curveConfig.params.route}/${selectedToken}`);\n  }\n\n  getSelectedToken(){\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    return this.props.urlParams.param1 && curveAvailableTokens[this.props.urlParams.param1] ? this.props.urlParams.param1 : Object.keys(curveAvailableTokens)[0];\n  }\n\n  setSelectedToken = async (selectedToken) => {\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n    this.setState({\n      tokenConfig,\n      selectedToken,\n      availableTokens,\n      curveTokenConfig\n    });\n  }\n\n  loadTokensInfo = async () => {\n\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    this.setState({\n      curveAvailableTokens\n    });\n\n    const selectedToken = this.getSelectedToken();\n    // Check if token is set the query params\n    if (selectedToken && selectedToken !== this.props.urlParams.param1){\n      this.changeFromToken(selectedToken);\n      return await this.setSelectedToken(selectedToken);\n    } else if (selectedToken !== this.state.selectedToken){\n      await this.setSelectedToken(selectedToken);\n    }\n\n    const newState = {...this.state};\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n\n    if (newState.selectedToken !== selectedToken){\n      newState.selectedToken = selectedToken;\n    }\n\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n\n    const [\n      curveZapContract,\n      curvePoolContract,\n      curveSwapContract,\n      curveDepositContract\n    ] = await Promise.all([\n      this.functionsUtil.getCurveZapContract(),\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract()\n    ]);\n\n    newState.curveZapContract = curveZapContract;\n    newState.curvePoolContract = curvePoolContract;\n    newState.curveSwapContract = curveSwapContract;\n    newState.curveDepositContract = curveDepositContract;\n\n    newState.availableTokens = availableTokens;\n\n\n    // console.log('curveTokenPrice',newState.curveTokenPrice.toFixed(6),'curveTokenBalance',newState.curveTokenBalance.toFixed(6),'redeemableBalance',newState.redeemableBalance.toFixed(20),'tokenBalance',newState.tokenBalance.toFixed(20));\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[selectedToken] = tokenConfig;\n\n    newState.tokenConfig = tokenConfig;\n    newState.curveTokenConfig = curveTokenConfig;\n\n    if (this.props.account){\n      [\n        newState.curveTokenPrice,\n        newState.curveTokenBalance,\n        newState.tokenFeesPercentage,\n        newState.tokenFees,\n        newState.tokenBalance,\n        newState.idleTokenBalance,\n        newState.tokenApproved,\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokenPrice(),\n        this.functionsUtil.getCurveTokenBalance(),\n        this.functionsUtil.getTokenFees(tokenConfig),\n        this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n        this.functionsUtil.getTokenBalance(selectedToken,this.props.account),\n        this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n        this.functionsUtil.checkTokenApproved(selectedToken,curveDepositContract.address,this.props.account),\n      ]);\n\n\n      newState.processing = {\n        redeem:{\n          txHash:null,\n          loading:false\n        },\n        deposit:{\n          txHash:null,\n          loading:false\n        },\n        approve:{\n          txHash:null,\n          loading:false\n        },\n      };\n      newState.inputValue = {\n        redeem:null,\n        deposit:null\n      };\n      newState.fastBalanceSelector = {\n        redeem:null,\n        deposit:null\n      };\n\n      newState.componentMounted = true;\n      newState.depositBalance = newState.tokenBalance;\n      newState.redeemBalance = newState.redeemableBalance;\n      newState.govTokensDisabled = tokenConfig.govTokensDisabled;\n      newState.canRedeem = newState.curveTokenBalance && newState.curveTokenBalance.gt(0);\n      newState.canDeposit = newState.idleTokenBalance && newState.idleTokenBalance.gt(0);\n      newState.redeemableBalance = newState.curveTokenBalance ? newState.curveTokenBalance.times(newState.curveTokenPrice) : this.functionsUtil.BNify(0);\n    }\n\n    this.setState(newState);\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async calculateSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,this.state.curvePoolContract.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositBalance = amount;\n        newState.depositSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      case 'redeem':\n        newState.redeemBalance = amount;\n        newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.urlParams.param1 !== this.props.urlParams.param1;\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n\n    if (accountChanged || transactionsChanged || tokenChanged){\n      await this.loadTokensInfo();\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const redeemUnevenAmountsChanged = this.state.redeemUnevenAmounts !== prevState.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n    if (actionChanged || fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    if (actionChanged){\n      this.updateAssetSelector();\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  updateAssetSelector = async () => {\n    const newState = {};\n    switch (this.state.action){\n      case 'deposit':\n        this.loadTokensInfo();\n      break;\n      case 'redeem':\n        // this.loadTokensInfo();\n        const tokenConfig = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n        newState.curveAvailableTokens = {};\n        newState.curveTokenConfig = tokenConfig;\n        newState.selectedToken = tokenConfig.token;\n        newState.curveAvailableTokens[tokenConfig.token] = tokenConfig;\n      break;\n      default:\n      break;\n    }\n\n    this.setState(newState);\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.state.tokenBalance ? this.functionsUtil.BNify(this.state.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          amount = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n        } else {\n          amount = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  changeInputValue = (e) => {\n    if (!this.state.action){\n      return false;\n    }\n\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && amount.gt(this.state.tokenBalance));\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.curveTokenBalance)) );\n        } else {\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.redeemableBalance)) );\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = this.state.tokenApproved;\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.state.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.functionsUtil.enableERC20(this.state.selectedToken,this.state.curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const inputValue = this.state.inputValue[this.state.action];\n    const selectedPercentage = this.getFastBalanceSelector();\n\n    let loading = true;\n\n    switch (this.state.action){\n      // Handle deposit in curve\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.state.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if (this.state.metaTransactionsEnabled && txError){\n            this.setState({\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,tokensToDeposit);\n        const minMintAmount = await this.functionsUtil.genericContractCall(this.state.curveSwapContract.name,'calc_token_amount',[amounts,true]);\n        const depositParams = [amounts,minMintAmount];\n\n        // No need for callback atm\n        contractSendResult = await this.props.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n      break;\n      case 'redeem':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        let curveTokensToRedeem = null;\n        if (selectedPercentage){\n          curveTokensToRedeem = this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage);\n        } else {\n          curveTokensToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals));\n          if (!this.state.redeemUnevenAmounts){\n            const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n            curveTokensToRedeem = curveTokensToRedeem.div(curveTokenPrice);\n          }\n        }\n\n        if (!curveTokensToRedeem){\n          return false;\n        }\n\n        const callbackRedeem = (tx,error) => {\n          const txSucceeded = tx.status === 'success';\n\n          // Send Google Analytics event\n          const eventData = {\n            eventLabel: tx.status,\n            eventCategory: `CurveRedeem`,\n            eventAction: this.state.selectedToken,\n            eventValue: curveTokensToRedeem.toFixed()\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          }\n        };\n\n        const callbackReceiptRedeem = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const _amount = this.functionsUtil.normalizeTokenAmount(curveTokensToRedeem,this.state.curvePoolContract.decimals).toString();\n        let min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,0);\n\n        const contractName = this.state.curveDepositContract.name;\n        if (this.state.redeemUnevenAmounts){\n          console.log('remove_liquidity_imbalance',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_imbalance', [min_amounts, _amount], null, callbackRedeem, callbackReceiptRedeem);\n        } else {\n          min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,_amount);\n          console.log('remove_liquidity',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts], null, callbackRedeem, callbackReceiptRedeem);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    // console.log('contractSendResult',contractSendResult);\n\n    if (contractSendResult !== false){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    const userHasFunds = this.props.account && this.state.curveTokenBalance && this.functionsUtil.BNify(this.state.curveTokenBalance).gt(0);\n    const canPerformAction = true;\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            {\n              <Breadcrumb\n                {...this.props}\n                isMobile={this.props.isMobile}\n                path={['Boost',this.state.selectedToken]}\n                handleClick={ e => this.props.goToSection('best') }\n                text={this.functionsUtil.getGlobalConfig(['strategies','best','title'])}\n              />\n            }\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Curve Pool\n        </Title>\n        <Flex\n          width={1}\n        >\n          <Flex\n            width={1}\n            alignItems={'center'}\n            flexDirection={'column'}\n            justifyContent={'center'}\n          >\n            <Flex\n              width={[1,0.36]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Box\n                width={1}\n              >\n                <Text\n                  mb={1}\n                >\n                  Select your asset:\n                </Text>\n                <AssetSelector\n                  {...this.props}\n                  id={'token-from'}\n                  onChange={this.changeFromToken}\n                  selectedToken={this.state.selectedToken}\n                  tokenConfig={this.state.curveTokenConfig}\n                  showBalance={this.state.action === 'deposit'}\n                  availableTokens={this.state.curveAvailableTokens}\n                />\n              </Box>\n              <Box\n                width={1}\n              >\n                {\n                  canPerformAction ? (\n                    <Flex\n                      mt={2}\n                      flexDirection={'column'}\n                    >\n                      <Text\n                        mb={2}\n                      >\n                        Choose the action:\n                      </Text>\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('deposit');\n                            }\n                          }}\n                          isInteractive={true}\n                          isActive={ this.state.action === 'deposit' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'deposit'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Deposit\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('redeem');\n                            }\n                          }}\n                          isInteractive={true}\n                          isDisabled={ !this.state.canRedeem }\n                          isActive={ this.state.action === 'redeem' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'redeem'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Redeem\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                      </Flex>\n                    </Flex>\n                  ) : (\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    >\n                      <Icon\n                        size={'2.3em'}\n                        name={'MoneyOff'}\n                        color={'cellText'}\n                      />\n                      <Text\n                        mt={2}\n                        fontSize={2}\n                        color={'cellText'}\n                        textAlign={'center'}\n                      >\n                        You don't have any {this.state.tokenConfig.idle.token} in your wallet.\n                      </Text>\n                    </Flex>\n                  )\n                }\n              </Box>\n            </Flex>\n            <Flex\n              width={1}\n              mt={ this.props.account ? 3 : 0 }\n            >\n            {\n              this.state.action === 'deposit' ? (\n                <CurveDeposit\n                  {...this.props}\n                  {...this.state}\n                />\n              ) : this.state.action === 'redeem' && (\n                <CurveRedeem\n                  {...this.props}\n                  {...this.state}\n                />\n              )\n            }\n            </Flex>\n          </Flex>\n        </Flex>\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverviewCurve\n                {...this.props}\n                tokenFees={this.state.tokenFees}\n                tokenConfig={this.state.tokenConfig}\n                selectedToken={this.state.selectedToken}\n                availableTokens={this.state.availableTokens}\n                enabledTokens={Object.keys(this.state.availableTokens)}\n              />\n            </Flex>\n        }\n        {\n          /*\n          this.props.account && !this.state.govTokensDisabled[this.state.selectedToken] && Object.keys(availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id=\"earnings-estimation\"\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(availableGovTokens)}\n                handleClick={(props) => {}}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.33,0.22]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.26],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    props:{\n                      width:[0.33,0.26],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                      {\n                        name:'tooltip',\n                        props:{\n                          placement:'bottom',\n                          message:'The shown balance may be lower than the real one.',\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    mobile:false,\n                    props:{\n                      width: 0.26,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                ]}\n                {...this.props}\n                availableTokens={availableGovTokens}\n              />\n            </Flex>\n          */\n        }\n        {\n          /*\n          this.props.account && \n            <Flex\n              mb={[3,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'estimated-earnings-container'}\n            >\n              <Title my={[3,4]}>Estimated earnings</Title>\n              <EstimatedEarnings\n                {...this.props}\n              />\n            </Flex>\n          */\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              availableTokens={this.state.availableTokens}\n              enabledTokens={Object.keys(this.state.availableTokens)}\n              enabledActions={['CurveIn','CurveOut','CurveZapIn','CurveZapOut','CurveTransferIn','CurveTransferOut','CurveDepositIn','CurveDepositOut']}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.state.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport {\n  Text,\n  Modal,\n  Button,\n  Form,\n  Icon,\n  Flex,\n  Link\n} from \"rimble-ui\";\nimport axios from 'axios';\nimport colors from '../../colors';\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\nimport globalConfigs from '../../configs/globalConfigs';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\n\nclass WelcomeModal extends React.Component {\n\n  state = {\n    email:null,\n    error:false,\n    subscribed:false,\n    sendingForm:false\n  };\n\n  functionsUtil = null;\n\n  constructor(props) {\n    super(props);\n    this.functionsUtil = new FunctionsUtil(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleValidation = this.handleValidation.bind(this);\n  }\n\n  componentDidUpdate = async () => {\n    this.functionsUtil.setProps(this.props);\n  }\n\n  sendUserInfo = (sendEmail=true) => {\n    const walletProvider = this.functionsUtil.getWalletProvider();\n    const userInfo = {\n      address: this.props.account,\n      provider: walletProvider\n    };\n\n    if (sendEmail && this.state.email !== null){\n      userInfo.email = this.state.email;\n    }\n\n    this.functionsUtil.simpleIDPassUserInfo(userInfo);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    if (!this.state.email){\n      return false;\n    }\n\n    const callback = () => {\n      this.setState({\n        sendingForm:false,\n        subscribed:true\n      });\n      window.setTimeout(this.props.closeModal,2500);\n    };\n\n    this.sendUserInfo();\n\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'send_email',\n      eventLabel: 'WelcomeModal'\n    });\n\n    axios.post(globalConfigs.newsletterSubscription.endpoint, {\n      'email': this.state.email\n    }).then(r => {\n      callback();\n    })\n    .catch(err => {\n      callback();\n    });\n\n    // Set signedUp in the localStorage\n    if (localStorage){\n      const walletAddress = this.props.account.toLowerCase();\n      let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : null;\n      if (lastLogin && lastLogin[walletAddress] && !lastLogin[walletAddress].signedUp){\n        lastLogin[walletAddress].signedUp = true;\n        this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n      }\n    }\n\n    this.setState({\n      sendingForm:true\n    })\n  };\n\n  closeModal = async () => {\n\n    const closeModal = () => {\n      this.props.closeModal();\n    };\n\n    try{\n      // Prevent sending email\n      this.sendUserInfo(false);\n\n      // Send Google Analytics event\n      if (globalConfigs.analytics.google.events.enabled){\n        this.functionsUtil.sendGoogleAnalyticsEvent({\n          eventCategory: 'UI',\n          eventAction: 'continue_without_email',\n          eventLabel: 'WelcomeModal'\n        },closeModal);\n\n        // Call callback after 1 second if stuck\n        setTimeout(closeModal,1000);\n      } else {\n        closeModal();\n      }\n    } catch (err) {\n      closeModal();\n    }\n  }\n\n  handleValidation(e) {\n    if (e && e.target) {\n      this.setState({ email: e.target.value });\n      e.target.parentNode.classList.add(\"was-validated\");\n    }\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        {\n          this.state.subscribed ? (\n            <ModalCard\n              closeFunc={this.closeModal}\n            >\n              <ModalCard.Header title={'All done'} icon={`images/done.svg`}></ModalCard.Header>\n              <ModalCard.Body>\n                <Flex width={1} flexDirection={'column'} mb={3}>\n                  <Text color={'dark-gray'} textAlign={'center'} fontSize={3} my={0}>\n                    Thanks for subscribing!\n                  </Text>\n                  <Button\n                    my={3}\n                    width={'100%'}\n                    borderRadius={4}\n                    onClick={this.closeModal}\n                  >\n                    CLOSE\n                  </Button>\n                </Flex>\n              </ModalCard.Body>\n            </ModalCard>\n          ) : (\n            <ModalCard closeFunc={this.closeModal}>\n              <ModalCard.Header title={'Stay up-to-date!'} icon={`images/notification.svg`}>\n              </ModalCard.Header>\n              <ModalCard.Body>\n                <Form onSubmit={this.handleSubmit}>\n                  <Flex width={1} flexDirection={'column'} mb={3}>\n                    <Text color={'mid-gray'} textAlign={'left'} fontSize={3} my={0}>\n                      Add your e-mail to receive updates about:\n                    </Text>\n                  </Flex>\n                  <Flex width={1} flexDirection={'column'} mt={2}>\n                    <Flex my={2} flexDirection={'row'} alignItems={'center'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Performance reports\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        New Protocols & Tokens\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Latest updates\n                      </Text>\n                    </Flex>\n                    <Form.Field width={1} label={''}>\n                      <Form.Input\n                        px={3}\n                        py={4}\n                        required\n                        width={1}\n                        border={0}\n                        fontSize={3}\n                        type={\"email\"}\n                        name={\"EMAIL\"}\n                        outline={'none'}\n                        borderColor={'cardBorder'}\n                        backgroundColor={'cardBg'}\n                        textAlign={['center','left']}\n                        className={header_styles.input}\n                        placeholder={'Enter your e-mail'}\n                        onChange={this.handleValidation}\n                      />\n                    </Form.Field>\n                    <Flex mb={3} flexDirection={'column'} alignItems={'center'} justifyContent={'center'}>\n                      <ButtonLoader\n                        buttonText={'SUBMIT'}\n                        isLoading={this.state.sendingForm}\n                        buttonProps={{className:header_styles.gradientButton,width:'100%',type:'submit'}}\n                      >\n                      </ButtonLoader>\n                      <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without e-mail</Link>\n                    </Flex>\n                  </Flex>\n                </Form>\n              </ModalCard.Body>\n            </ModalCard>\n          )\n        }\n      </Modal>\n    );\n  }\n}\n\nexport default WelcomeModal;\n","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\n\nclass MigrateModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'continue_without_migrate',\n        eventLabel: 'MigrateModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowMigrateModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowMigrateModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = () => {\n    const tokenMigrationRoute = this.functionsUtil.getGlobalConfig(['tools','tokenMigration','route']);\n    this.props.goToSection('tools/'+tokenMigrationRoute);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            iconHeight={'40px'}\n            title={'Migrate to Idle'}\n            icon={`images/migrate.svg`}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={3}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                You can migrate your funds from Compound, Aave, Fulcrum, Yearn and Idle V2 with just one transaction.\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                my={2}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.protocolsTokensBalances && Object.keys(this.props.protocolsTokensBalances).map( token => (\n                    <Flex\n                      mb={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      key={`token_${token}`}\n                      justifyContent={'space-between'}\n                    >\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'icon',\n                          props:{\n                            mr:2,\n                            height:'2.3em'\n                          }\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                      <SmartNumber\n                        mr={2}\n                        {...fieldProps}\n                        minPrecision={5}\n                        number={this.props.protocolsTokensBalances[token].balance} \n                      />\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'tokenName',\n                          props:fieldProps\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                    </Flex>\n                  ) )\n                }\n                <Text\n                  mb={0}\n                  fontSize={1}\n                  color={'red'}\n                  fontWeight={500}\n                  textAlign={'center'}\n                >\n                  Please be aware that by migrating your tokens from other protocols, your open positions might be liquidated if collateralized with migrated tokens.\n                </Text>\n              </Flex>\n              <Flex\n                mb={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <ButtonLoader\n                  buttonText={'MIGRATE'}\n                  handleClick={this.migrate}\n                  isLoading={this.state.sendingForm}\n                  buttonProps={{\n                    width:['100%','50%'],\n                    className:header_styles.gradientButton\n                  }}\n                >\n                </ButtonLoader>\n                {\n                /*\n                <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without migrate</Link>\n                */\n                }\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default MigrateModal;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass UpgradeModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'close_upgrade_modal',\n        eventLabel: 'UpgradeModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowUpgradeModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowUpgradeModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = async (token,strategy=null) => {\n\n    if (!strategy){\n      strategy = this.props.selectedStrategy;\n    }\n\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  convert = async (token) => {\n    const convertTool = this.functionsUtil.getGlobalConfig(['tools','tokenMigration']);\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n\n    if (!this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            icon={`images/migrate.svg`}\n            title={'Upgrade Available'}\n            iconHeight={['35px','40px']}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={[2,3]}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                Idle now supports yield farming and governance tokens distribution, migrate now your portfolio with just one click!\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n              >\n                <Flex\n                  fontSize={[2,3]}\n                  width={[0.5,0.28]}\n                  fontWeight={[4,5]}\n                  color={'copyColor'}\n                >\n                  {\n                    this.props.isMobile ? 'ASSET' : 'ASSET TO MIGRATE'\n                  }\n                </Flex>\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      BALANCE\n                    </Flex>\n                  )\n                }\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      OLD APY\n                    </Flex>\n                  )\n                }\n                <Flex\n                  fontSize={[2,3]}\n                  fontWeight={[4,5]}\n                  width={[0.25,0.19]}\n                  color={'copyColor'}\n                  justifyContent={'center'}\n                >\n                  {\n                    this.props.isMobile ? 'APY' : 'NEW APY'\n                  }\n                </Flex>\n                <Flex\n                  width={[0.25,0.15]}\n                >\n                  \n                </Flex>\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.tokensToMigrate && Object.keys(this.props.tokensToMigrate).map( tokenKey => {\n                    const token = this.props.tokensToMigrate[tokenKey].token;\n                    const strategy = this.props.tokensToMigrate[tokenKey].strategy;\n                    const tokenConfig = this.props.tokensToMigrate[tokenKey].tokenConfig;\n                    const balance = this.props.tokensToMigrate[tokenKey].oldContractBalanceFormatted;\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${tokenKey}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={[0.5,0.28]}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:['1.8em','2.3em']\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                        </Flex>\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <SmartNumber\n                                {...fieldProps}\n                                minPrecision={5}\n                                number={balance}\n                                flexProps={{\n                                  justifyContent:'center'\n                                }}\n                              />\n                            </Flex>\n                          )\n                        }\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <AssetField\n                                {...this.props}\n                                fieldInfo={{\n                                  name:'oldApy',\n                                  props:fieldProps\n                                }}\n                                token={token}\n                                tokenConfig={tokenConfig}\n                              />\n                            </Flex>\n                          )\n                        }\n                        <Flex\n                          width={[0.25,0.19]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={token}\n                            tokenConfig={tokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={[0.25,0.15]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.migrate(token,strategy) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.oldIdleTokensToMigrate && Object.keys(this.props.oldIdleTokensToMigrate).map( token => {\n                    const tokenConfig = this.props.oldIdleTokensToMigrate[token].tokenConfig;\n\n                    if (!tokenConfig){\n                      return null;\n                    }\n\n                    const balance = this.props.oldIdleTokensToMigrate[token].balance;\n                    let newTokenConfig = null;\n\n                    if (tokenConfig.availableStrategies && !this.props.availableTokens[tokenConfig.baseToken]){\n                      newTokenConfig = this.props.availableStrategies[tokenConfig.availableStrategies[0]][tokenConfig.baseToken];\n                    } else {\n                      newTokenConfig = this.props.availableTokens[tokenConfig.baseToken];\n                    }\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${token}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={0.28}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:'2.3em'\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <SmartNumber\n                            {...fieldProps}\n                            minPrecision={5}\n                            number={balance}\n                            flexProps={{\n                              justifyContent:'center'\n                            }}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'oldApy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.15}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.convert(token) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                my={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <RoundButton\n                  handleClick={this.closeModal}\n                  buttonProps={{\n                    fontSize:[2,3],\n                    width:['100%','40%'],\n                  }}\n                >\n                  MIGRATE LATER\n                </RoundButton>\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default UpgradeModal;","import React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport { Flex, Card, Icon, Text } from 'rimble-ui';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardMenu from '../DashboardMenu/DashboardMenu';\n\n// Import page components\nimport Stats from '../Stats/Stats';\nimport Utils from '../Utils/Utils';\nimport AssetPage from '../AssetPage/AssetPage';\nimport RoundButton from '../RoundButton/RoundButton';\nimport BetaModal from \"../utilities/components/BetaModal\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CurveStrategy from '../CurveStrategy/CurveStrategy';\nimport WelcomeModal from \"../utilities/components/WelcomeModal\";\nimport TooltipModal from \"../utilities/components/TooltipModal\";\nimport MigrateModal from \"../utilities/components/MigrateModal\";\nimport UpgradeModal from \"../utilities/components/UpgradeModal\";\nimport DashboardHeader from '../DashboardHeader/DashboardHeader';\n\nclass Dashboard extends Component {\n  state = {\n    menu:[],\n    baseRoute:null,\n    clickEvent:null,\n    activeModal:null,\n    currentRoute:null,\n    pageComponent:null,\n    currentSection:null,\n    selectedSection:null,\n    tokensToMigrate:null,\n    showResetButton:false,\n    selectedSubsection:null,\n    pageComponentProps:null,\n    oldIdleTokensToMigrate:null,\n    protocolsTokensBalances:null,\n  };\n\n  timeoutId = null;\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    window.functionsUtil = this.functionsUtil;\n  }\n\n  async loadMenu() {\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n    const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n    const menu = Object.keys(strategies).filter( s => ( !strategies[s].comingSoon ) ).map(strategy => ({\n        submenu:[],\n        color:'#fff',\n        selected:false,\n        route:baseRoute+'/'+strategy,\n        label:strategies[strategy].title,\n        image:strategies[strategy].icon,\n        bgColor:strategies[strategy].color,\n        component:strategies[strategy].component,\n        imageInactive:strategies[strategy].iconInactive,\n        imageInactiveDark:strategies[strategy].iconInactiveDark\n      })\n    );\n\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n\n    // Add Curve\n    if (curveConfig.enabled){\n      const curveParams = Object.assign({\n        submenu:[],\n        selected:false,\n        component:CurveStrategy,\n      },curveConfig.params);\n\n      menu.push(curveParams);\n    }\n\n    // Add Stake\n    const stakeConfig = this.functionsUtil.getGlobalConfig(['tools','stake']);\n    if (stakeConfig.enabled){\n      menu.push(\n        {\n          submenu:[],\n          label:'Stake',\n          selected:false,\n          color:'dark-gray',\n          icon:stakeConfig.icon,\n          route:'/dashboard/stake',\n          component:Utils,\n          componentProps:{\n            showBreadCrumb:false,\n            toolProps:stakeConfig.props,\n            selectedSubsection:stakeConfig\n          },\n          bgColor:this.props.theme.colors.primary,\n        }\n      );\n    }\n\n    // Add tools\n    menu.push(\n      {\n        icon:'Build',\n        label:'Tools',\n        color:'dark-gray',\n        component:Utils,\n        selected:false,\n        route:'/dashboard/tools',\n        bgColor:this.props.theme.colors.primary,\n        submenu:Object.values(this.functionsUtil.getGlobalConfig(['tools'])).filter( u => (u.enabled) )\n      }\n    );\n\n    // Add Stats\n    menu.push(\n      {\n        icon:'Equalizer',\n        label:'Stats',\n        bgColor:'#21f36b',\n        color:'dark-gray',\n        component:Stats,\n        selected:false,\n        route:'/dashboard/stats',\n        submenu:[]\n      }\n    );\n\n    // Add Forum\n    menu.push(\n      {\n        submenu:[],\n        icon:'Forum',\n        mobile:false,\n        label:'Forum',\n        selected:false,\n        component:null,\n        color:'dark-gray',\n        bgColor:'#ff0000',\n        isExternalLink:true,\n        route:this.functionsUtil.getGlobalConfig(['forumURL'])\n      }\n    );\n\n    await this.setState({\n      menu\n    });\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  openTooltipModal = (modalTitle,modalContent) => {\n\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: modalTitle,\n      eventLabel: 'TooltipModal'\n    });\n\n    this.setState({\n      modalTitle,\n      modalContent\n    },() => {\n      this.setActiveModal('tooltip');\n    })\n  }\n\n  setActiveModal = (activeModal) => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadParams() {\n    const { match: { params } } = this.props;\n\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n    let currentRoute = baseRoute;\n\n    let pageComponent = null;\n    let selectedToken = null;\n    let currentSection = null;\n    let selectedStrategy = null;\n    let pageComponentProps = null;\n\n    // Set strategy\n    if (params.section){\n      currentSection = params.section;\n      const param1 = params.param1;\n      const param2 = params.param2;\n\n      const section_is_strategy = Object.keys(this.props.availableStrategies).includes(currentSection.toLowerCase());\n      const param1_is_strategy = param1 && Object.keys(this.props.availableStrategies).includes(param1.toLowerCase());\n\n      if (section_is_strategy || param1_is_strategy){\n\n        if (!section_is_strategy){\n          currentRoute += '/'+currentSection;\n        }\n\n        selectedStrategy = section_is_strategy ? currentSection : param1;\n        currentRoute += '/'+selectedStrategy;\n\n        // Set token\n        const param1_is_token = param1 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param1.toUpperCase());\n        const param2_is_token = param2 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param2.toUpperCase());\n        if (param1_is_token || param2_is_token){\n          selectedToken = param1_is_token ? param1.toUpperCase() : param2.toUpperCase();\n          currentRoute += '/'+selectedToken;\n\n          if (section_is_strategy){\n            pageComponent = AssetPage;\n          }\n        }\n      } else {\n        currentRoute += '/'+params.section;\n\n        if (params.param1 && params.param1.length){\n          currentRoute += '/'+params.param1;\n        }\n\n        // if (params.param2 && params.param2.length){\n        //   currentRoute += '/'+params.param2;\n        // }\n      }\n    }\n\n    const menu = this.state.menu;\n\n    let selectedSection = null;\n    let selectedSubsection = null;\n\n    menu.forEach(m => {\n      m.selected = false;\n      const sectionRoute = baseRoute+'/'+params.section;\n      if (currentRoute.toLowerCase() === m.route.toLowerCase() || ( !m.submenu.length && m.route.toLowerCase() === sectionRoute.toLowerCase() )){\n        m.selected = true;\n        if (pageComponent === null){\n          pageComponent = m.component;\n          pageComponentProps = m.componentProps;\n        }\n      } else if (m.submenu.length) {\n        m.submenu.forEach(subm => {\n          subm.selected = false;\n          const submRoute = m.route+'/'+subm.route;\n          if (submRoute.toLowerCase() === currentRoute.toLowerCase()){\n            m.selected = true;\n            subm.selected = true;\n\n            // Set component, if null use parent\n            if (pageComponent === null){\n              if (subm.component){\n                pageComponent = subm.component;\n                pageComponentProps = m.componentProps;\n              } else {\n                pageComponent = m.component;\n                pageComponentProps = m.componentProps;\n              }\n            }\n          }\n\n          // Set selected subsection\n          if (subm.selected){\n            selectedSubsection = subm;\n          }\n\n        });\n      }\n\n      // Set selected section\n      if (m.selected){\n        selectedSection = m;\n      }\n    });\n\n    // console.log('pageComponent',params,pageComponent);\n\n    // Exit if no strategy and token selected\n    if (!pageComponent){\n      return this.goToSection('/',false);\n    }\n\n    // console.log('loadParams',selectedStrategy,selectedToken);\n    await this.props.setStrategyToken(selectedStrategy,selectedToken);\n    \n    // Send GA pageview\n    this.functionsUtil.sendGoogleAnalyticsPageview(currentRoute);\n\n    await this.setState({\n      menu,\n      params,\n      baseRoute,\n      currentRoute,\n      pageComponent,\n      currentSection,\n      selectedSection,\n      pageComponentProps,\n      selectedSubsection\n    });\n  }\n\n  componentWillUnmount(){\n    if (this.timeoutId){\n      window.clearTimeout(this.timeoutId);\n    }\n  }\n\n  async componentWillMount() {\n\n    this.props.setCurrentSection('dashboard');\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n  }\n\n  async componentDidMount() {\n\n    this.timeoutId = window.setTimeout(() => {\n      if (!this.props.accountInizialized || !this.props.contractsInitialized){\n        this.setState({\n          showResetButton:true\n        });\n      }\n    },20000);\n\n    if (!this.props.web3){\n      return this.props.initWeb3();\n    } else if (!this.props.accountInizialized){\n      return this.props.initAccount();\n    } else if (!this.props.contractsInitialized){\n      return this.props.initializeContracts();\n    }\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n\n    const viewOnly = this.props.connectorName === 'custom';\n    if (!viewOnly){\n      this.checkModals();\n    }\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n\n    this.loadUtils();\n\n    const prevParams = prevProps.match.params;\n    const params = this.props.match.params;\n\n    if (JSON.stringify(prevParams) !== JSON.stringify(params)){\n      await this.setState({\n        pageComponent:null\n      }, () => {\n        this.loadParams();\n      });\n    }\n\n    const viewOnly = this.props.connectorName === 'custom';\n    const accountChanged = prevProps.account !== this.props.account;\n    const strategyChanged = this.props.selectedStrategy && prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const availableTokensChanged = JSON.stringify(prevProps.availableTokens) !== JSON.stringify(this.props.availableTokens);\n    const accountInizialized = this.props.accountInizialized && prevProps.accountInizialized !== this.props.accountInizialized;\n    const contractsInitialized = this.props.contractsInitialized && prevProps.contractsInitialized !== this.props.contractsInitialized;\n\n    if (!viewOnly && (accountChanged || accountInizialized || contractsInitialized || strategyChanged || availableTokensChanged)){\n      this.checkModals();\n    }\n  }\n\n  async checkModals(){\n\n    if (this.props.selectedToken || !this.props.accountInizialized || !this.props.contractsInitialized || !this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    await this.checkBetaApproval();\n    await this.checkTokensToMigrate();\n    await this.checkWelcomeModal();\n    await this.checkProtocolsTokensBalances();\n  }\n\n  async checkBetaApproval(){\n    const isOriginUrl = this.functionsUtil.checkUrlOrigin();\n    const isBetaApproved = this.functionsUtil.getStoredItem('betaApproved',false,false);\n\n    // Show Beta Warning modal\n    if (!isOriginUrl && !isBetaApproved){\n      const activeModal = 'beta';\n      if (activeModal !== this.state.activeModal){\n        await this.setState({\n          activeModal,\n        });\n\n        return activeModal;\n      }\n    }\n  }\n\n  async checkTokensToMigrate(){\n\n    const showUpgradeModal = this.functionsUtil.getStoredItem('dontShowUpgradeModal',false,null) !== null ? false : true;\n    if (this.props.selectedToken || !showUpgradeModal || !this.props.availableTokens || this.state.activeModal !== null){\n      return null;\n    }\n\n    const tokensToMigrate = await this.functionsUtil.getTokensToMigrate();\n    const oldIdleTokensToMigrate = await this.functionsUtil.getProtocolsTokensBalances('idle');\n\n    // console.log('tokensToMigrate',tokensToMigrate);\n    \n    if ((tokensToMigrate && Object.keys(tokensToMigrate).length>0) || (oldIdleTokensToMigrate && Object.keys(oldIdleTokensToMigrate).length>0)){\n      const activeModal = 'upgrade';\n      if (activeModal !== this.state.activeModal){\n        await this.setState({\n          activeModal,\n          tokensToMigrate,\n          oldIdleTokensToMigrate\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkWelcomeModal(){\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show welcome modal\n    if (this.props.account && this.state.activeModal === null){\n      let welcomeIsOpen = false;\n\n      const welcomeModalProps = this.functionsUtil.getGlobalConfig(['modals','welcome']);\n\n      if (welcomeModalProps.enabled && localStorage){\n\n        // Check the last login of the wallet\n        const currTime = new Date().getTime();\n        const walletAddress = this.props.account.toLowerCase();\n        let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : {};\n\n        // First login\n        if (!lastLogin[walletAddress]){\n          lastLogin[walletAddress] = {\n            'signedUp':false,\n            'lastTime':currTime\n          };\n          welcomeIsOpen = true;\n        // User didn't sign up\n        } else if (!lastLogin[walletAddress].signedUp) {\n          const lastTime = parseInt(lastLogin[walletAddress].lastTime);\n          const timeFromLastLogin = (currTime-lastTime)/1000;\n          welcomeIsOpen = timeFromLastLogin>=welcomeModalProps.frequency; // 1 day since last login\n        }\n\n        if (welcomeIsOpen){\n          lastLogin[walletAddress].lastTime = currTime;\n          this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n        }\n      }\n\n      const activeModal = welcomeIsOpen ? 'welcome' : this.state.activeModal;\n      if (this.state.activeModal !== activeModal){\n        await this.setState({\n          activeModal\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkProtocolsTokensBalances() {\n\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show migration modal if no other modals are opened\n    const migrateModalEnabled = this.functionsUtil.getGlobalConfig(['modals','migrate','enabled']);\n    const showMigrateModal = this.functionsUtil.getStoredItem('dontShowMigrateModal',false,null) !== null ? false : true;\n\n    if (this.state.activeModal === null && migrateModalEnabled && showMigrateModal && !this.state.protocolsTokensBalances){\n      const protocolsTokensBalances = await this.functionsUtil.getProtocolsTokensBalances();\n      const activeModal = protocolsTokensBalances && Object.keys(protocolsTokensBalances).length>0 ? 'migrate' : null;\n      const newState = {\n        activeModal,\n        protocolsTokensBalances\n      };\n      await this.setState(newState);\n      return activeModal;\n    }\n\n    return null;\n  }\n\n  goToSection(section,isDashboard=true){\n\n    // Remove dashboard route\n    if (isDashboard){\n      section = section.replace(this.state.baseRoute +'/','');\n    }\n\n    const newRoute = isDashboard ? this.state.baseRoute +'/' + section : section;\n    window.location.hash=newRoute;\n\n    // Send GA event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'goToSection',\n      eventLabel: newRoute\n    });\n\n    window.scrollTo(0, 0);\n  }\n\n  logout = async () => {\n    this.props.setConnector('Infura','Infura');\n    await this.props.initWeb3('Infura');\n  }\n\n  changeToken(selectedToken){\n    selectedToken = selectedToken.toUpperCase();\n    if (Object.keys(this.props.availableTokens).includes(selectedToken)){\n      const routeParts = [];\n\n      // Add section\n      if (this.state.currentSection.toLowerCase() !== this.props.selectedStrategy.toLowerCase()){\n        routeParts.push(this.state.currentSection);\n      }\n\n      // Add strategy\n      routeParts.push(this.props.selectedStrategy); \n\n      // Add token\n      routeParts.push(selectedToken);\n\n      this.goToSection(routeParts.join('/'));\n    }\n  }\n\n  propagateClickEvent(clickEvent){\n    this.setState({\n      clickEvent:clickEvent.target\n    });\n  }\n\n  render() {\n    const PageComponent = this.state.pageComponent ? this.state.pageComponent : null;\n    return (\n      <Flex\n        width={'100%'}\n        position={'fixed'}\n        flexDirection={'row'}\n        className={this.props.themeMode}\n        backgroundColor={['dashboardBg','white']}\n        /*onClick={ e => this.propagateClickEvent(e) }*/\n        height={[(window.innerHeight-61)+'px','100vh']}\n      >\n        <Flex\n          bottom={0}\n          zIndex={99999}\n          width={[1,1/6]}\n          flexDirection={'column'}\n          position={['fixed','relative']}\n        >\n          <Card\n            p={[0,3]}\n            border={0}\n            width={['100vw','auto']}\n            height={['auto','100vh']}\n            backgroundColor={'menuBg'}\n            borderColor={this.props.theme.colors.menuRightBorder}\n            borderRight={`1px solid ${this.props.theme.colors.menuRightBorder}`}\n            >\n            <DashboardMenu\n              {...this.props}\n              menu={this.state.menu}\n            />\n          </Card>\n        </Flex>\n        <Flex\n          py={3}\n          mb={0}\n          px={[3,5]}\n          width={[1,5/6]}\n          style={{\n            overflowY:'scroll',\n            overflowX:'hidden'\n          }}\n          height={['92vh','auto']}\n          flexDirection={'columns'}\n          backgroundColor={'dashboardBg'}\n        >\n          {\n            !this.props.accountInizialized || !this.props.contractsInitialized || !PageComponent ? (\n              <Flex\n                width={1}\n                minHeight={'50vg'}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                {\n                  !this.props.network.isCorrectNetwork ? (\n                    <DashboardCard\n                      cardProps={{\n                        p:3,\n                        mt:3,\n                        width:[1,0.35]\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Icon\n                          size={'2.3em'}\n                          name={'Warning'}\n                          color={'cellText'}\n                        />\n                        <Text\n                          mt={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          The <strong>{this.functionsUtil.capitalize(this.props.network.current.name)} Network</strong> is not supported, please switch to the correct network.\n                        </Text>\n                      </Flex>\n                    </DashboardCard>\n                  ) : !this.state.showResetButton ? (\n                    <FlexLoader\n                      textProps={{\n                        textSize:4,\n                        fontWeight:2\n                      }}\n                      loaderProps={{\n                        mb:3,\n                        size:'40px'\n                      }}\n                      flexProps={{\n                        my:3,\n                        flexDirection:'column'\n                      }}\n                      text={ !this.props.accountInizialized ? 'Loading account...' : ( !this.props.contractsInitialized ? 'Loading contracts...' : 'Loading assets...' )}\n                    />\n                  ) : (\n                    <DashboardCard\n                      cardProps={{\n                        p:3,\n                        mt:3,\n                        width:[1,0.35]\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Icon\n                          size={'2.3em'}\n                          name={'Warning'}\n                          color={'cellText'}\n                        />\n                        <Text\n                          mt={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          Idle can't connect to your wallet!<br />Make sure that your wallet is unlocked and try again.\n                        </Text>\n                        <RoundButton\n                          buttonProps={{\n                            mt:3,\n                            width:[1,1/2]\n                          }}\n                          handleClick={this.logout.bind(this)}\n                        >\n                          Logout\n                        </RoundButton>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n              </Flex>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardHeader\n                  clickEvent={this.state.clickEvent}\n                  goToSection={this.goToSection.bind(this)}\n                  {...this.props}\n                />\n                {\n                  PageComponent &&\n                    <PageComponent\n                      {...this.props}\n                      match={{ params:{} }}\n                      urlParams={this.state.params}\n                      changeToken={this.changeToken.bind(this)}\n                      goToSection={this.goToSection.bind(this)}\n                      selectedSection={this.state.selectedSection}\n                      selectedSubsection={this.state.selectedSubsection}\n                      openTooltipModal={this.openTooltipModal.bind(this)}\n                      {...this.state.pageComponentProps}\n                      />\n                }\n              </Flex>\n            )\n          }\n        </Flex>\n        <BetaModal\n          closeModal={this.resetModal}\n          isOpen={this.state.activeModal === 'beta'}\n        />\n        <UpgradeModal\n          {...this.props}\n          closeModal={this.resetModal}\n          goToSection={this.goToSection.bind(this)}\n          tokensToMigrate={this.state.tokensToMigrate}\n          isOpen={this.state.activeModal === 'upgrade'}\n          oldIdleTokensToMigrate={this.state.oldIdleTokensToMigrate}\n        />\n        <MigrateModal\n          {...this.props}\n          closeModal={this.resetModal}\n          goToSection={this.goToSection.bind(this)}\n          isOpen={this.state.activeModal === 'migrate'}\n          protocolsTokensBalances={this.state.protocolsTokensBalances}\n        />\n        <TooltipModal\n          closeModal={this.resetModal}\n          title={this.state.modalTitle}\n          content={this.state.modalContent}\n          isOpen={this.state.activeModal === 'tooltip'}\n        />\n        <WelcomeModal\n          closeModal={this.resetModal}\n          account={this.props.account}\n          simpleID={this.props.simpleID}\n          network={this.props.network.current}\n          tokenName={this.props.selectedToken}\n          initSimpleID={this.props.initSimpleID}\n          baseTokenName={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'welcome'}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default Dashboard;"],"sourceRoot":""}