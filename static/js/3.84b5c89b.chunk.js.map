{"version":3,"sources":["AssetsUnderManagement/AssetsUnderManagement.js","TwitterShareButton/TwitterShareButton.module.scss","Stats/StatsChart.js","Rebalance/Rebalance.js","utilities/components/DateRangeModal.js","Stats/Stats.js","Utils/Utils.js","FundsOverview/FundsOverview.js","CurveRedeem/CurveRedeem.js","TwitterShareButton/TwitterShareButton.js","utilities/components/ShareModal.js","DepositRedeem/DepositRedeem.js","EstimatedEarnings/EstimatedEarnings.js","AssetPage/AssetPage.js","utilities/components/BetaModal.js","CurveDeposit/CurveDeposit.js","PortfolioEquityCurve/PortfolioEquityCurve.js","FundsOverviewCurve/FundsOverviewCurve.js","CurveStrategy/CurveStrategy.js","utilities/components/WelcomeModal.js","utilities/components/MigrateModal.js","utilities/components/UpgradeModal.js","Dashboard/Dashboard.js"],"names":["AssetsUnderManagement","state","totalAUM","totalAUMEndOfYear","functionsUtil","this","setProps","props","FunctionsUtil","loadUtils","loadTotalAUM","prevProps","prevState","contractsInitialized","availableStrategies","JSON","stringify","getAggregatedStats","avgAPY","plus","times","div","setState","_this2","react__WEBPACK_IMPORTED_MODULE_9___default","a","createElement","rimble_ui__WEBPACK_IMPORTED_MODULE_10__","width","react_countup__WEBPACK_IMPORTED_MODULE_8___default","delay","decimals","decimal","separator","useEasing","duration","start","parseFloat","end","formattingFn","n","formatMoney","_ref2","countUpRef","style","counterStyle","display","color","whiteSpace","fontFamily","theme","fonts","counter","fontWeight","fontWeights","textAlign","isMobile","fontSize","fontSizes","ref","subtitle","_Title_Title__WEBPACK_IMPORTED_MODULE_7__","Object","assign","subtitleProps","span","alignItems","justifyContent","loaderAlign","size","Component","module","exports","twitterIcon","StatsChart","chartProps","chartType","chartData","chartWidth","parseAum","value","parseInt","toFixed","_this","selectedToken","loadApiData","_callee3","maxGridLines","apiResults","apiResults_unfiltered","totalItems","protocols","versionInfo","keys","tempData","gridYStep","itemIndex","gridYValues","maxChartValue","axisBottomIndex","idleChartData","firstIdleBlock","divergingData","startTimestamp","endTimestamp","timestamp","date","lastRow","maxRange","i","_i","_i2","_i3","prevValue","_i4","prevApr","prevData","avgApy","startBalance","currentBalance","aaveProtocolInfo","_i5","firstTokenPrice","_i6","regenerator_default","wrap","_context3","prev","next","tokenConfig","chartMode","abrupt","length","globalConfigs","stats","versions","idleVersion","Line","t0","moment","_d","getTime","format","deposits","redeems","forEach","row","idleTokens","fixTokenDecimals","idleSupply","idleTokensPrev","eq","diff","minus","gte","Math","max","abs","values","filter","v","Bar","push","indexBy","enableLabel","minValue","maxValue","label","d","axisBottom","tickSize","legend","tickPadding","orient","legendOffset","legendPosition","tickValues","axisLeft","axisRight","tickRotation","abbreviateNumber","markers","axis","lineStyle","strokeOpacity","textStyle","fill","colors","transactions","action","deposit","legendOrientation","legendOffsetX","stroke","strokeDasharray","redeem","padding","labelTextColor","labelSkipWidth","labelSkipHeight","pointSize","useMesh","animate","pointLabel","curve","enableArea","enableSlices","enableGridX","enableGridY","pointBorderWidth","pointLabelYOffset","legends","dataFrom","itemWidth","itemHeight","translateX","translateY","symbolSize","itemsSpacing","direction","anchor","symbolShape","itemTextColor","effects","on","themeMode","ticks","text","sansSerif","grid","line","lineChartStroke","textTransform","tooltip","container","boxShadow","background","pointColor","from","modifiers","margin","top","right","bottom","left","data","xFormatted","strToMoment","indexValue","point","id","depositFormatted","redeemFormatted","react_default","CustomTooltip","CustomTooltipRow","tokens","hsl","join","map","idlePrice","aum","x","y","toString","p","j","protocolsData","protocolAllocation","protocolAddr","toLowerCase","address","z","BNify","rate","allocation","foundItem","item","pos","indexOf","allocations","name","undefined","xScale","type","xFormat","yFormat","yScale","stacked","showAdvanced","sliceTooltip","slideData","slice","points","serieId","serieColor","yFormatted","protocolName","protocolInfo","protocolColor","protocolAllocationFormatted","protocolAllocationPerc","key","concat","protocolData","protocolPaused","foundProtocol","find","tableCell","_ref3","DashboardCard","cardProps","py","px","borderCollapse","height","totalAllocation","reduce","accumulator","allocationPerc","_ref4","_ref5","enabled","protocolRate","lt","aaveAdditionalAPR","gt","idle","idleRate","protocolEarning","defiScore","isNaN","idleScore","apy","isSameOrBefore","aaveProtocolData","pData","apr","days","earnings","earning","blocknumber","itemPos","floor","additionalProtocols","additionalProtocol","protocol","enabledTokens","includes","unshift","objectSpread","tokensProps","tokenProps","isAfter","Date","now","rateField","chartRow","baseProfit","firstProtocolData","firstProtocolBlock","acc","field","rowData","idlePerformance","d1","protocolApy","tokenPrice","asyncForEach","_ref6","asyncToGenerator","mark","_callee2","lastRowData","lastTokenPrice","_context2","_ref7","_callee","tokenExchangeRate","tokenPriceFixed","lastYDiff","_context","price","stop","_x2","apply","arguments","_x","showAdvancedChanged","apiResultsChanged","tokenChanged","componentDidMount","GenericChart","showLoader","parentId","parentIdHeight","Rebalance","loading","processing","rebalance","txHash","shouldRebalance","componentUnmounted","checkRebalance","setStateSafe","sent","e","callback","callback_receipt","preventDefault","tx","error","eventData","eventLabel","status","eventCategory","eventAction","getTransactionError","sendGoogleAnalyticsEvent","window","toastProvider","addMessage","secondaryMessage","colorTheme","actionHref","actionText","variant","transactionHash","contractMethodSendWrapper","token","accountChanged","account","newState","index_es","minHeight","flexDirection","FlexLoader","flexProps","loaderProps","textProps","ml","TxProgressBar","waitText","endMessage","hash","mt","mb","RoundButton","buttonProps","disabled","handleClick","DateRangeModal","quickSelection","ranges","startDate","endDate","componentDidUpdate","selection","target","clone","subtract","closeModal","handleSelect","startTimestampObj","endTimestampObj","_this3","isOpen","ModalCard","closeFunc","Header","title","Body","backgroundColor","cardBg","required","onChange","handleQuickSelect","bind","options","dist","minDate","maxDate","className","Footer","my","mx","borderRadius","mainColor","onClick","React","Stats","delta","carouselMax","rebalances","buttonGroups","carouselIndex","statsVersions","minStartTime","govTokensPool","unlentBalance","carouselOffsetLeft","showRefreshIdleSpeed","dateRangeModalOpened","quickSelections","day","week","weeks","month","setDateRange","isSameOrAfter","isSame","add","isBefore","maxEndDate","toggleAdvancedCharts","setDateRangeModal","filterTokenData","r","setIdleVersion","isRisk","firstResult","lastResult","firstIdlePrice","lastIdlePrice","compoundInfo","firstCompoundData","lastCompoundData","compoundWithCOMPInfo","compoundAvgApr","firstCompoundPrice","lastCompoundPrice","compoundApr","availableTokens","selectedStrategy","getTokenApiData","pop","convertTokenBalance","sum","compoundWithCOMP","compoundData","compoundRate","index","prevRow","prevTotalAllocation","hasRebalanced","prevP","prevAllocation","getGovTokenPool","getUnlentBalance","selectToken","strategy","setStrategyToken","changeToken","handleCarousel","$element","jQuery","position","loadParams","latestVersion","version","enabledStrategies","strategiesParams","versionInfoExtra","param","params","match","currentNetworkAvailableTokens","customToken","toUpperCase","getLatestAvailableVersion","getVersionInfo","newEndTimestampObj","newStartTimestampObj","web3","initWeb3","loadCarousel","strategyChanged","dateChanged","versionChanged","idleTokenEnabled","getGlobalConfig","apyLong","textSize","statsTokens","versionsOptions","performanceTooltip","versionDefaultValue","Breadcrumb","showPathMobile","goToSection","path","GenericSelector","innerProps","defaultValue","AssetSelector","isInteractive","pr","StatsCard","labelTooltip","SmartNumber","precision","lineHeight","unitProps","number","unit","VariationNumber","iconPos","iconSize","description","Stats_StatsChart","contracts","pb","pt","AllocationChart","src_Rebalance_Rebalance","pl","h4","RoundIconButton","mr","iconName","transition","titleParentProps","utilities_components_DateRangeModal","strategies","statsProtocols","strategyInfo","availableProtocolsKeys","availableProtocols","Title","titlePostfix","AssetsList","cols","fields","mobile","parentProps","overflow","desc","showTooltip","rgb","hoverColor","isActive","ExecuteTransaction","Button","componentProps","contractName","methodName","completed","Utils","SubComponent","selectedSubsection","subComponent","viewOnly","connectorName","showBreadCrumb","selectedSection","route","dangerouslySetInnerHTML","__html","directProps","toolProps","flexWrap","IconBox","maxWidth","icon","submenu","tool","toolIndex","flex","image","src","FundsOverview","aggregatedValues","govTokensTotalApr","govTokensUserBalance","govTokensDistribution","govTokensTotalBalance","govTokensTotalAprTooltip","idleTokenUserDistribution","govTokensDistributionTooltip","govTokensTotalBalanceTooltip","idleGovToken","getIdleGovToken","govTokenAvailableTokens","Promise","all","getUserDistribution","getGovTokensUserBalances","loadAssetField","depositTimestamp","getAvgAPYStats","lte","totBalance","govTokenBalance","govToken","balance","children","AssetField","fieldInfo","placement","message","PortfolioEquity","chartHeight","chartToken","frequencySeconds","getFrequencySeconds","component","Heading","h3","maxPrecision","govTokenIndex","tokenName","distributionFrequency","CurveRedeem","inputValue","maxSlippage","unevenAmounts","buttonDisabled","showMaxSlippage","redeemUnderlying","curveTokenConfig","curvePoolContract","curveSwapContract","curveTokenBalance","curveTokensAmounts","fastBalanceSelector","redeemUnevenAmounts","curveRedeemableIdleTokens","toggleUnevenAmounts","checkButtonDisabled","amount","changeInputValue","setFastBalanceSelector","setMaxSlippage","initToken","max_slippage","normalizedAmount","normalizeTokenAmount","withdrawSlippage","curveIdleTokensAmounts","getCurveTokensAmounts","getCurveIdleTokensAmounts","getCurveSlippage","getCurveTokenPrice","curveTokenPrice","redeemableBalance","redeemUnevenAmountsChanged","setInputValue","inputChanged","maxSlippageChanged","tokenConfigChanged","calculateSlippage","loadSelectedTokenConfig","selectedPercentage","curveConfig","getCurvePoolContract","getCurveSwapContract","getCurveTokenBalance","getCurveRedeemableIdleTokens","getCurveAvailableTokens","callbackRedeem","txSucceeded","eventValue","callbackReceiptRedeem","_amount","min_amounts","console","log","coin_index","migrationParams","coinIndex","min_amount","showSlippage","curveTokenName","cancelTransaction","checked","showBalance","selectDestinationToken","slippage","FastBalanceSelector","percentage","onMouseDown","failed","textOverflow","min","placeholder","border","divider","TwitterShareButton","share","parent","w","innerWidth","open","tweet","contrastColor","styles","ShareModal","getGlobalConfigs","analytics","google","events","escape","customText","confettiEnabled","react_confetti_default","zIndex","run","recycle","innerHeight","src_TwitterShareButton_TwitterShareButton","DepositRedeem","txError","tokenAPY","curveAPY","canRedeem","canDeposit","directMint","activeModal","tokenGovTokens","showBuyFlow","maxUnlentPerc","tokenApproved","skipMigration","redeemSkipGov","showRedeemFlow","contractPaused","canRedeemCurve","erc20ForwarderTx","signedParameters","minAmountForMint","redeemGovTokens","canDepositCurve","redeemSkipGovTokens","actionProxyContract","migrationEnabled","componentMounted","agreeSkipGovTokens","redeemCurveEnabled","depositCurveBalance","depositCurveEnabled","showAdvancedOptions","skipGovTokensGasSave","depositCurveSlippage","erc20ForwarderContract","erc20ForwarderEnabled","showETHWrapperEnabled","skipGovTokensGasSaveUSD","metaTransactionsEnabled","skippedGovTokensBalance","minAmountForMintReached","loadingErc20ForwarderTx","setShowRedeemFlow","setShowBuyFlow","toggleShowAdvancedOptions","toggleSkipMigration","toggleRedeemCurve","toggleDepositCurve","toggleShowETHWrapper","toggleAgreeSkipGovTokens","toggleSkipMint","toggleRedeemGovTokens","toggleRedeemSkipGov","getSkippedGovTokensFlags","govTokensIndexes","govTokensFlags","getGovTokensIndexes","calculateSkippedGovTokens","DAITokenConfig","_skipGovTokenRedeem","WETHTokenConfig","wethPrice","redeemGasUsage","skipGovRedeemGasUsage","govTokenConfig","govTokenPrice","skippedAmount","getUniswapConversionRate","govTokensUserBalances","estimateMethodGasUsage","idleTokenBalance","slicedToArray","setRedeemSkipGovTokens","splice","toggleErc20ForwarderEnabled","toggleMetaTransactionsEnabled","resetModal","setActiveModal","checkUseProxyContract","proxyContract","depositErc20ForwarderEnabled","depositMetaTransactionsEnabled","biconomy","approveContract","_callee4","callbackApprove","callbackReceiptApprove","curveDepositContract","_context4","enableERC20","checkTokenApproved","_callee5","_context5","approveToken","_callee6","_context6","approve","loadTokenInfo","_callee7","curveTokenEnabled","_ref10","_ref11","_context7","checkContractPaused","getCurveDepositContract","checkMigration","tokenBalance","getTokenGovTokens","boost","checkAction","loadAPY","_callee8","_context8","defineProperty","executeAction","_callee11","contractSendResult","callbackDeposit","callbackReceiptDeposit","curvePoolContractInfo","tokensToDeposit","amounts","minMintAmount","depositParams","_tokensToDeposit","_depositParams","mintProxyContractInfo","mintProxyContract","_mintProxyContract$me","functionCall","functionSignature","_referral","txData","idleTokenToRedeem","idleTokenPriceWithFee","_callbackRedeem","_callbackReceiptRedeem","redeemMethod","redeemParams","_context11","getFastBalanceSelector","localStorage","setLocalStorage","lendingProcessing","lendAmount","genericError","getCurveAmounts","getCurveTokenAmount","integerValue","contract","methods","function","toConsumableArray","encodeABI","sendBiconomyTxWithPersonalSign","_callee10","metaInfo","permitOptions","erc20ForwarderBaseContract","expiry","nonce","s","_context10","signPermit","allowed","holder","spender","permitData","permitType","asyncTimeout","sendBiconomyTxWithErc20Forwarder","request","_callee9","_erc20ForwarderContra","_functionCall","_functionSignature","_context9","buildBiconomyErc20ForwarderTx","getReferralAddress","getIdleTokenPriceWithFee","_callee12","_context12","setAction","loadProxyContracts","actions","_ref17","_callee15","erc20ForwarderContractInfo","hasProxyContract","_context15","initContract","abi","approved","_x5","getTokenAprs","tokenAprs","getCurveAPY","getQueryStringParameterByName","checkAddress","erc20ForwarderEnabledChanged","tokenBalanceChanged","actionChanged","fastBalanceSelectorChanged","redeemSkipGovChanged","redeemGovTokensChanged","agreeSkipGovTokensChanged","redeemSkipGovTokensChanged","depositCurveChanged","calculateCurveSlippage","showPoolPerc","convertedAmount","genericContractCall","depositPerc","maxUnlentPercFormatted","govTokensEnabled","govTokensDisabled","skipMintForDepositEnabled","skipMintForDeposit","redeemGovTokenEnabled","govTokensBalance","redeemSkipGovConfig","redeemSkipGovEnabled","disabledTokens","redeemSkipGovNoTokens","showAdvancedRedeemOptions","metaTransactionsAvailable","useMetaTx","erc20ForwarderClient","totalBalance","migrateText","migration","depositCurve","showDepositCurve","showRedeemCurve","showCurveSlippage","showAdvancedDepositOptions","batchDepositInfo","batchDepositEnabled","batchDepositDepositEnabled","depositEnabled","showBatchDeposit","isMigrationTool","ethWrapperInfo","ETHWrapperComponent","showETHWrapper","canPerformAction","showActionFlow","showReferral","Migrate","migrateTextBefore","TransactionField","transaction","isDisabled","openTooltipModal","isRainbow","cursor","m","CardIconButton","imageProps","ExtLink","href","getWalletProvider","capitalize","primary","fullWidth","cost","align","tokenFeesPercentage","borderColor","minWidth","ConnectBox","src_CurveRedeem_CurveRedeem","BuyModal","showInline","availableMethods","buyToken","components_ShareModal","EstimatedEarnings","maxInputValue","loadChart","getTokenApy","earningsYear","tokenApy","amountMonth","amount3Months","amount6Months","amountYear","perc","monthColor","month3","month3Color","month6","month6Color","year","yearColor","labelTextColorModifiers","gridYValue","_ref","labels","showAPYDisclaimer","verticalAlign","AssetPage","tokenFees","idleTokenPrice","availableGovTokens","getTokenFees","getIdleTokenPrice","getTokenBalance","getUserTokenFees","getGovTokensUserTotalBalance","loadTokensInfo","availableTokensChanged","transactionsChanged","userHasFunds","src_DepositRedeem_DepositRedeem","src_FundsOverview_FundsOverview","src_EstimatedEarnings_EstimatedEarnings","TransactionsList","BetaModal","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","iconHeight","CurveDeposit","depositSlippage","migrationContract","curveTokensBalance","migrationSucceeded","migrationContractApproved","checkMigrationContractApproved","getMigrationParams","approveCallback","migrationCallback","idleTokenBalanceChanged","toMigrate","n_coins","underlyingBalanceToDeposit","normalizeIdleTokenBalance","hasCurveTokens","PortfolioEquityCurve","chartwidth","loadChartData","quickDateSelectionChanged","quickDateSelection","getCurveTxs","curveTxs","tokensBalance","processedTxs","firstTxTimestamp","timeStamp","curveTokens","currentDate","prevBalances","prevTimestamp","minChartValue","aggregatedBalancesKeys","tokensBalancesPerDate","aggregatedBalance","currTimestamp","tokensData","foundBalances","tokensBalances","momentDate","filteredTokenData","filteredBalances","lastFilteredTx","lastTokenData","lastTx","lastTxBalance","formattedDate","aggregatedBalanceParsed","aggregatedBalances","balances","yFormatDecimals","daysCount","daysFrequency","ceil","areaOpacity","areaBaselineValue","ChartCustomTooltip","ChartCustomTooltipRow","tokenInfo","hex","formattedBalance","FundsOverviewCurve","compAPR","getCurveAvgBuyPrice","getCurveAvgSlippage","src_PortfolioEquityCurve_PortfolioEquityCurve","redeemBalance","depositBalance","curveZapContract","curveAvailableTokens","changeFromToken","setSelectedToken","baseToken","getSelectedToken","urlParams","param1","getCurveZapContract","updateAssetSelector","curveTokensToRedeem","src_CurveDeposit_CurveDeposit","src_FundsOverviewCurve_FundsOverviewCurve","enabledActions","WelcomeModal","email","subscribed","sendingForm","sendUserInfo","sendEmail","walletProvider","userInfo","provider","simpleIDPassUserInfo","setTimeout","err","handleSubmit","assertThisInitialized","handleValidation","axios","post","newsletterSubscription","endpoint","then","catch","walletAddress","lastLogin","getItem","parse","signedUp","parentNode","classList","onSubmit","green","Field","Input","outline","header_styles","input","ButtonLoader","buttonText","isLoading","gradientButton","MigrateModal","dontShowAgain","toggleDontShowAgain","removeStoredItem","migrate","tokenMigrationRoute","fieldProps","protocolsTokensBalances","minPrecision","UpgradeModal","_args3","convert","convertTool","tokensToMigrate","tokenKey","oldContractBalanceFormatted","oldIdleTokensToMigrate","newTokenConfig","Dashboard","menu","baseRoute","clickEvent","currentRoute","pageComponent","currentSection","showResetButton","pageComponentProps","timeoutId","modalTitle","modalContent","logout","setConnector","comingSoon","selected","bgColor","imageInactive","iconInactive","imageInactiveDark","iconInactiveDark","curveParams","CurveStrategy","stakeConfig","u","isExternalLink","section","param2","section_is_strategy","param1_is_strategy","param1_is_token","param2_is_token","sectionRoute","subm","sendGoogleAnalyticsPageview","clearTimeout","setCurrentSection","loadMenu","accountInizialized","initAccount","initializeContracts","checkModals","prevParams","checkBetaApproval","checkTokensToMigrate","checkWelcomeModal","checkProtocolsTokensBalances","isOriginUrl","checkUrlOrigin","isBetaApproved","getStoredItem","showUpgradeModal","getTokensToMigrate","getProtocolsTokensBalances","welcomeIsOpen","welcomeModalProps","currTime","lastTime","frequency","migrateModalEnabled","showMigrateModal","isDashboard","replace","newRoute","location","scrollTo","routeParts","PageComponent","menuRightBorder","borderRight","DashboardMenu","overflowY","overflowX","DashboardHeader","network","isCorrectNetwork","current","components_BetaModal","components_UpgradeModal","components_MigrateModal","TooltipModal","content","components_WelcomeModal","simpleID","initSimpleID","baseTokenName"],"mappings":"oNAMMA,6MAEJC,MAAQ,CACNC,SAAS,KACTC,kBAAkB,QAIpBC,cAAgB,gFAGVC,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,4JAK9CF,KAAKI,YACLJ,KAAKK,oMAGkBC,EAAUC,yEACjCP,KAAKI,YACCI,EAAuBF,EAAUE,uBAAyBR,KAAKE,MAAMM,uBACvCF,EAAUG,qBAAuBC,KAAKC,UAAUL,EAAUG,uBAAyBC,KAAKC,UAAUX,KAAKE,MAAMO,sBAC/GD,IAChCR,KAAKK,kRAMFL,KAAKE,MAAMO,qBAAwBT,KAAKE,MAAMM,+DAC1C,0BAMCR,KAAKD,cAAca,qCAF3BC,WACAhB,aAGIC,EAAoBD,EAASiB,KAAKjB,EAASkB,MAAMF,EAAOG,IAAI,OAElEhB,KAAKiB,SAAS,CACZpB,WACAC,yJAIK,IAAAoB,EAAAlB,KACP,OAAOA,KAAKJ,MAAMC,SAChBsB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,MAAO,GAEPJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CACEK,MAAO,EACPC,SAAU,EACVC,QAAS,IACTC,UAAW,GACXC,WAAW,EACXC,SAAU,QACVC,MAAOC,WAAWhC,KAAKJ,MAAMC,UAC7BoC,IAAKD,WAAWhC,KAAKJ,MAAME,mBAC3BoC,aAAe,SAAAC,GAAC,MAAI,KAAKjB,EAAKnB,cAAcqC,YAAYD,EAAE,KAEzD,SAAAE,GAAA,IAAGC,EAAHD,EAAGC,WAAHD,EAAeN,MAAf,OACCZ,EAAAC,EAAAC,cAAA,QACEkB,MAAQrB,EAAKhB,MAAMsC,aAAetB,EAAKhB,MAAMsC,aAAe,CAC1DC,QAAQ,QACRC,MAAM,YACNC,WAAW,SACXC,WAAW1B,EAAKhB,MAAM2C,MAAMC,MAAMC,QAClCC,WAAW9B,EAAKhB,MAAM2C,MAAMI,YAAY,GACxCC,UAAWhC,EAAKhB,MAAMiD,SAAW,SAAW,QAC5CC,SAAUlC,EAAKhB,MAAMiD,SAAW,QAAUjC,EAAKhB,MAAM2C,MAAMQ,UAAU,IAEvEC,IAAKhB,OAKuB,qBAAxBtC,KAAKE,MAAMqD,UAA4BvD,KAAKE,MAAMqD,WACxDpC,EAAAC,EAAAC,cAACmC,EAAA,EAADC,OAAAC,OAAA,CACEV,WAAY,EACZI,SAAU,CAAC,EAAE,GACbV,MAAO,YACPQ,UAAW,CAAC,SAAS,UACjBlD,KAAKE,MAAMyD,eAGb3D,KAAKE,MAAMqD,SAAWvD,KAAKE,MAAMqD,SAC/BpC,EAAAC,EAAAC,cAACC,EAAA,EAAKsC,KAAN,CAAWZ,WAAY,UAAWN,MAAO,UAAWU,SAAU,WAA9D,2BAAiGjC,EAAAC,EAAAC,cAACC,EAAA,EAAKsC,KAAN,CAAWlB,MAAO,YAAaM,WAAY,EAAGI,SAAU,OAAxD,gBAQ7GjC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEuC,WAAY,SACZC,eAAgB9D,KAAKE,MAAM6D,aAAe,UAE1C5C,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACE0C,KAAM,iBA1GoBC,aAiHrBtE,mDCtHfuE,EAAAC,QAAA,CAAkBC,YAAA,sSCo5DHC,6MAz4DbzE,MAAQ,CACN0E,WAAW,GACXC,UAAU,KACVC,UAAU,KACVC,WAAW,QAuBb1E,cAAgB,OAShB2E,SAAW,SAAAC,GACT,OAAQC,SAASD,IAAQ,IAAO3C,WAAW2C,EAAM,KAAME,QAAQ,GAAG,IAAM7C,WAAW2C,IAAS,IAAIG,EAAK5E,MAAM6E,iBAG7GC,iCAAc,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAnB,EAAAF,EAAAC,EAAAqB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,EAAAnG,EAAAoG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAEP7C,EAAK5E,MAAM0H,aAAgB9C,EAAK5E,MAAM6E,eAAkBD,EAAK5E,MAAM2H,WAAc/C,EAAK5E,MAAMiF,WAFrF,CAAAsC,EAAAE,KAAA,eAAAF,EAAAK,OAAA,UAGH,GAHG,OAMN5C,EAAe,EACfC,EAAaL,EAAK5E,MAAMiF,WACxBC,EAAwBN,EAAK5E,MAAMkF,sBACnCC,EAAaF,EAAW4C,OACxBzC,EAAY7B,OAAOC,OAAO,GAAGoB,EAAK5E,MAAM0H,YAAYtC,WAGpDC,EAAcyC,IAAcC,MAAMC,SAASpD,EAAK5E,MAAMiI,aAExD3C,EAAO,GACPC,EAAW,GACXC,EAAY,EACZC,EAAY,EACZnB,EAAY,GACZF,EAAa,GACbC,EAAY6D,IACZxC,EAAc,GACdC,EAAgB,EAChBC,EAAkB,EAClBC,EAAgB,KAChBC,EAAiB,KA1BTyB,EAAAY,GA4BJvD,EAAK5E,MAAM2H,UA5BPJ,EAAAE,KA6BL,QA7BKF,EAAAY,GAAA,GA6UL,QA7UKZ,EAAAY,GAAA,GA4jBL,QA5jBKZ,EAAAY,GAAA,GAsuBL,aAtuBKZ,EAAAY,GAAA,GA6zBL,QA7zBKZ,EAAAY,GAAA,GAy/BL,UAz/BKZ,EAAAY,GAAA,GA+qCL,aA/qCKZ,EAAAY,GAAA,GA8gDL,UA9gDKZ,EAAAY,GAAA,sBAmCR,IALIpC,EAAgB,GAEdC,EAAiBtB,SAASQ,EAAsB,GAAGgB,WACnDD,EAAevB,SAAS0D,MAASC,GAAGC,UAAU,KAE3CpC,EAAUF,EAAeE,GAAWD,EAAaC,GAAW,MAC7DC,EAAOiC,IAAiB,IAAVlC,GAAgBqC,OAAO,cACtCxC,EAAcI,KACjBJ,EAAcI,GAAQ,CACpBA,OACAD,YACAsC,SAAU,EACVC,QAAS,IAwDf,IAnDIrC,EAAU,KACdlB,EAAsBwD,QAAQ,SAAAC,GAC5B,IAAMxC,EAAOiC,IAAqB,IAAdO,EAAIzC,WAAgBqC,OAAO,cACzCK,EAAahE,EAAK/E,cAAcgJ,iBAAiBF,EAAIG,WAAW,IAWtE,GATK/C,EAAcI,KACjBJ,EAAcI,GAAQ,CACpBA,OACAD,UAAUyC,EAAIzC,UACdsC,SAAU,EACVC,QAAS,IAITrC,EAAQ,CACV,IAAM2C,EAAiBnE,EAAK/E,cAAcgJ,iBAAiBzC,EAAQ0C,WAAW,IAE9E,IADwBF,EAAWI,GAAGD,GACnB,CACjB,IAAME,EAAOL,EAAWM,MAAMH,GAE1BE,EAAKE,IAAI,IACXpD,EAAcI,GAAMqC,UAAU1G,WAAWmH,GACzCtD,EAAgByD,KAAKC,IAAI1D,EAAcI,EAAcI,GAAMqC,YAE3DzC,EAAcI,GAAMsC,SAAS3G,WAAWmH,GACxCtD,EAAgByD,KAAKC,IAAI1D,EAAcyD,KAAKE,IAAIvD,EAAcI,GAAMqC,kBAKxEzC,EAAcI,GAAMqC,UAAU1G,WAAW8G,GAG3CxC,EAAUuC,IAGZrE,EAAYf,OAAOgG,OAAOxD,GAAeyD,OAAO,SAAAC,GAC9C,QAAS7E,EAAK5E,MAAMgG,gBAAkByD,EAAEvD,WAAWtB,EAAK5E,MAAMgG,mBAAqBpB,EAAK5E,MAAMiG,cAAgBwD,EAAEvD,WAAWtB,EAAK5E,MAAMiG,gBAGpII,EAAW,EACf/B,EAAUoE,QAAQ,SAAAe,GAChBpD,EAAW+C,KAAKC,IAAIhD,EAAS+C,KAAKE,IAAIG,EAAEjB,UAAUY,KAAKE,IAAIG,EAAEhB,YAG/DpE,EAAYqF,IAEZ9D,EAAkB,EAElBJ,EAAY1D,WAAW6D,EAAcX,GACrCU,EAAc,CAAC,GACNY,EAAE,EAAEA,GAAG,EAAEA,IAChBZ,EAAYiE,KAAKrD,EAAEd,GAnGb,OAsGRpB,EAAa,CACXwF,QAAS,OACTC,aAAa,EACbC,UAAUzD,EACV0D,SAAS1D,EACT2D,MAAO,SAAAC,GACL,OAAOb,KAAKE,IAAIW,EAAExF,QAEpByF,WAAYtF,EAAK5E,MAAMiD,SAAW,KAAO,CACvCkH,SAAU,EACVC,OAAQ,GACR7B,OAAQ,SAAC9D,GACP,GAAImB,IAAoB,IAAM,EAC5B,OAAOwC,IAAO3D,EAAM,oBAAoB8D,OAAO,WAGnD8B,YAAa,GACbC,OAAQ,SACRC,aAAc,EACdC,eAAgB,SAChBC,WAAY,gBAEdC,SAAU,KACVC,UAAW,CACTP,OAAQ,GACRD,SAAU,EACVG,OAAQ,OACRD,YAAa,GACbO,aAAc,EACdL,cAAe,GACfE,WAAW,EACXD,eAAgB,SAChBjC,OAAQ,SAAAkB,GAAC,OAAI7E,EAAK/E,cAAcgL,iBAAiBzB,KAAKE,IAAIG,GAAG,KAE/DqB,QAAS,CACP,CACEC,KAAM,IACNtG,MAAO,EACPuG,UAAW,CAAEC,cAAe,GAC5BC,UAAW,CAAEC,KAAMvG,EAAK5E,MAAM2C,MAAMyI,OAAOC,aAAaC,OAAOC,SAC/DnB,OAAQ,WACRI,eAAgB,WAChBgB,kBAAmB,WAEnBC,eAAgB,IAElB,CACEV,KAAM,IACNtG,MAAO,EACPuG,UAAW,CAAEU,OAAQ9G,EAAK5E,MAAM2C,MAAMyI,OAAO,aAAcO,gBAAiB,OAC5ET,UAAW,CAAEC,KAAMvG,EAAK5E,MAAM2C,MAAMyI,OAAOC,aAAaC,OAAOM,QAC/DxB,OAAQ,UACRI,eAAgB,cAChBgB,kBAAmB,WAEnBC,eAAgB,KAGpBnG,KAAK,CAAC,WAAW,WACjBuG,QAAQ,GACRT,OAAO,CAACxG,EAAK5E,MAAM2C,MAAMyI,OAAOC,aAAaC,OAAOC,QAAS3G,EAAK5E,MAAM2C,MAAMyI,OAAOC,aAAaC,OAAOM,QACzGE,eAAgB,sBAChBC,eAAgB,GAChBC,gBAAiB,GACjBC,UAAU,EACVC,SAAQ,EACRC,SAAQ,EACRC,WAAW,IACXC,MAAM,SACNC,YAAW,EACXC,aAAa,IACbC,aAAY,EACZC,aAAY,EACZC,iBAAiB,EACjBC,mBAAmB,GACnBC,QAAQ,CACN,CACEC,SAAS,OACTC,UAAWlI,EAAK5E,MAAMiD,SAAW,GAAK,IACtC8J,WAAY,GACZC,WAAY,EACZC,WAAYrI,EAAK5E,MAAMiD,SAAW,GAAK,GACvCiK,WAAY,GACZC,aAAc,EACdC,UAAW,MACXC,OAAQ,cACRC,YAAa,SACbC,cAAe3I,EAAK5E,MAAM2C,MAAMyI,OAAOhB,OACvCoD,QAAS,CACP,CACEC,GAAI,QACJpL,MAAO,CACLkL,cAAwC,UAAzB3I,EAAK5E,MAAM0N,UAAwB,OAAS,YAMrE/K,MAAM,CACJoI,KAAM,CACJ4C,MAAO,CACLC,KAAM,CACJ1K,SAAU0B,EAAK5E,MAAMiD,SAAW,GAAI,GACpCH,WAAW,IACXqI,KAAKvG,EAAK5E,MAAM2C,MAAMyI,OAAOhB,OAC7B1H,WAAYkC,EAAK5E,MAAM2C,MAAMC,MAAMiL,aAIzCC,KAAM,CACJC,KAAM,CACJrC,OAAQ9G,EAAK5E,MAAM2C,MAAMyI,OAAO4C,gBAAiBrC,gBAAiB,SAGtEiB,QAAQ,CACNgB,KAAK,CACH9K,WAAW,IACXqI,KAAKvG,EAAK5E,MAAM2C,MAAMyI,OAAOhB,OAC7B6D,cAAc,aACdvL,WAAYkC,EAAK5E,MAAM2C,MAAMC,MAAMiL,UACnC3K,SAAU0B,EAAK5E,MAAMiD,SAAW,GAAI,KAGxCiL,QAAQ,CACNC,UAAU,CACRC,UAAU,KACVC,WAAW,QAIjBC,WAAW,CAAEC,KAAM,QAASC,UAAW,IACvCC,OAAQ7J,EAAK5E,MAAMiD,SAAW,CAAEyL,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAAO,CAAEH,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IACrHX,QAAQ,SAACY,GACP,IAAMC,EAAanK,EAAK/E,cAAcmP,YAAYF,EAAKG,YAAY1G,OAAO,UACpE2G,EAAQ,CACZC,GAAGL,EAAKK,GACRL,KAAK,CACHC,eAGEK,EAAmBxK,EAAK/E,cAAcgL,iBAAiBiE,EAAKA,KAAKtG,SAAS,GAAG,IAAI5D,EAAK5E,MAAM6E,cAC5FwK,EAAkBzK,EAAK/E,cAAcgL,iBAAiBiE,EAAKA,KAAKrG,QAAQ,GAAG,IAAI7D,EAAK5E,MAAM6E,cAChG,OACEyK,EAAApO,EAAAC,cAACoO,EAAA,EAAD,CACEL,MAAOA,GAEPI,EAAApO,EAAAC,cAACqO,EAAA,EAAD,CACExF,MAAO,WACPxH,MAAOoC,EAAK5E,MAAM2C,MAAMyI,OAAOG,QAC/B9G,MAAO2K,IAETE,EAAApO,EAAAC,cAACqO,EAAA,EAAD,CACExF,MAAO,SACPxH,MAAOoC,EAAK5E,MAAM2C,MAAMyI,OAAOQ,OAC/BnH,MAAO4K,OAhQT9H,EAAAK,OAAA,qBAoYR,IArDAjC,EAAgB,EAEhBrB,EAAUqF,KAAK,CACbwF,GAAG,MACH3M,MAAO,OAAOsF,IAAcC,MAAM0H,OAAO7K,EAAK5E,MAAM6E,eAAerC,MAAMkN,IAAIC,KAAK,KAAK,IACvFb,KAAM7J,EAAW2K,IAAI,SAAC3F,EAAE3D,GACtB,IAAMsC,EAAahE,EAAK/E,cAAcgJ,iBAAiBoB,EAAEnB,WAAW,IAC9D+G,EAAYjL,EAAK/E,cAAcgJ,iBAAiBoB,EAAE4F,UAAUjL,EAAK5E,MAAM0H,YAAYlG,UACnFsO,EAAMlH,EAAW/H,MAAMgP,GACvBE,EAAI3H,IAAmB,IAAZ6B,EAAE/D,WAAgBqC,OAAO,oBACpCyH,EAAIlO,WAAWgO,EAAIG,YAIzB,OAFAtK,EAAgByD,KAAKC,IAAI1D,EAAcqK,GAEhC,CAAED,IAAEC,SAKfpL,EAAK5E,MAAM0H,YAAYtC,UAAUsD,QAAQ,SAACwH,EAAEC,GAC1ClL,EAAW2K,IAAI,SAAC3F,EAAE3D,GAChB,OAAO2D,EAAEmG,cAAc5G,OAAO,SAAC6G,EAAmBN,GAC9C,OAAOM,EAAmBC,aAAaC,gBAAkBL,EAAEM,QAAQD,gBAEtEX,IAAI,SAACS,EAAmBI,GAEvB,IADuB7L,EAAK/E,cAAc6Q,MAAML,EAAmBM,MAAM3H,GAAG,GACxD,CAClB,IAAM+G,EAAI3H,IAAmB,IAAZ6B,EAAE/D,WAAgBqC,OAAO,oBACtCyH,EAAIlO,WAAW8C,EAAK/E,cAAcgJ,iBAAiBwH,EAAmBO,WAAWhM,EAAK5E,MAAM0H,YAAYlG,WAE5GmE,EAAgByD,KAAKC,IAAI1D,EAAcqK,GAEvC,IAAIa,EAAYvM,EAAU,GAAGwK,KAAKtF,OAAO,SAAAsH,GAAU,OAAOA,EAAKf,IAAMA,IACrE,GAAIc,EAAU,CACZA,EAAYA,EAAU,GACtB,IAAME,EAAMzM,EAAU,GAAGwK,KAAKkC,QAAQH,GACjCA,EAAUI,cACbJ,EAAUI,YAAc,IAE1BJ,EAAUI,YAAYf,EAAEgB,MAAQlB,EAChC1L,EAAU,GAAGwK,KAAKiC,GAAOF,MAI5B,KACFrH,OAAO,SAACC,GAAQ,YAAa0H,IAAN1H,MAI5BpF,EAAY6D,IAEZ1C,EAAY1D,WAAW6D,EAAcX,GACrCU,EAAc,CAAC,GACNY,EAAE,EAAEA,GAAG,EAAEA,IAChBZ,EAAYiE,KAAKrD,EAAEd,GArYb,OAwYRpB,EAAa,CACXgN,OAAO,CACLC,KAAM,OACN9I,OAAQ,kBAGV+I,QAAQ,mBACRC,QAAQ,SAAA9H,GAAC,OAAI7E,EAAK/E,cAAcqC,YAAYuH,EAAEA,EAAE,EAAI,EAAG,IACvD+H,OAAO,CACLH,KAAM,SACNI,SAAS,GAEX/G,SAAS,CACPN,OAAQ,GACRD,SAAU,EACVG,OAAQ,OACRD,YAAa,GACbO,aAAc,EACdL,cAAe,GACfE,WAAW/E,EACX8E,eAAgB,SAChBjC,OAAQ,SAAAkB,GAAC,OAAI7E,EAAK/E,cAAcgL,iBAAiBpB,EAAEA,EAAE,EAAI,EAAG,KAE9DS,WAAYtF,EAAK5E,MAAMiD,SAAW,KAAO,CACvCkH,SAAU,EACV5B,OAAQ,QACR8B,YAAa,GACbI,WAAY7F,EAAK5E,MAAMiD,SAAW,eAAmB2B,EAAK5E,MAAM0R,aAAe,eAAiB,eAChGpH,OAAQ,SACRF,OAAQ,GACRG,aAAc,EACdC,eAAgB,UAElB9E,cACAuG,UAAU,EACVC,SAAQ,EACRC,SAAQ,EACRC,WAAW,IACXC,MAAM,SACNC,YAAW,EACXC,aAAa,IACbC,aAAY,EACZC,aAAY,EACZC,iBAAiB,EACjBtB,OAAO,SAAAnB,GAAC,OAAIA,EAAEzH,OACdmK,mBAAmB,GACnBC,QAAQ,CACN,CACEE,UAAWlI,EAAK5E,MAAMiD,SAAW,GAAK,GACtC8J,WAAY,GACZC,WAAYpI,EAAK5E,MAAMiD,UAAY,GAAK,EACxCgK,WAAYrI,EAAK5E,MAAMiD,SAAW,GAAK,GACvCiK,WAAY,GACZC,aAAc,EACdC,UAAW,MACXC,OAAQ,cACRC,YAAa,SACbC,cAAe3I,EAAK5E,MAAM2C,MAAMyI,OAAOhB,OACvCoD,QAAS,CACP,CACEC,GAAI,QACJpL,MAAO,CACLkL,cAAwC,UAAzB3I,EAAK5E,MAAM0N,UAAwB,OAAS,YAMrE/K,MAAM,CACJoI,KAAM,CACJ4C,MAAO,CACLC,KAAM,CACJ1K,SAAU0B,EAAK5E,MAAMiD,SAAW,GAAI,GACpCH,WAAW,IACXqI,KAAKvG,EAAK5E,MAAM2C,MAAMyI,OAAOhB,OAC7B1H,WAAYkC,EAAK5E,MAAM2C,MAAMC,MAAMiL,aAIzCC,KAAM,CACJC,KAAM,CACJrC,OAAQ9G,EAAK5E,MAAM2C,MAAMyI,OAAO4C,gBAAiBrC,gBAAiB,SAGtEiB,QAAQ,CACNgB,KAAK,CACH1K,SAAU0B,EAAK5E,MAAMiD,SAAW,GAAI,GACpCkI,KAAKvG,EAAK5E,MAAM2C,MAAMyI,OAAOhB,OAC7BtH,WAAW,IACXJ,WAAYkC,EAAK5E,MAAM2C,MAAMC,MAAMiL,aAIzCS,WAAW,CAAEC,KAAM,QAASC,UAAW,IACvCC,OAAQ7J,EAAK5E,MAAMiD,SAAW,CAAEyL,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAAO,CAAEH,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IACrH8C,aAAa,SAACC,GAAc,IAEpB1C,EADY0C,EAAVC,MACYC,OAAO,GAC3B,MAAqB,kBAAV5C,GAA4C,kBAAfA,EAAMJ,KAE1CQ,EAAApO,EAAAC,cAACoO,EAAA,EAAD,CACEL,MAAOA,GAEPI,EAAApO,EAAAC,cAACqO,EAAA,EAAD,CACExF,MAAOkF,EAAM6C,QACbvP,MAAO0M,EAAM8C,WACbvN,MAAOyK,EAAMJ,KAAKmD,aAGlB/C,EAAMJ,KAAKmC,aAAiD,kBAA3B/B,EAAMJ,KAAKmC,aAC1C1N,OAAO+B,KAAK4J,EAAMJ,KAAKmC,aAAarB,IAAI,SAAAsC,GACtC,IAAMC,EAAerK,IAAcC,MAAM3C,UAAU8M,GAC7CE,EAAgB,OAAOD,EAAa3P,MAAMkN,IAAIC,KAAK,KAAK,IACxDU,EAAqBnB,EAAMJ,KAAKmC,YAAYiB,GAC5CG,EAA8BzN,EAAK/E,cAAcqC,YAAYmO,EAAmBA,EAAmB,EAAI,EAAI,GAC3GiC,EAAyB1N,EAAK/E,cAAc6Q,MAAMxB,EAAMJ,KAAKmC,YAAYiB,IAAepR,IAAI8D,EAAK/E,cAAc6Q,MAAMxB,EAAMJ,KAAKkB,IAAInP,MAAM,KAAK8D,QAAQ,GAAG,IAChK,OACE2K,EAAApO,EAAAC,cAACqO,EAAA,EAAD,CACEhN,MAAO4P,EACPpI,MAAOmI,EAAanI,MACpBuI,IAAG,GAAAC,OAAKtD,EAAMC,GAAX,KAAAqD,OAAiBN,GACpBzN,MAAK,GAAA+N,OAAKH,EAAL,MAAAG,OAAqCF,EAArC,UAuDd,OAxjBH/K,EAAAK,OAAA,qBAsmBR,IAzCAtC,EAAO,GACPC,EAAW,GAEXN,EAAWyD,QAAQ,SAACuB,EAAE3D,GACpB,IAAMH,EAAOiC,IAAmB,IAAZ6B,EAAE/D,WAAgBqC,OAAO,cAEzCI,EAAM,CACRxC,QAGF8D,EAAEmG,cAAc1H,QAAQ,SAAC+J,GACvB,IAAMC,EAAiB9N,EAAK/E,cAAc6Q,MAAM+B,EAAa9B,MAAM3H,GAAG,GAChE2J,EAAgB/N,EAAK5E,MAAM0H,YAAYtC,UAAUwN,KAAK,SAAC1C,GAAQ,OAAOA,EAAEM,QAAQD,gBAAkBkC,EAAanC,aAAaC,gBAClI,GAAIoC,EAAc,CAChB,IAAMR,EAAerK,IAAcC,MAAM3C,UAAUuN,EAAczB,MACjE,GAAKwB,EAQH/J,EAAIwJ,EAAanI,OAAS,MARR,CAClB,IAAI4G,EAAa9O,WAAW8C,EAAK/E,cAAcgJ,iBAAiB4J,EAAa7B,WAAWhM,EAAK5E,MAAM0H,YAAYlG,WAC/G8D,EAAK6M,EAAanI,OAAS,EAC3BrB,EAAIwJ,EAAanI,OAAS4G,EAC1BjI,EAAG,GAAA6J,OAAIL,EAAanI,MAAjB,UAAiC,OAAOmI,EAAa3P,MAAMkN,IAAIC,KAAK,KAAK,IAE5EhK,EAAgByD,KAAKC,IAAI1D,EAAciL,OAQ7CrL,EAASY,GAAQwC,IAGnBrE,EAAYf,OAAOgG,OAAOhE,GAG1BlB,EAAYqF,IAEZ9D,EAAkB,EAElBJ,EAAY1D,WAAW6D,EAAcX,GACrCU,EAAc,CAAC,GACNY,EAAE,EAAEA,GAAG,EAAEA,IAChBZ,EAAYiE,KAAKrD,EAAEd,GAvmBb,OA0mBRpB,EAAa,CACXyH,QAAS,GACTM,SAAS,EACTvC,QAAS,OACTC,aAAa,EACbkC,eAAgB,GAChBC,gBAAiB,GACjB1G,KAAM/B,OAAO+B,KAAKA,GAClBwG,eAAgB,sBAChBV,OAAQ,SAAAjJ,GAAA,IAAGgN,EAAHhN,EAAGgN,GAAH,OAAAhN,EAAO2M,KAAe,GAAA0D,OAAIrD,EAAJ,WAC9BzE,SAAS,CACPnC,OAAQ,SAAAkB,GAAC,OAAI7E,EAAK/E,cAAcgL,iBAAiBpB,EAAEA,EAAE,EAAI,EAAG,IAC5Da,OAAQ,OACRH,SAAU,EACVE,YAAa,GACbO,aAAc,EACdR,OAAQ,GACRG,cAAe,GACfE,WAAW/E,EACX8E,eAAgB,UAElB9E,cACAwE,WAAYtF,EAAK5E,MAAMiD,SAAW,KAAO,CACvCmH,OAAQ,GACR7B,OAAQ,SAAC9D,GACP,GAAImB,IAAoB,IAAM,EAC5B,OAAOwC,IAAO3D,EAAM,oBAAoB8D,OAAO,WAGnD4B,SAAU,EACVE,YAAa,GACbC,OAAQ,cACRC,aAAc,GACdC,eAAgB,SAChBC,WAAY,gBAEdmC,QAAQ,CACN,CACEC,SAAS,OACTC,UAAWlI,EAAK5E,MAAMiD,SAAW,GAAK,GACtC8J,WAAY,GACZC,WAAYpI,EAAK5E,MAAMiD,UAAY,GAAK,EACxCgK,WAAYrI,EAAK5E,MAAMiD,SAAW,GAAK,GACvCiK,WAAY,GACZC,aAAc,EACdC,UAAW,MACXC,OAAQ,cACRC,YAAa,SACbC,cAAe3I,EAAK5E,MAAM2C,MAAMyI,OAAOhB,OACvCoD,QAAS,CACP,CACEC,GAAI,QACJpL,MAAO,CACLkL,cAAwC,UAAzB3I,EAAK5E,MAAM0N,UAAwB,OAAS,YAMrE/K,MAAM,CACJuL,QAAS,CACPC,UAAU,CACRtC,QAAQ,IACRuC,UAAU,OACVC,WAAW,eAEbwE,UAAU,CACRhH,QAAQ,MAGZd,KAAM,CACJ4C,MAAO,CACLC,KAAM,CACJ1K,SAAS0B,EAAK5E,MAAMiD,SAAW,GAAK,GACpCH,WAAW,IACXqI,KAAKvG,EAAK5E,MAAM2C,MAAMyI,OAAOhB,OAC7B1H,WAAYkC,EAAK5E,MAAM2C,MAAMC,MAAMiL,aAIzCC,KAAM,CACJC,KAAM,CACJrC,OAAQ9G,EAAK5E,MAAM2C,MAAMyI,OAAO4C,gBAAiBrC,gBAAiB,SAGtEiB,QAAQ,CACNgB,KAAK,CACH1K,SAAS0B,EAAK5E,MAAMiD,SAAW,GAAK,GACpCkI,KAAKvG,EAAK5E,MAAM2C,MAAMyI,OAAOhB,OAC7BtH,WAAW,IACXJ,WAAYkC,EAAK5E,MAAM2C,MAAMC,MAAMiL,aAIzCS,WAAW,CAAEC,KAAM,QAASC,UAAW,IACvCC,OAAQ7J,EAAK5E,MAAMiD,SAAW,CAAEyL,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAAO,CAAEH,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IACrHX,QAAQ,SAAA4E,GAA0B,IAAvB3D,EAAuB2D,EAAvB3D,GAAI1K,EAAmBqO,EAAnBrO,MAAOjC,EAAYsQ,EAAZtQ,MACdoO,EAAahM,EAAK/E,cAAcqC,YAAYuC,EAAM,GACxD,OACE6K,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACTC,GAAG,EACHC,GAAG,EACH7R,MAAM,IAGRiO,EAAApO,EAAAC,cAAA,SACEkB,MAAO,CAAChB,MAAM,OAAO8R,eAAe,aAEpC7D,EAAApO,EAAAC,cAAA,aACEmO,EAAApO,EAAAC,cAAA,UACEmO,EAAApO,EAAAC,cAAA,MAAIkB,MAAO,CAACwJ,QAAQ,YAClByD,EAAApO,EAAAC,cAAA,QAAMkB,MAAO,CAACE,QAAQ,QAASlB,MAAO,OAAQ+R,OAAQ,OAAQ/E,WAAY7L,MAE5E8M,EAAApO,EAAAC,cAAA,MAAIkB,MAAO,CAACwJ,QAAQ,UAAUoC,cAAc,eAAgBkB,GAC5DG,EAAApO,EAAAC,cAAA,MAAIkB,MAAO,CAACwJ,QAAQ,YAAYyD,EAAApO,EAAAC,cAAA,cAASyP,EAAT,IAAsBhM,EAAK5E,MAAM6E,sBA7tBvE0C,EAAAK,OAAA,4BAuuBRtC,EAAO,GACPC,EAAW,GAEXN,EAAWyD,QAAQ,SAACuB,EAAE3D,GACpB,IAAMH,EAAOiC,IAAmB,IAAZ6B,EAAE/D,WAAgBqC,OAAO,cACzCI,EAAM,CACRxC,KAAKiC,IAAmB,IAAZ6B,EAAE/D,WAAgBqC,OAAO,qBAEnChD,EAASY,KACXwC,EAAMpD,EAASY,IAGjB,IAAMkN,EAAkBpJ,EAAEmG,cAAckD,OAAO,SAACC,EAAYlD,GAC1D,IAAMO,EAAahM,EAAK/E,cAAcgJ,iBAAiBwH,EAAmBO,WAAWhM,EAAK5E,MAAM0H,YAAYlG,UAC5G,OAAOoD,EAAK/E,cAAc6Q,MAAM6C,GAAa3S,KAAKgQ,IAClD,GAEF3G,EAAEmG,cAAc1H,QAAQ,SAAC+J,GACvB,IAAMC,EAAiB9N,EAAK/E,cAAc6Q,MAAM+B,EAAa9B,MAAM3H,GAAG,GAChEkJ,EAAetN,EAAK5E,MAAM0H,YAAYtC,UAAUoE,OAAO,SAAC0G,GAAQ,OAAOA,EAAEM,QAAQD,gBAAkBkC,EAAanC,aAAaC,gBAAiB,GAAGW,KACvJ,GAAKwB,OAMmCvB,WAAtBxI,EAAIuJ,KACpBvJ,EAAIuJ,GAAgB,OAPF,CAClB,IAAMtB,EAAahM,EAAK/E,cAAcgJ,iBAAiB4J,EAAa7B,WAAWhM,EAAK5E,MAAM0H,YAAYlG,UAChGgS,EAAiB1R,WAAW8O,EAAW9P,IAAIuS,GAAiBxS,MAAM,MACxEyE,EAAK4M,GAAgB,EACrBvJ,EAAIuJ,GAAgBsB,EACpB7K,EAAG,GAAA6J,OAAIN,EAAJ,UAA2B,OAAOpK,IAAcC,MAAM3C,UAAU8M,GAAc1P,MAAMkN,IAAIC,KAAK,KAAK,OAMzGpK,EAASY,GAAQwC,IAGnBrE,EAAYf,OAAOgG,OAAOhE,GAG1BlB,EAAYqF,IAEZ9D,EAAkB,EAElBxB,EAAa,CACXyH,QAAS,GACTM,SAAS,EACTvC,QAAS,OACTkF,KAAMxK,EACNuF,aAAa,EACbkC,eAAgB,GAChBC,gBAAiB,GACjB1G,KAAM/B,OAAO+B,KAAKA,GAClBwG,eAAgB,sBAChB2C,OAAQ7J,EAAK5E,MAAMiD,SAAW,CAAEyL,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAAO,CAAEH,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IACrHzD,OAAQ,SAAAqI,GAAA,IAAGtE,EAAHsE,EAAGtE,GAAH,OAAAsE,EAAO3E,KAAe,GAAA0D,OAAIrD,EAAJ,WAC9BzE,SAAS,CACPnC,OAAQ,SAAAkB,GAAC,OAAI/E,SAAS+E,GAAG,MAE3BS,WAAYtF,EAAK5E,MAAMiD,SAAW,KAAO,CACvCmH,OAAQ,GACR7B,OAAQ,SAAC9D,GACP,GAAImB,IAAoB,IAAM,EAC5B,OAAOwC,IAAO3D,EAAM,oBAAoB8D,OAAO,WAGnD+B,OAAQ,SACRC,aAAc,GACdC,eAAgB,SAChBC,WAAY,gBAEdyD,QAAQ,SAAAwF,GAA0B,IAAvBvE,EAAuBuE,EAAvBvE,GAAI1K,EAAmBiP,EAAnBjP,MAAOjC,EAAYkR,EAAZlR,MACdoO,EAA+B,MAAlBlM,SAASD,GAAeG,EAAK/E,cAAcqC,YAAYuC,EAAM,GAAKG,EAAK/E,cAAcqC,YAAYuC,EAAM,GAC1H,OACE6K,EAAApO,EAAAC,cAAA,SAAOkB,MAAO,CAAChB,MAAM,OAAO8R,eAAe,aACzC7D,EAAApO,EAAAC,cAAA,aACEmO,EAAApO,EAAAC,cAAA,UACEmO,EAAApO,EAAAC,cAAA,MAAIkB,MAAO,CAACwJ,QAAQ,YAClByD,EAAApO,EAAAC,cAAA,QAAMkB,MAAO,CAACE,QAAQ,QAASlB,MAAO,OAAQ+R,OAAQ,OAAQ/E,WAAY7L,MAE5E8M,EAAApO,EAAAC,cAAA,MAAIkB,MAAO,CAACwJ,QAAQ,UAAUoC,cAAc,eAAgBkB,GAC5DG,EAAApO,EAAAC,cAAA,MAAIkB,MAAO,CAACwJ,QAAQ,YAAYyD,EAAApO,EAAAC,cAAA,cAASyP,EAAT,WArzBpCrJ,EAAAK,OAAA,qBAy3BR,IA1DAjC,EAAgB,EAEhBf,EAAK5E,MAAM0H,YAAYtC,UAAUsD,QAAQ,SAACwH,EAAEC,GAC1C,IAAMgC,EAAerK,IAAcC,MAAM3C,UAAU8K,EAAEgB,MAChDiB,EAAawB,UAGdrP,EAAUkF,OAAO,SAAAS,GAAO,OAAOA,EAAEiH,OAAShB,EAAEgB,OAASrJ,QAGzDvD,EAAUqF,KAAK,CACbwF,GAAGgD,EAAanI,MAChBxH,MAAM,OAAOsF,IAAcC,MAAM3C,UAAU8K,EAAEgB,MAAM1O,MAAMkN,IAAIC,KAAK,KAAK,IACvEb,KAAK7J,EAAW2K,IAAI,SAAC3F,EAAE3D,GACrB,OAAO2D,EAAEmG,cAAc5G,OAAO,SAAC6G,EAAmBN,GAC9C,OAAOM,EAAmBC,aAAaC,gBAAkBL,EAAEM,QAAQD,gBAEtEX,IAAI,SAACS,EAAmBI,GACvB,IAAImD,EAAehP,EAAK/E,cAAc6Q,MAAML,EAAmBM,MAE/D,IADuBiD,EAAa5K,GAAG,GACnB,CAGd4K,EAAaC,GAAG,IAAMxD,EAAmByD,mBAAqBlP,EAAK/E,cAAc6Q,MAAML,EAAmByD,mBAAmBC,GAAG,KAClIH,EAAeA,EAAahT,KAAKgE,EAAK/E,cAAc6Q,MAAML,EAAmByD,qBAG/EF,EAAehP,EAAK/E,cAAcgJ,iBAAiB+K,EAAa,IAEhE,IAAM7D,EAAI3H,IAAmB,IAAZ6B,EAAE/D,WAAgBqC,OAAO,oBACpCyH,EAAIlO,WAAW8R,GAIrB,OAFAjO,EAAgByD,KAAKC,IAAI1D,EAAcqK,GAEhC,CAAED,IAAGC,QAGb,KACFxG,OAAO,SAACC,GAAQ,YAAa0H,IAAN1H,SAI9BnF,EAAUqF,KAAK,CACbwF,GAAG,OACH3M,MAAM,OAAOsF,IAAcC,MAAM3C,UAAU4O,KAAKxR,MAAMkN,IAAIC,KAAK,KAAK,IACpEb,KAAK7J,EAAW2K,IAAI,SAAC3F,EAAE3D,GACrB,IAAMyJ,EAAI3H,IAAmB,IAAZ6B,EAAE/D,WAAgBqC,OAAO,oBACpCyH,EAAIlO,WAAW8C,EAAK/E,cAAcgJ,iBAAiBoB,EAAEgK,SAAS,KAEpE,OADAtO,EAAgByD,KAAKC,IAAI1D,EAAcqK,GAChC,CAAED,IAAGC,SAKhB3L,EAAY6D,IAEZ1C,EAAY1D,WAAW6D,EAAcX,GACrCU,EAAc,CAAC,GACNY,EAAE,EAAEA,GAAG,EAAEA,IAChBZ,EAAYiE,KAAKrD,EAAEd,GA13Bb,OA63BRpB,EAAa,CACXgN,OAAO,CACLC,KAAM,OACN9I,OAAQ,kBAGV+I,QAAQ,mBACRC,QAAQ,SAAA9M,GAAK,OAAI3C,WAAW2C,GAAOE,QAAQ,GAAG,KAC9C6M,OAAO,CACLH,KAAM,SACNI,SAAS,GAEX/G,SAAS,CACPN,OAAQ,GACRD,SAAU,EACVG,OAAQ,OACRD,YAAa,GACbO,aAAc,EACdL,cAAe,GACfE,WAAW/E,EACX8E,eAAgB,SAChBjC,OAAO,SAAA9D,GAAK,OAAI3C,WAAW2C,GAAOE,QAAQ,GAAG,MAE/CuF,WAAYtF,EAAK5E,MAAMiD,SAAW,KAAO,CACvCmH,OAAQ,GACRD,SAAU,EACV5B,OAAQ,QACR8B,YAAa,GACbE,aAAc,EACdD,OAAQ,SACRE,eAAgB,SAChBC,WAAY7F,EAAK5E,MAAMiD,SAAW,eAAmB2B,EAAK5E,MAAM0R,aAAe,eAAiB,gBAElGhM,cACAuG,UAAU,EACVC,SAAQ,EACRC,SAAQ,EACRC,WAAW,IACXC,MAAM,SACNC,YAAW,EACXC,aAAa,IACbC,aAAY,EACZC,aAAY,EACZC,iBAAiB,EACjBtB,OAAO,SAAAnB,GAAC,OAAIA,EAAEzH,OACdmK,mBAAmB,GACnBC,QAAQ,CACN,CACEE,UAAWlI,EAAK5E,MAAMiD,SAAW,GAAK,GACtC8J,WAAY,GACZC,WAAYpI,EAAK5E,MAAMiD,UAAY,GAAK,EACxCgK,WAAYrI,EAAK5E,MAAMiD,SAAW,GAAK,GACvCiK,WAAY,GACZC,aAAc,EACdC,UAAW,MACXC,OAAQ,cACRC,YAAa,SACbC,cAAe3I,EAAK5E,MAAM2C,MAAMyI,OAAOhB,OACvCoD,QAAS,CACP,CACEC,GAAI,QACJpL,MAAO,CACLkL,cAAwC,UAAzB3I,EAAK5E,MAAM0N,UAAwB,OAAS,YAMrE/K,MAAM,CACJoI,KAAM,CACJ4C,MAAO,CACLC,KAAM,CACJ1K,SAAU0B,EAAK5E,MAAMiD,SAAW,GAAI,GACpCH,WAAW,IACXqI,KAAKvG,EAAK5E,MAAM2C,MAAMyI,OAAOhB,OAC7B1H,WAAYkC,EAAK5E,MAAM2C,MAAMC,MAAMiL,aAIzCC,KAAM,CACJC,KAAM,CACJrC,OAAQ9G,EAAK5E,MAAM2C,MAAMyI,OAAO4C,gBAAiBrC,gBAAiB,SAGtEiB,QAAQ,CACNgB,KAAK,CACH9K,WAAW,IACXqI,KAAKvG,EAAK5E,MAAM2C,MAAMyI,OAAOhB,OAC7B6D,cAAc,aACdvL,WAAYkC,EAAK5E,MAAM2C,MAAMC,MAAMiL,UACnC3K,SAAU0B,EAAK5E,MAAMiD,SAAW,GAAI,MAI1CqL,WAAW,CAAEC,KAAM,QAASC,UAAW,IACvCC,OAAQ7J,EAAK5E,MAAMiD,SAAW,CAAEyL,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAAO,CAAEH,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IACrH8C,aAAa,SAACC,GAAc,IAClBC,EAAUD,EAAVC,MACF3C,EAAQ2C,EAAMC,OAAO,GAC3B,OACExC,EAAApO,EAAAC,cAACoO,EAAA,EAAD,CACEL,MAAOA,GAGiB,kBAAjB2C,EAAMC,QAAuBD,EAAMC,OAAOjK,QAC/CgK,EAAMC,OAAOlC,IAAI,SAAAV,GACf,IAAMgD,EAAehD,EAAM6C,QACrBmC,EAAkBhF,EAAMJ,KAAKmD,WAEnC,OACE3C,EAAApO,EAAAC,cAACqO,EAAA,EAAD,CACE+C,IAAKrD,EAAMC,GACX3M,MAAO0M,EAAM1M,MACbwH,MAAOkI,EACPzN,MAAOyP,SA/+Bf3M,EAAAK,OAAA,qBAgjCR,IArDIlB,EAAY,EAChBf,EAAgB,EAEhBf,EAAK5E,MAAM0H,YAAYtC,UAAUsD,QAAQ,SAACwH,EAAEC,GAC1C,IAAMgC,EAAerK,IAAcC,MAAM3C,UAAU8K,EAAEgB,MAChDiB,EAAawB,UAGdrP,EAAUkF,OAAO,SAAAS,GAAO,OAAOA,EAAEiH,OAAShB,EAAEgB,OAASrJ,QAGzDvD,EAAUqF,KAAK,CACbwF,GAAGgD,EAAanI,MAChBxH,MAAM,OAAOsF,IAAcC,MAAM3C,UAAU8K,EAAEgB,MAAM1O,MAAMkN,IAAIC,KAAK,KAAK,IACvEb,KAAK7J,EAAW2K,IAAI,SAAC3F,EAAE3D,GACrB,OAAO2D,EAAEmG,cAAc5G,OAAO,SAAC6G,EAAmBN,GAC9C,OAAOM,EAAmBC,aAAaC,gBAAkBL,EAAEM,QAAQD,gBAEtEX,IAAI,SAACS,EAAmBI,GACvB,IAAMV,EAAI3H,IAAmB,IAAZ6B,EAAE/D,WAAgBqC,OAAO,oBACtCyH,EAAIlO,WAAWuO,EAAmB8D,WAMtC,OAJAnE,EAAIoE,MAAMpE,KAAOA,EAAItJ,EAAYsJ,EACjCtJ,EAAYsJ,EACZrK,EAAgByD,KAAKC,IAAI1D,EAAcqK,GAEhC,CAAED,IAAGC,OACX,KACFxG,OAAO,SAACC,GAAQ,YAAa0H,IAAN1H,SAI9BnF,EAAUqF,KAAK,CACbwF,GAAG,OACH3M,MAAO,OAAOsF,IAAcC,MAAM3C,UAAU4O,KAAKxR,MAAMkN,IAAIC,KAAK,KAAK,IACrEb,KAAM7J,EAAW2K,IAAI,SAAC3F,EAAE3D,GACtB,IAAMyJ,EAAI3H,IAAmB,IAAZ6B,EAAE/D,WAAgBqC,OAAO,oBACtCyH,EAAIlO,WAAWmI,EAAEoK,WAKrB,OAJArE,EAAIoE,MAAMpE,KAAOA,EAAItJ,EAAYsJ,EACjCtJ,EAAYsJ,EACZrK,EAAgByD,KAAKC,IAAI1D,EAAcqK,GAEhC,CAAED,IAAGC,SAOhB3L,EAAY6D,IAEZ1C,EAAY1D,WAAW6D,EAAcX,GACrCU,EAAc,CAAC,GACNY,EAAE,EAAEA,GAAG,EAAEA,IAChBZ,EAAYiE,KAAKrD,EAAEd,GAjjCb,OAojCRpB,EAAa,CACXgN,OAAO,CACLC,KAAM,OACN9I,OAAQ,kBAGV+I,QAAQ,mBACRC,QAAQ,SAAA9M,GAAK,OAAI3C,WAAW2C,GAAOE,QAAQ,IAC3C6M,OAAO,CACLH,KAAM,SACNI,SAAS,GAEX/G,SAAS,CACPN,OAAQ,GACRD,SAAU,EACVG,OAAQ,OACRD,YAAa,GACbO,aAAc,EACdL,cAAe,GACfE,WAAW/E,EACX8E,eAAgB,SAChBjC,OAAO,SAAA9D,GAAK,OAAI3C,WAAW2C,GAAOE,QAAQ,KAE5CuF,WAAYtF,EAAK5E,MAAMiD,SAAW,KAAO,CACvCkH,SAAU,EACV5B,OAAQ,QACR8B,YAAa,GACbI,WAAY7F,EAAK5E,MAAMiD,SAAW,eAAmB2B,EAAK5E,MAAM0R,aAAe,eAAiB,eAChGpH,OAAQ,SACRF,OAAQ,GACRG,aAAc,EACdC,eAAgB,UAElB9E,cACAuG,UAAU,EACVC,SAAQ,EACRC,SAAQ,EACRC,WAAW,IACXC,MAAM,SACNC,YAAW,EACXC,aAAa,IACbC,aAAY,EACZC,aAAY,EACZC,iBAAiB,EACjBtB,OAAO,SAAAnB,GAAC,OAAIA,EAAEzH,OACdmK,mBAAmB,GACnBC,QAAQ,CACN,CACEE,UAAWlI,EAAK5E,MAAMiD,SAAW,GAAK,GACtC8J,WAAY,GACZC,WAAYpI,EAAK5E,MAAMiD,UAAY,GAAK,EACxCgK,WAAYrI,EAAK5E,MAAMiD,SAAW,GAAK,GACvCiK,WAAY,GACZC,aAAc,EACdC,UAAW,MACXC,OAAQ,cACRC,YAAa,SACbC,cAAe3I,EAAK5E,MAAM2C,MAAMyI,OAAOhB,OACvCoD,QAAS,CACP,CACEC,GAAI,QACJpL,MAAO,CACLkL,cAAwC,UAAzB3I,EAAK5E,MAAM0N,UAAwB,OAAS,YAMrE/K,MAAM,CACJoI,KAAM,CACJ4C,MAAO,CACLC,KAAM,CACJ1K,SAAU0B,EAAK5E,MAAMiD,SAAW,GAAI,GACpCH,WAAW,IACXqI,KAAKvG,EAAK5E,MAAM2C,MAAMyI,OAAOhB,OAC7B1H,WAAYkC,EAAK5E,MAAM2C,MAAMC,MAAMiL,aAIzCC,KAAM,CACJC,KAAM,CACJrC,OAAQ9G,EAAK5E,MAAM2C,MAAMyI,OAAO4C,gBAAiBrC,gBAAiB,SAGtEiB,QAAQ,CACNgB,KAAK,CACH9K,WAAW,IACXqI,KAAKvG,EAAK5E,MAAM2C,MAAMyI,OAAOhB,OAC7B6D,cAAc,aACdvL,WAAYkC,EAAK5E,MAAM2C,MAAMC,MAAMiL,UACnC3K,SAAU0B,EAAK5E,MAAMiD,SAAW,GAAI,MAI1CqL,WAAW,CAAEC,KAAM,QAASC,UAAW,IACvCC,OAAQ7J,EAAK5E,MAAMiD,SAAW,CAAEyL,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAAO,CAAEH,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IACrH8C,aAAa,SAACC,GAAc,IAClBC,EAAUD,EAAVC,MACF3C,EAAQ2C,EAAMC,OAAO,GAC3B,OACExC,EAAApO,EAAAC,cAACoO,EAAA,EAAD,CACEL,MAAOA,GAGiB,kBAAjB2C,EAAMC,QAAuBD,EAAMC,OAAOjK,QAC/CgK,EAAMC,OAAOlC,IAAI,SAAAV,GACf,IAAMgD,EAAehD,EAAM6C,QACrBmC,EAAkBhF,EAAMJ,KAAKmD,WACnC,OACE3C,EAAApO,EAAAC,cAACqO,EAAA,EAAD,CACE+C,IAAKrD,EAAMC,GACX3M,MAAO0M,EAAM1M,MACbwH,MAAOkI,EACPzN,MAAOyP,SArqCf3M,EAAAK,OAAA,qBAq4CR,IApNAnC,EAAY,EACZE,EAAgB,EAEZiB,EAAU,KACVC,EAAW,KACXC,EAASlC,EAAK/E,cAAc6Q,MAAM,GAClC3J,EAAenC,EAAK/E,cAAc6Q,MAAM,GACxC1J,EAAiBpC,EAAK/E,cAAc6Q,MAAM,GAE9C7K,EAAgB,GACVoB,EAAmB7B,EAAUwN,KAAM,SAAA1C,GAAC,MAAe,WAAXA,EAAEgB,OAEhDjM,EAAWyD,QAAQ,SAACuB,EAAE3D,GAEpB,IAAI2N,EAAWrP,EAAK/E,cAAc6Q,MAAMzG,EAAEgK,UACtCjE,EAAI,EACJsE,EAAM,EACJvE,EAAI3H,IAAmB,IAAZ6B,EAAE/D,WAAgBqC,OAAO,oBAG1C,GAAiC,SAA7B3D,EAAK5E,MAAM6E,eAA4BuD,IAAO2H,GAAGwE,eAAenM,IAAO,mBAAmB,qBAAqB,CACjH,IAAMoM,EAAmBvN,EAAmBgD,EAAEmG,cAAcwC,KAAK,SAAC6B,EAAM1E,GACtE,OAAO0E,EAAMnE,aAAaC,gBAAkBtJ,EAAiBuJ,QAAQD,gBAClE,KACDiE,EAAiBV,mBAAqBlP,EAAK/E,cAAc6Q,MAAM8D,EAAiBV,mBAAmBC,GAAG,KACxGE,EAAWA,EAASrT,KAAKgE,EAAK/E,cAAc6Q,MAAM8D,EAAiBV,qBAIvE,IAAMY,EAAM9P,EAAK/E,cAAcgJ,iBAAiBoL,EAAS,IAAInT,IAAI,KAKjE,GAFAgG,EAASA,EAAOlG,KAAK8T,EAAI7T,MAAM,MAE3B+F,EAAQ,CACV,IAAM+N,GAAQ1K,EAAE/D,UAAUW,EAASX,WAAW,MAGxC0O,EAAW5N,EAAenG,MAAM+F,EAAQ/F,MAAM8T,GAAM7T,IAAI,MAGxD+T,GAFN7N,EAAiBA,EAAepG,KAAKgU,IAEN9T,IAAIiG,GAAcmC,MAAM,GAAGrI,MAAM,KAChEmP,EAAIlO,WAAW+S,GAGfP,EAAMxN,EAAOhG,IAAIwF,EAAE,GAAG3B,QAAQ,GAGhCkC,EAAWoD,EAEXrD,EAAU8N,EAEa,OAAnB5O,IACFA,EAAiBpB,SAASuF,EAAE6K,cAG9BnP,EAAgByD,KAAKC,IAAI1D,EAAcqK,GAEvC,IAAM+E,EAAU3L,KAAK4L,MAAMvP,EAAUN,EAAW,KAC1C2P,EAAc7K,EAAE6K,YAEtBrP,IAEI6O,EAAI,GACNzO,EAAc8D,KAAK,CAAEoG,IAAGC,IAAGsE,MAAKQ,cAAaC,cAK7C1P,EAAY4P,qBAAuB5P,EAAY4P,oBAAoBpN,OAAO,GAC5ExC,EAAY4P,oBAAoBvM,QAAS,SAAAwM,GACvC,IAAM/C,EAAevN,EAAK5E,MAAM0H,YAAYtC,UAAUwN,KAAM,SAAA1C,GAAC,OAAKA,EAAEgB,OAASgE,EAAmBC,WAC5FhD,GAAgB+C,EAAmBE,cAAcC,SAASzQ,EAAK5E,MAAM6E,iBACvEqQ,EAAmBvB,SAAU,EAC7BuB,EAAmB1E,QAAU2B,EAAa3B,QAC1CpL,EAAUkQ,QAAQJ,MAKxB9P,EAAUsD,QAAS,SAAAwH,GAEjB,IAAMiC,EAAY5O,OAAAgS,EAAA,EAAAhS,CAAA,GAAOuE,IAAcC,MAAM3C,UAAU8K,EAAEgB,OAEzD,GAAIiB,EAAaqD,aAAerD,EAAaqD,YAAY5Q,EAAK5E,MAAM6E,eAAe,CACjF,IAAM4Q,EAAatD,EAAaqD,YAAY5Q,EAAK5E,MAAM6E,eACvDtB,OAAO+B,KAAKmQ,GAAY/M,QAAQ,SAAAwH,GAC9BiC,EAAajC,GAAKuF,EAAWvF,KAIjC,MAAKiC,EAAawB,SAAYxB,EAAanM,gBAAkBpB,EAAK/E,cAAcmP,YAAYmD,EAAanM,gBAAgB0P,QAAQC,KAAKC,QAAtI,CAIA,IAAMC,EAAY1D,EAAa0D,UAAY1D,EAAa0D,UAAY,OAE9DC,EAAW,CACf3G,GAAGgD,EAAanI,MAChBxH,MAAO,OAAO2P,EAAa3P,MAAMkN,IAAIC,KAAK,KAAK,IAC/Cb,KAAM,IAGRrJ,EAAY,EAEZmB,EAAU,KACVC,EAAW,KACX,IAAIkP,EAAa,EACbC,EAAoB,KACpBC,EAAqB,KACzBnP,EAASlC,EAAK/E,cAAc6Q,MAAM,GAClC3J,EAAenC,EAAK/E,cAAc6Q,MAAM,GACxC1J,EAAiBpC,EAAK/E,cAAc6Q,MAAM,GACdzL,EAAWuE,OAAQ,SAAAS,GAAC,OAAMkI,EAAanM,gBAAkBoC,IAAO+J,EAAanM,gBAAgBuO,eAAenM,IAAmB,IAAZ6B,EAAE/D,cAE7HwC,QAAS,SAACuB,EAAE3D,GAE9B,IAAMmM,EAAexI,EAAEmG,cAAcwC,KAAK,SAAC6B,EAAM1E,GAC/C,OAAO0E,EAAMnE,aAAaC,gBAAkBL,EAAEM,QAAQD,gBAGxD,GAAIkC,EAAa,CAEVuD,IACHA,EAAoBvD,GAGtB,IAAImB,EAAoC,kBAAdiC,GAA0BA,EAAUhO,OAASgO,EAAUvC,OAAO,SAAC4C,EAAIC,GAC3F,OAAI1D,EAAa0D,GACRvR,EAAK/E,cAAc6Q,MAAMwF,GAAKtV,KAAKgE,EAAK/E,cAAc6Q,MAAM+B,EAAa0D,KAE3EvR,EAAK/E,cAAc6Q,MAAMwF,IAChC,GAAKtR,EAAK/E,cAAc6Q,MAAM+B,EAAaoD,IAQ7C,GALIjC,EAAaC,GAAG,IAAMpB,EAAaqB,mBAAqBlP,EAAK/E,cAAc6Q,MAAM+B,EAAaqB,mBAAmBC,GAAG,KACtHH,EAAeA,EAAahT,KAAKgE,EAAK/E,cAAc6Q,MAAM+B,EAAaqB,sBAGlDF,EAAa5K,GAAG,GACnB,CAElB,IAAIoN,EAAU,GAEVpG,EAAI,EACJsE,EAAM,EACJvE,EAAI3H,IAAmB,IAAZ6B,EAAE/D,WAAgBqC,OAAO,oBACpCmM,EAAM9P,EAAK/E,cAAcgJ,iBAAiB+K,EAAa,IAAI9S,IAAI,KAMrE,GAJAgG,EAASA,EAAOlG,KAAK8T,EAAI7T,MAAM,MAIJ,OAAvBoV,IACFA,EAAqBvR,SAASuF,EAAE6K,cACThP,EAAe,CACpC,IAAMuQ,EAAkBxQ,EAAc+M,KAAK,SAAA0D,GAAE,OAAKA,EAAGxB,aAAamB,IAC9DI,IAEFrG,EADA+F,EAAaM,EAAgBrG,EAE7BsE,EAAMxN,EAAOnC,QAAQ,IAK3B,GAAIkC,EAAU,CACZ,IAAM8N,GAAQ1K,EAAE/D,UAAUW,EAASX,WAAW,MAGxC0O,EAAW5N,EAAenG,MAAM+F,EAAQ/F,MAAM8T,GAAM7T,IAAI,MAGxD+T,GAFN7N,EAAiBA,EAAepG,KAAKgU,IAEN9T,IAAIiG,GAAcmC,MAAM,GAAGrI,MAAM,KAChEmP,EAAIlO,WAAW+S,GAASkB,EAExBzB,EAAMxN,EAAOhG,IAAIwF,EAAE,GAAG3B,QAAQ,GAGhCkC,EAAWoD,EACXrD,EAAU8N,EAEa,OAAnB5O,IACFA,EAAiBpB,SAASuF,EAAE6K,cAG9BnP,EAAgByD,KAAKC,IAAI1D,EAAcqK,GAEvC,IAAM+E,EAAU3L,KAAK4L,MAAMvP,EAAUN,EAAW,KAGhDM,IAEI6O,EAAI,IACN8B,EAAU,CACRrG,IACAC,IACAsE,MACAS,WAGFtP,IACAqQ,EAAShH,KAAKnF,KAAKyM,QAM3B9R,EAAUqF,KAAKmM,MAGjBtQ,EAAY1D,WAAW6D,EAAcX,GACrCU,EAAc,CAAC,GACNY,EAAE,EAAEA,GAAG,EAAEA,IAChBZ,EAAYiE,KAAKrD,EAAEd,GAt4Cb,OAy4CRlB,EAAUqF,KAAK,CACbwF,GAAG,OACHL,KAAMjJ,EACNrD,MAAO,OAAOsF,IAAcC,MAAM3C,UAAU4O,KAAKxR,MAAMkN,IAAIC,KAAK,KAAK,MAIvEtL,EAAY6D,IAEZ9D,EAAa,CACXgN,OAAO,CACLC,KAAM,OACN9I,OAAQ,kBAGV+I,QAAQ,mBACRC,QAAQ,SAAA9M,GAAK,OAAI3C,WAAW2C,GAAOE,QAAQ,GAAG,KAC9C6M,OAAO,CACLH,KAAM,SACNI,SAAS,GAGX/G,SAAS,CACPN,OAAQ,GACRD,SAAU,EACVG,OAAQ,OACRD,YAAa,GACbO,aAAc,EACdL,cAAe,GACfE,WAAW/E,EACX8E,eAAgB,SAChBjC,OAAQ,SAAA9D,GAAK,OAAI3C,WAAW2C,GAAOE,QAAQ,GAAG,MAEhDuF,WAAYtF,EAAK5E,MAAMiD,SAAW,KAAO,CACvCmH,OAAQ,GACRD,SAAU,EACV5B,OAAQ,QACR8B,YAAa,GACbE,aAAc,EACdD,OAAQ,SACRE,eAAgB,SAChBC,WAAY7F,EAAK5E,MAAMiD,SAAW,eAAmB2B,EAAK5E,MAAM0R,aAAe,eAAiB,gBAElGhM,cACAuG,UAAU,EACVC,SAAQ,EACRC,SAAQ,EACRC,WAAW,IACXC,MAAM,YACNC,YAAW,EACXC,aAAa,IACbC,aAAY,EACZC,aAAY,EACZC,iBAAiB,EACjBtB,OAAO,SAAAnB,GAAC,OAAIA,EAAEzH,OACdmK,mBAAmB,GACnBC,QAAQ,CACN,CACEG,WAAY,GACZG,WAAY,GACZC,aAAc,EACdC,UAAW,MACXC,OAAQ,cACRC,YAAa,SACbC,cAAe3I,EAAK5E,MAAM2C,MAAMyI,OAAOhB,OACvC0C,UAAWlI,EAAK5E,MAAMiD,SAAW,GAAK,IACtC+J,WAAYpI,EAAK5E,MAAMiD,UAAY,GAAK,EACxCgK,WAAYrI,EAAK5E,MAAMiD,SAAW,GAAK,GACvCuK,QAAS,CACP,CACEC,GAAI,QACJpL,MAAO,CACLkL,cAAwC,UAAzB3I,EAAK5E,MAAM0N,UAAwB,OAAS,YAMrE/K,MAAM,CACJoI,KAAM,CACJ4C,MAAO,CACLC,KAAM,CACJ1K,SAAU0B,EAAK5E,MAAMiD,SAAW,GAAI,GACpCH,WAAW,IACXqI,KAAKvG,EAAK5E,MAAM2C,MAAMyI,OAAOhB,OAC7B1H,WAAYkC,EAAK5E,MAAM2C,MAAMC,MAAMiL,aAIzCC,KAAM,CACJC,KAAM,CACJrC,OAAQ9G,EAAK5E,MAAM2C,MAAMyI,OAAO4C,gBAAiBrC,gBAAiB,SAGtEiB,QAAQ,CACNgB,KAAK,CACH1K,SAAU0B,EAAK5E,MAAMiD,SAAW,GAAI,GACpCkI,KAAKvG,EAAK5E,MAAM2C,MAAMyI,OAAOhB,OAC7BtH,WAAW,IACXJ,WAAYkC,EAAK5E,MAAM2C,MAAMC,MAAMiL,aAIzCS,WAAW,CAAEC,KAAM,QAASC,UAAW,IACvCC,OAAQ7J,EAAK5E,MAAMiD,SAAW,CAAEyL,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAAO,CAAEH,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IACrH8C,aAAa,SAACC,GAAc,IAClBC,EAAUD,EAAVC,MACF3C,EAAQ2C,EAAMC,OAAO,GAC3B,OACExC,EAAApO,EAAAC,cAACoO,EAAA,EAAD,CACEL,MAAOA,GAGiB,kBAAjB2C,EAAMC,QAAuBD,EAAMC,OAAOjK,QAC/CgK,EAAMC,OAAOlC,IAAI,SAAAV,GACf,IAAMgD,EAAehD,EAAM6C,QACrBmC,EAAkBhF,EAAMJ,KAAKmD,WAC7BsE,EAAcrH,EAAMJ,KAAKwF,IAC/B,OACEhF,EAAApO,EAAAC,cAACqO,EAAA,EAAD,CACE+C,IAAKrD,EAAMC,GACXnF,MAAOkI,EACP1P,MAAO0M,EAAM1M,MACbiC,MAAK,GAAA+N,OAAK0B,EAAL,aAAA1B,OAAgC+D,EAAhC,yBApgDbhP,EAAAK,OAAA,6BAghDRjC,EAAgB,EACZwB,EAAkB,KAEtBtB,EAAgBZ,EAAW2K,IAAI,SAAC3F,EAAE3D,GAEhC,IAAI0J,EAAI,EACJsE,EAAM,EACNK,EAAO,EACL5E,EAAI3H,IAAmB,IAAZ6B,EAAE/D,WAAgBqC,OAAO,oBACpCiO,EAAa5R,EAAK/E,cAAcgJ,iBAAiBoB,EAAE4F,UAAUjL,EAAK5E,MAAM0H,YAAYlG,UAErF2F,GAGH6I,EAAIlO,WAAW0U,EAAW1V,IAAIqG,GAAiB+B,MAAM,GAAGrI,MAAM,MAE9D8T,GAAQ1K,EAAE/D,UAAUjB,EAAW,GAAGiB,WAAW,MAE7CoO,EADgBkC,EAAW1V,IAAIqG,GAAiB+B,MAAM,GAAGrI,MAAM,KACjDA,MAAM,KAAKC,IAAI6T,GAAMhQ,QAAQ,IAN3CwC,EAAkBqP,EAWG,OAAnB1Q,IACFA,EAAiBpB,SAASuF,EAAE6K,cAG9BnP,EAAgByD,KAAKC,IAAI1D,EAAcqK,GAEvC,IAAM+E,EAAU3L,KAAK4L,MAAMvP,EAAUN,EAAW,KAC1C2P,EAAc7K,EAAE6K,YAItB,OAFArP,IAEO,CAAEsK,IAAGC,IAAGsE,MAAKQ,cAAaC,aAI/B1P,EAAY4P,qBAAuB5P,EAAY4P,oBAAoBpN,OAAO,GAC5ExC,EAAY4P,oBAAoBvM,QAAS,SAAAwM,GACvC,IAAM/C,EAAevN,EAAK5E,MAAM0H,YAAYtC,UAAUwN,KAAM,SAAA1C,GAAC,OAAKA,EAAEgB,OAASgE,EAAmBC,WAC5FhD,GAAgB+C,EAAmBE,cAAcC,SAASzQ,EAAK5E,MAAM6E,iBACvEqQ,EAAmBvB,SAAU,EAC7BuB,EAAmB1E,QAAU2B,EAAa3B,QAC1CpL,EAAUkQ,QAAQJ,MA5jDhB3N,EAAAE,KAAA,IAikDF7C,EAAK/E,cAAc4W,aAAarR,EAAhC,eAAAsR,EAAAnT,OAAAoT,EAAA,EAAApT,CAAA8D,EAAAnG,EAAA0V,KAA0C,SAAAC,EAAO3G,GAAP,IAAAiC,EAAA0D,EAAAC,EAAAC,EAAAe,EAAAC,EAAAf,EAAAC,EAAA,OAAA5O,EAAAnG,EAAAoG,KAAA,SAAA0P,GAAA,cAAAA,EAAAxP,KAAAwP,EAAAvP,MAAA,WAExC0K,EAAerK,IAAcC,MAAM3C,UAAU8K,EAAEgB,OAEnCyC,QAJ4B,CAAAqD,EAAAvP,KAAA,eAAAuP,EAAApP,OAAA,wBAQxCiO,EAAY1D,EAAa0D,UAAY1D,EAAa0D,UAAY,OAE9DC,EAAW,CACf3G,GAAGgD,EAAanI,MAChBxH,MAAO,OAAO2P,EAAa3P,MAAMkN,IAAIC,KAAK,KAAK,IAC/Cb,KAAM,IAGRrJ,EAAY,EACRsQ,EAAa,EACjB5O,EAAkB,KACd2P,EAAc,KACdC,EAAiB,KACjBf,EAAoB,KACpBC,EAAqB,KAtBqBe,EAAAvP,KAAA,GAwBxC7C,EAAK/E,cAAc4W,aAAaxR,EAAhC,eAAAgS,EAAA1T,OAAAoT,EAAA,EAAApT,CAAA8D,EAAAnG,EAAA0V,KAA2C,SAAAM,EAAOjN,GAAP,IAAAwI,EAAA4D,EAAAD,EAAAe,EAAAC,EAAArH,EAAAC,EAAAsE,EAAA+C,EAAA1C,EAAAE,EAAAE,EAAA,OAAA1N,EAAAnG,EAAAoG,KAAA,SAAAgQ,GAAA,cAAAA,EAAA9P,KAAA8P,EAAA7P,MAAA,QAEzCgL,EAAexI,EAAEmG,cAAcwC,KAAK,SAAC6B,EAAM1E,GAC/C,OAAO0E,EAAMnE,aAAaC,gBAAkBL,EAAEM,QAAQD,kBAGpCkC,EAAaoD,KAE1BG,IACHA,EAAoBvD,GAGC7N,EAAK/E,cAAc6Q,MAAM+B,EAAaoD,IAAY7M,GAAG,KAI/C,OAAvBiN,IACFA,EAAqBvR,SAASuF,EAAE6K,cACThP,IACfuQ,EAAkBxQ,EAAc+M,KAAK,SAAA0D,GACzC,OAAOA,EAAGxB,aAAamB,OAGvBF,EAAaM,EAAgBrG,GAKrB,GACVmH,EAAoB1E,EAAa8E,MACjCH,EAAkBxS,EAAK/E,cAAcgJ,iBAAiBsO,EAAkBjH,EAAE1O,UACxEuO,EAAI3H,IAAmB,IAAZ6B,EAAE/D,WAAgBqC,OAAO,oBAGtC4J,GAAgBA,EAAarD,MAAQqD,EAAarD,KAAKoB,EAAEM,QAAQD,gBAAkB4B,EAAarD,KAAKoB,EAAEM,QAAQD,eAAetG,EAAE6K,eAClIqC,EAAoBvS,EAAK/E,cAAc6Q,MAAM5I,IAAcC,MAAM3C,UAAU8K,EAAEgB,MAAMpC,KAAKoB,EAAEM,QAAQD,eAAetG,EAAE6K,cACnHsC,EAAkBxS,EAAK/E,cAAcgJ,iBAAiBsO,EAAkBjH,EAAE1O,WAiBxEwO,EAAI+F,EACJzB,EAAM,EAELnN,GAGCiQ,EAAgBvD,GAAGkD,IACrB5P,EAAkBiQ,EACZC,EAAYvB,EAAShH,KAAKgH,EAAShH,KAAKjH,OAAO,GAAGmI,EAAE8F,EAAShH,KAAKgH,EAAShH,KAAKjH,OAAO,GAAGmI,EAChGA,EAAI8G,EAAY9G,EAAEqH,EAClBtB,EAAa/F,GAEbA,GAAKlO,WAAWsV,EAAgBtW,IAAIqG,GAAiB+B,MAAM,GAAGrI,MAAM,MAGhE8T,GAAQ1K,EAAE/D,UAAUjB,EAAW,GAAGiB,WAAW,MAC7C2O,EAAUuC,EAAgBtW,IAAIqG,GAAiB+B,MAAM,GAAGrI,MAAM,KACpEyT,EAAMO,EAAQhU,MAAM,KAAKC,IAAI6T,GAAMhQ,QAAQ,IAb3CwC,EAAkBiQ,EAgBpBpH,EAAI5G,KAAKC,IAAI,EAAE2G,GACfrK,EAAgByD,KAAKC,IAAI1D,EAAcqK,GAEjC+E,EAAU3L,KAAK4L,MAAMvP,EAAUN,EAAW,KAShDM,IACAqR,EARAV,EAAU,CACRrG,IACAC,IACAsE,MACAS,WAKFe,EAAShH,KAAKnF,KAAKyM,GACnBW,EAAiBK,IAxF0B,wBAAAE,EAAAE,SAAAN,EAAApX,SAA3C,gBAAA2X,GAAA,OAAAR,EAAAS,MAAA5X,KAAA6X,YAAA,IAxBwC,QAqH9CrT,EAAUqF,KAAKmM,GArH+B,yBAAAkB,EAAAQ,SAAAX,EAAA/W,SAA1C,gBAAA8X,GAAA,OAAAlB,EAAAgB,MAAA5X,KAAA6X,YAAA,IAjkDE,SA2rDR,IAFAnS,EAAY1D,WAAW6D,EAAcX,GACrCU,EAAc,CAAC,GACNY,EAAE,EAAEA,GAAG,EAAEA,IAChBZ,EAAYiE,KAAKrD,EAAEd,GA5rDb,OA+rDRlB,EAAUqF,KAAK,CACbwF,GAAG,OACH3M,MAAO,OAAOsF,IAAcC,MAAM3C,UAAU4O,KAAKxR,MAAMkN,IAAIC,KAAK,KAAK,IACrEb,KAAMjJ,IAIRxB,EAAY6D,IAEZ9D,EAAa,CACXgN,OAAO,CACLC,KAAM,OACN9I,OAAQ,kBAGV+I,QAAQ,mBACRC,QAAQ,SAAA9M,GAAK,OAAI3C,WAAW2C,GAAOE,QAAQ,GAAG,KAC9C6M,OAAO,CACLH,KAAM,SACNI,SAAS,GAGX/G,SAAS,CACPN,OAAQ,GACRD,SAAU,EACVG,OAAQ,OACRD,YAAa,GACbO,aAAc,EACdL,cAAe,GACfE,WAAW/E,EACX8E,eAAgB,SAChBjC,OAAQ,SAAA9D,GAAK,OAAI3C,WAAW2C,GAAOE,QAAQ,GAAG,MAEhDuF,WAAYtF,EAAK5E,MAAMiD,SAAW,KAAO,CACvCmH,OAAQ,GACRD,SAAU,EACV5B,OAAQ,QACR8B,YAAa,GACbE,aAAc,EACdD,OAAQ,SACRE,eAAgB,SAChBC,WAAY7F,EAAK5E,MAAMiD,SAAW,eAAmB2B,EAAK5E,MAAM0R,aAAe,eAAiB,gBAElGhM,cACAuG,UAAU,EACVC,SAAQ,EACRC,SAAQ,EACRC,WAAW,IACXC,MAAM,YACNC,YAAW,EACXC,aAAa,IACbC,aAAY,EACZC,aAAY,EACZC,iBAAiB,EACjBtB,OAAO,SAAAnB,GAAC,OAAIA,EAAEzH,OACdmK,mBAAmB,GACnBC,QAAQ,CACN,CACEG,WAAY,GACZD,UAAWlI,EAAK5E,MAAMiD,SAAW,GAAK,IACtC+J,WAAYpI,EAAK5E,MAAMiD,UAAY,GAAK,EACxCgK,WAAYrI,EAAK5E,MAAMiD,SAAW,GAAK,GACvCiK,WAAY,GACZC,aAAc,EACdC,UAAW,MACXC,OAAQ,cACRC,YAAa,SACbC,cAAe3I,EAAK5E,MAAM2C,MAAMyI,OAAOhB,OACvCoD,QAAS,CACP,CACEC,GAAI,QACJpL,MAAO,CACLkL,cAAwC,UAAzB3I,EAAK5E,MAAM0N,UAAwB,OAAS,YAMrE/K,MAAM,CACJoI,KAAM,CACJ4C,MAAO,CACLC,KAAM,CACJ1K,SAAU0B,EAAK5E,MAAMiD,SAAW,GAAI,GACpCH,WAAW,IACXqI,KAAKvG,EAAK5E,MAAM2C,MAAMyI,OAAOhB,OAC7B1H,WAAYkC,EAAK5E,MAAM2C,MAAMC,MAAMiL,aAIzCC,KAAM,CACJC,KAAM,CACJrC,OAAQ9G,EAAK5E,MAAM2C,MAAMyI,OAAO4C,gBAAiBrC,gBAAiB,SAGtEiB,QAAQ,CACNgB,KAAK,CACH9K,WAAW,IACXqI,KAAKvG,EAAK5E,MAAM2C,MAAMyI,OAAOhB,OAC7B6D,cAAc,aACdvL,WAAYkC,EAAK5E,MAAM2C,MAAMC,MAAMiL,UACnC3K,SAAU0B,EAAK5E,MAAMiD,SAAW,GAAI,MAI1CqL,WAAW,CAAEC,KAAM,QAASC,UAAW,IACvCC,OAAQ7J,EAAK5E,MAAMiD,SAAW,CAAEyL,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAAO,CAAEH,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IACrH8C,aAAa,SAACC,GAAc,IAClBC,EAAUD,EAAVC,MACF3C,EAAQ2C,EAAMC,OAAO,GAC3B,OACExC,EAAApO,EAAAC,cAACoO,EAAA,EAAD,CACEL,MAAOA,GAGiB,kBAAjB2C,EAAMC,QAAuBD,EAAMC,OAAOjK,QAC/CgK,EAAMC,OAAOlC,IAAI,SAAAV,GACf,IAAMgD,EAAehD,EAAM6C,QACrBmC,EAAkBhF,EAAMJ,KAAKmD,WAC7BsE,EAAcrH,EAAMJ,KAAKwF,IAC/B,OACEhF,EAAApO,EAAAC,cAACqO,EAAA,EAAD,CACE+C,IAAKrD,EAAMC,GACXnF,MAAOkI,EACP1P,MAAO0M,EAAM1M,MACbiC,MAAK,GAAA+N,OAAK0B,EAAL,aAAA1B,OAAgC+D,EAAhC,yBA3zDbhP,EAAAK,OAAA,6BAAAL,EAAAK,OAAA,sBAy0DZhD,EAAK7D,SAAS,CACZsD,YACAD,aACAE,cA50DU,0BAAAiD,EAAAiQ,SAAAzS,EAAAjF,oMAhCZA,KAAKiB,SAAS,CACZuD,UAAU,KACVD,UAAU,KACVD,WAAW,OAEbtE,KAAKI,YACLJ,KAAKgF,mMAGkB1E,6EACjByX,EAAsBzX,EAAUsR,eAAiB5R,KAAKE,MAAM0R,aAC5DoG,EAAoB1X,EAAU6E,aAAenF,KAAKE,MAAMiF,WACxD8S,EAAe3X,EAAUyE,gBAAkB/E,KAAKE,MAAM6E,eAAiBrE,KAAKC,UAAUL,EAAUsH,eAAiBlH,KAAKC,UAAUX,KAAKE,MAAM0H,cAC7IoQ,GAAqBD,GAAuBE,IAC9CjY,KAAKkY,2JAOHlY,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,wCAy1D9C,OACEsP,EAAApO,EAAAC,cAAC8W,EAAA,EAAD1U,OAAAC,OAAA,CACE0U,YAAY,GACRpY,KAAKJ,MAAM0E,WAFjB,CAGEgP,OAAQtT,KAAKE,MAAMoT,OACnB/B,KAAMvR,KAAKJ,MAAM2E,UACjByK,KAAMhP,KAAKJ,MAAM4E,UACjBjD,MAAOvB,KAAKJ,MAAM6E,WAClBtB,SAAUnD,KAAKE,MAAMiD,SACrBkV,SAAUrY,KAAKE,MAAMmY,SACrBC,eAAgBtY,KAAKE,MAAMoY,yBAp4DVrU,+BCyMVsU,6MA3Mb3Y,MAAQ,CACN4Y,SAAQ,EACRC,WAAW,CACTC,UAAU,CACRC,OAAO,KACPH,SAAQ,IAGZI,gBAAgB,QAIlB7Y,cAAgB,OAChB8Y,oBAAqB,IAoCrBC,oCAAiB,SAAA1B,IAAA,IAAAwB,EAAA,OAAArR,EAAAnG,EAAAoG,KAAA,SAAAgQ,GAAA,cAAAA,EAAA9P,KAAA8P,EAAA7P,MAAA,cACf7C,EAAKiU,aAAa,CAChBP,SAAQ,IAFKhB,EAAA7P,KAAA,EAKe7C,EAAK/E,cAAc+Y,eAAehU,EAAK5E,MAAM0H,aAL5D,OAKTgR,EALSpB,EAAAwB,KAOflU,EAAKiU,aAAa,CAChBP,SAAQ,EACRI,oBATa,wBAAApB,EAAAE,SAAAN,EAAApX,WAajB0Y,gDAAY,SAAA3B,EAAOkC,GAAP,IAAAC,EAAAC,EAAA,OAAA5R,EAAAnG,EAAAoG,KAAA,SAAA0P,GAAA,cAAAA,EAAAxP,KAAAwP,EAAAvP,MAAA,OACVsR,EAAEG,iBAEIF,EAAW,SAACG,EAAGC,GAGnB,IAAMC,EAAY,CAChBC,WAAYH,EAAGI,OACfC,cAAe,YACfC,YAAa7U,EAAK5E,MAAM6E,eAKtBuU,IACFC,EAAUC,WAAa1U,EAAK/E,cAAc6Z,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUE,SACrB3U,EAAK/E,cAAc8Z,yBAAyBN,GAG5B,YAAdF,EAAGI,OAELK,OAAOC,cAAcC,WAArB,sBAAuD,CACrDC,iBAAgB,4BAChBC,WAAY,QACZC,WAAY,GACZC,WAAY,GACZC,QAAS,YAIXP,OAAOC,cAAcC,WAArB,kBAAmD,CACjDC,iBAAgB,yCAChBC,WAAY,QACZC,WAAY,GACZC,WAAY,GACZC,QAAS,YAIbvV,EAAKiU,aAAa,SAACxY,GAAD,MAAgB,CAChCkY,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADL,CAERC,UAAU,CACRC,OAAO,KACPH,SAAQ,QAKd1T,EAAKgU,kBAGDK,EAAmB,SAACE,GACxB,IAAMV,EAASU,EAAGiB,gBAClBxV,EAAKiU,aAAa,SAACxY,GAAD,MAAgB,CAC9BkY,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADL,CAERC,UAAUjV,OAAAgS,EAAA,EAAAhS,CAAA,GACLlD,EAAUkY,WAAWC,UADjB,CAEPC,iBAOV7T,EAAK5E,MAAMqa,0BAA0BzV,EAAK5E,MAAM0H,YAAYsM,KAAKsG,MAAO,YAAa,GAAI,KAAOtB,EAAUC,GAE1GrU,EAAKiU,aAAa,CAChBN,WAAW,CACTC,UAAU,CACRC,OAAO,KACPH,SAAQ,MA5EJ,wBAAAtB,EAAAQ,SAAAX,EAAA/W,0IA9CNA,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,8JAK9CF,KAAK6Y,oBAAqB,yPAI1B7Y,KAAKI,YACLJ,KAAK8Y,sMAGkBxY,EAAUC,yEACjCP,KAAKI,YAECqa,EAAiBna,EAAUoa,UAAY1a,KAAKE,MAAMwa,SACnCpa,EAAUyE,gBAAkB/E,KAAKE,MAAM6E,eACxC0V,IAClBza,KAAK8Y,mMAIU6B,wFAASzB,iCAAS,KAC9BlZ,KAAK6Y,4DACD7Y,KAAKiB,SAAS0Z,EAASzB,oCAEzB,0IAkGA,IAAAhY,EAAAlB,KACP,OACEwP,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExH,GAAI,EACJ7R,MAAO,EACPsZ,UAAW,QACXhX,WAAY,SACZiX,cAAe,SACfhX,eAAgB,UAGhB9D,KAAKJ,MAAM4Y,QACThJ,EAAApO,EAAAC,cAAC0Z,EAAA,EAAD,CACEC,UAAW,CACTF,cAAc,OAEhBG,YAAa,CACXjX,KAAK,QAEPkX,UAAW,CACTC,GAAG,GAELrN,KAAM,0BAGR9N,KAAKJ,MAAM6Y,WAAWC,UAAUF,QAC9BhJ,EAAApO,EAAAC,cAAC+Z,EAAA,EAAD3X,OAAAC,OAAA,GAAmB1D,KAAKE,MAAxB,CAA+Bmb,SAAQ,yBAA4BC,WAAU,kCAAqCC,KAAMvb,KAAKJ,MAAM6Y,WAAWC,UAAUC,UAExJnJ,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZiX,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJC,GAAI,EACJvY,UAAW,UAEVlD,KAAKJ,MAAMgZ,gBAAkB,uDAAyD,iCAEzFpJ,EAAApO,EAAAC,cAACqa,EAAA,EAAD,CACEC,YAAa,CACXpa,MAAM,OACNqa,UAAU5b,KAAKJ,MAAMgZ,iBAEvBiD,YAAa,SAAA5C,GAAC,OAAI/X,EAAKwX,UAAUO,KALnC,sBA3LUhV,8HC0JT6X,8NAhJblc,MAAQ,CACNmc,eAAe,GACfC,OAAO,CACLC,UAAWnX,EAAK5E,MAAM+b,UAAYnX,EAAK5E,MAAM+b,UAAY,IAAIpG,KAC7DqG,QAASpX,EAAK5E,MAAMgc,QAAUpX,EAAK5E,MAAMgc,QAAU,IAAIrG,KACvDpD,IAAK,gBAsDT0J,mBAAqB,SAAC7b,GAChBA,EAAU2b,YAAcnX,EAAK5E,MAAM+b,WAAa3b,EAAU4b,UAAYpX,EAAK5E,MAAMgc,SACnFpX,EAAK7D,SAAS,CACZ+a,OAAO,CACLC,UAAWnX,EAAK5E,MAAM+b,UAAYnX,EAAK5E,MAAM+b,UAAY,IAAIpG,KAC7DqG,QAASpX,EAAK5E,MAAMgc,QAAUpX,EAAK5E,MAAMgc,QAAU,IAAIrG,KACvDpD,IAAK,4FAxDAuJ,GACXhc,KAAKiB,SAAS,CACZ8a,eAAe,GACfC,OAAOA,EAAOI,sDAIAnD,GAAE,IAAA/X,EAAAlB,KACdic,EAAY,KACZC,EAAU5T,IAAO,IAAIuN,MACnBkG,EAAiB9C,EAAEoD,OAAO1X,MAEhC,OAAQoX,GACN,IAAK,MACHE,EAAYC,EAAQI,QAAQC,SAAS,EAAE,OACzC,MACA,IAAK,OACHN,EAAYC,EAAQI,QAAQC,SAAS,EAAE,QACzC,MACA,IAAK,QACHN,EAAYC,EAAQI,QAAQC,SAAS,EAAE,QACzC,MACA,IAAK,QACHN,EAAYC,EAAQI,QAAQC,SAAS,EAAE,SACzC,MACA,QACEN,EAAY,KACZC,EAAU,KAId,GAAID,GAAaC,EAAQ,CAIvB,IAAMF,EAAS,CACbC,UAJFA,EAAYA,EAAU1T,GAKpB2T,QAJFA,EAAUA,EAAQ3T,GAKhBkK,IAAI,aAGNzS,KAAKiB,SAAS,CACZ+a,SACAD,kBACC,WACD7a,EAAKsb,qDAkBT,IAAM7B,EAAW3a,KAAKE,MAAMuc,aAAazc,KAAKJ,MAAMoc,OAAOhc,KAAKJ,MAAMmc,gBAChEC,EAAS,CACbC,UAAUtB,EAAS+B,kBAAoB/B,EAAS+B,kBAAkBnU,GAAK,IAAIsN,KAC3EqG,QAAQvB,EAASgC,gBAAkBhC,EAASgC,gBAAgBpU,GAAK,IAAIsN,KACrEpD,IAAK,aAEPzS,KAAKiB,SAAS,CACZ+a,WAEFhc,KAAKE,MAAMsc,8CAGJ,IAAAI,EAAA5c,KACP,OACEwP,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAOiC,OAAQ7c,KAAKE,MAAM2c,QACxBrN,EAAApO,EAAAC,cAACyb,EAAA,EAAD,CAAWC,UAAW/c,KAAKE,MAAMsc,YAC/BhN,EAAApO,EAAAC,cAACyb,EAAA,EAAUE,OAAX,CAAkBC,MAAO,sBAEzBzN,EAAApO,EAAAC,cAACyb,EAAA,EAAUI,KAAX,KACE1N,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAMrZ,MAAO,EAAGuZ,cAAe,SAAUjX,WAAY,UACnD2L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAO1Q,MAAM,uBAAuB3H,MAAO,CAACE,QAAQ,OAAOlB,MAAM,OAAOsC,WAAW,UAAUC,eAAe,WAC1G0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErY,MAAO,CACLa,SAAS,OACTkQ,OAAO,QACPhF,UAAU,OACV5L,MAAM1C,KAAKE,MAAM2C,MAAMyI,OAAOvI,QAC9Boa,gBAAgBnd,KAAKE,MAAM2C,MAAMyI,OAAO8R,QAE1C7b,MAAO,OACP8b,UAAU,EACVC,SAAUtd,KAAKud,kBAAkBC,KAAKxd,MACtC2E,MAAO3E,KAAKJ,MAAMmc,eAClB0B,QAAS,CACP,CAAE9Y,MAAO,GAAIuF,MAAO,oBACpB,CAAEvF,MAAO,MAAOuF,MAAO,YACvB,CAAEvF,MAAO,OAAQuF,MAAO,aACxB,CAAEvF,MAAO,QAASuF,MAAO,gBACzB,CAAEvF,MAAO,QAASuF,MAAO,kBAI/BsF,EAAApO,EAAAC,cAACqc,EAAA,UAAD,CACE1B,OAAQ,CAAChc,KAAKJ,MAAMoc,QACpB2B,QAAS3d,KAAKE,MAAMyd,QACpBC,QAAS5d,KAAKE,MAAM0d,QACpBC,UAAW7d,KAAKE,MAAM0N,UACtB0P,SAAUtd,KAAKyc,aAAae,KAAKxd,UAIvCwP,EAAApO,EAAAC,cAACyb,EAAA,EAAUgB,OAAX,KACEtO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAMxH,GAAI,CAAC,EAAE,GAAI0H,cAAe,CAAC,SAAU,OAAQvZ,MAAO,EAAGuC,eAAgB,UAC3E0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEmD,GAAI,EACJC,GAAI,CAAC,EAAG,GACRC,aAAc,EACdC,UAAW,OACXC,QAAU,SAAAlF,GAAC,OAAI2D,EAAKJ,WAAWvD,IAC/BjV,KAAMhE,KAAKE,MAAMiD,SAAW,QAAU,UANxC,oBA/Heib,IAAMna,+BCokDpBoa,6MA3jDbze,MAAQ,CACNoQ,IAAI,KACJ4E,IAAI,KACJC,KAAK,IACLyJ,MAAM,KACNvJ,QAAQ,KACR4I,QAAQ,KACRC,QAAQ,KACRW,YAAY,EACZC,WAAW,IACXC,aAAa,GACbtZ,WAAW,KACXuZ,cAAc,EACdvW,YAAY,KACZwW,cAAc,GACdC,aAAa,KACbzY,aAAa,KACbyL,cAAa,EACbiN,cAAc,KACdC,cAAc,KACd/C,eAAe,KACf7V,eAAe,KACfyW,gBAAgB,KAChB/D,gBAAgB,KAChBmG,mBAAmB,EACnBrC,kBAAkB,KAClBsC,sBAAqB,EACrB5Z,sBAAsB,KACtB6Z,sBAAqB,KAGvBC,gBAAkB,CAChBC,IAAI,WACJC,KAAK,YACLC,MAAM,eACNC,MAAM,gBAIRvf,cAAgB,OAChB8Y,mBAAqB,OAqIrB0G,aAAe,SAACvD,GAA+B,IAAxBD,EAAwBlE,UAAA9P,OAAA,QAAAsJ,IAAAwG,UAAA,GAAAA,UAAA,GAAT,KAE9B+G,EAAetW,IAAON,IAAcC,MAAM0H,OAAO7K,EAAK5E,MAAM6E,eAAemB,gBAE7EwW,EAAoBpU,IAAO0T,EAAOC,WAAWuD,cAAcZ,GAAgBtW,IAAO0T,EAAOC,WAAa2C,EACtGjC,EAAkBrU,IAAO0T,EAAOE,SAEhCQ,EAAkB+C,OAAO9C,IAC3BA,EAAgB+C,IAAI,EAAE,OAGxB/C,EAAkBrU,IAAOqU,EAAgBlU,OAAO,oBAAoB,oBAEhEiU,EAAkBiD,SAAS7a,EAAKlF,MAAMgf,gBACxClC,EAAoB5X,EAAKlF,MAAMgf,cAG7BjC,EAAgB/G,QAAQ9Q,EAAKlF,MAAMggB,cACrCjD,EAAkB7X,EAAKlF,MAAMggB,YAG/B,IAAM1Z,EAAiBtB,SAAS8X,EAAkBnU,GAAGC,UAAU,KAGzDmS,EAAW,CACfiE,eACAzY,aAJmBvB,SAAS+X,EAAgBpU,GAAGC,UAAU,KAKzDuT,iBACA7V,iBACAyW,kBACAD,qBAKF,OAFA5X,EAAKiU,aAAa4B,GAEXA,KAGTkF,qBAAuB,SAAC5G,GACtBA,EAAEG,iBACFtU,EAAKiU,aAAa,CAChBnH,cAAc9M,EAAKlF,MAAMgS,kBAI7BkO,kBAAoB,SAACb,GACfA,IAAyBna,EAAKlF,MAAMqf,sBACtCna,EAAKiU,aAAa,CAChBkG,4BAwDNc,gBAAkB,SAAC5a,GACjB,OAAOA,EAAWuE,OAAO,SAACsW,EAAExZ,GAC1B,QAAS1B,EAAKlF,MAAMsG,gBAAkB8Z,EAAE5Z,WAAatB,EAAKlF,MAAMsG,mBAAqBpB,EAAKlF,MAAMuG,cAAgB6Z,EAAE5Z,WAAatB,EAAKlF,MAAMuG,mBAI9I8Z,eAAiB,SAAA9X,GACfrD,EAAKiU,aAAa,CAChB5Q,mBAIJnD,iCAAc,SAAAoS,IAAA,IAAAlR,EAAAC,EAAA+Z,EAAA9a,EAAAD,EAAAgb,EAAAC,EAAAvL,EAAAD,EAAA0J,EAAAxV,EAAAuX,EAAAC,EAAAtQ,EAAAuQ,EAAAC,EAAAC,EAAAC,EAAA3K,EAAA4K,EAAA5L,EAAA6L,EAAAC,EAAAC,EAAAtC,EAAAuC,EAAAlC,EAAAC,EAAA,OAAAvX,EAAAnG,EAAAoG,KAAA,SAAAgQ,GAAA,cAAAA,EAAA9P,KAAA8P,EAAA7P,MAAA,UAEP7C,EAAK5E,MAAM6E,eAAkBD,EAAK5E,MAAM0H,YAFjC,CAAA4P,EAAA7P,KAAA,eAAA6P,EAAA1P,OAAA,UAGH,GAHG,cAUN5B,EAAiBpB,EAAKlF,MAAM+d,QAAU/Y,SAASE,EAAK/E,cAAcmP,YAAYpK,EAAK/E,cAAcmP,YAAYpK,EAAKlF,MAAM+d,SAASlV,OAAO,uBAAuB,uBAAuBF,GAAGC,UAAU,KAAQ,KAC3MrC,EAAerB,EAAKlF,MAAMge,QAAUhZ,SAASE,EAAK/E,cAAcmP,YAAYpK,EAAK/E,cAAcmP,YAAYpK,EAAKlF,MAAMge,SAASnV,OAAO,uBAAuB,uBAAuBF,GAAGC,UAAU,KAAQ,KAEzM0X,EAAS,CAAC,KAAK,MAAM3K,SAASzQ,EAAKlF,MAAMuI,cAAgD,SAAhCrD,EAAK5E,MAAM8gB,iBAb9DxJ,EAAA7P,KAAA,EAcsB7C,EAAK/E,cAAckhB,gBAAgBnc,EAAK5E,MAAM0H,YAAY8I,QAAQwP,EAAOha,EAAeC,GAAa,EAAK,MAdhI,UAcRf,EAdQoS,EAAAwB,MAgBN7T,EAAaL,EAAKib,gBAAgB3a,KAIpBA,GAA0BD,EAAW4C,QAAW3C,EAAsB2C,OApB9E,CAAAyP,EAAA7P,KAAA,gBAAA6P,EAAA1P,OAAA,UAqBH,GArBG,eAwBNqY,EAAchb,EAAW,GACzBib,EAAa3c,OAAOgG,OAAOtE,GAAY+b,MAE7CpH,OAAOxR,OAASA,IAGH,KADTuM,GAAQuL,EAAWha,UAAU+Z,EAAY/Z,WAAW,SAEtDyO,EAAO,GAGLD,EAAM,KACN0J,EAAQ,MAENxV,EAAahE,EAAK/E,cAAcgJ,iBAAiBqX,EAAWpX,WAAW,IACvEqX,EAAiBvb,EAAK/E,cAAcgJ,iBAAiBoX,EAAYpQ,UAAUjL,EAAK5E,MAAM0H,YAAYlG,UAClG4e,EAAgBxb,EAAK/E,cAAcgJ,iBAAiBqX,EAAWrQ,UAAUjL,EAAK5E,MAAM0H,YAAYlG,UAGlGsO,EAAMlH,EAAW/H,MAAMuf,GA1Cf9I,EAAA7P,KAAA,GA6CA7C,EAAK/E,cAAcohB,oBAAoBnR,EAAIlL,EAAK5E,MAAM6E,cAAcD,EAAK5E,MAAM0H,YAAYsY,GA7C3F,eA6CZlQ,EA7CYwH,EAAAwB,KA+CNuH,EAAezb,EAAK5E,MAAM0H,YAAYtC,UAAUoE,OAAO,SAAC0G,GAAQ,MAAkB,aAAXA,EAAEgB,OAAuB,GAChGoP,EAAoBD,EAAeJ,EAAY7P,cAAc5G,OAAO,SAAC0G,GAAQ,OAAOA,EAAEI,aAAaC,gBAAkB8P,EAAa7P,QAAQD,gBAAiB,GAAK,KAChKgQ,EAAmBF,EAAeH,EAAW9P,cAAc5G,OAAO,SAAC0G,GAAQ,OAAOA,EAAEI,aAAaC,gBAAkB8P,EAAa7P,QAAQD,gBAAiB,GAAK,KAErI,OAA3B3L,EAAKlF,MAAMuI,aAQbyM,GANAA,EAAMzP,EAAWqO,OAAQ,SAAC4N,EAAIpB,GAC5B,IAAM7L,EAAWrP,EAAK/E,cAAcgJ,iBAAiBiX,EAAE7L,SAAS,IAChE,OAAOrP,EAAK/E,cAAc6Q,MAAMwQ,GAAKtgB,KAAKqT,IAC1C,IAGQnT,IAAImE,EAAW4C,QAErBwY,IACIG,EAAuB1Y,IAAcC,MAAM3C,UAAU+b,iBACrDtL,EAAY2K,EAAqB3K,UAAY2K,EAAqB3K,UAAY,OAqBpF4K,GAnBIA,EAAiBxb,EAAWqO,OAAQ,SAAC4N,EAAIpB,GAE3C,IAAMsB,EAAetB,EAAE1P,cAAcwC,KAAK,SAAC6B,EAAM1E,GAC/C,OAAO0E,EAAMnE,aAAaC,gBAAkB8P,EAAa7P,QAAQD,gBAG/D8Q,EAAoC,kBAAdxL,GAA0BA,EAAUhO,OAASgO,EAAUvC,OAAO,SAAC4C,EAAIC,GAC3F,OAAIiL,GAAgBA,EAAajL,GACxBvR,EAAK/E,cAAc6Q,MAAMwF,GAAKtV,KAAKgE,EAAK/E,cAAc6Q,MAAM0Q,EAAajL,KAE3EvR,EAAK/E,cAAc6Q,MAAMwF,IAChC,GAAKtR,EAAK/E,cAAc6Q,MAAM0Q,EAAavL,IAI7C,OAFAwL,EAAezc,EAAK/E,cAAcgJ,iBAAiBwY,EAAa,IAEzDzc,EAAK/E,cAAc6Q,MAAMwQ,GAAKtgB,KAAKygB,IAC1C,IAG8BvgB,IAAImE,EAAW4C,QAK/CuW,EAAQ1J,EAAIxL,MAAMuX,GACd3e,WAAWsc,GAAO,IACpBA,EAAQ,GAEVA,EAAQA,EAAMzZ,QAAQ,IAGxB+P,EAAMA,EAAI/P,QAAQ,KAGZkQ,EAAUuL,EAActf,IAAIqf,GAAgBjX,MAAM,GAAGrI,MAAM,KACjE6T,EAAMG,EAAQhU,MAAM,KAAKC,IAAI6T,GAAMhQ,QAAQ,GAEvC2b,GAAqBC,IACjBG,EAAqB9b,EAAK/E,cAAcgJ,iBAAiByX,EAAkB/I,MAAM3S,EAAK5E,MAAM0H,YAAYlG,UACxGmf,EAAoB/b,EAAK/E,cAAcgJ,iBAAiB0X,EAAiBhJ,MAAM3S,EAAK5E,MAAM0H,YAAYlG,UACtGof,EAAcD,EAAkB7f,IAAI4f,GAAoBxX,MAAM,GAAGrI,MAAM,KAC7Eud,EAAQvJ,EAAQ3L,MAAM0X,GAAa/f,MAAM,KAAKC,IAAI6T,GAC9C7S,WAAWsc,GAAO,IACpBA,EAAQ,GAEVA,EAAQA,EAAMzZ,QAAQ,KAKtB2Z,EAAa,EACjBrZ,EAAWyD,QAAQ,SAACC,EAAI2Y,GACtB,GAAIA,EAAM,CACR,IAAMC,EAAUtc,EAAWqc,EAAM,GAE3BjO,EAAkB1K,EAAIyH,cAAckD,OAAO,SAACC,EAAYlD,GAC5D,IAAMO,EAAahM,EAAK/E,cAAcgJ,iBAAiBwH,EAAmBO,WAAWhM,EAAK5E,MAAM0H,YAAYlG,UAC5G,OAAOoD,EAAK/E,cAAc6Q,MAAM6C,GAAa3S,KAAKgQ,IAClD,GAEI4Q,EAAsBD,EAAQnR,cAAckD,OAAO,SAACC,EAAYlD,GACpE,IAAMO,EAAahM,EAAK/E,cAAcgJ,iBAAiBwH,EAAmBO,WAAWhM,EAAK5E,MAAM0H,YAAYlG,UAC5G,OAAOoD,EAAK/E,cAAc6Q,MAAM6C,GAAa3S,KAAKgQ,IAClD,GAEE6Q,GAAgB,EACpB9Y,EAAIyH,cAAc1H,QAAS,SAAAwH,GACzB,IAAIuR,EAAJ,CAGA,IAAMC,EAAQH,EAAQnR,cAAcwC,KAAM,SAAA8O,GAAK,OAAKA,EAAMpR,aAAaC,gBAAkBL,EAAEI,aAAaC,gBAClGK,EAAahM,EAAK/E,cAAcgJ,iBAAiBqH,EAAEU,WAAWhM,EAAK5E,MAAM0H,YAAYlG,UACrFmgB,EAAiBD,EAAQ9c,EAAK/E,cAAcgJ,iBAAiB6Y,EAAM9Q,WAAWhM,EAAK5E,MAAM0H,YAAYlG,UAAYoD,EAAK/E,cAAc6Q,MAAM,GACzHhM,SAAS5C,WAAW8O,EAAW9P,IAAIuS,GAAiBxS,MAAM,SACtD6D,SAAS5C,WAAW6f,EAAe7gB,IAAI0gB,GAAqB3gB,MAAM,SAE3Fyd,IACAmD,GAAgB,UAOlBZ,EAAkB,IACRjc,EAAK5E,MAAM6E,eAAiBD,EAAK5E,MAAM0H,YAtJ3C4P,EAAA7P,KAAA,GAuJgB7C,EAAK/E,cAAc+hB,gBAAgB,KAAKf,EAAgB,OAvJxE,eAuJNlC,EAvJMrH,EAAAwB,QAyJVhJ,EAAMA,EAAIlP,KAAK+d,IAzJLrH,EAAA7P,KAAA,GAsKc7C,EAAK/E,cAAcgiB,iBAAiBjd,EAAK5E,MAAM0H,aAtK7D,SAsKRkX,EAtKQtH,EAAAwB,QAwKV8F,EAAgBha,EAAK/E,cAAcqC,YAAYJ,WAAW8c,KAG5Dha,EAAKiU,aAAa,CAChB/I,MACA4E,MACAC,OACAyJ,QACAnZ,aACAqZ,aACAK,gBACAC,gBACA1Z,0BApLU,yBAAAoS,EAAAE,SAAAN,EAAApX,WAwLdgiB,kDAAc,SAAAjL,EAAOkL,EAASzH,GAAhB,OAAAjT,EAAAnG,EAAAoG,KAAA,SAAA0P,GAAA,cAAAA,EAAAxP,KAAAwP,EAAAvP,MAAA,cAAAuP,EAAAvP,KAAA,EACN7C,EAAK5E,MAAMgiB,iBAAiBD,EAASzH,GAD/B,OAEZ1V,EAAK5E,MAAMiiB,YAAY3H,GAFX,wBAAAtD,EAAAQ,SAAAX,EAAA/W,mEAKdoiB,eAAiB,SAAA5W,GACf,IAAIkT,EAAgB5Z,EAAKlF,MAAM8e,cAClB,SAATlT,GAAmBkT,EAAc5Z,EAAKlF,MAAM2e,YAC9CG,IACkB,SAATlT,GAAmBkT,EAAc,GAC1CA,IAGF,IAAM2D,EAAWvI,OAAOwI,OAAP,6BAAA5P,OAA2CgM,EAA3C,MACXK,GAAsB/c,WAAWqgB,EAASE,WAAWxT,MAAM,KAEjEjK,EAAKiU,aAAa,CAChB2F,gBACAK,mGAjcE/e,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,mKAK9CF,KAAKI,qBACCJ,KAAKwiB,8JAIXxiB,KAAK6Y,oBAAqB,+EAGT8B,wFAASzB,iCAAS,KAC9BlZ,KAAK6Y,4DACD7Y,KAAKiB,SAAS0Z,EAASzB,oCAEzB,wJAIPlZ,KAAKiB,SAAS,CACZ+d,sBAAqB,wDAIE,IAAA9d,EAAAlB,KACnB2e,EAAgB3W,IAAcC,MAAMC,SACtCua,EAAgB,KAQpB,OAPAhf,OAAO+B,KAAKmZ,GAAe/V,QAAS,SAAA8Z,GACd/D,EAAc+D,GAClBC,kBAAkBpN,SAASrU,EAAKhB,MAAM8gB,oBACpDyB,EAAgBC,KAIbD,yCAGMC,GAKb,GAJKA,IACHA,EAAU1iB,KAAKJ,MAAMuI,cAGlBH,IAAcC,MAAMC,SAASwa,GAChC,OAAO,KAGT,IAAMnd,EAAc9B,OAAOC,OAAO,GAAGsE,IAAcC,MAAMC,SAASwa,IAElE,GAAInd,EAAYqd,kBAAoBrd,EAAYqd,iBAAiB5iB,KAAKE,MAAM8gB,kBAAkB,CAC5F,IAAM6B,EAAmBtd,EAAYqd,iBAAiB5iB,KAAKE,MAAM8gB,kBACjEvd,OAAO+B,KAAKqd,GAAkBja,QAAS,SAAAka,GACrCvd,EAAYud,GAASD,EAAiBC,KAI1C,OAAOvd,kKAKFvF,KAAKE,MAAM6E,eAAkB/E,KAAKE,MAAM0H,sDACpC,aAGH+S,EAAW,GACAoI,EAAa/iB,KAAKE,MAA3B8iB,MAASD,OAEXE,EAAgCxf,OAAO+B,KAAKxF,KAAKE,MAAM6gB,iBAEvDgC,EAAOG,cAA4F,IAA7ED,EAA8B/R,QAAQ6R,EAAOG,YAAYC,eACnFxI,EAAS5V,cAAgBge,EAAOG,YAAYC,cAE5CxI,EAAS5V,cAAgB/E,KAAKE,MAAM6E,cAAcoe,cAGpDxI,EAAS/S,YAAc5H,KAAKE,MAAM6gB,gBAAgBpG,EAAS5V,eAC3D4V,EAASiE,aAAetW,IAAON,IAAcC,MAAM0H,OAAO3P,KAAKE,MAAM6E,eAAemB,eAAe,cACnGyU,EAASiF,WAAatX,MAEtBqS,EAASgC,gBAAkBrU,IAAOA,MAASG,OAAO,oBAAoB,oBAEtEkS,EAAS8H,cAAgBziB,KAAKojB,4BAC9BzI,EAASxS,YAAyC,OAA3BnI,KAAKJ,MAAMuI,YAAuBwS,EAAS8H,cAAgBziB,KAAKJ,MAAMuI,YAEvF5C,EAAcvF,KAAKqjB,eAAe1I,EAASxS,aAI7CwS,EAASxS,aAAe5C,EAAYY,eAChCmd,EAAqBhb,IAAOA,IAAgC,IAAzB/C,EAAYY,cAAmBsC,OAAO,oBAAoB,oBAC/FkS,EAASgC,gBAAgB/G,QAAQ0N,KACnC3I,EAASgC,gBAAkB2G,EAC3B3I,EAASxU,aAAevB,SAAS+V,EAASgC,gBAAgBpU,GAAGC,UAAU,MAGpEmS,EAASiF,aAAcjF,EAASiF,WAAWhK,QAAQ0N,KACtD3I,EAASiF,WAAa0D,IAI1B3I,EAASxU,aAAevB,SAAS+V,EAASgC,gBAAgBpU,GAAGC,UAAU,KAGvEmS,EAAS+B,kBAAoB/B,EAASgC,gBAAgBL,QAAQC,SAAS,EAAE,SACzE5B,EAASzU,eAAiBtB,SAAS+V,EAAS+B,kBAAkBnU,GAAGC,UAAU,KAEvEmS,EAASxS,aAAe5C,EAAYW,iBAChCqd,EAAuBjb,IAAOA,IAAkC,IAA3B/C,EAAYW,gBAAqBuC,OAAO,oBAAoB,oBACnGkS,EAAS+B,kBAAkBiD,SAAS4D,KACtC5I,EAAS+B,kBAAoB6G,EAC7B5I,EAASzU,eAAiBtB,SAAS+V,EAAS+B,kBAAkBnU,GAAGC,UAAU,MAGzEmS,EAASiE,aAAae,SAAS4D,KACjC5I,EAASiE,aAAe2E,IAI5B5I,EAASgD,QAAUhD,EAASiE,aAAarW,GACzCoS,EAASiD,QAAUjD,EAASiF,WAAWrX,GAEnCoS,IAAa3a,KAAKJ,wCACdI,KAAK+Y,aAAa4B,6PA2DrB3a,KAAKE,MAAMsjB,4BACdxjB,KAAKE,MAAMujB,8BACJ,iBAcTzjB,KAAKI,qBACCJ,KAAKwiB,oBACXxiB,KAAKgF,cACLhF,KAAK0jB,wJAIL,IAAMnF,EAAcve,KAAKE,MAAMiD,SAAW,EAAI,EAC9CnD,KAAK+Y,aAAa,CAChBwF,mGAIqBje,EAAUC,oFAC3BC,EAAuBF,EAAUE,uBAAyBR,KAAKE,MAAMM,qBACrEmjB,EAAkBrjB,EAAU0gB,mBAAqBhhB,KAAKE,MAAM8gB,iBAC5D/I,EAAe3X,EAAUyE,gBAAkB/E,KAAKE,MAAM6E,eAAiBrE,KAAKC,UAAUL,EAAUsH,eAAiBlH,KAAKC,UAAUX,KAAKE,MAAM0H,aAC3Igc,EAAcrjB,EAAU2F,iBAAmBlG,KAAKJ,MAAMsG,gBAAkB3F,EAAU4F,eAAiBnG,KAAKJ,MAAMuG,aAC9G0d,EAAiBtjB,EAAU4H,cAAgBnI,KAAKJ,MAAMuI,YACtC7H,EAAU6C,WAAanD,KAAKE,MAAMiD,UAGtDnD,KAAK0jB,iBAGHljB,GAAwByX,GAAgB0L,GAAmBE,qCAEvD7jB,KAAKkY,oDACF0L,GACT5jB,KAAKgF,qJA8NA,IAAA4X,EAAA5c,KAiBD8jB,EAAmB9jB,KAAKD,cAAcgkB,gBAAgB,CAAC,YAAY,OAAO,YAC1EC,EAAUhkB,KAAKD,cAAcgkB,gBAAgB,CAAC,WAAW,YAE/D,IAAK/jB,KAAKE,MAAMO,oBACd,OACE+O,EAAApO,EAAAC,cAAC0Z,EAAA,EAAD,CACEG,UAAW,CACT+I,SAAS,EACTjhB,WAAW,GAEbiY,YAAa,CACXQ,GAAG,EACHzX,KAAK,QAEPgX,UAAW,CACTH,UAAU,OACVC,cAAc,UAEhBhN,KAAM,sBAKZ,IAAMoW,EAAclkB,KAAKD,cAAcgkB,gBAAgB,CAAC,QAAQ,WAEhE,GAAK/jB,KAAKE,MAAM6E,cA+UT,CAEL,IAAM6C,EAAcsc,EAAYlkB,KAAKE,MAAM6E,eAErCof,EAAkB1gB,OAAO+B,KAAKwC,IAAcC,MAAMC,UAAUwB,OAAQ,SAAAgZ,GACxE,IAAMnd,EAAcqX,EAAKyG,eAAeX,GACxC,OAAOnd,EAAY+P,cAAcC,SAASqH,EAAK1c,MAAM6E,gBAAkBQ,EAAYod,kBAAkBpN,SAASqH,EAAK1c,MAAM8gB,oBACxHlR,IAAK,SAAA4S,GAEN,MAAO,CACL/d,MAAM+d,EACNxY,MAHkB0S,EAAKyG,eAAeX,GAGpBxY,SAIhB3E,EAAcvF,KAAKqjB,eAAerjB,KAAKJ,MAAMuI,aAE/Cic,EAAqB,KACzB,GAAIpkB,KAAKJ,MAAMuI,aAAe5C,EAE5B6e,EAD+BpkB,KAAKD,cAAcgkB,gBAAgB,CAAC,QAAQ,WAAW/jB,KAAKJ,MAAMuI,YAAY,2BAC/DnI,KAAKD,cAAcgkB,gBAAgB,CAAC,QAAQ,SAAS/jB,KAAKE,MAAM6E,cAAc,uBAAyB,KAGvJ,IAAMsf,EAAsBF,EAAgBrR,KAAM,SAAAnJ,GAAC,OAAKA,EAAEhF,QAAUiY,EAAKhd,MAAMuI,cAE/E,OACEqH,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExK,EAAG,EACH7O,MAAO,EACPuZ,cAAe,UAuCftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,IAEPjM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEE,cAAe,CAAC,SAAS,QAEzBtL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,CAAC,EAAE,KAEViO,EAAApO,EAAAC,cAACijB,EAAA,EAAD7gB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEqkB,gBAAgB,EAChBzW,KAAM,kBACN3K,SAAUnD,KAAKE,MAAMiD,SACrB0Y,YAAc,SAAA5C,GAAC,OAAI2D,EAAK1c,MAAMskB,YAAY,UAC1CC,KAAM,CAACzkB,KAAKD,cAAcgkB,gBAAgB,CAAC,aAAa/jB,KAAKE,MAAM8gB,iBAAiB,eAGxFxR,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,CAAC,EAAE,GACPja,MAAO,CAAC,EAAE,IACVuZ,cAAe,CAAC,SAAS,OACzBhX,eAAgB,CAAC,SAAS,kBAE1B0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,CAAC,EAAE,KACVuZ,cAAe,UAEftL,EAAApO,EAAAC,cAACqjB,EAAA,EAAD,CACEC,WAAY,CACVvU,EAAE,EACFkD,OAAO,CAAC,OAAO,SAEjBlC,KAAM,eACNqM,QAAS0G,EACTS,aAAcP,EACd/G,SAAW,SAAA3T,GAAC,OAAIiT,EAAKqD,eAAetW,OAGxC6F,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,CAAC,EAAE,GACPja,MAAO,CAAC,EAAE,IACVuZ,cAAe,UAEftL,EAAApO,EAAAC,cAACwjB,EAAA,EAADphB,OAAAC,OAAA,CACEihB,WAAY,CACVvU,EAAE,IAEApQ,KAAKE,SAGbsP,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,CAAC,EAAE,GACPja,MAAO,CAAC,EAAE,KACVuZ,cAAe,UAEftL,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT9C,EAAE,EACF3N,QAAQ,OACRoB,WAAW,SACXyP,OAAO,CAAC,OAAO,QACfxP,eAAe,UAEjBghB,eAAe,EACfjJ,YAAc,SAAA5C,GAAC,OAAI2D,EAAKkD,mBAAkB,KAE1CtQ,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE5X,WAAY,EACZN,MAAO,aAGP1C,KAAKJ,MAAMmc,eAET/b,KAAKkf,gBAAgBlf,KAAKJ,MAAMmc,gBAChC/b,KAAKJ,MAAM8c,mBAAqB1c,KAAKJ,MAAM+c,iBAA3C,GAAAjK,OACG1S,KAAKJ,MAAM8c,kBAAkBjU,OAAO,YADvC,OAAAiK,OACwD1S,KAAKJ,MAAM+c,gBAAgBlU,OAAO,mBASrGb,EAAYiM,QAiCT7T,KAAKJ,MAAMuI,aAAenI,KAAKD,cAAcmP,YAAY3J,EAAYW,gBAAgB0P,QAAQC,KAAKC,OACpGtG,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZiX,cAAe,MACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT9C,EAAE,EACF7O,MAAM,CAAC,EAAE,MAGXiO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE/W,WAAY,SACZiX,cAAe,UAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE5W,KAAM,QACNtB,MAAO,WACP0O,KAAM,eAER5B,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJpY,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,cAMclD,KAAKJ,MAAMuI,YANzB,kCAWJnI,KAAKD,cAAcmP,YAAYtH,EAAY1B,gBAAgB0P,QAAQC,KAAKC,OAC1EtG,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZiX,cAAe,MACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT9C,EAAE,EACF7O,MAAM,CAAC,EAAE,MAGXiO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE/W,WAAY,SACZiX,cAAe,UAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE5W,KAAM,QACNtB,MAAO,WACP0O,KAAM,eAER5B,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJpY,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,aAMalD,KAAKE,MAAM6E,cANxB,kCAYNyK,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,GAEPiO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,CAAC,EAAE,GACPC,GAAI,CAAC,EAAE,IAEPjM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZC,eAAgB,SAChBgX,cAAe,CAAC,SAAS,QAEzBtL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPsJ,GAAI,CAAC,EAAE,GACPxjB,MAAO,CAAC,EAAE,KACVuZ,cAAe,UAEftL,EAAApO,EAAAC,cAAC2jB,EAAA,EAAD,CACE/H,MAAO,yBACP/S,MAAQlK,KAAKJ,MAAMkf,cAAX,iBAAApM,OAA4C1S,KAAKJ,MAAMkf,cAAvD,KAAApM,OAAwE1S,KAAKE,MAAM6E,eAAkB/E,KAAKE,MAAM6E,cACxHkgB,aAAejlB,KAAKJ,MAAMkf,cAAgB9e,KAAKD,cAAcgkB,gBAAgB,CAAC,WAAW,gBAAkB,MAE3GvU,EAAApO,EAAAC,cAAC6jB,EAAA,EAADzhB,OAAAC,OAAA,CACEyhB,UAAW,EACX5T,KAAM,SA9oBT,CACjB6T,WAAW,EACXhiB,SAAS,CAAC,EAAE,GACZJ,WAAW,CAAC,EAAE,GACdN,MAAM,aAwoBY,CAIE2iB,UAzoBJ,CAChBlK,GAAG,EACHiK,WAAW,EACXpiB,WAAW,CAAC,EAAE,GACdN,MAAM,YACNU,SAAS,CAAC,EAAE,SAqoBQkiB,OAAQtlB,KAAKJ,MAAMoQ,IACnBgL,UAAW,CACTnX,WAAW,WACXC,eAAe,cAEjByhB,KAAMvlB,KAAKD,cAAcgkB,gBAAgB,CAAC,QAAQ,SAAS/jB,KAAKE,MAAM6E,cAAc,wBAA0B,IAAM,UAI1HyK,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPsJ,GAAI,CAAC,EAAE,GACPxjB,MAAO,CAAC,EAAE,KACVuZ,cAAe,UAEftL,EAAApO,EAAAC,cAAC2jB,EAAA,EAAD,CACE/H,MAAO,UACP/S,MAAO,cAEPsF,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZiX,cAAe,CAAC,SAAS,QAEzBtL,EAAApO,EAAAC,cAACmkB,EAAA,EAAD,CACElY,UAAW,KACXmY,QAAS,QACTC,SAAU,QACV5hB,eAAgB,aAChBvC,MAAO,GAEPiO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEwK,WAAY,EACZpiB,WAAY,CAAC,EAAE,GACfN,MAAO,YACPU,SAAU,CAAC,EAAE,IAEZpD,KAAKJ,MAAMgV,IACZpF,EAAApO,EAAAC,cAACuZ,EAAA,EAAKhX,KAAN,CAAWlB,MAAO,YAAaM,WAAY,EAAGI,SAAU,CAAC,MAAM,QAA/D,UAMVoM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPsJ,GAAI,CAAC,EAAE,GACPxjB,MAAO,CAAC,EAAE,KACVuZ,cAAe,UAEftL,EAAApO,EAAAC,cAAC2jB,EAAA,EAAD,CACE/H,MAAO,8BACP/S,MAAO,cAGLlK,KAAKJ,MAAM0e,QAAUhK,MAAMtU,KAAKJ,MAAM0e,OACpC9O,EAAApO,EAAAC,cAACmkB,EAAA,EAAD,CACElY,UAAW,KACXmY,QAAS,QACTC,SAAU,QACV5hB,eAAgB,cAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEwK,WAAY,EACZhiB,SAAU,CAAC,EAAE,GACbJ,WAAY,CAAC,EAAE,GACfN,MAAO,aAEN1C,KAAKJ,MAAM0e,MACZ9O,EAAApO,EAAAC,cAACuZ,EAAA,EAAKhX,KAAN,CAAWlB,MAAO,YAAaM,WAAY,EAAGI,SAAU,CAAC,MAAM,QAA/D,OAIJoM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEwK,WAAY,EACZhiB,SAAU,CAAC,EAAE,GACbJ,WAAY,CAAC,EAAE,GACfN,MAAO,aAEN1C,KAAKJ,MAAM0e,SAMtB9O,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPsJ,GAAI,CAAC,EAAE,GACPxjB,MAAO,CAAC,EAAE,KACVuZ,cAAe,UAEftL,EAAApO,EAAAC,cAAC2jB,EAAA,EAAD,CACE9a,MAAO,IACP+S,MAAO,aACPtY,MAAO3E,KAAKJ,MAAM4e,WAAWrO,gBA+BrCX,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEgK,MAAO,yBACP0I,YAAavB,EACblR,UAAW,CACTuI,GAAG,CAAC,EAAE,KAGRjM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAMvL,GAAG,cAAc9N,MAAO,EAAGka,GAAI,GACnCjM,EAAApO,EAAAC,cAACukB,EAADniB,OAAAC,OAAA,CACE4P,OAAS,KACLtT,KAAKJ,MAFX,CAGEyY,SAAU,cACVxV,MAAO7C,KAAKE,MAAM2C,MAClBM,SAAUnD,KAAKE,MAAMiD,SACrB0iB,UAAW7lB,KAAKE,MAAM2lB,UACtBjY,UAAW5N,KAAKE,MAAM0N,UACtBzI,WAAYnF,KAAKJ,MAAMuF,WACvBgD,YAAanI,KAAKJ,MAAMuI,YACxBpD,cAAe/E,KAAKE,MAAM6E,cAC1BK,sBAAuBpF,KAAKJ,MAAMwF,sBAClCyC,UAAW7H,KAAKJ,MAAMuI,cAAgBnI,KAAKJ,MAAM6iB,cAAgB,WAAa,aAKpFjT,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT4S,GAAG,EACHrK,GAAG,CAAC,EAAE,KAGRjM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEE,cAAe,CAAC,SAAS,OACzBhX,eAAgB,iBAGd9D,KAAKJ,MAAMuI,cAAgBnI,KAAKJ,MAAM6iB,eACtCjT,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEmL,GAAI,EACJxkB,MAAO,CAAC,EAAE,EAAE,GACZ8N,GAAI,mBACJyL,cAAe,SACfjX,WAAY,aACZC,eAAgB,cAEhB0L,EAAApO,EAAAC,cAAC2kB,EAAA,EAADviB,OAAAC,OAAA,CACE4P,OAAQ,KACJtT,KAAKE,MAFX,CAGEmY,SAAU,sBAEZ7I,EAAApO,EAAAC,cAAC4kB,EACKjmB,KAAKE,QAIfsP,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPpM,GAAI,YACJ6W,GAAI,CAAC,EAAElmB,KAAKJ,MAAMuI,cAAgBnI,KAAKJ,MAAM6iB,cAAgB,EAAI,GACjElhB,MAAO,CAAC,EAAGvB,KAAKJ,MAAMuI,cAAgBnI,KAAKJ,MAAM6iB,cAAgB,EAAE,EAAI,IAEvEjT,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAM/W,WAAY,aAAcC,eAAgB,aAAcgX,cAAe,SAAUvZ,MAAO,GAC5FiO,EAAApO,EAAAC,cAACuZ,EAAA,EAAQuL,GAAT,CACE1K,GAAI,EACJN,GAAI,EACJK,GAAI,CAAC,EAAE,GACPxY,WAAY,EACZI,SAAU,CAAC,EAAE,GACbF,UAAW,OACXR,MAAO,YACP0iB,WAAY,WARd,yBAYA5V,EAAApO,EAAAC,cAACukB,EAADniB,OAAAC,OAAA,CACE4P,OAAQ,KACJtT,KAAKJ,MAFX,CAGEiI,UAAW,MACXwQ,SAAU,YACVxV,MAAO7C,KAAKE,MAAM2C,MAClBM,SAAUnD,KAAKE,MAAMiD,SACrByK,UAAW5N,KAAKE,MAAM0N,UACtBiY,UAAW7lB,KAAKE,MAAM2lB,UACtB1gB,WAAYnF,KAAKJ,MAAMuF,WACvBgD,YAAanI,KAAKJ,MAAMuI,YACxB/C,sBAAuBpF,KAAKJ,MAAMwF,6BAO5CoK,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE2H,SAAU,YAEV/S,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACP8N,GAAI,qBACJvL,eAAgB,YAEhB0L,EAAApO,EAAAC,cAAC+kB,EAAA,EAAD,CACEzK,YAAa,CACX0K,GAAG,GAELC,SAAU,YACV1K,SAAuC,IAA7B5b,KAAKJ,MAAM8e,cACrB7C,YAAc,SAAA5C,GAAC,OAAI2D,EAAKwF,eAAe,WAEzC5S,EAAApO,EAAAC,cAAC+kB,EAAA,EAAD,CACEE,SAAU,eACVzK,YAAc,SAAA5C,GAAC,OAAI2D,EAAKwF,eAAe,SACvCxG,SAAU5b,KAAKJ,MAAM8e,gBAAkB1e,KAAKJ,MAAM2e,eAGtD/O,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJlI,OAAQ,QACRiP,SAAU,WACVlT,GAAI,kBACJ9N,MAAO,CAAC,OAAO,QACfuC,eAAgB,aAChBiL,KAAM/O,KAAKJ,MAAMmf,mBACjBxc,MAAO,CACLgkB,WAAW,0BAGb/W,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACTmT,GAAG,EACH/S,OAAO,cACP/Q,MAAMvC,KAAKE,MAAMiD,SAAW,CAAC5B,MAAM,QAAU,CAACA,MAAM,UAGtDiO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACP8N,GAAG,aAEHG,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,EACJla,MAAO,EACPuZ,cAAe,SACfjX,WAAY,aACZC,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAQuL,GAAT,CACEhL,GAAI,EACJK,GAAI,EACJC,GAAI,EACJzY,WAAY,EACZI,SAAU,CAAC,EAAE,GACbF,UAAW,OACXR,MAAO,YACP0iB,WAAY,WARd,0BAYA5V,EAAApO,EAAAC,cAACukB,EAADniB,OAAAC,OAAA,CACE4P,OAAQ,KACJtT,KAAKJ,MAFX,CAGEiI,UAAW,MACXwQ,SAAU,YACVxV,MAAO7C,KAAKE,MAAM2C,MAClBM,SAAUnD,KAAKE,MAAMiD,SACrByK,UAAW5N,KAAKE,MAAM0N,UACtBiY,UAAW7lB,KAAKE,MAAM2lB,UACtB1gB,WAAYnF,KAAKJ,MAAMuF,WACvBgD,YAAanI,KAAKJ,MAAMuI,YACxB/C,sBAAuBpF,KAAKJ,MAAMwF,4BAK1CoK,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACTmT,GAAG,EACH/S,OAAO,cACP/Q,MAAMvC,KAAKE,MAAMiD,SAAW,CAAC5B,MAAM,QAAU,CAACA,MAAM,UAGtDiO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAMvL,GAAG,YAAY9N,MAAO,GAC1BiO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,EACJla,MAAO,EACPuZ,cAAe,SACfjX,WAAY,aACZC,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAQuL,GAAT,CACE1K,GAAI,EACJN,GAAI,EACJK,GAAI,EACJxY,WAAY,EACZI,SAAU,CAAC,EAAE,GACbF,UAAW,OACXR,MAAO,YACP0iB,WAAY,WARd,QAYA5V,EAAApO,EAAAC,cAACukB,EAADniB,OAAAC,OAAA,CACE4P,OAAQ,KACJtT,KAAKJ,MAFX,CAGEiI,UAAW,MACXwQ,SAAU,YACVxV,MAAO7C,KAAKE,MAAM2C,MAClBM,SAAUnD,KAAKE,MAAMiD,SACrByK,UAAW5N,KAAKE,MAAM0N,UACtBiY,UAAW7lB,KAAKE,MAAM2lB,UACtB1gB,WAAYnF,KAAKJ,MAAMuF,WACvBgD,YAAanI,KAAKJ,MAAMuI,YACxB/C,sBAAuBpF,KAAKJ,MAAMwF,4BAK1CoK,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACTmT,GAAG,EACH/S,OAAO,cACP/Q,MAAMvC,KAAKE,MAAMiD,SAAW,CAAC5B,MAAM,QAAU,CAACA,MAAM,SAEtD0b,MAAO,aACP0I,YAAa,iGACba,iBAAkB,CAChBrL,GAAG,GACHK,GAAG,KAGLhM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAMvL,GAAG,cAAc9N,MAAO,GAC5BiO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,EACJla,MAAO,EACPuZ,cAAe,SACfjX,WAAY,aACZC,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACukB,EAADniB,OAAAC,OAAA,CACE4P,OAAQ,KACJtT,KAAKJ,MAFX,CAGEiI,UAAW,QACXwQ,SAAU,cACVxV,MAAO7C,KAAKE,MAAM2C,MAClBM,SAAUnD,KAAKE,MAAMiD,SACrByK,UAAW5N,KAAKE,MAAM0N,UACtBiY,UAAW7lB,KAAKE,MAAM2lB,UACtB1gB,WAAYnF,KAAKJ,MAAMuF,WACvBgD,YAAanI,KAAKJ,MAAMuI,YACxB/C,sBAAuBpF,KAAKJ,MAAMwF,4BAK1CoK,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACTmT,GAAG,EACH/S,OAAO,cACP/Q,MAAMvC,KAAKE,MAAMiD,SAAW,CAAC5B,MAAM,QAAU,CAACA,MAAM,UAGtDiO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAMvL,GAAG,YAAY9N,MAAO,GAC1BiO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,EACJla,MAAO,EACPuZ,cAAe,SACfjX,WAAY,aACZC,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAQuL,GAAT,CACE1K,GAAI,EACJN,GAAI,EACJK,GAAI,EACJxY,WAAY,EACZI,SAAU,CAAC,EAAE,GACbF,UAAW,OACXR,MAAO,YACP0iB,WAAY,WARd,UAYA5V,EAAApO,EAAAC,cAACukB,EAADniB,OAAAC,OAAA,CACE4P,OAAQ,KACJtT,KAAKJ,MAFX,CAGEiI,UAAW,MACXwQ,SAAU,YACVxV,MAAO7C,KAAKE,MAAM2C,MAClBM,SAAUnD,KAAKE,MAAMiD,SACrByK,UAAW5N,KAAKE,MAAM0N,UACtBiY,UAAW7lB,KAAKE,MAAM2lB,UACtB1gB,WAAYnF,KAAKJ,MAAMuF,WACvBgD,YAAanI,KAAKJ,MAAMuI,YACxB/C,sBAAuBpF,KAAKJ,MAAMwF,+BA/hBhDoK,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZiX,cAAe,MACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT9C,EAAE,EACF7O,MAAM,CAAC,EAAE,MAGXiO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE/W,WAAY,SACZiX,cAAe,UAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE5W,KAAM,QACNtB,MAAO,WACP0O,KAAM,iBAER5B,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJpY,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,aAMalD,KAAKE,MAAM6E,cANxB,0BAohBVyK,EAAApO,EAAAC,cAAColB,EAADhjB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEyd,QAAS3d,KAAKJ,MAAM+d,QACpBC,QAAS5d,KAAKJ,MAAMge,QACpBnB,aAAczc,KAAKuf,aACnB1C,OAAQ7c,KAAKJ,MAAMqf,qBACnBzC,WAAY,SAAAvD,GAAC,OAAI2D,EAAKkD,mBAAkB,IACxC7D,UAAWjc,KAAKJ,MAAM8c,kBAAoB1c,KAAKJ,MAAM8c,kBAAkBnU,GAAK,KAC5E2T,QAASlc,KAAKJ,MAAM+c,gBAAkB3c,KAAKJ,MAAM+c,gBAAgBpU,GAAK,SAzhC5E,IAAMme,EAAa1mB,KAAKD,cAAcgkB,gBAAgB,CAAC,eACjDzO,EAAgB,GAChBqR,EAAiB3mB,KAAKD,cAAcgkB,gBAAgB,CAAC,QAAQ,cAQnE,OANAtgB,OAAO+B,KAAK0e,GAAatb,QAAQ,SAAA4R,GACb0J,EAAY1J,GAChB3G,SACZyB,EAAczL,KAAK2Q,KAIrBhL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,EACJla,MAAO,EACPuZ,cAAe,UAEftL,EAAApO,EAAAC,cAAC1B,EAAA,EAAD8D,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEE6D,YAAa,cAGbN,OAAO+B,KAAKkhB,GAAY5W,IAAI,SAAAmS,GAC1B,IAAM2E,EAAeF,EAAWzE,GAC1BlB,EAAkBnE,EAAK1c,MAAMO,oBAAoBwhB,GAEvD,IAAKlB,EACH,OAAO,EAIT,IAAM8F,EAAyB,GAC/BpjB,OAAO+B,KAAKub,GAAiBnY,QAAS,SAAA4R,GACpCuG,EAAgBvG,GAAOlV,UAAUsD,QAAS,SAAAyJ,GACpCwU,EAAuB3V,QAAQmB,EAAajB,MAAM,GACpDyV,EAAuBhd,KAAKwI,EAAajB,UAK/C,IAAM0V,EAAqBD,EAAuB/W,IAAK,SAAAsC,GACrD,OAAOuU,EAAevU,IACtB,IAEF,OACE5C,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,EACJla,MAAO,EACPuZ,cAAe,SACfhX,eAAgB,SAChB2O,IAAG,sBAAAC,OAAwBuP,IAE3BzS,EAAApO,EAAAC,cAAC0lB,EAAA,EAAD,CACEvL,GAAI,EACJC,GAAI,CAAC,EAAE,IAEPjM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEE,cAAe,MACfjX,WAAY,WACZC,eAAgB,UAEf8iB,EAAa3J,MAEZ2J,EAAaI,cACXxX,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEO,GAAI,EACJnY,WAAY,EACZI,SAAU,CAAC,EAAE,GACbV,MAAO,aAENkkB,EAAaI,gBAKxBxX,EAAApO,EAAAC,cAAC4lB,EAAA,EAADxjB,OAAAC,OAAA,CACE4R,cAAeA,EACfuG,YAAa,SAAC3b,GAAD,OAAW0c,EAAKoF,YAAYC,EAAS/hB,EAAMsa,QACxD0M,KAAM,CACJ,CACEjK,MAAM,WACN/c,MAAM,CACJqB,MAAM,CAAC,IAAK,MAEd4lB,OAAO,CACL,CACE/V,KAAK,OACLlR,MAAM,CACJmmB,GAAG,EACH/S,OAAO,CAAC,QAAQ,WAGpB,CACElC,KAAK,eAIX,CACE6L,MAAM,OACN/c,MAAM,CACJqB,MAAM,CAAC,IAAK,MAEd4lB,OAAO,CACL,CACE/V,KAAK,kBACLgW,QAAO,EACPC,YAAY,CACV9lB,MAAM,IAERgB,MAAM,CACJ+kB,SAAS,WAEXlP,YAAW,GAEb,CACEhH,KAAK,OACLlR,MAAM,CACJib,GAAG,GAELkM,YAAY,CACV9lB,MAAM,CAAC,EAAE,QAKjB,CACE0b,MAAM,MACNsK,KAAKvD,EACL9jB,MAAM,CACJqB,MAAO,CAAC,IAAK,MAEf8lB,YAAY,CACVvM,cAAc,SACdjX,WAAW,cAEbsjB,OAAO,CACL,CACE/V,KAAK,MACLoW,aAAY,GAEd,CACEpW,KAAK,mBACLgH,YAAW,EACXlY,MAAM,CACJwB,SAASkb,EAAK1c,MAAMiD,SAAW,EAAI,EACnCC,SAASwZ,EAAK1c,MAAMiD,SAAW,MAAQ,MAK/C,CACE8Z,MAAM,aACNsK,KAAK3K,EAAK7c,cAAcgkB,gBAAgB,CAAC,WAAW,cACpDqD,QAAO,EACPlnB,MAAM,CACJqB,MAAM,CAAC,IAAK,MAEd4lB,OAAO,CACL,CACE/V,KAAK,WAIX,CACE6L,MAAM,gBACNmK,QAAO,EACPlnB,MAAM,CACJqB,MAAO,KAET8lB,YAAY,CACV9lB,MAAM,EACNwjB,GAAG,CAAC,EAAE,IAERoC,OAAO,CACL,CACE/V,KAAK,WACL7O,MAAM,CACJ+kB,SAAS,cAKjB,CACErK,MAAM,GACN/c,MAAM,CACJqB,MAAM,CAAC,IAAK,MAEd8lB,YAAY,CACV9lB,MAAM,GAER4lB,OAAO,CACL,CACE/V,KAAK,SACLlH,MAAM0S,EAAK1c,MAAMiD,SAAW,OAAS,aACrCjD,MAAM,CACJqB,MAAM,EACN6B,SAAS,EACTJ,WAAW,EACXsQ,OAAO,OACP2K,aAAa,EACb3P,UAAU,KACV4P,UAAU,SACVla,KAAM4Y,EAAK1c,MAAMiD,SAAW,QAAU,SACtC0Y,YAAY,SAAC3b,GAAD,OAAW0c,EAAKoF,YAAYC,EAAS/hB,EAAMsa,cAM7DoC,EAAK1c,MAtIX,CAuIE8gB,iBAAkBiB,EAClBlB,gBAAiBA,MAGhBnE,EAAK1c,MAAMiD,UACVqM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJ3X,WAAY,SACZiX,cAAe,MACfhX,eAAgB,YAGdgjB,EAAmBpd,OAAQ,SAAA0G,GAAC,OAAIA,EAAE9F,SAASwF,IAAK,SAACM,EAAEoR,GAAH,OAC9ChS,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEyL,GAAI,EACJxiB,WAAY,SACZiX,cAAe,MACfrI,IAAG,UAAAC,OAAY8O,IAEfhS,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEyL,GAAI,EACJ9kB,MAAO,OACP+R,OAAQ,OACR2K,aAAc,MACdd,gBAAe,OAAAzK,OAAStC,EAAE1N,MAAM+kB,IAAI5X,KAAK,KAA1B,OAGjBL,EAAApO,EAAAC,cAACuZ,EAAA,EAAKhX,KAAN,CACER,SAAU,EACVV,MAAO,YAEN0N,EAAElG,cAYvB4Z,IAAqB9jB,KAAKJ,MAAMof,qBAC9BxP,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,EACJla,MAAO,EACPia,GAAI,CAAC,EAAE,GACP3X,WAAY,SACZiX,cAAe,MACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE8M,WAAY,UACZvJ,QAASne,KAAKgf,qBAAqBxB,KAAKxd,OAF1C,uBAOA8jB,GAAoB9jB,KAAKJ,MAAMof,sBACjCxP,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT9C,EAAE,EACFqL,GAAG,EACHla,MAAM,EACNia,GAAG,CAAC,EAAE,IAERmM,UAAU,EACV7C,eAAe,GAEftV,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE/W,WAAY,SACZiX,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE5X,WAAY,IACZN,MAAO,aACPQ,UAAW,SACXE,SAAU,CAAC,EAAE,SAJf,6FAQAoM,EAAApO,EAAAC,cAACumB,EAAA,EAADnkB,OAAAC,OAAA,CACE8H,OAAQ,UACRvH,UAAW4jB,IACXR,YAAa,CACX7L,GAAG,GAELsM,eAAgB,CACd9jB,KAAK,QACLka,UAAU,OACVvZ,MAAM,sBAERoe,OAAQ,GACRgF,aAAc,iBACdC,WAAY,qBACRhoB,KAAKE,OAETsP,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEE,cAAe,MACfjX,WAAY,SACZC,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEyL,GAAI,EACJjV,KAAM,OACNpN,KAAM,QACNtB,MAAO1C,KAAKE,MAAM2C,MAAMyI,OAAOC,aAAakO,OAAOwO,YAErDzY,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE5X,WAAY,IACZI,SAAU,OACVV,MAAO,YACPQ,UAAW,UAJb,oCA11BFe,sBCqJLikB,6MAjKbnoB,cAAgB,gFAGVC,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,4JAK9CF,KAAKI,iMAGkBE,EAAUC,mEACjCP,KAAKI,kJAGE,IAAAc,EAAAlB,KACDmoB,EAAenoB,KAAKE,MAAMkoB,oBAAsBpoB,KAAKE,MAAMkoB,mBAAmBC,aAAeroB,KAAKE,MAAMkoB,mBAAmBC,aAAe,KAC1IC,EAAwC,WAA7BtoB,KAAKE,MAAMqoB,cACtBC,EAAsD,qBAA9BxoB,KAAKE,MAAMsoB,gBAAiCxoB,KAAKE,MAAMsoB,eACrF,OACEhZ,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPuZ,cAAe,UAGb9a,KAAKE,MAAMkoB,mBACT5Y,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,GAGLinB,GACEhZ,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,GAEPiO,EAAApO,EAAAC,cAACijB,EAAA,EAAD7gB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEqkB,gBAAgB,EAChBphB,SAAUnD,KAAKE,MAAMiD,SACrBshB,KAAM,CAACzkB,KAAKE,MAAMkoB,mBAAmBle,OACrC4D,KAAM9N,KAAKE,MAAMuoB,gBAAgBve,MAAMiZ,cACvCtH,YAAc,SAAA5C,GAAC,OAAI/X,EAAKhB,MAAMskB,YAAYtjB,EAAKhB,MAAMuoB,gBAAgBC,YAK7ElZ,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEmD,GAAI,CAAC,EAAE,GACPjD,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAAC0lB,EAAA,EAAD,CACEtL,GAAI,GAEHzb,KAAKE,MAAMkoB,mBAAmBle,OAEjCsF,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE1X,UAAW,SACXylB,wBAAyB,CACvBC,OAAO5oB,KAAKE,MAAMkoB,mBAAmBb,SAK3C/X,EAAApO,EAAAC,cAAC8mB,EAAD1kB,OAAAC,OAAA,GACM1D,KAAKE,MACLF,KAAKE,MAAMkoB,mBAAmBS,YAFpC,CAGEC,UAAW9oB,KAAKE,MAAMkoB,mBAAmBloB,UAI7CsP,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEmD,GAAI,CAAC,EAAE,GACPjD,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAAC0lB,EAAA,EAAD,CACEtL,GAAI,GADN,SAKAjM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPgB,MAAO,CACLwmB,SAAS,QAEXjlB,eAAgBwkB,EAAW,SAAW,cAGtCA,EACE9Y,EAAApO,EAAAC,cAAC2nB,EAAA,EAAD,CACE9V,UAAW,CACT+V,SAAS,CAAC,EAAE,SAEdC,KAAM,aACNpb,KAAM,kGAEN9N,KAAKE,MAAMuoB,gBAAgBU,QAAQrZ,IAAK,SAACsZ,EAAKC,GAAN,OAC1C7Z,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACE6R,eAAe,EACfrS,IAAG,QAAAC,OAAU2W,GACbnW,UAAW,CACT9C,EAAE,CAAC,EAAE,GACLqL,GAAG,CAAC,EAAE,GACN4K,GAAG,CAAC,EAAE,MACN9jB,MAAM,CACJ+mB,KAAMpoB,EAAKhB,MAAMiD,SAAW,WAAa,WAE3CU,WAAW,SACXiX,cAAc,SACdhX,eAAe,UAEjB+X,YAAc,SAAA5C,GAAC,OAAI/X,EAAKhB,MAAMskB,YAAYtjB,EAAKhB,MAAMuoB,gBAAgBC,MAAM,IAAIU,EAAKV,SAEpFlZ,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExX,SAAU,CAAC,EAAE,GACbF,UAAW,UAEVkmB,EAAKlf,OAERsF,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE9W,eAAgB,UAGdslB,EAAKG,MACH/Z,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEmD,GAAI,CAAC,EAAE,GACPzK,OAAQ,QACRkW,IAAKJ,EAAKG,QAEVH,EAAKF,MACP1Z,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEmD,GAAI,CAAC,EAAE,GACP/Z,KAAM,MACNoN,KAAMgY,EAAKF,QAKnB1Z,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExX,SAAU,CAAC,EAAE,GACbF,UAAW,SACXylB,wBAAyB,CACvBC,OAAOQ,EAAK7B,qBApJhBtjB,gDCqpBLwlB,6MAnpBb7pB,MAAQ,CAEN8pB,iBAAiB,GACjBC,kBAAkB,KAClBC,qBAAqB,KACrBC,sBAAsB,KACtBC,sBAAsB,KACtBC,yBAAyB,KACzBC,0BAA0B,KAC1BC,6BAA6B,KAC7BC,6BAA6B,QAI/BnqB,cAAgB,OAChBoqB,aAAe,gFAGTnqB,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,OAG9CF,KAAKmqB,aAAenqB,KAAKD,cAAcqqB,uKAIvCpqB,KAAKI,8SAKCiqB,EAA0B,IACRrqB,KAAKE,MAAM6E,eAAiB/E,KAAKE,MAAM0H,YAEzDsY,EAAyC,SAAhClgB,KAAKE,MAAM8gB,0BAShBsJ,QAAQC,IAAI,CAEpBvqB,KAAKmqB,aAAaK,oBAAoBxqB,KAAKE,MAAMwa,QAAQ2P,GAAwB,GACjFrqB,KAAKD,cAAc0qB,yBAAyBzqB,KAAKE,MAAMwa,QAAQ2P,EAAwB,MACvFrqB,KAAKD,cAAc2qB,eAAe,MAAM1qB,KAAKE,MAAM6E,cAAc/E,KAAKE,MAAM0H,YAAY5H,KAAKE,MAAMwa,SAAQ,GAC3G1a,KAAKD,cAAc2qB,eAAe,mBAAmB1qB,KAAKE,MAAM6E,cAAc/E,KAAKE,MAAM0H,YAAY5H,KAAKE,MAAMwa,SAChH1a,KAAKD,cAAc2qB,eAAe,mBAAmB1qB,KAAKE,MAAM6E,cAAc/E,KAAKE,MAAM0H,YAAY5H,KAAKE,MAAMwa,qDAXhHsP,OACAJ,OACApV,OACAmW,OACA9V,iBAUiB7U,KAAKD,cAAc6qB,eAAe5qB,KAAKE,MAAM0H,YAAY8I,QAAQwP,EAAOyK,YAAvF9pB,YAEWb,KAAKD,cAAc6Q,MAAM/P,GAAQgqB,IAAI,KAClDhqB,EAAS2T,GAGLsV,EAAwBF,EAAuBnmB,OAAOgG,OAAOmgB,GAAsBpW,OAAQ,SAACsX,EAAWC,GAC3G,OAAOD,EAAWhqB,KAAKI,EAAKnB,cAAc6Q,MAAMma,KAChD/qB,KAAKD,cAAc6Q,MAAM,IAAM,KAE3BsZ,EAA+BN,EAAuBnmB,OAAO+B,KAAKokB,GAAsB9Z,IAAK,SAAAkb,GACjG,IAAMC,EAAUrB,EAAqBoB,GACrC,OAAIC,EAAQhX,GAAG,GACb,IAAAvB,OAAWuY,EAAQpmB,QAAQ,GAA3B,KAAA6N,OAAiCsY,GAE1B,OAERthB,OAAO,SAAAC,GAAC,OAAW,OAANA,IAAe,KA2BzB+f,EAAmB,CACvB,CACE1O,UAAU,CACRzZ,MAAM,CAAC,EAAE,MAEXrB,MAAM,CACJ+c,MAAM,UACNsK,KAAKvnB,KAAKD,cAAcgkB,gBAAgB,CAAC,WAAW,YACpDmH,SACE1b,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZyP,OAAQ,CAAC,OAAO,QAChBwH,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEwK,WAAY,EACZpiB,WAAY,CAAC,EAAE,GACfN,MAAO,YACPE,WAAY,UACZQ,SAAU,CAAC,QAAQ,SACnBulB,wBAAyB,CAAEC,OAAS/nB,EAASA,EAAOgE,QAAQ,GAAG,IAAM,cAM/E,CACEmW,UAAU,CACRzZ,MAAM,CAAC,EAAE,MAEXrB,MAAM,CACJ+c,MAAM,qBACNiO,SACE1b,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACP8N,GAAI,kBACJiE,OAAQ,CAAC,OAAO,QAChBwH,cAAe,UAEftL,EAAApO,EAAAC,cAAC8pB,EAAA,EAAD1nB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEkY,YAAY,EACZgT,UAAW,CACTha,KAAK,mBAEPiH,SAAU,kBACVmC,MAAOxa,KAAKE,MAAM6E,cAClB6C,YAAa5H,KAAKE,MAAM0H,gBAI9BsC,MAAM,KAGV,CACE8Q,UAAU,CACRzZ,MAAM,CAAC,EAAE,MAEXrB,MAAM,CACJ+c,MAAM,2BACNiO,SACE1b,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZyP,OAAQ,CAAC,OAAO,QAChBwH,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEwK,WAAY,EACZpiB,WAAY,CAAC,EAAE,GACfN,MAAO,YACPE,WAAY,UACZQ,SAAU,CAAC,QAAQ,SACnBulB,wBAAyB,CAAEC,OAAS/T,EAAOjQ,SAASiQ,GAAQ,WAQxE7U,KAAKiB,SAAS,CAEZyoB,mBAEAE,uBACAE,wBAEAE,4BACAE,uNAIqB5pB,EAAUC,mEACjCP,KAAKI,kJAKL,OACEoP,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPuZ,cAAe,UAGb9a,KAAKJ,MAAM8pB,iBAAiB3hB,OAAO,GACjCyH,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPka,GAAI,CAAC,EAAE,GACPD,GAAI,CAAC,EAAE,GACP3X,WAAY,SACZiX,cAAe,CAAC,SAAS,OACzBhX,eAAgB,iBAGd9D,KAAKJ,MAAM8pB,iBAAiB5Z,IAAI,SAACnG,EAAEnD,GAAH,OAC9BgJ,EAAApO,EAAAC,cAACuZ,EAAA,EAADnX,OAAAC,OAAA,GACMiG,EAAEqR,UADR,CAEEF,cAAe,SACfrI,IAAG,mBAAAC,OAAqBlM,KAExBgJ,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACTC,GAAG,CAAC,EAAE,GACNsI,GAAG,CAAC,EAAE,KAGRjM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZiX,cAAe,SACfhX,eAAgB,UAGd6F,EAAEzJ,MAAMgrB,SAAWvhB,EAAEzJ,MAAMgrB,SACzB1b,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEwK,WAAY,EACZpiB,WAAY,CAAC,EAAE,GACfN,MAAO,YACPE,WAAY,UACZQ,SAAU,CAAC,EAAE,SACbulB,wBAAyB,CAAEC,OAAQjf,EAAEzJ,MAAMyE,SAKjD6K,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJja,MAAO,EACPsC,WAAY,SACZC,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE5X,WAAY,EACZI,SAAU,CAAC,EAAE,GACbV,MAAO,YAENiH,EAAEzJ,MAAM+c,OAGTtT,EAAEzJ,MAAMqnB,MACN/X,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEyQ,UAAW,SACXC,QAAS3hB,EAAEzJ,MAAMqnB,MAEjB/X,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEO,GAAI,EACJ/J,KAAM,OACNpN,KAAM,MACNtB,MAAO,sBAYjC8M,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACTE,GAAG,EACHD,GAAG,IAGL3D,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACP4Z,GAAI,CAAC,EAAE,GACP9L,GAAI,kBAEJG,EAAApO,EAAAC,cAACkqB,EAAA,EAAD9nB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEsrB,YAAa,IACbnT,SAAU,iBACVoT,WAAYzrB,KAAKE,MAAM6E,cACvBuQ,cAAe,CAACtV,KAAKE,MAAM6E,eAC3B2mB,iBAAkB1rB,KAAKD,cAAc4rB,oBAAoB,MAAM,OAGnEnc,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPuZ,cAAe,CAAC,SAAS,QAEzBtL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPla,MAAO,CAAC,EAAE,EAAE,GACZsC,WAAY,SACZiX,cAAe,SACfhX,eAAgB,cAEhB0L,EAAApO,EAAAC,cAAC0lB,EAAA,EAAD,CACEtL,GAAI,EACJrY,SAAU,CAAC,EAAE,GACbwoB,UAAWC,IAAQC,IAHrB,aAOAtc,EAAApO,EAAAC,cAAC8pB,EAAA,EAAD1nB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEsa,MAAOxa,KAAKE,MAAM6E,cAClBqmB,UAAW,CACTha,KAAK,aACLlR,MAAM,CACJwB,SAAS,EACTqqB,aAAa,EACb/oB,WAAW,IACXI,SAAS,CAAC,QAAQ,SAClBV,MAAM1C,KAAKE,MAAM2C,MAAMyI,OAAOvI,QAC9BiY,UAAU,CACRlX,eAAe,gBAMzB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPla,MAAO,CAAC,EAAE,EAAE,GACZsC,WAAY,SACZiX,cAAe,SACfhX,eAAgB,cAEhB0L,EAAApO,EAAAC,cAAC0lB,EAAA,EAAD,CACEtL,GAAI,EACJrY,SAAU,CAAC,EAAE,GACbwoB,UAAWC,IAAQC,IAHrB,cAOAtc,EAAApO,EAAAC,cAAC8pB,EAAA,EAAD1nB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEsa,MAAOxa,KAAKE,MAAM6E,cAClBqmB,UAAW,CACTha,KAAK,2BACLlR,MAAM,CACJwB,SAAS,EACTqqB,aAAa,EACbxpB,MAAM,CACJS,WAAW,IACXN,MAAM1C,KAAKE,MAAM2C,MAAMyI,OAAOvI,QAC9BK,SAAUpD,KAAKE,MAAMiD,SAAW,QAAU,SAE5C6X,UAAU,CACRlX,eAAe,eAKvB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPia,GAAI,QAEJhM,EAAApO,EAAAC,cAAC8pB,EAAA,EAAD1nB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEsa,MAAOxa,KAAKE,MAAM6E,cAClBqmB,UAAW,CACTha,KAAK,eACLlR,MAAM,CACJkD,SAAS,EACTJ,WAAW,EACXN,MAAM,WACNsY,UAAU,CACRlX,eAAe,iBAO3B0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPla,MAAO,CAAC,EAAE,EAAE,GACZsC,WAAY,SACZiX,cAAe,SACfhX,eAAgB,cAEhB0L,EAAApO,EAAAC,cAAC0lB,EAAA,EAAD,CACEtL,GAAI,EACJrY,SAAU,CAAC,EAAE,GACbwoB,UAAWC,IAAQC,IAHrB,YAOAtc,EAAApO,EAAAC,cAAC8pB,EAAA,EAAD1nB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEsa,MAAOxa,KAAKE,MAAM6E,cAClBqmB,UAAW,CACTha,KAAK,kBACLlR,MAAM,CACJwB,SAAS,EACTqqB,aAAa,EACbxpB,MAAM,CACJS,WAAW,IACXI,SAASpD,KAAKE,MAAMiD,SAAW,QAAU,QACzCT,MAAM1C,KAAKE,MAAM2C,MAAMyI,OAAOvI,SAEhCiY,UAAU,CACRlX,eAAe,eAMrB9D,KAAKJ,MAAMsqB,8BAAgClqB,KAAKJ,MAAMsqB,6BAA6BniB,OAAO,GACxFyH,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZiX,cAAe,SACfhX,eAAgB,UAGd9D,KAAKJ,MAAMsqB,6BAA6Bpa,IAAI,SAACib,EAAgBiB,GAAjB,OAC1Cxc,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExX,SAAU,EACVgiB,WAAY,EACZpiB,WAAY,EACZN,MAAO,WACPQ,UAAW,SACXsY,GAAIwQ,EAAgB,EAAI,EACxBvZ,IAAG,YAAAC,OAAcsZ,IAEhBjB,OAqCfvb,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPla,MAAO,CAAC,EAAE,EAAE,GACZsC,WAAY,SACZiX,cAAe,SACfhX,eAAgB,cAEhB0L,EAAApO,EAAAC,cAAC0lB,EAAA,EAAD,CACEtL,GAAI,EACJrY,SAAU,CAAC,EAAE,GACbwoB,UAAWC,IAAQC,IAHrB,QAOAtc,EAAApO,EAAAC,cAAC8pB,EAAA,EAAD1nB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEsa,MAAOxa,KAAKE,MAAM6E,cAClBqmB,UAAW,CACTha,KAAK,cACLlR,MAAM,CACJwB,SAAS,EACTqqB,aAAa,EACbxpB,MAAM,CACJS,WAAW,IACXI,SAASpD,KAAKE,MAAMiD,SAAW,QAAU,QACzCT,MAAM1C,KAAKE,MAAM2C,MAAMyI,OAAOvI,SAEhCiY,UAAU,CACRlX,eAAe,gBAMzB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPla,MAAO,CAAC,EAAE,EAAE,GACZsC,WAAY,SACZiX,cAAe,SACfhX,eAAgB,cAEhB0L,EAAApO,EAAAC,cAAC0lB,EAAA,EAAD,CACEtL,GAAI,EACJrY,SAAU,CAAC,EAAE,GACbwoB,UAAWC,IAAQC,IAHrB,eAOAtc,EAAApO,EAAAC,cAAC8pB,EAAA,EAAD1nB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEsa,MAAOxa,KAAKE,MAAM6E,cAClBqmB,UAAW,CACTha,KAAK,MACLlR,MAAM,CACJwB,SAAS,EACTsB,WAAW,IACXI,SAAS,CAAC,QAAQ,SAClBV,MAAM1C,KAAKE,MAAM2C,MAAMyI,OAAOvI,QAC9BiY,UAAU,CACRlX,eAAe,eAMrB9D,KAAKJ,MAAMoqB,2BACTxa,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZiX,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJpY,SAAU,EACVgiB,WAAY,EACZpiB,WAAY,EACZN,MAAO,WACPQ,UAAW,UAEVlD,KAAKJ,MAAMoqB,0BAA0BnlB,QAAQ,GARhD,IAQqD7E,KAAKmqB,aAAa8B,UARvE,IAQmFjsB,KAAKmqB,aAAaviB,YAAYskB,yBA4DzH1c,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPla,MAAO,CAAC,EAAE,EAAE,GACZsC,WAAY,SACZiX,cAAe,SACfhX,eAAgB,cAEhB0L,EAAApO,EAAAC,cAAC0lB,EAAA,EAAD,CACEtL,GAAI,EACJrY,SAAU,CAAC,EAAE,GACbwoB,UAAWC,IAAQC,IAHrB,cAOAtc,EAAApO,EAAAC,cAAC8pB,EAAA,EAAD1nB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEsa,MAAOxa,KAAKE,MAAM6E,cAClBqmB,UAAW,CACTha,KAAK,QACLlR,MAAM,CACJwB,SAAS,EACTsB,WAAW,IACXI,SAAS,CAAC,QAAQ,SAClBV,MAAM1C,KAAKE,MAAM2C,MAAMyI,OAAOvI,QAC9BiY,UAAU,CACRlX,eAAe,0BAxoBTG,wECmvBbkoB,8MA7uBbvsB,MAAQ,CACN6Y,WAAW,CACTE,OAAO,KACPH,SAAQ,GAEV4T,WAAW,KACXC,YAAY,GACZzkB,YAAY,KACZ0kB,cAAc,KACdvnB,cAAc,KACdgc,gBAAgB,KAChBwL,gBAAe,EACfC,iBAAgB,EAChBC,kBAAiB,EACjBC,iBAAiB,KACjBC,kBAAkB,KAClBC,kBAAkB,KAClBC,kBAAkB,KAClBC,mBAAmB,KACnBC,oBAAoB,KACpBC,qBAAoB,EACpBC,0BAA0B,QAI5BltB,cAAgB,OAqBhBmtB,oBAAsB,SAACF,GACrBloB,EAAK7D,SAAS,CACZ+rB,2BA8EJG,oBAAsB,WAAiB,IAAhBC,EAAgBvV,UAAA9P,OAAA,QAAAsJ,IAAAwG,UAAA,GAAAA,UAAA,GAAT,KAEvBuV,IACHA,EAAStoB,EAAKlF,MAAMwsB,YAGtB,IAAIG,EAGFA,GAAkBa,GAAUA,EAAOnZ,GAAGnP,EAAKlF,MAAMitB,mBAKnD/nB,EAAK7D,SAAS,CACZsrB,sBAsKJc,iBAAmB,SAACpU,GAClB,IAAMmT,EAAanT,EAAEoD,OAAO1X,MAAMoD,SAAWuM,MAAM2E,EAAEoD,OAAO1X,OAASG,EAAK/E,cAAc6Q,MAAMqI,EAAEoD,OAAO1X,OAASG,EAAK/E,cAAc6Q,MAAM,GACzI9L,EAAKqoB,oBAAoBf,GAIzBtnB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5B6rB,aACAW,oBAJ0B,WAe9BO,uBAAyB,SAACP,GACxBjoB,EAAK7D,SAAS,CACZ8rB,2BAIJQ,eAAiB,SAAClB,GAChBvnB,EAAK7D,SAAS,CACZorB,4FAlTErsB,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,mKAK9CF,KAAKI,qBACCJ,KAAKwtB,wJAIXxtB,KAAKiB,SAAS,CACZurB,iBAAgB,+LAUIiB,iCAAa,MAC7BrB,EAAapsB,KAAKJ,MAAMwsB,WAAapsB,KAAKD,cAAc6Q,MAAM5Q,KAAKJ,MAAMwsB,YAAc,QAE1EA,EAAWvB,IAAI,6CACzB,aAGH6C,EAAmB1tB,KAAKD,cAAc4tB,qBAAqBvB,EAAWpsB,KAAKJ,MAAM+sB,kBAAkBjrB,UAErGksB,EAAmB,KACnBd,EAAqB,KACrBe,EAAyB,MACzB7tB,KAAKJ,MAAMotB,sDAIH1C,QAAQC,IAAI,CACpBvqB,KAAKD,cAAc+tB,sBAAsB9tB,KAAKE,MAAMwa,QAAQgT,GAAiB,GAC7E1tB,KAAKD,cAAcguB,0BAA0B/tB,KAAKE,MAAMwa,QAAQgT,gDAJhEZ,OACAe,iBAKuB7tB,KAAKD,cAAciuB,iBAAiBhuB,KAAKJ,MAAMgI,YAAYsM,KAAKsG,MAAMkT,GAAiB,EAAMG,WAAtHD,kDAEyB5tB,KAAKD,cAAciuB,iBAAiBhuB,KAAKJ,MAAMgI,YAAYsM,KAAKsG,MAAMkT,GAAiB,kBAAhHE,mBAC8B5tB,KAAKD,cAAckuB,6BAA3CC,SACAC,EAAoB/B,EAAWrrB,MAAMmtB,GAAiB9kB,MAAMgjB,EAAWrrB,MAAM6sB,EAAiB7sB,MAAM,KAAKD,KAAKd,KAAKJ,MAAMysB,aAAersB,KAAKD,cAAc6Q,MAAM,IAAI5P,IAAI,QAC/K8rB,EAAqB,IACF9sB,KAAKJ,MAAMmF,eAAiBopB,iBAG7CP,IACFA,EAAmBA,EAAiB7sB,MAAM,MAG5Cf,KAAKiB,SAAS,CACZ2sB,mBACAd,qBACAe,2BAIED,GAAoBH,IACtBG,EAAmBA,EAAiB9sB,KAAK2sB,sBAGpCG,yLAGgBttB,EAAUC,kFACjCP,KAAKI,cAEgBE,EAAUsH,YAAYsM,KAAKsG,QAAUxa,KAAKE,MAAM0H,YAAYsM,KAAKsG,uCAE9Exa,KAAKwtB,mBAGPY,EAA6B7tB,EAAUysB,sBAAwBhtB,KAAKJ,MAAMotB,qBAC7ChtB,KAAKJ,MAAMmtB,sBAAwBxsB,EAAUwsB,qBAC9CqB,IAChCpuB,KAAKquB,gBAGDC,EAAe/tB,EAAU6rB,aAAepsB,KAAKJ,MAAMwsB,WACnDmC,EAAqBvsB,WAAWzB,EAAU8rB,eAAiBrqB,WAAWhC,KAAKJ,MAAMysB,aACjFmC,EAAqB9tB,KAAKC,UAAUJ,EAAUqH,eAAiBlH,KAAKC,UAAUX,KAAKJ,MAAMgI,cAC3F0mB,GAAgBE,GAAsBD,IACxCvuB,KAAKyuB,oBAGsBluB,EAAUwE,gBAAkB/E,KAAKJ,MAAMmF,eAElE/E,KAAK0uB,wKAwBP,GAAuC,OAAnC1uB,KAAKJ,MAAMmtB,oBACb,OAAO,EAGT,IACIX,EADEuC,EAAqB3uB,KAAKD,cAAc6Q,MAAM5Q,KAAKJ,MAAMmtB,qBAAqB/rB,IAAI,KAIxForB,EAAapsB,KAAKJ,MAAMitB,kBAAoB7sB,KAAKD,cAAc6Q,MAAM5Q,KAAKJ,MAAMitB,mBAAmB9rB,MAAM4tB,GAAsB,KAK/H3uB,KAAKmtB,oBAAoBf,GAEzBpsB,KAAKiB,SAAS,CACZmrB,8DAImBrnB,GACrB/E,KAAKiB,SAAS,CACZ8D,sLAKI6pB,EAAc5uB,KAAKD,cAAcgkB,gBAAgB,CAAC,UAClDnc,EAAc5H,KAAKJ,MAAMmhB,gBAAgB/gB,KAAKJ,MAAMmF,eACpD2nB,EAAmBkC,EAAY7N,gBAAgBnZ,EAAYsM,KAAKsG,OACtExa,KAAKiB,SAAS,CACZ2G,cACA8kB,iTAKkDpC,QAAQC,IAAI,CAC9DvqB,KAAKD,cAAc8uB,uBACnB7uB,KAAKD,cAAc+uB,mEAFdnC,OAAkBC,gBASftC,QAAQC,IAAI,CACpBvqB,KAAKD,cAAckuB,qBACnBjuB,KAAKD,cAAcgvB,qBAAqB/uB,KAAKE,MAAMwa,SACnD1a,KAAKD,cAAcivB,6BAA6BhvB,KAAKE,MAAMwa,8CAN3DwT,OACArB,OACAI,OAOIX,EAAgB,GAChB6B,EAAoBtB,EAAoBA,EAAkB9rB,MAAMmtB,GAAmBluB,KAAKD,cAAc6Q,MAAM,GAE5GmQ,EAAkB/gB,KAAKD,cAAckvB,0BACrClqB,EAAgBtB,OAAO+B,KAAKub,GAAiB,GAEnD/gB,KAAKiB,SAAS,CACZ8D,gBACAunB,gBACA4B,kBACAnN,kBACA4L,oBACAC,oBACAC,oBACAsB,oBACAlB,8SAMGjtB,KAAKJ,MAAMitB,4DACP,iBAGHqC,EAAiB,SAAC7V,EAAGC,GACzB,IAAM6V,EAA4B,YAAd9V,EAAGI,OAGjBF,EAAY,CAChBC,WAAYH,EAAGI,OACfC,cAAa,cACbC,YAAazY,EAAKhB,MAAM6E,cACxBqqB,WAAYluB,EAAKtB,MAAMitB,kBAAkBhoB,WAGvCyU,IACFC,EAAUC,WAAatY,EAAKnB,cAAc6Z,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUE,SACrBvY,EAAKnB,cAAc8Z,yBAAyBN,GAG9CrY,EAAKD,SAAS,SAACV,GAAD,MAAgB,CAC5BkY,WAAY,CACVE,OAAO,KACPH,SAAQ,MAI6B,oBAA9BtX,EAAKhB,MAAMgvB,gBAAiCC,GACrDjuB,EAAKhB,MAAMgvB,eAAe7V,IAIxBgW,EAAwB,SAAChW,GAC7B,IAAMV,EAASU,EAAGiB,gBAClBpZ,EAAKD,SAAS,SAACV,GAAD,MAAgB,CAC5BkY,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADL,CAERE,eAKAoP,EAAe/nB,KAAKJ,MAAMgtB,kBAAkBxb,cACnBpR,KAAKyuB,kBAAkBzuB,KAAKJ,MAAMysB,uBAA3DuB,SACAH,EAAeztB,KAAKD,cAAc6Q,MAAM5Q,KAAKJ,MAAMysB,aAAarrB,IAAI,KACpEorB,EAAapsB,KAAKJ,MAAMwsB,WAAapsB,KAAKD,cAAc6Q,MAAM5Q,KAAKJ,MAAMwsB,YAAc,KAEvFkD,EAAUtvB,KAAKD,cAAc4tB,qBAAqBvB,EAAWpsB,KAAKJ,MAAM+sB,kBAAkBjrB,WAE5F1B,KAAKJ,MAAMotB,yCACOhtB,KAAKJ,MAAM6sB,mDAAyBzsB,KAAKD,cAAc+tB,sBAAsB9tB,KAAKE,MAAMwa,QAAQ4U,GAAQ,GAAM,gEAActvB,KAAKD,cAAcguB,0BAA0B/tB,KAAKE,MAAMwa,QAAQ4U,EAAQ7B,+BAAlN8B,OACNC,QAAQC,IAAI,mBAAmBH,EAAQnf,WAAWof,GAClDvvB,KAAKE,MAAMqa,0BAA0BwN,EAAc,mBAAoB,CAACuH,EAASC,EAAavvB,KAAKJ,MAAM6sB,kBAAmB,KAAMyC,EAAgBG,kCAE5IK,EAAa1vB,KAAKJ,MAAM8sB,iBAAiBiD,gBAAgBC,oBACjC5vB,KAAKD,cAAckuB,6BAA3CC,SACA2B,EAAa7vB,KAAKD,cAAc4tB,qBAAqBvB,EAAWrrB,MAAMmtB,GAAiB9kB,MAAMgjB,EAAWrrB,MAAM6sB,EAAiB5sB,IAAI,OAAOhB,KAAKJ,MAAMgI,YAAYlG,UAKvK8tB,QAAQC,IAAI,4BAA4BH,EAASI,EAAYG,GAG7D7vB,KAAKE,MAAMqa,0BAA0BwN,EAAc,4BAA6B,CAACuH,EAASI,EAAYG,EAAY7vB,KAAKJ,MAAM6sB,kBAAmB,KAAMyC,EAAgBG,WAGxKrvB,KAAKiB,SAAS,SAACV,GAAD,MAAgB,CAC5BkY,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADL,CAERD,SAAQ,8PAMZxY,KAAKiB,SAAS,CACZwX,WAAY,CACVE,OAAO,KACPH,SAAQ,wJAkBZ,OAAuC,OAAnCxY,KAAKJ,MAAMmtB,qBAGR/sB,KAAKD,cAAc6Q,MAAM5Q,KAAKJ,MAAMmtB,qBAAqB/rB,IAAI,sCAgB7D,IAAA4b,EAAA5c,KAED8vB,GAAgB9vB,KAAKJ,MAAM2sB,gBAAkBvsB,KAAKJ,MAAMguB,iBACxDmC,EAAiB/vB,KAAKD,cAAcgkB,gBAAgB,CAAC,QAAQ,eAAe,UAElF,OACEvU,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZiX,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,CAAC,EAAE,KACVsC,WAAY,UACZiX,cAAe,SACfhX,eAAgB,UAGb9D,KAAKJ,MAAMitB,kBA0BR7sB,KAAKJ,MAAM6Y,WAAWD,QACxBhJ,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT9C,EAAE,EACFoL,GAAG,IAGLhM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEE,cAAe,UAEftL,EAAApO,EAAAC,cAAC+Z,EAAA,EAAD,CACEoI,KAAMxjB,KAAKE,MAAMsjB,KACjBjI,KAAMvb,KAAKJ,MAAM6Y,WAAWE,OAC5B2C,WAAU,+BACV0U,kBAAmBhwB,KAAKgwB,kBAAkBxS,KAAKxd,MAC/Cqb,SAAWrb,KAAKE,MAAMmb,SAAWrb,KAAKE,MAAMmb,SAAW,0BAK7D7L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPuZ,cAAe,UAEftL,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT9C,EAAE,EACFqL,GAAG,IAGLjM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE/W,WAAY,SACZiX,cAAe,UAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE5W,KAAM,QACNtB,MAAO,WACP0O,KAAM,eAER5B,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJpY,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,uGAQAsM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJ3X,WAAY,SACZiX,cAAe,OAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEyC,UAAU,EACVnT,MAAK,0BACL+lB,QAASjwB,KAAKJ,MAAMotB,oBACpB1P,SAAW,SAAArE,GAAC,OAAI2D,EAAKsQ,oBAAoBjU,EAAEoD,OAAO4T,YAEpDzgB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEyQ,UAAW,MACXC,QAAO,yCAAA5Y,OAA2CjP,OAAO+B,KAAKxF,KAAKJ,MAAMmhB,iBAAiBlR,KAAK,MAAxF,kEAEPL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE5W,KAAM,MACNtB,MAAO,YACP0O,KAAM,qBAObpR,KAAKJ,MAAMotB,qBACVxd,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,EACJla,MAAO,GAGLvB,KAAKJ,MAAMgI,aACT4H,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,GAEPiO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,GADN,6BAKAjM,EAAApO,EAAAC,cAACwjB,EAAA,EAADphB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEmP,GAAI,aACJ6gB,aAAa,EACbtoB,YAAa5H,KAAKJ,MAAMgI,YACxB7C,cAAe/E,KAAKJ,MAAMmF,cAC1Bgc,gBAAiB/gB,KAAKJ,MAAMmhB,gBAC5BzD,SAAUtd,KAAKmwB,uBAAuB3S,KAAKxd,WAQvDA,KAAKJ,MAAMktB,qBAAuB9sB,KAAKJ,MAAM2sB,gBAC3C/c,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACTsI,GAAG,EACHC,GAAG,EACHtI,GAAG,EACHC,GAAG,IAGL5D,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE/W,WAAY,SACZiX,cAAe,UAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJpY,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,qBAQAsM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJja,MAAO,EACP+M,UAAW,EACX/L,MAAO,CACLwmB,SAAS,QAEXllB,WAAY,SACZC,eAAgB,UAGZL,OAAO+B,KAAKxF,KAAKJ,MAAMktB,oBAAoBhd,IAAK,SAAA0K,GAC9C,IAAMyQ,EAAUrO,EAAKhd,MAAMktB,mBAAmBtS,GAC9C,OACEhL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,EACJuC,GAAI,EACJzc,MAAO,OACPuZ,cAAe,MACfrI,IAAG,gBAAAC,OAAkB8H,GACrB1W,eAAgB,cAEhB0L,EAAApO,EAAAC,cAAC8pB,EAAA,EAAD,CACE3Q,MAAOA,EACP5S,YAAa,CACX4S,MAAMA,GAER4Q,UAAW,CACTha,KAAK,OACLlR,MAAM,CACJmmB,GAAG,EACH9kB,MAAM,CAAC,QAAQ,SACf+R,OAAO,CAAC,QAAQ,aAItB9D,EAAApO,EAAAC,cAAC6jB,EAAA,EAAD,CACE/J,GAAI,EACJ/X,SAAU,CAAC,EAAE,GACbJ,WAAY,IACZ+oB,aAAc,EACdrpB,MAAO,WACP4iB,OAAQ2F,EAAQ9a,mBAYpCnQ,KAAKJ,MAAM4sB,iBAAmBsD,GAC5BtgB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,EACJla,MAAO,GAEPiO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE/W,WAAY,SACZiX,cAAe,OAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,6BAGApL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEyQ,UAAW,MACXC,QAAO,yDAEP9b,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEO,GAAI,EACJnX,KAAM,MACNtB,MAAO,YACP0O,KAAM,kBAIZ5B,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJ3X,WAAY,SACZiX,cAAe,MACfhX,eAAgB,iBAGd,CAAC,GAAI,GAAI,EAAE,GAAGgM,IAAK,SAAAsgB,GAAQ,OACzB5gB,EAAApO,EAAAC,cAACgvB,GAAA,EAAD,CACEnd,UAAW,CACT9C,EAAE,GAEJ8K,UAAW,CACT9X,SAAS,GAEXktB,WAAYF,EACZ3d,IAAG,YAAAC,OAAc0d,GACjBG,YAAa,kBAAI3T,EAAK2Q,eAAe6C,IACrCzI,SAAU/K,EAAKhd,MAAMysB,cAAgBrqB,WAAWouB,SAQ9D5gB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,EACJla,MAAO,EACPuZ,cAAe,UAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,EACJ5X,WAAY,SACZiX,cAAe,MACfhX,eAAgB,YAGdgsB,GACEtgB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACP0nB,SAAU,MACVplB,WAAY,SACZiX,cAAe,OAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExX,SAAU,EACVJ,WAAY,EACZE,UAAW,QACXX,MAAO,CACLI,WAAW,UAEbD,MAAQV,WAAWhC,KAAKJ,MAAMguB,iBAAiB/oB,QAAQ,IAAI,EAAI7E,KAAKE,MAAM2C,MAAMyI,OAAOC,aAAakO,OAAO+W,OAASxwB,KAAKE,MAAM2C,MAAMyI,OAAOC,aAAakO,OAAOwO,WAGvG,IAAvDjmB,WAAWhC,KAAKJ,MAAMguB,iBAAiB/oB,QAAQ,IAC7C,cADF,GAAA6N,OAEM1S,KAAKJ,MAAMguB,iBAAiB3Z,GAAG,GAAK,aAAe,UAFzD,KAAAvB,OAEuE1S,KAAKJ,MAAMguB,iBAAiBpkB,MAAM3E,QAAQ,GAFjH,MAKJ2K,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEyQ,UAAW,MACXC,QAAUtrB,KAAKJ,MAAMotB,oBAAX,yCAAAta,OAA0EjP,OAAO+B,KAAKxF,KAAKJ,MAAMmhB,iBAAiBlR,KAAK,MAAvH,iEAA8L7P,KAAKJ,MAAMguB,iBAAiB3Z,GAAG,GAAK,uHAAyH,kHAErWzE,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEO,GAAI,EACJnX,KAAM,MACNtB,MAAO,YACP0O,KAAM,kBAIPpR,KAAKJ,MAAMotB,qBACVxd,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEO,GAAI,EACJzY,MAAO,YACPglB,WAAY,UACZvJ,QAASne,KAAKwsB,gBAAgBhP,KAAKxd,OAJrC,WAYVwP,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACP0nB,SAAU,MACVplB,WAAY,SACZiX,cAAe,MACfhX,eAAgB,YAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExX,SAAU,EACVJ,WAAY,EACZN,MAAO,YACPQ,UAAW,QACXwkB,WAAY,YACZvJ,QAAU,SAAClF,GAAD,OAAO2D,EAAK0Q,uBAAuB,MAC7C/qB,MAAO,CACL0mB,SAAS,OACT3B,SAAS,SACT3kB,WAAW,SACX8tB,aAAa,aAGdzwB,KAAKJ,MAAMitB,kBAAkBhoB,QAAQ7E,KAAKE,MAAMiD,SAAW,EAAI,GAdlE,IAcuE4sB,KAI3EvgB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE8V,IAAK,EACLnf,KAAM,SACN8L,UAAU,EACV/J,OAAQ,QACR2K,aAAc,EACdjb,WAAY,IACZsL,UAAW,kBACXqiB,YAAW,gBACXrT,SAAUtd,KAAKqtB,iBAAiB7P,KAAKxd,MACrC4wB,OAAM,aAAAle,OAAe1S,KAAKE,MAAM2C,MAAMyI,OAAOulB,SAC7ClsB,MAAiC,OAA1B3E,KAAKJ,MAAMwsB,WAAsBpsB,KAAKD,cAAc6Q,MAAM5Q,KAAKJ,MAAMwsB,YAAYvnB,UAAY,KAEtG2K,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJ3X,WAAY,SACZiX,cAAe,MACfhX,eAAgB,iBAGd,CAAC,GAAG,GAAG,GAAG,KAAKgM,IAAK,SAAAwgB,GAAU,OAC5B9gB,EAAApO,EAAAC,cAACgvB,GAAA,EAAD,CACEC,WAAYA,EACZ7d,IAAG,YAAAC,OAAc4d,GACjBC,YAAa,kBAAI3T,EAAK0Q,uBAAuBgD,IAC7C3I,SAAU/K,EAAKhd,MAAMmtB,sBAAwBnoB,SAAS0rB,SAMhE9gB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE9W,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACqa,EAAA,EAAD,CACEC,YAAa,CACXH,GAAG,EACHja,MAAM,CAAC,EAAE,IACTqa,SAAS5b,KAAKJ,MAAM2sB,gBAEtB1Q,YAAa7b,KAAK8L,OAAO0R,KAAKxd,OANhC,YAlXJwP,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT9C,EAAE,EACFoL,GAAG,EACHX,UAAU,QACVtY,MAAM,CACJE,QAAQ,OACRoB,WAAW,SACXC,eAAe,YAInB0L,EAAApO,EAAAC,cAAC0Z,EAAA,EAAD,CACEC,UAAW,CACTF,cAAc,OAEhBG,YAAa,CACXjX,KAAK,QAEPkX,UAAW,CACTC,GAAG,GAELrN,KAAM,qCA/XE7J,mCCsDX6sB,8MArDb/wB,cAAgB,OAqBhBgxB,MAAQ,WAENjsB,EAAK/E,cAAc8Z,yBAAyB,CAC1CH,cAAe,QACfC,YAAa,UACbH,WAAY1U,EAAK5E,MAAM8wB,SAGzB,IAAMC,EAAI3nB,KAAKonB,IAAI5W,OAAOoX,WAAW,KAE/BjhB,GAAK6J,OAAOoX,WAAWD,GAAG,EAEhCnX,OAAOqX,KAAP,yCAAAze,OAAqD5N,EAAK5E,MAAMkxB,OAAQ,SAAxE,8CAAA1e,OADU,IACV,UAAAA,OAAyIzC,EAAzI,WAAAyC,OAAoJue,EAApJ,YAAAve,OAHU,kFA5BN1S,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,oDAK9CF,KAAKI,wDAILJ,KAAKI,yDAILJ,KAAKI,6CAkBE,IAAAc,EAAAlB,KACP,OACIwP,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEqD,aAAc,EACdC,UAAW,UACXmT,cAAe,QACflT,QAAU,SAAAlF,GAAO/X,EAAK6vB,UAEtBvhB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAME,cAAe,MAAOjX,WAAY,SAAUC,eAAgB,UAChE0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAKiD,UAAWyT,KAAOltB,cACvBoL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAMlY,MAAO,QAASM,WAAY,EAAGmY,GAAI,GAAKnb,KAAKE,MAAM4N,KAAO9N,KAAKE,MAAM4N,KAAO,kBAjD7D7J,mCCyElBstB,8MApEbxxB,cAAgB,OAqBhByc,iDAAa,SAAApF,EAAO5L,GAAP,OAAAjE,EAAAnG,EAAAoG,KAAA,SAAAgQ,GAAA,cAAAA,EAAA9P,KAAA8P,EAAA7P,MAAA,WACW7C,EAAK/E,cAAcyxB,mBAEvBC,UAAUC,OAAOC,OAAO9d,QAH/B,CAAA2D,EAAA7P,KAAA,eAAA6P,EAAA7P,KAAA,EAIH7C,EAAK/E,cAAc8Z,yBAAyB,CAChDH,cAAe,QACfC,YAAanO,EACbgO,WAAY,eAPL,OAST1U,EAAK5E,MAAMsc,aATFhF,EAAA7P,KAAA,eAWT7C,EAAK5E,MAAMsc,aAXF,wBAAAhF,EAAAE,SAAAN,EAAApX,0IAnBPA,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,oDAK9CF,KAAKI,wDAILJ,KAAKI,yDAILJ,KAAKI,6CAkBE,IAAAc,EAAAlB,KACDoxB,EAAQtX,OAAO8X,OAAO5xB,KAAKE,MAAMkxB,OACjCS,EAAa,CAACjJ,OAAQ5oB,KAAKE,MAAM4N,MACvC,OACE0B,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAOiC,OAAQ7c,KAAKE,MAAM2c,QACxBrN,EAAApO,EAAAC,cAACyb,EAAA,EAAD,CAAWC,UAAW/c,KAAKE,MAAMsc,YAE7Bxc,KAAKE,MAAM4xB,iBACXtiB,EAAApO,EAAAC,cAAC0wB,GAAA3wB,EAAD,CACEmB,MAAO,CAAEggB,SAAU,QAAQyP,OAAS,MACpCC,KAAK,EACLC,SAAS,EACT3wB,MAAOuY,OAAOoX,WACd5d,OAAQwG,OAAOqY,cAGnB3iB,EAAApO,EAAAC,cAACyb,EAAA,EAAUE,OAAX,CAAkBC,MAAOjd,KAAKE,MAAM+c,MAAOiM,KAAMlpB,KAAKE,MAAMgpB,OAC5D1Z,EAAApO,EAAAC,cAACyb,EAAA,EAAUI,KAAX,KACE1N,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAMmD,GAAI,EAAGxc,MAAO,EAAGuZ,cAAe,SAAUkD,GAAI,QAClDxO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAMlY,MAAO,YAAaQ,UAAW,SAAUE,SAAU,EAAGqY,GAAI,EAAGkN,wBAAyBkJ,KAE9FriB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAMa,GAAI,EAAGX,cAAe,SAAUjX,WAAY,SAAUC,eAAgB,UAC1E0L,EAAApO,EAAAC,cAAC+wB,GAAD,CAAoBhB,MAAOA,EAAOtjB,KAAM,YAAakjB,OAAQ,eAC7DxhB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAMY,GAAI,EAAG2C,QAAU,SAAAlF,GAAC,OAAI/X,EAAKsb,WAAW,6BAA8BkL,WAAY,QAAtF,uCA9DWtJ,IAAMna,+BCq9FhBouB,8MA18FbzyB,MAAQ,CACN0yB,QAAQ,GACRC,SAAS,IACTnG,WAAW,GACX3T,WAAW,GACX+Z,SAAS,KACT3yB,SAAS,KACT4yB,WAAU,EACVpG,YAAY,GACZqG,YAAW,EACXlnB,OAAO,UACPmnB,YAAW,EACXC,YAAY,KACZC,eAAe,GACfC,aAAY,EACZC,cAAc,KACdjU,cAAc,KACdkU,eAAc,EACdC,eAAc,EACdC,eAAc,EACdC,gBAAe,EACfC,gBAAe,EACf7G,gBAAe,EACf8G,gBAAe,EACfC,iBAAiB,KACjBC,iBAAiB,KACjBC,iBAAiB,KACjBhH,iBAAgB,EAChBiH,iBAAgB,EAChBC,iBAAgB,EAChBC,oBAAoB,GACpB5G,oBAAoB,GACpB6G,oBAAoB,GACpBC,kBAAiB,EACjBC,kBAAiB,EACjBjH,kBAAkB,KAClBkH,oBAAmB,EACnBC,oBAAmB,EACnBC,oBAAoB,KACpBC,qBAAoB,EACpBC,qBAAoB,EACpBC,qBAAqB,KACrBC,qBAAqB,KACrBC,uBAAuB,GACvBC,uBAAsB,EACtBC,uBAAsB,EACtBC,wBAAwB,KACxBC,yBAAwB,EACxBC,wBAAwB,KACxBC,yBAAwB,EACxBC,yBAAwB,KAI1B90B,cAAgB,OAmBhB+0B,kBAAoB,SAAC3B,GACnBruB,EAAK7D,SAAS,CACZkyB,sBAIJ4B,eAAiB,SAACjC,GAChBhuB,EAAK7D,SAAS,CACZ6xB,mBAIJkC,0BAA4B,SAAAb,GAC1BrvB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5B4zB,qBAAqB5zB,EAAU4zB,0BAInCc,oBAAsB,SAAAhC,GACpBnuB,EAAK7D,SAAS,CACZgyB,qBAIJiC,kBAAoB,SAAAlB,GAClBlvB,EAAK7D,SAAS,CACZ+yB,0BAIJmB,mBAAqB,SAAAjB,GACnBpvB,EAAK7D,SAAS,CACZizB,2BAIJkB,qBAAuB,SAAAZ,GACrB1vB,EAAK7D,SAAS,CACZuzB,6BAIJa,yBAA2B,SAAAtB,GACzBjvB,EAAK7D,SAAS,CACZ8yB,0BAIJuB,eAAiB,SAAC3C,GAChB7tB,EAAK7D,SAAS,CACZ0xB,kBAIJ4C,sBAAwB,SAAC9B,GACvB3uB,EAAK7D,SAAS,CACZwyB,kBACAE,oBAAoB,GACpBI,oBAAmB,EACnBY,wBAAwB7vB,EAAK/E,cAAc6Q,MAAM,GACjDsiB,eAAcO,GAAsB3uB,EAAKlF,MAAMszB,mBAInDsC,oBAAsB,SAACtC,GACrBpuB,EAAK7D,SAAS,CACZiyB,gBACAS,oBAAoB,GACpBI,oBAAmB,EACnBY,wBAAwB7vB,EAAK/E,cAAc6Q,MAAM,GACjD6iB,iBAAgBP,GAAoBpuB,EAAKlF,MAAM6zB,qBAInDgC,8CAA2B,SAAAre,IAAA,IAAAse,EAAAC,EAAA,OAAApuB,EAAAnG,EAAAoG,KAAA,SAAAgQ,GAAA,cAAAA,EAAA9P,KAAA8P,EAAA7P,MAAA,cAAA6P,EAAA7P,KAAA,EACM7C,EAAK/E,cAAc61B,oBAAoB9wB,EAAK5E,MAAMwa,QAAQ5V,EAAK5E,MAAM0H,aAD3E,cACnB8tB,EADmBle,EAAAwB,KAEnB2c,EAAiBlyB,OAAO+B,KAAKkwB,GAAkB5lB,IAAK,SAAA0K,GACxD,OAAO1V,EAAKlF,MAAM+zB,oBAAoBpe,SAASiF,KAHxBhD,EAAA1P,OAAA,SAMlB6tB,GANkB,wBAAAne,EAAAE,SAAAN,EAAApX,WAS3B61B,+CAA4B,SAAA5wB,IAAA,IAAA0vB,EAAAmB,EAAAC,EAAAC,EAAAriB,EAAAC,EAAAqiB,EAAAC,EAAAC,EAAA/B,EAAAK,EAAA,OAAAltB,EAAAnG,EAAAoG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACtBgtB,EAA0B7vB,EAAK/E,cAAc6Q,MAAM,GACjDklB,EAAiBhxB,EAAK/E,cAAcgkB,gBAAgB,CAAC,QAAQ,SAAS,QAFlDtc,EAAAE,KAAA,EAIpB7C,EAAK/E,cAAc4W,aAAa7R,EAAKlF,MAAM+zB,oBAA3C,eAAA3gB,EAAAvP,OAAAoT,EAAA,EAAApT,CAAA8D,EAAAnG,EAAA0V,KAAgE,SAAAC,EAAOiU,GAAP,IAAAoL,EAAAC,EAAAC,EAAA,OAAA/uB,EAAAnG,EAAAoG,KAAA,SAAA0P,GAAA,cAAAA,EAAAxP,KAAAwP,EAAAvP,MAAA,cAC9DyuB,EAAiBtxB,EAAK/E,cAAcgkB,gBAAgB,CAAC,YAAYiH,IADH9T,EAAAvP,KAAA,EAExC7C,EAAK/E,cAAcw2B,yBAAyBT,EAAeM,GAFnB,OAE9DC,EAF8Dnf,EAAA8B,KAG9Dsd,EAAgBxxB,EAAK5E,MAAMs2B,sBAAsBxL,GAAUjqB,MAAMs1B,GACvE1B,EAA0BA,EAAwB7zB,KAAKw1B,GAJa,wBAAApf,EAAAQ,SAAAX,EAAA/W,SAAhE,gBAAA8X,GAAA,OAAA9E,EAAA4E,MAAA5X,KAAA6X,YAAA,IAJoB,cAAApQ,EAAAE,KAAA,EAWQ7C,EAAK2wB,2BAXb,cAWpBM,EAXoBtuB,EAAAuR,KAYpBgd,EAAkBlxB,EAAK/E,cAAcgkB,gBAAgB,CAAC,QAAQ,SAAS,SAZnDtc,EAAAE,KAAA,GAkBhB2iB,QAAQC,IAAI,CACpBzlB,EAAK/E,cAAcw2B,yBAAyBT,EAAeE,GAC3DlxB,EAAK/E,cAAc02B,uBAAuB3xB,EAAK5E,MAAM0H,YAAYsM,KAAKsG,MAAO,kBAAmB,CAAC1V,EAAK/E,cAAc4tB,qBAAqB7oB,EAAK5E,MAAMw2B,iBAAiB5xB,EAAK5E,MAAM0H,YAAYlG,WAAYoD,EAAK5E,MAAMwa,SACnN5V,EAAK/E,cAAc02B,uBAAuB3xB,EAAK5E,MAAM0H,YAAYsM,KAAKsG,MAAO,yBAA0B,CAAC1V,EAAK/E,cAAc4tB,qBAAqB7oB,EAAK5E,MAAMw2B,iBAAiB5xB,EAAK5E,MAAM0H,YAAYlG,UAAUq0B,GAAsBjxB,EAAK5E,MAAMwa,WArBtN,eAAA/G,EAAAlM,EAAAuR,KAAApF,EAAAnQ,OAAAkzB,EAAA,EAAAlzB,CAAAkQ,EAAA,GAexBsiB,EAfwBriB,EAAA,GAgBxBsiB,EAhBwBtiB,EAAA,GAiBxBuiB,EAjBwBviB,EAAA,GAwBpBwgB,EAAuB8B,GAAkBC,EAAwBD,EAAe9sB,MAAM+sB,GAAyBrxB,EAAK/E,cAAc6Q,MAAM,GACxI6jB,EAA0BL,EAAuBA,EAAqBrzB,MAAMk1B,GAAanxB,EAAK/E,cAAc6Q,MAAM,GAExH9L,EAAK7D,SAAS,CACZmzB,uBACAK,0BACAE,4BA9BwBltB,EAAAK,OAAA,SAgCnB6sB,GAhCmB,yBAAAltB,EAAAiQ,SAAAzS,EAAAjF,WAmC5B42B,uBAAyB,SAACpc,EAAMyV,GAC9BnrB,EAAK7D,SAAS,SAACV,GACb,IAAMozB,EAAsBlwB,OAAOC,OAAO,GAAGnD,EAAUozB,qBAMvD,OALK1D,GAAW0D,EAAoBpe,SAASiF,GAC3CmZ,EAAoBkD,OAAOlD,EAAoBziB,QAAQsJ,GAAO,GACrDyV,IAAY0D,EAAoBpe,SAASiF,IAClDmZ,EAAoB9pB,KAAK2Q,GAEpB,CACLmZ,wBAEF,WACA7uB,EAAK+wB,iCAITiB,4BAA8B,SAACvC,GAC7B,IAAM5Z,EAAW,CACf4Z,yBAGFzvB,EAAK7D,SAAS0Z,EAAU,WACtB7V,EAAKkrB,yBAIT+G,8BAAgC,SAACrC,GAC/B5vB,EAAK7D,SAAS,CACZyzB,+BA8CJsC,WAAa,WACXlyB,EAAK7D,SAAS,CACZ2xB,YAAa,UAIjBqE,eAAiB,SAAArE,GACf9tB,EAAK7D,SAAS,CACZ2xB,mBAqKJsE,sBAAwB,WACtB,IAAMC,EAAgBryB,EAAKlF,MAAMg0B,oBAAoB9uB,EAAKlF,MAAM4L,QAC1D4rB,EAA+BtyB,EAAK/E,cAAcgkB,gBAAgB,CAAC,WAAW,UAAU,UAAU,2BAA6Bjf,EAAKlF,MAAM20B,sBAC1I8C,EAAiCvyB,EAAK/E,cAAcgkB,gBAAgB,CAAC,WAAW,UAAU,UAAU,6BAA+Bjf,EAAKlF,MAAM80B,wBACpJ,OAAS0C,GAAgCC,IAAmCF,GAAiBryB,EAAK5E,MAAMo3B,YAG1GC,sDAAkB,SAAAC,EAAOC,EAAgBC,GAAvB,IAAAC,EAAAR,EAAA,OAAA5vB,EAAAnG,EAAAoG,KAAA,SAAAowB,GAAA,cAAAA,EAAAlwB,KAAAkwB,EAAAjwB,MAAA,OACZ7C,EAAKlF,MAAMs0B,qBACPyD,EAAuB7yB,EAAK/E,cAAcgkB,gBAAgB,CAAC,QAAQ,oBACzEjf,EAAK/E,cAAc83B,YAAY/yB,EAAK5E,MAAM6E,cAAc4yB,EAAqBjnB,QAAQ+mB,EAAgBC,IAG5E5yB,EAAKoyB,yBAEtBC,EAAgBryB,EAAKlF,MAAMg0B,oBAAoB9uB,EAAKlF,MAAM4L,QAChE1G,EAAK/E,cAAc83B,YAAY/yB,EAAK5E,MAAM6E,cAAcoyB,EAAczmB,QAAQ+mB,EAAgBC,IAE9F5yB,EAAK/E,cAAc83B,YAAY/yB,EAAK5E,MAAM6E,cAAcD,EAAK5E,MAAM0H,YAAYsM,KAAKxD,QAAQ+mB,EAAgBC,GAXhG,wBAAAE,EAAAlgB,SAAA8f,EAAAx3B,mEAgBlB83B,wCAAqB,SAAAC,IAAA,IAAA/E,EAAA2E,EAAAR,EAAA,OAAA5vB,EAAAnG,EAAAoG,KAAA,SAAAwwB,GAAA,cAAAA,EAAAtwB,KAAAswB,EAAArwB,MAAA,UACfqrB,GAAgB,GAChBluB,EAAKlF,MAAMs0B,oBAFI,CAAA8D,EAAArwB,KAAA,eAGXgwB,EAAuB7yB,EAAK/E,cAAcgkB,gBAAgB,CAAC,QAAQ,oBAHxDiU,EAAArwB,KAAA,EAIK7C,EAAK/E,cAAc+3B,mBAAmBhzB,EAAK5E,MAAM6E,cAAc4yB,EAAqBjnB,QAAQ5L,EAAK5E,MAAMwa,SAJ5G,OAIjBsY,EAJiBgF,EAAAhf,KAAAgf,EAAArwB,KAAA,oBAOQ7C,EAAKoyB,wBAPb,CAAAc,EAAArwB,KAAA,cAUsB7C,EAAK/E,cAAcgkB,gBAAgB,CAAC,WAAW,UAAU,UAAU,2BAA6Bjf,EAAKlF,MAAM20B,uBAVjI,CAAAyD,EAAArwB,KAAA,aAYS7C,EAAK/E,cAAcgkB,gBAAgB,CAAC,SAASjf,EAAK5E,MAAM6E,gBAZjE,CAAAizB,EAAArwB,KAAA,gBAAAqwB,EAAAlwB,OAAA,UAcJ,GAdI,eAkBTqvB,EAAgBryB,EAAKlF,MAAMg0B,oBAAoB9uB,EAAKlF,MAAM4L,QAlBjDwsB,EAAArwB,KAAA,GAmBO7C,EAAK/E,cAAc+3B,mBAAmBhzB,EAAK5E,MAAM6E,cAAcoyB,EAAczmB,QAAQ5L,EAAK5E,MAAMwa,SAnBvG,QAmBfsY,EAnBegF,EAAAhf,KAAAgf,EAAArwB,KAAA,wBAAAqwB,EAAArwB,KAAA,GAsBO7C,EAAK/E,cAAc+3B,mBAAmBhzB,EAAK5E,MAAM6E,cAAcD,EAAK5E,MAAM0H,YAAYsM,KAAKxD,QAAQ5L,EAAK5E,MAAMwa,SAtBrH,QAsBfsY,EAtBegF,EAAAhf,KAAA,eAAAgf,EAAAlwB,OAAA,SA2BZkrB,GA3BY,yBAAAgF,EAAAtgB,SAAAqgB,EAAA/3B,WA8BrBi4B,kCAAe,SAAAC,IAAA,IAAAlF,EAAAyE,EAAAC,EAAA,OAAAnwB,EAAAnG,EAAAoG,KAAA,SAAA2wB,GAAA,cAAAA,EAAAzwB,KAAAywB,EAAAxwB,MAAA,cAAAwwB,EAAAxwB,KAAA,EAGe7C,EAAKgzB,qBAHpB,YAGP9E,EAHOmF,EAAAnf,MAAA,CAAAmf,EAAAxwB,KAAA,eAAAwwB,EAAArwB,OAAA,SAMJhD,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CACnCyyB,gBACAva,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADL,CAER2f,QAAQ,CACNzf,OAAO,KACPH,SAAQ,SAZH,OAkBPif,EAAkB,SAACpe,EAAGC,GAE1B,IAAMC,EAAY,CAChBG,cAAe,UACfC,YAAa7U,EAAK5E,MAAM6E,cACxByU,WAAYH,EAAGI,QAGbH,IACFC,EAAUC,WAAa1U,EAAK/E,cAAc6Z,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUE,SACrB3U,EAAK/E,cAAc8Z,yBAAyBN,GAG9CzU,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5ByyB,cAA8B,YAAd3Z,EAAGI,OACnBhB,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADL,CAER2f,QAAQ,CACNzf,OAAO,KACPH,SAAQ,SAMVkf,EAAyB,SAACre,GAC9B,IAAMV,EAASU,EAAGiB,gBAClBxV,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BkY,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADL,CAER2f,QAAQ30B,OAAAgS,EAAA,EAAAhS,CAAA,GACHlD,EAAUkY,WAAV,QADE,CAELE,iBAMR7T,EAAKyyB,gBAAgBE,EAAgBC,GAErC5yB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BkY,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADL,CAER2f,QAAQ,CACNzf,OAAO,KACPH,SAAQ,QAnED,wBAAA2f,EAAAzgB,SAAAwgB,EAAAl4B,WAyEfq4B,mCAAgB,SAAAC,IAAA,IAAA1J,EAAAlC,EAAA6L,EAAAC,EAAAC,EAAAzF,EAAAI,EAAAxG,EAAA+K,EAAA7Y,EAAA+U,EAAAhH,EAAA6F,EAAAD,EAAAiB,EAAAQ,EAAAM,EAAAnB,EAAAW,EAAAnB,EAAAlY,EAAA,OAAApT,EAAAnG,EAAAoG,KAAA,SAAAkxB,GAAA,cAAAA,EAAAhxB,KAAAgxB,EAAA/wB,MAAA,cAEV7C,EAAKlF,MAAMk0B,kBACbhvB,EAAK7D,SAAS,CACZ6yB,kBAAiB,IAIflF,EAAc9pB,EAAK/E,cAAcgkB,gBAAgB,CAAC,UAClD2I,EAAmB5nB,EAAK/E,cAAcgkB,gBAAgB,CAAC,QAAQ,kBAAkBjf,EAAK5E,MAAM0H,YAAYsM,KAAKsG,QAC7G+d,EAAoB3J,EAAY/a,SAAW6Y,GAAoBA,EAAiB7Y,QAVxE6kB,EAAA/wB,KAAA,EAoBJ2iB,QAAQC,IAAI,CACpBzlB,EAAKgzB,qBACLhzB,EAAK/E,cAAc44B,sBACnB7zB,EAAK/E,cAAc+uB,uBACnBhqB,EAAK/E,cAAc64B,0BACnB9zB,EAAK/E,cAAcgiB,iBAAiBjd,EAAK5E,MAAM0H,aAC/C9C,EAAK/E,cAAc84B,eAAe/zB,EAAK5E,MAAM0H,YAAY9C,EAAK5E,MAAMwa,SACpE6d,EAAoBzzB,EAAK/E,cAAcgvB,qBAAqBjqB,EAAK5E,MAAMwa,SAAW,OA3BtE,OAAA8d,EAAAE,EAAA1f,KAAAyf,EAAAh1B,OAAAkzB,EAAA,EAAAlzB,CAAA+0B,EAAA,GAaZxF,EAbYyF,EAAA,GAcZrF,EAdYqF,EAAA,GAeZ7L,EAfY6L,EAAA,GAgBZd,EAhBYc,EAAA,GAiBZ3Z,EAjBY2Z,EAAA,GAkBX5E,EAlBW4E,EAAA,GAkBX5E,iBACDhH,EAnBY4L,EAAA,GA8BR/F,EAAa5tB,EAAK5E,MAAM44B,cAAgBh0B,EAAK/E,cAAc6Q,MAAM9L,EAAK5E,MAAM44B,cAAc7kB,GAAG,GAC7Fwe,EAAY3tB,EAAK5E,MAAMw2B,kBAAoB5xB,EAAK/E,cAAc6Q,MAAM9L,EAAK5E,MAAMw2B,kBAAkBziB,GAAG,GAGpGigB,EADAR,EAAkB6E,GAAqB7F,EAGvC8B,EAAqD,SAA7B1vB,EAAK5E,MAAM6E,gBAA6BD,EAAKlF,MAAM40B,wBAA0B9B,GAErGW,EAAiBkF,GAAqB1L,GAAqBA,EAAkB5Y,GAAG,GAChF+f,EAAqBX,EAErBR,EAAiB/tB,EAAK/E,cAAcg5B,kBAAkBj0B,EAAK5E,MAAM0H,cAEjE+S,EA3CQlX,OAAAgS,EAAA,EAAAhS,CAAA,GA2COqB,EAAKlF,QAGbs0B,sBAAwBqE,IACnC5d,EAASuZ,qBAAsB,GAIjCvZ,EAAS8X,UAAYA,EACrB9X,EAAS+X,WAAaA,EACtB/X,EAASmE,cAAgBA,EACzBnE,EAASqY,cAAgBA,EACzBrY,EAASkY,eAAiBA,EAC1BlY,EAASyY,eAAiBA,EAC1BzY,EAAS0Y,eAAiBA,EAC1B1Y,EAAS+Y,gBAAkBA,EAC3B/Y,EAASkZ,iBAAmBA,EAC5BlZ,EAASkS,kBAAoBA,EAC7BlS,EAASiS,kBAAoBA,EAC7BjS,EAASqZ,mBAAqBA,EAC9BrZ,EAASuZ,oBAAsBA,EAC/BvZ,EAASgd,qBAAuBA,EAChChd,EAAS6Z,sBAAwBA,EAEjC7Z,EAAS2X,QAAU,CACjBxmB,QAAO,EACPL,SAAQ,GAEVkP,EAASlC,WAAa,CACpB3M,OAAO,CACL6M,OAAO,KACPH,SAAQ,GAEV/M,QAAQ,CACNkN,OAAO,KACPH,SAAQ,GAEV4f,QAAQ,CACNzf,OAAO,KACPH,SAAQ,GAEVwgB,MAAM,CACJrgB,OAAO,KACPH,SAAQ,IAGZmC,EAASyR,WAAa,CACpB4M,MAAM,KACNltB,OAAO,KACPL,QAAQ,MAEVkP,EAASoS,oBAAsB,CAC7BiM,MAAM,KACNltB,OAAO,KACPL,QAAQ,MAGVkP,EAASmZ,kBAAmB,EAE5BhvB,EAAK7D,SAAS0Z,EAAS,WACrB7V,EAAKm0B,cACLn0B,EAAKo0B,YAxGO,yBAAAR,EAAAhhB,SAAA4gB,EAAAt4B,WA4GhBgwB,uCAAoB,SAAAmJ,IAAA,OAAA5xB,EAAAnG,EAAAoG,KAAA,SAAA4xB,GAAA,cAAAA,EAAA1xB,KAAA0xB,EAAAzxB,MAAA,OAClB7C,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5B+yB,iBAAiB,KACjBuB,yBAAwB,EACxBpc,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADLhV,OAAA41B,GAAA,EAAA51B,CAAA,CAER20B,QAAQ,CACNzf,OAAO,KACPH,SAAQ,IAET1T,EAAKlF,MAAM4L,OAAQ,CAClBmN,OAAO,KACPH,SAAQ,QAZI,wBAAA4gB,EAAA1hB,SAAAyhB,EAAAn5B,WAkBpBs5B,mCAAgB,SAAAC,IAAA,IAAAC,EAAA/F,EAAA9E,EAAAvC,EAAA8G,EAAAkE,EAAAC,EAAA7e,EAAAihB,EAAAC,EAAA9K,EAAA+K,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAArL,EAAAG,EAAAmL,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA/E,EAAA,OAAAxuB,EAAAnG,EAAAoG,KAAA,SAAAuzB,GAAA,cAAAA,EAAArzB,KAAAqzB,EAAApzB,MAAA,OAEV6xB,EAAqB,KACnB/F,EAAkB3uB,EAAKlF,MAAM6zB,gBAC7B9E,EAAqB7pB,EAAKk2B,yBAC1B5O,EAAatnB,EAAKlF,MAAMwsB,WAAWtnB,EAAKlF,MAAM4L,QAC9C0nB,EAAgBpuB,EAAKlF,MAAMszB,eAAiBpuB,EAAKlF,MAAM+zB,oBAAoB5rB,OAAO,GAAKjD,EAAKlF,MAAMm0B,mBAElGqD,EAA+BtyB,EAAK/E,cAAcgkB,gBAAgB,CAAC,WAAW,UAAU,UAAU,2BAA6Bjf,EAAKlF,MAAM20B,sBAC1I8C,EAAiCvyB,EAAK/E,cAAcgkB,gBAAgB,CAAC,WAAW,UAAU,UAAU,6BAA+Bjf,EAAKlF,MAAM80B,wBAEhJlc,GAAU,EAXAuiB,EAAA1yB,GAaNvD,EAAKlF,MAAM4L,OAbLuvB,EAAApzB,KAcP,YAdOozB,EAAA1yB,GAAA,GA2RP,WA3RO0yB,EAAA1yB,GAAA,yBAgBNvD,EAAKlF,MAAM2sB,gBAAmBH,IAActnB,EAAK/E,cAAc6Q,MAAMwb,GAAYvB,IAAI,GAhB/E,CAAAkQ,EAAApzB,KAAA,gBAAAozB,EAAAjzB,OAAA,UAiBD,GAjBC,WAoBLhD,EAAKlF,MAAMozB,cApBN,CAAA+H,EAAApzB,KAAA,gBAAAozB,EAAAjzB,OAAA,SAqBDhD,EAAKmzB,gBArBJ,WAwBNgD,cACFn2B,EAAK/E,cAAcm7B,gBAAgB,6BAA6B,GAGlEp2B,EAAK7D,SAAS,CACZk6B,kBAAmBr2B,EAAK5E,MAAMwa,QAC9B0gB,WAAY,GACZC,aAAc,KAGV5B,EAAkB,SAACpgB,EAAGC,IAErBD,GAAMC,IACTD,EAAK,CACHI,OAAO,UAIX,IAAM6Y,EAAwB,UAAdjZ,EAAGI,OACb0V,EAA4B,YAAd9V,EAAGI,OAEjBF,EAAY,CAChBG,cAAe,UACfC,YAAa7U,EAAK5E,MAAM6E,cACxByU,WAAYH,EAAGI,OACf2V,WAAYxqB,SAASwnB,IAGnB9S,IACFC,EAAUC,WAAa1U,EAAK/E,cAAc6Z,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUE,SACrB3U,EAAK/E,cAAc8Z,yBAAyBN,GAG9CzU,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BkY,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADLhV,OAAA41B,GAAA,EAAA51B,CAAA,GAEPqB,EAAKlF,MAAM4L,OAAQ,CAClBmN,OAAO,KACPH,SAAQ,QAKV2W,EACFrqB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BqyB,YAAY,QACZxG,WAAW3oB,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAU6rB,WADL3oB,OAAA41B,GAAA,EAAA51B,CAAA,GAEPqB,EAAKlF,MAAM4L,OAAS1G,EAAK/E,cAAc6Q,MAAM,SAGxC9L,EAAKlF,MAAM80B,yBAA2B5vB,EAAKlF,MAAM20B,wBAA0BjC,GACrFxtB,EAAK7D,SAAS,CACZqyB,iBAAiB,KACjBuB,yBAAwB,EACxBvC,QAAQ7uB,OAAA41B,GAAA,EAAA51B,CAAA,GACLqB,EAAKlF,MAAM4L,QAAS,MAMvBkuB,EAAyB,SAACrgB,GAC9B,IAAMV,EAASU,EAAGiB,gBAClBxV,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BkY,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADLhV,OAAA41B,GAAA,EAAA51B,CAAA,GAEPqB,EAAKlF,MAAM4L,OAFJ/H,OAAAgS,EAAA,EAAAhS,CAAA,GAGHlD,EAAUkY,WAAW3T,EAAKlF,MAAM4L,QAH7B,CAINmN,iBAMFiW,EAAc9pB,EAAK/E,cAAcgkB,gBAAgB,CAAC,YAC9B6K,EAAY/a,SAAW/O,EAAK/E,cAAcgkB,gBAAgB,CAAC,QAAQ,kBAAkBjf,EAAK5E,MAAM0H,YAAYsM,KAAKsG,MAAM,eAGxH1V,EAAKlF,MAAMs0B,oBA3G1B,CAAA6G,EAAApzB,KAAA,gBA6GFgyB,EAAwB70B,EAAK/E,cAAcgkB,gBAAgB,CAAC,QAAQ,iBACpE6V,EAAkB90B,EAAK/E,cAAc4tB,qBAAqBvB,EAAWuN,EAAsBj4B,UA9GzFq5B,EAAApzB,KAAA,GAgHc7C,EAAK/E,cAAcu7B,gBAAgBx2B,EAAK5E,MAAM0H,YAAYsM,KAAKsG,MAAMof,GAhHnF,eAgHFC,EAhHEkB,EAAA/hB,KAAA+hB,EAAApzB,KAAA,GAiHkB7C,EAAK/E,cAAcw7B,oBAAoB1B,GAjHzD,eAiHJC,EAjHIiB,EAAA/hB,KAkHJlU,EAAKlF,MAAMysB,cAEbyN,GADAA,EAAgBh1B,EAAK/E,cAAc6Q,MAAMkpB,IACX1wB,MAAM0wB,EAAc/4B,MAAM+D,EAAK/E,cAAc6Q,MAAM9L,EAAKlF,MAAMysB,aAAarrB,IAAI,OAC7G84B,EAAgBh1B,EAAK/E,cAAcy7B,aAAa1B,IAG5CC,EAAgB,CAACF,EAAQC,GAxHvBiB,EAAApzB,KAAA,GA0HmB7C,EAAK/E,cAAcwa,0BAA0BzV,EAAKlF,MAAM+3B,qBAAqBvmB,KAAM,gBAAiB2oB,EAAeN,EAAiBC,GA1HvJ,QA0HRF,EA1HQuB,EAAA/hB,KAAA+hB,EAAApzB,KAAA,oBA6HFiyB,EAAkB90B,EAAK/E,cAAc4tB,qBAAqBvB,EAAWtnB,EAAK5E,MAAM0H,YAAYlG,UAG9Fq4B,EAAgB,IAGKj1B,EAAKoyB,wBAnItB,CAAA6D,EAAApzB,KAAA,YAqIAuyB,EAAwBp1B,EAAKlF,MAAMg0B,oBAAoB9uB,EAAKlF,MAAM4L,QAClE2uB,EAAoBD,EAAsBuB,UAG5CpE,EAzIE,CAAA0D,EAAApzB,KAAA,gBA0IJoyB,EAAgB,CAACH,EAAiB90B,EAAK5E,MAAM0H,YAAYsM,KAAKxD,SACxD2pB,GAAeD,EAAAD,EAAkBuB,SAAQxB,EAAsByB,UAAhD/jB,MAAAwiB,EAAA32B,OAAAm4B,GAAA,EAAAn4B,CAA6Ds2B,IAC5EO,EAAoBD,EAAawB,YA5InCd,EAAApzB,KAAA,GA+IuB7C,EAAK/E,cAAc+7B,+BAA+B5B,EAAsB9oB,KAAMkpB,EAAmBb,EAAiBC,GA/IzI,QA+IJF,EA/IIuB,EAAA/hB,KAAA+hB,EAAApzB,KAAA,iBAoJKyvB,IAEJtyB,EAAKlF,MAAM0zB,iBAqDdxuB,EAAK7D,SAAS,CACZqxB,QAAQ7uB,OAAA41B,GAAA,EAAA51B,CAAA,GACLqB,EAAKlF,MAAM4L,QAAQ,GAEtBqpB,yBAAwB,GAJ1BpxB,OAAAoT,EAAA,EAAApT,CAAA8D,EAAAnG,EAAA0V,KAKG,SAAAilB,IAAA,IAAAC,EAAAC,EAAA3H,EAAA4H,EAAA3I,EAAA4I,EAAAC,EAAApc,EAAAqc,EAAA1yB,EAAA,OAAApC,EAAAnG,EAAAoG,KAAA,SAAA80B,GAAA,cAAAA,EAAA50B,KAAA40B,EAAA30B,MAAA,cACKq0B,EAAW,GACXC,EAAgB,GAChB3H,EAAyBxvB,EAAKlF,MAAM00B,uBAAuBxvB,EAAKlF,MAAM4L,QACtE0wB,EAA6Bp3B,EAAK/E,cAAcgkB,gBAAgB,CAAC,WAAW,UAAUjf,EAAKlF,MAAM4L,OAAO,8BAA8B,cAJ3I8wB,EAAA30B,KAAA,EAM8B7C,EAAK/E,cAAcw8B,WAAWz3B,EAAK5E,MAAM6E,cAAeD,EAAK5E,MAAMwa,QAASwhB,EAA2B9qB,KAAM,GAN3I,YAMKmiB,EANL+I,EAAAtjB,MAAA,CAAAsjB,EAAA30B,KAAA,gBASC7C,EAAK7D,SAAS,CACZsyB,qBAGM4I,EAA2B5I,EAA3B4I,OAAQC,EAAmB7I,EAAnB6I,MAAOpc,EAAYuT,EAAZvT,EAAGqc,EAAS9I,EAAT8I,EAAG1yB,EAAM4pB,EAAN5pB,EAC7BsyB,EAActyB,EAAIA,EAClBsyB,EAAcjc,EAAIA,EAClBic,EAAcI,EAAIA,EAClBJ,EAAct3B,MAAQ,EACtBs3B,EAAcO,SAAU,EACxBP,EAAcE,OAASv3B,SAASu3B,GAChCF,EAAcQ,OAAS33B,EAAK5E,MAAMwa,QAClCuhB,EAAcG,MAAQx3B,SAASw3B,EAAMjsB,YACrC8rB,EAAcS,QAAUR,EAA2BxrB,QAEnDsrB,EAASW,WAAaV,EACtBD,EAASY,WAAatI,EAAuBsI,WAE7CpN,QAAQC,IAAI,mCAAmCwM,EAAcD,GA3B9DM,EAAA30B,KAAA,GA6BO7C,EAAK/E,cAAc88B,aAAa,KA7BvC,eAAAP,EAAA30B,KAAA,GA+B4B7C,EAAK/E,cAAc+8B,iCAAiCh4B,EAAKlF,MAAM0zB,iBAAiByJ,QAASf,EAAUvC,EAAiBC,GA/BhJ,QA+BCF,EA/BD8C,EAAAtjB,KAiCClU,EAAK7D,SAAS,CACZqyB,iBAAiB,KACjBuB,yBAAwB,IAnC3ByH,EAAA30B,KAAA,wBAAA20B,EAAAx0B,OAAA,SAsCQhD,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CACnCkY,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADLhV,OAAA41B,GAAA,EAAA51B,CAAA,GAEPqB,EAAKlF,MAAM4L,OAAQ,CAClBmN,OAAO,KACPH,SAAQ,KAGZ+a,iBAAiB,KACjBD,iBAAiB,KACjBuB,yBAAwB,MAhD3B,yBAAAyH,EAAA5kB,SAAAqkB,EAAA/7B,UAzDH8E,EAAK7D,SAAS,CACZqxB,QAAQ7uB,OAAA41B,GAAA,EAAA51B,CAAA,GACLqB,EAAKlF,MAAM4L,QAAQ,GAEtBqpB,yBAAwB,GAJ1BpxB,OAAAoT,EAAA,EAAApT,CAAA8D,EAAAnG,EAAA0V,KAKG,SAAAkmB,IAAA,IAAA1I,EAAAf,EAAA0J,EAAAd,EAAAC,EAAApc,EAAAqc,EAAA1yB,EAAAizB,EAAAM,EAAAC,EAAA7J,EAAA,OAAA/rB,EAAAnG,EAAAoG,KAAA,SAAA41B,GAAA,cAAAA,EAAA11B,KAAA01B,EAAAz1B,MAAA,cACK2sB,EAAyBxvB,EAAKlF,MAAM00B,uBAAuBxvB,EAAKlF,MAAM4L,QAD3E4xB,EAAAz1B,KAAA,EAE8B7C,EAAK/E,cAAcw8B,WAAWz3B,EAAK5E,MAAM6E,cAAeD,EAAK5E,MAAMwa,QAAS4Z,EAAuBljB,MAFjI,UAEKmiB,EAFL6J,EAAApkB,KAGDwW,QAAQC,IAAI,mBAAmB8D,IAC3BA,EAJH,CAAA6J,EAAAz1B,KAAA,gBAKSw0B,EAA2B5I,EAA3B4I,OAAQC,EAAmB7I,EAAnB6I,MAAOpc,EAAYuT,EAAZvT,EAAGqc,EAAS9I,EAAT8I,EAAG1yB,EAAM4pB,EAAN5pB,EAC7BowB,EAAgB,CAACH,EAAiBh1B,SAASw3B,GAAQD,EAAQxyB,EAAGqW,EAAGqc,GAEjE7M,QAAQC,IAAI,mBAAmByK,EAAsB9oB,KAAM8oB,EAAsByB,SAAU5B,GAIrF6C,EAAatI,EAAuBsI,WACpCvC,GAAe4C,EAAA3I,EAAuBmH,SAASC,SAAQpH,EAAuBqH,UAA/D/jB,MAAAqlB,EAAAx5B,OAAAm4B,GAAA,EAAAn4B,CAA4Es2B,IAC3FO,EAAoBD,EAAawB,YAItB,IAEjBrM,QAAQC,IAAI,gCAAgCyK,EAAsB9oB,KAAM2oB,EAAeO,EAFtE,KAlBlB8C,EAAAz1B,KAAA,GAwBgC7C,EAAK/E,cAAcs9B,8BAA8B/I,EAAuBljB,KAAMtM,EAAK5E,MAAM0H,YAAY8I,QAASksB,EAAYtC,EANxI,KAlBlB,eAwBOhH,EAxBP8J,EAAApkB,KAyBCwW,QAAQC,IAAI,mBAAmB6D,GAzBhC8J,EAAAt1B,OAAA,SA0BQhD,EAAK7D,SAAS,CACnBqyB,mBACAuB,yBAAwB,KA5B3B,eAAAuI,EAAAt1B,OAAA,SA+BQhD,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CACnCkY,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADLhV,OAAA41B,GAAA,EAAA51B,CAAA,GAEPqB,EAAKlF,MAAM4L,OAAQ,CAClBmN,OAAO,KACPH,SAAQ,KAGZ+a,iBAAiB,KACjBD,iBAAiB,KACjBuB,yBAAwB,MAzC3B,yBAAAuI,EAAA1lB,SAAAslB,EAAAh9B,WA5JD,QAAA+6B,EAAApzB,KAAA,wBAkRU,EAEV4yB,EAAYz1B,EAAKw4B,sBAAwB,6CAC/CvD,EAAgB,CAACH,GAHD,EAG6BW,GArRvCQ,EAAApzB,KAAA,GAuRqB7C,EAAK/E,cAAcwa,0BAA0BzV,EAAK5E,MAAM0H,YAAYsM,KAAKsG,MAAO,gBAAiBuf,EAAeN,EAAiBC,GAvRtJ,QAuRNF,EAvRMuB,EAAA/hB,KAAA,eAAA+hB,EAAAjzB,OAAA,yBA6RN2rB,EA7RM,CAAAsH,EAAApzB,KAAA,gBA8RFunB,EAAiB,SAAC7V,EAAGC,GACzB,IAAM6V,EAA4B,YAAd9V,EAAGI,OAGjBF,EAAY,CAChBG,cAAa,aACbC,YAAa7U,EAAK5E,MAAM6E,cACxByU,WAAYH,EAAGI,OACf2V,WAAY,GAGV9V,IACFC,EAAUC,WAAa1U,EAAK/E,cAAc6Z,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUE,SACrB3U,EAAK/E,cAAc8Z,yBAAyBN,GAG9CzU,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BkY,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADLhV,OAAA41B,GAAA,EAAA51B,CAAA,GAEPqB,EAAKlF,MAAM4L,OAAQ,CAClBmN,OAAO,KACPH,SAAQ,QAKV2W,GACFrqB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5B6rB,WAAW3oB,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAU6rB,WADL3oB,OAAA41B,GAAA,EAAA51B,CAAA,GAEPqB,EAAKlF,MAAM4L,OAAS1G,EAAK/E,cAAc6Q,MAAM,SAMhDye,EAAwB,SAAChW,GAC7B,IAAMV,EAASU,EAAGiB,gBAClBxV,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BkY,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADLhV,OAAA41B,GAAA,EAAA51B,CAAA,GAEPqB,EAAKlF,MAAM4L,OAFJ/H,OAAAgS,EAAA,EAAAhS,CAAA,GAGHlD,EAAUkY,WAAW3T,EAAKlF,MAAM4L,QAH7B,CAINmN,iBA7UAoiB,EAAApzB,KAAA,GAmVmB7C,EAAK/E,cAAcwa,0BAA0BzV,EAAK5E,MAAM0H,YAAYsM,KAAKsG,MAAO,kBAAmB,CAAC,GAAI0U,EAAgBG,GAnV3I,QAmVRmK,EAnVQuB,EAAA/hB,KAAA+hB,EAAApzB,KAAA,qBAuVJ7C,EAAKlF,MAAM2sB,gBAAmBH,IAActnB,EAAK/E,cAAc6Q,MAAMwb,GAAYvB,IAAI,GAvVjF,CAAAkQ,EAAApzB,KAAA,gBAAAozB,EAAAjzB,OAAA,UAwVC,GAxVD,WA2VF0yB,EAAS,CACb71B,MAAMG,EAAK/E,cAAc6Q,MAAMwb,IAG7BqO,EAAoB,MACpB9L,EAhWI,CAAAoM,EAAApzB,KAAA,SAiWN8yB,EAAoB31B,EAAK/E,cAAc6Q,MAAM9L,EAAK5E,MAAMw2B,kBAAkB31B,MAAM4tB,GAjW1EoM,EAAApzB,KAAA,wBAAAozB,EAAApzB,KAAA,GAmW8B7C,EAAK/E,cAAcw9B,yBAAyBz4B,EAAK5E,MAAM0H,YAAY9C,EAAK5E,MAAMwa,SAnW5G,QAmWAggB,EAnWAK,EAAA/hB,KAoWNyhB,EAAoB31B,EAAK/E,cAAc6Q,MAAM9L,EAAK/E,cAAc4tB,qBAAqBvB,EAAWtnB,EAAK5E,MAAM0H,YAAYlG,WAAWV,IAAI05B,GApWhI,WAwWJD,EAAkBxmB,GAAGnP,EAAK/E,cAAc6Q,MAAM9L,EAAK5E,MAAMw2B,qBAC3D+D,EAAoB31B,EAAK/E,cAAc6Q,MAAM9L,EAAK5E,MAAMw2B,mBAI1D+D,EAAoB31B,EAAK/E,cAAc4tB,qBAAqB8M,EAAkB,IA7WtE,CAAAM,EAAApzB,KAAA,gBAAAozB,EAAAjzB,OAAA,UAgXC,GAhXD,WAmXFonB,EAAiB,SAAC7V,EAAGC,GACzB,IAAM6V,EAA4B,YAAd9V,EAAGI,OAGjBF,EAAY,CAChBG,cAAa,iBACbC,YAAa7U,EAAK5E,MAAM6E,cACxByU,WAAYH,EAAGI,OACf2V,WAAYxqB,SAASwnB,IAGnB9S,IACFC,EAAUC,WAAa1U,EAAK/E,cAAc6Z,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUE,SACrB3U,EAAK/E,cAAc8Z,yBAAyBN,GAG9CzU,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BkY,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADLhV,OAAA41B,GAAA,EAAA51B,CAAA,GAEPqB,EAAKlF,MAAM4L,OAAQ,CAClBmN,OAAO,KACPH,SAAQ,QAKV2W,GACFrqB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5B6rB,WAAW3oB,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAU6rB,WADL3oB,OAAA41B,GAAA,EAAA51B,CAAA,GAEPqB,EAAKlF,MAAM4L,OAAS1G,EAAK/E,cAAc6Q,MAAM,SAMhDye,EAAwB,SAAChW,GAC7B,IAAMV,EAASU,EAAGiB,gBAClBxV,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BkY,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADLhV,OAAA41B,GAAA,EAAA51B,CAAA,GAEPqB,EAAKlF,MAAM4L,OAFJ/H,OAAAgS,EAAA,EAAAhS,CAAA,GAGHlD,EAAUkY,WAAW3T,EAAKlF,MAAM4L,QAH7B,CAINmN,iBAMJkiB,EAAe,kBACfC,EAAe,CAACL,IAEhBvH,EA3aI,CAAA6H,EAAApzB,KAAA,gBA4aNkzB,EAAe,yBA5aTE,EAAApzB,KAAA,GA6a4B7C,EAAK2wB,2BA7ajC,QA6aAM,EA7aAgF,EAAA/hB,KA8aN8hB,EAAajxB,KAAKksB,GA9aZ,eAAAgF,EAAApzB,KAAA,GAibmB7C,EAAK/E,cAAcwa,0BAA0BzV,EAAK5E,MAAM0H,YAAYsM,KAAKsG,MAAOqgB,EAAcC,EAAc5L,EAAgBG,EAAuBmL,GAjbtK,QAibRhB,EAjbQuB,EAAA/hB,KAAA,eAAA+hB,EAAAjzB,OAAA,6BAqbV0Q,GAAU,EArbAuiB,EAAAjzB,OAAA,uBAyba,IAAvB0xB,GAAgChhB,IAAY1T,EAAKlF,MAAM6Y,WAAW3T,EAAKlF,MAAM4L,QAAQgN,SACvF1T,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BkY,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADLhV,OAAA41B,GAAA,EAAA51B,CAAA,GAEPqB,EAAKlF,MAAM4L,OAFJ/H,OAAAgS,EAAA,EAAAhS,CAAA,GAGHlD,EAAUkY,WAAW3T,EAAKlF,MAAM4L,QAH7B,CAINgN,iBA/bM,0BAAAuiB,EAAArjB,SAAA6hB,EAAAv5B,WAschButB,eAAiB,SAAClB,GAChBvnB,EAAK7D,SAAS,CACZorB,mBAIJG,gBAAkB,WAChB1nB,EAAK7D,SAAS,CACZurB,iBAAgB,OAIpByM,YAAc,WACZ,IAAIztB,EAAS1G,EAAKlF,MAAM4L,OAExB,OAAOA,GACL,IAAK,SACE1G,EAAKlF,MAAM6yB,YACdjnB,EAAS,WAOXA,IAAW1G,EAAKlF,MAAM4L,OACxB1G,EAAK7D,SAAS,CACZuK,UACA,WACA1G,EAAKqoB,wBAGProB,EAAKqoB,yBAITA,oBAAsB,WAAiB,IAAhBC,EAAgBvV,UAAA9P,OAAA,QAAAsJ,IAAAwG,UAAA,GAAAA,UAAA,GAAT,KAE5B,IAAK/S,EAAKlF,MAAM4L,OACd,OAAO,EAGJ4hB,IACHA,EAAStoB,EAAKlF,MAAMwsB,WAAWtnB,EAAKlF,MAAM4L,SAG5C,IAAI+gB,GAAiB,EAErB,OAAQznB,EAAKlF,MAAM4L,QACjB,IAAK,UACH+gB,EAAiBA,GAAmBa,IAAWA,EAAOvC,IAAI,IAAMuC,EAAOnZ,GAAGnP,EAAK5E,MAAM44B,eACvF,MACA,IAAK,WACHvM,GAAkBznB,EAAKlF,MAAMyzB,iBAAmBvuB,EAAKlF,MAAM6zB,kBAAoBlH,IAAqBa,GAAUA,EAAOvC,IAAI,IAAMuC,EAAOnZ,GAAGnP,EAAK5E,MAAMiuB,sBAE7HrpB,EAAKlF,MAAMszB,eAAiBpuB,EAAKlF,MAAM+zB,oBAAoB5rB,OAAO,IAAMjD,EAAKlF,MAAMm0B,qBACxGxH,GAAiB,GAQvBznB,EAAK7D,SAAS,CACZsrB,sBAIJ8B,cAAgB,WACd,IAAKvpB,EAAKlF,MAAM4L,QAAgE,OAAtD1G,EAAKlF,MAAMmtB,oBAAoBjoB,EAAKlF,MAAM4L,QAClE,OAAO,EAGT,IAAMmjB,EAAqB7pB,EAAK/E,cAAc6Q,MAAM9L,EAAKlF,MAAMmtB,oBAAoBjoB,EAAKlF,MAAM4L,SAASxK,IAAI,KACvGosB,EAAS,KAEb,OAAOtoB,EAAKlF,MAAM4L,QAChB,IAAK,UACH4hB,EAAStoB,EAAK5E,MAAM44B,aAAeh0B,EAAK/E,cAAc6Q,MAAM9L,EAAK5E,MAAM44B,cAAc/3B,MAAM4tB,GAAsB,KACnH,MACA,IAAK,SACHvB,EAAStoB,EAAK5E,MAAMiuB,kBAAoBrpB,EAAK/E,cAAc6Q,MAAM9L,EAAK5E,MAAMiuB,mBAAmBptB,MAAM4tB,GAAsB,KAM/H7pB,EAAKqoB,oBAAoBC,GAEzBtoB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5B6rB,WAAW3oB,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAU6rB,WADL3oB,OAAA41B,GAAA,EAAA51B,CAAA,GAEPqB,EAAKlF,MAAM4L,OAAS4hB,UAK3B4N,uBAAyB,WACvB,OAA0D,OAAtDl2B,EAAKlF,MAAMmtB,oBAAoBjoB,EAAKlF,MAAM4L,SAIvC1G,EAAK/E,cAAc6Q,MAAM9L,EAAKlF,MAAMmtB,oBAAoBjoB,EAAKlF,MAAM4L,SAASxK,IAAI,QAGzFssB,uBAAyB,SAACgD,GACxB,IAAKxrB,EAAKlF,MAAM4L,OACd,OAAO,EAET1G,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BwsB,oBAAoBtpB,OAAAgS,EAAA,EAAAhS,CAAA,GACflD,EAAUwsB,oBADItpB,OAAA41B,GAAA,EAAA51B,CAAA,GAEhBqB,EAAKlF,MAAM4L,OAAS8kB,UAK3BjD,uDAAmB,SAAAmQ,EAAOvkB,GAAP,IAAAmU,EAAA,OAAA7lB,EAAAnG,EAAAoG,KAAA,SAAAi2B,GAAA,cAAAA,EAAA/1B,KAAA+1B,EAAA91B,MAAA,UACZ7C,EAAKlF,MAAM4L,OADC,CAAAiyB,EAAA91B,KAAA,eAAA81B,EAAA31B,OAAA,UAER,GAFQ,OAIXslB,EAASnU,EAAEoD,OAAO1X,MAAMoD,SAAWuM,MAAM2E,EAAEoD,OAAO1X,OAASG,EAAK/E,cAAc6Q,MAAMqI,EAAEoD,OAAO1X,OAASG,EAAK/E,cAAc6Q,MAAM,GACrI9L,EAAKqoB,oBAAoBC,GAEzBtoB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BwsB,oBAAoBtpB,OAAAgS,EAAA,EAAAhS,CAAA,GACflD,EAAUwsB,oBADItpB,OAAA41B,GAAA,EAAA51B,CAAA,GAEhBqB,EAAKlF,MAAM4L,OAAS,OAEvB4gB,WAAW3oB,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAU6rB,WADL3oB,OAAA41B,GAAA,EAAA51B,CAAA,GAEPqB,EAAKlF,MAAM4L,OAAS4hB,OAdR,wBAAAqQ,EAAA/lB,SAAA8lB,EAAAx9B,iEAmBnB09B,UAAY,SAAClyB,GACX,OAAQA,EAAOiF,eACb,IAAK,UAEL,MACA,IAAK,SACE3L,EAAKlF,MAAM6yB,WAAc3tB,EAAKlF,MAAMyzB,iBACvC7nB,EAAS,MAEb,MACA,QACEA,EAAS,KAIE,OAAXA,GACF1G,EAAK7D,SAAS,CACZuK,uFAztCAxL,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,mKAK9CF,KAAKI,qBACCJ,KAAK29B,ihBA8JLC,EAAU,CAAC,UAAU,UACrBjjB,EAAW,CACfiZ,oBAAoB,GACpBU,uBAAuB,aAGnBt0B,KAAKD,cAAc4W,aAAainB,EAAhC,eAAAC,EAAAp6B,OAAAoT,EAAA,EAAApT,CAAA8D,EAAAnG,EAAA0V,KAAwC,SAAAgnB,EAAOtyB,GAAP,IAAA0uB,EAAA6D,EAAAzJ,EAAA0J,EAAA7G,EAAA,OAAA5vB,EAAAnG,EAAAoG,KAAA,SAAAy2B,GAAA,cAAAA,EAAAv2B,KAAAu2B,EAAAt2B,MAAA,UACxCuyB,EAAwB,MACSh5B,EAAKnB,cAAcgkB,gBAAgB,CAAC,WAAW,UAAUvY,EAAO,0BAFzD,CAAAyyB,EAAAt2B,KAAA,gBAK1CuyB,EAAwBh5B,EAAKnB,cAAcgkB,gBAAgB,CAAC,WAAW,UAAUvY,EAAO,8BAA8B,cAL5EyyB,EAAAt2B,KAAA,EAOpCzG,EAAKhB,MAAMg+B,aAAahE,EAAsB9oB,KAAK8oB,EAAsBxpB,QAAQwpB,EAAsBiE,KAPnE,YAUpCJ,EAA6B78B,EAAKnB,cAAcgkB,gBAAgB,CAAC,WAAW,UAAUvY,EAAO,8BAA8B,SAAStK,EAAKhB,MAAM6E,iBAV3G,CAAAk5B,EAAAt2B,KAAA,gBAYxCuyB,EAAwB6D,EAZgBE,EAAAt2B,KAAA,GAaHzG,EAAKhB,MAAMg+B,aAAaH,EAA2B3sB,KAAK2sB,EAA2BrtB,QAAQqtB,EAA2BI,KAbnH,QAalC7J,EAbkC2J,EAAAjlB,KAcxC2B,EAAS2Z,uBAAuB9oB,GAAUuyB,EAC1CpjB,EAAS2Z,uBAAuB9oB,GAAQiwB,SAAWnH,EAAuBmH,SAflC,WAmBvCvB,IACHA,EAAwBh5B,EAAKnB,cAAcgkB,gBAAgB,CAAC,WAAW,UAAUvY,EAAO,mBAGpFwyB,EAAmB9D,GAAyBA,EAAsBrmB,QACxE8G,EAASiZ,oBAAoBpoB,GAAUwyB,EAAmB9D,EAAwB,MAC9E8D,EAzBwC,CAAAC,EAAAt2B,KAAA,gBAAAs2B,EAAAt2B,KAAA,GA0BdzG,EAAKhB,MAAMg+B,aAAahE,EAAsB9oB,KAAK8oB,EAAsBxpB,QAAQwpB,EAAsBiE,KA1BzF,eA0BpChH,EA1BoC8G,EAAAjlB,KA2B1C2B,EAASiZ,oBAAoBpoB,GAAQiwB,SAAWtE,EAAcsE,SA3BpBwC,EAAAt2B,KAAA,GA4BYzG,EAAKnB,cAAc+3B,mBAAmB52B,EAAKhB,MAAM6E,cAAcm1B,EAAsBxpB,QAAQxP,EAAKhB,MAAMwa,SA5BpH,QA4B1CC,EAASiZ,oBAAoBpoB,GAAQ4yB,SA5BKH,EAAAjlB,KAAA,yBAAAilB,EAAAvmB,SAAAomB,EAAA99B,SAAxC,gBAAAq+B,GAAA,OAAAR,EAAAjmB,MAAA5X,KAAA6X,YAAA,WAgCN7X,KAAKiB,SAAS0Z,yQAgBU3a,KAAKD,cAAcu+B,aAAat+B,KAAKE,MAAM0H,yBAA7D22B,WACgC,OAArBA,EAAUv3B,2BACnBurB,EAAWvyB,KAAKD,cAAc6Q,MAAM2tB,EAAUv3B,QAAQnC,QAAQ,GAEhE2tB,EAAW,MACXxyB,KAAKJ,MAAM8zB,iDACI1zB,KAAKD,cAAcy+B,sBAApChM,YAGEA,EAAWA,EAAS1xB,KAAKyxB,YAG7BvyB,KAAKiB,SAAS,CACZsxB,WACAC,6JAMJ,IAAI+H,EAAYv6B,KAAKD,cAAc0+B,8BAA8B,aAIjE,OAHKz+B,KAAKD,cAAc2+B,aAAanE,KACnCA,EAAY,MAEPA,qFAGgBj6B,EAAUC,gGACjCP,KAAKI,YAE2B,OAA5BJ,KAAKE,MAAM44B,uDACN,aAGH7gB,EAAe3X,EAAUyE,gBAAkB/E,KAAKE,MAAM6E,cACtD45B,EAA+Bp+B,EAAUg0B,wBAA2Bv0B,KAAKJ,MAAM20B,sBAC/EqK,EAAsBt+B,EAAUw4B,eAAiB94B,KAAKE,MAAM44B,cAA4C,OAA5B94B,KAAKE,MAAM44B,eAEzF7gB,GAAgB2mB,GAAuBD,oCACnC3+B,KAAK29B,mCACX39B,KAAKq4B,mCACE,cAGHwG,EAAgB7+B,KAAKJ,MAAM4L,SAAWjL,EAAUiL,OAChDszB,EAA6B9+B,KAAKJ,MAAMmtB,oBAAoB/sB,KAAKJ,MAAM4L,UAAYjL,EAAUwsB,oBAAoB/sB,KAAKJ,MAAM4L,SAE9HqzB,GAAiBC,IACnB9+B,KAAKquB,gBAGmB9tB,EAAU6rB,WAAWpsB,KAAKJ,MAAM4L,UAAYxL,KAAKJ,MAAMwsB,WAAWpsB,KAAKJ,MAAM4L,QAKjGuzB,EAAuBx+B,EAAU2yB,gBAAkBlzB,KAAKJ,MAAMszB,cAC9D8L,EAAyBz+B,EAAUkzB,kBAAoBzzB,KAAKJ,MAAM6zB,gBAClEwL,EAA4B1+B,EAAUwzB,qBAAuB/zB,KAAKJ,MAAMm0B,mBACxEmL,EAA6Bx+B,KAAKC,UAAUJ,EAAUozB,uBAAyBjzB,KAAKC,UAAUX,KAAKJ,MAAM+zB,sBAE3GqL,GAA0BH,GAAiBK,GAA8BH,GAAwBE,IACnGj/B,KAAKmtB,sBAGDgS,EAAsB5+B,EAAU2zB,sBAAwBl0B,KAAKJ,MAAMs0B,sBACzC3zB,EAAUm0B,0BAA4B10B,KAAKJ,MAAM80B,2BAClDyK,oCACDn/B,KAAK83B,6BAA3B9E,SACNhzB,KAAKiB,SAAS,CACZ+xB,0BAIiBzyB,EAAU6rB,WAAWpsB,KAAKJ,MAAM4L,UAAYxL,KAAKJ,MAAMwsB,WAAWpsB,KAAKJ,MAAM4L,SAEhGxL,KAAKo/B,sTAKHC,GAAe,EACfx/B,EAAWG,KAAKJ,MAAMC,SACtBkzB,EAAgB/yB,KAAKJ,MAAMmzB,cACzB7S,EAAyC,SAAhClgB,KAAKE,MAAM8gB,mBACpBoL,EAAapsB,KAAKD,cAAc6Q,MAAM5Q,KAAKJ,MAAMwsB,WAAWpsB,KAAKJ,MAAM4L,UAE9DyI,GAAGjU,KAAKE,MAAM44B,wDACpB,0BAGqB94B,KAAKD,cAAcohB,oBAAoBiL,EAAWpsB,KAAKE,MAAM6E,cAAc/E,KAAKE,MAAM0H,YAAYsY,aAA1Hof,SACF9L,EAAmBxzB,KAAKD,cAAc6Q,MAAM5Q,KAAKD,cAAcgkB,gBAAgB,CAAC,WAAW,UAAU,UAAU,wBAC/G6Q,EAA0B0K,EAAgBj2B,IAAImqB,0BAI5CxzB,KAAKE,MAAM0H,YAAY6D,SAAWzL,KAAKE,MAAM0H,YAAY6D,QAAQ+nB,kBAAoB8L,EAAgBvrB,GAAG/T,KAAKE,MAAM0H,YAAY6D,QAAQ+nB,oCACzIoB,GAA0B,2CAKhBtK,QAAQC,IAAI,CACpBwI,GAAiB/yB,KAAKD,cAAcw/B,oBAAoBv/B,KAAKE,MAAM0H,YAAYsM,KAAKsG,MAAO,iBAC3F3a,GAAWG,KAAKD,cAAc2qB,eAAe,OAAO1qB,KAAKE,MAAM6E,cAAc/E,KAAKE,MAAM0H,YAAY5H,KAAKE,MAAMwa,+CAJ/GqY,OACAlzB,OAMEkzB,GAAiBlzB,IACb2/B,EAAcpT,EAAWprB,IAAInB,GAAUkB,MAAM,KACnDgyB,EAAgB/yB,KAAKD,cAAc6Q,MAAMmiB,GACnC0M,EAAyB1M,EAAc/xB,IAAI,KAAKD,MAAM,GACxDy+B,EAAYzrB,GAAG0rB,GACjB7K,GAA0B,EACjB/0B,EAASkB,MAAM0+B,EAAuBz+B,IAAI,MAAMiT,GAAGuf,KAC5D6L,GAAe,EACf7L,EAAmB3zB,EAASkB,MAAM0+B,EAAuBz+B,IAAI,gBAMrEhB,KAAKiB,SAAS,CACZpB,WACAw/B,eACAtM,gBACAS,mBACAoB,wSAKIxH,EAASptB,KAAKJ,MAAMwsB,WAAWpsB,KAAKJ,MAAM4L,QAAUxL,KAAKD,cAAc6Q,MAAM5Q,KAAKJ,MAAMwsB,WAAWpsB,KAAKJ,MAAM4L,SAAW,QAEhH4hB,EAAOvC,IAAI,6CACjB,UAGH8O,EAAwB35B,KAAKD,cAAcgkB,gBAAgB,CAAC,QAAQ,iBAEpE2J,EAAmB1tB,KAAKD,cAAc4tB,qBAAqBP,EAAOuM,EAAsBj4B,UACxFiZ,EAAW,QAET3a,KAAKJ,MAAM4L,cACZ,mBAIA,0CAHHmP,EAASsZ,oBAAsB7G,YACOptB,KAAKD,cAAciuB,iBAAiBhuB,KAAKE,MAAM0H,YAAYsM,KAAKsG,MAAMkT,GAAiB,kBAA7H/S,EAAS0Z,qGAWbr0B,KAAKiB,SAAS0Z,uIAo2BR,IAAAiC,EAAA5c,KAEN,IAAKA,KAAKE,MAAM6E,gBAAkB/E,KAAKE,MAAM0H,YAC3C,OAAO,KAGT,IAAM0gB,EAAwC,WAA7BtoB,KAAKE,MAAMqoB,cAGtBmX,GADoB1/B,KAAKE,MAAM0H,YAAY+3B,mBACF3/B,KAAKD,cAAcgkB,gBAAgB,CAAC,aAAa/jB,KAAKE,MAAM8gB,iBAAiB,sBAAwBvd,OAAO+B,KAAKxF,KAAKJ,MAAMizB,gBAAgB9qB,OAAO,EAC5L63B,EAAiF,qBAA9C5/B,KAAKE,MAAM0H,YAAYi4B,oBAAqC7/B,KAAKE,MAAM0H,YAAYi4B,mBAGtH1M,GAF0BnzB,KAAKD,cAAcgkB,gBAAgB,CAAC,WAAW,UAAU,UAAU,4BAE5E/jB,KAAKJ,MAAM6yB,aAAezyB,KAAKJ,MAAMo0B,oBAAsBh0B,KAAKJ,MAAMuzB,iBAAuC,WAApBnzB,KAAKJ,MAAM4L,QAErHs0B,EAAwB9/B,KAAKD,cAAcgkB,gBAAgB,CAAC,WAAW,UAAU,kBAAkB,aAAe2b,GAAoBvM,GAAkBnzB,KAAKE,MAAM6/B,iBAAiB9rB,GAAG,GACvLwf,EAAkBqM,GAAyB9/B,KAAKJ,MAAM6zB,gBAEtDuM,EAAsBhgC,KAAKD,cAAcgkB,gBAAgB,CAAC,WAAW,UAAU,kBAC/Ekc,EAAuBD,IAAwBA,EAAoBE,eAAe3qB,SAASvV,KAAKE,MAAM0H,YAAYsM,KAAKsG,QAAUklB,GAAoBvM,EACrJD,EAAgB+M,GAAwBjgC,KAAKJ,MAAMszB,eAAiBzvB,OAAO+B,KAAKxF,KAAKE,MAAMs2B,uBAAuBzuB,OAAO,GAAK/H,KAAKE,MAAM6/B,iBAAiB9rB,GAAG,GAC7JksB,EAAwBF,GAAwBjgC,KAAKJ,MAAMszB,iBAAmBzvB,OAAO+B,KAAKxF,KAAKE,MAAMs2B,uBAAuBzuB,QAAU/H,KAAKE,MAAM6/B,iBAAiBlV,IAAI,IAGtKuV,EAA4BN,GAAyBG,EAGrD7I,EAA+Bp3B,KAAKD,cAAcgkB,gBAAgB,CAAC,WAAW,UAAU,UAAU,0BAIlGsc,EAHiCrgC,KAAKD,cAAcgkB,gBAAgB,CAAC,WAAW,UAAU,UAAU,6BAGtC/jB,KAAKE,MAAMo3B,UAAYt3B,KAAKJ,MAAMg0B,oBAAoB5zB,KAAKJ,MAAM4L,QAC/H80B,EAAYD,GAA6BrgC,KAAKJ,MAAM80B,wBAEpDH,EAAwB6C,GAAgCp3B,KAAKE,MAAMo3B,UAAYt3B,KAAKE,MAAMqgC,sBAAwBvgC,KAAKJ,MAAMg0B,oBAAoB5zB,KAAKJ,MAAM4L,QAK5Jg1B,EAAqC,YAAtBxgC,KAAKJ,MAAM4L,OAAuBxL,KAAKE,MAAM44B,aAAe94B,KAAKE,MAAMiuB,kBACtFsS,EAAczgC,KAAKJ,MAAMi0B,uBAAiExiB,IAA7CrR,KAAKE,MAAM0H,YAAY84B,UAAUpV,QAAwBtrB,KAAKE,MAAM0H,YAAY84B,UAAUpV,QAAU,KAEjJsD,EAAc5uB,KAAKD,cAAcgkB,gBAAgB,CAAC,UAClDwU,EAAoB3J,EAAY/a,SAAW7T,KAAKD,cAAcgkB,gBAAgB,CAAC,QAAQ,kBAAkB/jB,KAAKE,MAAM0H,YAAYsM,KAAKsG,MAAM,YAE3ImmB,EAAepI,GAAqBv4B,KAAKJ,MAAMs0B,qBAA6C,YAAtBl0B,KAAKJ,MAAM4L,OAIjFo1B,EAF2C,YAAtB5gC,KAAKJ,MAAM4L,SAAyBxL,KAAKJ,MAAMwzB,iBAAmBmF,GAAqBv4B,KAAKJ,MAAMozB,gBAE9EuF,GAAqBv4B,KAAKJ,MAAMk0B,oBAAsB9zB,KAAKJ,MAAMi0B,kBAAoB7zB,KAAKJ,MAAMqzB,gBAAkBjzB,KAAKJ,MAAM8zB,iBAAyC,YAAtB1zB,KAAKJ,MAAM4L,OACpMq1B,EAAkBtI,GAAqBv4B,KAAKJ,MAAMk0B,oBAAsB9zB,KAAKJ,MAAMi0B,kBAAoB7zB,KAAKJ,MAAMqzB,gBAAkBjzB,KAAKJ,MAAMyzB,gBAAwC,WAAtBrzB,KAAKJ,MAAM4L,OAE5Ks1B,EAAoBH,GAAgB3gC,KAAKJ,MAAMy0B,sBAAwBr0B,KAAKJ,MAAMq0B,sBAAwBj0B,KAAKJ,MAAM2sB,eAGrHwU,EAA6BH,IADP,EAGtBI,EAAmBhhC,KAAKD,cAAcgkB,gBAAgB,CAAC,QAAQ,iBAC/Dkd,EAAsBD,EAAiBntB,SAAgG,qBAA9EmtB,EAAiB9gC,MAAM6gB,gBAAgB/gB,KAAKE,MAAM0H,YAAYsM,KAAKsG,OAC5H0mB,EAA6BF,EAAiBG,eAE9CC,GAAoBd,GAAaW,GAAuBC,IAA+BlhC,KAAKE,MAAMmhC,iBAAyC,YAAtBrhC,KAAKJ,MAAM4L,OAEhI81B,EAAiBthC,KAAKD,cAAcgkB,gBAAgB,CAAC,QAAQ,eAC7Dwd,EAAsBD,EAAejZ,aACrCmZ,EAA8C,SAA7BxhC,KAAKE,MAAM6E,eAA4Bu8B,EAAeztB,UAAY7T,KAAKE,MAAMmhC,iBAAyC,YAAtBrhC,KAAKJ,MAAM4L,OAE5Hi2B,GAAkG,YAAtBzhC,KAAKJ,MAAM4L,QAAwBxL,KAAKJ,MAAM8yB,YAAsC,WAAtB1yB,KAAKJ,MAAM4L,QAAuBxL,KAAKJ,MAAM6yB,WAAcgB,MAAsBzzB,KAAKJ,MAAM40B,uBAA+C,WAAtBx0B,KAAKJ,MAAM4L,QAC1Qk2B,GAAkBjO,GAAmBgO,EAErC3O,EAAc9yB,KAAKJ,MAAMk0B,oBAAsB8M,GAAoB5gC,KAAKJ,MAAMkzB,eAAiB9yB,KAAKJ,MAAMs0B,qBAAuBl0B,KAAKJ,MAAMozB,gBAAkBhzB,KAAKJ,MAAMwzB,kBAAoBpzB,KAAKJ,MAAMi0B,kBAAoB7zB,KAAKJ,MAAMqzB,gBAAwC,YAAtBjzB,KAAKJ,MAAM4L,SAAyBxL,KAAKJ,MAAM8yB,aAAe1yB,KAAKJ,MAAM40B,sBAElU+F,EAAYv6B,KAAKs9B,qBACjBqE,EAAepH,GAAmC,YAAtBv6B,KAAKJ,MAAM4L,QAAwBk2B,IAAmB5O,EAExF,OACEtjB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZiX,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,CAAC,EAAE,KACVsC,WAAY,UACZiX,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,GAEPiO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAMa,GAAI,GAAV,sBAGAjM,EAAApO,EAAAC,cAACwjB,EAAA,EACK7kB,KAAKE,QAIXooB,EACE9Y,EAAApO,EAAAC,cAAC2nB,EAAA,EAAD,CACE9V,UAAW,CACTsI,GAAG,GAEL0N,KAAM,aACNpb,KAAM,kGAGR0B,EAAApO,EAAAC,cAACugC,GAAA,EAADn+B,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEE2hC,kBAAmBpB,EACnBA,YAA6B,OAAhBA,EAAuB,GAAK,KACzCxL,oBAAqBj1B,KAAKi1B,oBAAoBzX,KAAKxd,QAGhDA,KAAKE,MAAMwa,QAIR1a,KAAKJ,MAAMk0B,iBACb9zB,KAAKJ,MAAM4L,QACTgE,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,GAEPiO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJV,cAAe,UAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAMa,GAAI,GAAV,sBAGAjM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE/W,WAAY,SACZiX,cAAe,MACfhX,eAAgB,iBAEhB0L,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT9C,EAAE,EACF7O,MAAM,IACNgvB,YAAY,WACV3T,EAAK8gB,UAAU,aAGnB5Y,eAAe,EACf6C,SAAiC,YAAtB3nB,KAAKJ,MAAM4L,QAEtBgE,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEmD,GAAI,EACJla,WAAY,SACZiX,cAAe,MACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACygC,GAAA,EAAD,CACEC,YAAa,CACXv2B,OAAO,WAET4f,UAAW,CACTha,KAAK,OACLlR,MAAM,CACJmmB,GAAG,MAIT7W,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExX,SAAU,EACVJ,WAAY,GAFd,aAQJwM,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT9C,EAAE,EACF7O,MAAM,IACNgvB,YAAY,WACV3T,EAAK8gB,UAAU,YAGnB5Y,eAAe,EACf6C,SAAiC,WAAtB3nB,KAAKJ,MAAM4L,OACtBw2B,YAAchiC,KAAKJ,MAAM6yB,YAAczyB,KAAKJ,MAAMyzB,gBAElD7jB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEmD,GAAI,EACJla,WAAY,SACZiX,cAAe,MACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACygC,GAAA,EAAD,CACEC,YAAa,CACXv2B,OAAO,UAET4f,UAAW,CACTha,KAAK,OACLlR,MAAM,CACJmmB,GAAG,MAIT7W,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExX,SAAU,EACVJ,WAAY,GAFd,cAWLmwB,GAAkBnzB,KAAKJ,MAAMkf,eAC5BtP,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACTC,GAAG,EACHC,GAAG,EACHoI,GAAG,EACH/Y,QAAQ,OACRoB,WAAW,SACXiX,cAAc,SACdhX,eAAe,WAGjB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZiX,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE5W,KAAM,QACNtB,MAAO,WACP0O,KAAM,oBAER5B,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExH,GAAI,EACJhQ,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,sCAQAsM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE/W,WAAY,SACZiX,cAAe,OAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExX,SAAU,EACVJ,WAAY,EACZN,MAAO,YACPQ,UAAW,SACXwkB,WAAY,aAEX1nB,KAAKJ,MAAMkf,cAAcja,QAAQ,GAPpC,IAOyC7E,KAAKE,MAAM6E,eAEpDyK,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEyQ,UAAW,MACXC,QAAStrB,KAAKD,cAAcgkB,gBAAgB,CAAC,WAAW,iBAExDvU,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEO,GAAI,EACJnX,KAAM,MACNtB,MAAO,YACP0O,KAAM,oBAQlBgvB,EACE5wB,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT6S,GAAG,EACH3S,GAAG,EACHoI,GAAG,EACH/Y,QAAQ,OACRoB,WAAW,SACXiX,cAAc,SACdhX,eAAe,SACfgiB,GAAG9lB,KAAKJ,MAAMu0B,oBAAsB,EAAI,IAG1C3kB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZiX,cAAe,MACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEO,GAAI,EACJ+C,UAAW,UACXwJ,WAAY,UACZvJ,QAASne,KAAKg1B,2BAEZh1B,KAAKJ,MAAMu0B,oBAAsB,OAAS,OAN9C,qBAQA3kB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE5W,KAAM,QACNtB,MAAO,WACP0O,KAAMpR,KAAKJ,MAAMu0B,oBAAsB,cAAgB,mBAIzDn0B,KAAKJ,MAAMu0B,qBACT3kB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJV,cAAe,UAGbglB,GACEtwB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE/W,WAAY,SACZC,eAAgB,OAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEyC,UAAU,EACV4S,QAASjwB,KAAKJ,MAAM6zB,gBACpBvpB,MAAK,gCACLoT,SAAW,SAAArE,GAAC,OAAI2D,EAAK2Y,sBAAsBtc,EAAEoD,OAAO4T,YAEtDzgB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACElY,MAAO,OACPglB,WAAY,OACZvJ,QAAU,SAAAlF,GAAC,OAAI2D,EAAK1c,MAAM+hC,iBAAiB,2BAA5B,iFAAAvvB,OAAyIkK,EAAK1c,MAAM6/B,kBAAoBnjB,EAAK1c,MAAM6/B,iBAAiB9rB,GAAG,GAA9D,MAAAvB,OAAyEkK,EAAK1c,MAAM6/B,iBAAiBl7B,QAAQ,GAA7G,MAAsH,KAA/P,+CAHjB,gBAUJo7B,GACEzwB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE/W,WAAY,SACZiX,cAAe,OAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEyC,UAAU,EACV4S,QAASjwB,KAAKJ,MAAMszB,cACpBhpB,MAAK,mCACLoT,SAAW,SAAArE,GAAC,OAAI2D,EAAK4Y,oBAAoBvc,EAAEoD,OAAO4T,YAEpDzgB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEyL,GAAI,EACJriB,KAAM,QACNoN,KAAM,UACN1O,MAAO,YAET8M,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACElY,MAAO,OACPglB,WAAY,OACZvJ,QAAU,SAAAlF,GAAC,OAAI2D,EAAK1c,MAAM+hC,iBAAiB,mCAAmCrlB,EAAK7c,cAAcgkB,gBAAgB,CAAC,WAAW,qBAH/H,kBAYXgd,EACHvxB,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT6S,GAAG,EACH3S,GAAG,EACHoI,GAAG,EACH/Y,QAAQ,OACRoB,WAAW,SACXiX,cAAc,SACdhX,eAAe,SACfgiB,GAAG9lB,KAAKJ,MAAMu0B,oBAAsB,EAAI,IAG1C3kB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZiX,cAAe,MACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEO,GAAI,EACJ+C,UAAW,UACXwJ,WAAY,UACZvJ,QAASne,KAAKg1B,2BAEZh1B,KAAKJ,MAAMu0B,oBAAsB,OAAS,OAN9C,qBAQA3kB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE5W,KAAM,QACNtB,MAAO,WACP0O,KAAMpR,KAAKJ,MAAMu0B,oBAAsB,cAAgB,mBAIzDn0B,KAAKJ,MAAMu0B,qBACT3kB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJV,cAAe,UAGb8lB,GACEpxB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE/W,WAAY,SACZC,eAAgB,OAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEyC,UAAU,EACVzB,SAAU5b,KAAKJ,MAAM+yB,WACrBzoB,MAAK,4BACL+lB,QAASjwB,KAAKJ,MAAMs0B,oBACpB5W,SAAW,SAAArE,GAAC,OAAI2D,EAAKuY,mBAAmBlc,EAAEoD,OAAO4T,YAEnDzgB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEsD,UAAW,UACXwJ,WAAY,UACZvJ,QAAU,SAAAlF,GAAC,OAAI2D,EAAK1c,MAAM+hC,iBAAiB,kBAAkBrlB,EAAK7c,cAAcgkB,gBAAgB,CAAC,WAAW,yBAH9G,iBAxWV,IA8YJvU,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPuZ,cAAe,UAGb8lB,GACEpxB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPuZ,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEivB,WAAW,EACXhvB,UAAW,CACTC,GAAG,EACHC,GAAG,EACHoI,GAAG,EACH/Y,QAAQ,OACRoB,WAAW,SACXiX,cAAc,SACdhX,eAAe,WAGjB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZiX,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEtH,OAAQ,QACRkW,IAAKoF,EAAY7L,OAAOwG,QAE1B/Z,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJpI,GAAI,EACJhQ,SAAU,EACVV,MAAO,YACPQ,UAAW,UALb,kEAOkElD,KAAKJ,MAAM4yB,SAAWxyB,KAAKJ,MAAM4yB,SAAS3tB,QAAQ,GAAK,IAPzH,KAQE2K,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEO,GAAI,EACJ+C,UAAW,UACXwJ,WAAY,UACZvJ,QAAU,SAAAlF,GAAC,OAAI2D,EAAK1c,MAAM+hC,iBAAiB,kBAAkBrlB,EAAK7c,cAAcgkB,gBAAgB,CAAC,WAAW,yBAJ9G,cASFvU,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJ6B,UAAU,EACVnT,MAAK,mBACL+lB,QAASjwB,KAAKJ,MAAMs0B,oBACpB5W,SAAW,SAAArE,GAAC,OAAI2D,EAAKuY,mBAAmBlc,EAAEoD,OAAO4T,eAKnDjwB,KAAKJ,MAAMkzB,cAAgB9yB,KAAKJ,MAAMs0B,sBAAwBl0B,KAAKJ,MAAM8yB,YACzEljB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE1X,UAAW,SACXwkB,WAAY,UACZvJ,QAAU,SAAAlF,GAAC,OAAI2D,EAAKmY,gBAAe,KAHrC,+BAK+B/0B,KAAKE,MAAM6E,iBAhdlD,EAmgBA+6B,GACEtwB,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACTC,GAAG,EACHC,GAAG,EACHoI,GAAG,EACH/Y,QAAQ,OACRoB,WAAW,SACXiX,cAAc,SACdhX,eAAe,WAGjB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZiX,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE5W,KAAM,QACNtB,MAAO,WACP0O,KAAM,gBAER5B,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJpI,GAAI,EACJhQ,SAAU,EACVV,MAAO,WACPQ,UAAW,UALb,qBAOqBlD,KAAKE,MAAM6E,cAPhC,wFAOqI/E,KAAKE,MAAM6/B,kBAAoB//B,KAAKE,MAAM6/B,iBAAiB9rB,GAAG,GAA9D,QAAAvB,OAA2E1S,KAAKE,MAAM6/B,iBAAiBl7B,QAAQ,GAA/G,KAAuH,KAP5P,MAUF2K,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJ6B,UAAU,EACV4S,QAASjwB,KAAKJ,MAAM6zB,gBACpBvpB,MAAK,gCACLoT,SAAW,SAAArE,GAAC,OAAI2D,EAAK2Y,sBAAsBtc,EAAEoD,OAAO4T,cAShEiD,EACE1jB,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACTsI,GAAG,EACHC,GAAG,EACHtI,GAAG,EACHC,GAAG,IAGL5D,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE/W,WAAY,SACZiX,cAAe,UAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJpY,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,gDAQAsM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJja,MAAO,EACP+M,UAAW,EACX/L,MAAO,CACLwmB,SAAS,QAEXllB,WAAY,SACZC,eAAgB,UAGZL,OAAO+B,KAAKxF,KAAKE,MAAMs2B,uBAAuB1mB,IAAK,SAAA0K,GACjD,IAAMyQ,EAAUrO,EAAK1c,MAAMs2B,sBAAsBhc,GAC3CmN,EAAW/K,EAAKhd,MAAM+zB,oBAAoBpe,SAASiF,GACnD5S,EAAcgV,EAAK7c,cAAcgkB,gBAAgB,CAAC,YAAYvJ,IACpE,OACEhL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExK,EAAG,EACHqL,GAAI,EACJuC,GAAI,EACJzc,MAAO,OACPgB,MAAO,CACL4/B,OAAO,WAETlkB,aAAc,EACdnD,cAAe,MACfrI,IAAG,gBAAAC,OAAkB8H,GACrB1W,eAAgB,aAChBqZ,gBAAiBwK,EAAW,UAAY,cACxCxJ,QAAU,SAAAlF,GAAC,OAAI2D,EAAKga,uBAAuBpc,GAAOoC,EAAKhd,MAAM+zB,oBAAoBpe,SAASiF,MAE1FhL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEwnB,EAAG,EACH/kB,UAAU,EACV4S,QAAStI,EACTrK,SAAW,SAAArE,GAAC,OAAI2D,EAAKga,uBAAuBpc,EAAMvB,EAAEoD,OAAO4T,YAE7DzgB,EAAApO,EAAAC,cAAC8pB,EAAA,EAAD,CACE3Q,MAAOA,EACP5S,YAAaA,EACbwjB,UAAW,CACTha,KAAK,OACLlR,MAAM,CACJmmB,GAAG,EACH9kB,MAAM,CAAC,QAAQ,SACf+R,OAAO,CAAC,QAAQ,aAItB9D,EAAApO,EAAAC,cAAC6jB,EAAA,EAAD,CACE/J,GAAI,EACJ/X,SAAU,CAAC,EAAE,GACbJ,WAAY,IACZ+oB,aAAc,EACdrpB,MAAO,WACP4iB,OAAQ2F,EAAQ9a,mBAShCgwB,GACF3wB,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT9C,EAAE,EACF2N,GAAG,IAGLvO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE/W,WAAY,SACZiX,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE5W,KAAM,QACNoN,KAAM,WACN1O,MAAO,aAET8M,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJpY,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,iDAaNgwB,GAAiBlzB,KAAKD,cAAc6Q,MAAM5Q,KAAKJ,MAAM+0B,yBAAyB1gB,GAAG,GAC/EzE,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT9C,EAAE,EACF2N,GAAG,IAGLvO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE/W,WAAY,SACZiX,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE5W,KAAM,QACNoN,KAAM,UACN1O,MAAO,YAET8M,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJpY,SAAU,EACVV,MAAO,MACPQ,UAAW,UAJb,uBAMuBlD,KAAKD,cAAcqC,YAAYpC,KAAKJ,MAAM+0B,yBANjE,iCASE30B,KAAKJ,MAAMw0B,sBAAwBp0B,KAAKJ,MAAMw0B,qBAAqB/qB,IAAI,OACrEmG,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJpY,SAAU,EACVV,MAAO,UACPQ,UAAW,UAJb,sBAMsBlD,KAAKJ,MAAMw0B,qBAAqBvvB,QAAQ,GAN9D,iBAMgF7E,KAAKJ,MAAM60B,wBAAwB5vB,QAAQ,GAN3H,MAUJ2K,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJpY,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,6FAQAsM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEmD,GAAI,EACJV,UAAU,EACV4S,QAASjwB,KAAKJ,MAAMm0B,mBACpB7pB,MAAK,4CACLoT,SAAW,SAAArE,GAAC,OAAI2D,EAAKyY,yBAAyBpc,EAAEoD,OAAO4T,cAI3DiD,GAAiBlzB,KAAKJ,MAAM+zB,oBAAoB5rB,OAAO,GACzDyH,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT9C,EAAE,EACF2N,GAAG,IAGLvO,EAAApO,EAAAC,cAAC0Z,EAAA,EAAD,CACEC,UAAW,CACTF,cAAc,OAEhBG,YAAa,CACXjX,KAAK,QAEPkX,UAAW,CACTC,GAAG,GAELrN,KAAM,oCAMZ6zB,GACEnyB,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACTC,GAAG,EACHC,GAAG,EACHoI,GAAG,EACH/Y,QAAQ,OACRoB,WAAW,SACXiX,cAAc,SACdhX,eAAe,WAGjB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZiX,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE5W,KAAM,QACNoN,KAAM,QACN1O,MAAO,aAET8M,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJpI,GAAI,EACJhQ,SAAU,EACVV,MAAO,WACPQ,UAAW,UALb,2DASAsM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJpI,GAAI,EACJhQ,SAAU,EACVJ,WAAY,IACZE,UAAW,SACXR,MAAO1C,KAAKE,MAAM2C,MAAMyI,OAAOC,aAAakO,OAAOwO,WAElDsS,MAOR8F,GAA8BvN,GAAgB9yB,KAAKJ,MAAMwzB,eA6ErDmB,IAA0BzB,IAAgB9yB,KAAKJ,MAAMwzB,gBACxD5jB,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT9C,EAAE,EACF2N,GAAG,EACHtb,QAAQ,OACRoB,WAAW,SACXiX,cAAc,SACdhX,eAAe,WAGjB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,EACJrY,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,8CAM8ClD,KAAKJ,MAAM4L,OANzD,KAQAgE,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,CAAC,EAAE,IACVsC,WAAY,SACZiX,cAAe,MACfhX,eAAgB,iBAEhB0L,EAAApO,EAAAC,cAACghC,GAAA,EAAD5+B,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEgT,UAAW,CACTC,GAAG,EACHC,GAAG,CAAC,EAAE,GACN7R,MAAM,KAER2Z,UAAW,CACTC,GAAG,CAAC,EAAE,IAERrN,KAAM9N,KAAKE,MAAM6E,cACjB4iB,SAAU3nB,KAAKJ,MAAM20B,sBACrB+N,WAAY,CACVhvB,OAAOtT,KAAKE,MAAMiD,SAAW,QAAU,QACvC5B,MAAMvB,KAAKE,MAAMiD,SAAW,QAAU,SAExComB,MAAK,kBAAA7W,OAAoB1S,KAAKE,MAAM6E,cAA/B,QACL8W,YAAa,SAAA5C,GAAC,OAAI2D,EAAKka,6BAA4B,OAErDtnB,EAAApO,EAAAC,cAACghC,GAAA,EAAD5+B,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEgT,UAAW,CACTC,GAAG,EACHC,GAAG,CAAC,EAAE,GACN7R,MAAM,KAER2Z,UAAW,CACTC,GAAG,CAAC,EAAE,IAERrN,KAAM,MACN6Z,UAAW3nB,KAAKJ,MAAM20B,sBACtB+N,WAAY,CACVhvB,OAAOtT,KAAKE,MAAMiD,SAAW,QAAU,QACvC5B,MAAMvB,KAAKE,MAAMiD,SAAW,QAAU,SAExComB,MAAK,yBACL1N,YAAa,SAAA5C,GAAC,OAAI2D,EAAKka,6BAA4B,QAIrD92B,KAAKJ,MAAM0yB,QAAQtyB,KAAKJ,MAAM4L,SAC5BgE,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJpY,SAAU,EACVV,MAAO,MACPQ,UAAW,UAJb,sEAUJsM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJpY,SAAU,OACVV,MAAO,WACPQ,UAAW,UAJb,cAMasM,EAAApO,EAAAC,cAACkhC,GAAA,EAAD,CAASn/B,SAAU,OAAQo/B,KAAM,uBAAjC,cA9JfhzB,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACTC,GAAG,EACHC,GAAG,EACH2K,GAAG,EACHtb,QAAQ,OACRoB,WAAW,SACXiX,cAAc,SACdhX,eAAe,WAIf9D,KAAKJ,MAAM80B,yBAA2B10B,KAAKJ,MAAM0yB,QAAQtyB,KAAKJ,MAAM4L,SAAWxL,KAAKJ,MAAMg0B,oBAAoB5zB,KAAKJ,MAAM4L,QAAQ4yB,SAC/H5uB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZiX,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE5W,KAAM,QACNoN,KAAM,UACN1O,MAAO,aAET8M,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJpY,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,6HAS2C,kBAA3ClD,KAAKD,cAAc0iC,qBAA2CziC,KAAKJ,MAAM80B,wBAC3EllB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZiX,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE5W,KAAM,QACNoN,KAAM,UACN1O,MAAO,aAET8M,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJpY,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,kGAUFsM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJpY,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,yBAMyBlD,KAAKJ,MAAM80B,wBAA0B,UAAY,WAN1E,QAM2F10B,KAAKJ,MAAM4L,OANtG,KAM+GgE,EAAApO,EAAAC,cAAA,WAE3GrB,KAAKJ,MAAM80B,0BAA4B10B,KAAKJ,MAAMg0B,oBAAoB5zB,KAAKJ,MAAM4L,QAAQ4yB,UAAzF,6DAAA1rB,OAAkK1S,KAAKJ,MAAM4L,OAA7K,8BAKRgE,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJ6B,UAAU,EACV4S,QAASjwB,KAAKJ,MAAM80B,wBACpBpX,SAAW,SAAArE,GAAC,OAAI2D,EAAKma,8BAA8B9d,EAAEoD,OAAO4T,UAC5D/lB,MAAK,GAAAwI,OAAK1S,KAAKD,cAAc2iC,WAAW1iC,KAAKJ,MAAM4L,QAA9C,6BA2FVxL,KAAKJ,MAAMg1B,yBAAiD,YAAtB50B,KAAKJ,MAAM4L,QAChDgE,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT9C,EAAE,EACFoL,GAAG,IAGLhM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE/W,WAAY,SACZiX,cAAe,UAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE5W,KAAM,QACNtB,MAAO,WACP0O,KAAM,gBAER5B,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJpY,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,2BAM2BlD,KAAKD,cAAcqC,YAAYpC,KAAKJ,MAAM4zB,kBANrE,KAM2FxzB,KAAKJ,MAAMy/B,aAAX,IAAA3sB,OAA8B1S,KAAKJ,MAAM4zB,iBAAiBxyB,IAAIhB,KAAKJ,MAAMC,UAAUkB,MAAM,KAAK8D,QAAQ,GAAtG,kBAA2H,KANtN,yEAaNu8B,EACE5xB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExK,EAAG,EACHoL,GAAI,EACJja,MAAO,EACP0c,aAAc,EACdpa,WAAY,SACZiX,cAAe,MACfhX,eAAgB,SAChBqZ,gBAAiB,gBACjByT,OAAM,aAAAle,OAAe1S,KAAKE,MAAM2C,MAAMyI,OAAOq3B,UAE7CnzB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE1X,UAAW,SACXwkB,WAAY,UACZ8a,KAAI,sBAAA9vB,OAAwBsuB,EAAiBtY,MAAzC,KAAAhW,OAAkD1S,KAAKE,MAAM0H,YAAYsM,KAAKsG,QAHpF,uDAOAhL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEO,GAAI,EACJnX,KAAM,MACNtB,MAAO,UACP0O,KAAM,qBAGRowB,GACFhyB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZiX,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACTC,GAAG,EACHC,GAAG,EACHoI,GAAG,EACH/Y,QAAQ,OACRoB,WAAW,SACXiX,cAAc,SACdhX,eAAe,SACfgiB,GAAG9lB,KAAKJ,MAAMu0B,oBAAsB,EAAI,IAG1C3kB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE/W,WAAY,SACZC,eAAgB,OAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEyC,UAAU,EACV4S,QAASjwB,KAAKJ,MAAM40B,sBACpBtqB,MAAK,2BACLoT,SAAW,SAAArE,GAAC,OAAI2D,EAAKwY,qBAAqBnc,EAAEoD,OAAO4T,cAKvDjwB,KAAKJ,MAAM40B,uBACThlB,EAAApO,EAAAC,cAACkgC,EAAD99B,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEsL,OAAQ,OACRo3B,WAAW,EACX9Z,UAAWwY,EAAephC,UAOpC2gC,GAAmB7gC,KAAKJ,MAAM6yB,WAC5BjjB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPuZ,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEivB,WAAW,EACXhvB,UAAW,CACTC,GAAG,EACHC,GAAG,EACHoI,GAAG,EACH/Y,QAAQ,OACRoB,WAAW,SACXiX,cAAc,SACdhX,eAAe,WAGjB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZiX,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEtH,OAAQ,QACRkW,IAAKoF,EAAY7L,OAAOwG,QAE1B/Z,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJpI,GAAI,EACJhQ,SAAU,EACVV,MAAO,YACPQ,UAAW,UALb,0CAQEsM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEO,GAAI,EACJ+C,UAAW,UACXwJ,WAAY,UACZvJ,QAAU,SAAAlF,GAAC,OAAI2D,EAAK1c,MAAM+hC,iBAAiB,kBAAkBrlB,EAAK7c,cAAcgkB,gBAAgB,CAAC,WAAW,yBAJ9G,cAUA/jB,KAAKJ,MAAM6yB,WACTjjB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJ6B,UAAU,EACVnT,MAAK,oBACL+lB,QAASjwB,KAAKJ,MAAMo0B,mBACpB1W,SAAW,SAAArE,GAAC,OAAI2D,EAAKsY,kBAAkBjc,EAAEoD,OAAO4T,cAMxDjwB,KAAKyyB,WACHjjB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE1X,UAAW,SACXwkB,WAAY,UACZvJ,QAAU,SAAAlF,GAAC,OAAI2D,EAAKkY,mBAAkB,KAHxC,4BAK4B90B,KAAKE,MAAM6E,gBAO9C/E,KAAKJ,MAAMwzB,gBAAwC,YAAtBpzB,KAAKJ,MAAM4L,OACvCgE,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT9C,EAAE,EACFoL,GAAG,IAGLhM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE/W,WAAY,SACZiX,cAAe,UAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE5W,KAAM,QACNoN,KAAM,UACN1O,MAAO,aAET8M,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJpY,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,gBAMgBlD,KAAKE,MAAM6E,cAN3B,mGAUA/E,KAAKJ,MAAMozB,eAAuC,YAAtBhzB,KAAKJ,MAAM4L,QAAyBxL,KAAKJ,MAAM40B,uBA0D3E1B,GAAe2O,IAClBzhC,KAAKJ,MAAM6Y,WAAWzY,KAAKJ,MAAM4L,QAAQgN,QA8NtCxY,KAAKJ,MAAMi1B,wBACbrlB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJV,cAAe,UAEftL,EAAApO,EAAAC,cAAC0Z,EAAA,EAAD,CACEC,UAAW,CACTF,cAAc,OAEhBG,YAAa,CACXjX,KAAK,QAEPkX,UAAW,CACTC,GAAG,GAELrN,KAAO9N,KAAKJ,MAAM0zB,iBAAqBtzB,KAAKJ,MAAM2zB,iBAAmB,iCAAmC,4BAAgC,qCAG1IvzB,KAAKJ,MAAM0zB,iBACb9jB,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT9C,EAAE,EACFoL,GAAG,EACH/Y,QAAQ,OACRoB,WAAW,SACXiX,cAAc,SACdhX,eAAe,WAGjB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,EACJrY,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,mCAMmClD,KAAKJ,MAAM4L,OAN9C,OAMyDgE,EAAApO,EAAAC,cAAA,cAASrB,KAAKJ,MAAM0zB,iBAAiBuP,KAArC,IAA4C7iC,KAAKE,MAAM6E,gBAEhHyK,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZiX,cAAe,MACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT8K,GAAG,EACH7K,GAAG,EACHC,GAAG,CAAC,EAAE,GACN7R,MAAM,GACNgvB,YAAY,WACV3T,EAAK0c,kBAGTxU,eAAe,GAEftV,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEmD,GAAI,EACJla,WAAY,SACZiX,cAAe,MACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEyL,GAAI,EACJxiB,WAAY,SACZC,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEkoB,MAAO,SACPpgC,MAAO,UACP0O,KAAM,cACNpN,KAAMhE,KAAKE,MAAMiD,SAAW,MAAQ,WAGxCqM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE5X,WAAY,EACZI,SAAU,CAAC,EAAE,IAFf,aAQJoM,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT8K,GAAG,EACH7K,GAAG,EACHC,GAAG,CAAC,EAAE,GACN7R,MAAM,GACNgvB,YAAY,WACV3T,EAAKoT,sBAGTlL,eAAe,GAEftV,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEmD,GAAI,EACJla,WAAY,SACZiX,cAAe,MACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEyL,GAAI,EACJxiB,WAAY,SACZC,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExJ,KAAM,SACN0xB,MAAO,SACPpgC,MAAO,UACPsB,KAAMhE,KAAKE,MAAMiD,SAAW,MAAQ,WAGxCqM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE5X,WAAY,EACZI,SAAU,CAAC,EAAE,IAFf,eAWRoM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJ3X,WAAY,SACZiX,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAAC+Z,EAAA,EAAD3X,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEE8vB,kBAAmBhwB,KAAKgwB,kBAAkBxS,KAAKxd,MAC/Cub,KAAMvb,KAAKJ,MAAM6Y,WAAWzY,KAAKJ,MAAM4L,QAAQmN,OAC/C2C,WAAU,cAAA5I,OAAgB1S,KAAKJ,MAAM4L,OAA3B,eACV6P,SAAQ,GAAA3I,OAAK1S,KAAKD,cAAc2iC,WAAW1iC,KAAKJ,MAAM4L,QAA9C,qBAlWZgE,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJV,cAAe,UAGb4mB,GACElyB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,EACJla,MAAO,EACPuZ,cAAe,WAGZ0lB,GAAgBxgC,KAAKE,MAAM6iC,sBAC1BvzB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,EACJla,MAAO,GAGLvB,KAAKJ,MAAM4sB,iBAAmBsU,GAC5BtxB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,EACJla,MAAO,GAEPiO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE/W,WAAY,SACZiX,cAAe,OAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,6BAGApL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEyQ,UAAW,MACXC,QAAO,yDAEP9b,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEO,GAAI,EACJnX,KAAM,MACNtB,MAAO,YACP0O,KAAM,kBAIZ5B,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJ3X,WAAY,SACZiX,cAAe,MACfhX,eAAgB,iBAGd,CAAC,GAAI,GAAI,EAAE,GAAGgM,IAAK,SAAAsgB,GAAQ,OACzB5gB,EAAApO,EAAAC,cAACgvB,GAAA,EAAD,CACEnd,UAAW,CACT9C,EAAE,GAEJ8K,UAAW,CACT9X,SAAS,GAEXktB,WAAYF,EACZ3d,IAAG,YAAAC,OAAc0d,GACjBG,YAAa,kBAAI3T,EAAK2Q,eAAe6C,IACrCzI,SAAU/K,EAAKhd,MAAMysB,cAAgBrqB,WAAWouB,SAQ9D5gB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZiX,cAAe,MACfhX,eAAgB,iBAGdg9B,EACEtxB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACP0nB,SAAU,MACVplB,WAAY,SACZiX,cAAe,OAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExX,SAAU,EACVJ,WAAY,EACZE,UAAW,QACXX,MAAO,CACLI,WAAW,UAEbD,MAAQ1C,KAAKJ,MAAMy0B,qBAAqBpgB,GAAG,GAAKjU,KAAKE,MAAM2C,MAAMyI,OAAOC,aAAakO,OAAO+W,OAASxwB,KAAKE,MAAM2C,MAAMyI,OAAOC,aAAakO,OAAOwO,WAGzE,IAAtEjmB,WAAWhC,KAAKJ,MAAMy0B,qBAAqBtzB,MAAM,KAAK8D,QAAQ,IAC5D,cADF,GAAA6N,OAEM1S,KAAKJ,MAAMy0B,qBAAqBpgB,GAAG,GAAK,aAAe,UAF7D,KAAAvB,OAE2E1S,KAAKJ,MAAMy0B,qBAAqBtzB,MAAM,KAAKyI,MAAM3E,QAAQ,GAFpI,MAKJ2K,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEyQ,UAAW,MACXC,QAAStrB,KAAKD,cAAcgkB,gBAAgB,CAAC,WAAW,wBAExDvU,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEO,GAAI,EACJnX,KAAM,MACNtB,MAAO,YACP0O,KAAM,iBAGV5B,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEO,GAAI,EACJzY,MAAO,YACPglB,WAAY,UACZvJ,QAASne,KAAKwsB,iBAJhB,WASAxsB,KAAKE,MAAM6iC,qBACbvzB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE/W,WAAY,SACZiX,cAAe,OAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExX,SAAU,EACVJ,WAAY,EACZN,MAAO,YACPQ,UAAW,QACXwkB,WAAY,aALd,oBAOoB1nB,KAAKE,MAAM6iC,oBAAoBhiC,MAAM,KAAK8D,QAAQ,GAPtE,KASA2K,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEyQ,UAAW,MACXC,QAAStrB,KAAKD,cAAcgkB,gBAAgB,CAAC,WAAW,oBAExDvU,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEO,GAAI,EACJnX,KAAM,MACNtB,MAAO,YACP0O,KAAM,kBAOdovB,GACEhxB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExX,SAAU,EACVJ,WAAY,EACZN,MAAO,YACPQ,UAAW,QACXwkB,WAAY,YACZvJ,QAAU,SAAClF,GAAD,OAAO2D,EAAK0Q,uBAAuB,OAE5CkT,EAAa37B,QAAQ,GARxB,IAQ6B7E,KAAKE,MAAM6E,iBAQpDyK,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE8V,IAAK,EACLnf,KAAM,SACN8L,UAAU,EACV/J,OAAQ,QACR2K,aAAc,EACdjb,WAAY,IACZggC,YAAa,aACb7lB,gBAAiB,SACjB7O,UAAW,kBACXqiB,YAAW,gBACXrT,SAAUtd,KAAKqtB,iBAAiB7P,KAAKxd,MACrC4wB,OAAM,aAAAle,OAAe1S,KAAKE,MAAM2C,MAAMyI,OAAOulB,SAC7ClsB,MAAoD,OAA7C3E,KAAKJ,MAAMwsB,WAAWpsB,KAAKJ,MAAM4L,QAAmBxL,KAAKD,cAAc6Q,MAAM5Q,KAAKJ,MAAMwsB,WAAWpsB,KAAKJ,MAAM4L,SAAS3G,UAAY,KAE5I2K,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJ3X,WAAY,SACZiX,cAAe,MACfhX,eAAgB,iBAGd,CAAC,GAAG,GAAG,GAAG,KAAKgM,IAAK,SAAAwgB,GAAU,OAC5B9gB,EAAApO,EAAAC,cAACgvB,GAAA,EAAD,CACEC,WAAYA,EACZ7d,IAAG,YAAAC,OAAc4d,GACjBC,YAAa,kBAAI3T,EAAK0Q,uBAAuBgD,IAC7C3I,SAAU/K,EAAKhd,MAAMmtB,oBAAoBnQ,EAAKhd,MAAM4L,UAAY5G,SAAS0rB,SASrFmR,GACEjyB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE9W,eAAgB,SAChB0X,GAAKiY,EAAkB,EAAI,GAE3BjkB,EAAApO,EAAAC,cAACqa,EAAA,EAAD,CACEC,YAAa,CACXpa,MAAM,OACN0hC,SAAS,CAAC,EAAE,IACZ1gC,MAAM,CACJ4L,cAAc,cAEhByN,SAAS5b,KAAKJ,MAAM2sB,gBAEtB1Q,YAAa7b,KAAKJ,MAAM2sB,eAAiB,KAAOvsB,KAAKs5B,cAAc9b,KAAKxd,OAEvEA,KAAKJ,MAAM4L,OAASioB,EAAkB,cAAgB,OAlRnEjkB,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT9C,EAAE,EACFoL,GAAG,IAIHxb,KAAKJ,MAAM6Y,WAAX,SAAoCzY,KAAKJ,MAAM6Y,WAAX,QAAiCD,QACnEhJ,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEE,cAAe,UAEftL,EAAApO,EAAAC,cAAC+Z,EAAA,EAAD3X,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEmb,SAAQ,uBACRC,WAAU,gCACVC,KAAMvb,KAAKJ,MAAM6Y,WAAX,QAAiCE,OACvCqX,kBAAmBhwB,KAAKgwB,kBAAkBxS,KAAKxd,UAInDwP,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE/W,WAAY,SACZiX,cAAe,UAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE5W,KAAM,QACNoN,KAAM,WACN1O,MAAO,aAET8M,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJpY,SAAU,EACVV,MAAO,WACPQ,UAAW,UAGTlD,KAAKJ,MAAMs0B,oBAAX,MAAAxhB,OACQ1S,KAAKD,cAAc2iC,WAAW1iC,KAAKJ,MAAM4L,QADjD,UAAAkH,OACiE1S,KAAKE,MAAM6E,cAD5E,oEAEEu7B,EAAS,MAAA5tB,OACH1S,KAAKD,cAAc2iC,WAAW1iC,KAAKJ,MAAM4L,QADtC,UAAAkH,OACsD1S,KAAKE,MAAM6E,cADjE,yFAAA2N,OAGH1S,KAAKD,cAAc2iC,WAAW1iC,KAAKJ,MAAM4L,QAHtC,UAAAkH,OAGsD1S,KAAKE,MAAM6E,cAHjE,6DAMfyK,EAAApO,EAAAC,cAACqa,EAAA,EAAD,CACEC,YAAa,CACXH,GAAG,EACHja,MAAM,CAAC,EAAE,KAEXsa,YAAa7b,KAAKi4B,aAAaza,KAAKxd,OALtC,cA0XhBwP,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJV,cAAe,UAEftL,EAAApO,EAAAC,cAAC0Z,EAAA,EAAD,CACEC,UAAW,CACTF,cAAc,OAEhBG,YAAa,CACXjX,KAAK,QAEPkX,UAAW,CACTC,GAAG,GAELrN,KAAM,2BAjgDV0B,EAAApO,EAAAC,cAAC6hC,GAAA,EACKljC,KAAKE,SAihDrB2gC,GAAmB7gC,KAAKJ,MAAMo0B,oBAC5BxkB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJja,MAAO,GAEPiO,EAAApO,EAAAC,cAAC8hC,GACKnjC,KAAKE,QAMf4yB,GACEtjB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJja,MAAO,CAAC,EAAE,IACVsC,WAAY,UACZiX,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAAC+hC,EAAA,EAAD3/B,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEmjC,YAAY,EACZC,iBAAkB,GAClBC,SAAUvjC,KAAKE,MAAM6E,kBAK7ByK,EAAApO,EAAAC,cAACmiC,GAAD,CACE1R,iBAAiB,EACjB5I,KAAI,mBACJjM,MAAK,mBACLvC,QAAS1a,KAAKE,MAAMwa,QACpB8B,WAAYxc,KAAKg3B,WACjB/K,UAAWjsB,KAAKE,MAAM6E,cACtB8X,OAAmC,UAA3B7c,KAAKJ,MAAMgzB,YACnB9kB,KAAI,+DAAA4E,OAAiE1S,KAAKJ,MAAM2yB,SAA5E,mCAAA7f,OAAsH1S,KAAKE,MAAM6E,cAAjI,cACJqsB,MAAK,eAAA1e,OAAiB1S,KAAKJ,MAAM2yB,SAA5B,gBAAA7f,OAAmD1S,KAAKE,MAAM6E,cAA9D,8BAAA2N,OAAwG1S,KAAKD,cAAcgkB,gBAAgB,CAAC,YAA5I,2DAr8Fa9f,kCC+Vbw/B,8MAxWb7jC,MAAQ,CACN4E,UAAU,KACVF,WAAW,KACX8nB,WAAW,IACXsX,cAAc,mBAIhB3jC,cAAgB,gFAGVC,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,4JAK9CF,KAAKI,kQAILJ,KAAK2jC,iMAGkBrjC,EAAUC,mEACjCP,KAAKI,YAEgBE,EAAUyE,gBAAkB/E,KAAKE,MAAM6E,eAE1D/E,KAAK2jC,kTAMgB3jC,KAAKD,cAAc6jC,YAAY5jC,KAAKE,MAAM0H,wEAGxD,UAmDT,IAhDMwlB,EAASptB,KAAKD,cAAc6Q,MAAM5Q,KAAKJ,MAAMwsB,YAC7CyX,EAAezW,EAAOrsB,MAAMf,KAAKE,MAAM4jC,SAAS9iC,IAAI,MAEpD+iC,EAAc/hC,WAAW6hC,EAAa7iC,IAAI,KAC1CgjC,EAAgBhiC,WAAW6hC,EAAa7iC,IAAI,IAC5CijC,EAAgBjiC,WAAW6hC,EAAa7iC,IAAI,IAC5CkjC,EAAaliC,WAAW6hC,EAAa7iC,IAAI,IAEzCwD,EAAY,CAChB,CACE2/B,KAAK,EAAE,GACPj6B,MAAM,QACNvF,MAAMo/B,EACNzkB,MAAMykB,EACNrhC,MAAM1C,KAAKD,cAAcgkB,gBAAgB,CAAC,QAAQ,SAAS/jB,KAAKE,MAAM6E,cAAc,QAAQ,QAAQ8K,KAAK,KACzGu0B,WAAW,OAAOpkC,KAAKD,cAAcgkB,gBAAgB,CAAC,QAAQ,SAAS/jB,KAAKE,MAAM6E,cAAc,QAAQ,QAAQ8K,KAAK,KAAK,KAE5H,CACEs0B,KAAK,IACLj6B,MAAM,WACNvF,MAAMq/B,EACNK,OAAOL,EACPthC,MAAM1C,KAAKD,cAAcgkB,gBAAgB,CAAC,QAAQ,SAAS/jB,KAAKE,MAAM6E,cAAc,QAAQ,QAAQ8K,KAAK,KACzGy0B,YAAY,OAAOtkC,KAAKD,cAAcgkB,gBAAgB,CAAC,QAAQ,SAAS/jB,KAAKE,MAAM6E,cAAc,QAAQ,QAAQ8K,KAAK,KAAK,KAE7H,CACEs0B,KAAK,GACLj6B,MAAM,WACNvF,MAAMs/B,EACNM,OAAON,EACPvhC,MAAM1C,KAAKD,cAAcgkB,gBAAgB,CAAC,QAAQ,SAAS/jB,KAAKE,MAAM6E,cAAc,QAAQ,QAAQ8K,KAAK,KACzG20B,YAAY,OAAOxkC,KAAKD,cAAcgkB,gBAAgB,CAAC,QAAQ,SAAS/jB,KAAKE,MAAM6E,cAAc,QAAQ,QAAQ8K,KAAK,KAAK,KAE7H,CACEs0B,KAAK,EACLj6B,MAAM,OACNu6B,KAAKP,EACLv/B,MAAMu/B,EACNxhC,MAAM1C,KAAKD,cAAcgkB,gBAAgB,CAAC,QAAQ,SAAS/jB,KAAKE,MAAM6E,cAAc,QAAQ,QAAQ8K,KAAK,KACzG60B,UAAU,OAAO1kC,KAAKD,cAAcgkB,gBAAgB,CAAC,QAAQ,SAAS/jB,KAAKE,MAAM6E,cAAc,QAAQ,QAAQ8K,KAAK,KAAK,MAIzH80B,EAA0B3kC,KAAKD,cAAcgkB,gBAAgB,CAAC,QAAQ,SAAS/jB,KAAKE,MAAM6E,cAAc,QAAQ,4BAE/F,EACfW,EAAYw+B,EADG,EAEft+B,EAAc,CAAC,GACZY,EAAE,EAAEA,GAHQ,EAGQA,IACrBo+B,EAAap+B,EAAEd,EACrBE,EAAYiE,KAAK+6B,GAGbtgC,EAAa,CACjByH,QAAS,GACTM,SAAS,EACTvC,QAAS,QAETmC,eAAgB,GAChBC,gBAAiB,GACjB1G,KAAM,CAAC,QAAQ,SAAS,SAAS,QACjC8F,OAAQ,SAAAu5B,GAAA,IAAGx1B,EAAHw1B,EAAGx1B,GAAH,OAAAw1B,EAAO71B,KAAe,GAAA0D,OAAIrD,EAAJ,WAC9BnF,MAAO,SAAAC,GAAC,OAAIjJ,EAAKnB,cAAcgL,iBAAiBZ,EAAExF,MAAM,EAAE,GAAG,IAAIzD,EAAKhB,MAAM6E,eAC5EiH,eAAgB24B,EAA0B,CAAEl2B,KAAM,QAASC,UAAW,CAAEi2B,IAA8B,KACtG7f,eAAc,EACd9a,SAAS,EACTpE,cAEAgF,SAAS,CACPnC,OAAQ,SAAAkB,GAAC,OAAIzI,EAAKnB,cAAcgL,iBAAiBpB,EAAE,EAAE,IACrDgB,WAAW/E,EACX4E,OAAQ,OACRH,SAAU,EACVE,YAAa,EACbO,aAAc,EACdR,OAAQ,GACRI,eAAgB,UAElBN,WAAW,CACTE,OAAQ,GACRD,SAAS,EACTE,YAAa,GACbC,OAAQ,UAEV3H,MAAM,CACJiiC,OAAO,CACLh3B,KAAK,CACH1K,SAAS,GACTJ,WAAW,IACXqI,KAAKxI,KAAMyI,OAAOvI,QAClBH,WAAYC,KAAMC,MAAMiL,YAG5B9C,KAAM,CACJ4C,MAAO,CACLC,KAAM,CACJ1K,SAAS,GACTJ,WAAW,IACXqI,KAAKxI,KAAMyI,OAAOhB,OAClB1H,WAAYC,KAAMC,MAAMiL,aAI9BC,KAAM,CACJC,KAAM,CACJrC,OAAQ,UAAWC,gBAAiB,SAI1C8C,OAAQ3O,KAAKE,MAAMiD,SAAW,CAAEyL,IAAK,EAAGC,MAAO,EAAGC,OAAQ,GAAIC,KAAM,GAAM,CAAEH,IAAK,GAAIC,MAAO,EAAGC,OAAQ,GAAIC,KAAM,KAGnH/O,KAAKiB,SAAS,CACZuD,YACAF,2JAIa2U,GACf,IAAImT,EAAanT,EAAEoD,OAAO1X,MAAMoD,SAAWuM,MAAM2E,EAAEoD,OAAO1X,OAAS2E,KAAKonB,IAAI1wB,KAAKJ,MAAM8jC,cAAc1hC,WAAWiX,EAAEoD,OAAO1X,QAAU,EACnIynB,EAAapsB,KAAKD,cAAc6Q,MAAMwb,GACtCpsB,KAAKiB,SAAS,CACZmrB,gDAIK,IAAAxP,EAAA5c,KAEP,IAAKA,KAAKE,MAAM6E,gBAAkB/E,KAAKE,MAAM0H,YAC3C,OAAO,KAGT,IACMm9B,EADmB/kC,KAAKD,cAAcgkB,gBAAgB,CAAC,YAAY,OAAO,aAClC/jB,KAAKD,cAAcgkB,gBAAgB,CAAC,YAAY,OAAO,YAErG,OACEvU,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT9C,EAAE,CAAC,EAAE,KAGPZ,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPuZ,cAAe,CAAC,SAAS,QAEzBtL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,CAAC,EAAE,IACVuZ,cAAe,SACfhX,eAAgB,cAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE/W,WAAY,SACZiX,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAAC8pB,EAAA,EAAD,CACE3Q,MAAOxa,KAAKE,MAAM6E,cAClB6C,YAAa5H,KAAKE,MAAM0H,YACxBwjB,UAAW,CACTha,KAAK,OACLlR,MAAM,CACJub,GAAG,EACHnI,OAAO,YAIb9D,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExX,SAAU,EACVV,MAAO,WACPQ,UAAW,UAHb,oFAKqFlD,KAAKE,MAAM4jC,SAAX,GAAApxB,OAAyB1S,KAAKE,MAAM4jC,SAASj/B,QAAQ,GAArD,KAA6D,KAE9IkgC,GACEv1B,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErY,MAAO,CACLE,QAAQ,cACRuiC,cAAc,WAGhBx1B,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEyQ,UAAW,MACXC,QAAStrB,KAAKD,cAAcgkB,gBAAgB,CAAC,WAAW,aAExDvU,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEO,GAAI,EACJ/J,KAAM,OACNpN,KAAM,MACNtB,MAAO,kBAOrB8M,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJV,cAAe,UAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE8V,IAAK,EACLnf,KAAM,SACN8L,UAAU,EACVY,aAAc,EACdjb,WAAY,IACZE,UAAW,SACXoQ,OAAQ,CAAC,MAAM,SACf0vB,YAAa,aACb10B,UAAW,kBACX/E,IAAKvJ,KAAKJ,MAAM8jC,cAChBvmB,gBAAiB,cACjBG,SAAUtd,KAAKqtB,iBAAiB7P,KAAKxd,MACrC4wB,OAAM,aAAAle,OAAe7P,KAAMyI,OAAOulB,SAClCF,YAAW,UAAAje,OAAY1S,KAAKE,MAAM6E,cAAcoe,cAArC,WACXxe,MAAO3E,KAAKJ,MAAMwsB,aAAe9X,MAAMtU,KAAKJ,MAAMwsB,YAAcpsB,KAAKJ,MAAMwsB,WAAa,MAG5F5c,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJ1X,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACqa,EAAA,EAAD,CACEC,YAAa,CACXpa,MAAM,CAAC,EAAE,KAEXsa,YAAa7b,KAAK2jC,UAAUnmB,KAAKxd,OAJnC,eAUJwP,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,CAAC,EAAE,GACPja,MAAO,CAAC,EAAE,IACV8N,GAAI,4BAGFrP,KAAKE,MAAMiD,SACTqM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPuZ,cAAe,UAGY,OAAzB9a,KAAKJ,MAAM4E,WAAsBxE,KAAKJ,MAAM4E,UAAUsL,IAAI,SAACnG,EAAE6X,GAAH,OACxDhS,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEzH,GAAI,EACJ4K,GAAI,EACJxc,MAAO,EACPuZ,cAAe,MACfrI,IAAG,YAAAC,OAAc8O,IAEjBhS,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,IACPsC,WAAY,SACZC,eAAgB,cAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExX,SAAU,EACVJ,WAAY,EACZN,MAAO,UAENiH,EAAEO,QAGPsF,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,IACPghB,SAAU,WACV1e,WAAY,SACZgX,UAAW,CAAC,OAAO,QACnB/W,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEoX,OAAQ,EACRzP,SAAU,WACV1e,WAAY,SACZiX,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExX,SAAU,EACVJ,WAAY,EACZN,MAAO,WAENka,EAAK7c,cAAcgL,iBAAiBpB,EAAEhF,MAAM,EAAE,GALjD,IAKsDiY,EAAK1c,MAAM6E,gBAGnEyK,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE/L,MAAO,EACPtN,MAAOoI,EAAEw6B,KACT5hB,SAAU,WACVjP,OAAQ,CAAC,OAAO,QAChB2K,aAAc,CAAC,gBAAgB,iBAC/B1b,MAAO,CAACgM,WAAU,gCAAAmE,OAAiC/I,EAAEjH,MAAnC,iBAAAgQ,OAAwD/I,EAAEjH,MAA1D,qBAQ9B8M,EAAApO,EAAAC,cAAC8W,EAAA,EAAD1U,OAAAC,OAAA,CACE6N,KAAM3H,IACN0J,OAAQ,IACR8E,YAAY,GACRpY,KAAKJ,MAAM0E,WAJjB,CAKE0K,KAAMhP,KAAKJ,MAAM4E,UACjB6T,SAAU,wCA/VIpU,aC8bjBghC,8MAzbbrlC,MAAQ,CACNkkC,SAAS,GACToB,UAAU,GACVpM,aAAa,GACb9F,cAAc,GACdJ,YAAY,KACZuS,eAAe,GACfpF,iBAAiB,GACjBrJ,iBAAiB,GACjBvI,kBAAkB,GAClBwR,kBAAkB,GAClByF,mBAAmB,GACnBrC,oBAAoB,GACpBjP,kBAAiB,EACjB0C,sBAAsB,MAIxBz2B,cAAgB,OAUhBi3B,WAAa,WACXlyB,EAAK7D,SAAS,CACZ2xB,YAAa,UAIjBqE,eAAiB,SAAArE,GACf9tB,EAAK7D,SAAS,CACZ2xB,4FAfE5yB,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,yKAiB1CF,KAAKE,MAAMwa,+BACPC,iBAAe3a,KAAKJ,gBACpBI,KAAKD,cAAc4W,aAAalT,OAAO+B,KAAKxF,KAAKE,MAAM6gB,iBAAvD,eAAA8jB,EAAAphC,OAAAoT,EAAA,EAAApT,CAAA8D,EAAAnG,EAAA0V,KAAwE,SAAAM,EAAOoD,GAAP,IAAA5S,EAAAyiB,EAAAhoB,EAAA2Q,EAAA+vB,EAAAoC,EAAArB,EAAAhL,EAAAoM,EAAAxO,EAAA1D,EAAAwD,EAAAuJ,EAAA,OAAAx4B,EAAAnG,EAAAoG,KAAA,SAAAgQ,GAAA,cAAAA,EAAA9P,KAAA8P,EAAA7P,MAAA,cACtEC,EAAc1G,EAAKhB,MAAM6gB,gBAAgBvG,IACzC6P,EAA0B,IACR7P,GAAS5S,EAH2C4P,EAAA7P,KAAA,EAelE2iB,QAAQC,IAAI,CACpBrpB,EAAKnB,cAAcslC,aAAaz9B,GAChC1G,EAAKnB,cAAculC,kBAAkB19B,GACrC1G,EAAKnB,cAAc6jC,YAAY1iC,EAAKhB,MAAM0H,aAC1C1G,EAAKnB,cAAcwlC,gBAAgB/qB,EAAMtZ,EAAKhB,MAAMwa,SACpDxZ,EAAKnB,cAAcylC,iBAAiB59B,EAAY1G,EAAKhB,MAAMwa,SAC3DxZ,EAAKnB,cAAcwlC,gBAAgB39B,EAAYsM,KAAKsG,MAAMtZ,EAAKhB,MAAMwa,SACrExZ,EAAKnB,cAAc+3B,mBAAmBtd,EAAM5S,EAAYsM,KAAKxD,QAAQxP,EAAKhB,MAAMwa,SAChFxZ,EAAKnB,cAAc0qB,yBAAyBvpB,EAAKhB,MAAMwa,QAAQ2P,EAAwB,KAAK,MAC5FnpB,EAAKnB,cAAc0lC,6BAA6BvkC,EAAKhB,MAAMwa,QAAQ2P,EAAwB,OAAM,KAxBvB,OAAAhoB,EAAAmV,EAAAwB,KAAAhG,EAAAvP,OAAAkzB,EAAA,EAAAlzB,CAAApB,EAAA,GAM1E0gC,EAN0E/vB,EAAA,GAO1EmyB,EAP0EnyB,EAAA,GAQ1E8wB,EAR0E9wB,EAAA,GAS1E8lB,EAT0E9lB,EAAA,GAU1EkyB,EAV0ElyB,EAAA,GAW1E0jB,EAX0E1jB,EAAA,GAY1EggB,EAZ0EhgB,EAAA,GAa1EwjB,EAb0ExjB,EAAA,GAc1E+sB,EAd0E/sB,EAAA,GA2B5E2H,EAASuqB,UAAU1qB,GAAS0qB,EAC5BvqB,EAASme,aAAate,GAASse,EAC/Bne,EAASqY,cAAcxY,GAASwY,EAChCrY,EAASwqB,eAAe3qB,GAAS2qB,EACjCxqB,EAAS+b,iBAAiBlc,GAASkc,EACnC/b,EAASolB,iBAAiBvlB,GAASulB,EACnCplB,EAASooB,oBAAoBvoB,GAASuoB,EACtCpoB,EAAS6b,sBAAsBhc,GAASgc,EACxC7b,EAASglB,kBAAkBnlB,GAAS5S,EAAY+3B,kBAChDhlB,EAASmpB,SAAStpB,GAASspB,IAAaA,EAASxvB,QAAUwvB,EAAW,KACtEnpB,EAASwT,kBAAkB3T,GAASkc,GAAoByO,EAAiBzO,EAAiB31B,MAAMokC,GAAkBjkC,EAAKnB,cAAc6Q,MAAM,GArC/D,yBAAA4G,EAAAE,SAAAN,EAAApX,SAAxE,gBAAA8X,GAAA,OAAA+sB,EAAAjtB,MAAA5X,KAAA6X,YAAA,WAwCN8C,EAASyqB,mBAAqBplC,KAAKD,cAAcg5B,kBAAkB/4B,KAAKE,MAAM0H,aAM9E+S,EAASmZ,kBAAmB,EAE5B9zB,KAAKiB,SAAS0Z,iQAKhB3a,KAAKI,qBACCJ,KAAK0lC,sMAGYplC,EAAWC,6EAClCP,KAAKI,YACCqa,EAAiBna,EAAUoa,UAAY1a,KAAKE,MAAMwa,QAClDirB,EAAyBjlC,KAAKC,UAAUL,EAAUygB,mBAAqBrgB,KAAKC,UAAUX,KAAKE,MAAM6gB,iBACjG6kB,EAAsBtlC,EAAUiL,cAAgBvL,KAAKE,MAAMqL,cAAgB9H,OAAOgG,OAAOnJ,EAAUiL,cAAc7B,OAAO,SAAA2P,GAAE,MAAiB,YAAZA,EAAGI,SAAqB1R,SAAWtE,OAAOgG,OAAOzJ,KAAKE,MAAMqL,cAAc7B,OAAO,SAAA2P,GAAE,MAAiB,YAAZA,EAAGI,SAAqB1R,QACjP0S,GAAkBmrB,GAAuBD,IAE3C3lC,KAAK0lC,uJAIA,IAAA9oB,EAAA5c,KAED6lC,EAAe7lC,KAAKE,MAAMwa,SAAW1a,KAAKJ,MAAM82B,iBAAiB12B,KAAKE,MAAM6E,gBAAkB/E,KAAKD,cAAc6Q,MAAM5Q,KAAKJ,MAAM82B,iBAAiB12B,KAAKE,MAAM6E,gBAAgBkP,GAAG,GAEvL,OACEzE,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,GAEPiO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPka,GAAI,CAAC,EAAE,GACP5X,WAAY,SACZiX,cAAe,MACfhX,eAAgB,cAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,IAEPiO,EAAApO,EAAAC,cAACijB,EAAA,EAAD7gB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEiD,SAAUnD,KAAKE,MAAMiD,SACrBshB,KAAM,CAACzkB,KAAKE,MAAM6E,eAClB8W,YAAc,SAAA5C,GAAC,OAAI2D,EAAK1c,MAAMskB,YAAY5H,EAAK1c,MAAM8gB,mBACrDlT,KAAM9N,KAAKD,cAAcgkB,gBAAgB,CAAC,aAAa/jB,KAAKE,MAAM8gB,iBAAiB,cAGvFxR,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,GACPuC,eAAgB,YAEhB0L,EAAApO,EAAAC,cAACghC,GAAA,EAAD5+B,OAAAC,OAAA,CACEwlB,KAAM,OACFlpB,KAAKE,MAFX,CAGE4N,KAAM,YACN+N,YAAc,SAAA5C,GAAC,OAAI2D,EAAKqa,eAAe,aAI7CznB,EAAApO,EAAAC,cAAC0lB,EAAA,EAAD,CACEtL,GAAI,CAAC,EAAE,IADT,oBAKAjM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,GAEPiO,EAAApO,EAAAC,cAACykC,GAADriC,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEglC,UAAWllC,KAAKJ,MAAMslC,UAAUllC,KAAKE,MAAM6E,eAC3C+zB,aAAc94B,KAAKJ,MAAMk5B,aAAa94B,KAAKE,MAAM6E,eACjDiuB,cAAehzB,KAAKJ,MAAMozB,cAAchzB,KAAKE,MAAM6E,eACnDg7B,iBAAkB//B,KAAKJ,MAAMmgC,iBAAiB//B,KAAKE,MAAM6E,eACzD2xB,iBAAkB12B,KAAKJ,MAAM82B,iBAAiB12B,KAAKE,MAAM6E,eACzDopB,kBAAmBnuB,KAAKJ,MAAMuuB,kBAAkBnuB,KAAKE,MAAM6E,eAC3Dg+B,oBAAqB/iC,KAAKJ,MAAMmjC,oBAAoB/iC,KAAKE,MAAM6E,eAC/DyxB,sBAAuBx2B,KAAKJ,MAAM42B,sBAAsBx2B,KAAKE,MAAM6E,mBAIrE8gC,GACEr2B,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPla,MAAO,EACPuZ,cAAe,SACfzL,GAAI,4BAEJG,EAAApO,EAAAC,cAAC0lB,EAAA,EAAD,CAAOhJ,GAAI,CAAC,EAAE,IAAd,kBACAvO,EAAApO,EAAAC,cAAC0kC,EAADtiC,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEglC,UAAWllC,KAAKJ,MAAMslC,UAAUllC,KAAKE,MAAM6E,mBAKjD8gC,GAAgB7lC,KAAKE,MAAMwa,UAAY1a,KAAKJ,MAAM+/B,kBAAkB3/B,KAAKE,MAAM6E,gBAAkBtB,OAAO+B,KAAKxF,KAAKJ,MAAMwlC,oBAAoBr9B,OAAO,GACjJyH,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACP8N,GAAI,gBACJyL,cAAe,UAEftL,EAAApO,EAAAC,cAAC0lB,EAAA,EAAD,CAAOhJ,GAAI,CAAC,EAAE,IAAd,iBACAvO,EAAApO,EAAAC,cAAC4lB,EAAA,EAADxjB,OAAAC,OAAA,CACE4R,cAAe7R,OAAO+B,KAAKxF,KAAKJ,MAAMwlC,oBACtCle,KAAM,CACJ,CACEjK,MAAM,QACN/c,MAAM,CACJqB,MAAM,CAAC,GAAK,MAEd4lB,OAAO,CACL,CACE/V,KAAK,OACLlR,MAAM,CACJmmB,GAAG,EACH/S,OAAO,CAAC,QAAQ,WAGpB,CACElC,KAAK,eAIX,CACEgW,QAAO,EACPnK,MAAM,UACN/c,MAAM,CACJqB,MAAM,CAAC,IAAM,MAEf4lB,OAAO,CACL,CACE/V,KAAK,eACLlR,MAAM,CACJwB,SAAU1B,KAAKE,MAAMiD,SAAW,EAAI,MAK5C,CACE8Z,MAAM,aACNsK,KAAKvnB,KAAKD,cAAcgkB,gBAAgB,CAAC,WAAW,8BACpD7jB,MAAM,CACJqB,MAAM,CAAC,IAAK,IACZuC,eAAe,CAAC,SAAS,eAE3BqjB,OAAO,CACL,CACE/V,KAAK,oBACLlR,MAAM,CACJwB,SAAU1B,KAAKE,MAAMiD,SAAW,EAAI,MAK5C,CACE8Z,MAAM,eACNsK,KAAKvnB,KAAKD,cAAcgkB,gBAAgB,CAAC,WAAW,0BACpD7jB,MAAM,CACJqB,MAAM,CAAC,IAAK,KAEd4lB,OAAO,CACL,CACE/V,KAAK,wBACLlR,MAAM,CACJwB,SAAS,QA+Cf1B,KAAKE,MA7GX,CA8GE6gB,gBAAiB/gB,KAAKJ,MAAMwlC,uBAKpCplC,KAAKE,MAAMwa,SAAW1a,KAAKJ,MAAMkkC,SAAS9jC,KAAKE,MAAM6E,gBACnDyK,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPla,MAAO,EACPuZ,cAAe,SACfzL,GAAI,gCAEJG,EAAApO,EAAAC,cAAC0lB,EAAA,EAAD,CAAOhJ,GAAI,CAAC,EAAE,IAAd,sBACAvO,EAAApO,EAAAC,cAAC2kC,GAADviC,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEE4jC,SAAU9jC,KAAKJ,MAAMkkC,SAAS9jC,KAAKE,MAAM6E,mBAK/C/E,KAAKE,MAAMwa,SACTlL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPla,MAAO,EACPuZ,cAAe,SACfzL,GAAI,0BAEJG,EAAApO,EAAAC,cAAC0lB,EAAA,EAAD,CAAOhJ,GAAI,CAAC,EAAE,IAAd,gBACAvO,EAAApO,EAAAC,cAAC4kC,GAAA,EAADxiC,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEoV,cAAe,CAACtV,KAAKE,MAAM6E,eAC3BmiB,KAAM,CACJ,CACEjK,MAAOjd,KAAKE,MAAMiD,SAAW,GAAK,OAClCjD,MAAM,CACJqB,MAAM,CAAC,IAAK,MAEd4lB,OAAO,CACL,CACE/V,KAAK,OACLlR,MAAM,CACJmmB,GAAG,CAAC,EAAE,KAGV,CACEjV,KAAK,OACLgW,QAAO,KAIb,CACEnK,MAAM,SACNmK,QAAO,EACPlnB,MAAM,CACJqB,MAAM,KAER4lB,OAAO,CACL,CACE/V,KAAK,YAIX,CACE6L,MAAM,OACN/c,MAAM,CACJqB,MAAM,CAAC,IAAK,MAEd4lB,OAAO,CACL,CACE/V,KAAK,UAIX,CACE6L,MAAM,SACN/c,MAAM,CACJqB,MAAM,CAAC,IAAK,KACZuC,eAAe,CAAC,SAAS,eAE3BqjB,OAAO,CACL,CACE/V,KAAK,aACLlR,MAAM,CACJmmB,GAAG,CAAC,EAAE,KAGV,CACEe,QAAO,EACPhW,KAAK,YAIX,CACE6L,MAAM,SACN/c,MAAM,CACJqB,MAAM,KAER4lB,OAAO,CACL,CACE/V,KAAK,YAIX,CACE6L,MAAM,QACN/c,MAAM,CACJqB,MAAM,CAAC,IAAK,IACZuC,eAAe,CAAC,SAAS,eAE3BqjB,OAAO,CACL,CACE/V,KAAK,YACLlR,MAAM,CACJmmB,GAAG,CAAC,EAAE,GACN/S,OAAO,CAAC,QAAQ,WAGpB,CACE8T,QAAO,EACPhW,KAAK,oBASnB5B,EAAApO,EAAAC,cAAC+hC,EAAA,EAAD3/B,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEsc,WAAYxc,KAAKg3B,WACjBuM,SAAUvjC,KAAKE,MAAM6E,cACrB8X,OAAmC,QAA3B7c,KAAKJ,MAAMgzB,uBApbL3uB,aCyETiiC,eAlEb,SAAAA,EAAYhmC,GAAO,IAAA4E,EAAA,OAAArB,OAAA0iC,EAAA,EAAA1iC,CAAAzD,KAAAkmC,IACjBphC,EAAArB,OAAA2iC,EAAA,EAAA3iC,CAAAzD,KAAAyD,OAAA4iC,EAAA,EAAA5iC,CAAAyiC,GAAAI,KAAAtmC,KAAME,KAbRN,MAAQ,GAYWkF,EATnB/E,cAAgB,KASG+E,EAKnBqX,mBALmB1Y,OAAAoT,EAAA,EAAApT,CAAA8D,EAAAnG,EAAA0V,KAKE,SAAAM,IAAA,OAAA7P,EAAAnG,EAAAoG,KAAA,SAAAgQ,GAAA,cAAAA,EAAA9P,KAAA8P,EAAA7P,MAAA,OACnB7C,EAAK1E,YADc,wBAAAoX,EAAAE,SAAAN,EAAApX,SALF8E,EASnB0X,WATmB/Y,OAAAoT,EAAA,EAAApT,CAAA8D,EAAAnG,EAAA0V,KASN,SAAAC,IAAA,OAAAxP,EAAAnG,EAAAoG,KAAA,SAAA0P,GAAA,cAAAA,EAAAxP,KAAAwP,EAAAvP,MAAA,OACX7C,EAAK/E,cAAcm7B,gBAAgB,gBAAe,GAClDp2B,EAAK5E,MAAMsc,aAFA,wBAAAtF,EAAAQ,SAAAX,EAAA/W,SAPX8E,EAAK1E,YAFY0E,2EAPb9E,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,yDAoB9C,OACEsP,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEiC,OAAQ7c,KAAKE,MAAM2c,QAEnBrN,EAAApO,EAAAC,cAACyb,EAAA,EAAD,CACEmM,SAAU,CAAC,QAAQ,SACnBlM,UAAW/c,KAAKE,MAAMsc,YAEtBhN,EAAApO,EAAAC,cAACyb,EAAA,EAAUE,OAAX,CACE+I,GAAI,EACJwgB,WAAY,OACZtpB,MAAO,eACPiM,KAAM,uBAGR1Z,EAAApO,EAAAC,cAACyb,EAAA,EAAUI,KAAX,KACE1N,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPuZ,cAAe,UAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExX,SAAU,EACVF,UAAW,OACXR,MAAO,aAHT,2IAKqI8M,EAAApO,EAAAC,cAAA,WALrI,iEAKyMmO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAMxX,SAAU,EAAG8a,UAAW,UAAWwJ,WAAY,UAAW8a,KAAMxiC,KAAKD,cAAcgkB,gBAAgB,CAAC,aAAc/jB,KAAKD,cAAcgkB,gBAAgB,CAAC,aALrW,MAQFvU,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEmD,GAAI,EACJla,WAAY,SACZiX,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACqa,EAAA,EAAD,CACEG,YAAa7b,KAAKwc,WAClBb,YAAa,CACXpa,MAAM,CAAC,OAAO,SAHlB,8BAhEU6c,IAAMna,WCoxBfuiC,8MAhxBb5mC,MAAQ,CACN6Y,WAAW,CACTE,OAAO,KACPH,SAAQ,GAEV4T,WAAW,KACXC,YAAY,GACZoa,gBAAgB,KAChBtY,kBAAkB,KAClBuY,kBAAkB,KAClBC,mBAAmB,KACnBC,oBAAmB,EACnB7Z,oBAAoB,KACpB8Z,2BAA0B,KAI5B9mC,cAAgB,OAsChBstB,iBAAmB,SAACpU,GAClB,IAAMmT,EAAanT,EAAEoD,OAAO1X,MAAMoD,SAAWuM,MAAM2E,EAAEoD,OAAO1X,OAASG,EAAK/E,cAAc6Q,MAAMqI,EAAEoD,OAAO1X,OAASG,EAAK/E,cAAc6Q,MAAM,GACzI9L,EAAKqoB,oBAAoBf,GAIzBtnB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5B6rB,aACAW,oBAJ0B,WAQ9BsB,cAAgB,WACd,GAAuC,OAAnCvpB,EAAKlF,MAAMmtB,oBACb,OAAO,EAGT,IAAM4B,EAAqB7pB,EAAK/E,cAAc6Q,MAAM9L,EAAKlF,MAAMmtB,qBAAqB/rB,IAAI,KAClForB,EAAatnB,EAAK5E,MAAMw2B,iBAAmB5xB,EAAK/E,cAAc6Q,MAAM9L,EAAK5E,MAAMw2B,kBAAkB31B,MAAM4tB,GAAsB,KAEnI7pB,EAAKqoB,oBAAoBf,GAEzBtnB,EAAK7D,SAAS,CACZmrB,kBAIJ4O,uBAAyB,WACvB,OAAuC,OAAnCl2B,EAAKlF,MAAMmtB,qBAGRjoB,EAAK/E,cAAc6Q,MAAM9L,EAAKlF,MAAMmtB,qBAAqB/rB,IAAI,QAGtEssB,uBAAyB,SAACP,GACxBjoB,EAAK7D,SAAS,CACZ8rB,2BAIJI,oBAAsB,WAAiB,IAAhBC,EAAgBvV,UAAA9P,OAAA,QAAAsJ,IAAAwG,UAAA,GAAAA,UAAA,GAAT,KAEvBuV,IACHA,EAAStoB,EAAKlF,MAAMwsB,YAGtB,IAAMG,GAAkBa,GAAUA,EAAOnZ,GAAGnP,EAAKlF,MAAM82B,kBAEvD5xB,EAAK7D,SAAS,CACZsrB,sBAIJ6L,6BAAU,SAAAhhB,IAAA,IAAAsvB,EAAAjP,EAAAC,EAAA,OAAAnwB,EAAAnG,EAAAoG,KAAA,SAAAgQ,GAAA,cAAAA,EAAA9P,KAAA8P,EAAA7P,MAAA,YACF++B,EAAoB5hC,EAAKlF,MAAM8mC,mBAD7B,CAAAlvB,EAAA7P,KAAA,eAAA6P,EAAA7P,KAAA,EAKkC7C,EAAKgiC,iCALvC,OAAAtvB,EAAAwB,KAmEJlU,EAAK7D,SAAS,CACZ4lC,2BAA0B,KA3DtBpP,EAAkB,SAACpe,EAAGC,GAE1B,IAAMC,EAAY,CAChBI,YAAa,UACbD,cAAe,eACfF,WAAYH,EAAKA,EAAGI,OAAS,MAGzB0V,EAAc9V,GAAoB,YAAdA,EAAGI,OAIzBH,IACFC,EAAUC,WAAa1U,EAAK/E,cAAc6Z,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUE,SACrB3U,EAAK/E,cAAc8Z,yBAAyBN,GAG9CzU,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BsmC,0BAA2B1X,EAC3B1W,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADL,CAERE,OAAO,KACPH,SAAQ,OAI8B,oBAA/B1T,EAAK5E,MAAMu3B,iBAAkCtI,GACtDrqB,EAAK5E,MAAMu3B,gBAAgBpe,GAG7BvU,EAAK+zB,kBAGDnB,EAAyB,SAACre,GAC9B,IAAMV,EAASU,EAAGiB,gBAClBxV,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BkY,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADL,CAERE,eAKN7T,EAAK/E,cAAc83B,YAAY/yB,EAAK5E,MAAM6E,cAAc2hC,EAAkBh2B,QAAQ+mB,EAAgBC,GAElG5yB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BkY,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADL,CAERE,OAAO,KACPH,SAAQ,IAEVquB,2BAA0B,MAhExB,wBAAArvB,EAAAE,SAAAN,EAAApX,WA0EVyL,6BAAU,SAAAsL,IAAA,IAAAqV,EAAAqN,EAAAC,EAAA3R,EAAAuH,EAAAyK,EAAA,OAAAxyB,EAAAnG,EAAAoG,KAAA,SAAA0P,GAAA,cAAAA,EAAAxP,KAAAwP,EAAAvP,MAAA,UAEFykB,EAAatnB,EAAKlF,MAAMwsB,WAAatnB,EAAK/E,cAAc6Q,MAAM9L,EAAKlF,MAAMwsB,YAAc,KAFrF,CAAAlV,EAAAvP,KAAA,eAAAuP,EAAApP,OAAA,UAIC,GAJD,cAOF2xB,EAAkB,SAACpgB,EAAGC,GAC1B,IAAM6V,EAA4B,YAAd9V,EAAGI,OAGjBF,EAAY,CAChBC,WAAYH,EAAGI,OACfC,cAAa,eACbC,YAAa7U,EAAK5E,MAAM6E,cACxBqqB,WAAYhD,EAAWvnB,WAGrByU,IACFC,EAAUC,WAAa1U,EAAK/E,cAAc6Z,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUE,SACrB3U,EAAK/E,cAAc8Z,yBAAyBN,GAG9CzU,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BkY,WAAY,CACVE,OAAO,KACPH,SAAQ,MAI8B,oBAA/B1T,EAAK5E,MAAMu5B,iBAAkCtK,GACtDrqB,EAAK5E,MAAMu5B,gBAAgBpgB,IAIzBqgB,EAAyB,SAACrgB,GAC9B,IAAMV,EAASU,EAAGiB,gBAClBxV,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BkY,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADL,CAERE,eAKAoP,EAAejjB,EAAKlF,MAAM8mC,kBAAkBt1B,KAC5Cke,EAAUxqB,EAAK/E,cAAc4tB,qBAAqBvB,EAAWtnB,EAAK5E,MAAM0H,YAAYlG,UAlDlFwV,EAAAvP,KAAA,EAmDoB7C,EAAKiiC,mBAAmBzX,GAnD5C,OAmDFyK,EAnDE7iB,EAAA8B,KAqDRlU,EAAK5E,MAAMqa,0BAA0BwN,EAAc,gBAAiBgS,EAAe,KAAMN,EAAiBC,GAE1G50B,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BkY,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADL,CAERD,SAAQ,OA1DJ,yBAAAtB,EAAAQ,SAAAX,EAAA/W,WA+DVgwB,uCAAoB,SAAA/qB,IAAA,OAAAsC,EAAAnG,EAAAoG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAClB7C,EAAK7D,SAAS,CACZwX,WAAY,CACVE,OAAO,KACPH,SAAQ,KAJM,wBAAA/Q,EAAAiQ,SAAAzS,EAAAjF,WASpButB,eAAiB,SAAClB,GAChBvnB,EAAK7D,SAAS,CACZorB,mBA4EJ2a,gBAAkB,WAChBliC,EAAK0oB,eAGPyZ,kBAAoB,WAClBniC,EAAK7D,SAAS,CACZ2lC,oBAAmB,gFA9TjB5mC,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,4JAK9CF,KAAKI,kRAICJ,KAAKwtB,iMAGYltB,EAAUC,8EACjCP,KAAKI,YAECqa,EAAiBna,EAAUoa,UAAY1a,KAAKE,MAAMwa,QAClDwsB,EAA0B5mC,EAAUo2B,mBAAqB12B,KAAKE,MAAMw2B,kBACtEjc,IAAkBysB,kCACdlnC,KAAKwtB,mBAGsBxtB,KAAKJ,MAAMmtB,sBAAwBxsB,EAAUwsB,qBAE9E/sB,KAAKquB,gBAGmBruB,KAAKJ,MAAMwsB,aAAe7rB,EAAU6rB,YAE5DpsB,KAAKyuB,6MAiNgB0Y,kFACjBxX,EAAkB,GAClBjD,EAAmB1sB,KAAKD,cAAcgkB,gBAAgB,CAAC,QAAQ,kBAAkB/jB,KAAKE,MAAM6E,0DAGzF,cAGuB2nB,EAAiBiD,gBACrByX,yCACJpnC,KAAKD,cAAcu7B,gBAAgBt7B,KAAKE,MAAM6E,cAAcoiC,GAAU,iBAAtFtN,mBACoB75B,KAAKD,cAAcw7B,oBAAoB1B,WAA7DC,SAEA95B,KAAKJ,MAAMysB,cAEbyN,GADAA,EAAgB95B,KAAKD,cAAc6Q,MAAMkpB,IACX1wB,MAAM0wB,EAAc/4B,MAAMf,KAAKD,cAAc6Q,MAAM5Q,KAAKJ,MAAMysB,aAAarrB,IAAI,OAC7G84B,EAAgB95B,KAAKD,cAAcy7B,aAAa1B,IAGlDnK,EAAgB9lB,KAAKgwB,GACrBlK,EAAgB9lB,KAAKiwB,oCAGhBnK,8QAIDvD,EAAapsB,KAAKJ,MAAMwsB,WAAapsB,KAAKD,cAAc6Q,MAAM5Q,KAAKJ,MAAMwsB,YAAc,4BAGvFib,EAA6Bjb,oCAEFpsB,KAAKD,cAAculC,kBAAkBtlC,KAAKE,MAAM0H,qBAAvEu9B,YAEJkC,EAA6BA,EAA2BtmC,MAAMokC,4BAGhEkC,EAA6BrnC,KAAKD,cAAc6Q,MAAM,kBAGlD02B,EAA4BtnC,KAAKD,cAAc4tB,qBAAqB0Z,EAA2BrnC,KAAKE,MAAM0H,YAAYlG,oBAChG1B,KAAKD,cAAciuB,iBAAiBhuB,KAAKE,MAAM0H,YAAYsM,KAAKsG,MAAM8sB,YAA9Fb,YAEFA,EAAkBA,EAAgB1lC,MAAM,MAG1Cf,KAAKiB,SAAS,CACZwlC,sSAMsBzmC,KAAKJ,MAAM8mC,uDAA2B1mC,KAAKD,cAAc+uB,sDAA7E4X,yCAES1mC,KAAKD,cAAc+3B,mBAAmB93B,KAAKE,MAAM0H,YAAYsM,KAAKsG,MAAMksB,EAAkBh2B,QAAQ1Q,KAAKE,MAAMwa,mFAErH,0QAMyB1a,KAAKD,cAAc+uB,qCAA7C4X,kBACkC1mC,KAAK8mC,wCAAvCD,SAEN7mC,KAAKiB,SAAS,CACZylC,oBACAG,iKAcK,IAAA3lC,EAAAlB,KAEP,IAAKA,KAAKE,MAAM6E,cACd,OAAO,KAIT,IAAMwiC,EAAiBvnC,KAAKJ,MAAM+mC,oBAAsB3mC,KAAKJ,MAAM+mC,mBAAmB1yB,GAAG,GAEzF,OACEzE,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZiX,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,CAAC,EAAE,KACVsC,WAAY,UACZiX,cAAe,SACfhX,eAAgB,UAGZ9D,KAAKE,MAAMw2B,kBAAoB12B,KAAKE,MAAMw2B,iBAAiBziB,GAAG,IAC5DzE,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,GAEPiO,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT9C,EAAE,EACFgD,GAAG,CAAC,EAAE,KAGR5D,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE/W,WAAY,SACZiX,cAAe,UAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZiX,cAAe,OAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE5W,KAAM,QACNoN,KAAOpR,KAAKJ,MAAMinC,0BAA4B,WAAa,WAC3DnkC,MAAQ1C,KAAKJ,MAAMinC,0BAA4B7mC,KAAKE,MAAM2C,MAAMyI,OAAOC,aAAakO,OAAOwO,UAAY,aAEzGzY,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEO,GAAI,EACJ/X,SAAU,EACVV,MAAO,WACPQ,UAAW,QAJb,+BASFsM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJja,MAAO,EACPsC,WAAY,SACZiX,cAAe,OAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE5W,KAAM,QACNoN,KAAOm2B,EAAiB,WAAa,WACrC7kC,MAAQ6kC,EAAiBvnC,KAAKE,MAAM2C,MAAMyI,OAAOC,aAAakO,OAAOwO,UAAY,aAEnFzY,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEO,GAAI,EACJ/X,SAAU,EACVV,MAAO,WACPQ,UAAW,QAJb,gBAMgBlD,KAAKE,MAAM0H,YAAYsM,KAAKsG,UAM/Cxa,KAAKJ,MAAMinC,0BAkDV7mC,KAAKJ,MAAM6Y,WAAWD,QACtBhJ,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJV,cAAe,UAEftL,EAAApO,EAAAC,cAAC+Z,EAAA,EAAD,CACEoI,KAAMxjB,KAAKE,MAAMsjB,KACjBnI,SAAQ,uBACRE,KAAMvb,KAAKJ,MAAM6Y,WAAWE,OAC5B2C,WAAU,gCACV0U,kBAAmBhwB,KAAKgwB,kBAAkBxS,KAAKxd,SAInDwP,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJja,MAAO,GAEPiO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE/W,WAAY,SACZiX,cAAe,OAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,6BAGApL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEyQ,UAAW,MACXC,QAAO,yDAEP9b,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEO,GAAI,EACJnX,KAAM,MACNtB,MAAO,YACP0O,KAAM,kBAIZ5B,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJ3X,WAAY,SACZiX,cAAe,MACfhX,eAAgB,iBAGd,CAAC,GAAI,GAAI,EAAE,GAAGgM,IAAK,SAAAsgB,GAAQ,OACzB5gB,EAAApO,EAAAC,cAACgvB,GAAA,EAAD,CACEnd,UAAW,CACT9C,EAAE,GAEJ8K,UAAW,CACT9X,SAAS,GAEXktB,WAAYF,EACZ3d,IAAG,YAAAC,OAAc0d,GACjBG,YAAa,kBAAIrvB,EAAKqsB,eAAe6C,IACrCzI,SAAUzmB,EAAKtB,MAAMysB,cAAgBrqB,WAAWouB,QAKxD5gB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJC,GAAI,EACJla,MAAO,EACPuZ,cAAe,UAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,EACJ5X,WAAY,SACZiX,cAAe,MACfhX,eAAgB9D,KAAKJ,MAAM6mC,gBAAkB,gBAAkB,YAG7DzmC,KAAKJ,MAAM6mC,iBACTj3B,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACP0nB,SAAU,MACVplB,WAAY,SACZiX,cAAe,OAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExX,SAAU,EACVJ,WAAY,EACZE,UAAW,QACXX,MAAO,CACLI,WAAW,UAEbD,MAAQV,WAAWhC,KAAKJ,MAAM6mC,gBAAgB5hC,QAAQ,IAAI,EAAI7E,KAAKE,MAAM2C,MAAMyI,OAAOC,aAAakO,OAAO+W,OAASxwB,KAAKE,MAAM2C,MAAMyI,OAAOC,aAAakO,OAAOwO,WAGvG,IAAtDjmB,WAAWhC,KAAKJ,MAAM6mC,gBAAgB5hC,QAAQ,IAC5C,cADF,GAAA6N,OAEM1S,KAAKJ,MAAM6mC,gBAAgBxyB,GAAG,GAAK,aAAe,UAFxD,KAAAvB,OAEsE1S,KAAKJ,MAAM6mC,gBAAgBj9B,MAAM3E,QAAQ,GAF/G,MAKJ2K,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEyQ,UAAW,MACXC,QAAStrB,KAAKJ,MAAM6mC,gBAAgBxyB,GAAG,GAAK,uHAAyH,kHAErKzE,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEO,GAAI,EACJnX,KAAM,MACNtB,MAAO,YACP0O,KAAM,kBAOdpR,KAAKE,MAAMw2B,kBACTlnB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACP0nB,SAAU,MACVplB,WAAY,SACZiX,cAAe,MACfhX,eAAgB,YAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExX,SAAU,EACVJ,WAAY,EACZN,MAAO,YACPQ,UAAW,QACXwkB,WAAY,YACZvJ,QAAU,SAAClF,GAAD,OAAO/X,EAAKosB,uBAAuB,MAC7C/qB,MAAO,CACL0mB,SAAS,OACT3B,SAAS,SACT3kB,WAAW,SACX8tB,aAAa,aAGdzwB,KAAKE,MAAMw2B,iBAAiB7xB,QAAQ7E,KAAKE,MAAMiD,SAAW,EAAI,GAdjE,IAcsEnD,KAAKE,MAAM6E,iBAMzFyK,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE8V,IAAK,EACLnf,KAAM,SACN8L,UAAU,EACV/J,OAAQ,QACR2K,aAAc,EACdjb,WAAY,IACZsL,UAAW,kBACXqiB,YAAW,gBACXrT,SAAUtd,KAAKqtB,iBAAiB7P,KAAKxd,MACrC4wB,OAAM,aAAAle,OAAe1S,KAAKE,MAAM2C,MAAMyI,OAAOulB,SAC7ClsB,MAAiC,OAA1B3E,KAAKJ,MAAMwsB,WAAsBpsB,KAAKD,cAAc6Q,MAAM5Q,KAAKJ,MAAMwsB,YAAYvnB,UAAY,KAEtG2K,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJ3X,WAAY,SACZiX,cAAe,MACfhX,eAAgB,iBAGd,CAAC,GAAG,GAAG,GAAG,KAAKgM,IAAK,SAAAwgB,GAAU,OAC5B9gB,EAAApO,EAAAC,cAACgvB,GAAA,EAAD,CACEC,WAAYA,EACZ7d,IAAG,YAAAC,OAAc4d,GACjBC,YAAa,kBAAIrvB,EAAKosB,uBAAuBgD,IAC7C3I,SAAUzmB,EAAKtB,MAAMmtB,sBAAwBnoB,SAAS0rB,QAK9D9gB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJ1X,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACqa,EAAA,EAAD,CACEC,YAAa,CACXH,GAAG,EACHja,MAAM,CAAC,EAAE,IACTqa,SAAS5b,KAAKJ,MAAM2sB,gBAEtB1Q,YAAa7b,KAAKyL,QAAQ+R,KAAKxd,OANjC,cA7NNA,KAAKJ,MAAM6Y,WAAWD,QACpBhJ,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJV,cAAe,UAEftL,EAAApO,EAAAC,cAAC+Z,EAAA,EAAD,CACEoI,KAAMxjB,KAAKE,MAAMsjB,KACjBnI,SAAQ,uBACRE,KAAMvb,KAAKJ,MAAM6Y,WAAWE,OAC5B2C,WAAU,gCACV0U,kBAAmBhwB,KAAKgwB,kBAAkBxS,KAAKxd,SAInDwP,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT9C,EAAE,EACFoL,GAAG,IAGLhM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE/W,WAAY,SACZiX,cAAe,UAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE5W,KAAM,QACNoN,KAAM,WACN1O,MAAO,aAET8M,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJpY,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,mBAMmBlD,KAAKE,MAAM6E,cAN9B,oEAQAyK,EAAApO,EAAAC,cAACqa,EAAA,EAAD,CACEC,YAAa,CACXH,GAAG,EACHja,MAAM,CAAC,EAAE,KAEXsa,YAAa7b,KAAKo4B,QAAQ5a,KAAKxd,OALjC,uBA7cDiE,mCCkbZujC,8MAhbb5nC,MAAQ,CACNqc,UAAU,KACVzX,UAAU,KACVF,WAAW,KACXmjC,WAAW,KACXjc,YAAY,QAIdzrB,cAAgB,gFAGVC,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,2JAK9CF,KAAKI,YACLJ,KAAK0nC,qMAGkBpnC,EAAWC,gFAClCP,KAAKI,YAECunC,EAA4BrnC,EAAUsnC,qBAAuB5nC,KAAKE,MAAM0nC,oBACzDlnC,KAAKC,UAAUL,EAAUgV,iBAAmB5U,KAAKC,UAAUX,KAAKE,MAAMoV,gBACvEqyB,IAClB3nC,KAAKiB,SAAS,CACZuD,UAAU,MACV,WACAtD,EAAKgX,sBAIa5X,EAAU6C,WAAanD,KAAKE,MAAMiD,UAEtDnD,KAAK0nC,uVAMHpyB,EAAgBtV,KAAKE,MAAMoV,gBACRA,EAAcvN,SACnCuN,EAAgB7R,OAAO+B,KAAKxF,KAAKE,MAAM6gB,2BAGlB/gB,KAAKD,cAAc8nC,YAAY7nC,KAAKE,MAAMwa,QAAQ,EAAE,SAASpF,UAA9EwyB,SAEAtjC,EAAY,GACdujC,EAAgB,GACdC,EAAe,GACjBC,EAAmB,KACnBzH,EAAexgC,KAAKD,cAAc6Q,MAAM,GACtC+b,EAAoB3sB,KAAKD,cAAcgkB,gBAAgB,CAAC,QAAQ,iBAElE+jB,GAAYA,EAAS//B,QAEvB+/B,EAASl/B,QAAQ,SAACyQ,EAAGmI,GAMnB,GAJKwmB,EAAa3uB,EAAGkC,QACnBysB,EAAa3uB,EAAGkC,MAAQ,KAGtBysB,EAAa3uB,EAAGkC,MAAMhG,SAAS8D,EAAG7N,QAAtC,CAIAy8B,EAAmBA,EAAmB3+B,KAAKonB,IAAIuX,EAAiBrjC,SAASyU,EAAG6uB,YAActjC,SAASyU,EAAG6uB,WAEtG,IAAMC,EAAcvrB,EAAK7c,cAAc6Q,MAAMyI,EAAG8uB,aAEhD,OAAQ9uB,EAAG7N,QACT,IAAK,UACL,IAAK,aACL,IAAK,iBACL,IAAK,kBACHg1B,EAAeA,EAAa1/B,KAAKqnC,GACnC,MACA,IAAK,WACL,IAAK,cACL,IAAK,kBACL,IAAK,mBACH3H,EAAeA,EAAap3B,MAAM++B,GAOlC3H,EAAazsB,GAAG,KAClBysB,EAAe5jB,EAAK7c,cAAc6Q,MAAM,IAG1C,IAAMpF,EAAS6N,EAAG7N,OACZyf,EAAUuV,EACV0H,EAAYtjC,SAASyU,EAAG6uB,WACxBha,EAAkBtR,EAAK7c,cAAcgJ,iBAAiBsQ,EAAG6U,gBAAgBvB,EAAkBjrB,UAI5FwsB,EAAgB5Z,SAAY4Z,EAAgB5Z,UAC/CyzB,EAAcl+B,KAAK,CACjB2B,SACAyf,UACAid,YACAC,cACAja,oBAGF8Z,EAAa3uB,EAAGkC,MAAM1R,KAAK2B,OAM7ByQ,EAAY,KACVmsB,EAAcpoC,KAAKD,cAAcmP,YAAY,IAAI2G,WAE/C7V,KAAKE,MAAM0nC,0BACZ,iBAGA,kBAGA,mBAGA,2CARH3rB,EAAYmsB,EAAY9rB,QAAQC,SAAS,EAAE,4CAG3CN,EAAYmsB,EAAY9rB,QAAQC,SAAS,EAAE,6CAG3CN,EAAYmsB,EAAY9rB,QAAQC,SAAS,EAAE,6CAG3CN,EAAYmsB,EAAY9rB,QAAQC,SAAS,EAAE,6CAG3CN,EAAY,yCAIVpH,EAAO,GACTwzB,EAAe,GACfC,EAAgB,KAChBC,EAAgB,KAChB1iC,EAAgB,KACd2iC,EAAyB,GACzBC,EAAwB,GAC1BC,EAAoB1oC,KAAKD,cAAc6Q,MAAM,GAE3C+3B,EAAgB/jC,UAAS,IAAIiR,MAAOrN,UAAU,KAAM,gBAEjCxI,KAAKD,cAAckhB,gBAAgBxd,OAAOgG,OAAOzJ,KAAKE,MAAM6gB,iBAAiB,GAAGrQ,SAAQ,EAAMu3B,EAAiB,MAAK,EAAM,cAA7IW,mIAIAC,EAAgB,GAChBC,EAAiB,GACrBZ,EAAY5+B,KAAKonB,IAAIiY,EAAcT,GAC/Ba,EAAansB,EAAK7c,cAAcmP,YAAsB,IAAVg5B,GAG1Cc,EAAoBJ,EAAWl/B,OAAO,SAAA2P,GAAE,OAAKA,EAAGjT,WAAWkiC,GAAiBjvB,EAAGjT,WAAW8hC,KAG5Fe,EAAmBlB,EAAcr+B,OAAO,SAAA2P,GAAE,OAAKA,EAAG6uB,WAAWA,KAAeI,GAAiBjvB,EAAG6uB,UAAUI,MAExFvgC,4BAChBsgC,sBACFY,EAAmBZ,EACba,EAAiBzlC,OAAOgG,OAAOw/B,GAAkB/nB,MACjDha,EAAiBlF,WAAWknC,EAAeje,SAE3Cke,EAAgB1lC,OAAOgG,OAAOu/B,GAAmB9nB,MACnDgN,EAAkB,MAClBib,oCACsBvsB,EAAK7c,cAAckuB,mBAAmBkb,EAAcn0B,qBAA5EkZ,iBAIEhnB,EAAe,GAAKghC,EAAUD,GAAoB/Z,IAEpDgb,EAAehb,gBAAkBA,EACjC+a,EAAmB,CAACC,4BAGtBD,EAAmB,CAAC,CAClBhe,QAAQrO,EAAK7c,cAAc6Q,MAAM,GACjCsd,gBAAgBtR,EAAK7c,cAAc6Q,MAAM,aAKzCw4B,EAAS3lC,OAAOC,OAAO,GAAGulC,GAAkB/nB,MAC9CmoB,EAAgBzsB,EAAK7c,cAAc6Q,MAAMw4B,EAAOne,SAASlqB,MAAMqoC,EAAOlb,iBAE1E4a,EAAenc,EAAkBnS,OAASoC,EAAK7c,cAAc6Q,MAAMw4B,EAAOne,SAC1Eyd,EAAoBW,EAEpBR,EAAgBI,GAIE,OAAdhtB,GAAsB8sB,EAAWvpB,cAAcvD,MAE7C8sB,EAAWnzB,QAAQ,IAAIC,KAAO,SAChCkzB,EAAansB,EAAK7c,cAAcmP,YAAY,IAAI2G,OAI5CyzB,EAAgBP,EAAWtgC,OAAO,oBAGxCoM,EAAKk0B,EAAWtgC,OAAO,eAAiB,EAElC8gC,EAA0BvnC,WAAWA,WAAW0mC,EAAkB7jC,QAAQ,KAEhF2jC,EAAuBc,GAAiBC,EACxCd,EAAsBa,GAAiBR,EAIvCP,EAAkC,OAAlBA,EAAyBgB,EAA0BjgC,KAAKonB,IAAI6X,EAAcgB,GAC1F1jC,EAAkC,OAAlBA,EAAyB0jC,EAA0BjgC,KAAKC,IAAI1D,EAAc0jC,IAG5FjB,EAAgBJ,EAChBG,EAAeQ,oDAzERX,EAAUD,eAAiBC,GAAWS,6CAAtCT,oBAAoDA,GAAWloC,KAAKE,MAAMwrB,yCAiInF,IArDM8d,EAAqB/lC,OAAO+B,KAAKgjC,GAAwB14B,IAAI,SAAAzJ,GAAI,MAAK,CAC1E4J,EAAE5J,EACF6J,EAAEs4B,EAAuBniC,GACzBojC,SAAShB,EAAsBpiC,MAG7BV,EAAY,EAChB6jC,EAAmB5gC,QAAS,SAACoI,EAAKwQ,GAChC,IAAMvM,EAAU3L,KAAK4L,MAAMvP,EAAU6jC,EAAmBzhC,OAAO,KAC/DyhC,EAAmBhoB,GAAOvM,QAAUA,EACpCtP,MAyBFnB,EAAUqF,KAAK,CACbwF,GAAG,MACH3M,MAAO,OAAQ1C,KAAKD,cAAcgkB,gBAAgB,CAAC,QAAQ,SAAS,MAAM,QAAQ,QAAQlU,KAAK,KAAK,IACpGb,KAAKw6B,IAGHE,EAAkB,EAClB7jC,EAAc0iC,EAAc,IAC9BmB,EAAkB,GAGhB7jC,IAAkB0iC,IACpBA,EAAgBj/B,KAAKC,IAAI,EAAE1D,EAAc,IAGtB,EACfH,GAAaG,EAAc0iC,GADZ,EAEf3iC,EAAc,GACXY,EAAE,EAAEA,GAHQ,EAGQA,IACrBo+B,EAAa5iC,WAAWA,WAAWumC,EAAe/hC,EAAEd,GAAYb,QAAQ,IAC9Ee,EAAYiE,KAAK+6B,GAGS,GACtB+E,EAAYlmC,OAAOgG,OAAOoL,GAAM9M,OAChC6hC,EAAgBtgC,KAAKC,IAAI,EAAED,KAAKugC,KAAKF,EAFf,KAItBrlC,EAAa,CACjBgN,OAAO,CACLC,KAAM,OACN9I,OAAQ,kBAEViJ,OAAO,CACLH,KAAM,SACNI,SAAS,EACT+e,IAAK6X,EACLh/B,IAAK1D,GAEP2L,QAAQ,gBACRC,QAAQ,SAAA9M,GAAK,OAAIiY,EAAK7c,cAAcqC,YAAYuC,EAAM+kC,IACtDt/B,WAAYpK,KAAKE,MAAMiD,SAAW,KAAO,CACvCmH,OAAQ,GACRD,SAAS,EACT5B,OAAQ,QACR8B,YAAa,GACbC,OAAQ,SACRC,aAAc,GACdC,eAAgB,SAChBC,WAAW,SAASi/B,EAAc,SAEpChkC,cACAuG,UAAU,EACVC,SAAQ,EACRxB,SAAU5K,KAAKE,MAAMiD,SAAW,KAAO,CACrCmH,OAAQ,GACRD,SAAU,EACVG,OAAQ,OACRD,YAAa,GACbO,aAAc,EACdL,cAAe,GACfE,WAAW/E,EACX8E,eAAgB,SAChBjC,OAAQ,SAAAkB,GAAC,OAAIiT,EAAK7c,cAAcgL,iBAAiBpB,EAAE,KAErD0C,SAAQ,EACRC,WAAW,IACXw9B,YAAY,GACZt9B,YAAW,EACXC,aAAa,IACbE,aAAY,EACZJ,MAAM,YACNG,aAAY,EACZE,iBAAiB,EACjBtB,OAAO,SAAAnB,GAAC,OAAIA,EAAEzH,OACdmK,mBAAmB,GACnBk9B,kBAAkBxB,EAClB/5B,WAAW,CAAEC,KAAM,QAASC,UAAW,IACvC7L,MAAM,CACJoI,KAAM,CACJ4C,MAAO,CACLC,KAAM,CACJ1K,SAAS,GACTJ,WAAW,IACXqI,KAAKxI,KAAMyI,OAAOhB,OAClB1H,WAAYC,KAAMC,MAAMiL,aAI9BC,KAAM,CACJC,KAAM,CACJrC,OAAQ,UAAWC,gBAAiB,SAa1C8C,OAAQ3O,KAAKE,MAAMiD,SAAW,CAAEyL,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAAO,CAAEH,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IACrH8C,aAAa,SAACC,GAAc,IAEpB1C,EADY0C,EAAVC,MACYC,OAAO,GAC3B,OACExC,EAAApO,EAAAC,cAAC2oC,GAAA,EAAD,CACE56B,MAAOA,GAEPI,EAAApO,EAAAC,cAAC4oC,GAAA,EAAD,CACEvnC,MAAO0M,EAAM1M,MACbwH,MAAOkF,EAAM6C,QACbtN,MAAK,KAAA+N,OAAOtD,EAAMJ,KAAKmD,cAGM,kBAAxB/C,EAAMJ,KAAKy6B,UAAyBhmC,OAAO+B,KAAK4J,EAAMJ,KAAKy6B,UAAU1hC,OAAO,GACjFtE,OAAO+B,KAAK4J,EAAMJ,KAAKy6B,UAAU35B,IAAI,SAAA0K,GACnC,GAAIA,IAAUpL,EAAM6C,QAClB,OAAO,KAET,IAAMi4B,EAAYttB,EAAK7c,cAAcgkB,gBAAgB,CAAC,QAAQ,SAASvJ,IACvE,GAAI0vB,EAAU,CACZ,IAAMje,EAAYie,EAAU94B,KAAO84B,EAAU94B,KAAOoJ,EAC9C9X,EAAQwnC,EAAUxnC,MAAMynC,IACxBlf,EAAU7b,EAAMJ,KAAKy6B,SAASjvB,GAChC4vB,EAAmBxtB,EAAK7c,cAAcqC,YAAY6oB,EAAQ,GAC9D,GAAIjpB,WAAWipB,IAAU,IACvB,OACEzb,EAAApO,EAAAC,cAAC4oC,GAAA,EAAD,CACE//B,MAAO+hB,EACPvpB,MAAOA,EACP+P,IAAG,OAAAC,OAAS8H,GACZ7V,MAAK,GAAA+N,OAAK03B,KAKlB,OAAO,UAQnBpqC,KAAKiB,SAAS,CACZuD,YACAF,mJAKF,OACEkL,EAAApO,EAAAC,cAAC8W,EAAA,EAAD1U,OAAAC,OAAA,CACE6N,KAAMnJ,IACNgQ,YAAY,GACRpY,KAAKJ,MAAM0E,WAHjB,CAIE0K,KAAMhP,KAAKJ,MAAM4E,UACjB6T,SAAUrY,KAAKE,MAAMmY,SACrB/E,OAAQtT,KAAKE,MAAMsrB,YACnBlT,eAAgBtY,KAAKE,MAAMoY,yBA3aArU,aCgdpBomC,8MA9cbzqC,MAAQ,CACN0qC,QAAQ,KACR5gB,iBAAiB,GACjBE,qBAAqB,QAIvB7pB,cAAgB,gFAGVC,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,4JAK9CF,KAAKI,kRAKCJ,KAAKD,cAAcwqC,6CAInBvqC,KAAKD,cAAcyqC,2MAuHFlqC,EAAUC,mEACjCP,KAAKI,kJAIL,OACEoP,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPuZ,cAAe,UAGb9a,KAAKJ,MAAM8pB,iBAAiB3hB,OAAO,GACjCyH,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPka,GAAI,CAAC,EAAE,GACPD,GAAI,CAAC,EAAE,GACP3X,WAAY,SACZiX,cAAe,CAAC,SAAS,OACzBhX,eAAgB,iBAGd9D,KAAKJ,MAAM8pB,iBAAiB5Z,IAAI,SAACnG,EAAEnD,GAAH,OAC9BgJ,EAAApO,EAAAC,cAACuZ,EAAA,EAADnX,OAAAC,OAAA,GACMiG,EAAEqR,UADR,CAEEF,cAAe,SACfrI,IAAG,mBAAAC,OAAqBlM,KAExBgJ,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACTC,GAAG,CAAC,EAAE,GACNsI,GAAG,CAAC,EAAE,KAGRjM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZiX,cAAe,SACfhX,eAAgB,UAGd6F,EAAEzJ,MAAMgrB,SAAWvhB,EAAEzJ,MAAMgrB,SACzB1b,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEwK,WAAY,EACZpiB,WAAY,CAAC,EAAE,GACfN,MAAO,YACPE,WAAY,UACZQ,SAAU,CAAC,EAAE,SACbulB,wBAAyB,CAAEC,OAAQjf,EAAEzJ,MAAMyE,SAKjD6K,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJxY,WAAY,EACZI,SAAU,CAAC,EAAE,GACbV,MAAO,YAENiH,EAAEzJ,MAAM+c,aAS3BzN,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACTE,GAAG,EACHD,GAAG,IAGL3D,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACP4Z,GAAI,CAAC,EAAE,GACP9L,GAAI,kBAEJG,EAAApO,EAAAC,cAACopC,GAADhnC,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEsrB,YAAa,IACbnT,SAAU,iBACVqT,iBAAkB1rB,KAAKD,cAAc4rB,oBAAoB,MAAM,OAGnEnc,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPuZ,cAAe,CAAC,SAAS,QAEzBtL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPla,MAAO,CAAC,EAAE,IACVsC,WAAY,SACZiX,cAAe,SACfhX,eAAgB,cAEhB0L,EAAApO,EAAAC,cAAC0lB,EAAA,EAAD,CACEtL,GAAI,EACJrY,SAAU,CAAC,EAAE,GACbwoB,UAAWC,IAAQC,IAHrB,aAOAtc,EAAApO,EAAAC,cAAC8pB,EAAA,EAAD1nB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEsa,MAAOxa,KAAKE,MAAM6E,cAClBqmB,UAAW,CACTha,KAAK,kBACLlR,MAAM,CACJwB,SAAS,EACTqqB,aAAa,EACb/oB,WAAW,IACXI,SAAS,CAAC,QAAQ,SAClBV,MAAMG,KAAMyI,OAAOvI,QACnBiY,UAAU,CACRlX,eAAe,gBAMzB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPla,MAAO,CAAC,EAAE,IACVsC,WAAY,SACZiX,cAAe,SACfhX,eAAgB,cAEhB0L,EAAApO,EAAAC,cAAC0lB,EAAA,EAAD,CACEtL,GAAI,EACJrY,SAAU,CAAC,EAAE,GACbwoB,UAAWC,IAAQC,IAHrB,cAOAtc,EAAApO,EAAAC,cAAC8pB,EAAA,EAAD1nB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEsa,MAAOxa,KAAKE,MAAM6E,cAClBqmB,UAAW,CACTha,KAAK,gCACLlR,MAAM,CACJwB,SAAS,EACTqqB,aAAa,EACbxpB,MAAM,CACJS,WAAW,IACXN,MAAMG,KAAMyI,OAAOvI,QACnBK,SAAUpD,KAAKE,MAAMiD,SAAW,QAAU,SAE5C6X,UAAU,CACRlX,eAAe,eAKvB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPia,GAAI,QAEJhM,EAAApO,EAAAC,cAAC8pB,EAAA,EAAD1nB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEsa,MAAOxa,KAAKE,MAAM6E,cAClBqmB,UAAW,CACTha,KAAK,oBACLlR,MAAM,CACJkD,SAAS,EACTJ,WAAW,EACXN,MAAM,WACNsY,UAAU,CACRlX,eAAe,iBAO3B0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPla,MAAO,CAAC,EAAE,IACVsC,WAAY,SACZiX,cAAe,SACfhX,eAAgB,cAEhB0L,EAAApO,EAAAC,cAAC0lB,EAAA,EAAD,CACEtL,GAAI,EACJrY,SAAU,CAAC,EAAE,GACbwoB,UAAWC,IAAQC,IAHrB,YAOAtc,EAAApO,EAAAC,cAAC8pB,EAAA,EAAD1nB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEsa,MAAOxa,KAAKE,MAAM6E,cAClBqmB,UAAW,CACTha,KAAK,uBACLlR,MAAM,CACJwB,SAAS,EACTqqB,aAAa,EACbxpB,MAAM,CACJS,WAAW,IACXI,SAASpD,KAAKE,MAAMiD,SAAW,QAAU,QACzCT,MAAMG,KAAMyI,OAAOvI,SAErBiY,UAAU,CACRlX,eAAe,gBA4CzB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPla,MAAO,CAAC,EAAE,IACVsC,WAAY,SACZiX,cAAe,SACfhX,eAAgB,cAEhB0L,EAAApO,EAAAC,cAAC0lB,EAAA,EAAD,CACEtL,GAAI,EACJrY,SAAU,CAAC,EAAE,GACbwoB,UAAWC,IAAQC,IAHrB,eAOAtc,EAAApO,EAAAC,cAAC8pB,EAAA,EAAD1nB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEsa,MAAOxa,KAAKE,MAAM6E,cAClBqmB,UAAW,CACTha,KAAK,WACLlR,MAAM,CACJwB,SAAS,EACTsB,WAAW,IACXI,SAAS,CAAC,QAAQ,SAClBV,MAAMG,KAAMyI,OAAOvI,QACnBiY,UAAU,CACRlX,eAAe,gBAMzB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPla,MAAO,CAAC,EAAE,IACVsC,WAAY,SACZiX,cAAe,SACfhX,eAAgB,cAEhB0L,EAAApO,EAAAC,cAAC0lB,EAAA,EAAD,CACEtL,GAAI,EACJrY,SAAU,CAAC,EAAE,GACbwoB,UAAWC,IAAQC,IAHrB,gBAOAtc,EAAApO,EAAAC,cAAC8pB,EAAA,EAAD1nB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEsa,MAAOxa,KAAKE,MAAM6E,cAClBqmB,UAAW,CACTha,KAAK,mBACLlR,MAAM,CACJwB,SAAS,EACTsB,WAAW,IACXI,SAAS,CAAC,QAAQ,SAClBV,MAAMG,KAAMyI,OAAOvI,QACnBiY,UAAU,CACRlX,eAAe,0BAncJG,aCyoClBghC,8MAloCbrlC,MAAQ,CACNwsB,WAAW,GACX3T,WAAW,GACXysB,UAAU,KACVzS,UAAU,KACVC,WAAW,KACXlnB,OAAO,UACPonB,YAAY,KACZhrB,YAAY,KACZkxB,aAAa,KACb9F,cAAc,KACdjuB,cAAc,KACdgc,gBAAgB,GAChB2pB,cAAc,KACdC,eAAe,KACfpe,gBAAe,EACf2B,gBAAgB,KAChBuY,gBAAgB,KAChB/P,iBAAiB,KACjB9I,iBAAiB,KACjBmS,iBAAiB,KACjB6K,iBAAiB,KACjBle,iBAAiB,KACjBI,mBAAmB,GACnB6S,kBAAkB,KAClB7L,kBAAiB,EACjBnH,kBAAkB,KAClBC,kBAAkB,KAClBC,kBAAkB,KAClBsB,kBAAkB,KAClBpB,oBAAoB,GACpB8d,qBAAqB,GACrB9H,oBAAoB,KACpB/V,qBAAoB,EACpB2K,qBAAqB,QAIvB53B,cAAgB,OAUhBi3B,WAAa,WACXlyB,EAAK7D,SAAS,CACZ2xB,YAAa,UAIjBqE,eAAiB,SAAArE,GACf9tB,EAAK7D,SAAS,CACZ2xB,mBAIJ1F,oBAAsB,SAACF,GACrBloB,EAAK7D,SAAS,CACZ+rB,2BAIJ8d,gBAAkB,SAAC/lC,GACjB,IAAM6pB,EAAc9pB,EAAK/E,cAAcgkB,gBAAgB,CAAC,UACxDjf,EAAK5E,MAAMskB,YAAX,GAAA9R,OAA0Bkc,EAAY7L,OAAO2F,MAA7C,KAAAhW,OAAsD3N,OAQxDgmC,uDAAmB,SAAA3zB,EAAOrS,GAAP,IAAAgc,EAAA8pB,EAAAne,EAAA9kB,EAAA,OAAAL,EAAAnG,EAAAoG,KAAA,SAAAgQ,GAAA,cAAAA,EAAA9P,KAAA8P,EAAA7P,MAAA,OACXoZ,EAAkBjc,EAAK/E,cAAckvB,0BACrC4b,EAAuB/lC,EAAK/E,cAAcgkB,gBAAgB,CAAC,QAAQ,oBACnE2I,EAAmBme,EAAqB9lC,GACxC6C,EAAcmZ,EAAgB2L,EAAiBse,WACrDlmC,EAAK7D,SAAS,CACZ2G,cACA7C,gBACAgc,kBACA2L,qBATe,wBAAAlV,EAAAE,SAAAN,EAAApX,iEAanB0lC,oCAAiB,SAAA3uB,IAAA,IAAA8zB,EAAA9lC,EAAA4V,EAAAoG,EAAA2L,EAAA9kB,EAAAoL,EAAAW,EAAAi3B,EAAAje,EAAAC,EAAA+K,EAAA/jB,EAAAgD,EAAA,OAAArP,EAAAnG,EAAAoG,KAAA,SAAA0P,GAAA,cAAAA,EAAAxP,KAAAwP,EAAAvP,MAAA,UAETkjC,EAAuB/lC,EAAK/E,cAAcgkB,gBAAgB,CAAC,QAAQ,oBACzEjf,EAAK7D,SAAS,CACZ4pC,2BAGI9lC,EAAgBD,EAAKmmC,qBAENlmC,IAAkBD,EAAK5E,MAAMgrC,UAAUC,OAT7C,CAAAj0B,EAAAvP,KAAA,gBAUb7C,EAAKgmC,gBAAgB/lC,GAVRmS,EAAAvP,KAAA,EAWA7C,EAAKimC,iBAAiBhmC,GAXtB,cAAAmS,EAAApP,OAAA,SAAAoP,EAAA8B,MAAA,WAYJjU,IAAkBD,EAAKlF,MAAMmF,cAZzB,CAAAmS,EAAAvP,KAAA,gBAAAuP,EAAAvP,KAAA,GAaP7C,EAAKimC,iBAAiBhmC,GAbf,eAgBT4V,EAhBSlX,OAAAgS,EAAA,EAAAhS,CAAA,GAgBMqB,EAAKlF,OAEpBmhB,EAAkBjc,EAAK/E,cAAckvB,0BAEvCtU,EAAS5V,gBAAkBA,IAC7B4V,EAAS5V,cAAgBA,GAGrB2nB,EAAmBme,EAAqB9lC,GACxC6C,EAAcmZ,EAAgB2L,EAAiBse,WAzBtC9zB,EAAAvP,KAAA,GAgCL2iB,QAAQC,IAAI,CACpBzlB,EAAK/E,cAAcqrC,sBACnBtmC,EAAK/E,cAAc8uB,uBACnB/pB,EAAK/E,cAAc+uB,uBACnBhqB,EAAK/E,cAAc64B,4BApCN,WAAA5lB,EAAAkE,EAAA8B,KAAArF,EAAAlQ,OAAAkzB,EAAA,EAAAlzB,CAAAuP,EAAA,GA4Bb43B,EA5Baj3B,EAAA,GA6BbgZ,EA7BahZ,EAAA,GA8BbiZ,EA9BajZ,EAAA,GA+BbgkB,EA/BahkB,EAAA,GAuCfgH,EAASiwB,iBAAmBA,EAC5BjwB,EAASgS,kBAAoBA,EAC7BhS,EAASiS,kBAAoBA,EAC7BjS,EAASgd,qBAAuBA,EAEhChd,EAASoG,gBAAkBA,EAIK,GACRhc,GAAiB6C,EAEzC+S,EAAS/S,YAAcA,EACvB+S,EAAS+R,iBAAmBA,GAExB5nB,EAAK5E,MAAMwa,QAtDA,CAAAxD,EAAAvP,KAAA,gBAAAuP,EAAAvP,KAAA,GA+DH2iB,QAAQC,IAAI,CACpBzlB,EAAK/E,cAAckuB,qBACnBnpB,EAAK/E,cAAcgvB,uBACnBjqB,EAAK/E,cAAcslC,aAAaz9B,GAChC9C,EAAK/E,cAAcylC,iBAAiB59B,EAAY9C,EAAK5E,MAAMwa,SAC3D5V,EAAK/E,cAAcwlC,gBAAgBxgC,EAAcD,EAAK5E,MAAMwa,SAC5D5V,EAAK/E,cAAcwlC,gBAAgB39B,EAAYsM,KAAKsG,MAAM1V,EAAK5E,MAAMwa,SACrE5V,EAAK/E,cAAc+3B,mBAAmB/yB,EAAc4yB,EAAqBjnB,QAAQ5L,EAAK5E,MAAMwa,WAtEjF,QAAA9G,EAAAsD,EAAA8B,KAAApC,EAAAnT,OAAAkzB,EAAA,EAAAlzB,CAAAmQ,EAAA,GAwDX+G,EAASuT,gBAxDEtX,EAAA,GAyDX+D,EAASkS,kBAzDEjW,EAAA,GA0DX+D,EAASooB,oBA1DEnsB,EAAA,GA2DX+D,EAASuqB,UA3DEtuB,EAAA,GA4DX+D,EAASme,aA5DEliB,EAAA,GA6DX+D,EAAS+b,iBA7DE9f,EAAA,GA8DX+D,EAASqY,cA9DEpc,EAAA,GA0Eb+D,EAASlC,WAAa,CACpB3M,OAAO,CACL6M,OAAO,KACPH,SAAQ,GAEV/M,QAAQ,CACNkN,OAAO,KACPH,SAAQ,GAEV4f,QAAQ,CACNzf,OAAO,KACPH,SAAQ,IAGZmC,EAASyR,WAAa,CACpBtgB,OAAO,KACPL,QAAQ,MAEVkP,EAASoS,oBAAsB,CAC7BjhB,OAAO,KACPL,QAAQ,MAGVkP,EAASmZ,kBAAmB,EAC5BnZ,EAASgwB,eAAiBhwB,EAASme,aACnCne,EAAS+vB,cAAgB/vB,EAASwT,kBAClCxT,EAASglB,kBAAoB/3B,EAAY+3B,kBACzChlB,EAAS8X,UAAY9X,EAASkS,mBAAqBlS,EAASkS,kBAAkB5Y,GAAG,GACjF0G,EAAS+X,WAAa/X,EAAS+b,kBAAoB/b,EAAS+b,iBAAiBziB,GAAG,GAChF0G,EAASwT,kBAAoBxT,EAASkS,kBAAoBlS,EAASkS,kBAAkB9rB,MAAM4Z,EAASuT,iBAAmBppB,EAAK/E,cAAc6Q,MAAM,GAvGnI,QA0Gf9L,EAAK7D,SAAS0Z,GA1GC,yBAAAzD,EAAAQ,SAAAX,EAAA/W,WAwKjBqrC,yCAAsB,SAAApmC,IAAA,IAAA0V,EAAA/S,EAAA,OAAAL,EAAAnG,EAAAoG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACdgT,EAAW,GADGlT,EAAAY,GAEZvD,EAAKlF,MAAM4L,OAFC/D,EAAAE,KAGb,YAHaF,EAAAY,GAAA,EAMb,WANaZ,EAAAY,GAAA,yBAIhBvD,EAAK4gC,iBAJWj+B,EAAAK,OAAA,0BAQVF,EAAc9C,EAAK/E,cAAcgkB,gBAAgB,CAAC,QAAQ,iBAChEpJ,EAASkwB,qBAAuB,GAChClwB,EAAS+R,iBAAmB9kB,EAC5B+S,EAAS5V,cAAgB6C,EAAY4S,MACrCG,EAASkwB,qBAAqBjjC,EAAY4S,OAAS5S,EAZnCH,EAAAK,OAAA,2BAAAL,EAAAK,OAAA,oBAkBpBhD,EAAK7D,SAAS0Z,GAlBM,yBAAAlT,EAAAiQ,SAAAzS,EAAAjF,WAqBtBg7B,uBAAyB,WACvB,OAA0D,OAAtDl2B,EAAKlF,MAAMmtB,oBAAoBjoB,EAAKlF,MAAM4L,SAGvC1G,EAAK/E,cAAc6Q,MAAM9L,EAAKlF,MAAMmtB,oBAAoBjoB,EAAKlF,MAAM4L,SAASxK,IAAI,QAGzFssB,uBAAyB,SAACgD,GACxB,IAAKxrB,EAAKlF,MAAM4L,OACd,OAAO,EAET1G,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BwsB,oBAAoBtpB,OAAAgS,EAAA,EAAAhS,CAAA,GACflD,EAAUwsB,oBADItpB,OAAA41B,GAAA,EAAA51B,CAAA,GAEhBqB,EAAKlF,MAAM4L,OAAS8kB,UAK3BjC,cAAgB,WACd,IAAKvpB,EAAKlF,MAAM4L,QAAgE,OAAtD1G,EAAKlF,MAAMmtB,oBAAoBjoB,EAAKlF,MAAM4L,QAClE,OAAO,EAGT,IAAMmjB,EAAqB7pB,EAAK/E,cAAc6Q,MAAM9L,EAAKlF,MAAMmtB,oBAAoBjoB,EAAKlF,MAAM4L,SAASxK,IAAI,KACvGosB,EAAS,KAEb,OAAOtoB,EAAKlF,MAAM4L,QAChB,IAAK,UACH4hB,EAAStoB,EAAKlF,MAAMk5B,aAAeh0B,EAAK/E,cAAc6Q,MAAM9L,EAAKlF,MAAMk5B,cAAc/3B,MAAM4tB,GAAsB,KACnH,MACA,IAAK,SAEDvB,EADEtoB,EAAKlF,MAAMotB,oBACJloB,EAAKlF,MAAMitB,kBAAoB/nB,EAAK/E,cAAc6Q,MAAM9L,EAAKlF,MAAMitB,mBAAmB9rB,MAAM4tB,GAAsB,KAElH7pB,EAAKlF,MAAMuuB,kBAAoBrpB,EAAK/E,cAAc6Q,MAAM9L,EAAKlF,MAAMuuB,mBAAmBptB,MAAM4tB,GAAsB,KAOjI7pB,EAAKqoB,oBAAoBC,GAEzBtoB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5B6rB,WAAW3oB,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAU6rB,WADL3oB,OAAA41B,GAAA,EAAA51B,CAAA,GAEPqB,EAAKlF,MAAM4L,OAAS4hB,UAK3BC,iBAAmB,SAACpU,GAClB,IAAKnU,EAAKlF,MAAM4L,OACd,OAAO,EAGT,IAAM4hB,EAASnU,EAAEoD,OAAO1X,MAAMoD,SAAWuM,MAAM2E,EAAEoD,OAAO1X,OAASG,EAAK/E,cAAc6Q,MAAMqI,EAAEoD,OAAO1X,OAASG,EAAK/E,cAAc6Q,MAAM,GACrI9L,EAAKqoB,oBAAoBC,GAEzBtoB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BwsB,oBAAoBtpB,OAAAgS,EAAA,EAAAhS,CAAA,GACflD,EAAUwsB,oBADItpB,OAAA41B,GAAA,EAAA51B,CAAA,GAEhBqB,EAAKlF,MAAM4L,OAAS,OAEvB4gB,WAAW3oB,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAU6rB,WADL3oB,OAAA41B,GAAA,EAAA51B,CAAA,GAEPqB,EAAKlF,MAAM4L,OAAS4hB,UAK3BD,oBAAsB,WAAiB,IAAhBC,EAAgBvV,UAAA9P,OAAA,QAAAsJ,IAAAwG,UAAA,GAAAA,UAAA,GAAT,KAE5B,IAAK/S,EAAKlF,MAAM4L,OACd,OAAO,EAGJ4hB,IACHA,EAAStoB,EAAKlF,MAAMwsB,WAAWtnB,EAAKlF,MAAM4L,SAG5C,IAAI+gB,GAAiB,EAErB,OAAQznB,EAAKlF,MAAM4L,QACjB,IAAK,UACH+gB,EAAiBA,GAAmBa,GAAUA,EAAOnZ,GAAGnP,EAAKlF,MAAMk5B,cACrE,MACA,IAAK,SAEDvM,EADEznB,EAAKlF,MAAMotB,qBACKloB,EAAKlF,MAAM6yB,WAAclG,GAAmBa,GAAUA,EAAOnZ,GAAGnP,EAAKlF,MAAMitB,oBAE3E/nB,EAAKlF,MAAM6yB,WAAclG,GAAmBa,GAAUA,EAAOnZ,GAAGnP,EAAKlF,MAAMuuB,mBAOnGrpB,EAAK7D,SAAS,CACZsrB,sBAIJyD,uCAAoB,SAAAwH,IAAA,OAAAjwB,EAAAnG,EAAAoG,KAAA,SAAAowB,GAAA,cAAAA,EAAAlwB,KAAAkwB,EAAAjwB,MAAA,OAClB7C,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BkY,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADLhV,OAAA41B,GAAA,EAAA51B,CAAA,CAER20B,QAAQ,CACNzf,OAAO,KACPH,SAAQ,IAET1T,EAAKlF,MAAM4L,OAAQ,CAClBmN,OAAO,KACPH,SAAQ,QAVI,wBAAAof,EAAAlgB,SAAA8f,EAAAx3B,WAgBpBi4B,kCAAe,SAAAF,IAAA,IAAA/E,EAAAyE,EAAAC,EAAA,OAAAnwB,EAAAnG,EAAAoG,KAAA,SAAAwwB,GAAA,cAAAA,EAAAtwB,KAAAswB,EAAArwB,MAAA,YAGPqrB,EAAgBluB,EAAKlF,MAAMozB,eAHpB,CAAAgF,EAAArwB,KAAA,eAAAqwB,EAAAlwB,OAAA,SAMJhD,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CACnCyyB,gBACAva,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADL,CAER2f,QAAQ,CACNzf,OAAO,KACPH,SAAQ,SAZH,OAkBPif,EAAkB,SAACpe,EAAGC,GAE1B,IAAMC,EAAY,CAChBG,cAAe,UACfC,YAAa7U,EAAKlF,MAAMmF,cACxByU,WAAYH,EAAGI,QAGbH,IACFC,EAAUC,WAAa1U,EAAK/E,cAAc6Z,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUE,SACrB3U,EAAK/E,cAAc8Z,yBAAyBN,GAG9CzU,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5ByyB,cAA8B,YAAd3Z,EAAGI,OACnBhB,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADL,CAER2f,QAAQ,CACNzf,OAAO,KACPH,SAAQ,SAMVkf,EAAyB,SAACre,GAC9B,IAAMV,EAASU,EAAGiB,gBAClBxV,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BkY,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADL,CAER2f,QAAQ30B,OAAAgS,EAAA,EAAAhS,CAAA,GACHlD,EAAUkY,WAAV,QADE,CAELE,iBAMR7T,EAAK/E,cAAc83B,YAAY/yB,EAAKlF,MAAMmF,cAAcD,EAAKlF,MAAM+3B,qBAAqBjnB,QAAQ+mB,EAAgBC,GAEhH5yB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BkY,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADL,CAER2f,QAAQ,CACNzf,OAAO,KACPH,SAAQ,QAnED,wBAAAwf,EAAAtgB,SAAAqgB,EAAA/3B,WAyEfs5B,mCAAgB,SAAApB,IAAA,IAAAsB,EAAApN,EAAAuC,EAAAnW,EAAAohB,EAAAH,EAAAC,EAAAG,EAAAC,EAAAC,EAAAuR,EAAApd,EAAAgB,EAAAG,EAAAC,EAAAC,EAAAxH,EAAA,OAAAxgB,EAAAnG,EAAAoG,KAAA,SAAA2wB,GAAA,cAAAA,EAAAzwB,KAAAywB,EAAAxwB,MAAA,OAEV6xB,EAAqB,KACnBpN,EAAatnB,EAAKlF,MAAMwsB,WAAWtnB,EAAKlF,MAAM4L,QAC9CmjB,EAAqB7pB,EAAKk2B,yBAE5BxiB,GAAU,EANA2f,EAAA9vB,GAQNvD,EAAKlF,MAAM4L,OARL2sB,EAAAxwB,KAUP,YAVOwwB,EAAA9vB,GAAA,EA4FP,WA5FO8vB,EAAA9vB,GAAA,uBAYNvD,EAAKlF,MAAM2sB,gBAAmBH,IAActnB,EAAK/E,cAAc6Q,MAAMwb,GAAYvB,IAAI,GAZ/E,CAAAsN,EAAAxwB,KAAA,eAAAwwB,EAAArwB,OAAA,UAaD,GAbC,cAgBJ8xB,EAAkB90B,EAAK/E,cAAc4tB,qBAAqBvB,EAAWtnB,EAAKlF,MAAM+sB,kBAAkBjrB,UAElG+3B,EAAkB,SAACpgB,EAAGC,IAErBD,GAAMC,IACTD,EAAK,CACHI,OAAO,UAIX,IAAM6Y,EAAwB,UAAdjZ,EAAGI,OACb0V,EAA4B,YAAd9V,EAAGI,OAEjBF,EAAY,CAChBG,cAAe,UACfC,YAAa7U,EAAKlF,MAAMmF,cACxByU,WAAYH,EAAGI,OACf2V,WAAYxqB,SAASwnB,IAGnB9S,IACFC,EAAUC,WAAa1U,EAAK/E,cAAc6Z,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUE,SACrB3U,EAAK/E,cAAc8Z,yBAAyBN,GAG9CzU,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BkY,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADLhV,OAAA41B,GAAA,EAAA51B,CAAA,GAEPqB,EAAKlF,MAAM4L,OAAQ,CAClBmN,OAAO,KACPH,SAAQ,QAKV2W,EACFrqB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BqyB,YAAY,QACZxG,WAAW3oB,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAU6rB,WADL3oB,OAAA41B,GAAA,EAAA51B,CAAA,GAEPqB,EAAKlF,MAAM4L,OAAS1G,EAAK/E,cAAc6Q,MAAM,QAGzC9L,EAAKlF,MAAM80B,yBAA2BpC,GAC/CxtB,EAAK7D,SAAS,CACZqxB,QAAQ7uB,OAAA41B,GAAA,EAAA51B,CAAA,GACLqB,EAAKlF,MAAM4L,QAAS,MAMvBkuB,EAAyB,SAACrgB,GAC9B,IAAMV,EAASU,EAAGiB,gBAClBxV,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BkY,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADLhV,OAAA41B,GAAA,EAAA51B,CAAA,GAEPqB,EAAKlF,MAAM4L,OAFJ/H,OAAAgS,EAAA,EAAAhS,CAAA,GAGHlD,EAAUkY,WAAW3T,EAAKlF,MAAM4L,QAH7B,CAINmN,iBA/EEwf,EAAAxwB,KAAA,GAqFY7C,EAAK/E,cAAcu7B,gBAAgBx2B,EAAKlF,MAAMgI,YAAYsM,KAAKsG,MAAMof,GArFjF,eAqFJC,EArFI1B,EAAAnf,KAAAmf,EAAAxwB,KAAA,GAsFkB7C,EAAK/E,cAAcw/B,oBAAoBz6B,EAAKlF,MAAMgtB,kBAAkBxb,KAAK,oBAAoB,CAACyoB,GAAQ,IAtFxH,eAsFJC,EAtFI3B,EAAAnf,KAuFJ+gB,EAAgB,CAACF,EAAQC,GAvFrB3B,EAAAxwB,KAAA,GA0FiB7C,EAAK5E,MAAMqa,0BAA0BzV,EAAKlF,MAAM+3B,qBAAqBvmB,KAAM,gBAAiB2oB,EAAe,KAAMN,EAAiBC,GA1FnJ,eA0FVF,EA1FUrB,EAAAnf,KAAAmf,EAAArwB,OAAA,wBA8FNhD,EAAKlF,MAAM2sB,gBAAmBH,IAActnB,EAAK/E,cAAc6Q,MAAMwb,GAAYvB,IAAI,GA9F/E,CAAAsN,EAAAxwB,KAAA,gBAAAwwB,EAAArwB,OAAA,UA+FD,GA/FC,WAkGNwjC,EAAsB,MACtB3c,EAnGM,CAAAwJ,EAAAxwB,KAAA,SAoGR2jC,EAAsBxmC,EAAK/E,cAAc6Q,MAAM9L,EAAKlF,MAAMitB,mBAAmB9rB,MAAM4tB,GApG3EwJ,EAAAxwB,KAAA,oBAsGR2jC,EAAsBxmC,EAAK/E,cAAc6Q,MAAM9L,EAAK/E,cAAc4tB,qBAAqBvB,EAAWtnB,EAAKlF,MAAM+sB,kBAAkBjrB,WAC1HoD,EAAKlF,MAAMotB,oBAvGR,CAAAmL,EAAAxwB,KAAA,gBAAAwwB,EAAAxwB,KAAA,GAwGwB7C,EAAK/E,cAAckuB,qBAxG3C,QAwGAC,EAxGAiK,EAAAnf,KAyGNsyB,EAAsBA,EAAoBtqC,IAAIktB,GAzGxC,WA6GLod,EA7GK,CAAAnT,EAAAxwB,KAAA,gBAAAwwB,EAAArwB,OAAA,UA8GD,GA9GC,eAiHJonB,EAAiB,SAAC7V,EAAGC,GACzB,IAAM6V,EAA4B,YAAd9V,EAAGI,OAGjBF,EAAY,CAChBC,WAAYH,EAAGI,OACfC,cAAa,cACbC,YAAa7U,EAAKlF,MAAMmF,cACxBqqB,WAAYkc,EAAoBzmC,WAG9ByU,IACFC,EAAUC,WAAa1U,EAAK/E,cAAc6Z,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUE,SACrB3U,EAAK/E,cAAc8Z,yBAAyBN,GAG9CzU,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BkY,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADLhV,OAAA41B,GAAA,EAAA51B,CAAA,GAEPqB,EAAKlF,MAAM4L,OAAQ,CAClBmN,OAAO,KACPH,SAAQ,QAKV2W,GACFrqB,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5B6rB,WAAW3oB,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAU6rB,WADL3oB,OAAA41B,GAAA,EAAA51B,CAAA,GAEPqB,EAAKlF,MAAM4L,OAAS1G,EAAK/E,cAAc6Q,MAAM,SAMhDye,EAAwB,SAAChW,GAC7B,IAAMV,EAASU,EAAGiB,gBAClBxV,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BkY,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADLhV,OAAA41B,GAAA,EAAA51B,CAAA,GAEPqB,EAAKlF,MAAM4L,OAFJ/H,OAAAgS,EAAA,EAAAhS,CAAA,GAGHlD,EAAUkY,WAAW3T,EAAKlF,MAAM4L,QAH7B,CAINmN,iBAMF2W,EAAUxqB,EAAK/E,cAAc4tB,qBAAqB2d,EAAoBxmC,EAAKlF,MAAM+sB,kBAAkBjrB,UAAUyO,WAtKzGgoB,EAAAxwB,KAAA,GAuKc7C,EAAK/E,cAAcu7B,gBAAgBx2B,EAAKlF,MAAMgI,YAAYsM,KAAKsG,MAAM,GAvKnF,WAuKN+U,EAvKM4I,EAAAnf,KAyKJ+O,EAAejjB,EAAKlF,MAAM+3B,qBAAqBvmB,MACjDtM,EAAKlF,MAAMotB,oBA1KL,CAAAmL,EAAAxwB,KAAA,SA2KR6nB,QAAQC,IAAI,6BAA6B3qB,EAAK/E,cAAc6Q,MAAMwb,GAAYjc,WAAWmf,EAAQnf,WAAWof,GAC5GzqB,EAAK5E,MAAMqa,0BAA0BwN,EAAc,6BAA8B,CAACwH,EAAaD,GAAU,KAAMJ,EAAgBG,GA5KvH8I,EAAAxwB,KAAA,wBAAAwwB,EAAAxwB,KAAA,GA8KY7C,EAAK/E,cAAcu7B,gBAAgBx2B,EAAKlF,MAAMgI,YAAYsM,KAAKsG,MAAM8U,GA9KjF,QA8KRC,EA9KQ4I,EAAAnf,KA+KRwW,QAAQC,IAAI,mBAAmB3qB,EAAK/E,cAAc6Q,MAAMwb,GAAYjc,WAAWmf,EAAQnf,WAAWof,GAClGzqB,EAAK5E,MAAMqa,0BAA0BwN,EAAc,mBAAoB,CAACuH,EAASC,GAAc,KAAML,EAAgBG,GAhL7G,eAAA8I,EAAArwB,OAAA,2BAoLV0Q,GAAU,EApLA2f,EAAArwB,OAAA,qBA0La,IAAvB0xB,GACF10B,EAAK7D,SAAS,SAACV,GAAD,MAAgB,CAC5BkY,WAAWhV,OAAAgS,EAAA,EAAAhS,CAAA,GACNlD,EAAUkY,WADLhV,OAAA41B,GAAA,EAAA51B,CAAA,GAEPqB,EAAKlF,MAAM4L,OAFJ/H,OAAAgS,EAAA,EAAAhS,CAAA,GAGHlD,EAAUkY,WAAW3T,EAAKlF,MAAM4L,QAH7B,CAINgN,iBAhMM,yBAAA2f,EAAAzgB,SAAAwgB,EAAAl4B,WAuMhB09B,UAAY,SAAClyB,GACX,OAAQA,EAAOiF,eACb,IAAK,UAEL,MACA,IAAK,SACE3L,EAAKlF,MAAM6yB,YACdjnB,EAAS,MAEb,MACA,QACEA,EAAS,KAIE,OAAXA,GACF1G,EAAK7D,SAAS,CACZuK,uFAtoBAxL,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,kDA4B9C,IAAM2qC,EAAuB7qC,KAAKD,cAAcgkB,gBAAgB,CAAC,QAAQ,oBACzE,OAAO/jB,KAAKE,MAAMgrC,UAAUC,QAAUN,EAAqB7qC,KAAKE,MAAMgrC,UAAUC,QAAUnrC,KAAKE,MAAMgrC,UAAUC,OAAS1nC,OAAO+B,KAAKqlC,GAAsB,+JA8H1J7qC,KAAKI,qBACCJ,KAAK0lC,qRAILtY,EAASptB,KAAKJ,MAAMwsB,WAAWpsB,KAAKJ,MAAM4L,QAAUxL,KAAKD,cAAc6Q,MAAM5Q,KAAKJ,MAAMwsB,WAAWpsB,KAAKJ,MAAM4L,SAAW,QAEhH4hB,EAAOvC,IAAI,6CACjB,UAGH6C,EAAmB1tB,KAAKD,cAAc4tB,qBAAqBP,EAAOptB,KAAKJ,MAAM+sB,kBAAkBjrB,UAC/FiZ,EAAW,QAET3a,KAAKJ,MAAM4L,cACZ,mBAIA,0CAHHmP,EAASgwB,eAAiBvd,YACOptB,KAAKD,cAAciuB,iBAAiBhuB,KAAKJ,MAAMgI,YAAYsM,KAAKsG,MAAMkT,GAAiB,kBAAxH/S,EAAS8rB,2DAGT9rB,EAAS+vB,cAAgBtd,YACSptB,KAAKD,cAAciuB,iBAAiBhuB,KAAKJ,MAAMgI,YAAYsM,KAAKsG,MAAMkT,GAAiB,kBAAzH/S,EAASiT,yFAOb5tB,KAAKiB,SAAS0Z,yLAGSra,EAAWC,sFAClCP,KAAKI,YACCqa,EAAiBna,EAAUoa,UAAY1a,KAAKE,MAAMwa,QAClDzC,EAAe3X,EAAU4qC,UAAUC,SAAWnrC,KAAKE,MAAMgrC,UAAUC,OACnEvF,EAAsBtlC,EAAUiL,cAAgBvL,KAAKE,MAAMqL,cAAgB9H,OAAOgG,OAAOnJ,EAAUiL,cAAc7B,OAAO,SAAA2P,GAAE,MAAiB,YAAZA,EAAGI,SAAqB1R,SAAWtE,OAAOgG,OAAOzJ,KAAKE,MAAMqL,cAAc7B,OAAO,SAAA2P,GAAE,MAAiB,YAAZA,EAAGI,SAAqB1R,SAEjP0S,GAAkBmrB,GAAuB3tB,mCACrCjY,KAAK0lC,wBAGP7G,EAAgB7+B,KAAKJ,MAAM4L,SAAWjL,EAAUiL,OAChD4iB,EAA6BpuB,KAAKJ,MAAMotB,sBAAwBzsB,EAAUysB,oBAC1E8R,EAA6B9+B,KAAKJ,MAAMmtB,oBAAoB/sB,KAAKJ,MAAM4L,UAAYjL,EAAUwsB,oBAAoB/sB,KAAKJ,MAAM4L,SAC9HqzB,GAAiBC,GAA8B1Q,IACjDpuB,KAAKquB,gBAGHwQ,GACF7+B,KAAKqrC,sBAGc9qC,EAAU6rB,WAAWpsB,KAAKJ,MAAM4L,UAAYxL,KAAKJ,MAAMwsB,WAAWpsB,KAAKJ,MAAM4L,SAEhGxL,KAAKyuB,2JAubD,IAAAvtB,EAAAlB,KAEA6lC,EAAe7lC,KAAKE,MAAMwa,SAAW1a,KAAKJ,MAAMitB,mBAAqB7sB,KAAKD,cAAc6Q,MAAM5Q,KAAKJ,MAAMitB,mBAAmB5Y,GAAG,GAGrI,OACEzE,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,GAEPiO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPka,GAAI,CAAC,EAAE,GACP5X,WAAY,SACZiX,cAAe,MACfhX,eAAgB,cAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,IAGLiO,EAAApO,EAAAC,cAACijB,EAAA,EAAD7gB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEiD,SAAUnD,KAAKE,MAAMiD,SACrBshB,KAAM,CAAC,QAAQzkB,KAAKJ,MAAMmF,eAC1B8W,YAAc,SAAA5C,GAAC,OAAI/X,EAAKhB,MAAMskB,YAAY,SAC1C1W,KAAM9N,KAAKD,cAAcgkB,gBAAgB,CAAC,aAAa,OAAO,eAKtEvU,EAAApO,EAAAC,cAAC0lB,EAAA,EAAD,CACEtL,GAAI,CAAC,EAAE,IADT,cAKAjM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,GAEPiO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZiX,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,CAAC,EAAE,KACVsC,WAAY,UACZiX,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,GAEPiO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,GADN,sBAKAjM,EAAApO,EAAAC,cAACwjB,EAAA,EAADphB,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEmP,GAAI,aACJiO,SAAUtd,KAAK8qC,gBACf/lC,cAAe/E,KAAKJ,MAAMmF,cAC1B6C,YAAa5H,KAAKJ,MAAM8sB,iBACxBwD,YAAmC,YAAtBlwB,KAAKJ,MAAM4L,OACxBuV,gBAAiB/gB,KAAKJ,MAAMirC,yBAGhCr7B,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,GAIHiO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJV,cAAe,UAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,GADN,sBAKAjM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE/W,WAAY,SACZiX,cAAe,MACfhX,eAAgB,iBAEhB0L,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT9C,EAAE,CAAC,EAAE,GACL7O,MAAM,IACNgvB,YAAY,WACVrvB,EAAKw8B,UAAU,aAGnB5Y,eAAe,EACf6C,SAAiC,YAAtB3nB,KAAKJ,MAAM4L,QAEtBgE,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEmD,GAAI,EACJla,WAAY,SACZiX,cAAe,MACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACygC,GAAA,EAAD,CACEC,YAAa,CACXv2B,OAAO,WAET4f,UAAW,CACTha,KAAK,OACLlR,MAAM,CACJmmB,GAAG,CAAC,EAAE,OAIZ7W,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExX,SAAU,EACVJ,WAAY,GAFd,aAQJwM,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT9C,EAAE,CAAC,EAAE,GACL7O,MAAM,IACNgvB,YAAY,WACVrvB,EAAKw8B,UAAU,YAGnB5Y,eAAe,EACfkd,YAAchiC,KAAKJ,MAAM6yB,UACzB9K,SAAiC,WAAtB3nB,KAAKJ,MAAM4L,QAEtBgE,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEmD,GAAI,EACJla,WAAY,SACZiX,cAAe,MACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACygC,GAAA,EAAD,CACEC,YAAa,CACXv2B,OAAO,UAET4f,UAAW,CACTha,KAAK,OACLlR,MAAM,CACJmmB,GAAG,CAAC,EAAE,OAIZ7W,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExX,SAAU,EACVJ,WAAY,GAFd,gBAiChBwM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPia,GAAKxb,KAAKE,MAAMwa,QAAU,EAAI,GAGR,YAAtB1a,KAAKJ,MAAM4L,OACTgE,EAAApO,EAAAC,cAACkqC,GAAD9nC,OAAAC,OAAA,GACM1D,KAAKE,MACLF,KAAKJ,QAEa,WAAtBI,KAAKJ,MAAM4L,QACbgE,EAAApO,EAAAC,cAAC8hC,GAAD1/B,OAAAC,OAAA,GACM1D,KAAKE,MACLF,KAAKJ,WAQjBimC,GACEr2B,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPla,MAAO,EACPuZ,cAAe,SACfzL,GAAI,4BAEJG,EAAApO,EAAAC,cAAC0lB,EAAA,EAAD,CAAOhJ,GAAI,CAAC,EAAE,IAAd,kBACAvO,EAAApO,EAAAC,cAACmqC,GAAD/nC,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEglC,UAAWllC,KAAKJ,MAAMslC,UACtBt9B,YAAa5H,KAAKJ,MAAMgI,YACxB7C,cAAe/E,KAAKJ,MAAMmF,cAC1Bgc,gBAAiB/gB,KAAKJ,MAAMmhB,gBAC5BzL,cAAe7R,OAAO+B,KAAKxF,KAAKJ,MAAMmhB,qBAyH9C/gB,KAAKE,MAAMwa,SACTlL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPla,MAAO,EACPuZ,cAAe,SACfzL,GAAI,0BAEJG,EAAApO,EAAAC,cAAC0lB,EAAA,EAAD,CAAOhJ,GAAI,CAAC,EAAE,IAAd,gBACAvO,EAAApO,EAAAC,cAAC4kC,GAAA,EAADxiC,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEE6gB,gBAAiB/gB,KAAKJ,MAAMmhB,gBAC5BzL,cAAe7R,OAAO+B,KAAKxF,KAAKJ,MAAMmhB,iBACtC0qB,eAAgB,CAAC,UAAU,WAAW,aAAa,cAAc,kBAAkB,mBAAmB,iBAAiB,mBACvHvkB,KAAM,CACJ,CACEjK,MAAOjd,KAAKE,MAAMiD,SAAW,GAAK,OAClCjD,MAAM,CACJqB,MAAM,CAAC,IAAK,MAEd4lB,OAAO,CACL,CACE/V,KAAK,OACLlR,MAAM,CACJmmB,GAAG,CAAC,EAAE,KAGV,CACEjV,KAAK,OACLgW,QAAO,KAIb,CACEnK,MAAM,SACNmK,QAAO,EACPlnB,MAAM,CACJqB,MAAM,KAER4lB,OAAO,CACL,CACE/V,KAAK,YAIX,CACE6L,MAAM,OACN/c,MAAM,CACJqB,MAAM,CAAC,IAAK,MAEd4lB,OAAO,CACL,CACE/V,KAAK,UAIX,CACE6L,MAAM,SACN/c,MAAM,CACJqB,MAAM,CAAC,IAAK,KACZuC,eAAe,CAAC,SAAS,eAE3BqjB,OAAO,CACL,CACE/V,KAAK,aACLlR,MAAM,CACJmmB,GAAG,CAAC,EAAE,KAGV,CACEe,QAAO,EACPhW,KAAK,YAIX,CACE6L,MAAM,SACN/c,MAAM,CACJqB,MAAM,KAER4lB,OAAO,CACL,CACE/V,KAAK,YAIX,CACE6L,MAAM,QACN/c,MAAM,CACJqB,MAAM,CAAC,IAAK,IACZuC,eAAe,CAAC,SAAS,eAE3BqjB,OAAO,CACL,CACE/V,KAAK,YACLlR,MAAM,CACJmmB,GAAG,CAAC,EAAE,GACN/S,OAAO,CAAC,QAAQ,WAGpB,CACE8T,QAAO,EACPhW,KAAK,oBASnB5B,EAAApO,EAAAC,cAAC+hC,EAAA,EAAD3/B,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEsc,WAAYxc,KAAKg3B,WACjBuM,SAAUvjC,KAAKJ,MAAMmF,cACrB8X,OAAmC,QAA3B7c,KAAKJ,MAAMgzB,uBA7nCL3uB,oFCqOTynC,eAtNb,SAAAA,EAAYxrC,GAAO,IAAA4E,EAAA,OAAArB,OAAA0iC,EAAA,EAAA1iC,CAAAzD,KAAA0rC,IACjB5mC,EAAArB,OAAA2iC,EAAA,EAAA3iC,CAAAzD,KAAAyD,OAAA4iC,EAAA,EAAA5iC,CAAAioC,GAAApF,KAAAtmC,KAAME,KAVRN,MAAQ,CACN+rC,MAAM,KACNryB,OAAM,EACNsyB,YAAW,EACXC,aAAY,GAKK/mC,EAFnB/E,cAAgB,KAEG+E,EAOnBqX,mBAPmB1Y,OAAAoT,EAAA,EAAApT,CAAA8D,EAAAnG,EAAA0V,KAOE,SAAAM,IAAA,OAAA7P,EAAAnG,EAAAoG,KAAA,SAAAgQ,GAAA,cAAAA,EAAA9P,KAAA8P,EAAA7P,MAAA,OACnB7C,EAAK/E,cAAcE,SAAS6E,EAAK5E,OADd,wBAAAsX,EAAAE,SAAAN,EAAApX,SAPF8E,EAWnBgnC,aAAe,WAAoB,IAAnBC,IAAmBl0B,UAAA9P,OAAA,QAAAsJ,IAAAwG,UAAA,KAAAA,UAAA,GAC3Bm0B,EAAiBlnC,EAAK/E,cAAc0iC,oBACpCwJ,EAAW,CACfv7B,QAAS5L,EAAK5E,MAAMwa,QACpBwxB,SAAUF,GAGRD,GAAkC,OAArBjnC,EAAKlF,MAAM+rC,QAC1BM,EAASN,MAAQ7mC,EAAKlF,MAAM+rC,OAG9B7mC,EAAK/E,cAAcosC,qBAAqBF,IAtBvBnnC,EAyEnB0X,WAzEmB/Y,OAAAoT,EAAA,EAAApT,CAAA8D,EAAAnG,EAAA0V,KAyEN,SAAAC,IAAA,IAAAyF,EAAA,OAAAjV,EAAAnG,EAAAoG,KAAA,SAAA0P,GAAA,cAAAA,EAAAxP,KAAAwP,EAAAvP,MAAA,OAEL6U,EAAa,WACjB1X,EAAK5E,MAAMsc,cAGb,IAEE1X,EAAKgnC,cAAa,GAGd9jC,IAAcypB,UAAUC,OAAOC,OAAO9d,SACxC/O,EAAK/E,cAAc8Z,yBAAyB,CAC1CH,cAAe,KACfC,YAAa,yBACbH,WAAY,gBACZgD,GAGF4vB,WAAW5vB,EAAW,MAEtBA,IAEF,MAAO6vB,GACP7vB,IAxBS,wBAAAtF,EAAAQ,SAAAX,EAAA/W,SAvEX8E,EAAK/E,cAAgB,IAAII,IAAcD,GACvC4E,EAAKwnC,aAAexnC,EAAKwnC,aAAa9uB,KAAlB/Z,OAAA8oC,GAAA,EAAA9oC,QAAA8oC,GAAA,EAAA9oC,CAAAqB,KACpBA,EAAK0nC,iBAAmB1nC,EAAK0nC,iBAAiBhvB,KAAtB/Z,OAAA8oC,GAAA,EAAA9oC,QAAA8oC,GAAA,EAAA9oC,CAAAqB,KAJPA,4EAyBNmU,GAAG,IAAA/X,EAAAlB,KAGd,GAFAiZ,EAAEG,kBAEGpZ,KAAKJ,MAAM+rC,MACd,OAAO,EAGT,IAAMzyB,EAAW,WACfhY,EAAKD,SAAS,CACZ4qC,aAAY,EACZD,YAAW,IAEb9xB,OAAOsyB,WAAWlrC,EAAKhB,MAAMsc,WAAW,OAsB1C,GAnBAxc,KAAK8rC,eAGL9rC,KAAKD,cAAc8Z,yBAAyB,CAC1CH,cAAe,KACfC,YAAa,aACbH,WAAY,iBAGdizB,KAAMC,KAAK1kC,IAAc2kC,uBAAuBC,SAAU,CACxDjB,MAAS3rC,KAAKJ,MAAM+rC,QACnBkB,KAAK,SAAA7sB,GACN9G,MAED4zB,MAAM,SAAAT,GACLnzB,MAIE+hB,aAAa,CACf,IAAM8R,EAAgB/sC,KAAKE,MAAMwa,QAAQjK,cACrCu8B,EAAY/R,aAAagS,QAAQ,aAAevsC,KAAKwsC,MAAMjS,aAAagS,QAAQ,cAAgB,KAChGD,GAAaA,EAAUD,KAAmBC,EAAUD,GAAeI,WACrEH,EAAUD,GAAeI,UAAW,EACpCntC,KAAKD,cAAcm7B,gBAAgB,YAAYx6B,KAAKC,UAAUqsC,KAIlEhtC,KAAKiB,SAAS,CACZ4qC,aAAY,6CAgCC5yB,GACXA,GAAKA,EAAEoD,SACTrc,KAAKiB,SAAS,CAAE0qC,MAAO1yB,EAAEoD,OAAO1X,QAChCsU,EAAEoD,OAAO+wB,WAAWC,UAAU3tB,IAAI,mDAKpC,OACElQ,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAOiC,OAAQ7c,KAAKE,MAAM2c,QAEtB7c,KAAKJ,MAAMgsC,WACTp8B,EAAApO,EAAAC,cAACyb,EAAA,EAAD,CACEC,UAAW/c,KAAKwc,YAEhBhN,EAAApO,EAAAC,cAACyb,EAAA,EAAUE,OAAX,CAAkBC,MAAO,WAAYiM,KAAI,oBACzC1Z,EAAApO,EAAAC,cAACyb,EAAA,EAAUI,KAAX,KACE1N,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAMrZ,MAAO,EAAGuZ,cAAe,SAAUW,GAAI,GAC3CjM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAMlY,MAAO,YAAaQ,UAAW,SAAUE,SAAU,EAAG2a,GAAI,GAAhE,2BAGAvO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEmD,GAAI,EACJxc,MAAO,OACP0c,aAAc,EACdE,QAASne,KAAKwc,YAJhB,YAYNhN,EAAApO,EAAAC,cAACyb,EAAA,EAAD,CAAWC,UAAW/c,KAAKwc,YACzBhN,EAAApO,EAAAC,cAACyb,EAAA,EAAUE,OAAX,CAAkBC,MAAO,mBAAoBiM,KAAI,4BAEjD1Z,EAAApO,EAAAC,cAACyb,EAAA,EAAUI,KAAX,KACE1N,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAM0yB,SAAUttC,KAAKssC,cACnB98B,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAMrZ,MAAO,EAAGuZ,cAAe,SAAUW,GAAI,GAC3CjM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAMlY,MAAO,WAAYQ,UAAW,OAAQE,SAAU,EAAG2a,GAAI,GAA7D,8CAIFvO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAMrZ,MAAO,EAAGuZ,cAAe,SAAUU,GAAI,GAC3ChM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAMmD,GAAI,EAAGjD,cAAe,MAAOjX,WAAY,UAC7C2L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExJ,KAAM,cACN1O,MAAO4I,KAAOiiC,MACdvpC,KAAM,OAERwL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAMlY,MAAO,YAAaQ,UAAW,OAAQE,SAAU,EAAGJ,WAAY,EAAG+a,GAAI,EAAG5C,GAAI,GAApF,wBAIF3L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAMmD,GAAI,EAAGjD,cAAe,OAC1BtL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExJ,KAAM,cACN1O,MAAO4I,KAAOiiC,MACdvpC,KAAM,OAERwL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAMlY,MAAO,YAAaQ,UAAW,OAAQE,SAAU,EAAGJ,WAAY,EAAG+a,GAAI,EAAG5C,GAAI,GAApF,2BAIF3L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAMmD,GAAI,EAAGjD,cAAe,OAC1BtL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExJ,KAAM,cACN1O,MAAO4I,KAAOiiC,MACdvpC,KAAM,OAERwL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAMlY,MAAO,YAAaQ,UAAW,OAAQE,SAAU,EAAGJ,WAAY,EAAG+a,GAAI,EAAG5C,GAAI,GAApF,mBAIF3L,EAAApO,EAAAC,cAACuZ,EAAA,EAAK4yB,MAAN,CAAYjsC,MAAO,EAAG2I,MAAO,IAC3BsF,EAAApO,EAAAC,cAACuZ,EAAA,EAAK6yB,MAAN,CACEr6B,GAAI,EACJD,GAAI,EACJkK,UAAQ,EACR9b,MAAO,EACPqvB,OAAQ,EACRxtB,SAAU,EACVmO,KAAM,QACNH,KAAM,QACNs8B,QAAS,OACT1K,YAAa,aACb7lB,gBAAiB,SACjBja,UAAW,CAAC,SAAS,QACrB2a,UAAW8vB,KAAcC,MACzBjd,YAAa,oBACbrT,SAAUtd,KAAKwsC,oBAGnBh9B,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAMa,GAAI,EAAGX,cAAe,SAAUjX,WAAY,SAAUC,eAAgB,UAC1E0L,EAAApO,EAAAC,cAACwsC,GAAA,EAAD,CACEC,WAAY,SACZC,UAAW/tC,KAAKJ,MAAMisC,YACtBlwB,YAAa,CAACkC,UAAU8vB,KAAcK,eAAezsC,MAAM,OAAOgQ,KAAK,YAGzE/B,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CAAMY,GAAI,EAAG2C,QAASne,KAAKwc,WAAYkL,WAAY,QAAnD,wCApNKtJ,IAAMna,sBCwLlBgqC,eAjLb,SAAAA,EAAY/tC,GAAO,IAAA4E,EAAA,OAAArB,OAAA0iC,EAAA,EAAA1iC,CAAAzD,KAAAiuC,IACjBnpC,EAAArB,OAAA2iC,EAAA,EAAA3iC,CAAAzD,KAAAyD,OAAA4iC,EAAA,EAAA5iC,CAAAwqC,GAAA3H,KAAAtmC,KAAME,KAfRN,MAAQ,CACNsuC,eAAc,GAaGppC,EATnB/E,cAAgB,KASG+E,EAKnBqX,mBALmB1Y,OAAAoT,EAAA,EAAApT,CAAA8D,EAAAnG,EAAA0V,KAKE,SAAAM,IAAA,OAAA7P,EAAAnG,EAAAoG,KAAA,SAAAgQ,GAAA,cAAAA,EAAA9P,KAAA8P,EAAA7P,MAAA,OACnB7C,EAAK1E,YADc,wBAAAoX,EAAAE,SAAAN,EAAApX,SALF8E,EASnB0X,WATmB/Y,OAAAoT,EAAA,EAAApT,CAAA8D,EAAAnG,EAAA0V,KASN,SAAAC,IAAA,OAAAxP,EAAAnG,EAAAoG,KAAA,SAAA0P,GAAA,cAAAA,EAAAxP,KAAAwP,EAAAvP,MAAA,WACa7C,EAAK/E,cAAcgkB,gBAAgB,CAAC,gBAAgB,YAAY,SAAS,SAAS,YAD/F,CAAA7M,EAAAvP,KAAA,eAAAuP,EAAAvP,KAAA,EAIH7C,EAAK/E,cAAc8Z,yBAAyB,CAChDH,cAAe,KACfC,YAAa,2BACbH,WAAY,iBAPL,OAST1U,EAAK5E,MAAMsc,aATFtF,EAAAvP,KAAA,eAWT7C,EAAK5E,MAAMsc,aAXF,wBAAAtF,EAAAQ,SAAAX,EAAA/W,SATM8E,EAwBnBqpC,oBAAsB,SAACD,GAEjBA,EACFppC,EAAK/E,cAAcm7B,gBAAgB,uBAAuB,QAE1Dp2B,EAAK/E,cAAcquC,iBAAiB,wBAGtCtpC,EAAK7D,SAAS,CACZitC,mBAjCeppC,EAqCnBupC,QAAU,WACR,IAAMC,EAAsBxpC,EAAK/E,cAAcgkB,gBAAgB,CAAC,QAAQ,iBAAiB,UACzFjf,EAAK5E,MAAMskB,YAAY,SAAS8pB,GAChCxpC,EAAK5E,MAAMsc,cAtCX1X,EAAK1E,YAFY0E,2EAPb9E,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,yDA+CvC,IAAAgB,EAAAlB,KAEDuuC,EAAa,CACjBvrC,WAAW,EACXI,SAAS,CAAC,EAAE,GACZV,MAAM,WACNsY,UAAU,CACRlX,eAAe,eAInB,OACE0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEiC,OAAQ7c,KAAKE,MAAM2c,QAEnBrN,EAAApO,EAAAC,cAACyb,EAAA,EAAD,CACEmM,SAAU,CAAC,QAAQ,SACnBlM,UAAW/c,KAAKE,MAAMsc,YAEtBhN,EAAApO,EAAAC,cAACyb,EAAA,EAAUE,OAAX,CACEupB,WAAY,OACZtpB,MAAO,kBACPiM,KAAI,uBAGN1Z,EAAApO,EAAAC,cAACyb,EAAA,EAAUI,KAAX,KACE1N,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,EACJla,MAAO,EACPuZ,cAAe,UAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEmD,GAAI,EACJ3a,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,0GASFsM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPuZ,cAAe,UAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEmD,GAAI,EACJla,WAAY,SACZiX,cAAe,UAGb9a,KAAKE,MAAMsuC,yBAA2B/qC,OAAO+B,KAAKxF,KAAKE,MAAMsuC,yBAAyB1+B,IAAK,SAAA0K,GAAK,OAC9FhL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,EACJ5X,WAAY,SACZiX,cAAe,MACfrI,IAAG,SAAAC,OAAW8H,GACd1W,eAAgB,iBAEhB0L,EAAApO,EAAAC,cAAC8pB,EAAA,EAAD,CACE3Q,MAAOA,EACP4Q,UAAW,CACTha,KAAK,OACLlR,MAAM,CACJmmB,GAAG,EACH/S,OAAO,UAGX1L,YAAa1G,EAAKhB,MAAMsuC,wBAAwBh0B,GAAO5S,cAEzD4H,EAAApO,EAAAC,cAAC6jB,EAAA,EAADzhB,OAAAC,OAAA,CACE2iB,GAAI,GACAkoB,EAFN,CAGEE,aAAc,EACdnpB,OAAQpkB,EAAKhB,MAAMsuC,wBAAwBh0B,GAAOyQ,WAEpDzb,EAAApO,EAAAC,cAAC8pB,EAAA,EAAD,CACE3Q,MAAOA,EACP4Q,UAAW,CACTha,KAAK,YACLlR,MAAMquC,GAER3mC,YAAa1G,EAAKhB,MAAMsuC,wBAAwBh0B,GAAO5S,iBAK/D4H,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,EACJrY,SAAU,EACVV,MAAO,MACPM,WAAY,IACZE,UAAW,UALb,wJAUFsM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,EACJ5X,WAAY,SACZiX,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACwsC,GAAA,EAAD,CACEC,WAAY,UACZjyB,YAAa7b,KAAKquC,QAClBN,UAAW/tC,KAAKJ,MAAMisC,YACtBlwB,YAAa,CACXpa,MAAM,CAAC,OAAO,OACdsc,UAAU8vB,KAAcK,kBAS5Bx+B,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJ6B,UAAU,EACV3a,MAAO,WACPutB,QAASjwB,KAAKJ,MAAMsuC,cACpBhkC,MAAK,8BACLoT,SAAW,SAAArE,GAAC,OAAI/X,EAAKitC,oBAAoBl1B,EAAEoD,OAAO4T,wBAtLzC7R,IAAMna,WCmdlByqC,eAncb,SAAAA,EAAYxuC,GAAO,IAAA4E,EAAA,OAAArB,OAAA0iC,EAAA,EAAA1iC,CAAAzD,KAAA0uC,IACjB5pC,EAAArB,OAAA2iC,EAAA,EAAA3iC,CAAAzD,KAAAyD,OAAA4iC,EAAA,EAAA5iC,CAAAirC,GAAApI,KAAAtmC,KAAME,KAfRN,MAAQ,CACNsuC,eAAc,GAaGppC,EATnB/E,cAAgB,KASG+E,EAKnBqX,mBALmB1Y,OAAAoT,EAAA,EAAApT,CAAA8D,EAAAnG,EAAA0V,KAKE,SAAAM,IAAA,OAAA7P,EAAAnG,EAAAoG,KAAA,SAAAgQ,GAAA,cAAAA,EAAA9P,KAAA8P,EAAA7P,MAAA,OACnB7C,EAAK1E,YADc,wBAAAoX,EAAAE,SAAAN,EAAApX,SALF8E,EASnB0X,WATmB/Y,OAAAoT,EAAA,EAAApT,CAAA8D,EAAAnG,EAAA0V,KASN,SAAAC,IAAA,OAAAxP,EAAAnG,EAAAoG,KAAA,SAAA0P,GAAA,cAAAA,EAAAxP,KAAAwP,EAAAvP,MAAA,WACa7C,EAAK/E,cAAcgkB,gBAAgB,CAAC,gBAAgB,YAAY,SAAS,SAAS,YAD/F,CAAA7M,EAAAvP,KAAA,eAAAuP,EAAAvP,KAAA,EAIH7C,EAAK/E,cAAc8Z,yBAAyB,CAChDH,cAAe,KACfC,YAAa,sBACbH,WAAY,iBAPL,OAST1U,EAAK5E,MAAMsc,aATFtF,EAAAvP,KAAA,eAWT7C,EAAK5E,MAAMsc,aAXF,wBAAAtF,EAAAQ,SAAAX,EAAA/W,SATM8E,EAwBnBqpC,oBAAsB,SAACD,GAEjBA,EACFppC,EAAK/E,cAAcm7B,gBAAgB,uBAAuB,QAE1Dp2B,EAAK/E,cAAcquC,iBAAiB,wBAGtCtpC,EAAK7D,SAAS,CACZitC,mBAjCeppC,EAqCnBupC,QArCmB,eAAAr7B,EAAAvP,OAAAoT,EAAA,EAAApT,CAAA8D,EAAAnG,EAAA0V,KAqCT,SAAA7R,EAAOuV,GAAP,IAAAyH,EAAA0sB,EAAA92B,UAAA,OAAAtQ,EAAAnG,EAAAoG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WAAasa,EAAb0sB,EAAA5mC,OAAA,QAAAsJ,IAAAs9B,EAAA,GAAAA,EAAA,GAAsB,QAG5B1sB,EAAWnd,EAAK5E,MAAM8gB,mBAGAlc,EAAK/E,cAAcgkB,gBAAgB,CAAC,gBAAgB,YAAY,SAAS,SAAS,YANlG,CAAAtc,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EASA7C,EAAK/E,cAAc8Z,yBAAyB,CAChDH,cAAe,eACfC,YAAa,UACbH,WAAU,GAAA9G,OAAK5N,EAAK5E,MAAM8gB,iBAAhB,KAAAtO,OAAoC8H,KAZ1C,OAcN1V,EAAK5E,MAAMskB,YAAX,GAAA9R,OAA0BuP,EAA1B,KAAAvP,OAAsC8H,IACtC1V,EAAK5E,MAAMsc,aAfL/U,EAAAE,KAAA,iBAiBN7C,EAAK5E,MAAMskB,YAAX,GAAA9R,OAA0BuP,EAA1B,KAAAvP,OAAsC8H,IACtC1V,EAAK5E,MAAMsc,aAlBL,yBAAA/U,EAAAiQ,SAAAzS,EAAAjF,SArCS,gBAAA8X,GAAA,OAAA9E,EAAA4E,MAAA5X,KAAA6X,YAAA,GAAA/S,EA2DnB8pC,QA3DmB,eAAAj7B,EAAAlQ,OAAAoT,EAAA,EAAApT,CAAA8D,EAAAnG,EAAA0V,KA2DT,SAAA0gB,EAAOhd,GAAP,IAAAq0B,EAAA,OAAAtnC,EAAAnG,EAAAoG,KAAA,SAAAowB,GAAA,cAAAA,EAAAlwB,KAAAkwB,EAAAjwB,MAAA,UACFknC,EAAc/pC,EAAK/E,cAAcgkB,gBAAgB,CAAC,QAAQ,oBACxCjf,EAAK/E,cAAcgkB,gBAAgB,CAAC,gBAAgB,YAAY,SAAS,SAAS,YAFlG,CAAA6T,EAAAjwB,KAAA,eAAAiwB,EAAAjwB,KAAA,EAKA7C,EAAK/E,cAAc8Z,yBAAyB,CAChDH,cAAe,eACfC,YAAa,UACbH,WAAU,GAAA9G,OAAK5N,EAAK5E,MAAM8gB,iBAAhB,KAAAtO,OAAoC8H,KAR1C,OAUN1V,EAAK5E,MAAMskB,YAAX,SAAA9R,OAAgCm8B,EAAYnmB,MAA5C,KAAAhW,OAAqD8H,IACrD1V,EAAK5E,MAAMsc,aAXLob,EAAAjwB,KAAA,gBAaN7C,EAAK5E,MAAMskB,YAAX,SAAA9R,OAAgCm8B,EAAYnmB,MAA5C,KAAAhW,OAAqD8H,IACrD1V,EAAK5E,MAAMsc,aAdL,yBAAAob,EAAAlgB,SAAA8f,EAAAx3B,SA3DS,gBAAA2X,GAAA,OAAAhE,EAAAiE,MAAA5X,KAAA6X,YAAA,GAEjB/S,EAAK1E,YAFY0E,2EAPb9E,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,yDAiFvC,IAAAgB,EAAAlB,KAEP,IAAKA,KAAKE,MAAMO,sBAAwBT,KAAKE,MAAM6gB,gBACjD,OAAO,KAGT,IAAMwtB,EAAa,CACjBvrC,WAAW,EACXI,SAAS,CAAC,EAAE,GACZV,MAAM,WACNsY,UAAU,CACRlX,eAAe,eAInB,OACE0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEiC,OAAQ7c,KAAKE,MAAM2c,QAEnBrN,EAAApO,EAAAC,cAACyb,EAAA,EAAD,CACEmM,SAAU,CAAC,QAAQ,SACnBlM,UAAW/c,KAAKE,MAAMsc,YAEtBhN,EAAApO,EAAAC,cAACyb,EAAA,EAAUE,OAAX,CACEkM,KAAI,qBACJjM,MAAO,oBACPspB,WAAY,CAAC,OAAO,UAGtB/2B,EAAApO,EAAAC,cAACyb,EAAA,EAAUI,KAAX,KACE1N,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEa,GAAI,EACJla,MAAO,EACPuZ,cAAe,UAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEmD,GAAI,EACJ3a,SAAU,CAAC,EAAE,GACbV,MAAO,WACPQ,UAAW,UAJb,wHASFsM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPuZ,cAAe,UAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,CAAC,EAAE,GACP3X,WAAY,SACZiX,cAAe,OAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExX,SAAU,CAAC,EAAE,GACb7B,MAAO,CAAC,GAAI,KACZyB,WAAY,CAAC,EAAE,GACfN,MAAO,aAGL1C,KAAKE,MAAMiD,SAAW,QAAU,qBAIjCnD,KAAKE,MAAMiD,UACVqM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,IACPyB,WAAY,CAAC,EAAE,GACfN,MAAO,YACPoB,eAAgB,UAJlB,YAWD9D,KAAKE,MAAMiD,UACVqM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,IACPyB,WAAY,CAAC,EAAE,GACfN,MAAO,YACPoB,eAAgB,UAJlB,WAUJ0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExX,SAAU,CAAC,EAAE,GACbJ,WAAY,CAAC,EAAE,GACfzB,MAAO,CAAC,IAAK,KACbmB,MAAO,YACPoB,eAAgB,UAGd9D,KAAKE,MAAMiD,SAAW,MAAQ,WAGlCqM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,CAAC,IAAK,QAKjBiO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZiX,cAAe,UAGb9a,KAAKE,MAAM4uC,iBAAmBrrC,OAAO+B,KAAKxF,KAAKE,MAAM4uC,iBAAiBh/B,IAAK,SAAAi/B,GACzE,IAAMv0B,EAAQtZ,EAAKhB,MAAM4uC,gBAAgBC,GAAUv0B,MAC7CyH,EAAW/gB,EAAKhB,MAAM4uC,gBAAgBC,GAAU9sB,SAChDra,EAAc1G,EAAKhB,MAAM4uC,gBAAgBC,GAAUnnC,YACnDqjB,EAAU/pB,EAAKhB,MAAM4uC,gBAAgBC,GAAUC,4BACrD,OACEx/B,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJja,MAAO,EACPsC,WAAY,SACZiX,cAAe,MACfrI,IAAG,SAAAC,OAAWq8B,GACdjrC,eAAgB,iBAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,CAAC,GAAI,KACZsC,WAAY,SACZiX,cAAe,OAEftL,EAAApO,EAAAC,cAAC8pB,EAAA,EAAD,CACEC,UAAW,CACTha,KAAK,OACLlR,MAAM,CACJmmB,GAAG,EACH/S,OAAO,CAAC,QAAQ,WAGpB1L,YAAaA,EACb4S,MAAO5S,EAAYsM,KAAKsG,QAE1BhL,EAAApO,EAAAC,cAAC8pB,EAAA,EAAD,CACEC,UAAW,CACTha,KAAK,YACLlR,MAAMquC,GAER3mC,YAAaA,EACb4S,MAAO5S,EAAYsM,KAAKsG,UAIzBtZ,EAAKhB,MAAMiD,UACVqM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,IACPsC,WAAY,SACZC,eAAgB,UAEhB0L,EAAApO,EAAAC,cAAC6jB,EAAA,EAADzhB,OAAAC,OAAA,GACM6qC,EADN,CAEEE,aAAc,EACdnpB,OAAQ2F,EACRjQ,UAAW,CACTlX,eAAe,eAOtB5C,EAAKhB,MAAMiD,UACVqM,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,IACPsC,WAAY,SACZC,eAAgB,UAEhB0L,EAAApO,EAAAC,cAAC8pB,EAAA,EAAD1nB,OAAAC,OAAA,GACMxC,EAAKhB,MADX,CAEEkrB,UAAW,CACTha,KAAK,SACLlR,MAAMquC,GAER/zB,MAAOA,EACP5S,YAAaA,MAKrB4H,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,CAAC,IAAK,KACbsC,WAAY,SACZC,eAAgB,UAEhB0L,EAAApO,EAAAC,cAAC8pB,EAAA,EAAD1nB,OAAAC,OAAA,GACMxC,EAAKhB,MADX,CAEEkrB,UAAW,CACTha,KAAK,MACLlR,MAAMquC,GAER/zB,MAAOA,EACP5S,YAAaA,MAGjB4H,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,CAAC,IAAK,KACbsC,WAAY,SACZC,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACqa,EAAA,EAAD,CACEG,YAAc,SAAA5C,GAAC,OAAI/X,EAAKmtC,QAAQ7zB,EAAMyH,IACtCtG,YAAa,CACX3X,KAAK,QACLzC,MAAM,OACNsc,UAAU8vB,KAAcK,iBAL5B,gBAgBZx+B,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsC,WAAY,SACZiX,cAAe,UAGb9a,KAAKE,MAAM+uC,wBAA0BxrC,OAAO+B,KAAKxF,KAAKE,MAAM+uC,wBAAwBn/B,IAAK,SAAA0K,GACvF,IAAM5S,EAAc1G,EAAKhB,MAAM+uC,uBAAuBz0B,GAAO5S,YAE7D,IAAKA,EACH,OAAO,KAGT,IAAMqjB,EAAU/pB,EAAKhB,MAAM+uC,uBAAuBz0B,GAAOyQ,QACrDikB,EAAiB,KAOrB,OAJEA,EADEtnC,EAAYnH,sBAAwBS,EAAKhB,MAAM6gB,gBAAgBnZ,EAAYojC,WAC5D9pC,EAAKhB,MAAMO,oBAAoBmH,EAAYnH,oBAAoB,IAAImH,EAAYojC,WAE/E9pC,EAAKhB,MAAM6gB,gBAAgBnZ,EAAYojC,WAGxDx7B,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJja,MAAO,EACPsC,WAAY,SACZiX,cAAe,MACfrI,IAAG,SAAAC,OAAW8H,GACd1W,eAAgB,iBAEhB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,IACPsC,WAAY,SACZiX,cAAe,OAEftL,EAAApO,EAAAC,cAAC8pB,EAAA,EAAD,CACEC,UAAW,CACTha,KAAK,OACLlR,MAAM,CACJmmB,GAAG,EACH/S,OAAO,UAGX1L,YAAaA,EACb4S,MAAOA,IAEThL,EAAApO,EAAAC,cAAC8pB,EAAA,EAAD,CACEC,UAAW,CACTha,KAAK,YACLlR,MAAMquC,GAER3mC,YAAaA,EACb4S,MAAOA,KAGXhL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,IACPsC,WAAY,SACZC,eAAgB,UAEhB0L,EAAApO,EAAAC,cAAC6jB,EAAA,EAADzhB,OAAAC,OAAA,GACM6qC,EADN,CAEEE,aAAc,EACdnpB,OAAQ2F,EACRjQ,UAAW,CACTlX,eAAe,cAIrB0L,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,IACPsC,WAAY,SACZC,eAAgB,UAEhB0L,EAAApO,EAAAC,cAAC8pB,EAAA,EAAD1nB,OAAAC,OAAA,GACMxC,EAAKhB,MADX,CAEEkrB,UAAW,CACTha,KAAK,SACLlR,MAAMquC,GAER/zB,MAAO00B,EAAe10B,MACtB5S,YAAasnC,MAGjB1/B,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,IACPsC,WAAY,SACZC,eAAgB,UAEhB0L,EAAApO,EAAAC,cAAC8pB,EAAA,EAAD1nB,OAAAC,OAAA,GACMxC,EAAKhB,MADX,CAEEkrB,UAAW,CACTha,KAAK,MACLlR,MAAMquC,GAER/zB,MAAO00B,EAAe10B,MACtB5S,YAAasnC,MAGjB1/B,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,IACPsC,WAAY,SACZC,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACqa,EAAA,EAAD,CACEG,YAAc,SAAA5C,GAAC,OAAI/X,EAAK0tC,QAAQp0B,IAChCmB,YAAa,CACX3X,KAAK,QACLzC,MAAM,OACNsc,UAAU8vB,KAAcK,iBAL5B,gBAgBZx+B,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEmD,GAAI,EACJla,WAAY,SACZiX,cAAe,SACfhX,eAAgB,UAEhB0L,EAAApO,EAAAC,cAACqa,EAAA,EAAD,CACEG,YAAa7b,KAAKwc,WAClBb,YAAa,CACXvY,SAAS,CAAC,EAAE,GACZ7B,MAAM,CAAC,OAAO,SAJlB,iBASAiO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJ6B,UAAU,EACV3a,MAAO,WACPutB,QAASjwB,KAAKJ,MAAMsuC,cACpBhkC,MAAK,8BACLoT,SAAW,SAAArE,GAAC,OAAI/X,EAAKitC,oBAAoBl1B,EAAEoD,OAAO4T,wBAxczC7R,IAAMna,sBCW3BkrC,8MACJvvC,MAAQ,CACNwvC,KAAK,GACLC,UAAU,KACVC,WAAW,KACX1c,YAAY,KACZ2c,aAAa,KACbC,cAAc,KACdC,eAAe,KACfhnB,gBAAgB,KAChBqmB,gBAAgB,KAChBY,iBAAgB,EAChBtnB,mBAAmB,KACnBunB,mBAAmB,KACnBV,uBAAuB,KACvBT,wBAAwB,QAG1BoB,UAAY,OAGZ7vC,cAAgB,OAiHhBi3B,WAAa,WACXlyB,EAAK7D,SAAS,CACZ2xB,YAAa,UAIjBqP,iBAAmB,SAAC4N,EAAWC,GAE7BhrC,EAAK/E,cAAc8Z,yBAAyB,CAC1CH,cAAe,KACfC,YAAak2B,EACbr2B,WAAY,iBAGd1U,EAAK7D,SAAS,CACZ4uC,aACAC,gBACA,WACAhrC,EAAKmyB,eAAe,gBAIxBA,eAAiB,SAACrE,GAChB9tB,EAAK7D,SAAS,CACZ2xB,mBAkWJmd,4BAAS,SAAA34B,IAAA,OAAA7P,EAAAnG,EAAAoG,KAAA,SAAAgQ,GAAA,cAAAA,EAAA9P,KAAA8P,EAAA7P,MAAA,cACP7C,EAAK5E,MAAM8vC,aAAa,SAAS,UAD1Bx4B,EAAA7P,KAAA,EAED7C,EAAK5E,MAAMujB,SAAS,UAFnB,wBAAAjM,EAAAE,SAAAN,EAAApX,oFAzeHA,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,OAG9C4Z,OAAO/Z,cAAgBC,KAAKD,gLAItBsvC,EAAYrvC,KAAKD,cAAcgkB,gBAAgB,CAAC,YAAY,cAC5D2C,EAAa1mB,KAAKD,cAAcgkB,gBAAgB,CAAC,eACjDqrB,EAAO3rC,OAAO+B,KAAKkhB,GAAYhd,OAAQ,SAAA2yB,GAAC,OAAO3V,EAAW2V,GAAG4T,aAAengC,IAAI,SAAAmS,GAAQ,MAAK,CAC/FkH,QAAQ,GACRzmB,MAAM,OACNwtC,UAAS,EACTxnB,MAAM2mB,EAAU,IAAIptB,EACpB/X,MAAMwc,EAAWzE,GAAUhF,MAC3BsM,MAAM7C,EAAWzE,GAAUiH,KAC3BinB,QAAQzpB,EAAWzE,GAAUvf,MAC7BkpB,UAAUlF,EAAWzE,GAAU2J,UAC/BwkB,cAAc1pB,EAAWzE,GAAUouB,aACnCC,kBAAkB5pB,EAAWzE,GAAUsuB,qBAKrC3hB,EAAc5uB,KAAKD,cAAcgkB,gBAAgB,CAAC,WAGxClQ,UACR28B,EAAc/sC,OAAOC,OAAO,CAChCylB,QAAQ,GACR+mB,UAAS,EACTtkB,UAAU6kB,IACV7hB,EAAY7L,QAEdqsB,EAAKvlC,KAAK2mC,KAINE,EAAc1wC,KAAKD,cAAcgkB,gBAAgB,CAAC,QAAQ,WAChDlQ,SACdu7B,EAAKvlC,KACH,CACEsf,QAAQ,GACRjf,MAAM,QACNgmC,UAAS,EACTxtC,MAAM,YACNwmB,KAAKwnB,EAAYxnB,KACjBR,MAAM,mBACNkD,UAAU1D,EACVJ,eAAe,CACbU,gBAAe,EACfM,UAAU4nB,EAAYxwC,MACtBkoB,mBAAmBsoB,GAErBP,QAAQnwC,KAAKE,MAAM2C,MAAMyI,OAAOq3B,UAMtCyM,EAAKvlC,KACH,CACEqf,KAAK,QACLhf,MAAM,QACNxH,MAAM,YACNkpB,UAAU1D,EACVgoB,UAAS,EACTxnB,MAAM,mBACNynB,QAAQnwC,KAAKE,MAAM2C,MAAMyI,OAAOq3B,QAChCxZ,QAAQ1lB,OAAOgG,OAAOzJ,KAAKD,cAAcgkB,gBAAgB,CAAC,WAAWra,OAAQ,SAAAinC,GAAC,OAAKA,EAAE98B,YAKzFu7B,EAAKvlC,KACH,CACEqf,KAAK,YACLhf,MAAM,QACNimC,QAAQ,UACRztC,MAAM,YACNkpB,UAAUvN,EACV6xB,UAAS,EACTxnB,MAAM,mBACNS,QAAQ,KAKZimB,EAAKvlC,KACH,CACEsf,QAAQ,GACRD,KAAK,QACL9B,QAAO,EACPld,MAAM,QACNgmC,UAAS,EACTtkB,UAAU,KACVlpB,MAAM,YACNytC,QAAQ,UACRS,gBAAe,EACfloB,MAAM1oB,KAAKD,cAAcgkB,gBAAgB,CAAC,yBAIxC/jB,KAAKiB,SAAS,CAClBmuC,kSAiCersB,EAAa/iB,KAAKE,MAA3B8iB,MAASD,OAEXssB,EAAYrvC,KAAKD,cAAcgkB,gBAAgB,CAAC,YAAY,cAC9DwrB,EAAeF,EAEfG,EAAgB,KAChBzqC,EAAgB,KAChB0qC,EAAiB,KACjBzuB,EAAmB,KACnB2uB,EAAqB,KAGrB5sB,EAAO8tB,UACTpB,EAAiB1sB,EAAO8tB,QAClB1F,EAASpoB,EAAOooB,OAChB2F,EAAS/tB,EAAO+tB,OAEhBC,EAAsBttC,OAAO+B,KAAKxF,KAAKE,MAAMO,qBAAqB8U,SAASk6B,EAAeh/B,eAC1FugC,EAAqB7F,GAAU1nC,OAAO+B,KAAKxF,KAAKE,MAAMO,qBAAqB8U,SAAS41B,EAAO16B,eAE7FsgC,GAAuBC,GAEpBD,IACHxB,GAAgB,IAAIE,GAItBF,GAAgB,KADhBvuB,EAAmB+vB,EAAsBtB,EAAiBtE,GAIpD8F,EAAkB9F,GAAU1nC,OAAO+B,KAAKxF,KAAKE,MAAMO,oBAAoBugB,IAAmBzL,SAAS41B,EAAOhoB,eAC1G+tB,EAAkBJ,GAAUrtC,OAAO+B,KAAKxF,KAAKE,MAAMO,oBAAoBugB,IAAmBzL,SAASu7B,EAAO3tB,gBAC5G8tB,GAAmBC,KACrBnsC,EAAgBksC,EAAkB9F,EAAOhoB,cAAgB2tB,EAAO3tB,cAChEosB,GAAgB,IAAIxqC,EAEhBgsC,IACFvB,EAAgBvK,OAIpBsK,GAAgB,IAAIxsB,EAAO8tB,QAEvB9tB,EAAOooB,QAAUpoB,EAAOooB,OAAOpjC,SACjCwnC,GAAgB,IAAIxsB,EAAOooB,UAS3BiE,EAAOpvC,KAAKJ,MAAMwvC,KAEpB3mB,EAAkB,KAClBL,EAAqB,KAEzBgnB,EAAKxmC,QAAQ,SAAAw5B,GACXA,EAAE8N,UAAW,EACb,IAAMiB,EAAe9B,EAAU,IAAItsB,EAAO8tB,QACtCtB,EAAa9+B,gBAAkB2xB,EAAE1Z,MAAMjY,gBAAoB2xB,EAAEjZ,QAAQphB,QAAUq6B,EAAE1Z,MAAMjY,gBAAkB0gC,EAAa1gC,eACxH2xB,EAAE8N,UAAW,EACS,OAAlBV,IACFA,EAAgBpN,EAAExW,UAClB+jB,EAAqBvN,EAAEta,iBAEhBsa,EAAEjZ,QAAQphB,QACnBq6B,EAAEjZ,QAAQvgB,QAAQ,SAAAwoC,GAChBA,EAAKlB,UAAW,GACE9N,EAAE1Z,MAAM,IAAI0oB,EAAK1oB,OACrBjY,gBAAkB8+B,EAAa9+B,gBAC3C2xB,EAAE8N,UAAW,EACbkB,EAAKlB,UAAW,EAGM,OAAlBV,IACE4B,EAAKxlB,WACP4jB,EAAgB4B,EAAKxlB,UACrB+jB,EAAqBvN,EAAEta,iBAEvB0nB,EAAgBpN,EAAExW,UAClB+jB,EAAqBvN,EAAEta,kBAMzBspB,EAAKlB,WACP9nB,EAAqBgpB,KAOvBhP,EAAE8N,WACJznB,EAAkB2Z,KAOjBoN,4CACIxvC,KAAKwkB,YAAY,KAAI,6BAIxBxkB,KAAKE,MAAMgiB,iBAAiBlB,EAAiBjc,kBAGnD/E,KAAKD,cAAcsxC,4BAA4B9B,aAEzCvvC,KAAKiB,SAAS,CAClBmuC,OACArsB,SACAssB,YACAE,eACAC,gBACAC,iBACAhnB,kBACAknB,qBACAvnB,yKAKEpoB,KAAK4vC,WACP91B,OAAOw3B,aAAatxC,KAAK4vC,uKAM3B5vC,KAAKE,MAAMqxC,kBAAkB,aAE7BvxC,KAAKI,qBACCJ,KAAKwxC,kBACXxxC,KAAKwiB,iRAKLxiB,KAAK4vC,UAAY91B,OAAOsyB,WAAW,WAC5BlrC,EAAKhB,MAAMuxC,oBAAuBvwC,EAAKhB,MAAMM,sBAChDU,EAAKD,SAAS,CACZyuC,iBAAgB,KAGpB,KAEG1vC,KAAKE,MAAMsjB,8CACPxjB,KAAKE,MAAMujB,sBACRzjB,KAAKE,MAAMuxC,4DACdzxC,KAAKE,MAAMwxC,yBACR1xC,KAAKE,MAAMM,+DACdR,KAAKE,MAAMyxC,sCAGpB3xC,KAAKI,sBACCJ,KAAKwxC,mBACXxxC,KAAKwiB,aAEyC,WAA7BxiB,KAAKE,MAAMqoB,eAE1BvoB,KAAK4xC,oMAIgBtxC,EAAUC,iGAEjCP,KAAKI,YAECyxC,EAAavxC,EAAU0iB,MAAMD,OAC7BA,EAAS/iB,KAAKE,MAAM8iB,MAAMD,OAE5BriB,KAAKC,UAAUkxC,KAAgBnxC,KAAKC,UAAUoiB,mCAC1C/iB,KAAKiB,SAAS,CAClBuuC,cAAc,MACb,WACD5yB,EAAK4F,sBAIH8F,EAAwC,WAA7BtoB,KAAKE,MAAMqoB,cACtB9N,EAAiBna,EAAUoa,UAAY1a,KAAKE,MAAMwa,QAClDiJ,EAAkB3jB,KAAKE,MAAM8gB,kBAAoB1gB,EAAU0gB,mBAAqBhhB,KAAKE,MAAM8gB,iBAC3F2kB,EAAyBjlC,KAAKC,UAAUL,EAAUygB,mBAAqBrgB,KAAKC,UAAUX,KAAKE,MAAM6gB,iBACjG0wB,EAAqBzxC,KAAKE,MAAMuxC,oBAAsBnxC,EAAUmxC,qBAAuBzxC,KAAKE,MAAMuxC,mBAClGjxC,EAAuBR,KAAKE,MAAMM,sBAAwBF,EAAUE,uBAAyBR,KAAKE,MAAMM,sBAEzG8nB,IAAa7N,GAAkBg3B,GAAsBjxC,GAAwBmjB,GAAmBgiB,IACnG3lC,KAAK4xC,sQAMH5xC,KAAKE,MAAM6E,eAAkB/E,KAAKE,MAAMuxC,oBAAuBzxC,KAAKE,MAAMM,sBAAyBR,KAAKE,MAAMO,qBAAwBT,KAAKE,MAAM6gB,yDAC5I,6BAGH/gB,KAAK8xC,2CACL9xC,KAAK+xC,8CACL/xC,KAAKgyC,4CACLhyC,KAAKiyC,mSAILC,EAAclyC,KAAKD,cAAcoyC,iBACjCC,EAAiBpyC,KAAKD,cAAcsyC,cAAc,gBAAe,GAAM,GAGxEH,GAAgBE,sBACbxf,EAAc,UACA5yB,KAAKJ,MAAMgzB,4CACvB5yB,KAAKiB,SAAS,CAClB2xB,gDAGKA,2QAOL0f,EAA2F,OAAxEtyC,KAAKD,cAAcsyC,cAAc,wBAAuB,EAAM,OACnFryC,KAAKE,MAAM6E,eAAkButC,GAAqBtyC,KAAKE,MAAM6gB,iBAA8C,OAA3B/gB,KAAKJ,MAAMgzB,qDACtF,6BAGqB5yB,KAAKD,cAAcwyC,mCAA3CzD,kBAC+B9uC,KAAKD,cAAcyyC,2BAA2B,kBAA7EvD,WAIDH,GAAmBrrC,OAAO+B,KAAKspC,GAAiB/mC,OAAO,GAAOknC,GAA0BxrC,OAAO+B,KAAKypC,GAAwBlnC,OAAO,wBAChI6qB,EAAc,aACA5yB,KAAKJ,MAAMgzB,8CACvB5yB,KAAKiB,SAAS,CAClB2xB,cACAkc,kBACAG,4DAGKrc,oCAIJ,kRAIF5yB,KAAKE,MAAMwa,SAAY1a,KAAKE,MAAMuxC,oBAAuBzxC,KAAKE,MAAMM,8DAChE,iBAILR,KAAKE,MAAMwa,SAAsC,OAA3B1a,KAAKJ,MAAMgzB,gCAC/B6f,GAAgB,GAEdC,EAAoB1yC,KAAKD,cAAcgkB,gBAAgB,CAAC,SAAS,aAEjDlQ,SAAWonB,eAGzB0X,GAAW,IAAI98B,MAAOrN,UACtBukC,EAAgB/sC,KAAKE,MAAMwa,QAAQjK,eACrCu8B,EAAY/R,aAAagS,QAAQ,aAAevsC,KAAKwsC,MAAMjS,aAAagS,QAAQ,cAAgB,IAGrFF,GAOHC,EAAUD,GAAeI,WAC7ByF,EAAWhuC,SAASooC,EAAUD,GAAe6F,UAEnDH,GAD2BE,EAASC,GAAU,KACXF,EAAkBG,YATrD7F,EAAUD,GAAiB,CACzBI,UAAW,EACXyF,SAAWD,GAEbF,GAAgB,GAQdA,IACFzF,EAAUD,GAAe6F,SAAWD,EACpC3yC,KAAKD,cAAcm7B,gBAAgB,YAAYx6B,KAAKC,UAAUqsC,MAI5Dpa,EAAc6f,EAAgB,UAAYzyC,KAAKJ,MAAMgzB,YACvD5yB,KAAKJ,MAAMgzB,cAAgBA,oCACvB5yB,KAAKiB,SAAS,CAClB2xB,iDAGKA,oCAIJ,yRAKF5yB,KAAKE,MAAMwa,SAAY1a,KAAKE,MAAMuxC,oBAAuBzxC,KAAKE,MAAMM,8DAChE,gBAIHsyC,EAAsB9yC,KAAKD,cAAcgkB,gBAAgB,CAAC,SAAS,UAAU,YAC7EgvB,EAA2F,OAAxE/yC,KAAKD,cAAcsyC,cAAc,wBAAuB,EAAM,MAExD,OAA3BryC,KAAKJ,MAAMgzB,cAAwBkgB,IAAuBC,GAAqB/yC,KAAKJ,MAAM4uC,yDACtDxuC,KAAKD,cAAcyyC,2CAAnDhE,SACA5b,EAAc4b,GAA2B/qC,OAAO+B,KAAKgpC,GAAyBzmC,OAAO,EAAI,UAAY,KACrG4S,EAAW,CACfiY,cACA4b,qCAEIxuC,KAAKiB,SAAS0Z,oCACbiY,oCAGF,6IAGGie,GAAyB,IAAjBmC,IAAiBn7B,UAAA9P,OAAA,QAAAsJ,IAAAwG,UAAA,KAAAA,UAAA,GAG/Bm7B,IACFnC,EAAUA,EAAQoC,QAAQjzC,KAAKJ,MAAMyvC,UAAW,IAAI,KAGtD,IAAM6D,EAAWF,EAAchzC,KAAKJ,MAAMyvC,UAAW,IAAMwB,EAAUA,EACrE/2B,OAAOq5B,SAAS53B,KAAK23B,EAGrBlzC,KAAKD,cAAc8Z,yBAAyB,CAC1CH,cAAe,KACfC,YAAa,cACbH,WAAY05B,IAGdp5B,OAAOs5B,SAAS,EAAG,uCAQTruC,GAEV,GADAA,EAAgBA,EAAcoe,cAC1B1f,OAAO+B,KAAKxF,KAAKE,MAAM6gB,iBAAiBxL,SAASxQ,GAAe,CAClE,IAAMsuC,EAAa,GAGfrzC,KAAKJ,MAAM6vC,eAAeh/B,gBAAkBzQ,KAAKE,MAAM8gB,iBAAiBvQ,eAC1E4iC,EAAWxpC,KAAK7J,KAAKJ,MAAM6vC,gBAI7B4D,EAAWxpC,KAAK7J,KAAKE,MAAM8gB,kBAG3BqyB,EAAWxpC,KAAK9E,GAEhB/E,KAAKwkB,YAAY6uB,EAAWxjC,KAAK,mDAIjBy/B,GAClBtvC,KAAKiB,SAAS,CACZquC,WAAWA,EAAWjzB,0CAKxB,IAAMi3B,EAAgBtzC,KAAKJ,MAAM4vC,cAAgBxvC,KAAKJ,MAAM4vC,cAAgB,KAC5E,OACEhgC,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,OACPghB,SAAU,QACVzH,cAAe,MACf+C,UAAW7d,KAAKE,MAAM0N,UACtBuP,gBAAiB,CAAC,cAAc,SAEhC7J,OAAQ,CAAEwG,OAAOqY,YAAY,GAAI,KAAK,UAEtC3iB,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE9L,OAAQ,EACRkjB,OAAQ,MACRzwB,MAAO,CAAC,EAAE,EAAE,GACZuZ,cAAe,SACfyH,SAAU,CAAC,QAAQ,aAEnB/S,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACExK,EAAG,CAAC,EAAE,GACNwgB,OAAQ,EACRrvB,MAAO,CAAC,QAAQ,QAChB+R,OAAQ,CAAC,OAAO,SAChB6J,gBAAiB,SACjB6lB,YAAahjC,KAAKE,MAAM2C,MAAMyI,OAAOioC,gBACrCC,YAAW,aAAA9gC,OAAe1S,KAAKE,MAAM2C,MAAMyI,OAAOioC,kBAElD/jC,EAAApO,EAAAC,cAACoyC,EAAA,EAADhwC,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEkvC,KAAMpvC,KAAKJ,MAAMwvC,UAIvB5/B,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEzH,GAAI,EACJsI,GAAI,EACJrI,GAAI,CAAC,EAAE,GACP7R,MAAO,CAAC,EAAE,EAAE,GACZgB,MAAO,CACLmxC,UAAU,SACVC,UAAU,UAEZrgC,OAAQ,CAAC,OAAO,QAChBwH,cAAe,UACfqC,gBAAiB,eAGdnd,KAAKE,MAAMuxC,oBAAuBzxC,KAAKE,MAAMM,sBAAyB8yC,EA4FrE9jC,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPuZ,cAAe,UAEftL,EAAApO,EAAAC,cAACuyC,GAAA,EAADnwC,OAAAC,OAAA,CACE4rC,WAAYtvC,KAAKJ,MAAM0vC,WACvB9qB,YAAaxkB,KAAKwkB,YAAYhH,KAAKxd,OAC/BA,KAAKE,QAGTozC,GACE9jC,EAAApO,EAAAC,cAACiyC,EAAD7vC,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEE8iB,MAAO,CAAED,OAAO,IAChBmoB,UAAWlrC,KAAKJ,MAAMmjB,OACtBZ,YAAaniB,KAAKmiB,YAAY3E,KAAKxd,MACnCwkB,YAAaxkB,KAAKwkB,YAAYhH,KAAKxd,MACnCyoB,gBAAiBzoB,KAAKJ,MAAM6oB,gBAC5BL,mBAAoBpoB,KAAKJ,MAAMwoB,mBAC/B6Z,iBAAkBjiC,KAAKiiC,iBAAiBzkB,KAAKxd,OACzCA,KAAKJ,MAAM+vC,sBA/GvBngC,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACErZ,MAAO,EACPsZ,UAAW,OACXhX,WAAY,SACZiX,cAAe,SACfhX,eAAgB,UAGb9D,KAAKE,MAAM2zC,QAAQC,iBA2Bf9zC,KAAKJ,MAAM8vC,gBAiBdlgC,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT9C,EAAE,EACFoL,GAAG,EACHja,MAAM,CAAC,EAAE,OAGXiO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE/W,WAAY,SACZiX,cAAe,UAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE5W,KAAM,QACNoN,KAAM,UACN1O,MAAO,aAET8M,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJpY,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,qCAMoCsM,EAAApO,EAAAC,cAAA,WANpC,yDAQAmO,EAAApO,EAAAC,cAACqa,EAAA,EAAD,CACEC,YAAa,CACXH,GAAG,EACHja,MAAM,CAAC,EAAE,KAEXsa,YAAa7b,KAAK+vC,OAAOvyB,KAAKxd,OALhC,YAxCJwP,EAAApO,EAAAC,cAAC0Z,EAAA,EAAD,CACEG,UAAW,CACT+I,SAAS,EACTjhB,WAAW,GAEbiY,YAAa,CACXQ,GAAG,EACHzX,KAAK,QAEPgX,UAAW,CACT+C,GAAG,EACHjD,cAAc,UAEhBhN,KAAQ9N,KAAKE,MAAMuxC,mBAA+CzxC,KAAKE,MAAMM,qBAAgD,oBAAzB,uBAA5D,uBAxC1CgP,EAAApO,EAAAC,cAAC4R,EAAA,EAAD,CACEC,UAAW,CACT9C,EAAE,EACFoL,GAAG,EACHja,MAAM,CAAC,EAAE,OAGXiO,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE/W,WAAY,SACZiX,cAAe,UAEftL,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACE5W,KAAM,QACNoN,KAAM,UACN1O,MAAO,aAET8M,EAAApO,EAAAC,cAACuZ,EAAA,EAAD,CACEY,GAAI,EACJpY,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,OAMMsM,EAAApO,EAAAC,cAAA,cAASrB,KAAKD,cAAc2iC,WAAW1iC,KAAKE,MAAM2zC,QAAQE,QAAQ3iC,MAAlE,YANN,gEA6FhB5B,EAAApO,EAAAC,cAAC2yC,GAAD,CACEx3B,WAAYxc,KAAKg3B,WACjBna,OAAmC,SAA3B7c,KAAKJ,MAAMgzB,cAErBpjB,EAAApO,EAAAC,cAAC4yC,GAADxwC,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEsc,WAAYxc,KAAKg3B,WACjBxS,YAAaxkB,KAAKwkB,YAAYhH,KAAKxd,MACnC8uC,gBAAiB9uC,KAAKJ,MAAMkvC,gBAC5BjyB,OAAmC,YAA3B7c,KAAKJ,MAAMgzB,YACnBqc,uBAAwBjvC,KAAKJ,MAAMqvC,0BAErCz/B,EAAApO,EAAAC,cAAC6yC,GAADzwC,OAAAC,OAAA,GACM1D,KAAKE,MADX,CAEEsc,WAAYxc,KAAKg3B,WACjBxS,YAAaxkB,KAAKwkB,YAAYhH,KAAKxd,MACnC6c,OAAmC,YAA3B7c,KAAKJ,MAAMgzB,YACnB4b,wBAAyBxuC,KAAKJ,MAAM4uC,2BAEtCh/B,EAAApO,EAAAC,cAAC8yC,GAAA,EAAD,CACE33B,WAAYxc,KAAKg3B,WACjB/Z,MAAOjd,KAAKJ,MAAMiwC,WAClBuE,QAASp0C,KAAKJ,MAAMkwC,aACpBjzB,OAAmC,YAA3B7c,KAAKJ,MAAMgzB,cAErBpjB,EAAApO,EAAAC,cAACgzC,GAAD,CACE73B,WAAYxc,KAAKg3B,WACjBtc,QAAS1a,KAAKE,MAAMwa,QACpB45B,SAAUt0C,KAAKE,MAAMo0C,SACrBT,QAAS7zC,KAAKE,MAAM2zC,QAAQE,QAC5B9nB,UAAWjsB,KAAKE,MAAM6E,cACtBwvC,aAAcv0C,KAAKE,MAAMq0C,aACzBC,cAAex0C,KAAKE,MAAM6E,cAC1B8X,OAAmC,YAA3B7c,KAAKJ,MAAMgzB,sBAvuBL3uB,aA8uBTkrC","file":"static/js/3.84b5c89b.chunk.js","sourcesContent":["import Title from '../Title/Title';\nimport CountUp from 'react-countup';\nimport React, { Component } from 'react';\nimport { Box, Flex, Text, Loader } from \"rimble-ui\";\nimport FunctionsUtil from '../utilities/FunctionsUtil';\n\nclass AssetsUnderManagement extends Component {\n\n  state = {\n    totalAUM:null,\n    totalAUMEndOfYear:null\n  }\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.loadTotalAUM();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const availableStrategiesChanged = !prevProps.availableStrategies && JSON.stringify(prevProps.availableStrategies) !== JSON.stringify(this.props.availableStrategies);\n    if (availableStrategiesChanged || contractsInitialized){\n      this.loadTotalAUM();\n    }\n  }\n\n  async loadTotalAUM(){\n\n    if (!this.props.availableStrategies || !this.props.contractsInitialized){\n      return true;\n    }\n\n    const {\n      avgAPY,\n      totalAUM\n    } = await this.functionsUtil.getAggregatedStats();\n\n    const totalAUMEndOfYear = totalAUM.plus(totalAUM.times(avgAPY.div(100)));\n\n    this.setState({\n      totalAUM,\n      totalAUMEndOfYear\n    });\n  }\n\n  render() {\n    return this.state.totalAUM ? (\n      <Box\n        width={1}\n      >\n        <CountUp\n          delay={0}\n          decimals={4}\n          decimal={'.'}\n          separator={''}\n          useEasing={false}\n          duration={31536000}\n          start={parseFloat(this.state.totalAUM)}\n          end={parseFloat(this.state.totalAUMEndOfYear)}\n          formattingFn={ n => '$ '+this.functionsUtil.formatMoney(n,4) }\n        >\n          {({ countUpRef, start }) => (\n            <span\n              style={ this.props.counterStyle ? this.props.counterStyle : {\n                display:'block',\n                color:'dark-gray',\n                whiteSpace:'nowrap',\n                fontFamily:this.props.theme.fonts.counter,\n                fontWeight:this.props.theme.fontWeights[5],\n                textAlign: this.props.isMobile ? 'center' : 'right',\n                fontSize: this.props.isMobile ? '1.6em' : this.props.theme.fontSizes[6]\n              }}\n              ref={countUpRef}\n            />\n          )}\n        </CountUp>\n        {\n          (typeof this.props.subtitle === 'undefined' || this.props.subtitle) && (\n            <Title\n              fontWeight={3}\n              fontSize={[2,2]}\n              color={'cellTitle'}\n              textAlign={['center','right']}\n              {...this.props.subtitleProps}\n            >\n              {\n                this.props.subtitle ? this.props.subtitle : (\n                  <Text.span fontWeight={'inherit'} color={'inherit'} fontSize={'inherit'}>Assets Under Management <Text.span color={'cellTitle'} fontWeight={3} fontSize={'70%'}>(V3 + V4)</Text.span></Text.span>\n                )\n              }\n            </Title>\n          )\n        }\n      </Box>\n    ) : (\n      <Flex\n        alignItems={'center'}\n        justifyContent={this.props.loaderAlign || 'center'}\n      >\n        <Loader\n          size={\"30px\"}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default AssetsUnderManagement;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"twitterIcon\":\"TwitterShareButton_twitterIcon__2QCmn\"};","import moment from 'moment';\nimport { Bar } from '@nivo/bar';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CustomTooltip from '../CustomTooltip/CustomTooltip';\nimport CustomTooltipRow from '../CustomTooltip/CustomTooltipRow';\n\nclass StatsChart extends Component {\n  state = {\n    chartProps:{},\n    chartType:null,\n    chartData:null,\n    chartWidth:null\n  };\n\n  async componentDidMount() {\n    this.setState({\n      chartData:null,\n      chartType:null,\n      chartProps:null,\n    });\n    this.loadUtils();\n    this.loadApiData();\n  }\n\n  async componentDidUpdate(prevProps) {\n    const showAdvancedChanged = prevProps.showAdvanced !== this.props.showAdvanced;\n    const apiResultsChanged = prevProps.apiResults !== this.props.apiResults;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    if (apiResultsChanged || showAdvancedChanged || tokenChanged){\n      this.componentDidMount();\n    }\n  }\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  parseAum = value => {\n    return (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.tokenConfig || !this.props.selectedToken || !this.props.chartMode || !this.props.apiResults){\n      return false;\n    }\n\n    const maxGridLines = 4;\n    const apiResults = this.props.apiResults;\n    const apiResults_unfiltered = this.props.apiResults_unfiltered;\n    const totalItems = apiResults.length;\n    const protocols = Object.assign([],this.props.tokenConfig.protocols);\n    // const compoundProtocol = this.props.tokenConfig.protocols.find( p => (p.name === 'compound'));\n\n    const versionInfo = globalConfigs.stats.versions[this.props.idleVersion];\n\n    let keys = {};\n    let tempData = {};\n    let gridYStep = 0;\n    let itemIndex = 0;\n    let chartData = [];\n    let chartProps = {};\n    let chartType = Line;\n    let gridYValues = [];\n    let maxChartValue = 0;\n    let axisBottomIndex = 0;\n    let idleChartData = null;\n    let firstIdleBlock = null;\n\n    switch (this.props.chartMode){\n      case 'VOL':\n        let divergingData = {};\n\n        const startTimestamp = parseInt(apiResults_unfiltered[0].timestamp);\n        const endTimestamp = parseInt(moment()._d.getTime()/1000);\n\n        for (let timestamp=startTimestamp;timestamp<=endTimestamp;timestamp+=86400){\n          const date = moment(timestamp*1000).format(\"YYYY/MM/DD\");\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n        }\n\n        let lastRow = null;\n        apiResults_unfiltered.forEach(row => {\n          const date = moment(row.timestamp*1000).format(\"YYYY/MM/DD\");\n          const idleTokens = this.functionsUtil.fixTokenDecimals(row.idleSupply,18);\n\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp:row.timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n\n          if (lastRow){\n            const idleTokensPrev = this.functionsUtil.fixTokenDecimals(lastRow.idleSupply,18);\n            const idleTokensDiff = !idleTokens.eq(idleTokensPrev);\n            if (idleTokensDiff){\n              const diff = idleTokens.minus(idleTokensPrev);\n              // Deposits\n              if (diff.gte(0)){\n                divergingData[date].deposits+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,divergingData[date].deposits);\n              } else {\n                divergingData[date].redeems+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,Math.abs(divergingData[date].deposits));\n              }\n            }\n\n          } else {\n            divergingData[date].deposits+=parseFloat(idleTokens);\n          }\n\n          lastRow = row;\n        });\n\n        chartData = Object.values(divergingData).filter(v => {\n          return (!this.props.startTimestamp || v.timestamp>=this.props.startTimestamp) && (!this.props.endTimestamp || v.timestamp<=this.props.endTimestamp);\n        });\n\n        let maxRange = 0;\n        chartData.forEach(v => {\n          maxRange = Math.max(maxRange,Math.abs(v.deposits),Math.abs(v.redeems));\n        })\n\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          indexBy: 'date',\n          enableLabel: false,\n          minValue:-maxRange,\n          maxValue:maxRange,\n          label: d => {\n            return Math.abs(d.value);\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days',\n          },\n          axisLeft: null,\n          axisRight: {\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:8,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(Math.abs(v),0)\n          },\n          markers: [\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { strokeOpacity: 0 },\n              textStyle: { fill: this.props.theme.colors.transactions.action.deposit },\n              legend: 'deposits',\n              legendPosition: 'top-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { stroke: this.props.theme.colors['dark-gray'], strokeDasharray: '5 3' },\n              textStyle: { fill: this.props.theme.colors.transactions.action.redeem },\n              legend: 'redeems',\n              legendPosition: 'bottom-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n          ],\n          keys:['deposits','redeems'],\n          padding:0.4,\n          colors:[this.props.theme.colors.transactions.action.deposit, this.props.theme.colors.transactions.action.redeem],\n          labelTextColor: 'inherit:darker(1.4)',\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 80 : 100,\n              itemHeight: 18,\n              translateX: 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            },\n            tooltip:{\n              container:{\n                boxShadow:null,\n                background:null\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 50, bottom: 45, left: 50 } : { top: 20, right: 70, bottom: 70, left: 50 },\n          tooltip:(data) => {\n            const xFormatted = this.functionsUtil.strToMoment(data.indexValue).format('MMM DD');\n            const point = {\n              id:data.id,\n              data:{\n                xFormatted\n              }\n            };\n            const depositFormatted = this.functionsUtil.abbreviateNumber(data.data.deposits,2)+' '+this.props.selectedToken;\n            const redeemFormatted = this.functionsUtil.abbreviateNumber(data.data.redeems,2)+' '+this.props.selectedToken;\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                <CustomTooltipRow\n                  label={'Deposits'}\n                  color={this.props.theme.colors.deposit}\n                  value={depositFormatted}\n                />\n                <CustomTooltipRow\n                  label={'Redeem'}\n                  color={this.props.theme.colors.redeem}\n                  value={redeemFormatted}\n                />\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      /*\n      case 'AUM_ALL':\n        await this.functionsUtil.asyncForEach(Object.keys(availableTokens[globalConfigs.network.requiredNetwork]),async (tokenName,i) => {\n          const tokenConfig = availableTokens[globalConfigs.network.requiredNetwork][tokenName];\n          const tokenDataApi = await this.props.getTokenData(tokenConfig.address);\n          chartData.push({\n            id:tokenName,\n            color: tokenConfig.color,\n            data: tokenDataApi.map((d,i) => {\n              const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n              const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,tokenConfig.decimals);\n              const aum = idleTokens.times(idlePrice);\n              return {\n                x: moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\"),\n                y: parseInt(aum.toString())\n              };\n            })\n          });\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken,\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v),\n            orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            legendPosition: 'middle'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            format: '%b %d',\n            tickValues: this.props.isMobile ? 'every 4 days' : 'every 3 days',\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 36,\n            legendPosition: 'middle'\n          },\n          enableArea:false,\n          curve:\"linear\",\n          enableSlices:'x',\n          enableGridX:true,\n          enableGridY:false,\n          colors:d => d.color,\n          pointSize:0,\n          pointColor:{ from: 'color', modifiers: []},\n          pointBorderWidth:1,\n          pointLabel:\"y\",\n          pointLabelYOffset:-12,\n          useMesh:true,\n          animate:false,\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 60, bottom: 40, left: 60 },\n        };\n      break;\n      */\n      case 'AUM':\n\n        maxChartValue = 0;\n\n        chartData.push({\n          id:'AUM',\n          color: 'hsl('+globalConfigs.stats.tokens[this.props.selectedToken].color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n            const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n            const aum = idleTokens.times(idlePrice);\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(aum.toString());\n\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x,y };\n          })\n        });\n\n        // Add allocation\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          apiResults.map((d,i) => {\n            return d.protocolsData.filter((protocolAllocation,x) => {\n                return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            })\n            .map((protocolAllocation,z) => {\n              const protocolPaused = this.functionsUtil.BNify(protocolAllocation.rate).eq(0);\n              if (!protocolPaused){\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals));\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                let foundItem = chartData[0].data.filter(item => { return item.x === x });\n                if (foundItem){\n                  foundItem = foundItem[0];\n                  const pos = chartData[0].data.indexOf(foundItem);\n                  if (!foundItem.allocations){\n                    foundItem.allocations = {};\n                  }\n                  foundItem.allocations[p.name] = y;\n                  chartData[0].data[pos] = foundItem;\n                }\n              }\n              return undefined;\n            })[0]\n          }).filter((v) => { return v !== undefined; } )\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:v => this.functionsUtil.formatMoney(v,v<1 ? 3 :0),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 0,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:true,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            if (typeof point === 'object' && typeof point.data === 'object'){\n              return (\n                <CustomTooltip\n                  point={point}\n                >\n                  <CustomTooltipRow\n                    label={point.serieId}\n                    color={point.serieColor}\n                    value={point.data.yFormatted}\n                  />\n                  {\n                    point.data.allocations && typeof point.data.allocations === 'object' &&\n                      Object.keys(point.data.allocations).map(protocolName => {\n                        const protocolInfo = globalConfigs.stats.protocols[protocolName];\n                        const protocolColor = 'hsl('+protocolInfo.color.hsl.join(',')+')';\n                        const protocolAllocation = point.data.allocations[protocolName];\n                        const protocolAllocationFormatted = this.functionsUtil.formatMoney(protocolAllocation,protocolAllocation<1 ? 3 : 0);\n                        const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                        return (\n                          <CustomTooltipRow\n                            color={protocolColor}\n                            label={protocolInfo.label}\n                            key={`${point.id}_${protocolName}`}\n                            value={`${protocolAllocationFormatted} (${protocolAllocationPerc})`}\n                          />\n                        );\n                      })\n                  }\n                </CustomTooltip>\n              );\n              /*\n              return (\n                <div\n                    key={point.id}\n                    style={{\n                      background: 'white',\n                      color: 'inherit',\n                      fontSize: 'inherit',\n                      borderRadius: '2px',\n                      boxShadow: 'rgba(0, 0, 0, 0.25) 0px 1px 2px',\n                      padding: '5px 9px'\n                    }}\n                >\n                  <div>\n                    <table style={{width:'100%',borderCollapse:'collapse'}}>\n                      <tbody>\n                        <tr>\n                          <td style={{padding:'3px 5px'}}>\n                            <span style={{display:'block', width: '12px', height: '12px', background: point.serieColor}}></span>\n                          </td>\n                          <td style={{padding:'3px 5px'}}>{point.serieId}</td>\n                          <td style={{padding:'3px 5px'}}><strong>{point.data.yFormatted}</strong></td>\n                        </tr>\n                        {\n                          point.data.allocations && typeof point.data.allocations === 'object' &&\n                            Object.keys(point.data.allocations).map(protocolName => {\n                              const protocolColor = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n                              const protocolAllocation = this.functionsUtil.formatMoney(point.data.allocations[protocolName],0);\n                              const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                              return (\n                                <tr key={`${point.id}_${protocolName}`}>\n                                  <td style={{padding:'3px 5px'}}>\n                                    <span style={{display:'block', width: '12px', height: '12px', background: protocolColor}}></span>\n                                  </td>\n                                  <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{protocolName}</td>\n                                  <td style={{padding:'3px 5px'}}><strong>{protocolAllocation}</strong> ({protocolAllocationPerc})</td>\n                                </tr>\n                              );\n                            })\n                        }\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              );\n              */\n            }\n\n            return null;\n          }\n        };\n      break;\n      case 'ALL':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\");\n\n          let row = {\n            date\n          };\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const foundProtocol = this.props.tokenConfig.protocols.find((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() });\n            if (foundProtocol){\n              const protocolInfo = globalConfigs.stats.protocols[foundProtocol.name];\n              if (!protocolPaused){\n                let allocation = parseFloat(this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals));\n                keys[protocolInfo.label] = 1;\n                row[protocolInfo.label] = allocation;\n                row[`${protocolInfo.label}Color`] = 'hsl('+protocolInfo.color.hsl.join(',')+')';\n                // console.log(protocolInfo.label,this.functionsUtil.BNify(protocolData.allocation).toString(),this.props.tokenConfig.decimals,allocation);\n                maxChartValue = Math.max(maxChartValue,allocation);\n              } else {\n                row[protocolInfo.label] = 0;\n              }\n            }\n          });\n\n\n          tempData[date] = row;\n        });\n\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n            orient: 'left',\n            tickSize: 0,\n            tickPadding: 10,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            tickValues:gridYValues,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickSize: 0,\n            tickPadding: 10,\n            orient: 'bottom-left',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days'\n          },\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            tooltip: {\n              container:{\n                padding:'0',\n                boxShadow:'none',\n                background:'transparent',\n              },\n              tableCell:{\n                padding:'0'\n              }\n            },\n            axis: {\n              ticks: {\n                text: {\n                  fontSize:this.props.isMobile ? 12 : 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize:this.props.isMobile ? 12 : 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 60 },\n          tooltip:({ id, value, color }) => {\n            const allocation = this.functionsUtil.formatMoney(value,0);\n            return (\n              <DashboardCard\n                cardProps={{\n                  py:1,\n                  px:2,\n                  width:1,\n                }}\n              >\n                <table\n                  style={{width:'100%',borderCollapse:'collapse'}}\n                >\n                  <tbody>\n                    <tr>\n                      <td style={{padding:'3px 5px'}}>\n                        <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                      </td>\n                      <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                      <td style={{padding:'3px 5px'}}><strong>{allocation} {this.props.selectedToken}</strong></td>\n                    </tr>\n                  </tbody>\n                </table>\n              </DashboardCard>\n            )\n          }\n        }\n      break;\n      case 'ALL_PERC':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\")\n          let row = {\n            date:moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\")\n          };\n          if (tempData[date]){\n            row = tempData[date];\n          }\n\n          const totalAllocation = d.protocolsData.reduce((accumulator,protocolAllocation) => {\n            const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n            return this.functionsUtil.BNify(accumulator).plus(allocation);\n          },0);\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const protocolName = this.props.tokenConfig.protocols.filter((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() })[0].name;\n            if (!protocolPaused){\n              const allocation = this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals);\n              const allocationPerc = parseFloat(allocation.div(totalAllocation).times(100));\n              keys[protocolName] = 1;\n              row[protocolName] = allocationPerc;\n              row[`${protocolName}Color`] = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n            } else if (typeof row[protocolName] !== undefined) {\n              row[protocolName] = 0;\n            } \n          });\n          \n          tempData[date] = row;\n        });\n\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          data: chartData,\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 40, bottom: 40, left: 60 },\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => parseInt(v)+'%'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            orient: 'bottom',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days'\n          },\n          tooltip:({ id, value, color }) => {\n            const allocation = parseInt(value)===100 ? this.functionsUtil.formatMoney(value,0) : this.functionsUtil.formatMoney(value,2);\n            return (\n              <table style={{width:'100%',borderCollapse:'collapse'}}>\n                <tbody>\n                  <tr>\n                    <td style={{padding:'3px 5px'}}>\n                      <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                    </td>\n                    <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                    <td style={{padding:'3px 5px'}}><strong>{allocation}%</strong></td>\n                  </tr>\n                </tbody>\n              </table>\n            )\n          }\n        }\n      break;\n      case 'APR':\n\n        maxChartValue = 0;\n\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n          if (!protocolInfo.enabled){\n            return;\n          }\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n          chartData.push({\n            id:protocolInfo.label,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                let protocolRate = this.functionsUtil.BNify(protocolAllocation.rate);\n                const protocolPaused = protocolRate.eq(0);\n                if (!protocolPaused){\n\n                  // Aave V1 wrong rate FIX\n                  if (protocolRate.lt(0) && protocolAllocation.aaveAdditionalAPR && this.functionsUtil.BNify(protocolAllocation.aaveAdditionalAPR).gt(0)){\n                    protocolRate = protocolRate.plus(this.functionsUtil.BNify(protocolAllocation.aaveAdditionalAPR));\n                  }\n\n                  protocolRate = this.functionsUtil.fixTokenDecimals(protocolRate,18);\n\n                  const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                  const y = parseFloat(protocolRate);\n\n                  maxChartValue = Math.max(maxChartValue,y);\n\n                  return { x, y };\n                }\n                return undefined;\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color:'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data:apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(this.functionsUtil.fixTokenDecimals(d.idleRate,18));\n            maxChartValue = Math.max(maxChartValue,y);\n            return { x, y };\n          })\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(2)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    // const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'SCORE':\n\n        let prevValue = 0;\n        maxChartValue = 0;\n\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n          if (!protocolInfo.enabled){\n            return;\n          }\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n          chartData.push({\n            id:protocolInfo.label,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(protocolAllocation.defiScore);\n\n                y = isNaN(y) || !y ? prevValue : y;\n                prevValue = y;\n                maxChartValue = Math.max(maxChartValue,y);\n\n                return { x, y };\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            let y = parseFloat(d.idleScore);\n            y = isNaN(y) || !y ? prevValue : y;\n            prevValue = y;\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x, y };\n          })\n        });\n\n        // debugger;\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(1),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 0,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE_V4':\n\n        itemIndex = 0;\n        maxChartValue = 0;\n        // let prevApy = null;\n        let prevApr = null;\n        let prevData = null;\n        let avgApy = this.functionsUtil.BNify(0);\n        let startBalance = this.functionsUtil.BNify(1);\n        let currentBalance = this.functionsUtil.BNify(1);\n\n        idleChartData = [];\n        const aaveProtocolInfo = protocols.find( p => p.name === 'aavev2' );\n\n        apiResults.forEach((d,i) => {\n\n          let idleRate = this.functionsUtil.BNify(d.idleRate);\n          let y = 0;\n          let apy = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n\n          // Aave V1 wrong rate FIX\n          if (this.props.selectedToken === 'WETH' && moment(x).isSameOrBefore(moment('2021-05-19 12:20','YYYY-MM-DD HH:mm'))){\n            const aaveProtocolData = aaveProtocolInfo ? d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === aaveProtocolInfo.address.toLowerCase()\n            }) : null;\n            if (aaveProtocolData.aaveAdditionalAPR && this.functionsUtil.BNify(aaveProtocolData.aaveAdditionalAPR).gt(0)){\n              idleRate = idleRate.plus(this.functionsUtil.BNify(aaveProtocolData.aaveAdditionalAPR));\n            }\n          }\n\n          const apr = this.functionsUtil.fixTokenDecimals(idleRate,18).div(100);\n          // const apy = this.functionsUtil.apr2apy(apr);\n          \n          avgApy = avgApy.plus(apr.times(100));\n\n          if (prevApr){\n            const days = (d.timestamp-prevData.timestamp)/86400;\n            // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n            const earnings = currentBalance.times(prevApr.times(days).div(365));\n            currentBalance = currentBalance.plus(earnings);\n\n            const earning = currentBalance.div(startBalance).minus(1).times(100);\n            y = parseFloat(earning);\n\n            // apy = earning.times(365).div(totDays).toFixed(2);\n            apy = avgApy.div(i+1).toFixed(2);\n          }\n\n          prevData = d;\n          // prevApy = apy;\n          prevApr = apr;\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          if (apy>0){\n            idleChartData.push({ x, y, apy, blocknumber, itemPos });\n          }\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo && additionalProtocol.enabledTokens.includes(this.props.selectedToken)){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        protocols.forEach( p => {\n\n          const protocolInfo = {...globalConfigs.stats.protocols[p.name]};\n\n          if (protocolInfo.tokensProps && protocolInfo.tokensProps[this.props.selectedToken]){\n            const tokenProps = protocolInfo.tokensProps[this.props.selectedToken];\n            Object.keys(tokenProps).forEach(p => {\n              protocolInfo[p] = tokenProps[p];\n            });\n          }\n\n          if (!protocolInfo.enabled || (protocolInfo.startTimestamp && this.functionsUtil.strToMoment(protocolInfo.startTimestamp).isAfter(Date.now()))){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          // prevApy = null;\n          prevApr = null;\n          prevData = null;\n          let baseProfit = 0;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n          avgApy = this.functionsUtil.BNify(0);\n          startBalance = this.functionsUtil.BNify(1);\n          currentBalance = this.functionsUtil.BNify(1);\n          const apiResults_filtered = apiResults.filter( d => (!protocolInfo.startTimestamp || moment(protocolInfo.startTimestamp).isSameOrBefore(moment(d.timestamp*1000))) );\n\n          apiResults_filtered.forEach( (d,i) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              let protocolRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n                if (protocolData[field]){\n                  return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(protocolData[field]));\n                }\n                return this.functionsUtil.BNify(acc);\n              },0) : this.functionsUtil.BNify(protocolData[rateField]);\n\n              // Aave V1 wrong rate FIX\n              if (protocolRate.lt(0) && protocolData.aaveAdditionalAPR && this.functionsUtil.BNify(protocolData.aaveAdditionalAPR).gt(0)){\n                protocolRate = protocolRate.plus(this.functionsUtil.BNify(protocolData.aaveAdditionalAPR));\n              }\n\n              const protocolPaused = protocolRate.eq(0);\n              if (!protocolPaused){\n\n                let rowData = {};\n\n                let y = 0;\n                let apy = 0;\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                const apr = this.functionsUtil.fixTokenDecimals(protocolRate,18).div(100);\n\n                avgApy = avgApy.plus(apr.times(100));\n                // const apy = this.functionsUtil.apr2apy(apr);\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null) {\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => (d1.blocknumber>=firstProtocolBlock) );\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                      y = baseProfit;\n                      apy = avgApy.toFixed(2);\n                    }\n                  }\n                }\n\n                if (prevData) {\n                  const days = (d.timestamp-prevData.timestamp)/86400;\n                  // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n                  const earnings = currentBalance.times(prevApr.times(days).div(365));\n                  currentBalance = currentBalance.plus(earnings);\n\n                  const earning = currentBalance.div(startBalance).minus(1).times(100);\n                  y = parseFloat(earning)+baseProfit;\n\n                  apy = avgApy.div(i+1).toFixed(2);\n                }\n\n                prevData = d;\n                prevApr = apr;\n\n                if (firstIdleBlock === null){\n                  firstIdleBlock = parseInt(d.blocknumber);\n                }\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                const itemPos = Math.floor(itemIndex/totalItems*100);\n                // const blocknumber = d.blocknumber;\n\n                itemIndex++;\n\n                if (apy>0){\n                  rowData = {\n                    x,\n                    y,\n                    apy,\n                    itemPos\n                  };\n\n                  itemIndex++;\n                  chartRow.data.push(rowData);\n                }\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          data: idleChartData,\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')'\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              itemWidth: this.props.isMobile ? 70 : 160,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE':\n        // let prevTokenPrice = null;\n        maxChartValue = 0;\n        let firstTokenPrice = null;\n\n        idleChartData = apiResults.map((d,i) => {\n\n          let y = 0;\n          let apy = 0;\n          let days = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n          const tokenPrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n\n          if (!firstTokenPrice){\n            firstTokenPrice = tokenPrice;\n          } else {\n            y = parseFloat(tokenPrice.div(firstTokenPrice).minus(1).times(100));\n\n            days = (d.timestamp-apiResults[0].timestamp)/86400;\n            const earning = tokenPrice.div(firstTokenPrice).minus(1).times(100);\n            apy = earning.times(365).div(days).toFixed(2);\n\n            // console.log(firstTokenPrice.toString(),tokenPrice.toString(),earning.toString(),days,y,apy);\n          }\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          return { x, y, apy, blocknumber, itemPos };\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo && additionalProtocol.enabledTokens.includes(this.props.selectedToken)){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        await this.functionsUtil.asyncForEach(protocols,async (p) => {\n\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n\n          if (!protocolInfo.enabled){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          let baseProfit = 0;\n          firstTokenPrice = null;\n          let lastRowData = null;\n          let lastTokenPrice = null;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n\n          await this.functionsUtil.asyncForEach(apiResults,async (d) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData && protocolData[rateField]){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              const protocolPaused = this.functionsUtil.BNify(protocolData[rateField]).eq(0);\n              if (!protocolPaused){\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null){\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => {\n                      return d1.blocknumber>=firstProtocolBlock;\n                    });\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                    }\n                  }\n                }\n\n                let rowData = {};\n                let tokenExchangeRate = protocolData.price;\n                let tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n\n                // Take data from\n                if (protocolInfo && protocolInfo.data && protocolInfo.data[p.address.toLowerCase()] && protocolInfo.data[p.address.toLowerCase()][d.blocknumber]){\n                  tokenExchangeRate = this.functionsUtil.BNify(globalConfigs.stats.protocols[p.name].data[p.address.toLowerCase()][d.blocknumber]);\n                  tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                }/* else if (p.name === 'aave'){\n                  // Token holders (aDAI = 0xc025c03e10f656d3ee76685d53d236824d8ef3da , aUSDC = 0xd2c734fbd8f5d1c809185e014016dd4097e94711)\n                  let aaveTokenBalance = await this.functionsUtil.genericContractCall(p.token,'balanceOf',['0xd2c734fbd8f5d1c809185e014016dd4097e94711'],{},d.blocknumber);\n                  if (aaveTokenBalance){\n                    if (!Object.values(aave_data).length){\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(1,p.decimals);\n                      aave_data[d.blocknumber] = aaveTokenBalance.toString();\n                    } else {\n                      const firstBalance = Object.values(aave_data)[0];\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(this.functionsUtil.BNify(aaveTokenBalance).div(this.functionsUtil.BNify(firstBalance)).toFixed(p.decimals),p.decimals);\n                      aave_data[d.blocknumber] = tokenExchangeRate.toString();\n                    }\n                  }\n                }\n                */\n\n                let y = baseProfit;\n                let apy = 0;\n\n                if (!firstTokenPrice){\n                  firstTokenPrice = tokenPriceFixed;\n                } else {\n                  if (tokenPriceFixed.lt(lastTokenPrice)){\n                    firstTokenPrice = tokenPriceFixed;\n                    const lastYDiff = chartRow.data[chartRow.data.length-1].y-chartRow.data[chartRow.data.length-2].y;\n                    y = lastRowData.y+lastYDiff;\n                    baseProfit = y;\n                  } else {\n                    y += parseFloat(tokenPriceFixed.div(firstTokenPrice).minus(1).times(100));\n                  }\n\n                  const days = (d.timestamp-apiResults[0].timestamp)/86400;\n                  const earning = tokenPriceFixed.div(firstTokenPrice).minus(1).times(100);\n                  apy = earning.times(365).div(days).toFixed(2);\n                }\n\n                y = Math.max(0,y);\n                maxChartValue = Math.max(maxChartValue,y);\n\n                const itemPos = Math.floor(itemIndex/totalItems*100);\n\n                rowData = {\n                  x,\n                  y,\n                  apy,\n                  itemPos\n                };\n\n                itemIndex++;\n                lastRowData = rowData;\n                chartRow.data.push(rowData);\n                lastTokenPrice = tokenPriceFixed;\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: idleChartData\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              itemWidth: this.props.isMobile ? 70 : 100,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      chartType,\n      chartProps,\n      chartData\n    });\n  }\n\n  render() {\n    return(\n      <GenericChart\n        showLoader={true}\n        {...this.state.chartProps}\n        height={this.props.height}\n        type={this.state.chartType}\n        data={this.state.chartData}\n        width={this.state.chartWidth}\n        isMobile={this.props.isMobile}\n        parentId={this.props.parentId}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default StatsChart;","import { Flex, Text } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\n\nclass Rebalance extends Component {\n\n  state = {\n    loading:true,\n    processing:{\n      rebalance:{\n        txHash:null,\n        loading:false\n      },\n    },\n    shouldRebalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n  componentUnmounted = false;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillUnmount(){\n    this.componentUnmounted = true;\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.checkRebalance();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged || accountChanged){\n      this.checkRebalance();\n    }\n  }\n\n  async setStateSafe(newState,callback=null) {\n    if (!this.componentUnmounted){\n      return this.setState(newState,callback);\n    }\n    return null;\n  }\n\n  checkRebalance = async () => {\n    this.setStateSafe({\n      loading:true,\n    });\n\n    const shouldRebalance = await this.functionsUtil.checkRebalance(this.props.tokenConfig);\n\n    this.setStateSafe({\n      loading:false,\n      shouldRebalance\n    });\n  }\n\n  rebalance = async (e) => {\n    e.preventDefault();\n\n    const callback = (tx,error) => {\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: 'Rebalance',\n        eventAction: this.props.selectedToken,\n      };\n\n      let txDenied = false;\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      if (tx.status === 'success'){\n        // Toast message\n        window.toastProvider.addMessage(`Rebalance completed`, {\n          secondaryMessage: `Now the pool is balanced!`,\n          colorTheme: 'light',\n          actionHref: \"\",\n          actionText: \"\",\n          variant: \"success\",\n        });\n\n      } else if (!txDenied){\n        window.toastProvider.addMessage(`Rebalance error`, {\n          secondaryMessage: `The rebalance has failed, try again...`,\n          colorTheme: 'light',\n          actionHref: \"\",\n          actionText: \"\",\n          variant: \"failure\",\n        });\n      }\n\n      this.setStateSafe((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          rebalance:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n\n      this.checkRebalance();\n    }\n\n    const callback_receipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setStateSafe((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            rebalance:{\n              ...prevState.processing.rebalance,\n              txHash\n            }\n          }\n        })\n      );\n    };\n\n    this.props.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'rebalance', [], null , callback, callback_receipt);\n\n    this.setStateSafe({\n      processing:{\n        rebalance:{\n          txHash:null,\n          loading:true\n        }\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Flex\n        px={3}\n        width={1}\n        minHeight={'100px'}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n      {\n        this.state.loading ? (\n          <FlexLoader\n            flexProps={{\n              flexDirection:'row'\n            }}\n            loaderProps={{\n              size:'30px'\n            }}\n            textProps={{\n              ml:2\n            }}\n            text={'Checking rebalance...'}\n          />\n        ) : (\n          this.state.processing.rebalance.loading ? (\n            <TxProgressBar {...this.props} waitText={`Rebalance estimated in`} endMessage={`Finalizing rebalance request...`} hash={this.state.processing.rebalance.txHash} />\n          ) : (\n            <Flex\n              width={1}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                mt={0}\n                mb={3}\n                textAlign={'center'}\n              >\n                {this.state.shouldRebalance ? 'Rebalance the entire pool. All users will bless you.' : 'The pool is already balanced.'}\n              </Text>\n              <RoundButton\n                buttonProps={{\n                  width:'auto',\n                  disabled:!this.state.shouldRebalance\n                }}\n                handleClick={e => this.rebalance(e)}\n              >\n                Rebalance\n              </RoundButton>\n            </Flex>\n          )\n        )\n      }\n      </Flex>\n    )\n  }\n}\n\nexport default Rebalance;","import React from \"react\";\nimport {\n  Modal,\n  Button,\n  Flex,\n  Field,\n  Select\n} from \"rimble-ui\";\nimport moment from 'moment';\nimport ModalCard from './ModalCard';\nimport 'react-date-range/dist/styles.css';\nimport { DateRange } from 'react-date-range';\nimport 'react-date-range/dist/theme/default.css';\nimport './DateRangeModal.css';\n\nclass DateRangeModal extends React.Component {\n\n  state = {\n    quickSelection:'',\n    ranges:{\n      startDate: this.props.startDate ? this.props.startDate : new Date(),\n      endDate: this.props.endDate ? this.props.endDate : new Date(),\n      key: 'selection'\n    }\n  }\n\n  handleSelect(ranges){\n    this.setState({\n      quickSelection:'',\n      ranges:ranges.selection\n    });\n  }\n\n  handleQuickSelect(e){\n    let startDate = null;\n    let endDate = moment(new Date());\n    const quickSelection = e.target.value;\n\n    switch (quickSelection){\n      case 'day':\n        startDate = endDate.clone().subtract(1,'day');\n      break;\n      case 'week':\n        startDate = endDate.clone().subtract(1,'week');\n      break;\n      case 'weeks':\n        startDate = endDate.clone().subtract(2,'week');\n      break;\n      case 'month':\n        startDate = endDate.clone().subtract(1,'month');\n      break;\n      default:\n        startDate = null;\n        endDate = null;\n      break;\n    }\n\n    if (startDate && endDate){\n      startDate = startDate._d;\n      endDate = endDate._d;\n\n      const ranges = {\n        startDate,\n        endDate,\n        key:'selection'\n      };\n\n      this.setState({\n        ranges,\n        quickSelection\n      }, () => {\n        this.closeModal();\n      });\n    }\n  }\n\n  componentDidUpdate = (prevProps) => {\n    if (prevProps.startDate !== this.props.startDate || prevProps.endDate !== this.props.endDate){\n      this.setState({\n        ranges:{\n          startDate: this.props.startDate ? this.props.startDate : new Date(),\n          endDate: this.props.endDate ? this.props.endDate : new Date(),\n          key: 'selection'\n        }\n      });\n    }\n  }\n\n  closeModal(){\n    const newState = this.props.handleSelect(this.state.ranges,this.state.quickSelection);\n    const ranges = {\n      startDate:newState.startTimestampObj ? newState.startTimestampObj._d : new Date(),\n      endDate:newState.endTimestampObj ? newState.endTimestampObj._d : new Date(),\n      key: 'selection'\n    };\n    this.setState({\n      ranges\n    });\n    this.props.closeModal();\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        <ModalCard closeFunc={this.props.closeModal}>\n          <ModalCard.Header title={'Select Date Range'}>\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex width={1} flexDirection={'column'} alignItems={'center'}>\n              <Field label=\"Quick Date Selection\" style={{display:'flex',width:'100%',alignItems:'stretch',justifyContent:'center'}}>\n                <Select\n                  style={{\n                    fontSize:'14px',\n                    height:'2.5em',\n                    boxShadow:'none',\n                    color:this.props.theme.colors.counter,\n                    backgroundColor:this.props.theme.colors.cardBg\n                  }}\n                  width={'100%'}\n                  required={true}\n                  onChange={this.handleQuickSelect.bind(this)}\n                  value={this.state.quickSelection}\n                  options={[\n                    { value: '', label: \"Select an option\" },\n                    { value: \"day\", label: \"Last day\" },\n                    { value: \"week\", label: \"Last week\" },\n                    { value: \"weeks\", label: \"Last 2 weeks\" },\n                    { value: \"month\", label: \"Last month\" }\n                  ]}\n                />\n              </Field>\n              <DateRange\n                ranges={[this.state.ranges]}\n                minDate={this.props.minDate}\n                maxDate={this.props.maxDate}\n                className={this.props.themeMode}\n                onChange={this.handleSelect.bind(this)}\n              />\n            </Flex>\n          </ModalCard.Body>\n          <ModalCard.Footer>\n            <Flex px={[2,0]} flexDirection={['column', 'row']} width={1} justifyContent={'center'}>\n              <Button\n                my={2}\n                mx={[0, 2]}\n                borderRadius={4}\n                mainColor={'blue'}\n                onClick={ e => this.closeModal(e) }\n                size={this.props.isMobile ? 'small' : 'medium'}\n              >\n              APPLY\n              </Button>\n            </Flex>\n          </ModalCard.Footer>\n        </ModalCard>\n      </Modal>\n    );\n  }\n\n}\n\nexport default DateRangeModal;","import moment from 'moment';\nimport Title from '../Title/Title';\nimport StatsChart from './StatsChart';\nimport React, { Component } from 'react';\nimport Rebalance from '../Rebalance/Rebalance';\nimport StatsCard from '../StatsCard/StatsCard';\nimport AssetsList from '../AssetsList/AssetsList';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport GenericSelector from '../GenericSelector/GenericSelector';\nimport RoundIconButton from '../RoundIconButton/RoundIconButton';\nimport VariationNumber from '../VariationNumber/VariationNumber';\nimport AllocationChart from '../AllocationChart/AllocationChart';\nimport DateRangeModal from '../utilities/components/DateRangeModal';\nimport { Flex, Text, Heading, Box, Icon, Button, Link } from 'rimble-ui';\nimport ExecuteTransaction from '../ExecuteTransaction/ExecuteTransaction';\nimport AssetsUnderManagement from '../AssetsUnderManagement/AssetsUnderManagement';\n\nclass Stats extends Component {\n  state = {\n    aum:null,\n    apr:null,\n    days:'-',\n    delta:null,\n    earning:null,\n    minDate:null,\n    maxDate:null,\n    carouselMax:1,\n    rebalances:'-',\n    buttonGroups:[],\n    apiResults:null,\n    carouselIndex:0,\n    idleVersion:null,\n    statsVersions:{},\n    minStartTime:null,\n    endTimestamp:null,\n    showAdvanced:true,\n    govTokensPool:null,\n    unlentBalance:null,\n    quickSelection:null,\n    startTimestamp:null,\n    endTimestampObj:null,\n    shouldRebalance:null,\n    carouselOffsetLeft:0,\n    startTimestampObj:null,\n    showRefreshIdleSpeed:false,\n    apiResults_unfiltered:null,\n    dateRangeModalOpened:false\n  };\n\n  quickSelections = {\n    day:'Last day',\n    week:'Last week',\n    weeks:'Last 2 weeks',\n    month:'Last month'\n  };\n\n  // Utils\n  functionsUtil = null;\n  componentUnmounted = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount() {\n    this.loadUtils();\n    await this.loadParams();\n  }\n\n  componentWillUnmount(){\n    this.componentUnmounted = true;\n  }\n\n  async setStateSafe(newState,callback=null) {\n    if (!this.componentUnmounted){\n      return this.setState(newState,callback);\n    }\n    return null;\n  }\n\n  showRefreshIdleSpeed(){\n    this.setState({\n      showRefreshIdleSpeed:true\n    });\n  }\n\n  getLatestAvailableVersion(){\n    const statsVersions = globalConfigs.stats.versions;\n    let latestVersion = null;\n    Object.keys(statsVersions).forEach( version => {\n      const versionInfo = statsVersions[version];\n      if (versionInfo.enabledStrategies.includes(this.props.selectedStrategy)){\n        latestVersion = version;\n      }\n    });\n\n    return latestVersion;\n  }\n\n  getVersionInfo(version){\n    if (!version){\n      version = this.state.idleVersion;\n    }\n\n    if (!globalConfigs.stats.versions[version]){\n      return null;\n    }\n\n    const versionInfo = Object.assign({},globalConfigs.stats.versions[version]);\n\n    if (versionInfo.strategiesParams && versionInfo.strategiesParams[this.props.selectedStrategy]){\n      const versionInfoExtra = versionInfo.strategiesParams[this.props.selectedStrategy];\n      Object.keys(versionInfoExtra).forEach( param => {\n        versionInfo[param] = versionInfoExtra[param];\n      });\n    }\n\n    return versionInfo;\n  }\n\n  async loadParams() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    const newState = {};\n    const { match: { params } } = this.props;\n\n    const currentNetworkAvailableTokens = Object.keys(this.props.availableTokens);\n\n    if (!!params.customToken && currentNetworkAvailableTokens.indexOf(params.customToken.toUpperCase()) !== -1 ){\n      newState.selectedToken = params.customToken.toUpperCase();\n    } else {\n      newState.selectedToken = this.props.selectedToken.toUpperCase();\n    }\n\n    newState.tokenConfig = this.props.availableTokens[newState.selectedToken];\n    newState.minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp,'YYYY-MM-DD');\n    newState.maxEndDate = moment();\n\n    newState.endTimestampObj = moment(moment().format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    newState.latestVersion = this.getLatestAvailableVersion();\n    newState.idleVersion = this.state.idleVersion === null ? newState.latestVersion : this.state.idleVersion;\n\n    const versionInfo = this.getVersionInfo(newState.idleVersion);\n\n    // console.log('loadParams',newState.latestVersion,newState.idleVersion,versionInfo);\n\n    if (newState.idleVersion && versionInfo.endTimestamp){\n      const newEndTimestampObj = moment(moment(versionInfo.endTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.endTimestampObj.isAfter(newEndTimestampObj)){\n        newState.endTimestampObj = newEndTimestampObj;\n        newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n      }\n\n      if (!newState.maxEndDate || newState.maxEndDate.isAfter(newEndTimestampObj)){\n        newState.maxEndDate = newEndTimestampObj;\n      }\n    }\n\n    newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n\n    // Set start date\n    newState.startTimestampObj = newState.endTimestampObj.clone().subtract(1,'month');\n    newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n\n    if (newState.idleVersion && versionInfo.startTimestamp){\n      const newStartTimestampObj = moment(moment(versionInfo.startTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.startTimestampObj.isBefore(newStartTimestampObj)){\n        newState.startTimestampObj = newStartTimestampObj;\n        newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n      }\n\n      if (newState.minStartTime.isBefore(newStartTimestampObj)){\n        newState.minStartTime = newStartTimestampObj;\n      }\n    }\n\n    newState.minDate = newState.minStartTime._d;\n    newState.maxDate = newState.maxEndDate._d;\n\n    if (newState !== this.state){\n      await this.setStateSafe(newState);\n    }\n  }\n\n  setDateRange = (ranges,quickSelection=null) => {\n\n    const minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp);\n\n    let startTimestampObj = moment(ranges.startDate).isSameOrAfter(minStartTime) ? moment(ranges.startDate) : minStartTime;\n    let endTimestampObj = moment(ranges.endDate);\n\n    if (startTimestampObj.isSame(endTimestampObj)){\n      endTimestampObj.add(1,'day');\n    }\n\n    endTimestampObj = moment(endTimestampObj.format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    if (startTimestampObj.isBefore(this.state.minStartTime)){\n      startTimestampObj = this.state.minStartTime;\n    }\n\n    if (endTimestampObj.isAfter(this.state.maxEndDate)){\n      endTimestampObj = this.state.maxEndDate;\n    }\n\n    const startTimestamp = parseInt(startTimestampObj._d.getTime()/1000);\n    const endTimestamp = parseInt(endTimestampObj._d.getTime()/1000);\n\n    const newState = {\n      minStartTime,\n      endTimestamp,\n      quickSelection,\n      startTimestamp,\n      endTimestampObj,\n      startTimestampObj\n    };\n\n    this.setStateSafe(newState);\n\n    return newState;\n  }\n\n  toggleAdvancedCharts = (e) => {\n    e.preventDefault();\n    this.setStateSafe({\n      showAdvanced:!this.state.showAdvanced\n    });\n  }\n\n  setDateRangeModal = (dateRangeModalOpened) => {\n    if (dateRangeModalOpened !== this.state.dateRangeModalOpened){\n      this.setStateSafe({\n        dateRangeModalOpened\n      });\n    }\n  }\n\n  async componentDidMount() {\n\n    if (!this.props.web3){\n      this.props.initWeb3();\n      return false;\n    }\n\n    /*\n    const style = document.createElement('style');\n    style.id = 'crisp-custom-style';\n    style.type = 'text/css';\n    style.innerHTML = `\n    .crisp-client{\n      display:none !important;\n    }`;\n    document.body.appendChild(style);\n    */\n\n    this.loadUtils();\n    await this.loadParams();\n    this.loadApiData();\n    this.loadCarousel();\n  }\n\n  loadCarousel(){\n    const carouselMax = this.props.isMobile ? 3 : 2;\n    this.setStateSafe({\n      carouselMax\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const strategyChanged = prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    const dateChanged = prevState.startTimestamp !== this.state.startTimestamp || prevState.endTimestamp !== this.state.endTimestamp;\n    const versionChanged = prevState.idleVersion !== this.state.idleVersion;\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n\n    if (mobileChanged){\n      this.loadCarousel();\n    }\n\n    if (contractsInitialized || tokenChanged || strategyChanged || versionChanged){\n      // console.log('componentDidUpdate',this.props.selectedStrategy,this.props.selectedToken);\n      await this.componentDidMount();\n    } else if (dateChanged){\n      this.loadApiData();\n    }\n  }\n\n  filterTokenData = (apiResults) => {\n    return apiResults.filter((r,i) => {\n      return (!this.state.startTimestamp || r.timestamp >= this.state.startTimestamp) && (!this.state.endTimestamp || r.timestamp <= this.state.endTimestamp);\n    });\n  }\n\n  setIdleVersion = idleVersion => {\n    this.setStateSafe({\n      idleVersion\n    });\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    // Get COMP APR\n    // const compAPR = await this.functionsUtil.getCompAPR(this.props.tokenConfig);\n    // console.log('compAPR',compAPR.toString());\n\n    const startTimestamp = this.state.minDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.minDate).format('DD/MM/YYYY 00:00:00'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n    const endTimestamp = this.state.maxDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.maxDate).format('DD/MM/YYYY 23:59:59'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n\n    const isRisk = ['v3','v4'].includes(this.state.idleVersion) && this.props.selectedStrategy === 'risk';\n    let apiResults_unfiltered = await this.functionsUtil.getTokenApiData(this.props.tokenConfig.address,isRisk,startTimestamp,endTimestamp,true,7200);\n\n    const apiResults = this.filterTokenData(apiResults_unfiltered);\n\n    // console.log('loadApiData',startTimestamp,endTimestamp,new Date(startTimestamp*1000),new Date(endTimestamp*1000),apiResults,apiResults_unfiltered);\n\n    if (!apiResults || !apiResults_unfiltered || !apiResults.length || !apiResults_unfiltered.length){\n      return false;\n    }\n\n    const firstResult = apiResults[0];\n    const lastResult = Object.values(apiResults).pop();\n\n    window.moment = moment;\n\n    let days = (lastResult.timestamp-firstResult.timestamp)/86400;\n    if (days === 0){\n      days = 1;\n    }\n\n    let apr = null;\n    let delta = 'N/A';\n\n    const idleTokens = this.functionsUtil.fixTokenDecimals(lastResult.idleSupply,18);\n    const firstIdlePrice = this.functionsUtil.fixTokenDecimals(firstResult.idlePrice,this.props.tokenConfig.decimals);\n    const lastIdlePrice = this.functionsUtil.fixTokenDecimals(lastResult.idlePrice,this.props.tokenConfig.decimals);\n\n    // Calculate AUM\n    let aum = idleTokens.times(lastIdlePrice);\n\n    // Convert Token balance\n    aum = await this.functionsUtil.convertTokenBalance(aum,this.props.selectedToken,this.props.tokenConfig,isRisk);\n\n    const compoundInfo = this.props.tokenConfig.protocols.filter((p) => { return p.name === 'compound' })[0];\n    const firstCompoundData = compoundInfo ? firstResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n    const lastCompoundData = compoundInfo ? lastResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n\n    if (this.state.idleVersion === 'v4') {\n\n      apr = apiResults.reduce( (sum,r) => {\n        const idleRate = this.functionsUtil.fixTokenDecimals(r.idleRate,18);\n        return this.functionsUtil.BNify(sum).plus(idleRate);\n      },0);\n\n      // Calculate average\n      apr = apr.div(apiResults.length);\n\n      if (compoundInfo){\n        const compoundWithCOMPInfo = globalConfigs.stats.protocols.compoundWithCOMP;\n        const rateField = compoundWithCOMPInfo.rateField ? compoundWithCOMPInfo.rateField : 'rate';\n\n        let compoundAvgApr = apiResults.reduce( (sum,r) => {\n\n          const compoundData = r.protocolsData.find((pData,x) => {\n            return pData.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase()\n          });\n\n          let compoundRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n            if (compoundData && compoundData[field]){\n              return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(compoundData[field]));\n            }\n            return this.functionsUtil.BNify(acc);\n          },0) : this.functionsUtil.BNify(compoundData[rateField]);\n\n          compoundRate = this.functionsUtil.fixTokenDecimals(compoundRate,18);\n\n          return this.functionsUtil.BNify(sum).plus(compoundRate);\n        },0);\n\n        // Calculate average\n        compoundAvgApr = compoundAvgApr.div(apiResults.length);\n\n        // compoundAvgApr = this.functionsUtil.apr2apy(compoundAvgApr.div(100)).times(100);\n        // apr = this.functionsUtil.apr2apy(apr.div(100)).times(100);\n\n        delta = apr.minus(compoundAvgApr);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n\n      apr = apr.toFixed(2);\n\n    } else {\n      const earning = lastIdlePrice.div(firstIdlePrice).minus(1).times(100);\n      apr = earning.times(365).div(days).toFixed(2);\n\n      if (firstCompoundData && lastCompoundData){\n        const firstCompoundPrice = this.functionsUtil.fixTokenDecimals(firstCompoundData.price,this.props.tokenConfig.decimals);\n        const lastCompoundPrice = this.functionsUtil.fixTokenDecimals(lastCompoundData.price,this.props.tokenConfig.decimals);\n        const compoundApr = lastCompoundPrice.div(firstCompoundPrice).minus(1).times(100);\n        delta = earning.minus(compoundApr).times(365).div(days);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n    }\n\n    // Count rebalances\n    let rebalances = 0;\n    apiResults.forEach((row,index) => {\n      if (index){\n        const prevRow = apiResults[index-1];\n\n        const totalAllocation = row.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        const prevTotalAllocation = prevRow.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        let hasRebalanced = false;\n        row.protocolsData.forEach( p => {\n          if (hasRebalanced){\n            return;\n          }\n          const prevP = prevRow.protocolsData.find( prevP => (prevP.protocolAddr.toLowerCase() === p.protocolAddr.toLowerCase()) );\n          const allocation = this.functionsUtil.fixTokenDecimals(p.allocation,this.props.tokenConfig.decimals);\n          const prevAllocation = prevP ? this.functionsUtil.fixTokenDecimals(prevP.allocation,this.props.tokenConfig.decimals) : this.functionsUtil.BNify(0);\n          const allocationPerc = parseInt(parseFloat(allocation.div(totalAllocation).times(100)));\n          const prevAllocationPerc = parseInt(parseFloat(prevAllocation.div(prevTotalAllocation).times(100)));\n          if (allocationPerc!==prevAllocationPerc){\n            rebalances++;\n            hasRebalanced = true;\n          }\n        });\n      }\n    });\n\n    // Add gov tokens balance to AUM\n    const availableTokens = {};\n    availableTokens[this.props.selectedToken] = this.props.tokenConfig;\n    const govTokensPool = await this.functionsUtil.getGovTokenPool(null,availableTokens,'DAI');\n    if (govTokensPool){\n      aum = aum.plus(govTokensPool);\n    }\n\n    // Format AUM\n    /*\n    aum = this.functionsUtil.formatMoney(parseFloat(aum));\n\n    const conversionRateField = this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'conversionRateField']);\n    if (conversionRateField){\n      aum += ' $';\n    }\n    */\n\n    let unlentBalance = await this.functionsUtil.getUnlentBalance(this.props.tokenConfig);\n    if (unlentBalance){\n      unlentBalance = this.functionsUtil.formatMoney(parseFloat(unlentBalance));\n    }\n\n    this.setStateSafe({\n      aum,\n      apr,\n      days,\n      delta,\n      apiResults,\n      rebalances,\n      govTokensPool,\n      unlentBalance,\n      apiResults_unfiltered\n    });\n  }\n\n  selectToken = async (strategy,token) => {\n    await this.props.setStrategyToken(strategy,token);\n    this.props.changeToken(token);\n  }\n\n  handleCarousel = action => {\n    let carouselIndex = this.state.carouselIndex;\n    if (action==='next' && carouselIndex<this.state.carouselMax){\n      carouselIndex++;\n    } else if (action==='back' && carouselIndex>0){\n      carouselIndex--;\n    }\n\n    const $element = window.jQuery(`#carousel-cursor > div:eq(${carouselIndex})`);\n    const carouselOffsetLeft = -parseFloat($element.position().left)+'px';\n\n    this.setStateSafe({\n      carouselIndex,\n      carouselOffsetLeft\n    });\n  }\n\n  render() {\n\n    const valueProps = {\n      lineHeight:1,\n      fontSize:[4,5],\n      fontWeight:[3,4],\n      color:'statValue'\n    };\n\n    const unitProps = {\n      ml:2,\n      lineHeight:1,\n      fontWeight:[2,3],\n      color:'statValue',\n      fontSize:[3,'23px'],\n    };\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const apyLong = this.functionsUtil.getGlobalConfig(['messages','apyLong']);\n\n    if (!this.props.availableStrategies){\n      return (\n        <FlexLoader\n          textProps={{\n            textSize:4,\n            fontWeight:2\n          }}\n          loaderProps={{\n            mb:3,\n            size:'40px'\n          }}\n          flexProps={{\n            minHeight:'50vh',\n            flexDirection:'column'\n          }}\n          text={'Loading assets...'}\n        />\n      );\n    }\n\n    const statsTokens = this.functionsUtil.getGlobalConfig(['stats','tokens']);\n\n    if (!this.props.selectedToken){\n      const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n      const enabledTokens = [];\n      const statsProtocols = this.functionsUtil.getGlobalConfig(['stats','protocols']);\n\n      Object.keys(statsTokens).forEach(token => {\n        const tokenInfo = statsTokens[token];\n        if (tokenInfo.enabled){\n          enabledTokens.push(token);\n        }\n      });\n      return (\n        <Flex\n          mb={3}\n          width={1}\n          flexDirection={'column'}\n        >\n          <AssetsUnderManagement\n            {...this.props}\n            loaderAlign={'flex-end'}\n          />\n          {\n            Object.keys(strategies).map(strategy => {\n              const strategyInfo = strategies[strategy];\n              const availableTokens = this.props.availableStrategies[strategy];\n\n              if (!availableTokens){\n                return false;\n              }\n              \n              // Get available protocols name\n              const availableProtocolsKeys = [];\n              Object.keys(availableTokens).forEach( token => {\n                availableTokens[token].protocols.forEach( protocolInfo => {\n                  if (availableProtocolsKeys.indexOf(protocolInfo.name)<0){\n                    availableProtocolsKeys.push(protocolInfo.name);\n                  }\n                });\n              });\n\n              const availableProtocols = availableProtocolsKeys.map( protocolName => {\n                return statsProtocols[protocolName];\n              },{});\n\n              return (\n                <Box\n                  mb={2}\n                  width={1}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                  key={`strategy-container-${strategy}`}\n                >\n                  <Title\n                    mt={3}\n                    mb={[3,4]}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'baseline'}\n                      justifyContent={'center'}\n                    >\n                      {strategyInfo.title}\n                      {\n                        strategyInfo.titlePostfix &&\n                          <Text\n                            ml={2}\n                            fontWeight={3}\n                            fontSize={[2,4]}\n                            color={'dark-gray'}\n                          >\n                            {strategyInfo.titlePostfix}\n                          </Text>\n                      }\n                    </Flex>\n                  </Title>\n                  <AssetsList\n                    enabledTokens={enabledTokens}\n                    handleClick={(props) => this.selectToken(strategy,props.token)}\n                    cols={[\n                      {\n                        title:'CURRENCY',\n                        props:{\n                          width:[0.26,0.15]\n                        },\n                        fields:[\n                          {\n                            name:'icon',\n                            props:{\n                              mr:2,\n                              height:['1.4em','2.3em']\n                            }\n                          },\n                          {\n                            name:'tokenName'\n                          }\n                        ]\n                      },\n                      {\n                        title:'POOL',\n                        props:{\n                          width:[0.22,0.14],\n                        },\n                        fields:[\n                          {\n                            name:'allocationChart',\n                            mobile:false,\n                            parentProps:{\n                              width:0.3\n                            },\n                            style:{\n                              overflow:'visible'\n                            },\n                            showLoader:false,\n                          },\n                          {\n                            name:'pool',\n                            props:{\n                              ml:1\n                            },\n                            parentProps:{\n                              width:[1,0.7]\n                            }\n                          }\n                        ]\n                      },\n                      {\n                        title:'APY',\n                        desc:apyLong,\n                        props:{\n                          width: [0.29,0.14],\n                        },\n                        parentProps:{\n                          flexDirection:'column',\n                          alignItems:'flex-start',\n                        },\n                        fields:[\n                          {\n                            name:'apy',\n                            showTooltip:true\n                          },\n                          {\n                            name:'idleDistribution',\n                            showLoader:false,\n                            props:{\n                              decimals:this.props.isMobile ? 1 : 2,\n                              fontSize:this.props.isMobile ? '9px' : 0\n                            }\n                          },\n                        ]\n                      },\n                      {\n                        title:'RISK SCORE',\n                        desc:this.functionsUtil.getGlobalConfig(['messages','riskScore']),\n                        mobile:false,\n                        props:{\n                          width:[0.27,0.16],\n                        },\n                        fields:[\n                          {\n                            name:'score'\n                          }\n                        ]\n                      },\n                      {\n                        title:'APR LAST WEEK',\n                        mobile:false,\n                        props:{\n                          width: 0.25,\n                        },\n                        parentProps:{\n                          width:1,\n                          pr:[2,4]\n                        },\n                        fields:[\n                          {\n                            name:'aprChart',\n                            style:{\n                              overflow:'visible',\n                            },\n                          }\n                        ]\n                      },\n                      {\n                        title:'',\n                        props:{\n                          width:[0.23,0.16],\n                        },\n                        parentProps:{\n                          width:1\n                        },\n                        fields:[\n                          {\n                            name:'button',\n                            label:this.props.isMobile ? 'View' : 'View stats',\n                            props:{\n                              width:1,\n                              fontSize:3,\n                              fontWeight:3,\n                              height:'45px',\n                              borderRadius:4,\n                              boxShadow:null,\n                              mainColor:'redeem',\n                              size: this.props.isMobile ? 'small' : 'medium',\n                              handleClick:(props) => this.selectToken(strategy,props.token)\n                            }\n                          }\n                        ]\n                      }\n                    ]}\n                    {...this.props}\n                    selectedStrategy={strategy}\n                    availableTokens={availableTokens}\n                  />\n                  {\n                    !this.props.isMobile &&\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'flex-end'}\n                      >\n                        {\n                          availableProtocols.filter( p => p.legend ).map( (p,index) => (\n                            <Flex\n                              mr={3}\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              key={`legend_${index}`}\n                            >\n                              <Box\n                                mr={1}\n                                width={'10px'}\n                                height={'10px'}\n                                borderRadius={'50%'}\n                                backgroundColor={`rgb(${p.color.rgb.join(',')})`}\n                              >\n                              </Box>\n                              <Text.span\n                                fontSize={1}\n                                color={'cellText'}\n                              >\n                                {p.label}\n                              </Text.span>\n                            </Flex>\n                          ))\n                        }\n                      </Flex>\n                  }\n                </Box>\n              );\n            })\n          }\n          {\n            idleTokenEnabled && !this.state.showRefreshIdleSpeed ? (\n              <Flex\n                mb={4}\n                width={1}\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <Link\n                  hoverColor={'primary'}\n                  onClick={this.showRefreshIdleSpeed.bind(this)}\n                >\n                  Refresh Idle Speed\n                </Link>\n              </Flex>\n            ) : idleTokenEnabled && this.state.showRefreshIdleSpeed &&\n              <DashboardCard\n                cardProps={{\n                  p:2,\n                  mb:4,\n                  width:1,\n                  mt:[2,3],\n                }}\n                isActive={true}\n                isInteractive={false}\n              >\n                <Flex\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                >\n                  <Text\n                    fontWeight={500}\n                    color={'flashColor'}\n                    textAlign={'center'}\n                    fontSize={[1,'15px']}\n                  >\n                    By executing this transaction you can adjust the IDLE distribution speed among the pools.\n                  </Text>\n                  <ExecuteTransaction\n                    action={'Refresh'}\n                    Component={Button}\n                    parentProps={{\n                      mt:1\n                    }}\n                    componentProps={{\n                      size:'small',\n                      mainColor:'blue',\n                      value:'REFRESH IDLE SPEED'\n                    }}\n                    params={[]}\n                    contractName={'IdleController'}\n                    methodName={'refreshIdleSpeeds'}\n                    {...this.props}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'center'}\n                      justifyContent={'center'}\n                    >\n                      <Icon\n                        mr={1}\n                        name={'Done'}\n                        size={'1.4em'}\n                        color={this.props.theme.colors.transactions.status.completed}\n                      />\n                      <Text\n                        fontWeight={500}\n                        fontSize={'15px'}\n                        color={'copyColor'}\n                        textAlign={'center'}\n                      >\n                        Idle Speed Refreshed\n                      </Text>\n                    </Flex>\n                  </ExecuteTransaction>\n                </Flex>\n              </DashboardCard>\n          }\n        </Flex>\n      );\n    } else {\n\n      const tokenConfig = statsTokens[this.props.selectedToken];\n\n      const versionsOptions = Object.keys(globalConfigs.stats.versions).filter( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return versionInfo.enabledTokens.includes(this.props.selectedToken) && versionInfo.enabledStrategies.includes(this.props.selectedStrategy);\n      }).map( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return {\n          value:version,\n          label:versionInfo.label\n        }\n      });\n\n      const versionInfo = this.getVersionInfo(this.state.idleVersion);\n\n      let performanceTooltip = null;\n      if (this.state.idleVersion && versionInfo){\n        const showPerformanceTooltip = this.functionsUtil.getGlobalConfig(['stats','versions',this.state.idleVersion,'showPerformanceTooltip']);\n        performanceTooltip = showPerformanceTooltip ? this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'performanceTooltip']) : null;\n      }\n\n      const versionDefaultValue = versionsOptions.find( v => (v.value === this.state.idleVersion) );\n\n      return (\n        <Flex\n          p={0}\n          width={1}\n          flexDirection={'column'}\n        >\n          {\n          /*\n          }\n          <Flex position={['absolute','relative']} left={0} px={[3,0]} zIndex={10} width={1} flexDirection={'row'} mb={[0,3]}>\n            <Flex alignItems={'center'} width={[2/3,1/2]}>\n              <RouterLink to=\"/\">\n                <Image src=\"images/logo-gradient.svg\"\n                  height={['35px','48px']}\n                  position={'relative'} />\n              </RouterLink>\n              <Heading.h3 color={'dark-gray'} textAlign={'left'} fontWeight={3} lineHeight={'initial'} fontSize={[4,5]} ml={[1,2]}>\n                <Text.span fontSize={'80%'}>|</Text.span> Stats\n              </Heading.h3>\n            </Flex>\n            <Flex flexDirection={'row'} width={[1/3,1/2]} justifyContent={'flex-end'} alignItems={'center'}>\n              {\n                this.state.buttonGroups && \n                  this.props.isMobile ? (\n                    <ButtonGroup\n                      isMobile={this.props.isMobile}\n                      components={ this.state.buttonGroups.reduce((components,array) => components.concat(array),[]) }\n                      theme={'light'}\n                    />\n                  ) :\n                  this.state.buttonGroups.map((buttonGroup,i) => (\n                    <ButtonGroup\n                      key={`buttonGroup_${i}`}\n                      isMobile={this.props.isMobile}\n                      components={buttonGroup}\n                      theme={'light'}\n                    />\n                  ))\n              }\n            </Flex>\n          </Flex>\n          */\n          }\n          <Box\n            mb={[3,4]}\n          >\n            <Flex\n              flexDirection={['column','row']}\n            >\n              <Flex\n                width={[1,0.4]}\n              >\n                <Breadcrumb\n                  {...this.props}\n                  showPathMobile={true}\n                  text={'ASSETS OVERVIEW'}\n                  isMobile={this.props.isMobile}\n                  handleClick={ e => this.props.goToSection('stats') }\n                  path={[this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])]}\n                />\n              </Flex>\n              <Flex\n                mt={[3,0]}\n                width={[1,0.6]}\n                flexDirection={['column','row']}\n                justifyContent={['center','space-between']}\n              >\n                <Flex\n                  width={[1,0.26]}\n                  flexDirection={'column'}\n                >\n                  <GenericSelector\n                    innerProps={{\n                      p:1,\n                      height:['100%','46px'],\n                    }}\n                    name={'idle-version'}\n                    options={versionsOptions}\n                    defaultValue={versionDefaultValue}\n                    onChange={ v => this.setIdleVersion(v) }\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.3]}\n                  flexDirection={'column'}\n                >\n                  <AssetSelector\n                    innerProps={{\n                      p:1\n                    }}\n                    {...this.props}\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.39]}\n                  flexDirection={'column'}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:1,\n                      display:'flex',\n                      alignItems:'center',\n                      height:['46px','100%'],\n                      justifyContent:'center'\n                    }}\n                    isInteractive={true}\n                    handleClick={ e => this.setDateRangeModal(true) }\n                  >\n                    <Text\n                      fontWeight={3}\n                      color={'copyColor'}\n                    >\n                    {\n                      this.state.quickSelection\n                      ?\n                        this.quickSelections[this.state.quickSelection]\n                      : this.state.startTimestampObj && this.state.endTimestampObj &&\n                        `${this.state.startTimestampObj.format('DD/MM/YY')} - ${this.state.endTimestampObj.format('DD/MM/YY')}`\n                    }\n                    </Text>\n                  </DashboardCard>\n                </Flex>\n              </Flex>\n            </Flex>\n          </Box>\n          {\n            !tokenConfig.enabled ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'DoNotDisturb'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Stats for {this.props.selectedToken} are not available!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : this.state.idleVersion && this.functionsUtil.strToMoment(versionInfo.startTimestamp).isAfter(Date.now()) ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'AccessTime'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Idle Stats {this.state.idleVersion} will be available shortly!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : this.functionsUtil.strToMoment(tokenConfig.startTimestamp).isAfter(Date.now()) ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'AccessTime'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Stats for {this.props.selectedToken} will be available shortly!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : (\n              <Box\n                width={1}\n              >\n                <Box\n                  mt={[3,0]}\n                  mb={[3,4]}\n                >\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    justifyContent={'center'}\n                    flexDirection={['column','row']}\n                  >\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Asset Under Management'}\n                        label={ this.state.unlentBalance ? `Unlent funds: ${this.state.unlentBalance} ${this.props.selectedToken}` : this.props.selectedToken }\n                        labelTooltip={ this.state.unlentBalance ? this.functionsUtil.getGlobalConfig(['messages','cheapRedeem']) : null}\n                      >\n                        <SmartNumber\n                          precision={2}\n                          type={'money'}\n                          {...valueProps}\n                          unitProps={unitProps}\n                          number={this.state.aum}\n                          flexProps={{\n                            alignItems:'baseline',\n                            justifyContent:'flex-start'\n                          }}\n                          unit={this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'conversionRateField']) ? '$' : null}\n                        />\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Avg APY'}\n                        label={'Annualized'}\n                      >\n                        <Flex\n                          width={1}\n                          alignItems={'center'}\n                          flexDirection={['column','row']}\n                        >\n                          <VariationNumber\n                            direction={'up'}\n                            iconPos={'right'}\n                            iconSize={'1.8em'}\n                            justifyContent={'flex-start'}\n                            width={1}\n                            >\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                              fontSize={[4,5]}\n                            >\n                              {this.state.apr}\n                              <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                            </Text>\n                          </VariationNumber>\n                        </Flex>\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Overperformance on Compound'}\n                        label={'Annualized'}\n                      >\n                        {\n                          this.state.delta && !isNaN(this.state.delta) ? (\n                            <VariationNumber\n                              direction={'up'}\n                              iconPos={'right'}\n                              iconSize={'1.8em'}\n                              justifyContent={'flex-start'}\n                              >\n                              <Text\n                                lineHeight={1}\n                                fontSize={[4,5]}\n                                fontWeight={[3,4]}\n                                color={'statValue'}\n                              >\n                                {this.state.delta}\n                                <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                              </Text>\n                            </VariationNumber>\n                          ) : (\n                            <Text\n                              lineHeight={1}\n                              fontSize={[4,5]}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                            >\n                              {this.state.delta}\n                            </Text>\n                          )\n                        }\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        label={' '}\n                        title={'Rebalances'}\n                        value={this.state.rebalances.toString()}\n                      />\n                    </Flex>\n                    {\n                    /*\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Current APR</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.currApr}\n                            <Text.span color={'copyColor'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Days Live</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.days}\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    */\n                    }\n                  </Flex>\n                </Box>\n\n                <DashboardCard\n                  title={'Historical Performance'}\n                  description={performanceTooltip}\n                  cardProps={{\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex id='chart-PRICE' width={1} mb={3}>\n                    <StatsChart\n                      height={ 350 }\n                      {...this.state}\n                      parentId={'chart-PRICE'}\n                      theme={this.props.theme}\n                      isMobile={this.props.isMobile}\n                      contracts={this.props.contracts}\n                      themeMode={this.props.themeMode}\n                      apiResults={this.state.apiResults}\n                      idleVersion={this.state.idleVersion}\n                      selectedToken={this.props.selectedToken}\n                      apiResults_unfiltered={this.state.apiResults_unfiltered}\n                      chartMode={this.state.idleVersion === this.state.latestVersion ? 'PRICE_V4' : 'PRICE'}\n                    />\n                  </Flex>\n                </DashboardCard>\n\n                <DashboardCard\n                  cardProps={{\n                    pb:3,\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex\n                    flexDirection={['column','row']}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      this.state.idleVersion === this.state.latestVersion && \n                      <Flex\n                        pt={2}\n                        width={[1,1/3]}\n                        id={'allocation-chart'}\n                        flexDirection={'column'}\n                        alignItems={'flex-start'}\n                        justifyContent={'flex-start'}\n                      >\n                        <AllocationChart\n                          height={310}\n                          {...this.props}\n                          parentId={'allocation-chart'}\n                        />\n                        <Rebalance\n                          {...this.props}\n                        />\n                      </Flex>\n                    }\n                    <Flex\n                      mb={[0,3]}\n                      id={'chart-ALL'}\n                      pl={[0,this.state.idleVersion === this.state.latestVersion ? 0 : 3]}\n                      width={[1, this.state.idleVersion === this.state.latestVersion ? 2/3 : 1]}\n                    >\n                      <Flex alignItems={'flex-start'} justifyContent={'flex-start'} flexDirection={'column'} width={1}>\n                        <Heading.h4\n                          mb={2}\n                          ml={3}\n                          mt={[3,4]}\n                          fontWeight={4}\n                          fontSize={[2,3]}\n                          textAlign={'left'}\n                          color={'dark-gray'}\n                          lineHeight={'initial'}\n                        >\n                          Allocations over time\n                        </Heading.h4>\n                        <StatsChart\n                          height={350}\n                          {...this.state}\n                          chartMode={'ALL'}\n                          parentId={'chart-ALL'}\n                          theme={this.props.theme}\n                          isMobile={this.props.isMobile}\n                          themeMode={this.props.themeMode}\n                          contracts={this.props.contracts}\n                          apiResults={this.state.apiResults}\n                          idleVersion={this.state.idleVersion}\n                          apiResults_unfiltered={this.state.apiResults_unfiltered}\n                        />\n                      </Flex>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n\n                <Flex\n                  position={'relative'}\n                >\n                  <Flex\n                    width={1}\n                    id={'carousel-container'}\n                    justifyContent={'flex-end'}\n                  >\n                    <RoundIconButton\n                      buttonProps={{\n                        mr:3\n                      }}\n                      iconName={'ArrowBack'}\n                      disabled={this.state.carouselIndex === 0}\n                      handleClick={ e => this.handleCarousel('back') }\n                    />\n                    <RoundIconButton\n                      iconName={'ArrowForward'}\n                      handleClick={ e => this.handleCarousel('next') }\n                      disabled={this.state.carouselIndex === this.state.carouselMax}\n                    />\n                  </Flex>\n                  <Flex\n                    mt={5}\n                    height={'400px'}\n                    position={'absolute'}\n                    id={'carousel-cursor'}\n                    width={['444%','200%']}\n                    justifyContent={'flex-start'}\n                    left={this.state.carouselOffsetLeft}\n                    style={{\n                      transition:'left 0.3s ease-in-out'\n                    }}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        id='chart-AUM'\n                      >\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            ml={3}\n                            mt={3}\n                            mb={2}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Asset Under Management\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'AUM'}\n                            parentId={'chart-AUM'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-APR' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            APRs\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'APR'}\n                            parentId={'chart-APR'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                      title={'Risk Score'}\n                      description={'Idle Risk Score is a weighted average of the underlying protocols risks assessed by DeFi Score'}\n                      titleParentProps={{\n                        ml:16,\n                        mt:16\n                      }}\n                    >\n                      <Flex id='chart-SCORE' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'SCORE'}\n                            parentId={'chart-SCORE'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-VOL' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Volume\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'VOL'}\n                            parentId={'chart-VOL'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                </Flex>\n              </Box>\n            )\n          }\n          <DateRangeModal\n            {...this.props}\n            minDate={this.state.minDate}\n            maxDate={this.state.maxDate}\n            handleSelect={this.setDateRange}\n            isOpen={this.state.dateRangeModalOpened}\n            closeModal={e => this.setDateRangeModal(false)}\n            startDate={this.state.startTimestampObj ? this.state.startTimestampObj._d : null}\n            endDate={this.state.endTimestampObj ? this.state.endTimestampObj._d : null}\n          />\n        </Flex>\n      );\n    }\n  }\n}\n\nexport default Stats;","import Title from '../Title/Title';\nimport IconBox from '../IconBox/IconBox';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport { Flex, Icon, Text, Box, Image } from \"rimble-ui\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass Utils extends Component {\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    const SubComponent = this.props.selectedSubsection && this.props.selectedSubsection.subComponent ? this.props.selectedSubsection.subComponent : null;\n    const viewOnly = this.props.connectorName === 'custom';\n    const showBreadCrumb = typeof this.props.showBreadCrumb !== 'undefined' ? this.props.showBreadCrumb : true;\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.props.selectedSubsection ? (\n            <Box\n              width={1}\n            >\n              {\n                showBreadCrumb && (\n                  <Flex\n                    width={1}\n                  >\n                    <Breadcrumb\n                      {...this.props}\n                      showPathMobile={true}\n                      isMobile={this.props.isMobile}\n                      path={[this.props.selectedSubsection.label]}\n                      text={this.props.selectedSection.label.toUpperCase()}\n                      handleClick={ e => this.props.goToSection(this.props.selectedSection.route) }\n                    />\n                  </Flex>\n                )\n              }\n              <Flex\n                my={[2,3]}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <Title\n                  mb={2}\n                >\n                  {this.props.selectedSubsection.label}\n                </Title>\n                <Text\n                  textAlign={'center'}\n                  dangerouslySetInnerHTML={{\n                    __html:this.props.selectedSubsection.desc\n                  }}\n                >\n                </Text>\n              </Flex>\n              <SubComponent\n                {...this.props}\n                {...this.props.selectedSubsection.directProps}\n                toolProps={this.props.selectedSubsection.props}\n              />\n            </Box>\n          ) : (\n            <Flex\n              my={[2,3]}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Title\n                mb={3}\n              >\n                Tools\n              </Title>\n              <Flex\n                width={1}\n                style={{\n                  flexWrap:'wrap'\n                }}\n                justifyContent={viewOnly ? 'center' : 'flex-start'}\n              >\n              {\n                viewOnly ? (\n                  <IconBox\n                    cardProps={{\n                      maxWidth:[1,'35em']\n                    }}\n                    icon={'Visibility'}\n                    text={'You are using Idle in \"Read-Only\" mode.<br />Logout and connect with your wallet to interact.'}\n                  />\n                ) : this.props.selectedSection.submenu.map( (tool,toolIndex) => (\n                  <DashboardCard\n                    isInteractive={true}\n                    key={`tool_${toolIndex}`}\n                    cardProps={{\n                      p:[3,4],\n                      mb:[3,3],\n                      mr:[0,'2%'],\n                      style:{\n                        flex: this.props.isMobile ? '1 1 100%' : '0 0 31%'\n                      },\n                      alignItems:'center',\n                      flexDirection:'column',\n                      justifyContent:'center'\n                    }}\n                    handleClick={ e => this.props.goToSection(this.props.selectedSection.route+'/'+tool.route) }\n                  >\n                    <Text\n                      fontSize={[3,4]}\n                      textAlign={'center'}\n                    >\n                      {tool.label}\n                    </Text>\n                    <Flex\n                      justifyContent={'center'}\n                    >\n                      {\n                        tool.image ? (\n                          <Image\n                            my={[0,2]}\n                            height={'2.2em'}\n                            src={tool.image}\n                          />\n                        ) : tool.icon && (\n                          <Icon\n                            my={[0,2]}\n                            size={'3em'}\n                            name={tool.icon}\n                          />\n                        )\n                      }\n                    </Flex>\n                    <Text\n                      fontSize={[2,2]}\n                      textAlign={'center'}\n                      dangerouslySetInnerHTML={{\n                        __html:tool.desc\n                      }}\n                    >\n                    </Text>\n                  </DashboardCard>\n                ) )\n              }\n              </Flex>\n            </Flex>\n          )\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default Utils;\n","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Heading, Text, Tooltip, Icon } from \"rimble-ui\";\nimport PortfolioEquity from '../PortfolioEquity/PortfolioEquity';\n\nclass FundsOverview extends Component {\n\n  state = {\n    // govTokensAprs:null,\n    aggregatedValues:[],\n    govTokensTotalApr:null,\n    govTokensUserBalance:null,\n    govTokensDistribution:null,\n    govTokensTotalBalance:null,\n    govTokensTotalAprTooltip:null,\n    idleTokenUserDistribution:null,\n    govTokensDistributionTooltip:null,\n    govTokensTotalBalanceTooltip:null\n  };\n\n  // Utils\n  functionsUtil = null;\n  idleGovToken = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    this.idleGovToken = this.functionsUtil.getIdleGovToken();\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const isRisk = this.props.selectedStrategy === 'risk';\n\n    const [\n      // govTokensAprs,\n      idleTokenUserDistribution,\n      govTokensUserBalance,\n      apy,\n      depositTimestamp,\n      days\n    ] = await Promise.all([\n      // this.functionsUtil.getGovTokensAprs(this.props.selectedToken,this.props.tokenConfig),\n      this.idleGovToken.getUserDistribution(this.props.account,govTokenAvailableTokens,true),\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,null),\n      this.functionsUtil.loadAssetField('apy',this.props.selectedToken,this.props.tokenConfig,this.props.account,false),\n      this.functionsUtil.loadAssetField('depositTimestamp',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    let avgAPY = await this.functionsUtil.getAvgAPYStats(this.props.tokenConfig.address,isRisk,depositTimestamp);\n\n    if (!avgAPY || this.functionsUtil.BNify(avgAPY).lte(0)){\n      avgAPY = apy;\n    }\n\n    const govTokensTotalBalance = govTokensUserBalance ? Object.values(govTokensUserBalance).reduce( (totBalance,govTokenBalance) => {\n      return totBalance.plus(this.functionsUtil.BNify(govTokenBalance));\n    },this.functionsUtil.BNify(0)) : null;\n\n    const govTokensTotalBalanceTooltip = govTokensUserBalance ? Object.keys(govTokensUserBalance).map( govToken => {\n      const balance = govTokensUserBalance[govToken];\n      if (balance.gt(0)){\n        return `+${balance.toFixed(2)} ${govToken}`;\n      } else {\n        return null;\n      }\n    }).filter(v => (v !== null)) : null;\n\n    // console.log(govTokensTotalBalance,govTokensUserBalance,govTokensTotalBalanceTooltip);\n\n    // const govTokensTotalApr = govTokensAprs ? Object.values(govTokensAprs).reduce( (totApr,govTokenApr) => {\n    //   return totApr.plus(this.functionsUtil.BNify(govTokenApr));\n    // },this.functionsUtil.BNify(0)) : null;\n\n    // const govTokensTotalAprTooltip = govTokensAprs ? Object.keys(govTokensAprs).map( govToken => {\n    //   const apr = govTokensAprs[govToken];\n    //   if (apr.gt(0)){\n    //     return `${govToken}: ${apr.toFixed(2)}%`;\n    //   }\n    //   return null;\n    // }).filter(v => (v !== null)) : null;\n\n    /*\n    const govTokensDistributionTooltip = govTokensUserDistribution ? Object.keys(govTokensUserDistribution).map( govToken => {\n      const speed = govTokensUserDistribution[govToken];\n      if (speed.gt(0)){\n        const distributionFrequency = this.functionsUtil.getGlobalConfig(['govTokens',govToken,'distributionFrequency']);\n        return `+${speed.toFixed(4)} ${govToken}/${distributionFrequency}`;\n      }\n      return null;\n    }).filter(v => (v !== null)) : null;\n    */\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          desc:this.functionsUtil.getGlobalConfig(['messages','apyLong']),\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '0.00%') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    this.setState({\n      // govTokensAprs,\n      aggregatedValues,\n      // govTokensTotalApr,\n      govTokensUserBalance,\n      govTokensTotalBalance,\n      // govTokensTotalAprTooltip,\n      idleTokenUserDistribution,\n      govTokensTotalBalanceTooltip\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Flex\n                          mt={2}\n                          width={1}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <Text\n                            fontWeight={2}\n                            fontSize={[1,2]}\n                            color={'cellText'}\n                          >\n                            {v.props.title}\n                          </Text>\n                          {\n                            v.props.desc && \n                              <Tooltip\n                                placement={'bottom'}\n                                message={v.props.desc}\n                              >\n                                <Icon\n                                  ml={2}\n                                  name={\"Info\"}\n                                  size={'1em'}\n                                  color={'cellTitle'}\n                                />\n                              </Tooltip>\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquity\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              chartToken={this.props.selectedToken}\n              enabledTokens={[this.props.selectedToken]}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLent',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:this.props.theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPerc',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.govTokensTotalBalanceTooltip && this.state.govTokensTotalBalanceTooltip.length>0 && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      this.state.govTokensTotalBalanceTooltip.map((govTokenBalance,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          mt={govTokenIndex ? 1 : 0}\n                          key={`govToken_${govTokenIndex}`}\n                        >\n                          {govTokenBalance}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                )/* : this.state.govTokensUserBalance && Object.keys(this.state.govTokensUserBalance).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + ${this.state.govTokensTotalBalance.toFixed(4)}\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalBalanceTooltip.join(' / ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Fees\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'feesCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'apy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.idleTokenUserDistribution && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      mt={1}\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      {this.state.idleTokenUserDistribution.toFixed(4)} {this.idleGovToken.tokenName}/{this.idleGovToken.tokenConfig.distributionFrequency}\n                    </Text>\n                  </Flex>\n                )\n                /*\n                this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length===1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      Object.keys(this.state.govTokensAprs).map((govToken,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          ml={govTokenIndex ? 2 : 0}\n                          key={`govToken_${govToken}`}\n                        >\n                          {this.state.govTokensAprs[govToken].toFixed(2)}% {govToken}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                ) : this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + {this.state.govTokensTotalApr.toFixed(2)}%\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalAprTooltip.join('; ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Risk Score\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'score',\n                  props:{\n                    decimals:1,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverview;","import React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Icon, Checkbox, Box, Link, Input, Tooltip } from \"rimble-ui\";\n\nclass CurveRedeem extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    tokenConfig:null,\n    unevenAmounts:null,\n    selectedToken:null,\n    availableTokens:null,\n    buttonDisabled:false,\n    showMaxSlippage:false,\n    redeemUnderlying:true,\n    curveTokenConfig:null,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    curveTokensAmounts:null,\n    fastBalanceSelector:null,\n    redeemUnevenAmounts:false,\n    curveRedeemableIdleTokens:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.initToken();\n  }\n\n  showMaxSlippage(){\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  async calculateSlippage(max_slippage=null){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (!inputValue || inputValue.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    let withdrawSlippage = null;\n    let curveTokensAmounts = null;\n    let curveIdleTokensAmounts = null;\n    if (this.state.redeemUnevenAmounts){\n      [\n        curveTokensAmounts,\n        curveIdleTokensAmounts\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokensAmounts(this.props.account,normalizedAmount,true),\n        this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,normalizedAmount)\n      ]);\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false,curveIdleTokensAmounts);\n    } else {\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false);\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const redeemableBalance = inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.times(100).plus(this.state.maxSlippage || this.functionsUtil.BNify(0)).div(100)));\n      curveTokensAmounts = {};\n      curveTokensAmounts[this.state.selectedToken] = redeemableBalance;\n    }\n\n    if (withdrawSlippage){\n      withdrawSlippage = withdrawSlippage.times(100);\n    }\n\n    this.setState({\n      withdrawSlippage,\n      curveTokensAmounts,\n      curveIdleTokensAmounts\n    });\n\n    // Add max slippage but don't save in state\n    if (withdrawSlippage && max_slippage){\n      withdrawSlippage = withdrawSlippage.plus(max_slippage);\n    }\n\n    return withdrawSlippage;\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.tokenConfig.idle.token !== this.props.tokenConfig.idle.token;\n    if (tokenChanged){\n      await this.initToken();\n    }\n\n    const redeemUnevenAmountsChanged = prevState.redeemUnevenAmounts !== this.state.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    const inputChanged = prevState.inputValue !== this.state.inputValue;\n    const maxSlippageChanged = parseFloat(prevState.maxSlippage) !== parseFloat(this.state.maxSlippage);\n    const tokenConfigChanged = JSON.stringify(prevState.tokenConfig) !== JSON.stringify(this.state.tokenConfig);\n    if (inputChanged || tokenConfigChanged || maxSlippageChanged){\n      this.calculateSlippage();\n    }\n\n    const selectedTokenChanged = prevState.selectedToken !== this.state.selectedToken;\n    if (selectedTokenChanged){\n      this.loadSelectedTokenConfig();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    let buttonDisabled = false;\n\n    // if (this.state.redeemUnevenAmounts){\n      buttonDisabled = !amount || amount.gt(this.state.curveTokenBalance);\n    // } else {\n      // buttonDisabled = !amount || amount.gt(this.state.redeemableBalance);\n    // }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    let inputValue = null;\n\n    // if (this.state.redeemUnevenAmounts){\n    inputValue = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n    // } else {\n      // inputValue = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n    // }\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  selectDestinationToken(selectedToken){\n    this.setState({\n      selectedToken\n    });\n  }\n\n  async loadSelectedTokenConfig(){\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const tokenConfig = this.state.availableTokens[this.state.selectedToken];\n    const curveTokenConfig = curveConfig.availableTokens[tokenConfig.idle.token];\n    this.setState({\n      tokenConfig,\n      curveTokenConfig\n    });\n  }\n\n  async initToken(){\n    const [curvePoolContract,curveSwapContract] = await Promise.all([\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract()\n    ]);\n\n    const [\n      curveTokenPrice,\n      curveTokenBalance,\n      curveRedeemableIdleTokens,\n    ] = await Promise.all([\n      this.functionsUtil.getCurveTokenPrice(),\n      this.functionsUtil.getCurveTokenBalance(this.props.account),\n      this.functionsUtil.getCurveRedeemableIdleTokens(this.props.account)\n    ]);\n\n    const unevenAmounts = [];\n    const redeemableBalance = curveTokenBalance ? curveTokenBalance.times(curveTokenPrice) : this.functionsUtil.BNify(0);\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();;\n    const selectedToken = Object.keys(availableTokens)[0];\n\n    this.setState({\n      selectedToken,\n      unevenAmounts,\n      curveTokenPrice,\n      availableTokens,\n      curvePoolContract,\n      curveSwapContract,\n      curveTokenBalance,\n      redeemableBalance,\n      curveRedeemableIdleTokens\n    });\n  }\n\n  async redeem(){\n\n    if (!this.state.curveTokenBalance){\n      return false;\n    }\n\n    const callbackRedeem = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveRedeem`,\n        eventAction: this.props.selectedToken,\n        eventValue: this.state.curveTokenBalance.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackRedeem === 'function' && txSucceeded){\n        this.props.callbackRedeem(tx);\n      }\n    };\n\n    const callbackReceiptRedeem = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.curveSwapContract.name;\n    const withdrawSlippage = await this.calculateSlippage(this.state.maxSlippage);\n    const max_slippage = this.functionsUtil.BNify(this.state.maxSlippage).div(100);\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    // const curveTokenBalance = this.functionsUtil.normalizeTokenAmount(this.state.curveTokenBalance,this.state.curvePoolContract.decimals);\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    if (this.state.redeemUnevenAmounts){\n      const min_amounts = this.state.redeemUnderlying ? await this.functionsUtil.getCurveTokensAmounts(this.props.account,_amount,false,true) : await this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,_amount,max_slippage);\n      console.log('remove_liquidity',_amount.toString(),min_amounts);\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    } else {\n      const coin_index = this.state.curveTokenConfig.migrationParams.coinIndex;\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.div(100))),this.state.tokenConfig.decimals);\n      // const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.minus(inputValue.times(withdrawSlippage.div(100))),this.state.curveTokenConfig.decimals);\n      // let _token_amount = await this.functionsUtil.getCurveTokenAmount(amounts,false);\n      // _token_amount = this.functionsUtil.BNify(_token_amount).isGreaterThan(curveTokenBalance) ? curveTokenBalance : this.functionsUtil.BNify(_token_amount);\n\n      console.log('remove_liquidity_one_coin',_amount, coin_index, min_amount);\n\n      // debugger;\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_one_coin', [_amount, coin_index, min_amount, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    }\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  getFastBalanceSelector(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n\n  render() {\n\n    const showSlippage = !this.state.buttonDisabled && this.state.withdrawSlippage;\n    const curveTokenName = this.functionsUtil.getGlobalConfig(['curve','poolContract','token']);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          {\n            !this.state.curveTokenBalance ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3,\n                  minHeight:'195px',\n                  style:{\n                    display:'flex',\n                    alignItems:'center',\n                    justifyContent:'center'\n                  }\n                }}\n              >\n                <FlexLoader\n                  flexProps={{\n                    flexDirection:'row'\n                  }}\n                  loaderProps={{\n                    size:'30px'\n                  }}\n                  textProps={{\n                    ml:2\n                  }}\n                  text={'Checking Curve Pool...'}\n                />\n              </DashboardCard>\n            ) : this.state.processing.loading ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3\n                }}\n              >\n                <Flex\n                  flexDirection={'column'}\n                >\n                  <TxProgressBar\n                    web3={this.props.web3}\n                    hash={this.state.processing.txHash}\n                    endMessage={`Finalizing redeem request...`}\n                    cancelTransaction={this.cancelTransaction.bind(this)}\n                    waitText={ this.props.waitText ? this.props.waitText : 'Redeem estimated in'}\n                  />\n                </Flex>\n              </DashboardCard>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    mb:2\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'1.8em'}\n                      color={'cellText'}\n                      name={'FileUpload'}\n                    />\n                    <Text\n                      mt={1}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Withdraw from the Curve Pool in a specific token or in uneven amounts of tokens (with no slippage).\n                    </Text>\n                    <Flex\n                      mt={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                    >\n                      <Checkbox\n                        required={false}\n                        label={`Redeem with no slippage`}\n                        checked={this.state.redeemUnevenAmounts}\n                        onChange={ e => this.toggleUnevenAmounts(e.target.checked) }\n                      />\n                      <Tooltip\n                        placement={'top'}\n                        message={`You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.`}\n                      >\n                        <Icon\n                          size={'1em'}\n                          color={'cellTitle'}\n                          name={\"InfoOutline\"}\n                        />\n                      </Tooltip>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n                {\n                  !this.state.redeemUnevenAmounts/* && (!this.props.selectedToken || (this.state.showMaxSlippage && showSlippage))*/ && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      {\n                        this.state.tokenConfig && \n                          <Box\n                            width={1}\n                          >\n                            <Text\n                              mb={1}\n                            >\n                              Select destination token:\n                            </Text>\n                            <AssetSelector\n                              {...this.props}\n                              id={'token-from'}\n                              showBalance={false}\n                              tokenConfig={this.state.tokenConfig}\n                              selectedToken={this.state.selectedToken}\n                              availableTokens={this.state.availableTokens}\n                              onChange={this.selectDestinationToken.bind(this)}\n                            />\n                          </Box>\n                      }\n                    </Box>\n                  )\n                }\n                {\n                  this.state.curveTokensAmounts && !this.state.buttonDisabled && (\n                    <DashboardCard\n                      cardProps={{\n                        mt:1,\n                        mb:2,\n                        py:2,\n                        px:1\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Text\n                          mt={1}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          You will receive:\n                        </Text>\n                        <Flex\n                          mt={2}\n                          width={1}\n                          boxShadow={0}\n                          style={{\n                            flexWrap:'wrap'\n                          }}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                          >\n                            {\n                              Object.keys(this.state.curveTokensAmounts).map( token => {\n                                const balance = this.state.curveTokensAmounts[token];\n                                return (\n                                  <Flex\n                                    mb={1}\n                                    mx={1}\n                                    width={'auto'}\n                                    flexDirection={'row'}\n                                    key={`tokenBalance_${token}`}\n                                    justifyContent={'flex-start'}\n                                  >\n                                    <AssetField\n                                      token={token}\n                                      tokenConfig={{\n                                        token:token\n                                      }}\n                                      fieldInfo={{\n                                        name:'icon',\n                                        props:{\n                                          mr:1,\n                                          width:['1.4em','1.6em'],\n                                          height:['1.4em','1.6em']\n                                        }\n                                      }}\n                                    />\n                                    <SmartNumber\n                                      ml={1}\n                                      fontSize={[0,1]}\n                                      fontWeight={500}\n                                      maxPrecision={4}\n                                      color={'cellText'}\n                                      number={balance.toString()}\n                                    />\n                                  </Flex>\n                                );\n                            })\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n                {\n                  this.state.showMaxSlippage && showSlippage && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Text>\n                          Choose max slippage:\n                        </Text>\n                        <Tooltip\n                          placement={'top'}\n                          message={`Max additional slippage on top of the one shown below`}\n                        >\n                          <Icon\n                            ml={1}\n                            size={'1em'}\n                            color={'cellTitle'}\n                            name={\"InfoOutline\"}\n                          />\n                        </Tooltip>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        {\n                          [0.2,0.5,1,5].map( slippage => (\n                            <FastBalanceSelector\n                              cardProps={{\n                                p:1\n                              }}\n                              textProps={{\n                                fontSize:1\n                              }}\n                              percentage={slippage}\n                              key={`selector_${slippage}`}\n                              onMouseDown={()=>this.setMaxSlippage(slippage)}\n                              isActive={this.state.maxSlippage === parseFloat(slippage)}\n                            />\n                          ))\n                        }\n                      </Flex>\n                    </Box>\n                  )\n                }\n                <Flex\n                  mb={3}\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  <Flex\n                    mb={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'flex-end'}\n                  >\n                    {\n                      showSlippage && (\n                        <Flex\n                          width={1}\n                          maxWidth={'40%'}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            textAlign={'right'}\n                            style={{\n                              whiteSpace:'nowrap'\n                            }}\n                            color={ parseFloat(this.state.withdrawSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                          >\n                            {\n                              parseFloat(this.state.withdrawSlippage.toFixed(3)) === 0 ?\n                                'No Slippage'\n                              : `${ this.state.withdrawSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.withdrawSlippage.abs().toFixed(3)}%`\n                            }\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={ this.state.redeemUnevenAmounts ? `You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.` : this.state.withdrawSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                          {\n                            !this.state.redeemUnevenAmounts &&\n                              <Link\n                                ml={1}\n                                color={'copyColor'}\n                                hoverColor={'primary'}\n                                onClick={this.showMaxSlippage.bind(this)}\n                              >\n                                change\n                              </Link>\n                          }\n                        </Flex>\n                      )\n                    }\n                    <Flex\n                      width={1}\n                      maxWidth={'60%'}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      justifyContent={'flex-end'}\n                    >\n                      <Link\n                        fontSize={1}\n                        fontWeight={3}\n                        color={'dark-gray'}\n                        textAlign={'right'}\n                        hoverColor={'copyColor'}\n                        onClick={ (e) => this.setFastBalanceSelector(100) }\n                        style={{\n                          maxWidth:'100%',\n                          overflow:'hidden',\n                          whiteSpace:'nowrap',\n                          textOverflow:'ellipsis'\n                        }}\n                      >\n                        {this.state.curveTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {curveTokenName}\n                      </Link>\n                    </Flex>\n                  </Flex>\n                  <Input\n                    min={0}\n                    type={\"number\"}\n                    required={true}\n                    height={'3.4em'}\n                    borderRadius={2}\n                    fontWeight={500}\n                    boxShadow={'none !important'}\n                    placeholder={`Insert amount`}\n                    onChange={this.changeInputValue.bind(this)}\n                    border={`1px solid ${this.props.theme.colors.divider}`}\n                    value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                  />\n                  <Flex\n                    mt={2}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      [25,50,75,100].map( percentage => (\n                        <FastBalanceSelector\n                          percentage={percentage}\n                          key={`selector_${percentage}`}\n                          onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                          isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                        />\n                      ))\n                    }\n                  </Flex>\n                </Flex>\n                <Flex\n                  justifyContent={'center'}\n                >\n                  <RoundButton\n                    buttonProps={{\n                      mt:2,\n                      width:[1,1/2],\n                      disabled:this.state.buttonDisabled\n                    }}\n                    handleClick={this.redeem.bind(this)}\n                  >\n                    Redeem\n                  </RoundButton>\n                </Flex>\n              </Flex>\n            )\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveRedeem;","import React, { Component } from 'react';\nimport {\n  Button,\n  Flex,\n  Box,\n  Text\n} from \"rimble-ui\";\nimport styles from './TwitterShareButton.module.scss';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\n\nclass TwitterShareButton extends Component {\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  componentWillMount() {\n    this.loadUtils();\n  }\n\n  componentDidMount() {\n    this.loadUtils();\n  }\n\n  componentDidUpdate() {\n    this.loadUtils();\n  }\n\n  share = () => {\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'Share',\n      eventAction: 'twitter',\n      eventLabel: this.props.parent\n    });\n\n    const w = Math.min(window.innerWidth,600);\n    const h = 350;\n    const x = (window.innerWidth-w)/2;\n    const y = 150;\n    window.open(`https://twitter.com/intent/tweet?text=${this.props.tweet}`,\"_blank\",`toolbar=yes,scrollbars=no,resizable=no,top=${y},left=${x},width=${w},height=${h}`);\n  }\n\n  render() {\n    return (\n        <Button\n          borderRadius={1}\n          mainColor={'#2aa6f2'}\n          contrastColor={'white'}\n          onClick={ e => { this.share() } }\n        >\n          <Flex flexDirection={'row'} alignItems={'center'} justifyContent={'center'}>\n            <Box className={styles.twitterIcon} />\n            <Text color={'white'} fontWeight={3} ml={2}>{ this.props.text ? this.props.text : 'Tweet' }</Text>\n          </Flex>\n        </Button>\n    );\n  }\n}\n\nexport default TwitterShareButton;\n","import React from \"react\";\nimport {\n  Text,\n  Modal,\n  Link,\n  Flex\n} from \"rimble-ui\";\nimport ModalCard from './ModalCard';\nimport TwitterShareButton from '../../TwitterShareButton/TwitterShareButton.js';\nimport Confetti from 'react-confetti/dist/react-confetti';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\n\nclass ShareModal extends React.Component {\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  componentWillMount() {\n    this.loadUtils();\n  }\n\n  componentDidMount() {\n    this.loadUtils();\n  }\n\n  componentDidUpdate() {\n    this.loadUtils();\n  }\n\n  closeModal = async (action) => {\n    const globalConfigs = this.functionsUtil.getGlobalConfigs();\n    // Send Google Analytics event\n    if (globalConfigs.analytics.google.events.enabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'Share',\n        eventAction: action,\n        eventLabel: 'ShareModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n    const tweet = window.escape(this.props.tweet);\n    const customText = {__html: this.props.text};\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        <ModalCard closeFunc={this.props.closeModal}>\n          {\n            this.props.confettiEnabled &&\n            <Confetti\n              style={{ position: 'fixed','zIndex':9999 }}\n              run={true}\n              recycle={true}\n              width={window.innerWidth}\n              height={window.innerHeight}\n            />\n          }\n          <ModalCard.Header title={this.props.title} icon={this.props.icon}></ModalCard.Header>\n          <ModalCard.Body>\n            <Flex my={3} width={1} flexDirection={'column'} mx={'auto'}>\n              <Text color={'dark-gray'} textAlign={'center'} fontSize={3} mb={2} dangerouslySetInnerHTML={customText}></Text>\n            </Flex>\n            <Flex mb={3} flexDirection={'column'} alignItems={'center'} justifyContent={'center'}>\n              <TwitterShareButton tweet={tweet} text={'Share now'} parent={'ShareModal'} />\n              <Link mt={2} onClick={ e => this.closeModal('continue_without_sharing') } hoverColor={'blue'}>continue without sharing</Link>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default ShareModal;","import Migrate from '../Migrate/Migrate';\nimport IconBox from '../IconBox/IconBox';\nimport React, { Component } from 'react';\nimport ExtLink from '../ExtLink/ExtLink';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport ConnectBox from '../ConnectBox/ConnectBox';\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport RoundButton from '../RoundButton/RoundButton';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport ShareModal from '../utilities/components/ShareModal';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport TransactionField from '../TransactionField/TransactionField';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Input, Box, Icon, Link, Checkbox, Tooltip, Image } from \"rimble-ui\";\n\nclass DepositRedeem extends Component {\n\n  state = {\n    txError:{},\n    tokenAPY:'-',\n    inputValue:{},\n    processing:{},\n    curveAPY:null,\n    totalAUM:null,\n    canRedeem:false,\n    maxSlippage:0.2,\n    canDeposit:false,\n    action:'deposit',\n    directMint:false,\n    activeModal:null,\n    tokenGovTokens:{},\n    showBuyFlow:false,\n    maxUnlentPerc:null,\n    unlentBalance:null,\n    tokenApproved:false,\n    skipMigration:false,\n    redeemSkipGov:false,\n    showRedeemFlow:false,\n    contractPaused:false,\n    buttonDisabled:false,\n    canRedeemCurve:false,\n    erc20ForwarderTx:null,\n    signedParameters:null,\n    minAmountForMint:null,\n    showMaxSlippage:false,\n    redeemGovTokens:false,\n    canDepositCurve:false,\n    redeemSkipGovTokens:[],\n    fastBalanceSelector:{},\n    actionProxyContract:{},\n    migrationEnabled:false,\n    componentMounted:false,\n    curveTokenBalance:null,\n    agreeSkipGovTokens:false,\n    redeemCurveEnabled:false,\n    depositCurveBalance:null,\n    depositCurveEnabled:true,\n    showAdvancedOptions:false,\n    skipGovTokensGasSave:null,\n    depositCurveSlippage:null,\n    erc20ForwarderContract:{},\n    erc20ForwarderEnabled:true,\n    showETHWrapperEnabled:false,\n    skipGovTokensGasSaveUSD:null,\n    metaTransactionsEnabled:true,\n    skippedGovTokensBalance:null,\n    minAmountForMintReached:false,\n    loadingErc20ForwarderTx:false\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadProxyContracts();\n  }\n\n  async componentDidMount(){\n\n  }\n\n  setShowRedeemFlow = (showRedeemFlow) => {\n    this.setState({\n      showRedeemFlow\n    });\n  }\n\n  setShowBuyFlow = (showBuyFlow) => {\n    this.setState({\n      showBuyFlow\n    });\n  }\n\n  toggleShowAdvancedOptions = showAdvancedOptions => {\n    this.setState((prevState) => ({\n      showAdvancedOptions:!prevState.showAdvancedOptions\n    }));\n  }\n\n  toggleSkipMigration = skipMigration => {\n    this.setState({\n      skipMigration\n    });\n  }\n\n  toggleRedeemCurve = redeemCurveEnabled => {\n    this.setState({\n      redeemCurveEnabled\n    });\n  }\n\n  toggleDepositCurve = depositCurveEnabled => {\n    this.setState({\n      depositCurveEnabled\n    });\n  }\n\n  toggleShowETHWrapper = showETHWrapperEnabled => {\n    this.setState({\n      showETHWrapperEnabled\n    });\n  }\n\n  toggleAgreeSkipGovTokens = agreeSkipGovTokens => {\n    this.setState({\n      agreeSkipGovTokens\n    });\n  }\n\n  toggleSkipMint = (directMint) => {\n    this.setState({\n      directMint\n    });\n  }\n\n  toggleRedeemGovTokens = (redeemGovTokens) => {\n    this.setState({\n      redeemGovTokens,\n      redeemSkipGovTokens:[],\n      agreeSkipGovTokens:false,\n      skippedGovTokensBalance:this.functionsUtil.BNify(0),\n      redeemSkipGov:redeemGovTokens?false:this.state.redeemSkipGov\n    });\n  }\n\n  toggleRedeemSkipGov = (redeemSkipGov) => {\n    this.setState({\n      redeemSkipGov,\n      redeemSkipGovTokens:[],\n      agreeSkipGovTokens:false,\n      skippedGovTokensBalance:this.functionsUtil.BNify(0),\n      redeemGovTokens:redeemSkipGov?false:this.state.redeemGovTokens\n    });\n  }\n\n  getSkippedGovTokensFlags = async () => {\n    const govTokensIndexes = await this.functionsUtil.getGovTokensIndexes(this.props.account,this.props.tokenConfig);\n    const govTokensFlags = Object.keys(govTokensIndexes).map( token => {\n      return this.state.redeemSkipGovTokens.includes(token);\n    });\n    // console.log('getSkippedGovTokensFlags',govTokensIndexes,govTokensFlags);\n    return govTokensFlags;\n  }\n\n  calculateSkippedGovTokens = async () => {\n    let skippedGovTokensBalance = this.functionsUtil.BNify(0);\n    const DAITokenConfig = this.functionsUtil.getGlobalConfig(['stats','tokens','DAI']);\n\n    await this.functionsUtil.asyncForEach(this.state.redeemSkipGovTokens, async (govToken) => {\n      const govTokenConfig = this.functionsUtil.getGlobalConfig(['govTokens',govToken]);\n      const govTokenPrice = await this.functionsUtil.getUniswapConversionRate(DAITokenConfig,govTokenConfig);\n      const skippedAmount = this.props.govTokensUserBalances[govToken].times(govTokenPrice);\n      skippedGovTokensBalance = skippedGovTokensBalance.plus(skippedAmount);\n    });\n\n    const _skipGovTokenRedeem = await this.getSkippedGovTokensFlags();\n    const WETHTokenConfig = this.functionsUtil.getGlobalConfig(['stats','tokens','WETH']);\n\n    const [\n      wethPrice,\n      redeemGasUsage,\n      skipGovRedeemGasUsage\n    ] = await Promise.all([\n      this.functionsUtil.getUniswapConversionRate(DAITokenConfig,WETHTokenConfig),\n      this.functionsUtil.estimateMethodGasUsage(this.props.tokenConfig.idle.token, 'redeemIdleToken', [this.functionsUtil.normalizeTokenAmount(this.props.idleTokenBalance,this.props.tokenConfig.decimals)], this.props.account),\n      this.functionsUtil.estimateMethodGasUsage(this.props.tokenConfig.idle.token, 'redeemIdleTokenSkipGov', [this.functionsUtil.normalizeTokenAmount(this.props.idleTokenBalance,this.props.tokenConfig.decimals),_skipGovTokenRedeem], this.props.account)\n    ]);\n\n    const skipGovTokensGasSave = redeemGasUsage && skipGovRedeemGasUsage ? redeemGasUsage.minus(skipGovRedeemGasUsage) : this.functionsUtil.BNify(0);\n    const skipGovTokensGasSaveUSD = skipGovTokensGasSave ? skipGovTokensGasSave.times(wethPrice) : this.functionsUtil.BNify(0);\n\n    this.setState({\n      skipGovTokensGasSave,\n      skipGovTokensGasSaveUSD,\n      skippedGovTokensBalance\n    });\n    return skippedGovTokensBalance;\n  }\n\n  setRedeemSkipGovTokens = (token,checked) => {\n    this.setState((prevState) => {\n      const redeemSkipGovTokens = Object.assign([],prevState.redeemSkipGovTokens);\n      if (!checked && redeemSkipGovTokens.includes(token)){\n        redeemSkipGovTokens.splice(redeemSkipGovTokens.indexOf(token),1);\n      } else if (checked && !redeemSkipGovTokens.includes(token)) {\n        redeemSkipGovTokens.push(token);\n      }\n      return {\n        redeemSkipGovTokens\n      };\n    },() => {\n      this.calculateSkippedGovTokens();\n    });\n  }\n\n  toggleErc20ForwarderEnabled = (erc20ForwarderEnabled) => {\n    const newState = {\n      erc20ForwarderEnabled\n    };\n\n    this.setState(newState, () => {\n      this.cancelTransaction();\n    });\n  }\n\n  toggleMetaTransactionsEnabled = (metaTransactionsEnabled) => {\n    this.setState({\n      metaTransactionsEnabled\n    });\n  }\n\n  async loadProxyContracts(){\n    const actions = ['deposit','redeem'];\n    const newState = {\n      actionProxyContract:{},\n      erc20ForwarderContract:{}\n    };\n\n    await this.functionsUtil.asyncForEach(actions,async (action) => {\n      let mintProxyContractInfo = null;\n      const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods',action,'erc20ForwarderEnabled']);\n\n      if (depositErc20ForwarderEnabled){\n        mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract','methods',action,'erc20ForwarderProxyContract','forwarder']);\n\n        await this.props.initContract(mintProxyContractInfo.name,mintProxyContractInfo.address,mintProxyContractInfo.abi);\n\n        // Init contract for erc20 forwarder\n        const erc20ForwarderContractInfo = this.functionsUtil.getGlobalConfig(['contract','methods',action,'erc20ForwarderProxyContract','tokens',this.props.selectedToken]);\n        if (erc20ForwarderContractInfo){\n          mintProxyContractInfo = erc20ForwarderContractInfo;\n          const erc20ForwarderContract = await this.props.initContract(erc20ForwarderContractInfo.name,erc20ForwarderContractInfo.address,erc20ForwarderContractInfo.abi);\n          newState.erc20ForwarderContract[action] = erc20ForwarderContractInfo;\n          newState.erc20ForwarderContract[action].contract = erc20ForwarderContract.contract;\n        }\n      }\n\n      if (!mintProxyContractInfo){\n        mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract','methods',action,'proxyContract']);\n      }\n\n      const hasProxyContract = mintProxyContractInfo && mintProxyContractInfo.enabled;\n      newState.actionProxyContract[action] = hasProxyContract ? mintProxyContractInfo : null;\n      if (hasProxyContract){\n        const proxyContract = await this.props.initContract(mintProxyContractInfo.name,mintProxyContractInfo.address,mintProxyContractInfo.abi);\n        newState.actionProxyContract[action].contract = proxyContract.contract;\n        newState.actionProxyContract[action].approved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,mintProxyContractInfo.address,this.props.account);\n      }\n    });\n\n    this.setState(newState);\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadAPY(){\n    const tokenAprs = await this.functionsUtil.getTokenAprs(this.props.tokenConfig);\n    if (tokenAprs && tokenAprs.avgApy !== null){\n      const tokenAPY = this.functionsUtil.BNify(tokenAprs.avgApy).toFixed(2);\n\n      let curveAPY = null;\n      if (this.state.canDepositCurve){\n        curveAPY = await this.functionsUtil.getCurveAPY();\n        // console.log('curveAPY',curveAPY);\n        if (curveAPY){\n          curveAPY = curveAPY.plus(tokenAPY);\n        }\n      }\n      this.setState({\n        tokenAPY,\n        curveAPY\n      });\n    }\n  }\n\n  getReferralAddress(){\n    let _referral = this.functionsUtil.getQueryStringParameterByName('_referral');\n    if (!this.functionsUtil.checkAddress(_referral)){\n      _referral = null;\n    }\n    return _referral;\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    if (this.props.tokenBalance === null){\n      return false;\n    }\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    const erc20ForwarderEnabledChanged = prevState.erc20ForwarderEnabled !==  this.state.erc20ForwarderEnabled;\n    const tokenBalanceChanged = prevProps.tokenBalance !== this.props.tokenBalance && this.props.tokenBalance !== null;\n\n    if (tokenChanged || tokenBalanceChanged || erc20ForwarderEnabledChanged){\n      await this.loadProxyContracts();\n      this.loadTokenInfo();\n      return false;\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n\n    if (actionChanged || fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const inputValueChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputValueChanged){\n      // this.checkMinAmountForMint();\n    }\n\n    const redeemSkipGovChanged = prevState.redeemSkipGov !== this.state.redeemSkipGov;\n    const redeemGovTokensChanged = prevState.redeemGovTokens !== this.state.redeemGovTokens;\n    const agreeSkipGovTokensChanged = prevState.agreeSkipGovTokens !== this.state.agreeSkipGovTokens;\n    const redeemSkipGovTokensChanged = JSON.stringify(prevState.redeemSkipGovTokens) !== JSON.stringify(this.state.redeemSkipGovTokens);\n\n    if (redeemGovTokensChanged || actionChanged || redeemSkipGovTokensChanged || redeemSkipGovChanged || agreeSkipGovTokensChanged){\n      this.checkButtonDisabled();\n    }\n\n    const depositCurveChanged = prevState.depositCurveEnabled !== this.state.depositCurveEnabled;\n    const metaTransactionsChanged = prevState.metaTransactionsEnabled !== this.state.metaTransactionsEnabled;\n    if (metaTransactionsChanged || depositCurveChanged){\n      const tokenApproved = await this.checkTokenApproved();\n      this.setState({\n        tokenApproved\n      });\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateCurveSlippage();\n    }\n  }\n\n  async checkMinAmountForMint(){\n    let showPoolPerc = false;\n    let totalAUM = this.state.totalAUM;\n    let maxUnlentPerc = this.state.maxUnlentPerc;\n    const isRisk = this.props.selectedStrategy === 'risk';\n    const inputValue = this.functionsUtil.BNify(this.state.inputValue[this.state.action]);\n\n    if (inputValue.gt(this.props.tokenBalance)){\n      return false;\n    }\n\n    const convertedAmount = await this.functionsUtil.convertTokenBalance(inputValue,this.props.selectedToken,this.props.tokenConfig,isRisk);\n    let minAmountForMint = this.functionsUtil.BNify(this.functionsUtil.getGlobalConfig(['contract','methods','deposit','minAmountForMint']));\n    let minAmountForMintReached = convertedAmount.gte(minAmountForMint);\n\n    // Check token minAmountForMint\n    if (minAmountForMintReached){\n      if (this.props.tokenConfig.deposit && this.props.tokenConfig.deposit.minAmountForMint && convertedAmount.lt(this.props.tokenConfig.deposit.minAmountForMint)){\n        minAmountForMintReached = false;\n      } else {\n        [\n          maxUnlentPerc,\n          totalAUM\n        ] = await Promise.all([\n          maxUnlentPerc || this.functionsUtil.genericContractCall(this.props.tokenConfig.idle.token, 'maxUnlentPerc'),\n          totalAUM ||this.functionsUtil.loadAssetField('pool',this.props.selectedToken,this.props.tokenConfig,this.props.account)\n        ]);\n\n        if (maxUnlentPerc && totalAUM){\n          const depositPerc = inputValue.div(totalAUM).times(100);\n          maxUnlentPerc = this.functionsUtil.BNify(maxUnlentPerc);\n          const maxUnlentPercFormatted = maxUnlentPerc.div(1e3).times(2);\n          if (depositPerc.lt(maxUnlentPercFormatted)){\n            minAmountForMintReached = false;\n          } else if (totalAUM.times(maxUnlentPercFormatted.div(100)).gt(minAmountForMint)) {\n            showPoolPerc = true;\n            minAmountForMint = totalAUM.times(maxUnlentPercFormatted.div(100));\n          }\n        }\n      }\n    }\n\n    this.setState({\n      totalAUM,\n      showPoolPerc,\n      maxUnlentPerc,\n      minAmountForMint,\n      minAmountForMintReached\n    });\n  }\n\n  async calculateCurveSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,curvePoolContractInfo.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositCurveBalance = amount;\n        newState.depositCurveSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n      break;  \n      case 'redeem':\n        // newState.redeemBalance = amount;\n        // newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateCurveSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  checkUseProxyContract = () => {\n    const proxyContract = this.state.actionProxyContract[this.state.action];\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','metaTransactionsEnabled']) && this.state.metaTransactionsEnabled;\n    return ((depositErc20ForwarderEnabled || depositMetaTransactionsEnabled) && proxyContract && this.props.biconomy);\n  }\n\n  approveContract = async (callbackApprove,callbackReceiptApprove) => {\n    if (this.state.depositCurveEnabled){\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve','depositContract']);\n      this.functionsUtil.enableERC20(this.props.selectedToken,curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n    } else {\n      // Check Proxy Contract Approved for Deposit with Biconomy\n      const useProxyContract = this.checkUseProxyContract();\n      if (useProxyContract){\n        const proxyContract = this.state.actionProxyContract[this.state.action];\n        this.functionsUtil.enableERC20(this.props.selectedToken,proxyContract.address,callbackApprove,callbackReceiptApprove);\n      } else {\n        this.functionsUtil.enableERC20(this.props.selectedToken,this.props.tokenConfig.idle.address,callbackApprove,callbackReceiptApprove);\n      }\n    }\n  }\n\n  checkTokenApproved = async () => {\n    let tokenApproved = false;\n    if (this.state.depositCurveEnabled){\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve','depositContract']);\n      tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,curveDepositContract.address,this.props.account);\n    } else {\n      // Check Proxy Contract Approved for Deposit with Biconomy\n      const useProxyContract = this.checkUseProxyContract();\n      if (useProxyContract){\n        // Check for Permit Deposit\n        const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n        if (depositErc20ForwarderEnabled){\n          const permitEnabled = this.functionsUtil.getGlobalConfig(['permit',this.props.selectedToken]);\n          if (permitEnabled){\n            return true;\n          }\n        }\n        // Check proxy contract approved\n        const proxyContract = this.state.actionProxyContract[this.state.action];\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,proxyContract.address,this.props.account);\n        // console.log('tokenApproved 1',tokenApproved);\n      } else {\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,this.props.tokenConfig.idle.address,this.props.account);\n        // console.log('tokenApproved 2',tokenApproved);\n      }\n    }\n\n    return tokenApproved;\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = await this.checkTokenApproved();\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.props.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.approveContract(callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  loadTokenInfo = async () => {\n\n    if (this.state.componentMounted){\n      this.setState({\n        componentMounted:false\n      });\n    }\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token]);\n    const curveTokenEnabled = curveConfig.enabled && curveTokenConfig && curveTokenConfig.enabled;\n\n    const [\n      tokenApproved,\n      contractPaused,\n      curveSwapContract,\n      curveDepositContract,\n      unlentBalance,\n      {migrationEnabled},\n      curveTokenBalance,\n    ] = await Promise.all([\n      this.checkTokenApproved(),\n      this.functionsUtil.checkContractPaused(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract(),\n      this.functionsUtil.getUnlentBalance(this.props.tokenConfig),\n      this.functionsUtil.checkMigration(this.props.tokenConfig,this.props.account),\n      curveTokenEnabled ? this.functionsUtil.getCurveTokenBalance(this.props.account) : null\n    ]);\n\n    const canDeposit = this.props.tokenBalance && this.functionsUtil.BNify(this.props.tokenBalance).gt(0);\n    const canRedeem = this.props.idleTokenBalance && this.functionsUtil.BNify(this.props.idleTokenBalance).gt(0);\n\n    const canDepositCurve = curveTokenEnabled && canDeposit;\n    const depositCurveEnabled = canDepositCurve;\n\n    const showETHWrapperEnabled = this.props.selectedToken === 'WETH' && (this.state.showETHWrapperEnabled || !canDeposit);\n\n    const canRedeemCurve = curveTokenEnabled && curveTokenBalance && curveTokenBalance.gt(0);\n    const redeemCurveEnabled = canRedeemCurve;\n\n    const tokenGovTokens = this.functionsUtil.getTokenGovTokens(this.props.tokenConfig);\n\n    const newState = {...this.state};\n\n    // Check curve deposit enabled\n    if (newState.depositCurveEnabled && !curveTokenEnabled){\n      newState.depositCurveEnabled = false;\n    }\n    \n\n    newState.canRedeem = canRedeem;\n    newState.canDeposit = canDeposit;\n    newState.unlentBalance = unlentBalance;\n    newState.tokenApproved = tokenApproved;\n    newState.tokenGovTokens = tokenGovTokens;\n    newState.contractPaused = contractPaused;\n    newState.canRedeemCurve = canRedeemCurve;\n    newState.canDepositCurve = canDepositCurve;\n    newState.migrationEnabled = migrationEnabled;\n    newState.curveTokenBalance = curveTokenBalance;\n    newState.curveSwapContract = curveSwapContract;\n    newState.redeemCurveEnabled = redeemCurveEnabled;\n    newState.depositCurveEnabled = depositCurveEnabled;\n    newState.curveDepositContract = curveDepositContract;\n    newState.showETHWrapperEnabled = showETHWrapperEnabled;\n\n    newState.txError = {\n      redeem:false,\n      deposit:false\n    };\n    newState.processing = {\n      redeem:{\n        txHash:null,\n        loading:false\n      },\n      deposit:{\n        txHash:null,\n        loading:false\n      },\n      approve:{\n        txHash:null,\n        loading:false\n      },\n      boost:{\n        txHash:null,\n        loading:false\n      }\n    };\n    newState.inputValue = {\n      boost:null,\n      redeem:null,\n      deposit:null\n    };\n    newState.fastBalanceSelector = {\n      boost:null,\n      redeem:null,\n      deposit:null\n    };\n\n    newState.componentMounted = true;\n\n    this.setState(newState,() => {\n      this.checkAction();\n      this.loadAPY();\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      erc20ForwarderTx:null,\n      loadingErc20ForwarderTx:false,\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const redeemGovTokens = this.state.redeemGovTokens;\n    const selectedPercentage = this.getFastBalanceSelector();\n    const inputValue = this.state.inputValue[this.state.action];\n    const redeemSkipGov = this.state.redeemSkipGov && this.state.redeemSkipGovTokens.length>0 && this.state.agreeSkipGovTokens;\n\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','metaTransactionsEnabled']) && this.state.metaTransactionsEnabled;\n\n    let loading = true;\n\n    switch (this.state.action){\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        if (!this.state.tokenApproved){\n          return this.approveToken();\n        }\n\n        if (localStorage){\n          this.functionsUtil.setLocalStorage('redirectToFundsAfterLogged',0);\n        }\n\n        this.setState({\n          lendingProcessing: this.props.account,\n          lendAmount: '',\n          genericError: '',\n        });\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.props.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if ((this.state.metaTransactionsEnabled || this.state.erc20ForwarderEnabled) && txError){\n            this.setState({\n              erc20ForwarderTx:null,\n              loadingErc20ForwarderTx:false,\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n        const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token,'enabled']);\n\n        // Curve Deposit\n        if (curveTokenEnabled && this.state.depositCurveEnabled){\n\n          const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,curvePoolContractInfo.decimals);\n\n          const amounts = await this.functionsUtil.getCurveAmounts(this.props.tokenConfig.idle.token,tokensToDeposit);\n          let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n          if (this.state.maxSlippage){\n            minMintAmount = this.functionsUtil.BNify(minMintAmount);\n            minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n            minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n          }\n          \n          const depositParams = [amounts,minMintAmount];\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, callbackDeposit, callbackReceiptDeposit);\n        // Normal Deposit\n        } else {\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n\n          // const gasLimitDeposit = this.functionsUtil.BNify(1000000);\n          let depositParams = [];\n\n          // Use Proxy Contract if enabled\n          const useProxyContract = this.checkUseProxyContract();\n          if (useProxyContract){\n            const mintProxyContractInfo = this.state.actionProxyContract[this.state.action];\n            const mintProxyContract = mintProxyContractInfo.contract;\n\n            // Use Meta-Transactions\n            if (depositMetaTransactionsEnabled){\n              depositParams = [tokensToDeposit, this.props.tokenConfig.idle.address];\n              const functionCall = mintProxyContract.methods[mintProxyContractInfo.function](...depositParams);\n              const functionSignature = functionCall.encodeABI();\n              // console.log('mintProxyContract',mintProxyContractInfo.function,depositParams);\n              // if (this.state.metaTransactionsEnabled){\n              contractSendResult = await this.functionsUtil.sendBiconomyTxWithPersonalSign(mintProxyContractInfo.name, functionSignature, callbackDeposit, callbackReceiptDeposit);\n              // } else {\n              //   contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n              // }\n            // Use Erc20 Forwarder\n            } else if (depositErc20ForwarderEnabled){\n              // Build ERC20 Forwarder Tx\n              if (!this.state.erc20ForwarderTx){\n                this.setState({\n                  txError:{\n                    [this.state.action]:false\n                  },\n                  loadingErc20ForwarderTx:true\n                }, async () => {\n                  const erc20ForwarderContract = this.state.erc20ForwarderContract[this.state.action];\n                  const signedParameters = await this.functionsUtil.signPermit(this.props.selectedToken, this.props.account, erc20ForwarderContract.name);\n                  console.log('signedParameters',signedParameters);\n                  if (signedParameters){\n                    const { expiry, nonce, r, s, v } = signedParameters;\n                    depositParams = [tokensToDeposit, parseInt(nonce), expiry, v, r, s];\n\n                    console.log('permitAndDeposit',mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams);\n\n                    // contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n\n                    const permitType = erc20ForwarderContract.permitType;\n                    const functionCall = erc20ForwarderContract.contract.methods[erc20ForwarderContract.function](...depositParams);\n                    const functionSignature = functionCall.encodeABI();\n\n                    // console.log('buildBiconomyErc20ForwarderTx 1',permitType, erc20ForwarderContract.function, depositParams, functionCall, functionSignature);\n\n                    const gasLimit = 1000000;//await functionCall.estimateGas({from: this.props.account}); // 5000000;\n\n                    console.log('buildBiconomyErc20ForwarderTx',mintProxyContractInfo.name, depositParams, functionSignature, gasLimit);\n\n                    // debugger;\n\n                    const erc20ForwarderTx = await this.functionsUtil.buildBiconomyErc20ForwarderTx(erc20ForwarderContract.name, this.props.tokenConfig.address, permitType, functionSignature, gasLimit);\n                    console.log('erc20ForwarderTx',erc20ForwarderTx);\n                    return this.setState({\n                      erc20ForwarderTx,\n                      loadingErc20ForwarderTx:false\n                    });\n                  } else {\n                    return this.setState((prevState) => ({\n                      processing: {\n                        ...prevState.processing,\n                        [this.state.action]:{\n                          txHash:null,\n                          loading:false\n                        }\n                      },\n                      signedParameters:null,\n                      erc20ForwarderTx:null,\n                      loadingErc20ForwarderTx:false\n                    }));\n                  }\n                });\n              // Send ERC20 Forwarder Tx\n              } else {\n                this.setState({\n                  txError:{\n                    [this.state.action]:false\n                  },\n                  loadingErc20ForwarderTx:true\n                }, async () => {\n                  const metaInfo = {};\n                  const permitOptions = {};\n                  const erc20ForwarderContract = this.state.erc20ForwarderContract[this.state.action];\n                  const erc20ForwarderBaseContract = this.functionsUtil.getGlobalConfig(['contract','methods',this.state.action,'erc20ForwarderProxyContract','forwarder']);\n\n                  const signedParameters = await this.functionsUtil.signPermit(this.props.selectedToken, this.props.account, erc20ForwarderBaseContract.name, 1);\n                  if (signedParameters){\n\n                    this.setState({\n                      signedParameters\n                    });\n\n                    const { expiry, nonce, r, s, v } = signedParameters;\n                    permitOptions.v = v;\n                    permitOptions.r = r;\n                    permitOptions.s = s;\n                    permitOptions.value = 0; //in case of DAI passing dummy value for the sake of struct (similar to token address in EIP2771)\n                    permitOptions.allowed = true;\n                    permitOptions.expiry = parseInt(expiry);\n                    permitOptions.holder = this.props.account;\n                    permitOptions.nonce = parseInt(nonce.toString());\n                    permitOptions.spender = erc20ForwarderBaseContract.address;\n\n                    metaInfo.permitData = permitOptions;\n                    metaInfo.permitType = erc20ForwarderContract.permitType;\n\n                    console.log('sendBiconomyTxWithErc20Forwarder',permitOptions,metaInfo);\n\n                    await this.functionsUtil.asyncTimeout(200);\n\n                    contractSendResult = await this.functionsUtil.sendBiconomyTxWithErc20Forwarder(this.state.erc20ForwarderTx.request, metaInfo, callbackDeposit, callbackReceiptDeposit);\n\n                    this.setState({\n                      erc20ForwarderTx:null,\n                      loadingErc20ForwarderTx:false\n                    });\n                  } else {\n                    return this.setState((prevState) => ({\n                      processing: {\n                        ...prevState.processing,\n                        [this.state.action]:{\n                          txHash:null,\n                          loading:false\n                        }\n                      },\n                      signedParameters:null,\n                      erc20ForwarderTx:null,\n                      loadingErc20ForwarderTx:false\n                    }));\n                  }\n                });\n              }\n            }\n          // Use main contract if no proxy contract exists\n          } else {\n            /*\n            let _skipMint = !this.state.directMint && this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMint']);\n            _skipMint = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : _skipMint;\n\n            // Check if deposited amount is greated that general lower limit for direct mint\n            if (_skipMint && this.state.minAmountForMintReached){\n              _skipMint = false;\n            }\n            */\n            // Always skip mint\n            let _skipMint = true;\n\n            const _referral = this.getReferralAddress() || '0x0000000000000000000000000000000000000000';\n            depositParams = [tokensToDeposit, _skipMint, _referral];\n            // console.log('depositParams',depositParams);\n            contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'mintIdleToken', depositParams, callbackDeposit, callbackReceiptDeposit);\n          }\n        }\n      break;\n      case 'redeem':\n\n        if (redeemGovTokens){\n          const callbackRedeem = (tx,error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_gov`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: 0\n            };\n\n            if (error){\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error'){\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  txHash:null,\n                  loading:false\n                }\n              }\n            }));\n\n            if (txSucceeded){\n              this.setState((prevState) => ({\n                inputValue:{\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'redeemIdleToken', [0], callbackRedeem, callbackReceiptRedeem);\n          \n        } else {\n\n          if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n            return false;\n          }\n\n          const txData = {\n            value:this.functionsUtil.BNify(inputValue)\n          };\n\n          let idleTokenToRedeem = null;\n          if (selectedPercentage){\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage);\n          } else {\n            const idleTokenPriceWithFee = await this.functionsUtil.getIdleTokenPriceWithFee(this.props.tokenConfig,this.props.account)\n            idleTokenToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals)).div(idleTokenPriceWithFee);\n          }\n\n          // Check if idleTokens to redeem > idleToken balance\n          if (idleTokenToRedeem.gt(this.functionsUtil.BNify(this.props.idleTokenBalance))){\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance);\n          }\n\n          // Normalize number\n          idleTokenToRedeem = this.functionsUtil.normalizeTokenAmount(idleTokenToRedeem,18);\n\n          if (!idleTokenToRedeem){\n            return false;\n          }\n\n          const callbackRedeem = (tx,error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_partial`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: parseInt(inputValue)\n            };\n\n            if (error){\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error'){\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  txHash:null,\n                  loading:false\n                }\n              }\n            }));\n\n            if (txSucceeded){\n              this.setState((prevState) => ({\n                inputValue:{\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          let redeemMethod = 'redeemIdleToken';\n          let redeemParams = [idleTokenToRedeem];\n\n          if (redeemSkipGov){\n            redeemMethod = 'redeemIdleTokenSkipGov';\n            const _skipGovTokenRedeem = await this.getSkippedGovTokensFlags();\n            redeemParams.push(_skipGovTokenRedeem);\n          }\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, redeemMethod, redeemParams, callbackRedeem, callbackReceiptRedeem, txData);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    if (contractSendResult !== false || loading !== this.state.processing[this.state.action].loading){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  showMaxSlippage = () => {\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  checkAction = () => {\n    let action = this.state.action;\n\n    switch(action){\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = 'deposit';\n        }\n      break;\n      default:\n      break;\n    }\n\n    if (action !== this.state.action){\n      this.setState({\n        action\n      },() => {\n        this.checkButtonDisabled();\n      });\n    } else {\n      this.checkButtonDisabled();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && (amount.lte(0) || amount.gt(this.props.tokenBalance)));\n      break;\n      case 'redeem':\n        buttonDisabled = !this.state.canRedeemCurve && !this.state.redeemGovTokens && (buttonDisabled || ( !amount || amount.lte(0) || amount.gt(this.props.redeemableBalance) ));\n\n        if (!buttonDisabled && this.state.redeemSkipGov && this.state.redeemSkipGovTokens.length>0 && !this.state.agreeSkipGovTokens){\n          buttonDisabled = true;\n        }\n        // console.log('checkButtonDisabled',this.state.redeemSkipGov,this.state.redeemSkipGovTokens.length,this.state.agreeSkipGovTokens,buttonDisabled);\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.props.tokenBalance ? this.functionsUtil.BNify(this.props.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        amount = this.props.redeemableBalance ? this.functionsUtil.BNify(this.props.redeemableBalance).times(selectedPercentage) : null;\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  changeInputValue = async (e) => {\n    if (!this.state.action){\n      return false;\n    }\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem && !this.state.canRedeemCurve){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const viewOnly = this.props.connectorName === 'custom';\n\n    const govTokensDisabled = this.props.tokenConfig.govTokensDisabled;\n    const govTokensEnabled = !govTokensDisabled && this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'govTokensEnabled']) && Object.keys(this.state.tokenGovTokens).length>0;\n    const skipMintForDepositEnabled = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : true;\n    const skipMintCheckboxEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMintCheckboxEnabled']) && skipMintForDepositEnabled;\n\n    const showRedeemFlow = this.state.canRedeem && (!this.state.redeemCurveEnabled || this.state.showRedeemFlow) && this.state.action==='redeem';\n\n    const redeemGovTokenEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','redeemGovTokens','enabled']) && govTokensEnabled && showRedeemFlow && this.props.govTokensBalance.gt(0);\n    const redeemGovTokens = redeemGovTokenEnabled && this.state.redeemGovTokens;\n\n    const redeemSkipGovConfig = this.functionsUtil.getGlobalConfig(['contract','methods','redeemSkipGov']);\n    const redeemSkipGovEnabled = redeemSkipGovConfig && !redeemSkipGovConfig.disabledTokens.includes(this.props.tokenConfig.idle.token) && govTokensEnabled && showRedeemFlow;\n    const redeemSkipGov = redeemSkipGovEnabled && this.state.redeemSkipGov && Object.keys(this.props.govTokensUserBalances).length>0 && this.props.govTokensBalance.gt(0);\n    const redeemSkipGovNoTokens = redeemSkipGovEnabled && this.state.redeemSkipGov && (!Object.keys(this.props.govTokensUserBalances).length || this.props.govTokensBalance.lte(0));\n\n\n    const showAdvancedRedeemOptions = redeemGovTokenEnabled || redeemSkipGovEnabled;\n    // console.log('showAdvancedRedeemOptions',showAdvancedRedeemOptions,redeemGovTokenEnabled,redeemSkipGovEnabled,govTokensEnabled,showRedeemFlow);\n\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderEnabled']);\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','metaTransactionsEnabled']);\n\n    // Biconomy Start\n    const metaTransactionsAvailable = depositMetaTransactionsEnabled && this.props.biconomy && this.state.actionProxyContract[this.state.action];\n    const useMetaTx = metaTransactionsAvailable && this.state.metaTransactionsEnabled;\n\n    const erc20ForwarderEnabled = depositErc20ForwarderEnabled && this.props.biconomy && this.props.erc20ForwarderClient && this.state.actionProxyContract[this.state.action];\n\n    // console.log(erc20ForwarderEnabled,depositErc20ForwarderEnabled,this.props.biconomy,this.props.erc20ForwarderClient,this.state.actionProxyContract[this.state.action]);\n    // Biconomy End\n\n    const totalBalance = this.state.action === 'deposit' ? this.props.tokenBalance : this.props.redeemableBalance;\n    const migrateText = this.state.migrationEnabled && this.props.tokenConfig.migration.message !== undefined ? this.props.tokenConfig.migration.message : null;\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token,'enabled']);\n\n    const depositCurve = curveTokenEnabled && this.state.depositCurveEnabled && this.state.action === 'deposit';\n\n    const showDepositOptions = this.state.action === 'deposit' && !this.state.contractPaused && (curveTokenEnabled || this.state.tokenApproved);\n\n    const showDepositCurve = showDepositOptions && curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canDepositCurve && this.state.action === 'deposit';\n    const showRedeemCurve = curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canRedeemCurve && this.state.action === 'redeem';\n\n    const showCurveSlippage = depositCurve && this.state.depositCurveSlippage && this.state.depositCurveBalance && !this.state.buttonDisabled;\n\n    const showRebalanceOption = false && this.state.canDeposit && skipMintCheckboxEnabled && this.state.action === 'deposit';\n    const showAdvancedDepositOptions = showDepositCurve || showRebalanceOption;\n\n    const batchDepositInfo = this.functionsUtil.getGlobalConfig(['tools','batchDeposit']);\n    const batchDepositEnabled = batchDepositInfo.enabled && typeof batchDepositInfo.props.availableTokens[this.props.tokenConfig.idle.token] !== 'undefined';\n    const batchDepositDepositEnabled = batchDepositInfo.depositEnabled;\n\n    const showBatchDeposit = !useMetaTx && batchDepositEnabled && batchDepositDepositEnabled && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    const ethWrapperInfo = this.functionsUtil.getGlobalConfig(['tools','ethWrapper']);\n    const ETHWrapperComponent = ethWrapperInfo.subComponent;\n    const showETHWrapper = this.props.selectedToken === 'WETH' && ethWrapperInfo.enabled && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    const canPerformAction = /*!depositCurve && !this.state.redeemCurveEnabled && */((this.state.action === 'deposit' && this.state.canDeposit) || (this.state.action === 'redeem' && this.state.canRedeem) || redeemGovTokens) && (!this.state.showETHWrapperEnabled || this.state.action === 'redeem');\n    const showActionFlow = !redeemGovTokens && canPerformAction;\n\n    const showBuyFlow = this.state.componentMounted && (!showDepositCurve || this.state.showBuyFlow) && !this.state.depositCurveEnabled && this.state.tokenApproved && !this.state.contractPaused && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.action === 'deposit' && !this.state.canDeposit && !this.state.showETHWrapperEnabled;\n\n    const _referral = this.getReferralAddress();\n    const showReferral = _referral && this.state.action === 'deposit' && showActionFlow && !showBuyFlow;\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          <Box\n            width={1}\n          >\n            <Text mb={1}>\n              Select your asset:\n            </Text>\n            <AssetSelector\n              {...this.props}\n            />\n          </Box>\n          {\n            viewOnly ? (\n              <IconBox\n                cardProps={{\n                  mt:3\n                }}\n                icon={'Visibility'}\n                text={'You are using Idle in \"Read-Only\" mode.<br />Logout and connect with your wallet to interact.'}\n              />\n            ) : (\n              <Migrate\n                {...this.props}\n                migrateTextBefore={migrateText}\n                migrateText={migrateText !== null ? '' : null}\n                toggleSkipMigration={this.toggleSkipMigration.bind(this)}\n              >\n                {\n                  !this.props.account ? (\n                    <ConnectBox\n                      {...this.props}\n                    />\n                  ) : this.state.componentMounted ? (\n                    this.state.action && (\n                      <Box\n                        width={1}\n                      >\n                        <Flex\n                          mt={2}\n                          flexDirection={'column'}\n                        >\n                          <Text mb={2}>\n                            Choose the action:\n                          </Text>\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'space-between'}\n                          >\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                width:0.48,\n                                onMouseDown:() => {\n                                  this.setAction('deposit');\n                                }\n                              }}\n                              isInteractive={true}\n                              isActive={ this.state.action === 'deposit' }\n                            >\n                              <Flex\n                                my={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <TransactionField\n                                  transaction={{\n                                    action:'deposit'\n                                  }}\n                                  fieldInfo={{\n                                    name:'icon',\n                                    props:{\n                                      mr:3\n                                    }\n                                  }}\n                                />\n                                <Text\n                                  fontSize={3}\n                                  fontWeight={3}\n                                >\n                                  Deposit\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                width:0.48,\n                                onMouseDown:() => {\n                                  this.setAction('redeem');\n                                }\n                              }}\n                              isInteractive={true}\n                              isActive={ this.state.action === 'redeem' }\n                              isDisabled={ !this.state.canRedeem && !this.state.canRedeemCurve }\n                            >\n                              <Flex\n                                my={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <TransactionField\n                                  transaction={{\n                                    action:'redeem'\n                                  }}\n                                  fieldInfo={{\n                                    name:'icon',\n                                    props:{\n                                      mr:3\n                                    }\n                                  }}\n                                />\n                                <Text\n                                  fontSize={3}\n                                  fontWeight={3}\n                                >\n                                  Redeem\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          </Flex>\n                        </Flex>\n                        {\n                          (showRedeemFlow && this.state.unlentBalance) &&\n                            <DashboardCard\n                              cardProps={{\n                                py:2,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={'LocalGasStation'}\n                                />\n                                <Text\n                                  px={2}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Available balance for Cheap Redeem\n                                </Text>\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'center'}\n                                    hoverColor={'copyColor'}\n                                  >\n                                    {this.state.unlentBalance.toFixed(4)} {this.props.selectedToken}\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.functionsUtil.getGlobalConfig(['messages','cheapRedeem'])}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              </Flex>\n                            </DashboardCard>\n                        }\n                        {\n                          showAdvancedRedeemOptions ? (\n                            <DashboardCard\n                              cardProps={{\n                                pt:2,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                                pb:this.state.showAdvancedOptions ? 3 : 2,\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <Link\n                                  ml={1}\n                                  mainColor={'primary'}\n                                  hoverColor={'primary'}\n                                  onClick={this.toggleShowAdvancedOptions}\n                                >\n                                  { this.state.showAdvancedOptions ? 'Hide' : 'Show' } advanced options\n                                </Link>\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={this.state.showAdvancedOptions ? 'ArrowDropUp' : 'ArrowDropDown'}\n                                />\n                              </Flex>\n                              {\n                                this.state.showAdvancedOptions &&\n                                  <Flex\n                                    mt={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      redeemGovTokenEnabled && \n                                        <Flex\n                                          alignItems={'center'}\n                                          justifyContent={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            checked={this.state.redeemGovTokens}\n                                            label={`Redeem governance tokens only`}\n                                            onChange={ e => this.toggleRedeemGovTokens(e.target.checked) }\n                                          />\n                                          <Link\n                                            color={'link'}\n                                            hoverColor={'link'}\n                                            onClick={ e => this.props.openTooltipModal('Redeem governance tokens',`This feature allows you to redeem just the amount of governance tokens accrued${ this.props.govTokensBalance && this.props.govTokensBalance.gt(0) ? ` (~${this.props.govTokensBalance.toFixed(2)}$)` : null } without redeeming the underlying token.`) }\n                                          >\n                                            (read more)\n                                          </Link>\n                                        </Flex>\n                                    }\n                                    {\n                                      redeemSkipGovEnabled && \n                                        <Flex\n                                          alignItems={'center'}\n                                          flexDirection={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            checked={this.state.redeemSkipGov}\n                                            label={`Redeem without governance tokens`}\n                                            onChange={ e => this.toggleRedeemSkipGov(e.target.checked) }\n                                          />\n                                          <Icon\n                                            mr={1}\n                                            size={'1.2em'}\n                                            name={'Warning'}\n                                            color={'#ffe000'}\n                                          />\n                                          <Link\n                                            color={'link'}\n                                            hoverColor={'link'}\n                                            onClick={ e => this.props.openTooltipModal('Redeem without governance tokens',this.functionsUtil.getGlobalConfig(['messages','redeemSkipGov'])) }\n                                          >\n                                            (read more)\n                                          </Link>\n                                        </Flex>\n                                    }\n                                  </Flex>\n                              }\n                            </DashboardCard>\n                          ) :  showAdvancedDepositOptions ? (\n                            <DashboardCard\n                              cardProps={{\n                                pt:2,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                                pb:this.state.showAdvancedOptions ? 3 : 2,\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <Link\n                                  ml={1}\n                                  mainColor={'primary'}\n                                  hoverColor={'primary'}\n                                  onClick={this.toggleShowAdvancedOptions}\n                                >\n                                  { this.state.showAdvancedOptions ? 'Hide' : 'Show' } advanced options\n                                </Link>\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={this.state.showAdvancedOptions ? 'ArrowDropUp' : 'ArrowDropDown'}\n                                />\n                              </Flex>\n                              {\n                                this.state.showAdvancedOptions &&\n                                  <Flex\n                                    mt={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      showDepositCurve && \n                                        <Flex\n                                          alignItems={'center'}\n                                          justifyContent={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            disabled={this.state.directMint}\n                                            label={`Deposit in the Curve Pool`}\n                                            checked={this.state.depositCurveEnabled}\n                                            onChange={ e => this.toggleDepositCurve(e.target.checked) }\n                                          />\n                                          <Link\n                                            mainColor={'primary'}\n                                            hoverColor={'primary'}\n                                            onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                          >\n                                            (read more)\n                                          </Link>\n                                        </Flex>\n                                    }\n                                    {\n                                      showRebalanceOption && \n                                        <Flex\n                                          alignItems={'center'}\n                                          justifyContent={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            label={`Rebalance the pool`}\n                                            checked={this.state.directMint}\n                                            disabled={this.state.depositCurveEnabled}\n                                            onChange={ e => this.toggleSkipMint(e.target.checked) }\n                                          />\n                                          <Tooltip\n                                            placement={'bottom'}\n                                            message={this.functionsUtil.getGlobalConfig(['messages','directMint'])}\n                                          >\n                                            <Icon\n                                              size={'1em'}\n                                              color={'cellTitle'}\n                                              name={\"InfoOutline\"}\n                                            />\n                                          </Tooltip>\n                                        </Flex>\n                                    }\n                                  </Flex>\n                              }\n                            </DashboardCard>\n                          ) : (\n                            <Flex\n                              width={1}\n                              flexDirection={'column'}\n                            >\n                              {\n                                showDepositCurve && (\n                                  <Flex\n                                    width={1}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <DashboardCard\n                                      isRainbow={true}\n                                      cardProps={{\n                                        py:3,\n                                        px:2,\n                                        mt:3,\n                                        display:'flex',\n                                        alignItems:'center',\n                                        flexDirection:'column',\n                                        justifyContent:'center',\n                                      }}\n                                    >\n                                      <Flex\n                                        width={1}\n                                        alignItems={'center'}\n                                        flexDirection={'column'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Image\n                                          height={'1.8em'}\n                                          src={curveConfig.params.image}\n                                        />\n                                        <Text\n                                          mt={2}\n                                          px={2}\n                                          fontSize={1}\n                                          color={'dark-gray'}\n                                          textAlign={'center'}\n                                        >\n                                          Deposit your tokens in the Curve Pool and boost your APY up to {this.state.curveAPY ? this.state.curveAPY.toFixed(2) : '-'}%.\n                                          <Link\n                                            ml={1}\n                                            mainColor={'primary'}\n                                            hoverColor={'primary'}\n                                            onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                          >\n                                            Read More\n                                          </Link>\n                                        </Text>\n                                        <Checkbox\n                                          mt={2}\n                                          required={false}\n                                          label={`Deposit in Curve`}\n                                          checked={this.state.depositCurveEnabled}\n                                          onChange={ e => this.toggleDepositCurve(e.target.checked) }\n                                        />\n                                      </Flex>\n                                    </DashboardCard>\n                                    {\n                                      (!this.state.showBuyFlow && !this.state.depositCurveEnabled && !this.state.canDeposit) &&\n                                        <Link\n                                          textAlign={'center'}\n                                          hoverColor={'primary'}\n                                          onClick={ e => this.setShowBuyFlow(true) }\n                                        >\n                                          I just want to deposit more {this.props.selectedToken}\n                                        </Link>\n                                    }\n                                  </Flex>\n                                )\n                              }\n                              {\n                                showRebalanceOption && (\n                                  <DashboardCard\n                                    cardProps={{\n                                      py:3,\n                                      px:2,\n                                      mt:3,\n                                      display:'flex',\n                                      alignItems:'center',\n                                      flexDirection:'column',\n                                      justifyContent:'center',\n                                    }}\n                                  >\n                                    <Flex\n                                      width={1}\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        color={'cellText'}\n                                        name={'InfoOutline'}\n                                      />\n                                      <Text\n                                        mt={1}\n                                        px={2}\n                                        fontSize={1}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        By checking this flag you can rebalance the pool and help all users gain an additional APR\n                                      </Text>\n                                    </Flex>\n                                    <Checkbox\n                                      mt={2}\n                                      required={false}\n                                      label={`Rebalance the pool`}\n                                      checked={this.state.directMint}\n                                      onChange={ e => this.toggleSkipMint(e.target.checked) }\n                                    />\n                                  </DashboardCard>\n                                )\n                              }\n                              {\n                                redeemGovTokenEnabled && (\n                                  <DashboardCard\n                                    cardProps={{\n                                      py:3,\n                                      px:2,\n                                      mt:3,\n                                      display:'flex',\n                                      alignItems:'center',\n                                      flexDirection:'column',\n                                      justifyContent:'center',\n                                    }}\n                                  >\n                                    <Flex\n                                      width={1}\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        color={'cellText'}\n                                        name={'InfoOutline'}\n                                      />\n                                      <Text\n                                        mt={1}\n                                        px={2}\n                                        fontSize={1}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        By redeeming your {this.props.selectedToken} you will automatically get also the proportional amount of governance tokens accrued{ this.props.govTokensBalance && this.props.govTokensBalance.gt(0) ? ` (~ $${this.props.govTokensBalance.toFixed(2)})` : null }.\n                                      </Text>\n                                    </Flex>\n                                    <Checkbox\n                                      mt={2}\n                                      required={false}\n                                      checked={this.state.redeemGovTokens}\n                                      label={`Redeem governance tokens only`}\n                                      onChange={ e => this.toggleRedeemGovTokens(e.target.checked) }\n                                    />\n                                  </DashboardCard>\n                                )\n                              }\n                            </Flex>\n                          )\n                        }\n                        {\n                          redeemSkipGov ? (\n                            <DashboardCard\n                              cardProps={{\n                                mt:2,\n                                mb:2,\n                                py:2,\n                                px:1\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                              >\n                                <Text\n                                  mt={1}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Select the gov tokens you want to give away:\n                                </Text>\n                                <Flex\n                                  mt={2}\n                                  width={1}\n                                  boxShadow={0}\n                                  style={{\n                                    flexWrap:'wrap'\n                                  }}\n                                  alignItems={'center'}\n                                  justifyContent={'center'}\n                                  >\n                                    {\n                                      Object.keys(this.props.govTokensUserBalances).map( token => {\n                                        const balance = this.props.govTokensUserBalances[token];\n                                        const isActive = this.state.redeemSkipGovTokens.includes(token);\n                                        const tokenConfig = this.functionsUtil.getGlobalConfig(['govTokens',token]);\n                                        return (\n                                          <Flex\n                                            p={2}\n                                            mb={1}\n                                            mx={1}\n                                            width={'auto'}\n                                            style={{\n                                              cursor:'pointer'\n                                            }}\n                                            borderRadius={2}\n                                            flexDirection={'row'}\n                                            key={`skipGovToken_${token}`}\n                                            justifyContent={'flex-start'}\n                                            backgroundColor={isActive ? '#2a4b78' : 'cardBgHover'}\n                                            onClick={ e => this.setRedeemSkipGovTokens(token,!this.state.redeemSkipGovTokens.includes(token)) }\n                                          >\n                                            <Checkbox\n                                              m={0}\n                                              required={false}\n                                              checked={isActive}\n                                              onChange={ e => this.setRedeemSkipGovTokens(token,e.target.checked) }\n                                            />\n                                            <AssetField\n                                              token={token}\n                                              tokenConfig={tokenConfig}\n                                              fieldInfo={{\n                                                name:'icon',\n                                                props:{\n                                                  mr:1,\n                                                  width:['1.4em','1.6em'],\n                                                  height:['1.4em','1.6em']\n                                                }\n                                              }}\n                                            />\n                                            <SmartNumber\n                                              ml={1}\n                                              fontSize={[0,2]}\n                                              fontWeight={500}\n                                              maxPrecision={4}\n                                              color={'cellText'}\n                                              number={balance.toString()}\n                                            />\n                                          </Flex>\n                                        );\n                                    })\n                                  }\n                                </Flex>\n                              </Flex>\n                            </DashboardCard>\n                          ) : redeemSkipGovNoTokens && (\n                            <DashboardCard\n                              cardProps={{\n                                p:2,\n                                my:2\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'MoneyOff'}\n                                  color={'cellText'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  You don't have any gov tokens to give away.\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          redeemSkipGov && this.functionsUtil.BNify(this.state.skippedGovTokensBalance).gt(0) ? (\n                            <DashboardCard\n                              cardProps={{\n                                p:2,\n                                my:2\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'Warning'}\n                                  color={'#ffe000'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={1}\n                                  color={'red'}\n                                  textAlign={'center'}\n                                >\n                                  You are giving away {this.functionsUtil.formatMoney(this.state.skippedGovTokensBalance)}$ worth of governance tokens!\n                                </Text>\n                                {\n                                  this.state.skipGovTokensGasSave && this.state.skipGovTokensGasSave.gte(0.0001) && (\n                                    <Text\n                                      mt={1}\n                                      fontSize={1}\n                                      color={'#00b84a'}\n                                      textAlign={'center'}\n                                    >\n                                      This will save you {this.state.skipGovTokensGasSave.toFixed(4)} ETH of gas (~{this.state.skipGovTokensGasSaveUSD.toFixed(2)}$)\n                                    </Text>\n                                  )\n                                }\n                                <Text\n                                  mt={1}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  To proceed with the redeem please give your authorization by checking the following flag:\n                                </Text>\n                                <Checkbox\n                                  my={1}\n                                  required={false}\n                                  checked={this.state.agreeSkipGovTokens}\n                                  label={`I agree to give away my governance tokens`}\n                                  onChange={ e => this.toggleAgreeSkipGovTokens(e.target.checked) }\n                                />\n                              </Flex>\n                            </DashboardCard>\n                          ) : redeemSkipGov && this.state.redeemSkipGovTokens.length>0 && (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                my:2\n                              }}\n                            >\n                              <FlexLoader\n                                flexProps={{\n                                  flexDirection:'row'\n                                }}\n                                loaderProps={{\n                                  size:'25px',\n                                }}\n                                textProps={{\n                                  ml:2\n                                }}\n                                text={'Loading estimated gas usage...'}\n                              />\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          showReferral && (\n                            <DashboardCard\n                              cardProps={{\n                                py:3,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'Share'}\n                                  color={'cellText'}\n                                />\n                                <Text\n                                  mt={1}\n                                  px={2}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  You are depositing with the following referral address:\n                                </Text>\n                                <Text\n                                  mt={1}\n                                  px={2}\n                                  fontSize={1}\n                                  fontWeight={500}\n                                  textAlign={'center'}\n                                  color={this.props.theme.colors.transactions.status.completed}\n                                >\n                                  {_referral}\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          (metaTransactionsAvailable && !showBuyFlow && !this.state.contractPaused) ? (\n                            <DashboardCard\n                              cardProps={{\n                                py:3,\n                                px:2,\n                                my:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              {\n                                this.state.metaTransactionsEnabled && this.state.txError[this.state.action] && this.state.actionProxyContract[this.state.action].approved ? (\n                                  <Flex\n                                    width={1}\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <Icon\n                                      size={'1.8em'}\n                                      name={'Warning'}\n                                      color={'cellText'}\n                                    />\n                                    <Text\n                                      mt={1}\n                                      fontSize={1}\n                                      color={'cellText'}\n                                      textAlign={'center'}\n                                    >\n                                      Seems like you are having some trouble with Meta-Transactions... Disable them by unchecking the box below and try again!\n                                    </Text>\n                                  </Flex>\n                                ) : this.functionsUtil.getWalletProvider() === 'WalletConnect' && this.state.metaTransactionsEnabled ? (\n                                  <Flex\n                                    width={1}\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <Icon\n                                      size={'1.8em'}\n                                      name={'Warning'}\n                                      color={'cellText'}\n                                    />\n                                    <Text\n                                      mt={1}\n                                      fontSize={1}\n                                      color={'cellText'}\n                                      textAlign={'center'}\n                                    >\n                                      Please disable Meta-Transactions if you are using Argent Wallet to avoid failed transactions!\n                                    </Text>\n                                  </Flex>\n                                ) : (\n                                  <Text\n                                    mt={1}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    Meta-Transactions are {this.state.metaTransactionsEnabled ? 'enabled' : 'disabled'} for {this.state.action}s!<br />\n                                    {\n                                      this.state.metaTransactionsEnabled && !this.state.actionProxyContract[this.state.action].approved && `Please either enable the Smart-Contract to enjoy gas-less ${this.state.action} or just disable meta-tx.`\n                                    }\n                                  </Text>\n                                )\n                              }\n                              <Checkbox\n                                mt={2}\n                                required={false}\n                                checked={this.state.metaTransactionsEnabled}\n                                onChange={ e => this.toggleMetaTransactionsEnabled(e.target.checked) }\n                                label={`${this.functionsUtil.capitalize(this.state.action)} with Meta-Transaction`}\n                              />\n                            </DashboardCard>\n                          ) : (erc20ForwarderEnabled && !showBuyFlow && !this.state.contractPaused) && (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                my:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              <Text\n                                mb={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                How do you prefer to pay gas fees for this {this.state.action}?\n                              </Text>\n                              <Flex\n                                width={[1,0.7]}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'space-between'}\n                              >\n                                <CardIconButton\n                                  {...this.props}\n                                  cardProps={{\n                                    py:2,\n                                    px:[2,3],\n                                    width:0.48\n                                  }}\n                                  textProps={{\n                                    ml:[1,2],\n                                  }}\n                                  text={this.props.selectedToken}\n                                  isActive={this.state.erc20ForwarderEnabled}\n                                  imageProps={{\n                                    height:this.props.isMobile ? '1.4em' : '1.8em',\n                                    width:this.props.isMobile ? '1.4em' : '1.8em'\n                                  }}\n                                  image={`/images/tokens/${this.props.selectedToken}.svg`}\n                                  handleClick={e => this.toggleErc20ForwarderEnabled(true)}\n                                />\n                                <CardIconButton\n                                  {...this.props}\n                                  cardProps={{\n                                    py:2,\n                                    px:[2,3],\n                                    width:0.48\n                                  }}\n                                  textProps={{\n                                    ml:[1,2],\n                                  }}\n                                  text={'ETH'}\n                                  isActive={!this.state.erc20ForwarderEnabled}\n                                  imageProps={{\n                                    height:this.props.isMobile ? '1.4em' : '1.8em',\n                                    width:this.props.isMobile ? '1.4em' : '1.8em'\n                                  }}\n                                  image={`/images/tokens/ETH.svg`}\n                                  handleClick={e => this.toggleErc20ForwarderEnabled(false)}\n                                />\n                              </Flex>\n                              {\n                                this.state.txError[this.state.action] && (\n                                  <Text\n                                    mt={2}\n                                    fontSize={1}\n                                    color={'red'}\n                                    textAlign={'center'}\n                                  >\n                                    The meta-transaction cannot be executed, select ETH and try again.\n                                  </Text>\n                                )\n                              }\n                              <Text\n                                mt={2}\n                                fontSize={'11px'}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                Powered by <ExtLink fontSize={'11px'} href={'https://biconomy.io'}>Biconomy</ExtLink>\n                              </Text>\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          (this.state.minAmountForMintReached && this.state.action === 'deposit') && (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                mt:3\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={'InfoOutline'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  By depositing more than {this.functionsUtil.formatMoney(this.state.minAmountForMint)}$ { this.state.showPoolPerc ? `(${this.state.minAmountForMint.div(this.state.totalAUM).times(100).toFixed(0)}% of the pool)` : null } the pool will be automatically rebalanced, gas cost may be higher.\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          showBatchDeposit ? (\n                            <Flex\n                              p={2}\n                              mt={3}\n                              width={1}\n                              borderRadius={2}\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              justifyContent={'center'}\n                              backgroundColor={'DashboardCard'}\n                              border={`1px solid ${this.props.theme.colors.primary}`}\n                            >\n                              <Link\n                                textAlign={'center'}\n                                hoverColor={'primary'}\n                                href={`/#/dashboard/tools/${batchDepositInfo.route}/${this.props.tokenConfig.idle.token}`}\n                              >\n                                Gas fees too high? Save gas with our Batch Deposit!\n                              </Link>\n                              <Icon\n                                ml={1}\n                                size={'1em'}\n                                color={'primary'}\n                                name={'LocalGasStation'}\n                              />\n                            </Flex>\n                          ) : showETHWrapper && (\n                            <Flex\n                              width={1}\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <DashboardCard\n                                cardProps={{\n                                  py:3,\n                                  px:2,\n                                  mt:3,\n                                  display:'flex',\n                                  alignItems:'center',\n                                  flexDirection:'column',\n                                  justifyContent:'center',\n                                  pb:this.state.showAdvancedOptions ? 3 : 2,\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  justifyContent={'row'}\n                                >\n                                  <Checkbox\n                                    required={false}\n                                    checked={this.state.showETHWrapperEnabled}\n                                    label={`Convert your ETH to WETH`}\n                                    onChange={ e => this.toggleShowETHWrapper(e.target.checked) }\n                                  />\n                                </Flex>\n                              </DashboardCard>\n                              {\n                                this.state.showETHWrapperEnabled && \n                                  <ETHWrapperComponent\n                                    {...this.props}\n                                    action={'wrap'}\n                                    fullWidth={true}\n                                    toolProps={ethWrapperInfo.props}\n                                  />\n                              }\n                            </Flex>\n                          )\n                        }\n                        {\n                          showRedeemCurve && this.state.canRedeem && (\n                            <Flex\n                              width={1}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <DashboardCard\n                                isRainbow={true}\n                                cardProps={{\n                                  py:3,\n                                  px:2,\n                                  mt:3,\n                                  display:'flex',\n                                  alignItems:'center',\n                                  flexDirection:'column',\n                                  justifyContent:'center',\n                                }}\n                              >\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Image\n                                    height={'1.8em'}\n                                    src={curveConfig.params.image}\n                                  />\n                                  <Text\n                                    mt={2}\n                                    px={2}\n                                    fontSize={1}\n                                    color={'dark-gray'}\n                                    textAlign={'center'}\n                                  >\n                                    Redeem your tokens from the Curve Pool.\n                                    <Link\n                                      ml={1}\n                                      mainColor={'primary'}\n                                      hoverColor={'primary'}\n                                      onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                    >\n                                      Read More\n                                    </Link>\n                                  </Text>\n                                  {\n                                    this.state.canRedeem &&\n                                      <Checkbox\n                                        mt={2}\n                                        required={false}\n                                        label={`Redeem from Curve`}\n                                        checked={this.state.redeemCurveEnabled}\n                                        onChange={ e => this.toggleRedeemCurve(e.target.checked) }\n                                      />\n                                  }\n                                </Flex>\n                              </DashboardCard>\n                              {\n                                this.canRedeem &&\n                                  <Link\n                                    textAlign={'center'}\n                                    hoverColor={'primary'}\n                                    onClick={ e => this.setShowRedeemFlow(true) }\n                                  >\n                                    I just want to redeem my {this.props.selectedToken}\n                                  </Link>\n                              }\n                            </Flex>\n                          )\n                        }\n                        {\n                          (this.state.contractPaused && this.state.action === 'deposit') ? (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                mt:3\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'Warning'}\n                                  color={'cellText'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Deposits for {this.props.selectedToken} are temporarily unavailable due to Smart-Contract maintenance. Redeems are always available.\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          ) : (!this.state.tokenApproved && this.state.action === 'deposit' && !this.state.showETHWrapperEnabled) ? (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                mt:3\n                              }}\n                            >\n                              {\n                                this.state.processing['approve'] && this.state.processing['approve'].loading ? (\n                                  <Flex\n                                    flexDirection={'column'}\n                                  >\n                                    <TxProgressBar\n                                      {...this.props}\n                                      waitText={`Approve estimated in`}\n                                      endMessage={`Finalizing approve request...`}\n                                      hash={this.state.processing['approve'].txHash}\n                                      cancelTransaction={this.cancelTransaction.bind(this)}\n                                    />\n                                  </Flex>\n                                ) : (\n                                  <Flex\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                  >\n                                    <Icon\n                                      size={'1.8em'}\n                                      name={'LockOpen'}\n                                      color={'cellText'}\n                                    />\n                                    <Text\n                                      mt={3}\n                                      fontSize={2}\n                                      color={'cellText'}\n                                      textAlign={'center'}\n                                    >\n                                      {\n                                        this.state.depositCurveEnabled ? \n                                          `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.`\n                                        : useMetaTx ?\n                                          `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle using Meta-Transaction you need to approve our Smart-Contract first.`\n                                        :\n                                          `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle you need to approve our Smart-Contract first.`\n                                      }\n                                    </Text>\n                                    <RoundButton\n                                      buttonProps={{\n                                        mt:3,\n                                        width:[1,1/2]\n                                      }}\n                                      handleClick={this.approveToken.bind(this)}\n                                    >\n                                      Approve\n                                    </RoundButton>\n                                  </Flex>\n                                )\n                              }\n                            </DashboardCard>\n                          ) : (!showBuyFlow && canPerformAction) && (\n                            !this.state.processing[this.state.action].loading ? (\n                              <Flex\n                                mt={2}\n                                flexDirection={'column'}\n                              >\n                                {\n                                  showActionFlow && (\n                                    <Flex\n                                      mb={3}\n                                      width={1}\n                                      flexDirection={'column'}\n                                    >\n                                      {\n                                        (totalBalance || this.props.tokenFeesPercentage) && (\n                                          <Box\n                                            mb={1}\n                                            width={1}\n                                          >\n                                            {\n                                              this.state.showMaxSlippage && showCurveSlippage && (\n                                                <Box\n                                                  mb={2}\n                                                  width={1}\n                                                >\n                                                  <Flex\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                  >\n                                                    <Text>\n                                                      Choose max slippage:\n                                                    </Text>\n                                                    <Tooltip\n                                                      placement={'top'}\n                                                      message={`Max additional slippage on top of the one shown below`}\n                                                    >\n                                                      <Icon\n                                                        ml={1}\n                                                        size={'1em'}\n                                                        color={'cellTitle'}\n                                                        name={\"InfoOutline\"}\n                                                      />\n                                                    </Tooltip>\n                                                  </Flex>\n                                                  <Flex\n                                                    mt={2}\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                    justifyContent={'space-between'}\n                                                  >\n                                                    {\n                                                      [0.2,0.5,1,5].map( slippage => (\n                                                        <FastBalanceSelector\n                                                          cardProps={{\n                                                            p:1\n                                                          }}\n                                                          textProps={{\n                                                            fontSize:1\n                                                          }}\n                                                          percentage={slippage}\n                                                          key={`selector_${slippage}`}\n                                                          onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                                          isActive={this.state.maxSlippage === parseFloat(slippage)}\n                                                        />\n                                                      ))\n                                                    }\n                                                  </Flex>\n                                                </Box>\n                                              )\n                                            }\n                                            <Flex\n                                              width={1}\n                                              alignItems={'center'}\n                                              flexDirection={'row'}\n                                              justifyContent={'space-between'}\n                                            >\n                                              {\n                                                showCurveSlippage ? (\n                                                  <Flex\n                                                    width={1}\n                                                    maxWidth={'50%'}\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                  >\n                                                    <Text\n                                                      fontSize={1}\n                                                      fontWeight={3}\n                                                      textAlign={'right'}\n                                                      style={{\n                                                        whiteSpace:'nowrap'\n                                                      }}\n                                                      color={ this.state.depositCurveSlippage.gt(0) ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                                    >\n                                                      {\n                                                        parseFloat(this.state.depositCurveSlippage.times(100).toFixed(2)) === 0 ?\n                                                          'No Slippage'\n                                                        : `${ this.state.depositCurveSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositCurveSlippage.times(100).abs().toFixed(2)}%`\n                                                      }\n                                                    </Text>\n                                                    <Tooltip\n                                                      placement={'top'}\n                                                      message={this.functionsUtil.getGlobalConfig(['messages','curveBonusSlippage'])}\n                                                    >\n                                                      <Icon\n                                                        ml={1}\n                                                        size={'1em'}\n                                                        color={'cellTitle'}\n                                                        name={\"InfoOutline\"}\n                                                      />\n                                                    </Tooltip>\n                                                    <Link\n                                                      ml={1}\n                                                      color={'copyColor'}\n                                                      hoverColor={'primary'}\n                                                      onClick={this.showMaxSlippage}\n                                                    >\n                                                      change\n                                                    </Link>\n                                                  </Flex>\n                                                ) : this.props.tokenFeesPercentage && (\n                                                  <Flex\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                  >\n                                                    <Text\n                                                      fontSize={1}\n                                                      fontWeight={3}\n                                                      color={'dark-gray'}\n                                                      textAlign={'right'}\n                                                      hoverColor={'copyColor'}\n                                                    >\n                                                      Performance fee: {this.props.tokenFeesPercentage.times(100).toFixed(2)}%\n                                                    </Text>\n                                                    <Tooltip\n                                                      placement={'top'}\n                                                      message={this.functionsUtil.getGlobalConfig(['messages','performanceFee'])}\n                                                    >\n                                                      <Icon\n                                                        ml={1}\n                                                        size={'1em'}\n                                                        color={'cellTitle'}\n                                                        name={\"InfoOutline\"}\n                                                      />\n                                                    </Tooltip>\n                                                  </Flex>\n                                                )\n                                              }\n                                              {\n                                                totalBalance && (\n                                                  <Link\n                                                    fontSize={1}\n                                                    fontWeight={3}\n                                                    color={'dark-gray'}\n                                                    textAlign={'right'}\n                                                    hoverColor={'copyColor'}\n                                                    onClick={ (e) => this.setFastBalanceSelector(100) }\n                                                  >\n                                                    {totalBalance.toFixed(6)} {this.props.selectedToken}\n                                                  </Link>\n                                                )\n                                              }\n                                            </Flex>\n                                          </Box>\n                                        )\n                                      }\n                                      <Input\n                                        min={0}\n                                        type={\"number\"}\n                                        required={true}\n                                        height={'3.4em'}\n                                        borderRadius={2}\n                                        fontWeight={500}\n                                        borderColor={'cardBorder'}\n                                        backgroundColor={'cardBg'}\n                                        boxShadow={'none !important'}\n                                        placeholder={`Insert amount`}\n                                        onChange={this.changeInputValue.bind(this)}\n                                        border={`1px solid ${this.props.theme.colors.divider}`}\n                                        value={this.state.inputValue[this.state.action] !== null ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]).toFixed() : ''}\n                                      />\n                                      <Flex\n                                        mt={2}\n                                        alignItems={'center'}\n                                        flexDirection={'row'}\n                                        justifyContent={'space-between'}\n                                      >\n                                        {\n                                          [25,50,75,100].map( percentage => (\n                                            <FastBalanceSelector\n                                              percentage={percentage}\n                                              key={`selector_${percentage}`}\n                                              onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                              isActive={this.state.fastBalanceSelector[this.state.action] === parseInt(percentage)}\n                                            />\n                                          ))\n                                        }\n                                      </Flex>\n                                    </Flex>\n                                  )\n                                }\n                                {\n                                  canPerformAction && (\n                                    <Flex\n                                      justifyContent={'center'}\n                                      mt={ redeemGovTokens ? 2 : 0 }\n                                    >\n                                      <RoundButton\n                                        buttonProps={{\n                                          width:'auto',\n                                          minWidth:[1,1/2],\n                                          style:{\n                                            textTransform:'capitalize'\n                                          },\n                                          disabled:this.state.buttonDisabled\n                                        }}\n                                        handleClick={this.state.buttonDisabled ? null : this.executeAction.bind(this) }\n                                      >\n                                        {this.state.action}{ redeemGovTokens ? ' Gov Tokens' : '' /*(depositCurve ? ' in Curve' : '')*/ }\n                                      </RoundButton>\n                                    </Flex>\n                                  )\n                                }\n                              </Flex>\n                            ) : this.state.loadingErc20ForwarderTx ? (\n                              <Flex\n                                mt={3}\n                                flexDirection={'column'}\n                              >\n                                <FlexLoader\n                                  flexProps={{\n                                    flexDirection:'row'\n                                  }}\n                                  loaderProps={{\n                                    size:'25px',\n                                  }}\n                                  textProps={{\n                                    ml:2\n                                  }}\n                                  text={ this.state.erc20ForwarderTx ? ( this.state.signedParameters ? 'Please Sign the Transaction...' : 'Please Sign the Permit...' ) : 'Calculating transaction fees...'}\n                                />\n                              </Flex>\n                            ) : this.state.erc20ForwarderTx ? (\n                              <DashboardCard\n                                cardProps={{\n                                  p:3,\n                                  mt:3,\n                                  display:'flex',\n                                  alignItems:'center',\n                                  flexDirection:'column',\n                                  justifyContent:'center',\n                                }}\n                              >\n                                <Text\n                                  mb={2}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  The required fee to perform the {this.state.action} is <strong>{this.state.erc20ForwarderTx.cost} {this.props.selectedToken}</strong>\n                                </Text>\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <DashboardCard\n                                    cardProps={{\n                                      mx:2,\n                                      py:2,\n                                      px:[2,3],\n                                      width:0.40,\n                                      onMouseDown:() => {\n                                        this.executeAction()\n                                      }\n                                    }}\n                                    isInteractive={true}\n                                  >\n                                    <Flex\n                                      my={1}\n                                      alignItems={'center'}\n                                      flexDirection={'row'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Flex\n                                        mr={2}\n                                        alignItems={'center'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Icon\n                                          align={'center'}\n                                          color={'#00b84a'}\n                                          name={'CheckCircle'}\n                                          size={this.props.isMobile ? '1em' : '1.8em'}\n                                        />\n                                      </Flex>\n                                      <Text\n                                        fontWeight={3}\n                                        fontSize={[2,3]}\n                                      >\n                                        Confirm\n                                      </Text>\n                                    </Flex>\n                                  </DashboardCard>\n                                  <DashboardCard\n                                    cardProps={{\n                                      mx:2,\n                                      py:2,\n                                      px:[2,3],\n                                      width:0.40,\n                                      onMouseDown:() => {\n                                        this.cancelTransaction();\n                                      }\n                                    }}\n                                    isInteractive={true}\n                                  >\n                                    <Flex\n                                      my={1}\n                                      alignItems={'center'}\n                                      flexDirection={'row'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Flex\n                                        mr={2}\n                                        alignItems={'center'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Icon\n                                          name={'Cancel'}\n                                          align={'center'}\n                                          color={'#e13636'}\n                                          size={this.props.isMobile ? '1em' : '1.8em'}\n                                        />\n                                      </Flex>\n                                      <Text\n                                        fontWeight={3}\n                                        fontSize={[2,3]}\n                                      >\n                                        Decline\n                                      </Text>\n                                    </Flex>\n                                  </DashboardCard>\n                                </Flex>\n                              </DashboardCard>\n                            ) : (\n                              <Flex\n                                mt={3}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <TxProgressBar\n                                  {...this.props}\n                                  cancelTransaction={this.cancelTransaction.bind(this)}\n                                  hash={this.state.processing[this.state.action].txHash}\n                                  endMessage={`Finalizing ${this.state.action} request...`}\n                                  waitText={`${this.functionsUtil.capitalize(this.state.action)} estimated in`}\n                                />\n                              </Flex>\n                            )\n                          )\n                        }\n                      </Box>\n                    )\n                  ) : (\n                    <Flex\n                      mt={4}\n                      flexDirection={'column'}\n                    >\n                      <FlexLoader\n                        flexProps={{\n                          flexDirection:'row'\n                        }}\n                        loaderProps={{\n                          size:'30px'\n                        }}\n                        textProps={{\n                          ml:2\n                        }}\n                        text={'Loading asset info...'}\n                      />\n                    </Flex>\n                  )\n                }\n              </Migrate>\n            )\n          }\n        </Flex>\n        {\n          /*\n          showDepositCurve && this.state.depositCurveEnabled ? (\n            <CurveDeposit\n              {...this.props}\n            />\n          ) :\n          */\n          showRedeemCurve && this.state.redeemCurveEnabled && (\n            <Box\n              mt={3}\n              width={1}\n            >\n              <CurveRedeem\n                {...this.props}\n              />\n            </Box>\n          )\n        }\n        {\n          showBuyFlow &&\n            <Flex\n              mt={3}\n              width={[1,0.5]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <BuyModal\n                {...this.props}\n                showInline={true}\n                availableMethods={[]}\n                buyToken={this.props.selectedToken}\n              />\n            </Flex>\n        }\n\n        <ShareModal\n          confettiEnabled={true}\n          icon={`images/medal.svg`}\n          title={`Congratulations!`}\n          account={this.props.account}\n          closeModal={this.resetModal}\n          tokenName={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'share'}\n          text={`You have successfully deposited in Idle!<br />Enjoy <strong>${this.state.tokenAPY}% APY</strong> on your <strong>${this.props.selectedToken}</strong>!`}\n          tweet={`I'm earning ${this.state.tokenAPY}% APY on my ${this.props.selectedToken} with @idlefinance! Go to ${this.functionsUtil.getGlobalConfig(['baseURL'])} and start earning now from your idle tokens!`}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default DepositRedeem;\n","import theme from '../theme';\nimport { Bar } from '@nivo/bar';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Text, Input, Icon, Tooltip } from \"rimble-ui\";\n\nclass EstimatedEarnings extends Component {\n\n  state = {\n    chartData:null,\n    chartProps:null,\n    inputValue:1000,\n    maxInputValue:999999999999999\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    this.loadChart();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged){\n      this.loadChart();\n    }\n  }\n\n  async loadChart(){\n\n    const tokenApy = await this.functionsUtil.getTokenApy(this.props.tokenConfig);\n\n    if (!tokenApy){\n      return false;\n    }\n\n    const amount = this.functionsUtil.BNify(this.state.inputValue);\n    const earningsYear = amount.times(this.props.tokenApy.div(100));\n\n    const amountMonth = parseFloat(earningsYear.div(12));\n    const amount3Months = parseFloat(earningsYear.div(4));\n    const amount6Months = parseFloat(earningsYear.div(2));\n    const amountYear = parseFloat(earningsYear.div(1));\n\n    const chartData = [\n      {\n        perc:1/12,\n        label:'MONTH',\n        value:amountMonth,\n        month:amountMonth,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        monthColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:3/12,\n        label:'3 MONTHS',\n        value:amount3Months,\n        month3:amount3Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month3Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:6/12,\n        label:'6 MONTHS',\n        value:amount6Months,\n        month6:amount6Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month6Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:1,\n        label:'YEAR',\n        year:amountYear,\n        value:amountYear,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        yearColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      }\n    ];\n\n    let labelTextColorModifiers = this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'chart','labelTextColorModifiers']);\n\n    const maxGridLines = 4;\n    const gridYStep = amountYear/maxGridLines;\n    const gridYValues = [0];\n    for (let i=1;i<=maxGridLines;i++){\n      const gridYValue = i*gridYStep;\n      gridYValues.push(gridYValue);\n    }\n\n    const chartProps = {\n      padding: 0.2,\n      animate: false,\n      indexBy: 'label',\n      // enableLabel: false,\n      labelSkipWidth: 16,\n      labelSkipHeight: 16,\n      keys: ['month','month3','month6','year'],\n      colors: ({ id, data }) => data[`${id}Color`],\n      label: d => this.functionsUtil.abbreviateNumber(d.value,2,4)+' '+this.props.selectedToken,\n      labelTextColor: labelTextColorModifiers ? { from: 'color', modifiers: [ labelTextColorModifiers ] } : null,\n      isInteractive:false,\n      minValue:0,\n      gridYValues,\n      // maxValue:amountYear,\n      axisLeft:{\n        format: v => this.functionsUtil.abbreviateNumber(v,1,3),\n        tickValues:gridYValues,\n        orient: 'left',\n        tickSize: 0,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendPosition: 'middle'\n      },\n      axisBottom:{\n        legend: '',\n        tickSize:0,\n        tickPadding: 15,\n        orient: 'bottom',\n      },\n      theme:{\n        labels:{\n          text:{\n            fontSize:15,\n            fontWeight:600,\n            fill:theme.colors.counter,\n            fontFamily: theme.fonts.sansSerif\n          }\n        },\n        axis: {\n          ticks: {\n            text: {\n              fontSize:14,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '9 5'\n          }\n        },\n      },\n      margin: this.props.isMobile ? { top: 0, right: 0, bottom: 30, left: 0 } : { top: 10, right: 0, bottom: 50, left: 65 }\n    }\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  changeInputValue(e){\n    let inputValue = e.target.value.length && !isNaN(e.target.value) ? Math.min(this.state.maxInputValue,parseFloat(e.target.value)) : 0;\n    inputValue = this.functionsUtil.BNify(inputValue);\n    this.setState({\n      inputValue\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const showAPYDisclaimer = idleTokenEnabled && this.functionsUtil.getGlobalConfig(['govTokens','IDLE','showAPR']);\n\n    return (\n      <DashboardCard\n        cardProps={{\n          p:[3,4]\n        }}\n      >\n        <Flex\n          width={1}\n          flexDirection={['column','row']}\n        >\n          <Flex\n            width={[1,0.3]}\n            flexDirection={'column'}\n            justifyContent={'flex-start'}\n          >\n            <Flex\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <AssetField\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n                fieldInfo={{\n                  name:'icon',\n                  props:{\n                    mb:2,\n                    height:'2.5em'\n                  }\n                }}\n              />\n              <Text\n                fontSize={2}\n                color={'cellText'}\n                textAlign={'center'}\n              >\n                Set the amount and see your estimated earnings on time based on the current APY: { this.props.tokenApy ? `${this.props.tokenApy.toFixed(2)}%` : null}\n                {\n                  showAPYDisclaimer && \n                    <Flex\n                      style={{\n                        display:'inline-flex',\n                        verticalAlign:'middle'\n                      }}\n                    >\n                      <Tooltip\n                        placement={'top'}\n                        message={this.functionsUtil.getGlobalConfig(['messages','apyLong'])}\n                      >\n                        <Icon\n                          ml={1}\n                          name={\"Info\"}\n                          size={'1em'}\n                          color={'cellTitle'}\n                        />\n                      </Tooltip>\n                    </Flex>\n                }\n              </Text>\n            </Flex>\n            <Flex\n              mt={3}\n              flexDirection={'column'}\n            >\n              <Input\n                min={0}\n                type={\"number\"}\n                required={true}\n                borderRadius={2}\n                fontWeight={500}\n                textAlign={'center'}\n                height={['3em','3.4em']}\n                borderColor={'cardBorder'}\n                boxShadow={'none !important'}\n                max={this.state.maxInputValue}\n                backgroundColor={'cardBgHover'}\n                onChange={this.changeInputValue.bind(this)}\n                border={`1px solid ${theme.colors.divider}`}\n                placeholder={`Insert ${this.props.selectedToken.toUpperCase()} amount`}\n                value={this.state.inputValue && !isNaN(this.state.inputValue) ? this.state.inputValue : ''}\n              />\n            </Flex>\n            <Flex\n              mt={3}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                buttonProps={{\n                  width:[1,1/2],\n                }}\n                handleClick={this.loadChart.bind(this)}\n              >\n                CALCULATE\n              </RoundButton>\n            </Flex>\n          </Flex>\n          <Flex\n            mt={[3,0]}\n            width={[1,0.7]}\n            id={'estimated-earnings-chart'}\n          >\n            {\n              this.props.isMobile ? (\n                <Flex\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  {\n                    this.state.chartData !== null && this.state.chartData.map((v,index) => (\n                      <Flex\n                        py={2}\n                        my={2}\n                        width={1}\n                        flexDirection={'row'}\n                        key={`earnings_${index}`}\n                      >\n                        <Flex\n                          width={0.35}\n                          alignItems={'center'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            color={'legend'}\n                          >\n                            {v.label}\n                          </Text>\n                        </Flex>\n                        <Flex\n                          width={0.65}\n                          position={'relative'}\n                          alignItems={'center'}\n                          minHeight={['20px','35px']}\n                          justifyContent={'center'}\n                        >\n                          <Flex\n                            zIndex={1}\n                            position={'relative'}\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Text\n                              fontSize={1}\n                              fontWeight={3}\n                              color={'counter'}\n                            >\n                              {this.functionsUtil.abbreviateNumber(v.value,2,4)} {this.props.selectedToken}\n                            </Text>\n                          </Flex>\n                          <Flex\n                            right={0}\n                            width={v.perc}\n                            position={'absolute'}\n                            height={['20px','35px']}\n                            borderRadius={['20px 0 0 20px','35px 0 0 35px']}\n                            style={{background:`linear-gradient(-90deg, rgba(${v.color},0) 0%, rgba(${v.color},1) 100%)`}}\n                          ></Flex>\n                        </Flex>\n                      </Flex>\n                    ))\n                  }\n                </Flex>\n              ) : (\n                <GenericChart\n                  type={Bar}\n                  height={250}\n                  showLoader={true}\n                  {...this.state.chartProps}\n                  data={this.state.chartData}\n                  parentId={'estimated-earnings-chart'}\n                />\n              )\n            }\n          </Flex>\n        </Flex>\n      </DashboardCard>\n    );\n  }\n}\n\nexport default EstimatedEarnings;","import Title from '../Title/Title';\nimport { Box, Flex } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport AssetsList from '../AssetsList/AssetsList';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport FundsOverview from '../FundsOverview/FundsOverview';\nimport DepositRedeem from '../DepositRedeem/DepositRedeem';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport EstimatedEarnings from '../EstimatedEarnings/EstimatedEarnings';\n\nclass AssetPage extends Component {\n\n  state = {\n    tokenApy:{},\n    tokenFees:{},\n    tokenBalance:{},\n    tokenApproved:{},\n    activeModal:null,\n    idleTokenPrice:{},\n    govTokensBalance:{},\n    idleTokenBalance:{},\n    redeemableBalance:{},\n    govTokensDisabled:{},\n    availableGovTokens:{},\n    tokenFeesPercentage:{},\n    componentMounted:false,\n    govTokensUserBalances:{}\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadTokensInfo(){\n    if (this.props.account){\n      const newState = {...this.state};\n      await this.functionsUtil.asyncForEach(Object.keys(this.props.availableTokens),async (token) => {\n        const tokenConfig = this.props.availableTokens[token];\n        const govTokenAvailableTokens = {};\n        govTokenAvailableTokens[token] = tokenConfig;\n\n        const [\n          tokenFeesPercentage,\n          idleTokenPrice,\n          tokenApy,\n          tokenBalance,\n          tokenFees,\n          idleTokenBalance,\n          tokenApproved,\n          govTokensUserBalances,\n          govTokensBalance\n        ] = await Promise.all([\n          this.functionsUtil.getTokenFees(tokenConfig),\n          this.functionsUtil.getIdleTokenPrice(tokenConfig),\n          this.functionsUtil.getTokenApy(this.props.tokenConfig),\n          this.functionsUtil.getTokenBalance(token,this.props.account),\n          this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n          this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n          this.functionsUtil.checkTokenApproved(token,tokenConfig.idle.address,this.props.account),\n          this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,null,null),\n          this.functionsUtil.getGovTokensUserTotalBalance(this.props.account,govTokenAvailableTokens,'DAI',false)\n        ]);\n\n        newState.tokenFees[token] = tokenFees;\n        newState.tokenBalance[token] = tokenBalance;\n        newState.tokenApproved[token] = tokenApproved;\n        newState.idleTokenPrice[token] = idleTokenPrice;\n        newState.idleTokenBalance[token] = idleTokenBalance;\n        newState.govTokensBalance[token] = govTokensBalance;\n        newState.tokenFeesPercentage[token] = tokenFeesPercentage;\n        newState.govTokensUserBalances[token] = govTokensUserBalances;\n        newState.govTokensDisabled[token] = tokenConfig.govTokensDisabled;\n        newState.tokenApy[token] = tokenApy && !tokenApy.isNaN() ? tokenApy : null;\n        newState.redeemableBalance[token] = idleTokenBalance && idleTokenPrice ? idleTokenBalance.times(idleTokenPrice) : this.functionsUtil.BNify(0);\n      });\n\n      newState.availableGovTokens = this.functionsUtil.getTokenGovTokens(this.props.tokenConfig);\n\n      // console.log('govTokensBalance',newState.govTokensBalance);\n      // console.log('availableGovTokens',newState.availableGovTokens);\n      // console.log('govTokensUserBalances',newState.govTokensUserBalances);\n\n      newState.componentMounted = true;\n\n      this.setState(newState);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    const availableTokensChanged = JSON.stringify(prevProps.availableTokens) !== JSON.stringify(this.props.availableTokens);\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n    if (accountChanged || transactionsChanged || availableTokensChanged){\n      // console.log('AssetPage - availableTokensChanged',availableTokensChanged);\n      this.loadTokensInfo();\n    }\n  }\n\n  render() {\n\n    const userHasFunds = this.props.account && this.state.idleTokenBalance[this.props.selectedToken] && this.functionsUtil.BNify(this.state.idleTokenBalance[this.props.selectedToken]).gt(0);\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            <Breadcrumb\n              {...this.props}\n              isMobile={this.props.isMobile}\n              path={[this.props.selectedToken]}\n              handleClick={ e => this.props.goToSection(this.props.selectedStrategy) }\n              text={this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])}\n            />\n          </Flex>\n          <Flex\n            width={0.5}\n            justifyContent={'flex-end'}\n          >\n            <CardIconButton\n              icon={'Add'}\n              {...this.props}\n              text={'Add funds'}\n              handleClick={ e => this.setActiveModal('buy') }\n            />\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Deposit / Redeem\n        </Title>\n        <Flex\n          width={1}\n        >\n          <DepositRedeem\n            {...this.props}\n            tokenFees={this.state.tokenFees[this.props.selectedToken]}\n            tokenBalance={this.state.tokenBalance[this.props.selectedToken]}\n            tokenApproved={this.state.tokenApproved[this.props.selectedToken]}\n            govTokensBalance={this.state.govTokensBalance[this.props.selectedToken]}\n            idleTokenBalance={this.state.idleTokenBalance[this.props.selectedToken]}\n            redeemableBalance={this.state.redeemableBalance[this.props.selectedToken]}\n            tokenFeesPercentage={this.state.tokenFeesPercentage[this.props.selectedToken]}\n            govTokensUserBalances={this.state.govTokensUserBalances[this.props.selectedToken]}\n          />\n        </Flex>\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverview\n                {...this.props}\n                tokenFees={this.state.tokenFees[this.props.selectedToken]}\n              />\n            </Flex>\n        }\n        {\n          userHasFunds && this.props.account && !this.state.govTokensDisabled[this.props.selectedToken] && Object.keys(this.state.availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id={\"yield-farming\"}\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(this.state.availableGovTokens)}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.30,0.15]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    mobile:false,\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.25],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','govTokenRedeemableBalance']),\n                    props:{\n                      width:[0.35,0.30],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                    ]\n                  },\n                  {\n                    title:'DISTRIBUTION',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','userDistributionSpeed']),\n                    props:{\n                      width:[0.35,0.30],\n                    },\n                    fields:[\n                      {\n                        name:'userDistributionSpeed',\n                        props:{\n                          decimals:6\n                        }\n                      }\n                    ]\n                  },\n                  /*\n                  {\n                    title:'APR',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','govTokenApr']),\n                    props:{\n                      width:[0.2,0.17],\n                    },\n                    fields:[\n                      {\n                        name:'apr',\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','tokenPrice']),\n                    mobile:false,\n                    props:{\n                      width: 0.17,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                  */\n                ]}\n                {...this.props}\n                availableTokens={this.state.availableGovTokens}\n              />\n            </Flex>\n        }\n        {\n        this.props.account && this.state.tokenApy[this.props.selectedToken] && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'estimated-earnings-container'}\n          >\n            <Title my={[3,4]}>Estimated earnings</Title>\n            <EstimatedEarnings\n              {...this.props}\n              tokenApy={this.state.tokenApy[this.props.selectedToken]}\n            />\n          </Flex>\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              enabledTokens={[this.props.selectedToken]}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport { Text, Modal, Flex, Link } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass BetaModal extends React.Component {\n\n  state = {};\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    this.functionsUtil.setLocalStorage('betaApproved',true);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','650px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            pt={3}\n            iconHeight={'40px'}\n            title={'Beta Version'}\n            icon={'images/warning.svg'}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                fontSize={2}\n                textAlign={'left'}\n                color={'dark-gray'}\n              >\n                You're about to enter Idle Finance Beta Dashboard – this is the place where several un-audited and risky features are being tested!<br />Please use at your own risk, or visit the official website at <Link fontSize={2} mainColor={'primary'} hoverColor={'primary'} href={this.functionsUtil.getGlobalConfig(['baseURL'])}>{this.functionsUtil.getGlobalConfig(['baseURL'])}</Link>.\n              </Text>\n            </Flex>\n            <Flex\n              my={3}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                handleClick={this.closeModal}\n                buttonProps={{\n                  width:['100%','40%']\n                }}\n              >\n                Continue Anyway\n              </RoundButton>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default BetaModal;","import React, { Component } from 'react';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Box, Text, Icon, Tooltip, Link, Input } from \"rimble-ui\";\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\n\nclass CurveDeposit extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    depositSlippage:null,\n    redeemableBalance:null,\n    migrationContract:null,\n    curveTokensBalance:null,\n    migrationSucceeded:false,\n    fastBalanceSelector:null,\n    migrationContractApproved:false,\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    await this.initToken();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const idleTokenBalanceChanged = prevProps.idleTokenBalance !== this.props.idleTokenBalance;\n    if (accountChanged || idleTokenBalanceChanged){\n      await this.initToken();\n    }\n    \n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const inputValueChanged = this.state.inputValue !== prevState.inputValue;\n    if (inputValueChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  setInputValue = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    const inputValue = this.props.idleTokenBalance ? this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage) : null;\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    const buttonDisabled = !amount || amount.gt(this.state.idleTokenBalance);\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  approve = async () => {\n    const migrationContract = this.state.migrationContract;\n    if (migrationContract){\n\n      // Check if the migration contract is approved\n      const migrationContractApproved = await this.checkMigrationContractApproved();\n\n      if (!migrationContractApproved){\n\n        const callbackApprove = (tx,error) => {\n          // Send Google Analytics event\n          const eventData = {\n            eventAction: 'approve',\n            eventCategory: 'CurveDeposit',\n            eventLabel: tx ? tx.status : null\n          };\n\n          const txSucceeded = tx && tx.status === 'success';\n\n          // console.log('callbackApprove',tx,error);\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            migrationContractApproved: txSucceeded, // True\n            processing: {\n              ...prevState.processing,\n              txHash:null,\n              loading:false\n            }\n          }));\n\n          if (typeof this.props.callbackApprove === 'function' && txSucceeded){\n            this.props.callbackApprove(tx);\n          }\n\n          this.checkMigration();\n        };\n\n        const callbackReceiptApprove = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              txHash\n            }\n          }));\n        };\n\n        this.functionsUtil.enableERC20(this.props.selectedToken,migrationContract.address,callbackApprove,callbackReceiptApprove);\n\n        this.setState((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            txHash:null,\n            loading:true\n          },\n          migrationContractApproved:false\n        }));\n      } else {\n        this.setState({\n          migrationContractApproved:true\n        });\n      }\n    }\n  }\n\n  deposit = async () => {\n\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    if (!inputValue){\n      return false;\n    }\n\n    const callbackDeposit = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveDeposit`,\n        eventAction: this.props.selectedToken,\n        eventValue: inputValue.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackDeposit === 'function' && txSucceeded){\n        this.props.callbackDeposit(tx);\n      }\n    };\n\n    const callbackReceiptDeposit = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.migrationContract.name;\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n    const depositParams = await this.getMigrationParams(_amount);\n\n    this.props.contractMethodSendWrapper(contractName, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  cancelTransaction = async () => {\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  async getMigrationParams(toMigrate){\n    const migrationParams = [];\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.selectedToken]);\n\n    if (!curveTokenConfig){\n      return false;\n    }\n    \n    const migrationContractParams = curveTokenConfig.migrationParams;\n    if (migrationContractParams.n_coins){\n      const amounts = await this.functionsUtil.getCurveAmounts(this.props.selectedToken,toMigrate,true);\n      let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n\n      if (this.state.maxSlippage){\n        minMintAmount = this.functionsUtil.BNify(minMintAmount);\n        minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n        minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n      }\n\n      migrationParams.push(amounts);\n      migrationParams.push(minMintAmount);\n    }\n\n    return migrationParams;\n  }\n\n  async calculateSlippage(){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (inputValue){\n      let underlyingBalanceToDeposit = inputValue;\n      if (underlyingBalanceToDeposit){\n        const idleTokenPrice = await this.functionsUtil.getIdleTokenPrice(this.props.tokenConfig);\n        if (idleTokenPrice){\n          underlyingBalanceToDeposit = underlyingBalanceToDeposit.times(idleTokenPrice);\n        }\n      } else {\n        underlyingBalanceToDeposit = this.functionsUtil.BNify(0);\n      }\n\n      const normalizeIdleTokenBalance = this.functionsUtil.normalizeTokenAmount(underlyingBalanceToDeposit,this.props.tokenConfig.decimals);\n      let depositSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizeIdleTokenBalance);\n      if (depositSlippage){\n        depositSlippage = depositSlippage.times(100);\n      }\n\n      this.setState({\n        depositSlippage\n      });\n    }\n  }\n\n  async checkMigrationContractApproved(){\n    const migrationContract = this.state.migrationContract || await this.functionsUtil.getCurveSwapContract();\n    if (migrationContract){\n      return await this.functionsUtil.checkTokenApproved(this.props.tokenConfig.idle.token,migrationContract.address,this.props.account);\n    }\n    return false;\n  }\n\n  async initToken(){\n\n    // Init and check migration contract\n    const migrationContract = await this.functionsUtil.getCurveSwapContract();\n    const migrationContractApproved = await this.checkMigrationContractApproved();\n\n    this.setState({\n      migrationContract,\n      migrationContractApproved\n    });\n  }\n\n  approveCallback = () => {\n    this.initToken();\n  }\n\n  migrationCallback = () => {\n    this.setState({\n      migrationSucceeded:true\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken){\n      return null;\n    }\n\n    // const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const hasCurveTokens = this.state.curveTokensBalance && this.state.curveTokensBalance.gt(0);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n            {\n              this.props.idleTokenBalance && this.props.idleTokenBalance.gt(0) && (\n                <Box\n                  width={1}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:3,\n                      px:[2,4]\n                    }}\n                  >\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    > \n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ this.state.migrationContractApproved ? 'CheckBox' : 'LooksOne'}\n                          color={ this.state.migrationContractApproved ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Approve the Curve contract\n                        </Text>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ hasCurveTokens ? 'CheckBox' : 'LooksTwo'}\n                          color={ hasCurveTokens ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Deposit your {this.props.tokenConfig.idle.token}\n                        </Text>\n                      </Flex>\n                    </Flex>\n                  </DashboardCard>\n                  {\n                    !this.state.migrationContractApproved ?\n                      this.state.processing.loading ? (\n                        <Flex\n                          mt={3}\n                          flexDirection={'column'}\n                        >\n                          <TxProgressBar\n                            web3={this.props.web3}\n                            waitText={`Approve estimated in`}\n                            hash={this.state.processing.txHash}\n                            endMessage={`Finalizing approve request...`}\n                            cancelTransaction={this.cancelTransaction.bind(this)}\n                          />\n                        </Flex>\n                      ) : (\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            mt:3,\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                          >\n                            <Icon\n                              size={'2.3em'}\n                              name={'LockOpen'}\n                              color={'cellText'}\n                            />\n                            <Text\n                              mt={1}\n                              fontSize={2}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              To deposit your {this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.\n                            </Text>\n                            <RoundButton\n                              buttonProps={{\n                                mt:3,\n                                width:[1,1/2]\n                              }}\n                              handleClick={this.approve.bind(this)}\n                            >\n                              Approve\n                            </RoundButton>\n                          </Flex>\n                        </DashboardCard>\n                      )\n                    : this.state.processing.loading ? (\n                      <Flex\n                        mt={3}\n                        flexDirection={'column'}\n                      >\n                        <TxProgressBar\n                          web3={this.props.web3}\n                          waitText={`Deposit estimated in`}\n                          hash={this.state.processing.txHash}\n                          endMessage={`Finalizing deposit request...`}\n                          cancelTransaction={this.cancelTransaction.bind(this)}\n                        />\n                      </Flex>\n                    ) : (\n                      <Box\n                        mt={2}\n                        width={1}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text>\n                            Choose max slippage:\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={`Max additional slippage on top of the one shown below`}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                          justifyContent={'space-between'}\n                        >\n                          {\n                            [0.2,0.5,1,5].map( slippage => (\n                              <FastBalanceSelector\n                                cardProps={{\n                                  p:1\n                                }}\n                                textProps={{\n                                  fontSize:1\n                                }}\n                                percentage={slippage}\n                                key={`selector_${slippage}`}\n                                onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                isActive={this.state.maxSlippage === parseFloat(slippage)}\n                              />\n                            ))\n                          }\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                        >\n                          <Flex\n                            mb={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={this.state.depositSlippage ? 'space-between' : 'flex-end'}\n                          >\n                            {\n                              this.state.depositSlippage && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    textAlign={'right'}\n                                    style={{\n                                      whiteSpace:'nowrap'\n                                    }}\n                                    color={ parseFloat(this.state.depositSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                  >\n                                    {\n                                      parseFloat(this.state.depositSlippage.toFixed(3)) === 0 ?\n                                        'No Slippage'\n                                      : `${ this.state.depositSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositSlippage.abs().toFixed(3)}%`\n                                    }\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.state.depositSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              )\n                            }\n                            {\n                              this.props.idleTokenBalance && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'flex-end'}\n                                >\n                                  <Link\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'right'}\n                                    hoverColor={'copyColor'}\n                                    onClick={ (e) => this.setFastBalanceSelector(100) }\n                                    style={{\n                                      maxWidth:'100%',\n                                      overflow:'hidden',\n                                      whiteSpace:'nowrap',\n                                      textOverflow:'ellipsis'\n                                    }}\n                                  >\n                                    {this.props.idleTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {this.props.selectedToken}\n                                  </Link>\n                                </Flex>\n                              )\n                            }\n                          </Flex>\n                          <Input\n                            min={0}\n                            type={\"number\"}\n                            required={true}\n                            height={'3.4em'}\n                            borderRadius={2}\n                            fontWeight={500}\n                            boxShadow={'none !important'}\n                            placeholder={`Insert amount`}\n                            onChange={this.changeInputValue.bind(this)}\n                            border={`1px solid ${this.props.theme.colors.divider}`}\n                            value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                          />\n                          <Flex\n                            mt={2}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'space-between'}\n                          >\n                            {\n                              [25,50,75,100].map( percentage => (\n                                <FastBalanceSelector\n                                  percentage={percentage}\n                                  key={`selector_${percentage}`}\n                                  onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                  isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                                />\n                              ))\n                            }\n                          </Flex>\n                          <Flex\n                            mt={2}\n                            justifyContent={'center'}\n                          >\n                            <RoundButton\n                              buttonProps={{\n                                mt:2,\n                                width:[1,1/2],\n                                disabled:this.state.buttonDisabled\n                              }}\n                              handleClick={this.deposit.bind(this)}\n                            >\n                              Deposit\n                            </RoundButton>\n                          </Flex>\n                        </Flex>\n                      </Box>\n                    )\n                  }\n                </Box>\n              )\n            }\n          {\n            /*\n            this.state.tokenConfig && this.state.redeemableBalance ? (\n              <Box width={1}>\n                <Migrate\n                  {...this.props}\n                  showActions={false}\n                  getTokenPrice={false}\n                  migrationTextProps={{\n                    fontWeight:500\n                  }}\n                  isMigrationTool={true}\n                  migrationImage={{\n                    mb:1,\n                    height:'1.8em',\n                    src:curveConfig.params.image\n                  }}\n                  showBalanceSelector={true}\n                  waitText={'Deposit estimated in'}\n                  tokenConfig={this.state.tokenConfig}\n                  callbackApprove={this.approveCallback.bind(this)}\n                  migrationParams={this.getMigrationParams.bind(this)}\n                  migrationCallback={this.migrationCallback.bind(this)}\n                  approveText={`To deposit your ${this.props.tokenConfig.idle.token} you need to approve Curve smart-contract first.`}\n                  migrationText={`You can deposit ${this.state.redeemableBalance.toFixed(4)} ${this.props.tokenConfig.idle.token} in the Curve Pool${ this.state.depositSlippage ? (this.state.depositSlippage.gte(0) ? ` with <span style=\"color:${this.props.theme.colors.transactions.status.failed}\">${this.state.depositSlippage.times(100).toFixed(2)}% of slippage</span>` : ` with <span style=\"color:${this.props.theme.colors.transactions.status.completed}\">${Math.abs(parseFloat(this.state.depositSlippage.times(100).toFixed(2)))}% of bonus</span>`) : '' }.`}\n                >\n                  {\n                    !this.props.account ? (\n                      <DashboardCard\n                        cardProps={{\n                          p:3,\n                          mt:3\n                        }}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                        >\n                          <Icon\n                            size={'2.3em'}\n                            name={'Input'}\n                            color={'cellText'}\n                          />\n                          <Text\n                            mt={2}\n                            fontSize={2}\n                            color={'cellText'}\n                            textAlign={'center'}\n                          >\n                            Please connect with your wallet interact with Idle.\n                          </Text>\n                          <RoundButton\n                            buttonProps={{\n                              mt:2,\n                              width:[1,1/2]\n                            }}\n                            handleClick={this.props.connectAndValidateAccount}\n                          >\n                            Connect\n                          </RoundButton>\n                        </Flex>\n                      </DashboardCard>\n                    ) : (\n                      <DashboardCard\n                        cardProps={{\n                          p:3\n                        }}\n                      >\n                        {\n                          this.state.migrationSucceeded ? (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'DoneAll'}\n                                color={this.props.theme.colors.transactions.status.completed}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You have successfully deposited your {this.props.tokenConfig.idle.token} in the Curve Pool!\n                              </Text>\n                            </Flex>\n                          ) : (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'MoneyOff'}\n                                color={'cellText'}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You don't have any {this.props.tokenConfig.idle.token} in your wallet.\n                              </Text>\n                            </Flex>\n                          )\n                        }\n                      </DashboardCard>\n                    )\n                  }\n                </Migrate>\n              </Box>\n            ) : null\n            */\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveDeposit;","import theme from '../theme';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\n// import { linearGradientDef } from '@nivo/core'\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport ChartCustomTooltip from '../ChartCustomTooltip/ChartCustomTooltip';\nimport ChartCustomTooltipRow from '../ChartCustomTooltipRow/ChartCustomTooltipRow';\n\nclass PortfolioEquityCurve extends Component {\n  state = {\n    startDate:null,\n    chartData:null,\n    chartProps:null,\n    chartwidth:null,\n    chartHeight:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentDidMount(){\n    this.loadUtils();\n    this.loadChartData();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n\n    const quickDateSelectionChanged = prevProps.quickDateSelection !== this.props.quickDateSelection;\n    const tokenChanged = JSON.stringify(prevProps.enabledTokens) !== JSON.stringify(this.props.enabledTokens);\n    if (tokenChanged || quickDateSelectionChanged){\n      this.setState({\n        chartData:null\n      },() => {\n        this.componentDidMount();\n      });\n    }\n\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n    if (mobileChanged){\n      this.loadChartData();\n    }\n  }\n\n  async loadChartData() {\n\n    let enabledTokens = this.props.enabledTokens;\n    if (!enabledTokens || !enabledTokens.length){\n      enabledTokens = Object.keys(this.props.availableTokens);\n    }\n\n    const curveTxs = await this.functionsUtil.getCurveTxs(this.props.account,0,'latest',enabledTokens);\n\n    const chartData = [];\n    let tokensBalance = [];\n    const processedTxs = {};\n    let firstTxTimestamp = null;\n    let totalBalance = this.functionsUtil.BNify(0);\n    const curvePoolContract = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    if (curveTxs && curveTxs.length){\n\n      curveTxs.forEach((tx,index) => {\n\n        if (!processedTxs[tx.hash]){\n          processedTxs[tx.hash] = [];\n        }\n\n        if (processedTxs[tx.hash].includes(tx.action)){\n          return;\n        }\n        \n        firstTxTimestamp = firstTxTimestamp ? Math.min(firstTxTimestamp,parseInt(tx.timeStamp)) : parseInt(tx.timeStamp);\n\n        const curveTokens = this.functionsUtil.BNify(tx.curveTokens);\n\n        switch (tx.action){\n          case 'CurveIn':\n          case 'CurveZapIn':\n          case 'CurveDepositIn':\n          case 'CurveTransferIn':\n            totalBalance = totalBalance.plus(curveTokens);\n          break;\n          case 'CurveOut':\n          case 'CurveZapOut':\n          case 'CurveDepositOut':\n          case 'CurveTransferOut':\n            totalBalance = totalBalance.minus(curveTokens);\n          break;\n          default:\n          break;\n        }\n\n        // Reset totalBalance if below zero\n        if (totalBalance.lt(0)){\n          totalBalance = this.functionsUtil.BNify(0);\n        }\n\n        const action = tx.action;\n        const balance = totalBalance;\n        const timeStamp = parseInt(tx.timeStamp);\n        const curveTokenPrice = this.functionsUtil.fixTokenDecimals(tx.curveTokenPrice,curvePoolContract.decimals);\n\n        // console.log(this.functionsUtil.strToMoment(timeStamp*1000).format('YYYY/MM/DD HH:mm'),tx.hash,tx.action,curveTokens.toString(),totalBalance.toString());\n\n        if (!curveTokenPrice.isNaN() && !curveTokenPrice.isNaN()){\n          tokensBalance.push({\n            action,\n            balance,\n            timeStamp,\n            curveTokens,\n            curveTokenPrice\n          });\n\n          processedTxs[tx.hash].push(action);\n        }\n      });\n    }\n\n    // Calculate Start Date\n    let startDate = null;\n    const currentDate = this.functionsUtil.strToMoment(new Date());\n\n    switch (this.props.quickDateSelection){\n      case 'week':\n        startDate = currentDate.clone().subtract(1,'week');\n      break;\n      case 'month':\n        startDate = currentDate.clone().subtract(1,'month');\n      break;\n      case 'month3':\n        startDate = currentDate.clone().subtract(3,'month');\n      break;\n      case 'month6':\n        startDate = currentDate.clone().subtract(6,'month');\n      break;\n      default:\n        startDate = null;\n      break;\n    }\n\n    const days = {};\n    let prevBalances = {};\n    let prevTimestamp = null;\n    let minChartValue = null;\n    let maxChartValue = null;\n    const aggregatedBalancesKeys = {};\n    const tokensBalancesPerDate = {};\n    let aggregatedBalance = this.functionsUtil.BNify(0);\n    // let curveTokenBalance = this.functionsUtil.BNify(0);\n    const currTimestamp = parseInt(new Date().getTime()/1000)+86400;\n\n    const tokensData = await this.functionsUtil.getTokenApiData(Object.values(this.props.availableTokens)[0].address,false,firstTxTimestamp,null,false,3600);\n\n    for (let timeStamp=firstTxTimestamp;timeStamp<=currTimestamp;timeStamp+=this.props.frequencySeconds){\n\n      let foundBalances = {};\n      let tokensBalances = {};\n      timeStamp = Math.min(currTimestamp,timeStamp);\n      let momentDate = this.functionsUtil.strToMoment(timeStamp*1000);\n\n      // eslint-disable-next-line\n      const filteredTokenData = tokensData.filter(tx => (tx.timestamp>=prevTimestamp && tx.timestamp<=timeStamp));\n\n      // eslint-disable-next-line\n      let filteredBalances = tokensBalance.filter(tx => (tx.timeStamp<=timeStamp && (!prevTimestamp || tx.timeStamp>prevTimestamp)));\n      \n      if (!filteredBalances.length){\n        if (prevBalances){\n          filteredBalances = prevBalances;\n          const lastFilteredTx = Object.values(filteredBalances).pop();\n          const currentBalance = parseFloat(lastFilteredTx.balance);\n\n          const lastTokenData = Object.values(filteredTokenData).pop();\n          let curveTokenPrice = null;\n          if (lastTokenData){\n            curveTokenPrice = await this.functionsUtil.getCurveTokenPrice(lastTokenData.blocknumber);\n          }\n\n          // Take idleToken price from API and calculate new balance\n          if (currentBalance>0 && timeStamp>firstTxTimestamp && curveTokenPrice){\n            // Set new curveTokenPrice\n            lastFilteredTx.curveTokenPrice = curveTokenPrice;\n            filteredBalances = [lastFilteredTx];\n          }\n        } else {\n          filteredBalances = [{\n            balance:this.functionsUtil.BNify(0),\n            curveTokenPrice:this.functionsUtil.BNify(0)\n          }];\n        }\n      }\n\n      const lastTx = Object.assign([],filteredBalances).pop();\n      let lastTxBalance = this.functionsUtil.BNify(lastTx.balance).times(lastTx.curveTokenPrice);\n\n      tokensBalances[curvePoolContract.token] = this.functionsUtil.BNify(lastTx.balance);\n      aggregatedBalance = lastTxBalance;\n\n      foundBalances = filteredBalances;\n\n      // console.log(momentDate.format('YYYY/MM/DD 00:00'),lastTx.balance.toString(),lastTx.curveTokenPrice.toString(),lastTxBalance.toString());\n\n      if (startDate === null || momentDate.isSameOrAfter(startDate)){\n        \n        if (momentDate.isAfter(new Date(),'day')){\n          momentDate = this.functionsUtil.strToMoment(new Date());\n        }\n\n        // Force date to midnight\n        const formattedDate = momentDate.format('YYYY/MM/DD 00:00');\n\n        // Save days for axisBottom format\n        days[momentDate.format('YYYY/MM/DD')] = 1;\n\n        const aggregatedBalanceParsed = parseFloat(parseFloat(aggregatedBalance.toFixed(6)));\n\n        aggregatedBalancesKeys[formattedDate] = aggregatedBalanceParsed;\n        tokensBalancesPerDate[formattedDate] = tokensBalances;\n\n        // console.log(formattedDate,tokensBalances);\n\n        minChartValue = minChartValue === null ? aggregatedBalanceParsed : Math.min(minChartValue,aggregatedBalanceParsed);\n        maxChartValue = maxChartValue === null ? aggregatedBalanceParsed : Math.max(maxChartValue,aggregatedBalanceParsed);\n      }\n\n      prevTimestamp = timeStamp;\n      prevBalances = foundBalances;\n    }\n\n    const aggregatedBalances = Object.keys(aggregatedBalancesKeys).map(date => ({\n      x:date,\n      y:aggregatedBalancesKeys[date],\n      balances:tokensBalancesPerDate[date]\n    }));\n\n    let itemIndex = 0;\n    aggregatedBalances.forEach( (item,index) => {\n      const itemPos = Math.floor(itemIndex/aggregatedBalances.length*100);\n      aggregatedBalances[index].itemPos = itemPos;\n      itemIndex++;\n    });\n\n    /*\n    aggregatedBalances.push({\n      x:momentDate.format('YYYY/MM/DD HH:mm'),\n      y:aggregatedBalance\n    });\n    */\n\n    // Add day before to start with zero balance\n    /*\n    const firstTxMomentDate = this.functionsUtil.strToMoment(firstTxTimestamp*1000);\n    if ((startDate === null || startDate.isSameOrBefore(firstTxMomentDate)) && aggregatedBalances.length){\n      const firstItem = aggregatedBalances[0];\n      const firstDate = this.functionsUtil.strToMoment(firstItem.x,'YYYY/MM/DD HH:mm');\n      firstDate.subtract(1,'day');\n      aggregatedBalances.unshift({\n        x:firstDate.format('YYYY/MM/DD HH:mm'),\n        y:0\n      });\n    }\n    */\n\n    // Add token Data\n    chartData.push({\n      id:'USD',\n      color: 'hsl('+ this.functionsUtil.getGlobalConfig(['stats','tokens','USD','color','hsl']).join(',')+')',\n      data:aggregatedBalances\n    });\n\n    let yFormatDecimals = 2;\n    if (maxChartValue-minChartValue<1){\n      yFormatDecimals = 4;\n    }\n\n    if (maxChartValue === minChartValue){\n      minChartValue = Math.max(0,maxChartValue-1);\n    }\n\n    const maxGridLines = 5;\n    const gridYStep = (maxChartValue-minChartValue)/maxGridLines;\n    const gridYValues = [];\n    for (let i=0;i<=maxGridLines;i++){\n      const gridYValue = parseFloat(parseFloat(minChartValue+(i*gridYStep)).toFixed(6));\n      gridYValues.push(gridYValue);\n    }\n    \n    const axisBottomMaxValues = 10;\n    const daysCount = Object.values(days).length;    \n    const daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n    const chartProps = {\n      xScale:{\n        type: 'time',\n        format: '%Y/%m/%d %H:%M',\n      },\n      yScale:{\n        type: 'linear',\n        stacked: false,\n        min: minChartValue,\n        max: maxChartValue\n      },\n      xFormat:'time:%b %d %Y',\n      yFormat:value => this.functionsUtil.formatMoney(value,yFormatDecimals),\n      axisBottom: this.props.isMobile ? null : {\n        legend: '',\n        tickSize:0,\n        format: '%b %d',\n        tickPadding: 15,\n        orient: 'bottom',\n        legendOffset: 36,\n        legendPosition: 'middle',\n        tickValues:'every '+daysFrequency+' days'\n      },\n      gridYValues,\n      pointSize:0,\n      useMesh:true,\n      axisLeft: this.props.isMobile ? null : {\n        legend: '',\n        tickSize: 0,\n        orient: 'left',\n        tickPadding: 10,\n        tickRotation: 0,\n        legendOffset: -70,\n        tickValues:gridYValues,\n        legendPosition: 'middle',\n        format: v => this.functionsUtil.abbreviateNumber(v,2),\n      },\n      animate:true,\n      pointLabel:'y',\n      areaOpacity:0.1,\n      enableArea:true,\n      enableSlices:'x',\n      enableGridY:true,\n      curve:'monotoneX',\n      enableGridX:false,\n      pointBorderWidth:1,\n      colors:d => d.color,\n      pointLabelYOffset:-12,\n      areaBaselineValue:minChartValue,\n      pointColor:{ from: 'color', modifiers: []},\n      theme:{\n        axis: {\n          ticks: {\n            text: {\n              fontSize:12,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '8 4'\n          }\n        },\n      },\n      /*\n      defs:[\n        linearGradientDef('gradientA', [\n          { offset: 0, color: 'inherit' },\n          { offset: 100, color: 'inherit', opacity: 0 },\n        ]),\n      ],\n      fill:[{ match: '*', id: 'gradientA' }],\n      */\n      margin: this.props.isMobile ? { top: 20, right: 25, bottom: 25, left: 20 } : { top: 30, right: 50, bottom: 45, left: 50 },\n      sliceTooltip:(slideData) => {\n        const { slice } = slideData;\n        const point = slice.points[0];\n        return (\n          <ChartCustomTooltip\n            point={point}\n          >\n            <ChartCustomTooltipRow\n              color={point.color}\n              label={point.serieId}\n              value={`$ ${point.data.yFormatted}`}\n            />\n            {\n            typeof point.data.balances === 'object' && Object.keys(point.data.balances).length>0 &&\n              Object.keys(point.data.balances).map(token => {\n                if (token === point.serieId){\n                  return null;\n                }\n                const tokenInfo = this.functionsUtil.getGlobalConfig(['stats','tokens',token]);\n                if (tokenInfo){\n                  const tokenName = tokenInfo.name ? tokenInfo.name : token;\n                  const color = tokenInfo.color.hex;\n                  const balance = point.data.balances[token];\n                  let formattedBalance = this.functionsUtil.formatMoney(balance,2);\n                  if (parseFloat(balance)>=0.01){\n                    return (\n                      <ChartCustomTooltipRow\n                        label={tokenName}\n                        color={color}\n                        key={`row_${token}`}\n                        value={`${formattedBalance}`}\n                      />\n                    );\n                  }\n                }\n                return null;\n              })\n            }\n          </ChartCustomTooltip>\n        );\n      }\n    };\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  render() {\n    return (\n      <GenericChart\n        type={Line}\n        showLoader={true}\n        {...this.state.chartProps}\n        data={this.state.chartData}\n        parentId={this.props.parentId}\n        height={this.props.chartHeight}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default PortfolioEquityCurve;","import theme from '../theme';\nimport Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport { Flex, Heading, Text } from \"rimble-ui\";\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport PortfolioEquityCurve from '../PortfolioEquityCurve/PortfolioEquityCurve';\n\nclass FundsOverviewCurve extends Component {\n\n  state = {\n    compAPR:null,\n    aggregatedValues:[],\n    govTokensUserBalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    await this.functionsUtil.getCurveAvgBuyPrice();\n\n    // debugger;\n\n    await this.functionsUtil.getCurveAvgSlippage();\n\n    // debugger;\n    /*\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const [govTokensUserBalance,avgAPY,days] = await Promise.all([\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,'DAI'),\n      this.functionsUtil.loadAssetField('avgAPY',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '-') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    let [tokenAllocation,compAPR] = await Promise.all([\n      this.functionsUtil.getTokenAllocation(this.props.tokenConfig,false,false),\n      this.functionsUtil.getCompAPR(this.props.selectedToken,this.props.tokenConfig)\n    ]);\n\n    if (tokenAllocation){\n      const compoundInfo = this.props.tokenConfig.protocols.find( p => (p.name === 'compound') );\n      if (compoundInfo){\n        if (tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()]){\n          const compoundAllocationPerc = tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()];\n          compAPR = compAPR.times(compoundAllocationPerc);\n        }\n      }\n    }\n\n    this.setState({\n      compAPR,\n      aggregatedValues,\n      govTokensUserBalance\n    });\n    */\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Text\n                          mt={2}\n                          fontWeight={2}\n                          fontSize={[1,2]}\n                          color={'cellText'}\n                        >\n                          {v.props.title}\n                        </Text>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquityCurve\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLentCurve',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPercCurve',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            {\n              /*\n              <Flex\n                mb={[2,0]}\n                width={[1,1/5]}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'flex-start'}\n              >\n                <Title\n                  mb={2}\n                  fontSize={[3,4]}\n                  component={Heading.h3}\n                >\n                  Fees\n                </Title>\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'feesCounter',\n                    props:{\n                      decimals:7,\n                      maxPrecision:8,\n                      style:{\n                        fontWeight:300,\n                        fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                        color:theme.colors.counter\n                      },\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n              */\n            }\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveApy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Avg Slippage\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveAvgSlippage',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverviewCurve;","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport { Box, Flex, Text, Icon } from \"rimble-ui\";\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport CurveDeposit from '../CurveDeposit/CurveDeposit';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport TransactionField from '../TransactionField/TransactionField';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport FundsOverviewCurve from '../FundsOverviewCurve/FundsOverviewCurve';\n\nclass AssetPage extends Component {\n\n  state = {\n    inputValue:{},\n    processing:{},\n    tokenFees:null,\n    canRedeem:null,\n    canDeposit:null,\n    action:'deposit',\n    activeModal:null,\n    tokenConfig:null,\n    tokenBalance:null,\n    tokenApproved:null,\n    selectedToken:null,\n    availableTokens:{},\n    redeemBalance:null,\n    depositBalance:null,\n    buttonDisabled:false,\n    curveTokenPrice:null,\n    depositSlippage:null,\n    idleTokenBalance:null,\n    withdrawSlippage:null,\n    govTokensBalance:null,\n    curveZapContract:null,\n    curveTokenConfig:null,\n    curveTokensAmounts:{},\n    govTokensDisabled:null,\n    componentMounted:false,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    redeemableBalance:null,\n    fastBalanceSelector:{},\n    curveAvailableTokens:{},\n    tokenFeesPercentage:null,\n    redeemUnevenAmounts:false,\n    curveDepositContract:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  changeFromToken = (selectedToken) => {\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    this.props.goToSection(`${curveConfig.params.route}/${selectedToken}`);\n  }\n\n  getSelectedToken(){\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    return this.props.urlParams.param1 && curveAvailableTokens[this.props.urlParams.param1] ? this.props.urlParams.param1 : Object.keys(curveAvailableTokens)[0];\n  }\n\n  setSelectedToken = async (selectedToken) => {\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n    this.setState({\n      tokenConfig,\n      selectedToken,\n      availableTokens,\n      curveTokenConfig\n    });\n  }\n\n  loadTokensInfo = async () => {\n\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    this.setState({\n      curveAvailableTokens\n    });\n\n    const selectedToken = this.getSelectedToken();\n    // Check if token is set the query params\n    if (selectedToken && selectedToken !== this.props.urlParams.param1){\n      this.changeFromToken(selectedToken);\n      return await this.setSelectedToken(selectedToken);\n    } else if (selectedToken !== this.state.selectedToken){\n      await this.setSelectedToken(selectedToken);\n    }\n\n    const newState = {...this.state};\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n\n    if (newState.selectedToken !== selectedToken){\n      newState.selectedToken = selectedToken;\n    }\n\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n\n    const [\n      curveZapContract,\n      curvePoolContract,\n      curveSwapContract,\n      curveDepositContract\n    ] = await Promise.all([\n      this.functionsUtil.getCurveZapContract(),\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract()\n    ]);\n\n    newState.curveZapContract = curveZapContract;\n    newState.curvePoolContract = curvePoolContract;\n    newState.curveSwapContract = curveSwapContract;\n    newState.curveDepositContract = curveDepositContract;\n\n    newState.availableTokens = availableTokens;\n\n\n    // console.log('curveTokenPrice',newState.curveTokenPrice.toFixed(6),'curveTokenBalance',newState.curveTokenBalance.toFixed(6),'redeemableBalance',newState.redeemableBalance.toFixed(20),'tokenBalance',newState.tokenBalance.toFixed(20));\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[selectedToken] = tokenConfig;\n\n    newState.tokenConfig = tokenConfig;\n    newState.curveTokenConfig = curveTokenConfig;\n\n    if (this.props.account){\n      [\n        newState.curveTokenPrice,\n        newState.curveTokenBalance,\n        newState.tokenFeesPercentage,\n        newState.tokenFees,\n        newState.tokenBalance,\n        newState.idleTokenBalance,\n        newState.tokenApproved,\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokenPrice(),\n        this.functionsUtil.getCurveTokenBalance(),\n        this.functionsUtil.getTokenFees(tokenConfig),\n        this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n        this.functionsUtil.getTokenBalance(selectedToken,this.props.account),\n        this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n        this.functionsUtil.checkTokenApproved(selectedToken,curveDepositContract.address,this.props.account),\n      ]);\n\n\n      newState.processing = {\n        redeem:{\n          txHash:null,\n          loading:false\n        },\n        deposit:{\n          txHash:null,\n          loading:false\n        },\n        approve:{\n          txHash:null,\n          loading:false\n        },\n      };\n      newState.inputValue = {\n        redeem:null,\n        deposit:null\n      };\n      newState.fastBalanceSelector = {\n        redeem:null,\n        deposit:null\n      };\n\n      newState.componentMounted = true;\n      newState.depositBalance = newState.tokenBalance;\n      newState.redeemBalance = newState.redeemableBalance;\n      newState.govTokensDisabled = tokenConfig.govTokensDisabled;\n      newState.canRedeem = newState.curveTokenBalance && newState.curveTokenBalance.gt(0);\n      newState.canDeposit = newState.idleTokenBalance && newState.idleTokenBalance.gt(0);\n      newState.redeemableBalance = newState.curveTokenBalance ? newState.curveTokenBalance.times(newState.curveTokenPrice) : this.functionsUtil.BNify(0);\n    }\n\n    this.setState(newState);\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async calculateSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,this.state.curvePoolContract.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositBalance = amount;\n        newState.depositSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      case 'redeem':\n        newState.redeemBalance = amount;\n        newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.urlParams.param1 !== this.props.urlParams.param1;\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n\n    if (accountChanged || transactionsChanged || tokenChanged){\n      await this.loadTokensInfo();\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const redeemUnevenAmountsChanged = this.state.redeemUnevenAmounts !== prevState.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n    if (actionChanged || fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    if (actionChanged){\n      this.updateAssetSelector();\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  updateAssetSelector = async () => {\n    const newState = {};\n    switch (this.state.action){\n      case 'deposit':\n        this.loadTokensInfo();\n      break;\n      case 'redeem':\n        // this.loadTokensInfo();\n        const tokenConfig = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n        newState.curveAvailableTokens = {};\n        newState.curveTokenConfig = tokenConfig;\n        newState.selectedToken = tokenConfig.token;\n        newState.curveAvailableTokens[tokenConfig.token] = tokenConfig;\n      break;\n      default:\n      break;\n    }\n\n    this.setState(newState);\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.state.tokenBalance ? this.functionsUtil.BNify(this.state.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          amount = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n        } else {\n          amount = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  changeInputValue = (e) => {\n    if (!this.state.action){\n      return false;\n    }\n\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && amount.gt(this.state.tokenBalance));\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.curveTokenBalance)) );\n        } else {\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.redeemableBalance)) );\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = this.state.tokenApproved;\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.state.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.functionsUtil.enableERC20(this.state.selectedToken,this.state.curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const inputValue = this.state.inputValue[this.state.action];\n    const selectedPercentage = this.getFastBalanceSelector();\n\n    let loading = true;\n\n    switch (this.state.action){\n      // Handle deposit in curve\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.state.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if (this.state.metaTransactionsEnabled && txError){\n            this.setState({\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,tokensToDeposit);\n        const minMintAmount = await this.functionsUtil.genericContractCall(this.state.curveSwapContract.name,'calc_token_amount',[amounts,true]);\n        const depositParams = [amounts,minMintAmount];\n\n        // No need for callback atm\n        contractSendResult = await this.props.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n      break;\n      case 'redeem':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        let curveTokensToRedeem = null;\n        if (selectedPercentage){\n          curveTokensToRedeem = this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage);\n        } else {\n          curveTokensToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals));\n          if (!this.state.redeemUnevenAmounts){\n            const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n            curveTokensToRedeem = curveTokensToRedeem.div(curveTokenPrice);\n          }\n        }\n\n        if (!curveTokensToRedeem){\n          return false;\n        }\n\n        const callbackRedeem = (tx,error) => {\n          const txSucceeded = tx.status === 'success';\n\n          // Send Google Analytics event\n          const eventData = {\n            eventLabel: tx.status,\n            eventCategory: `CurveRedeem`,\n            eventAction: this.state.selectedToken,\n            eventValue: curveTokensToRedeem.toFixed()\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          }\n        };\n\n        const callbackReceiptRedeem = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const _amount = this.functionsUtil.normalizeTokenAmount(curveTokensToRedeem,this.state.curvePoolContract.decimals).toString();\n        let min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,0);\n\n        const contractName = this.state.curveDepositContract.name;\n        if (this.state.redeemUnevenAmounts){\n          console.log('remove_liquidity_imbalance',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_imbalance', [min_amounts, _amount], null, callbackRedeem, callbackReceiptRedeem);\n        } else {\n          min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,_amount);\n          console.log('remove_liquidity',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts], null, callbackRedeem, callbackReceiptRedeem);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    // console.log('contractSendResult',contractSendResult);\n\n    if (contractSendResult !== false){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    const userHasFunds = this.props.account && this.state.curveTokenBalance && this.functionsUtil.BNify(this.state.curveTokenBalance).gt(0);\n    const canPerformAction = true;\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            {\n              <Breadcrumb\n                {...this.props}\n                isMobile={this.props.isMobile}\n                path={['Boost',this.state.selectedToken]}\n                handleClick={ e => this.props.goToSection('best') }\n                text={this.functionsUtil.getGlobalConfig(['strategies','best','title'])}\n              />\n            }\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Curve Pool\n        </Title>\n        <Flex\n          width={1}\n        >\n          <Flex\n            width={1}\n            alignItems={'center'}\n            flexDirection={'column'}\n            justifyContent={'center'}\n          >\n            <Flex\n              width={[1,0.36]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Box\n                width={1}\n              >\n                <Text\n                  mb={1}\n                >\n                  Select your asset:\n                </Text>\n                <AssetSelector\n                  {...this.props}\n                  id={'token-from'}\n                  onChange={this.changeFromToken}\n                  selectedToken={this.state.selectedToken}\n                  tokenConfig={this.state.curveTokenConfig}\n                  showBalance={this.state.action === 'deposit'}\n                  availableTokens={this.state.curveAvailableTokens}\n                />\n              </Box>\n              <Box\n                width={1}\n              >\n                {\n                  canPerformAction ? (\n                    <Flex\n                      mt={2}\n                      flexDirection={'column'}\n                    >\n                      <Text\n                        mb={2}\n                      >\n                        Choose the action:\n                      </Text>\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('deposit');\n                            }\n                          }}\n                          isInteractive={true}\n                          isActive={ this.state.action === 'deposit' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'deposit'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Deposit\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('redeem');\n                            }\n                          }}\n                          isInteractive={true}\n                          isDisabled={ !this.state.canRedeem }\n                          isActive={ this.state.action === 'redeem' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'redeem'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Redeem\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                      </Flex>\n                    </Flex>\n                  ) : (\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    >\n                      <Icon\n                        size={'2.3em'}\n                        name={'MoneyOff'}\n                        color={'cellText'}\n                      />\n                      <Text\n                        mt={2}\n                        fontSize={2}\n                        color={'cellText'}\n                        textAlign={'center'}\n                      >\n                        You don't have any {this.state.tokenConfig.idle.token} in your wallet.\n                      </Text>\n                    </Flex>\n                  )\n                }\n              </Box>\n            </Flex>\n            <Flex\n              width={1}\n              mt={ this.props.account ? 3 : 0 }\n            >\n            {\n              this.state.action === 'deposit' ? (\n                <CurveDeposit\n                  {...this.props}\n                  {...this.state}\n                />\n              ) : this.state.action === 'redeem' && (\n                <CurveRedeem\n                  {...this.props}\n                  {...this.state}\n                />\n              )\n            }\n            </Flex>\n          </Flex>\n        </Flex>\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverviewCurve\n                {...this.props}\n                tokenFees={this.state.tokenFees}\n                tokenConfig={this.state.tokenConfig}\n                selectedToken={this.state.selectedToken}\n                availableTokens={this.state.availableTokens}\n                enabledTokens={Object.keys(this.state.availableTokens)}\n              />\n            </Flex>\n        }\n        {\n          /*\n          this.props.account && !this.state.govTokensDisabled[this.state.selectedToken] && Object.keys(availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id=\"earnings-estimation\"\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(availableGovTokens)}\n                handleClick={(props) => {}}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.33,0.22]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.26],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    props:{\n                      width:[0.33,0.26],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                      {\n                        name:'tooltip',\n                        props:{\n                          placement:'bottom',\n                          message:'The shown balance may be lower than the real one.',\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    mobile:false,\n                    props:{\n                      width: 0.26,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                ]}\n                {...this.props}\n                availableTokens={availableGovTokens}\n              />\n            </Flex>\n          */\n        }\n        {\n          /*\n          this.props.account && \n            <Flex\n              mb={[3,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'estimated-earnings-container'}\n            >\n              <Title my={[3,4]}>Estimated earnings</Title>\n              <EstimatedEarnings\n                {...this.props}\n              />\n            </Flex>\n          */\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              availableTokens={this.state.availableTokens}\n              enabledTokens={Object.keys(this.state.availableTokens)}\n              enabledActions={['CurveIn','CurveOut','CurveZapIn','CurveZapOut','CurveTransferIn','CurveTransferOut','CurveDepositIn','CurveDepositOut']}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.state.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport {\n  Text,\n  Modal,\n  Button,\n  Form,\n  Icon,\n  Flex,\n  Link\n} from \"rimble-ui\";\nimport axios from 'axios';\nimport colors from '../../colors';\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\nimport globalConfigs from '../../configs/globalConfigs';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\n\nclass WelcomeModal extends React.Component {\n\n  state = {\n    email:null,\n    error:false,\n    subscribed:false,\n    sendingForm:false\n  };\n\n  functionsUtil = null;\n\n  constructor(props) {\n    super(props);\n    this.functionsUtil = new FunctionsUtil(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleValidation = this.handleValidation.bind(this);\n  }\n\n  componentDidUpdate = async () => {\n    this.functionsUtil.setProps(this.props);\n  }\n\n  sendUserInfo = (sendEmail=true) => {\n    const walletProvider = this.functionsUtil.getWalletProvider();\n    const userInfo = {\n      address: this.props.account,\n      provider: walletProvider\n    };\n\n    if (sendEmail && this.state.email !== null){\n      userInfo.email = this.state.email;\n    }\n\n    this.functionsUtil.simpleIDPassUserInfo(userInfo);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    if (!this.state.email){\n      return false;\n    }\n\n    const callback = () => {\n      this.setState({\n        sendingForm:false,\n        subscribed:true\n      });\n      window.setTimeout(this.props.closeModal,2500);\n    };\n\n    this.sendUserInfo();\n\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'send_email',\n      eventLabel: 'WelcomeModal'\n    });\n\n    axios.post(globalConfigs.newsletterSubscription.endpoint, {\n      'email': this.state.email\n    }).then(r => {\n      callback();\n    })\n    .catch(err => {\n      callback();\n    });\n\n    // Set signedUp in the localStorage\n    if (localStorage){\n      const walletAddress = this.props.account.toLowerCase();\n      let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : null;\n      if (lastLogin && lastLogin[walletAddress] && !lastLogin[walletAddress].signedUp){\n        lastLogin[walletAddress].signedUp = true;\n        this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n      }\n    }\n\n    this.setState({\n      sendingForm:true\n    })\n  };\n\n  closeModal = async () => {\n\n    const closeModal = () => {\n      this.props.closeModal();\n    };\n\n    try{\n      // Prevent sending email\n      this.sendUserInfo(false);\n\n      // Send Google Analytics event\n      if (globalConfigs.analytics.google.events.enabled){\n        this.functionsUtil.sendGoogleAnalyticsEvent({\n          eventCategory: 'UI',\n          eventAction: 'continue_without_email',\n          eventLabel: 'WelcomeModal'\n        },closeModal);\n\n        // Call callback after 1 second if stuck\n        setTimeout(closeModal,1000);\n      } else {\n        closeModal();\n      }\n    } catch (err) {\n      closeModal();\n    }\n  }\n\n  handleValidation(e) {\n    if (e && e.target) {\n      this.setState({ email: e.target.value });\n      e.target.parentNode.classList.add(\"was-validated\");\n    }\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        {\n          this.state.subscribed ? (\n            <ModalCard\n              closeFunc={this.closeModal}\n            >\n              <ModalCard.Header title={'All done'} icon={`images/done.svg`}></ModalCard.Header>\n              <ModalCard.Body>\n                <Flex width={1} flexDirection={'column'} mb={3}>\n                  <Text color={'dark-gray'} textAlign={'center'} fontSize={3} my={0}>\n                    Thanks for subscribing!\n                  </Text>\n                  <Button\n                    my={3}\n                    width={'100%'}\n                    borderRadius={4}\n                    onClick={this.closeModal}\n                  >\n                    CLOSE\n                  </Button>\n                </Flex>\n              </ModalCard.Body>\n            </ModalCard>\n          ) : (\n            <ModalCard closeFunc={this.closeModal}>\n              <ModalCard.Header title={'Stay up-to-date!'} icon={`images/notification.svg`}>\n              </ModalCard.Header>\n              <ModalCard.Body>\n                <Form onSubmit={this.handleSubmit}>\n                  <Flex width={1} flexDirection={'column'} mb={3}>\n                    <Text color={'mid-gray'} textAlign={'left'} fontSize={3} my={0}>\n                      Add your e-mail to receive updates about:\n                    </Text>\n                  </Flex>\n                  <Flex width={1} flexDirection={'column'} mt={2}>\n                    <Flex my={2} flexDirection={'row'} alignItems={'center'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Performance reports\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        New Protocols & Tokens\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Latest updates\n                      </Text>\n                    </Flex>\n                    <Form.Field width={1} label={''}>\n                      <Form.Input\n                        px={3}\n                        py={4}\n                        required\n                        width={1}\n                        border={0}\n                        fontSize={3}\n                        type={\"email\"}\n                        name={\"EMAIL\"}\n                        outline={'none'}\n                        borderColor={'cardBorder'}\n                        backgroundColor={'cardBg'}\n                        textAlign={['center','left']}\n                        className={header_styles.input}\n                        placeholder={'Enter your e-mail'}\n                        onChange={this.handleValidation}\n                      />\n                    </Form.Field>\n                    <Flex mb={3} flexDirection={'column'} alignItems={'center'} justifyContent={'center'}>\n                      <ButtonLoader\n                        buttonText={'SUBMIT'}\n                        isLoading={this.state.sendingForm}\n                        buttonProps={{className:header_styles.gradientButton,width:'100%',type:'submit'}}\n                      >\n                      </ButtonLoader>\n                      <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without e-mail</Link>\n                    </Flex>\n                  </Flex>\n                </Form>\n              </ModalCard.Body>\n            </ModalCard>\n          )\n        }\n      </Modal>\n    );\n  }\n}\n\nexport default WelcomeModal;\n","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\n\nclass MigrateModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'continue_without_migrate',\n        eventLabel: 'MigrateModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowMigrateModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowMigrateModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = () => {\n    const tokenMigrationRoute = this.functionsUtil.getGlobalConfig(['tools','tokenMigration','route']);\n    this.props.goToSection('tools/'+tokenMigrationRoute);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            iconHeight={'40px'}\n            title={'Migrate to Idle'}\n            icon={`images/migrate.svg`}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={3}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                You can migrate your funds from Compound, Aave, Fulcrum, Yearn and Idle V2 with just one transaction.\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                my={2}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.protocolsTokensBalances && Object.keys(this.props.protocolsTokensBalances).map( token => (\n                    <Flex\n                      mb={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      key={`token_${token}`}\n                      justifyContent={'space-between'}\n                    >\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'icon',\n                          props:{\n                            mr:2,\n                            height:'2.3em'\n                          }\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                      <SmartNumber\n                        mr={2}\n                        {...fieldProps}\n                        minPrecision={5}\n                        number={this.props.protocolsTokensBalances[token].balance} \n                      />\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'tokenName',\n                          props:fieldProps\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                    </Flex>\n                  ) )\n                }\n                <Text\n                  mb={0}\n                  fontSize={1}\n                  color={'red'}\n                  fontWeight={500}\n                  textAlign={'center'}\n                >\n                  Please be aware that by migrating your tokens from other protocols, your open positions might be liquidated if collateralized with migrated tokens.\n                </Text>\n              </Flex>\n              <Flex\n                mb={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <ButtonLoader\n                  buttonText={'MIGRATE'}\n                  handleClick={this.migrate}\n                  isLoading={this.state.sendingForm}\n                  buttonProps={{\n                    width:['100%','50%'],\n                    className:header_styles.gradientButton\n                  }}\n                >\n                </ButtonLoader>\n                {\n                /*\n                <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without migrate</Link>\n                */\n                }\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default MigrateModal;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass UpgradeModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'close_upgrade_modal',\n        eventLabel: 'UpgradeModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowUpgradeModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowUpgradeModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = async (token,strategy=null) => {\n\n    if (!strategy){\n      strategy = this.props.selectedStrategy;\n    }\n\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  convert = async (token) => {\n    const convertTool = this.functionsUtil.getGlobalConfig(['tools','tokenMigration']);\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n\n    if (!this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            icon={`images/migrate.svg`}\n            title={'Upgrade Available'}\n            iconHeight={['35px','40px']}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={[2,3]}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                Idle now supports yield farming and governance tokens distribution, migrate now your portfolio with just one click!\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n              >\n                <Flex\n                  fontSize={[2,3]}\n                  width={[0.5,0.28]}\n                  fontWeight={[4,5]}\n                  color={'copyColor'}\n                >\n                  {\n                    this.props.isMobile ? 'ASSET' : 'ASSET TO MIGRATE'\n                  }\n                </Flex>\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      BALANCE\n                    </Flex>\n                  )\n                }\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      OLD APY\n                    </Flex>\n                  )\n                }\n                <Flex\n                  fontSize={[2,3]}\n                  fontWeight={[4,5]}\n                  width={[0.25,0.19]}\n                  color={'copyColor'}\n                  justifyContent={'center'}\n                >\n                  {\n                    this.props.isMobile ? 'APY' : 'NEW APY'\n                  }\n                </Flex>\n                <Flex\n                  width={[0.25,0.15]}\n                >\n                  \n                </Flex>\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.tokensToMigrate && Object.keys(this.props.tokensToMigrate).map( tokenKey => {\n                    const token = this.props.tokensToMigrate[tokenKey].token;\n                    const strategy = this.props.tokensToMigrate[tokenKey].strategy;\n                    const tokenConfig = this.props.tokensToMigrate[tokenKey].tokenConfig;\n                    const balance = this.props.tokensToMigrate[tokenKey].oldContractBalanceFormatted;\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${tokenKey}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={[0.5,0.28]}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:['1.8em','2.3em']\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                        </Flex>\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <SmartNumber\n                                {...fieldProps}\n                                minPrecision={5}\n                                number={balance}\n                                flexProps={{\n                                  justifyContent:'center'\n                                }}\n                              />\n                            </Flex>\n                          )\n                        }\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <AssetField\n                                {...this.props}\n                                fieldInfo={{\n                                  name:'oldApy',\n                                  props:fieldProps\n                                }}\n                                token={token}\n                                tokenConfig={tokenConfig}\n                              />\n                            </Flex>\n                          )\n                        }\n                        <Flex\n                          width={[0.25,0.19]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={token}\n                            tokenConfig={tokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={[0.25,0.15]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.migrate(token,strategy) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.oldIdleTokensToMigrate && Object.keys(this.props.oldIdleTokensToMigrate).map( token => {\n                    const tokenConfig = this.props.oldIdleTokensToMigrate[token].tokenConfig;\n\n                    if (!tokenConfig){\n                      return null;\n                    }\n\n                    const balance = this.props.oldIdleTokensToMigrate[token].balance;\n                    let newTokenConfig = null;\n\n                    if (tokenConfig.availableStrategies && !this.props.availableTokens[tokenConfig.baseToken]){\n                      newTokenConfig = this.props.availableStrategies[tokenConfig.availableStrategies[0]][tokenConfig.baseToken];\n                    } else {\n                      newTokenConfig = this.props.availableTokens[tokenConfig.baseToken];\n                    }\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${token}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={0.28}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:'2.3em'\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <SmartNumber\n                            {...fieldProps}\n                            minPrecision={5}\n                            number={balance}\n                            flexProps={{\n                              justifyContent:'center'\n                            }}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'oldApy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.15}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.convert(token) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                my={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <RoundButton\n                  handleClick={this.closeModal}\n                  buttonProps={{\n                    fontSize:[2,3],\n                    width:['100%','40%'],\n                  }}\n                >\n                  MIGRATE LATER\n                </RoundButton>\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default UpgradeModal;","import React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport { Flex, Card, Icon, Text } from 'rimble-ui';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardMenu from '../DashboardMenu/DashboardMenu';\n\n// Import page components\nimport Stats from '../Stats/Stats';\nimport Utils from '../Utils/Utils';\nimport AssetPage from '../AssetPage/AssetPage';\nimport RoundButton from '../RoundButton/RoundButton';\nimport BetaModal from \"../utilities/components/BetaModal\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CurveStrategy from '../CurveStrategy/CurveStrategy';\nimport WelcomeModal from \"../utilities/components/WelcomeModal\";\nimport TooltipModal from \"../utilities/components/TooltipModal\";\nimport MigrateModal from \"../utilities/components/MigrateModal\";\nimport UpgradeModal from \"../utilities/components/UpgradeModal\";\nimport DashboardHeader from '../DashboardHeader/DashboardHeader';\n\nclass Dashboard extends Component {\n  state = {\n    menu:[],\n    baseRoute:null,\n    clickEvent:null,\n    activeModal:null,\n    currentRoute:null,\n    pageComponent:null,\n    currentSection:null,\n    selectedSection:null,\n    tokensToMigrate:null,\n    showResetButton:false,\n    selectedSubsection:null,\n    pageComponentProps:null,\n    oldIdleTokensToMigrate:null,\n    protocolsTokensBalances:null,\n  };\n\n  timeoutId = null;\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    window.functionsUtil = this.functionsUtil;\n  }\n\n  async loadMenu() {\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n    const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n    const menu = Object.keys(strategies).filter( s => ( !strategies[s].comingSoon ) ).map(strategy => ({\n        submenu:[],\n        color:'#fff',\n        selected:false,\n        route:baseRoute+'/'+strategy,\n        label:strategies[strategy].title,\n        image:strategies[strategy].icon,\n        bgColor:strategies[strategy].color,\n        component:strategies[strategy].component,\n        imageInactive:strategies[strategy].iconInactive,\n        imageInactiveDark:strategies[strategy].iconInactiveDark\n      })\n    );\n\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n\n    // Add Curve\n    if (curveConfig.enabled){\n      const curveParams = Object.assign({\n        submenu:[],\n        selected:false,\n        component:CurveStrategy,\n      },curveConfig.params);\n\n      menu.push(curveParams);\n    }\n\n    // Add Stake\n    const stakeConfig = this.functionsUtil.getGlobalConfig(['tools','stake']);\n    if (stakeConfig.enabled){\n      menu.push(\n        {\n          submenu:[],\n          label:'Stake',\n          selected:false,\n          color:'dark-gray',\n          icon:stakeConfig.icon,\n          route:'/dashboard/stake',\n          component:Utils,\n          componentProps:{\n            showBreadCrumb:false,\n            toolProps:stakeConfig.props,\n            selectedSubsection:stakeConfig\n          },\n          bgColor:this.props.theme.colors.primary,\n        }\n      );\n    }\n\n    // Add tools\n    menu.push(\n      {\n        icon:'Build',\n        label:'Tools',\n        color:'dark-gray',\n        component:Utils,\n        selected:false,\n        route:'/dashboard/tools',\n        bgColor:this.props.theme.colors.primary,\n        submenu:Object.values(this.functionsUtil.getGlobalConfig(['tools'])).filter( u => (u.enabled) )\n      }\n    );\n\n    // Add Stats\n    menu.push(\n      {\n        icon:'Equalizer',\n        label:'Stats',\n        bgColor:'#21f36b',\n        color:'dark-gray',\n        component:Stats,\n        selected:false,\n        route:'/dashboard/stats',\n        submenu:[]\n      }\n    );\n\n    // Add Forum\n    menu.push(\n      {\n        submenu:[],\n        icon:'Forum',\n        mobile:false,\n        label:'Forum',\n        selected:false,\n        component:null,\n        color:'dark-gray',\n        bgColor:'#ff0000',\n        isExternalLink:true,\n        route:this.functionsUtil.getGlobalConfig(['forumURL'])\n      }\n    );\n\n    await this.setState({\n      menu\n    });\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  openTooltipModal = (modalTitle,modalContent) => {\n\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: modalTitle,\n      eventLabel: 'TooltipModal'\n    });\n\n    this.setState({\n      modalTitle,\n      modalContent\n    },() => {\n      this.setActiveModal('tooltip');\n    })\n  }\n\n  setActiveModal = (activeModal) => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadParams() {\n    const { match: { params } } = this.props;\n\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n    let currentRoute = baseRoute;\n\n    let pageComponent = null;\n    let selectedToken = null;\n    let currentSection = null;\n    let selectedStrategy = null;\n    let pageComponentProps = null;\n\n    // Set strategy\n    if (params.section){\n      currentSection = params.section;\n      const param1 = params.param1;\n      const param2 = params.param2;\n\n      const section_is_strategy = Object.keys(this.props.availableStrategies).includes(currentSection.toLowerCase());\n      const param1_is_strategy = param1 && Object.keys(this.props.availableStrategies).includes(param1.toLowerCase());\n\n      if (section_is_strategy || param1_is_strategy){\n\n        if (!section_is_strategy){\n          currentRoute += '/'+currentSection;\n        }\n\n        selectedStrategy = section_is_strategy ? currentSection : param1;\n        currentRoute += '/'+selectedStrategy;\n\n        // Set token\n        const param1_is_token = param1 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param1.toUpperCase());\n        const param2_is_token = param2 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param2.toUpperCase());\n        if (param1_is_token || param2_is_token){\n          selectedToken = param1_is_token ? param1.toUpperCase() : param2.toUpperCase();\n          currentRoute += '/'+selectedToken;\n\n          if (section_is_strategy){\n            pageComponent = AssetPage;\n          }\n        }\n      } else {\n        currentRoute += '/'+params.section;\n\n        if (params.param1 && params.param1.length){\n          currentRoute += '/'+params.param1;\n        }\n\n        // if (params.param2 && params.param2.length){\n        //   currentRoute += '/'+params.param2;\n        // }\n      }\n    }\n\n    const menu = this.state.menu;\n\n    let selectedSection = null;\n    let selectedSubsection = null;\n\n    menu.forEach(m => {\n      m.selected = false;\n      const sectionRoute = baseRoute+'/'+params.section;\n      if (currentRoute.toLowerCase() === m.route.toLowerCase() || ( !m.submenu.length && m.route.toLowerCase() === sectionRoute.toLowerCase() )){\n        m.selected = true;\n        if (pageComponent === null){\n          pageComponent = m.component;\n          pageComponentProps = m.componentProps;\n        }\n      } else if (m.submenu.length) {\n        m.submenu.forEach(subm => {\n          subm.selected = false;\n          const submRoute = m.route+'/'+subm.route;\n          if (submRoute.toLowerCase() === currentRoute.toLowerCase()){\n            m.selected = true;\n            subm.selected = true;\n\n            // Set component, if null use parent\n            if (pageComponent === null){\n              if (subm.component){\n                pageComponent = subm.component;\n                pageComponentProps = m.componentProps;\n              } else {\n                pageComponent = m.component;\n                pageComponentProps = m.componentProps;\n              }\n            }\n          }\n\n          // Set selected subsection\n          if (subm.selected){\n            selectedSubsection = subm;\n          }\n\n        });\n      }\n\n      // Set selected section\n      if (m.selected){\n        selectedSection = m;\n      }\n    });\n\n    // console.log('pageComponent',params,pageComponent);\n\n    // Exit if no strategy and token selected\n    if (!pageComponent){\n      return this.goToSection('/',false);\n    }\n\n    // console.log('loadParams',selectedStrategy,selectedToken);\n    await this.props.setStrategyToken(selectedStrategy,selectedToken);\n    \n    // Send GA pageview\n    this.functionsUtil.sendGoogleAnalyticsPageview(currentRoute);\n\n    await this.setState({\n      menu,\n      params,\n      baseRoute,\n      currentRoute,\n      pageComponent,\n      currentSection,\n      selectedSection,\n      pageComponentProps,\n      selectedSubsection\n    });\n  }\n\n  componentWillUnmount(){\n    if (this.timeoutId){\n      window.clearTimeout(this.timeoutId);\n    }\n  }\n\n  async componentWillMount() {\n\n    this.props.setCurrentSection('dashboard');\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n  }\n\n  async componentDidMount() {\n\n    this.timeoutId = window.setTimeout(() => {\n      if (!this.props.accountInizialized || !this.props.contractsInitialized){\n        this.setState({\n          showResetButton:true\n        });\n      }\n    },20000);\n\n    if (!this.props.web3){\n      return this.props.initWeb3();\n    } else if (!this.props.accountInizialized){\n      return this.props.initAccount();\n    } else if (!this.props.contractsInitialized){\n      return this.props.initializeContracts();\n    }\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n\n    const viewOnly = this.props.connectorName === 'custom';\n    if (!viewOnly){\n      this.checkModals();\n    }\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n\n    this.loadUtils();\n\n    const prevParams = prevProps.match.params;\n    const params = this.props.match.params;\n\n    if (JSON.stringify(prevParams) !== JSON.stringify(params)){\n      await this.setState({\n        pageComponent:null\n      }, () => {\n        this.loadParams();\n      });\n    }\n\n    const viewOnly = this.props.connectorName === 'custom';\n    const accountChanged = prevProps.account !== this.props.account;\n    const strategyChanged = this.props.selectedStrategy && prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const availableTokensChanged = JSON.stringify(prevProps.availableTokens) !== JSON.stringify(this.props.availableTokens);\n    const accountInizialized = this.props.accountInizialized && prevProps.accountInizialized !== this.props.accountInizialized;\n    const contractsInitialized = this.props.contractsInitialized && prevProps.contractsInitialized !== this.props.contractsInitialized;\n\n    if (!viewOnly && (accountChanged || accountInizialized || contractsInitialized || strategyChanged || availableTokensChanged)){\n      this.checkModals();\n    }\n  }\n\n  async checkModals(){\n\n    if (this.props.selectedToken || !this.props.accountInizialized || !this.props.contractsInitialized || !this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    await this.checkBetaApproval();\n    await this.checkTokensToMigrate();\n    await this.checkWelcomeModal();\n    await this.checkProtocolsTokensBalances();\n  }\n\n  async checkBetaApproval(){\n    const isOriginUrl = this.functionsUtil.checkUrlOrigin();\n    const isBetaApproved = this.functionsUtil.getStoredItem('betaApproved',false,false);\n\n    // Show Beta Warning modal\n    if (!isOriginUrl && !isBetaApproved){\n      const activeModal = 'beta';\n      if (activeModal !== this.state.activeModal){\n        await this.setState({\n          activeModal,\n        });\n\n        return activeModal;\n      }\n    }\n  }\n\n  async checkTokensToMigrate(){\n\n    const showUpgradeModal = this.functionsUtil.getStoredItem('dontShowUpgradeModal',false,null) !== null ? false : true;\n    if (this.props.selectedToken || !showUpgradeModal || !this.props.availableTokens || this.state.activeModal !== null){\n      return null;\n    }\n\n    const tokensToMigrate = await this.functionsUtil.getTokensToMigrate();\n    const oldIdleTokensToMigrate = await this.functionsUtil.getProtocolsTokensBalances('idle');\n\n    // console.log('tokensToMigrate',tokensToMigrate);\n    \n    if ((tokensToMigrate && Object.keys(tokensToMigrate).length>0) || (oldIdleTokensToMigrate && Object.keys(oldIdleTokensToMigrate).length>0)){\n      const activeModal = 'upgrade';\n      if (activeModal !== this.state.activeModal){\n        await this.setState({\n          activeModal,\n          tokensToMigrate,\n          oldIdleTokensToMigrate\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkWelcomeModal(){\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show welcome modal\n    if (this.props.account && this.state.activeModal === null){\n      let welcomeIsOpen = false;\n\n      const welcomeModalProps = this.functionsUtil.getGlobalConfig(['modals','welcome']);\n\n      if (welcomeModalProps.enabled && localStorage){\n\n        // Check the last login of the wallet\n        const currTime = new Date().getTime();\n        const walletAddress = this.props.account.toLowerCase();\n        let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : {};\n\n        // First login\n        if (!lastLogin[walletAddress]){\n          lastLogin[walletAddress] = {\n            'signedUp':false,\n            'lastTime':currTime\n          };\n          welcomeIsOpen = true;\n        // User didn't sign up\n        } else if (!lastLogin[walletAddress].signedUp) {\n          const lastTime = parseInt(lastLogin[walletAddress].lastTime);\n          const timeFromLastLogin = (currTime-lastTime)/1000;\n          welcomeIsOpen = timeFromLastLogin>=welcomeModalProps.frequency; // 1 day since last login\n        }\n\n        if (welcomeIsOpen){\n          lastLogin[walletAddress].lastTime = currTime;\n          this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n        }\n      }\n\n      const activeModal = welcomeIsOpen ? 'welcome' : this.state.activeModal;\n      if (this.state.activeModal !== activeModal){\n        await this.setState({\n          activeModal\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkProtocolsTokensBalances() {\n\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show migration modal if no other modals are opened\n    const migrateModalEnabled = this.functionsUtil.getGlobalConfig(['modals','migrate','enabled']);\n    const showMigrateModal = this.functionsUtil.getStoredItem('dontShowMigrateModal',false,null) !== null ? false : true;\n\n    if (this.state.activeModal === null && migrateModalEnabled && showMigrateModal && !this.state.protocolsTokensBalances){\n      const protocolsTokensBalances = await this.functionsUtil.getProtocolsTokensBalances();\n      const activeModal = protocolsTokensBalances && Object.keys(protocolsTokensBalances).length>0 ? 'migrate' : null;\n      const newState = {\n        activeModal,\n        protocolsTokensBalances\n      };\n      await this.setState(newState);\n      return activeModal;\n    }\n\n    return null;\n  }\n\n  goToSection(section,isDashboard=true){\n\n    // Remove dashboard route\n    if (isDashboard){\n      section = section.replace(this.state.baseRoute +'/','');\n    }\n\n    const newRoute = isDashboard ? this.state.baseRoute +'/' + section : section;\n    window.location.hash=newRoute;\n\n    // Send GA event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'goToSection',\n      eventLabel: newRoute\n    });\n\n    window.scrollTo(0, 0);\n  }\n\n  logout = async () => {\n    this.props.setConnector('Infura','Infura');\n    await this.props.initWeb3('Infura');\n  }\n\n  changeToken(selectedToken){\n    selectedToken = selectedToken.toUpperCase();\n    if (Object.keys(this.props.availableTokens).includes(selectedToken)){\n      const routeParts = [];\n\n      // Add section\n      if (this.state.currentSection.toLowerCase() !== this.props.selectedStrategy.toLowerCase()){\n        routeParts.push(this.state.currentSection);\n      }\n\n      // Add strategy\n      routeParts.push(this.props.selectedStrategy); \n\n      // Add token\n      routeParts.push(selectedToken);\n\n      this.goToSection(routeParts.join('/'));\n    }\n  }\n\n  propagateClickEvent(clickEvent){\n    this.setState({\n      clickEvent:clickEvent.target\n    });\n  }\n\n  render() {\n    const PageComponent = this.state.pageComponent ? this.state.pageComponent : null;\n    return (\n      <Flex\n        width={'100%'}\n        position={'fixed'}\n        flexDirection={'row'}\n        className={this.props.themeMode}\n        backgroundColor={['dashboardBg','white']}\n        /*onClick={ e => this.propagateClickEvent(e) }*/\n        height={[(window.innerHeight-61)+'px','100vh']}\n      >\n        <Flex\n          bottom={0}\n          zIndex={99999}\n          width={[1,1/6]}\n          flexDirection={'column'}\n          position={['fixed','relative']}\n        >\n          <Card\n            p={[0,3]}\n            border={0}\n            width={['100vw','auto']}\n            height={['auto','100vh']}\n            backgroundColor={'menuBg'}\n            borderColor={this.props.theme.colors.menuRightBorder}\n            borderRight={`1px solid ${this.props.theme.colors.menuRightBorder}`}\n            >\n            <DashboardMenu\n              {...this.props}\n              menu={this.state.menu}\n            />\n          </Card>\n        </Flex>\n        <Flex\n          py={3}\n          mb={0}\n          px={[3,5]}\n          width={[1,5/6]}\n          style={{\n            overflowY:'scroll',\n            overflowX:'hidden'\n          }}\n          height={['92vh','auto']}\n          flexDirection={'columns'}\n          backgroundColor={'dashboardBg'}\n        >\n          {\n            !this.props.accountInizialized || !this.props.contractsInitialized || !PageComponent ? (\n              <Flex\n                width={1}\n                minHeight={'50vg'}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                {\n                  !this.props.network.isCorrectNetwork ? (\n                    <DashboardCard\n                      cardProps={{\n                        p:3,\n                        mt:3,\n                        width:[1,0.35]\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Icon\n                          size={'2.3em'}\n                          name={'Warning'}\n                          color={'cellText'}\n                        />\n                        <Text\n                          mt={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          The <strong>{this.functionsUtil.capitalize(this.props.network.current.name)} Network</strong> is not supported, please switch to the correct network.\n                        </Text>\n                      </Flex>\n                    </DashboardCard>\n                  ) : !this.state.showResetButton ? (\n                    <FlexLoader\n                      textProps={{\n                        textSize:4,\n                        fontWeight:2\n                      }}\n                      loaderProps={{\n                        mb:3,\n                        size:'40px'\n                      }}\n                      flexProps={{\n                        my:3,\n                        flexDirection:'column'\n                      }}\n                      text={ !this.props.accountInizialized ? 'Loading account...' : ( !this.props.contractsInitialized ? 'Loading contracts...' : 'Loading assets...' )}\n                    />\n                  ) : (\n                    <DashboardCard\n                      cardProps={{\n                        p:3,\n                        mt:3,\n                        width:[1,0.35]\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Icon\n                          size={'2.3em'}\n                          name={'Warning'}\n                          color={'cellText'}\n                        />\n                        <Text\n                          mt={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          Idle can't connect to your wallet!<br />Make sure that your wallet is unlocked and try again.\n                        </Text>\n                        <RoundButton\n                          buttonProps={{\n                            mt:3,\n                            width:[1,1/2]\n                          }}\n                          handleClick={this.logout.bind(this)}\n                        >\n                          Logout\n                        </RoundButton>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n              </Flex>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardHeader\n                  clickEvent={this.state.clickEvent}\n                  goToSection={this.goToSection.bind(this)}\n                  {...this.props}\n                />\n                {\n                  PageComponent &&\n                    <PageComponent\n                      {...this.props}\n                      match={{ params:{} }}\n                      urlParams={this.state.params}\n                      changeToken={this.changeToken.bind(this)}\n                      goToSection={this.goToSection.bind(this)}\n                      selectedSection={this.state.selectedSection}\n                      selectedSubsection={this.state.selectedSubsection}\n                      openTooltipModal={this.openTooltipModal.bind(this)}\n                      {...this.state.pageComponentProps}\n                      />\n                }\n              </Flex>\n            )\n          }\n        </Flex>\n        <BetaModal\n          closeModal={this.resetModal}\n          isOpen={this.state.activeModal === 'beta'}\n        />\n        <UpgradeModal\n          {...this.props}\n          closeModal={this.resetModal}\n          goToSection={this.goToSection.bind(this)}\n          tokensToMigrate={this.state.tokensToMigrate}\n          isOpen={this.state.activeModal === 'upgrade'}\n          oldIdleTokensToMigrate={this.state.oldIdleTokensToMigrate}\n        />\n        <MigrateModal\n          {...this.props}\n          closeModal={this.resetModal}\n          goToSection={this.goToSection.bind(this)}\n          isOpen={this.state.activeModal === 'migrate'}\n          protocolsTokensBalances={this.state.protocolsTokensBalances}\n        />\n        <TooltipModal\n          closeModal={this.resetModal}\n          title={this.state.modalTitle}\n          content={this.state.modalContent}\n          isOpen={this.state.activeModal === 'tooltip'}\n        />\n        <WelcomeModal\n          closeModal={this.resetModal}\n          account={this.props.account}\n          simpleID={this.props.simpleID}\n          network={this.props.network.current}\n          tokenName={this.props.selectedToken}\n          initSimpleID={this.props.initSimpleID}\n          baseTokenName={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'welcome'}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default Dashboard;"],"sourceRoot":""}