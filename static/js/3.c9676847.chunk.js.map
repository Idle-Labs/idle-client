{"version":3,"sources":["AssetsUnderManagement/AssetsUnderManagement.js","Stats/StatsChart.js","Rebalance/Rebalance.js","utilities/components/DateRangeModal.js","Stats/Stats.js","Utils/Utils.js","FundsOverview/FundsOverview.js","CurveRedeem/CurveRedeem.js","DepositRedeem/DepositRedeem.js","EstimatedEarnings/EstimatedEarnings.js","AssetPage/AssetPage.js","utilities/components/BetaModal.js","CurveDeposit/CurveDeposit.js","PortfolioEquityCurve/PortfolioEquityCurve.js","FundsOverviewCurve/FundsOverviewCurve.js","CurveStrategy/CurveStrategy.js","utilities/components/WelcomeModal.js","utilities/components/MigrateModal.js","utilities/components/UpgradeModal.js","Dashboard/Dashboard.js"],"names":["AssetsUnderManagement","state","totalAUM","totalAUMEndOfYear","functionsUtil","this","setProps","props","FunctionsUtil","loadUtils","loadTotalAUM","prevProps","prevState","contractsInitialized","availableStrategies","JSON","stringify","getAggregatedStats","avgAPY","plus","times","div","setState","_this2","react__WEBPACK_IMPORTED_MODULE_9___default","a","createElement","rimble_ui__WEBPACK_IMPORTED_MODULE_10__","width","react_countup__WEBPACK_IMPORTED_MODULE_8___default","delay","decimals","decimal","separator","useEasing","duration","start","parseFloat","end","formattingFn","n","formatMoney","_ref2","countUpRef","style","counterStyle","display","color","whiteSpace","fontFamily","theme","fonts","counter","fontWeight","fontWeights","textAlign","isMobile","fontSize","fontSizes","ref","subtitle","_Title_Title__WEBPACK_IMPORTED_MODULE_7__","Object","assign","subtitleProps","span","alignItems","justifyContent","loaderAlign","size","Component","StatsChart","chartProps","chartType","chartData","chartWidth","parseAum","value","parseInt","toFixed","_this","selectedToken","loadApiData","_callee3","maxGridLines","apiResults","apiResults_unfiltered","totalItems","protocols","versionInfo","keys","tempData","gridYStep","itemIndex","gridYValues","maxChartValue","axisBottomIndex","idleChartData","firstIdleBlock","divergingData","startTimestamp","endTimestamp","timestamp","date","lastRow","maxRange","i","_i","_i2","_i3","prevValue","_i4","prevApr","prevData","avgApy","startBalance","currentBalance","aaveProtocolInfo","_i5","firstTokenPrice","_i6","regenerator_default","wrap","_context3","prev","next","tokenConfig","chartMode","abrupt","length","globalConfigs","stats","versions","idleVersion","Line","t0","moment","_d","getTime","format","deposits","redeems","forEach","row","idleTokens","fixTokenDecimals","idleSupply","idleTokensPrev","eq","diff","minus","gte","Math","max","abs","values","filter","v","Bar","push","indexBy","enableLabel","minValue","maxValue","label","d","axisBottom","tickSize","legend","tickPadding","orient","legendOffset","legendPosition","tickValues","axisLeft","axisRight","tickRotation","abbreviateNumber","markers","axis","lineStyle","strokeOpacity","textStyle","fill","colors","transactions","action","deposit","legendOrientation","legendOffsetX","stroke","strokeDasharray","redeem","padding","labelTextColor","labelSkipWidth","labelSkipHeight","pointSize","useMesh","animate","pointLabel","curve","enableArea","enableSlices","enableGridX","enableGridY","pointBorderWidth","pointLabelYOffset","legends","dataFrom","itemWidth","itemHeight","translateX","translateY","symbolSize","itemsSpacing","direction","anchor","symbolShape","itemTextColor","effects","on","themeMode","ticks","text","sansSerif","grid","line","lineChartStroke","textTransform","tooltip","container","boxShadow","background","pointColor","from","modifiers","margin","top","right","bottom","left","data","xFormatted","strToMoment","indexValue","point","id","depositFormatted","redeemFormatted","react_default","CustomTooltip","CustomTooltipRow","tokens","hsl","join","map","idlePrice","aum","x","y","toString","p","j","protocolsData","protocolAllocation","protocolAddr","toLowerCase","address","z","BNify","rate","allocation","foundItem","item","pos","indexOf","allocations","name","undefined","xScale","type","xFormat","yFormat","yScale","stacked","showAdvanced","sliceTooltip","slideData","slice","points","serieId","serieColor","yFormatted","protocolName","protocolInfo","protocolColor","protocolAllocationFormatted","protocolAllocationPerc","key","concat","protocolData","protocolPaused","foundProtocol","find","tableCell","_ref3","DashboardCard","cardProps","py","px","borderCollapse","height","totalAllocation","reduce","accumulator","allocationPerc","_ref4","_ref5","enabled","protocolRate","lt","aaveAdditionalAPR","gt","idle","idleRate","protocolEarning","defiScore","isNaN","idleScore","apy","isSameOrBefore","aaveProtocolData","pData","apr","days","earnings","earning","blocknumber","itemPos","floor","additionalProtocols","additionalProtocol","protocol","enabledTokens","includes","unshift","objectSpread","tokensProps","tokenProps","isAfter","Date","now","rateField","chartRow","baseProfit","firstProtocolData","firstProtocolBlock","acc","field","rowData","idlePerformance","d1","protocolApy","tokenPrice","asyncForEach","_ref6","asyncToGenerator","mark","_callee2","lastRowData","lastTokenPrice","_context2","_ref7","_callee","tokenExchangeRate","tokenPriceFixed","lastYDiff","_context","price","stop","_x2","apply","arguments","_x","showAdvancedChanged","apiResultsChanged","tokenChanged","componentDidMount","GenericChart","showLoader","parentId","parentIdHeight","Rebalance","loading","processing","rebalance","txHash","shouldRebalance","componentUnmounted","checkRebalance","setStateSafe","sent","e","callback","callback_receipt","preventDefault","tx","error","eventData","eventLabel","status","eventCategory","eventAction","getTransactionError","sendGoogleAnalyticsEvent","window","toastProvider","addMessage","secondaryMessage","colorTheme","actionHref","actionText","variant","transactionHash","contractMethodSendWrapper","token","accountChanged","account","newState","index_es","minHeight","flexDirection","FlexLoader","flexProps","loaderProps","textProps","ml","TxProgressBar","waitText","endMessage","hash","mt","mb","RoundButton","buttonProps","disabled","handleClick","DateRangeModal","quickSelection","ranges","startDate","endDate","componentDidUpdate","selection","target","clone","subtract","closeModal","handleSelect","startTimestampObj","endTimestampObj","_this3","isOpen","ModalCard","closeFunc","Header","title","Body","backgroundColor","cardBg","required","onChange","handleQuickSelect","bind","options","dist","minDate","maxDate","className","Footer","my","mx","borderRadius","mainColor","onClick","React","Stats","delta","carouselMax","rebalances","buttonGroups","carouselIndex","statsVersions","minStartTime","govTokensPool","unlentBalance","carouselOffsetLeft","showRefreshIdleSpeed","dateRangeModalOpened","quickSelections","day","week","weeks","month","setDateRange","isSameOrAfter","isSame","add","isBefore","maxEndDate","toggleAdvancedCharts","setDateRangeModal","filterTokenData","r","setIdleVersion","isRisk","firstResult","lastResult","firstIdlePrice","lastIdlePrice","compoundInfo","firstCompoundData","lastCompoundData","compoundWithCOMPInfo","compoundAvgApr","firstCompoundPrice","lastCompoundPrice","compoundApr","availableTokens","selectedStrategy","getTokenApiData","pop","convertTokenBalance","sum","compoundWithCOMP","compoundData","compoundRate","index","prevRow","prevTotalAllocation","hasRebalanced","prevP","prevAllocation","getGovTokenPool","getUnlentBalance","selectToken","strategy","setStrategyToken","changeToken","handleCarousel","$element","jQuery","position","loadParams","latestVersion","version","enabledStrategies","strategiesParams","versionInfoExtra","param","params","match","currentNetworkAvailableTokens","customToken","toUpperCase","getLatestAvailableVersion","getVersionInfo","newEndTimestampObj","newStartTimestampObj","web3","initWeb3","loadCarousel","strategyChanged","dateChanged","versionChanged","idleTokenEnabled","getGlobalConfig","apyLong","textSize","statsTokens","versionsOptions","disabledCharts","performanceTooltip","versionDefaultValue","Breadcrumb","showPathMobile","goToSection","path","GenericSelector","innerProps","defaultValue","AssetSelector","isInteractive","pr","StatsCard","labelTooltip","SmartNumber","precision","lineHeight","unitProps","number","unit","VariationNumber","iconPos","iconSize","description","Stats_StatsChart","contracts","pb","pt","AllocationChart","src_Rebalance_Rebalance","pl","h4","RoundIconButton","mr","iconName","transition","titleParentProps","utilities_components_DateRangeModal","strategies","statsProtocols","strategyInfo","availableProtocolsKeys","availableProtocols","Title","titlePostfix","AssetsList","cols","fields","mobile","parentProps","overflow","desc","showTooltip","rgb","hoverColor","isActive","ExecuteTransaction","Button","componentProps","contractName","methodName","completed","Utils","SubComponent","selectedSubsection","subComponent","viewOnly","connectorName","showBreadCrumb","selectedSection","route","dangerouslySetInnerHTML","__html","directProps","toolProps","flexWrap","IconBox","maxWidth","icon","submenu","tool","toolIndex","flex","image","src","FundsOverview","aggregatedValues","govTokensTotalApr","govTokensUserBalance","govTokensDistribution","govTokensTotalBalance","govTokensTotalAprTooltip","idleTokenUserDistribution","govTokensDistributionTooltip","govTokensTotalBalanceTooltip","idleGovToken","getIdleGovToken","govTokenAvailableTokens","Promise","all","getUserDistribution","getGovTokensUserBalances","loadAssetField","depositTimestamp","getAvgAPYStats","lte","totBalance","govTokenBalance","govToken","balance","children","AssetField","fieldInfo","placement","message","PortfolioEquity","chartHeight","chartToken","frequencySeconds","getFrequencySeconds","component","Heading","h3","maxPrecision","govTokenIndex","tokenName","distributionFrequency","CurveRedeem","inputValue","maxSlippage","unevenAmounts","buttonDisabled","showMaxSlippage","redeemUnderlying","curveTokenConfig","curvePoolContract","curveSwapContract","curveTokenBalance","curveTokensAmounts","fastBalanceSelector","redeemUnevenAmounts","curveRedeemableIdleTokens","toggleUnevenAmounts","checkButtonDisabled","amount","changeInputValue","setFastBalanceSelector","setMaxSlippage","initToken","max_slippage","normalizedAmount","normalizeTokenAmount","withdrawSlippage","curveIdleTokensAmounts","getCurveTokensAmounts","getCurveIdleTokensAmounts","getCurveSlippage","getCurveTokenPrice","curveTokenPrice","redeemableBalance","redeemUnevenAmountsChanged","setInputValue","inputChanged","maxSlippageChanged","tokenConfigChanged","calculateSlippage","loadSelectedTokenConfig","selectedPercentage","curveConfig","getCurvePoolContract","getCurveSwapContract","getCurveTokenBalance","getCurveRedeemableIdleTokens","getCurveAvailableTokens","callbackRedeem","txSucceeded","eventValue","callbackReceiptRedeem","_amount","min_amounts","console","log","coin_index","migrationParams","coinIndex","min_amount","showSlippage","curveTokenName","cancelTransaction","checked","showBalance","selectDestinationToken","slippage","FastBalanceSelector","percentage","onMouseDown","failed","textOverflow","min","placeholder","border","divider","DepositRedeem","txError","tokenAPY","curveAPY","canRedeem","canDeposit","directMint","activeModal","tokenGovTokens","showBuyFlow","maxUnlentPerc","tokenApproved","skipMigration","redeemSkipGov","showRedeemFlow","contractPaused","canRedeemCurve","erc20ForwarderTx","signedParameters","minAmountForMint","redeemGovTokens","canDepositCurve","redeemSkipGovTokens","actionProxyContract","migrationEnabled","componentMounted","agreeSkipGovTokens","redeemCurveEnabled","depositCurveBalance","depositCurveEnabled","showAdvancedOptions","skipGovTokensGasSave","depositCurveSlippage","erc20ForwarderContract","erc20ForwarderEnabled","showETHWrapperEnabled","skipGovTokensGasSaveUSD","metaTransactionsEnabled","skippedGovTokensBalance","minAmountForMintReached","loadingErc20ForwarderTx","setShowRedeemFlow","setShowBuyFlow","toggleShowAdvancedOptions","toggleSkipMigration","toggleRedeemCurve","toggleDepositCurve","toggleShowETHWrapper","toggleAgreeSkipGovTokens","toggleSkipMint","toggleRedeemGovTokens","toggleRedeemSkipGov","getSkippedGovTokensFlags","govTokensIndexes","govTokensFlags","getGovTokensIndexes","calculateSkippedGovTokens","DAITokenConfig","_skipGovTokenRedeem","WETHTokenConfig","wethPrice","redeemGasUsage","skipGovRedeemGasUsage","govTokenConfig","govTokenPrice","skippedAmount","getUniswapConversionRate","govTokensUserBalances","estimateMethodGasUsage","idleTokenBalance","slicedToArray","setRedeemSkipGovTokens","splice","toggleErc20ForwarderEnabled","toggleMetaTransactionsEnabled","resetModal","setActiveModal","checkUseProxyContract","proxyContract","depositErc20ForwarderEnabled","depositMetaTransactionsEnabled","biconomy","approveContract","_callee4","callbackApprove","callbackReceiptApprove","curveDepositContract","_context4","enableERC20","checkTokenApproved","_callee5","_context5","approveToken","_callee6","_context6","approve","loadTokenInfo","_callee7","curveTokenEnabled","_ref10","_ref11","_context7","checkContractPaused","getCurveDepositContract","checkMigration","tokenBalance","getTokenGovTokens","boost","checkAction","loadAPY","_callee8","_context8","defineProperty","executeAction","_callee11","contractSendResult","callbackDeposit","callbackReceiptDeposit","curvePoolContractInfo","tokensToDeposit","amounts","minMintAmount","depositParams","_tokensToDeposit","_depositParams","mintProxyContractInfo","mintProxyContract","_mintProxyContract$me","functionCall","functionSignature","methodAbi","useNonce","_referral","txData","idleTokenToRedeem","idleTokenPriceWithFee","_callbackRedeem","_callbackReceiptRedeem","redeemMethod","redeemParams","_context11","getFastBalanceSelector","localStorage","setLocalStorage","lendingProcessing","lendAmount","genericError","getCurveAmounts","getCurveTokenAmount","integerValue","contract","methods","function","toConsumableArray","encodeABI","sendBiconomyTxWithPersonalSign","_jsonInterface","f","inputs","_callee10","metaInfo","permitOptions","erc20ForwarderBaseContract","permitValue","permitConfig","setValue","expiry","nonce","s","_context10","signPermit","t","allowed","holder","spender","permitData","permitType","asyncTimeout","sendBiconomyTxWithErc20Forwarder","request","_callee9","_erc20ForwarderContra","_functionCall","_functionSignature","gasLimit","_context9","estimateGas","buildBiconomyErc20ForwarderTx","getReferralAddress","getIdleTokenPriceWithFee","_callee12","_context12","setAction","loadProxyContracts","actions","_ref17","_callee15","erc20ForwarderContractInfo","hasProxyContract","_context15","initContract","abi","approved","_x5","getTokenAprs","tokenAprs","getCurveAPY","getQueryStringParameterByName","checkAddress","erc20ForwarderEnabledChanged","tokenBalanceChanged","actionChanged","fastBalanceSelectorChanged","redeemSkipGovChanged","redeemGovTokensChanged","agreeSkipGovTokensChanged","redeemSkipGovTokensChanged","depositCurveChanged","calculateCurveSlippage","showPoolPerc","convertedAmount","genericContractCall","depositPerc","maxUnlentPercFormatted","govTokensEnabled","govTokensDisabled","skipMintForDepositEnabled","skipMintForDeposit","redeemGovTokenEnabled","govTokensBalance","redeemSkipGovConfig","redeemSkipGovEnabled","disabledTokens","redeemSkipGovNoTokens","showAdvancedRedeemOptions","depositErc20ForwarderEnabledTokens","metaTransactionsAvailable","useMetaTx","erc20ForwarderClient","totalBalance","migrateText","migration","depositCurve","showDepositCurve","showRedeemCurve","showCurveSlippage","showAdvancedDepositOptions","batchDepositInfo","batchDepositEnabled","batchDepositDepositEnabled","depositEnabled","showBatchDeposit","isMigrationTool","ethWrapperInfo","ETHWrapperComponent","showETHWrapper","canPerformAction","showActionFlow","showReferral","Migrate","migrateTextBefore","TransactionField","transaction","isDisabled","openTooltipModal","isRainbow","cursor","m","CardIconButton","imageProps","ExtLink","href","getWalletProvider","capitalize","primary","fullWidth","cost","align","tokenFeesPercentage","borderColor","minWidth","ConnectBox","src_CurveRedeem_CurveRedeem","BuyModal","showInline","availableMethods","buyToken","ShareModal","confettiEnabled","tweet","EstimatedEarnings","maxInputValue","loadChart","getTokenApy","earningsYear","tokenApy","amountMonth","amount3Months","amount6Months","amountYear","perc","monthColor","month3","month3Color","month6","month6Color","year","yearColor","labelTextColorModifiers","gridYValue","_ref","labels","showAPYDisclaimer","verticalAlign","zIndex","AssetPage","tokenFees","idleTokenPrice","availableGovTokens","getTokenFees","getIdleTokenPrice","getTokenBalance","getUserTokenFees","getGovTokensUserTotalBalance","loadTokensInfo","selectedTokenChanged","availableTokensChanged","transactionsChanged","nexusMutualConfig","userHasFunds","src_DepositRedeem_DepositRedeem","ActiveCoverages","titleProps","src_FundsOverview_FundsOverview","src_EstimatedEarnings_EstimatedEarnings","TransactionsList","BetaModal","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","iconHeight","CurveDeposit","depositSlippage","migrationContract","curveTokensBalance","migrationSucceeded","migrationContractApproved","checkMigrationContractApproved","getMigrationParams","approveCallback","migrationCallback","idleTokenBalanceChanged","toMigrate","n_coins","underlyingBalanceToDeposit","normalizeIdleTokenBalance","hasCurveTokens","PortfolioEquityCurve","chartwidth","loadChartData","quickDateSelectionChanged","quickDateSelection","getCurveTxs","curveTxs","tokensBalance","processedTxs","firstTxTimestamp","timeStamp","curveTokens","currentDate","prevBalances","prevTimestamp","minChartValue","aggregatedBalancesKeys","tokensBalancesPerDate","aggregatedBalance","currTimestamp","tokensData","foundBalances","tokensBalances","momentDate","filteredTokenData","filteredBalances","lastFilteredTx","lastTokenData","lastTx","lastTxBalance","formattedDate","aggregatedBalanceParsed","aggregatedBalances","balances","yFormatDecimals","daysCount","daysFrequency","ceil","areaOpacity","areaBaselineValue","ChartCustomTooltip","ChartCustomTooltipRow","tokenInfo","hex","formattedBalance","FundsOverviewCurve","compAPR","getCurveAvgBuyPrice","getCurveAvgSlippage","src_PortfolioEquityCurve_PortfolioEquityCurve","redeemBalance","depositBalance","curveZapContract","curveAvailableTokens","changeFromToken","setSelectedToken","baseToken","getSelectedToken","urlParams","param1","getCurveZapContract","updateAssetSelector","curveTokensToRedeem","src_CurveDeposit_CurveDeposit","src_FundsOverviewCurve_FundsOverviewCurve","enabledActions","WelcomeModal","email","subscribed","sendingForm","sendUserInfo","sendEmail","walletProvider","userInfo","provider","simpleIDPassUserInfo","analytics","google","events","setTimeout","err","handleSubmit","assertThisInitialized","handleValidation","axios","post","newsletterSubscription","endpoint","then","catch","walletAddress","lastLogin","getItem","parse","signedUp","parentNode","classList","onSubmit","green","Field","Input","outline","header_styles","input","ButtonLoader","buttonText","isLoading","gradientButton","MigrateModal","dontShowAgain","toggleDontShowAgain","removeStoredItem","migrate","tokenMigrationRoute","fieldProps","protocolsTokensBalances","minPrecision","UpgradeModal","_args3","convert","convertTool","tokensToMigrate","tokenKey","oldContractBalanceFormatted","oldIdleTokensToMigrate","newTokenConfig","Dashboard","menu","baseRoute","clickEvent","currentRoute","pageComponent","currentSection","showResetButton","pageComponentProps","timeoutId","modalTitle","modalContent","logout","setConnector","comingSoon","selected","bgColor","visible","imageInactive","iconInactive","imageInactiveDark","iconInactiveDark","curveParams","CurveStrategy","stakeConfig","u","isExternalLink","section","param2","section_is_strategy","param1_is_strategy","param1_is_token","param2_is_token","sectionRoute","subm","sendGoogleAnalyticsPageview","clearTimeout","setCurrentSection","loadMenu","accountInizialized","initAccount","initializeContracts","checkModals","prevParams","checkBetaApproval","checkTokensToMigrate","checkWelcomeModal","checkProtocolsTokensBalances","isOriginUrl","checkUrlOrigin","isBetaApproved","getStoredItem","showUpgradeModal","getTokensToMigrate","getProtocolsTokensBalances","welcomeIsOpen","welcomeModalProps","currTime","lastTime","frequency","migrateModalEnabled","showMigrateModal","isDashboard","replace","newRoute","location","scrollTo","routeParts","PageComponent","innerHeight","menuRightBorder","borderRight","DashboardMenu","overflowY","overflowX","DashboardHeader","network","isCorrectNetwork","current","components_BetaModal","components_UpgradeModal","components_MigrateModal","TooltipModal","content","components_WelcomeModal","simpleID","initSimpleID","baseTokenName"],"mappings":"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","file":"static/js/3.c9676847.chunk.js","sourcesContent":["import Title from '../Title/Title';\nimport CountUp from 'react-countup';\nimport React, { Component } from 'react';\nimport { Box, Flex, Text, Loader } from \"rimble-ui\";\nimport FunctionsUtil from '../utilities/FunctionsUtil';\n\nclass AssetsUnderManagement extends Component {\n\n  state = {\n    totalAUM:null,\n    totalAUMEndOfYear:null\n  }\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.loadTotalAUM();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const availableStrategiesChanged = !prevProps.availableStrategies && JSON.stringify(prevProps.availableStrategies) !== JSON.stringify(this.props.availableStrategies);\n    if (availableStrategiesChanged || contractsInitialized){\n      this.loadTotalAUM();\n    }\n  }\n\n  async loadTotalAUM(){\n\n    if (!this.props.availableStrategies || !this.props.contractsInitialized){\n      return true;\n    }\n\n    const {\n      avgAPY,\n      totalAUM\n    } = await this.functionsUtil.getAggregatedStats();\n\n    const totalAUMEndOfYear = totalAUM.plus(totalAUM.times(avgAPY.div(100)));\n\n    this.setState({\n      totalAUM,\n      totalAUMEndOfYear\n    });\n  }\n\n  render() {\n    return this.state.totalAUM ? (\n      <Box\n        width={1}\n      >\n        <CountUp\n          delay={0}\n          decimals={4}\n          decimal={'.'}\n          separator={''}\n          useEasing={false}\n          duration={31536000}\n          start={parseFloat(this.state.totalAUM)}\n          end={parseFloat(this.state.totalAUMEndOfYear)}\n          formattingFn={ n => '$ '+this.functionsUtil.formatMoney(n,4) }\n        >\n          {({ countUpRef, start }) => (\n            <span\n              style={ this.props.counterStyle ? this.props.counterStyle : {\n                display:'block',\n                color:'dark-gray',\n                whiteSpace:'nowrap',\n                fontFamily:this.props.theme.fonts.counter,\n                fontWeight:this.props.theme.fontWeights[5],\n                textAlign: this.props.isMobile ? 'center' : 'right',\n                fontSize: this.props.isMobile ? '1.6em' : this.props.theme.fontSizes[6]\n              }}\n              ref={countUpRef}\n            />\n          )}\n        </CountUp>\n        {\n          (typeof this.props.subtitle === 'undefined' || this.props.subtitle) && (\n            <Title\n              fontWeight={3}\n              fontSize={[2,2]}\n              color={'cellTitle'}\n              textAlign={['center','right']}\n              {...this.props.subtitleProps}\n            >\n              {\n                this.props.subtitle ? this.props.subtitle : (\n                  <Text.span fontWeight={'inherit'} color={'inherit'} fontSize={'inherit'}>Assets Under Management <Text.span color={'cellTitle'} fontWeight={3} fontSize={'70%'}>(V3 + V4)</Text.span></Text.span>\n                )\n              }\n            </Title>\n          )\n        }\n      </Box>\n    ) : (\n      <Flex\n        alignItems={'center'}\n        justifyContent={this.props.loaderAlign || 'center'}\n      >\n        <Loader\n          size={\"30px\"}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default AssetsUnderManagement;\n","import moment from 'moment';\nimport { Bar } from '@nivo/bar';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CustomTooltip from '../CustomTooltip/CustomTooltip';\nimport CustomTooltipRow from '../CustomTooltip/CustomTooltipRow';\n\nclass StatsChart extends Component {\n  state = {\n    chartProps:{},\n    chartType:null,\n    chartData:null,\n    chartWidth:null\n  };\n\n  async componentDidMount() {\n    this.setState({\n      chartData:null,\n      chartType:null,\n      chartProps:null,\n    });\n    this.loadUtils();\n    this.loadApiData();\n  }\n\n  async componentDidUpdate(prevProps) {\n    const showAdvancedChanged = prevProps.showAdvanced !== this.props.showAdvanced;\n    const apiResultsChanged = prevProps.apiResults !== this.props.apiResults;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    if (apiResultsChanged || showAdvancedChanged || tokenChanged){\n      this.componentDidMount();\n    }\n  }\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  parseAum = value => {\n    return (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.tokenConfig || !this.props.selectedToken || !this.props.chartMode || !this.props.apiResults){\n      return false;\n    }\n\n    const maxGridLines = 4;\n    const apiResults = this.props.apiResults;\n    const apiResults_unfiltered = this.props.apiResults_unfiltered;\n    const totalItems = apiResults.length;\n    const protocols = Object.assign([],this.props.tokenConfig.protocols);\n    // const compoundProtocol = this.props.tokenConfig.protocols.find( p => (p.name === 'compound'));\n\n    const versionInfo = globalConfigs.stats.versions[this.props.idleVersion];\n\n    let keys = {};\n    let tempData = {};\n    let gridYStep = 0;\n    let itemIndex = 0;\n    let chartData = [];\n    let chartProps = {};\n    let chartType = Line;\n    let gridYValues = [];\n    let maxChartValue = 0;\n    let axisBottomIndex = 0;\n    let idleChartData = null;\n    let firstIdleBlock = null;\n\n    switch (this.props.chartMode){\n      case 'VOL':\n        let divergingData = {};\n\n        const startTimestamp = parseInt(apiResults_unfiltered[0].timestamp);\n        const endTimestamp = parseInt(moment()._d.getTime()/1000);\n\n        for (let timestamp=startTimestamp;timestamp<=endTimestamp;timestamp+=86400){\n          const date = moment(timestamp*1000).format(\"YYYY/MM/DD\");\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n        }\n\n        let lastRow = null;\n        apiResults_unfiltered.forEach(row => {\n          const date = moment(row.timestamp*1000).format(\"YYYY/MM/DD\");\n          const idleTokens = this.functionsUtil.fixTokenDecimals(row.idleSupply,18);\n\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp:row.timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n\n          if (lastRow){\n            const idleTokensPrev = this.functionsUtil.fixTokenDecimals(lastRow.idleSupply,18);\n            const idleTokensDiff = !idleTokens.eq(idleTokensPrev);\n            if (idleTokensDiff){\n              const diff = idleTokens.minus(idleTokensPrev);\n              // Deposits\n              if (diff.gte(0)){\n                divergingData[date].deposits+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,divergingData[date].deposits);\n              } else {\n                divergingData[date].redeems+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,Math.abs(divergingData[date].deposits));\n              }\n            }\n\n          } else {\n            divergingData[date].deposits+=parseFloat(idleTokens);\n          }\n\n          lastRow = row;\n        });\n\n        chartData = Object.values(divergingData).filter(v => {\n          return (!this.props.startTimestamp || v.timestamp>=this.props.startTimestamp) && (!this.props.endTimestamp || v.timestamp<=this.props.endTimestamp);\n        });\n\n        let maxRange = 0;\n        chartData.forEach(v => {\n          maxRange = Math.max(maxRange,Math.abs(v.deposits),Math.abs(v.redeems));\n        })\n\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          indexBy: 'date',\n          enableLabel: false,\n          minValue:-maxRange,\n          maxValue:maxRange,\n          label: d => {\n            return Math.abs(d.value);\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days',\n          },\n          axisLeft: null,\n          axisRight: {\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:8,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(Math.abs(v),0)\n          },\n          markers: [\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { strokeOpacity: 0 },\n              textStyle: { fill: this.props.theme.colors.transactions.action.deposit },\n              legend: 'deposits',\n              legendPosition: 'top-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { stroke: this.props.theme.colors['dark-gray'], strokeDasharray: '5 3' },\n              textStyle: { fill: this.props.theme.colors.transactions.action.redeem },\n              legend: 'redeems',\n              legendPosition: 'bottom-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n          ],\n          keys:['deposits','redeems'],\n          padding:0.4,\n          colors:[this.props.theme.colors.transactions.action.deposit, this.props.theme.colors.transactions.action.redeem],\n          labelTextColor: 'inherit:darker(1.4)',\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 80 : 100,\n              itemHeight: 18,\n              translateX: 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            },\n            tooltip:{\n              container:{\n                boxShadow:null,\n                background:null\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 50, bottom: 45, left: 50 } : { top: 20, right: 70, bottom: 70, left: 50 },\n          tooltip:(data) => {\n            const xFormatted = this.functionsUtil.strToMoment(data.indexValue).format('MMM DD');\n            const point = {\n              id:data.id,\n              data:{\n                xFormatted\n              }\n            };\n            const depositFormatted = this.functionsUtil.abbreviateNumber(data.data.deposits,2)+' '+this.props.selectedToken;\n            const redeemFormatted = this.functionsUtil.abbreviateNumber(data.data.redeems,2)+' '+this.props.selectedToken;\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                <CustomTooltipRow\n                  label={'Deposits'}\n                  color={this.props.theme.colors.deposit}\n                  value={depositFormatted}\n                />\n                <CustomTooltipRow\n                  label={'Redeem'}\n                  color={this.props.theme.colors.redeem}\n                  value={redeemFormatted}\n                />\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      /*\n      case 'AUM_ALL':\n        await this.functionsUtil.asyncForEach(Object.keys(availableTokens[globalConfigs.network.requiredNetwork]),async (tokenName,i) => {\n          const tokenConfig = availableTokens[globalConfigs.network.requiredNetwork][tokenName];\n          const tokenDataApi = await this.props.getTokenData(tokenConfig.address);\n          chartData.push({\n            id:tokenName,\n            color: tokenConfig.color,\n            data: tokenDataApi.map((d,i) => {\n              const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n              const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,tokenConfig.decimals);\n              const aum = idleTokens.times(idlePrice);\n              return {\n                x: moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\"),\n                y: parseInt(aum.toString())\n              };\n            })\n          });\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken,\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v),\n            orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            legendPosition: 'middle'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            format: '%b %d',\n            tickValues: this.props.isMobile ? 'every 4 days' : 'every 3 days',\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 36,\n            legendPosition: 'middle'\n          },\n          enableArea:false,\n          curve:\"linear\",\n          enableSlices:'x',\n          enableGridX:true,\n          enableGridY:false,\n          colors:d => d.color,\n          pointSize:0,\n          pointColor:{ from: 'color', modifiers: []},\n          pointBorderWidth:1,\n          pointLabel:\"y\",\n          pointLabelYOffset:-12,\n          useMesh:true,\n          animate:false,\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 60, bottom: 40, left: 60 },\n        };\n      break;\n      */\n      case 'AUM':\n\n        maxChartValue = 0;\n\n        chartData.push({\n          id:'AUM',\n          color: 'hsl('+globalConfigs.stats.tokens[this.props.selectedToken].color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n            const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n            const aum = idleTokens.times(idlePrice);\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(aum.toString());\n\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x,y };\n          })\n        });\n\n        // Add allocation\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          apiResults.map((d,i) => {\n            return d.protocolsData.filter((protocolAllocation,x) => {\n                return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            })\n            .map((protocolAllocation,z) => {\n              const protocolPaused = this.functionsUtil.BNify(protocolAllocation.rate).eq(0);\n              if (!protocolPaused){\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals));\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                let foundItem = chartData[0].data.filter(item => { return item.x === x });\n                if (foundItem){\n                  foundItem = foundItem[0];\n                  const pos = chartData[0].data.indexOf(foundItem);\n                  if (!foundItem.allocations){\n                    foundItem.allocations = {};\n                  }\n                  foundItem.allocations[p.name] = y;\n                  chartData[0].data[pos] = foundItem;\n                }\n              }\n              return undefined;\n            })[0]\n          }).filter((v) => { return v !== undefined; } )\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:v => this.functionsUtil.formatMoney(v,v<1 ? 3 :0),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 0,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:true,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            if (typeof point === 'object' && typeof point.data === 'object'){\n              return (\n                <CustomTooltip\n                  point={point}\n                >\n                  <CustomTooltipRow\n                    label={point.serieId}\n                    color={point.serieColor}\n                    value={point.data.yFormatted}\n                  />\n                  {\n                    point.data.allocations && typeof point.data.allocations === 'object' &&\n                      Object.keys(point.data.allocations).map(protocolName => {\n                        const protocolInfo = globalConfigs.stats.protocols[protocolName];\n                        const protocolColor = 'hsl('+protocolInfo.color.hsl.join(',')+')';\n                        const protocolAllocation = point.data.allocations[protocolName];\n                        const protocolAllocationFormatted = this.functionsUtil.formatMoney(protocolAllocation,protocolAllocation<1 ? 3 : 0);\n                        const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                        return (\n                          <CustomTooltipRow\n                            color={protocolColor}\n                            label={protocolInfo.label}\n                            key={`${point.id}_${protocolName}`}\n                            value={`${protocolAllocationFormatted} (${protocolAllocationPerc})`}\n                          />\n                        );\n                      })\n                  }\n                </CustomTooltip>\n              );\n              /*\n              return (\n                <div\n                    key={point.id}\n                    style={{\n                      background: 'white',\n                      color: 'inherit',\n                      fontSize: 'inherit',\n                      borderRadius: '2px',\n                      boxShadow: 'rgba(0, 0, 0, 0.25) 0px 1px 2px',\n                      padding: '5px 9px'\n                    }}\n                >\n                  <div>\n                    <table style={{width:'100%',borderCollapse:'collapse'}}>\n                      <tbody>\n                        <tr>\n                          <td style={{padding:'3px 5px'}}>\n                            <span style={{display:'block', width: '12px', height: '12px', background: point.serieColor}}></span>\n                          </td>\n                          <td style={{padding:'3px 5px'}}>{point.serieId}</td>\n                          <td style={{padding:'3px 5px'}}><strong>{point.data.yFormatted}</strong></td>\n                        </tr>\n                        {\n                          point.data.allocations && typeof point.data.allocations === 'object' &&\n                            Object.keys(point.data.allocations).map(protocolName => {\n                              const protocolColor = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n                              const protocolAllocation = this.functionsUtil.formatMoney(point.data.allocations[protocolName],0);\n                              const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                              return (\n                                <tr key={`${point.id}_${protocolName}`}>\n                                  <td style={{padding:'3px 5px'}}>\n                                    <span style={{display:'block', width: '12px', height: '12px', background: protocolColor}}></span>\n                                  </td>\n                                  <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{protocolName}</td>\n                                  <td style={{padding:'3px 5px'}}><strong>{protocolAllocation}</strong> ({protocolAllocationPerc})</td>\n                                </tr>\n                              );\n                            })\n                        }\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              );\n              */\n            }\n\n            return null;\n          }\n        };\n      break;\n      case 'ALL':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\");\n\n          let row = {\n            date\n          };\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const foundProtocol = this.props.tokenConfig.protocols.find((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() });\n            if (foundProtocol){\n              const protocolInfo = globalConfigs.stats.protocols[foundProtocol.name];\n              if (!protocolPaused){\n                let allocation = parseFloat(this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals));\n                keys[protocolInfo.label] = 1;\n                row[protocolInfo.label] = allocation;\n                row[`${protocolInfo.label}Color`] = 'hsl('+protocolInfo.color.hsl.join(',')+')';\n                // console.log(protocolInfo.label,this.functionsUtil.BNify(protocolData.allocation).toString(),this.props.tokenConfig.decimals,allocation);\n                maxChartValue = Math.max(maxChartValue,allocation);\n              } else {\n                row[protocolInfo.label] = 0;\n              }\n            }\n          });\n\n\n          tempData[date] = row;\n        });\n\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n            orient: 'left',\n            tickSize: 0,\n            tickPadding: 10,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            tickValues:gridYValues,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickSize: 0,\n            tickPadding: 10,\n            orient: 'bottom-left',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days'\n          },\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            tooltip: {\n              container:{\n                padding:'0',\n                boxShadow:'none',\n                background:'transparent',\n              },\n              tableCell:{\n                padding:'0'\n              }\n            },\n            axis: {\n              ticks: {\n                text: {\n                  fontSize:this.props.isMobile ? 12 : 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize:this.props.isMobile ? 12 : 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 60 },\n          tooltip:({ id, value, color }) => {\n            const allocation = this.functionsUtil.formatMoney(value,0);\n            return (\n              <DashboardCard\n                cardProps={{\n                  py:1,\n                  px:2,\n                  width:1,\n                }}\n              >\n                <table\n                  style={{width:'100%',borderCollapse:'collapse'}}\n                >\n                  <tbody>\n                    <tr>\n                      <td style={{padding:'3px 5px'}}>\n                        <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                      </td>\n                      <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                      <td style={{padding:'3px 5px'}}><strong>{allocation} {this.props.selectedToken}</strong></td>\n                    </tr>\n                  </tbody>\n                </table>\n              </DashboardCard>\n            )\n          }\n        }\n      break;\n      case 'ALL_PERC':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\")\n          let row = {\n            date:moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\")\n          };\n          if (tempData[date]){\n            row = tempData[date];\n          }\n\n          const totalAllocation = d.protocolsData.reduce((accumulator,protocolAllocation) => {\n            const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n            return this.functionsUtil.BNify(accumulator).plus(allocation);\n          },0);\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const protocolName = this.props.tokenConfig.protocols.filter((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() })[0].name;\n            if (!protocolPaused){\n              const allocation = this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals);\n              const allocationPerc = parseFloat(allocation.div(totalAllocation).times(100));\n              keys[protocolName] = 1;\n              row[protocolName] = allocationPerc;\n              row[`${protocolName}Color`] = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n            } else if (typeof row[protocolName] !== undefined) {\n              row[protocolName] = 0;\n            } \n          });\n          \n          tempData[date] = row;\n        });\n\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          data: chartData,\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 40, bottom: 40, left: 60 },\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => parseInt(v)+'%'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            orient: 'bottom',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days'\n          },\n          tooltip:({ id, value, color }) => {\n            const allocation = parseInt(value)===100 ? this.functionsUtil.formatMoney(value,0) : this.functionsUtil.formatMoney(value,2);\n            return (\n              <table style={{width:'100%',borderCollapse:'collapse'}}>\n                <tbody>\n                  <tr>\n                    <td style={{padding:'3px 5px'}}>\n                      <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                    </td>\n                    <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                    <td style={{padding:'3px 5px'}}><strong>{allocation}%</strong></td>\n                  </tr>\n                </tbody>\n              </table>\n            )\n          }\n        }\n      break;\n      case 'APR':\n\n        maxChartValue = 0;\n\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n          if (!protocolInfo.enabled){\n            return;\n          }\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n          chartData.push({\n            id:protocolInfo.label,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                let protocolRate = this.functionsUtil.BNify(protocolAllocation.rate);\n                const protocolPaused = protocolRate.eq(0);\n                if (!protocolPaused){\n\n                  // Aave V1 wrong rate FIX\n                  if (protocolRate.lt(0) && protocolAllocation.aaveAdditionalAPR && this.functionsUtil.BNify(protocolAllocation.aaveAdditionalAPR).gt(0)){\n                    protocolRate = protocolRate.plus(this.functionsUtil.BNify(protocolAllocation.aaveAdditionalAPR));\n                  }\n\n                  protocolRate = this.functionsUtil.fixTokenDecimals(protocolRate,18);\n\n                  const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                  const y = parseFloat(protocolRate);\n\n                  maxChartValue = Math.max(maxChartValue,y);\n\n                  return { x, y };\n                }\n                return undefined;\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color:'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data:apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(this.functionsUtil.fixTokenDecimals(d.idleRate,18));\n            maxChartValue = Math.max(maxChartValue,y);\n            return { x, y };\n          })\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(2)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    // const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'SCORE':\n\n        let prevValue = 0;\n        maxChartValue = 0;\n\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n          if (!protocolInfo.enabled){\n            return;\n          }\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n          chartData.push({\n            id:protocolInfo.label,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(protocolAllocation.defiScore);\n\n                y = isNaN(y) || !y ? prevValue : y;\n                prevValue = y;\n                maxChartValue = Math.max(maxChartValue,y);\n\n                return { x, y };\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            let y = parseFloat(d.idleScore);\n            y = isNaN(y) || !y ? prevValue : y;\n            prevValue = y;\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x, y };\n          })\n        });\n\n        // debugger;\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(1),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 0,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE_V4':\n\n        itemIndex = 0;\n        maxChartValue = 0;\n        // let prevApy = null;\n        let prevApr = null;\n        let prevData = null;\n        let avgApy = this.functionsUtil.BNify(0);\n        let startBalance = this.functionsUtil.BNify(1);\n        let currentBalance = this.functionsUtil.BNify(1);\n\n        idleChartData = [];\n        const aaveProtocolInfo = protocols.find( p => p.name === 'aavev2' );\n\n        apiResults.forEach((d,i) => {\n\n          let idleRate = this.functionsUtil.BNify(d.idleRate);\n          let y = 0;\n          let apy = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n\n          // Aave V1 wrong rate FIX\n          if (this.props.selectedToken === 'WETH' && moment(x).isSameOrBefore(moment('2021-05-19 12:20','YYYY-MM-DD HH:mm'))){\n            const aaveProtocolData = aaveProtocolInfo ? d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === aaveProtocolInfo.address.toLowerCase()\n            }) : null;\n            if (aaveProtocolData.aaveAdditionalAPR && this.functionsUtil.BNify(aaveProtocolData.aaveAdditionalAPR).gt(0)){\n              idleRate = idleRate.plus(this.functionsUtil.BNify(aaveProtocolData.aaveAdditionalAPR));\n            }\n          }\n\n          const apr = this.functionsUtil.fixTokenDecimals(idleRate,18).div(100);\n          // const apy = this.functionsUtil.apr2apy(apr);\n          \n          avgApy = avgApy.plus(apr.times(100));\n\n          if (prevApr){\n            const days = (d.timestamp-prevData.timestamp)/86400;\n            // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n            const earnings = currentBalance.times(prevApr.times(days).div(365));\n            currentBalance = currentBalance.plus(earnings);\n\n            const earning = currentBalance.div(startBalance).minus(1).times(100);\n            y = parseFloat(earning);\n\n            // apy = earning.times(365).div(totDays).toFixed(2);\n            apy = avgApy.div(i+1).toFixed(2);\n          }\n\n          prevData = d;\n          // prevApy = apy;\n          prevApr = apr;\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          if (apy>0){\n            idleChartData.push({ x, y, apy, blocknumber, itemPos });\n          }\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo && additionalProtocol.enabledTokens.includes(this.props.selectedToken)){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        protocols.forEach( p => {\n\n          const protocolInfo = {...globalConfigs.stats.protocols[p.name]};\n\n          if (protocolInfo.tokensProps && protocolInfo.tokensProps[this.props.selectedToken]){\n            const tokenProps = protocolInfo.tokensProps[this.props.selectedToken];\n            Object.keys(tokenProps).forEach(p => {\n              protocolInfo[p] = tokenProps[p];\n            });\n          }\n\n          if (!protocolInfo.enabled || (protocolInfo.startTimestamp && this.functionsUtil.strToMoment(protocolInfo.startTimestamp).isAfter(Date.now()))){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          // prevApy = null;\n          prevApr = null;\n          prevData = null;\n          let baseProfit = 0;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n          avgApy = this.functionsUtil.BNify(0);\n          startBalance = this.functionsUtil.BNify(1);\n          currentBalance = this.functionsUtil.BNify(1);\n          const apiResults_filtered = apiResults.filter( d => (!protocolInfo.startTimestamp || moment(protocolInfo.startTimestamp).isSameOrBefore(moment(d.timestamp*1000))) );\n\n          apiResults_filtered.forEach( (d,i) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              let protocolRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n                if (protocolData[field]){\n                  return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(protocolData[field]));\n                }\n                return this.functionsUtil.BNify(acc);\n              },0) : this.functionsUtil.BNify(protocolData[rateField]);\n\n              // Aave V1 wrong rate FIX\n              if (protocolRate.lt(0) && protocolData.aaveAdditionalAPR && this.functionsUtil.BNify(protocolData.aaveAdditionalAPR).gt(0)){\n                protocolRate = protocolRate.plus(this.functionsUtil.BNify(protocolData.aaveAdditionalAPR));\n              }\n\n              const protocolPaused = protocolRate.eq(0);\n              if (!protocolPaused){\n\n                let rowData = {};\n\n                let y = 0;\n                let apy = 0;\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                const apr = this.functionsUtil.fixTokenDecimals(protocolRate,18).div(100);\n\n                avgApy = avgApy.plus(apr.times(100));\n                // const apy = this.functionsUtil.apr2apy(apr);\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null) {\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => (d1.blocknumber>=firstProtocolBlock) );\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                      y = baseProfit;\n                      apy = avgApy.toFixed(2);\n                    }\n                  }\n                }\n\n                if (prevData) {\n                  const days = (d.timestamp-prevData.timestamp)/86400;\n                  // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n                  const earnings = currentBalance.times(prevApr.times(days).div(365));\n                  currentBalance = currentBalance.plus(earnings);\n\n                  const earning = currentBalance.div(startBalance).minus(1).times(100);\n                  y = parseFloat(earning)+baseProfit;\n\n                  apy = avgApy.div(i+1).toFixed(2);\n                }\n\n                prevData = d;\n                prevApr = apr;\n\n                if (firstIdleBlock === null){\n                  firstIdleBlock = parseInt(d.blocknumber);\n                }\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                const itemPos = Math.floor(itemIndex/totalItems*100);\n                // const blocknumber = d.blocknumber;\n\n                itemIndex++;\n\n                if (apy>0){\n                  rowData = {\n                    x,\n                    y,\n                    apy,\n                    itemPos\n                  };\n\n                  itemIndex++;\n                  chartRow.data.push(rowData);\n                }\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          data: idleChartData,\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')'\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              itemWidth: this.props.isMobile ? 70 : 160,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE':\n        // let prevTokenPrice = null;\n        maxChartValue = 0;\n        let firstTokenPrice = null;\n\n        idleChartData = apiResults.map((d,i) => {\n\n          let y = 0;\n          let apy = 0;\n          let days = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n          const tokenPrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n\n          if (!firstTokenPrice){\n            firstTokenPrice = tokenPrice;\n          } else {\n            y = parseFloat(tokenPrice.div(firstTokenPrice).minus(1).times(100));\n\n            days = (d.timestamp-apiResults[0].timestamp)/86400;\n            const earning = tokenPrice.div(firstTokenPrice).minus(1).times(100);\n            apy = earning.times(365).div(days).toFixed(2);\n\n            // console.log(firstTokenPrice.toString(),tokenPrice.toString(),earning.toString(),days,y,apy);\n          }\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          return { x, y, apy, blocknumber, itemPos };\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo && additionalProtocol.enabledTokens.includes(this.props.selectedToken)){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        await this.functionsUtil.asyncForEach(protocols,async (p) => {\n\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n\n          if (!protocolInfo.enabled){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          let baseProfit = 0;\n          firstTokenPrice = null;\n          let lastRowData = null;\n          let lastTokenPrice = null;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n\n          await this.functionsUtil.asyncForEach(apiResults,async (d) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData && protocolData[rateField]){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              const protocolPaused = this.functionsUtil.BNify(protocolData[rateField]).eq(0);\n              if (!protocolPaused){\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null){\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => {\n                      return d1.blocknumber>=firstProtocolBlock;\n                    });\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                    }\n                  }\n                }\n\n                let rowData = {};\n                let tokenExchangeRate = protocolData.price;\n                let tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n\n                // Take data from\n                if (protocolInfo && protocolInfo.data && protocolInfo.data[p.address.toLowerCase()] && protocolInfo.data[p.address.toLowerCase()][d.blocknumber]){\n                  tokenExchangeRate = this.functionsUtil.BNify(globalConfigs.stats.protocols[p.name].data[p.address.toLowerCase()][d.blocknumber]);\n                  tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                }/* else if (p.name === 'aave'){\n                  // Token holders (aDAI = 0xc025c03e10f656d3ee76685d53d236824d8ef3da , aUSDC = 0xd2c734fbd8f5d1c809185e014016dd4097e94711)\n                  let aaveTokenBalance = await this.functionsUtil.genericContractCall(p.token,'balanceOf',['0xd2c734fbd8f5d1c809185e014016dd4097e94711'],{},d.blocknumber);\n                  if (aaveTokenBalance){\n                    if (!Object.values(aave_data).length){\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(1,p.decimals);\n                      aave_data[d.blocknumber] = aaveTokenBalance.toString();\n                    } else {\n                      const firstBalance = Object.values(aave_data)[0];\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(this.functionsUtil.BNify(aaveTokenBalance).div(this.functionsUtil.BNify(firstBalance)).toFixed(p.decimals),p.decimals);\n                      aave_data[d.blocknumber] = tokenExchangeRate.toString();\n                    }\n                  }\n                }\n                */\n\n                let y = baseProfit;\n                let apy = 0;\n\n                if (!firstTokenPrice){\n                  firstTokenPrice = tokenPriceFixed;\n                } else {\n                  if (tokenPriceFixed.lt(lastTokenPrice)){\n                    firstTokenPrice = tokenPriceFixed;\n                    const lastYDiff = chartRow.data[chartRow.data.length-1].y-chartRow.data[chartRow.data.length-2].y;\n                    y = lastRowData.y+lastYDiff;\n                    baseProfit = y;\n                  } else {\n                    y += parseFloat(tokenPriceFixed.div(firstTokenPrice).minus(1).times(100));\n                  }\n\n                  const days = (d.timestamp-apiResults[0].timestamp)/86400;\n                  const earning = tokenPriceFixed.div(firstTokenPrice).minus(1).times(100);\n                  apy = earning.times(365).div(days).toFixed(2);\n                }\n\n                y = Math.max(0,y);\n                maxChartValue = Math.max(maxChartValue,y);\n\n                const itemPos = Math.floor(itemIndex/totalItems*100);\n\n                rowData = {\n                  x,\n                  y,\n                  apy,\n                  itemPos\n                };\n\n                itemIndex++;\n                lastRowData = rowData;\n                chartRow.data.push(rowData);\n                lastTokenPrice = tokenPriceFixed;\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: idleChartData\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              itemWidth: this.props.isMobile ? 70 : 100,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      chartType,\n      chartProps,\n      chartData\n    });\n  }\n\n  render() {\n    return(\n      <GenericChart\n        showLoader={true}\n        {...this.state.chartProps}\n        height={this.props.height}\n        type={this.state.chartType}\n        data={this.state.chartData}\n        width={this.state.chartWidth}\n        isMobile={this.props.isMobile}\n        parentId={this.props.parentId}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default StatsChart;","import { Flex, Text } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\n\nclass Rebalance extends Component {\n\n  state = {\n    loading:true,\n    processing:{\n      rebalance:{\n        txHash:null,\n        loading:false\n      },\n    },\n    shouldRebalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n  componentUnmounted = false;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillUnmount(){\n    this.componentUnmounted = true;\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.checkRebalance();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged || accountChanged){\n      this.checkRebalance();\n    }\n  }\n\n  async setStateSafe(newState,callback=null) {\n    if (!this.componentUnmounted){\n      return this.setState(newState,callback);\n    }\n    return null;\n  }\n\n  checkRebalance = async () => {\n    this.setStateSafe({\n      loading:true,\n    });\n\n    const shouldRebalance = await this.functionsUtil.checkRebalance(this.props.tokenConfig);\n\n    this.setStateSafe({\n      loading:false,\n      shouldRebalance\n    });\n  }\n\n  rebalance = async (e) => {\n    e.preventDefault();\n\n    const callback = (tx,error) => {\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: 'Rebalance',\n        eventAction: this.props.selectedToken,\n      };\n\n      let txDenied = false;\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      if (tx.status === 'success'){\n        // Toast message\n        window.toastProvider.addMessage(`Rebalance completed`, {\n          secondaryMessage: `Now the pool is balanced!`,\n          colorTheme: 'light',\n          actionHref: \"\",\n          actionText: \"\",\n          variant: \"success\",\n        });\n\n      } else if (!txDenied){\n        window.toastProvider.addMessage(`Rebalance error`, {\n          secondaryMessage: `The rebalance has failed, try again...`,\n          colorTheme: 'light',\n          actionHref: \"\",\n          actionText: \"\",\n          variant: \"failure\",\n        });\n      }\n\n      this.setStateSafe((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          rebalance:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n\n      this.checkRebalance();\n    }\n\n    const callback_receipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setStateSafe((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            rebalance:{\n              ...prevState.processing.rebalance,\n              txHash\n            }\n          }\n        })\n      );\n    };\n\n    this.props.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'rebalance', [], null , callback, callback_receipt);\n\n    this.setStateSafe({\n      processing:{\n        rebalance:{\n          txHash:null,\n          loading:true\n        }\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Flex\n        px={3}\n        width={1}\n        minHeight={'100px'}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n      {\n        this.state.loading ? (\n          <FlexLoader\n            flexProps={{\n              flexDirection:'row'\n            }}\n            loaderProps={{\n              size:'30px'\n            }}\n            textProps={{\n              ml:2\n            }}\n            text={'Checking rebalance...'}\n          />\n        ) : (\n          this.state.processing.rebalance.loading ? (\n            <TxProgressBar {...this.props} waitText={`Rebalance estimated in`} endMessage={`Finalizing rebalance request...`} hash={this.state.processing.rebalance.txHash} />\n          ) : (\n            <Flex\n              width={1}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                mt={0}\n                mb={3}\n                textAlign={'center'}\n              >\n                {this.state.shouldRebalance ? 'Rebalance the entire pool. All users will bless you.' : 'The pool is already balanced.'}\n              </Text>\n              <RoundButton\n                buttonProps={{\n                  width:'auto',\n                  disabled:!this.state.shouldRebalance\n                }}\n                handleClick={e => this.rebalance(e)}\n              >\n                Rebalance\n              </RoundButton>\n            </Flex>\n          )\n        )\n      }\n      </Flex>\n    )\n  }\n}\n\nexport default Rebalance;","import React from \"react\";\nimport {\n  Modal,\n  Button,\n  Flex,\n  Field,\n  Select\n} from \"rimble-ui\";\nimport moment from 'moment';\nimport ModalCard from './ModalCard';\nimport 'react-date-range/dist/styles.css';\nimport { DateRange } from 'react-date-range';\nimport 'react-date-range/dist/theme/default.css';\nimport './DateRangeModal.css';\n\nclass DateRangeModal extends React.Component {\n\n  state = {\n    quickSelection:'',\n    ranges:{\n      startDate: this.props.startDate ? this.props.startDate : new Date(),\n      endDate: this.props.endDate ? this.props.endDate : new Date(),\n      key: 'selection'\n    }\n  }\n\n  handleSelect(ranges){\n    this.setState({\n      quickSelection:'',\n      ranges:ranges.selection\n    });\n  }\n\n  handleQuickSelect(e){\n    let startDate = null;\n    let endDate = moment(new Date());\n    const quickSelection = e.target.value;\n\n    switch (quickSelection){\n      case 'day':\n        startDate = endDate.clone().subtract(1,'day');\n      break;\n      case 'week':\n        startDate = endDate.clone().subtract(1,'week');\n      break;\n      case 'weeks':\n        startDate = endDate.clone().subtract(2,'week');\n      break;\n      case 'month':\n        startDate = endDate.clone().subtract(1,'month');\n      break;\n      default:\n        startDate = null;\n        endDate = null;\n      break;\n    }\n\n    if (startDate && endDate){\n      startDate = startDate._d;\n      endDate = endDate._d;\n\n      const ranges = {\n        startDate,\n        endDate,\n        key:'selection'\n      };\n\n      this.setState({\n        ranges,\n        quickSelection\n      }, () => {\n        this.closeModal();\n      });\n    }\n  }\n\n  componentDidUpdate = (prevProps) => {\n    if (prevProps.startDate !== this.props.startDate || prevProps.endDate !== this.props.endDate){\n      this.setState({\n        ranges:{\n          startDate: this.props.startDate ? this.props.startDate : new Date(),\n          endDate: this.props.endDate ? this.props.endDate : new Date(),\n          key: 'selection'\n        }\n      });\n    }\n  }\n\n  closeModal(){\n    const newState = this.props.handleSelect(this.state.ranges,this.state.quickSelection);\n    const ranges = {\n      startDate:newState.startTimestampObj ? newState.startTimestampObj._d : new Date(),\n      endDate:newState.endTimestampObj ? newState.endTimestampObj._d : new Date(),\n      key: 'selection'\n    };\n    this.setState({\n      ranges\n    });\n    this.props.closeModal();\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        <ModalCard closeFunc={this.props.closeModal}>\n          <ModalCard.Header title={'Select Date Range'}>\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex width={1} flexDirection={'column'} alignItems={'center'}>\n              <Field label=\"Quick Date Selection\" style={{display:'flex',width:'100%',alignItems:'stretch',justifyContent:'center'}}>\n                <Select\n                  style={{\n                    fontSize:'14px',\n                    height:'2.5em',\n                    boxShadow:'none',\n                    color:this.props.theme.colors.counter,\n                    backgroundColor:this.props.theme.colors.cardBg\n                  }}\n                  width={'100%'}\n                  required={true}\n                  onChange={this.handleQuickSelect.bind(this)}\n                  value={this.state.quickSelection}\n                  options={[\n                    { value: '', label: \"Select an option\" },\n                    { value: \"day\", label: \"Last day\" },\n                    { value: \"week\", label: \"Last week\" },\n                    { value: \"weeks\", label: \"Last 2 weeks\" },\n                    { value: \"month\", label: \"Last month\" }\n                  ]}\n                />\n              </Field>\n              <DateRange\n                ranges={[this.state.ranges]}\n                minDate={this.props.minDate}\n                maxDate={this.props.maxDate}\n                className={this.props.themeMode}\n                onChange={this.handleSelect.bind(this)}\n              />\n            </Flex>\n          </ModalCard.Body>\n          <ModalCard.Footer>\n            <Flex px={[2,0]} flexDirection={['column', 'row']} width={1} justifyContent={'center'}>\n              <Button\n                my={2}\n                mx={[0, 2]}\n                borderRadius={4}\n                mainColor={'blue'}\n                onClick={ e => this.closeModal(e) }\n                size={this.props.isMobile ? 'small' : 'medium'}\n              >\n              APPLY\n              </Button>\n            </Flex>\n          </ModalCard.Footer>\n        </ModalCard>\n      </Modal>\n    );\n  }\n\n}\n\nexport default DateRangeModal;","import moment from 'moment';\nimport Title from '../Title/Title';\nimport StatsChart from './StatsChart';\nimport React, { Component } from 'react';\nimport Rebalance from '../Rebalance/Rebalance';\nimport StatsCard from '../StatsCard/StatsCard';\nimport AssetsList from '../AssetsList/AssetsList';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport GenericSelector from '../GenericSelector/GenericSelector';\nimport RoundIconButton from '../RoundIconButton/RoundIconButton';\nimport VariationNumber from '../VariationNumber/VariationNumber';\nimport AllocationChart from '../AllocationChart/AllocationChart';\nimport DateRangeModal from '../utilities/components/DateRangeModal';\nimport { Flex, Text, Heading, Box, Icon, Button, Link } from 'rimble-ui';\nimport ExecuteTransaction from '../ExecuteTransaction/ExecuteTransaction';\nimport AssetsUnderManagement from '../AssetsUnderManagement/AssetsUnderManagement';\n\nclass Stats extends Component {\n  state = {\n    aum:null,\n    apr:null,\n    days:'-',\n    delta:null,\n    earning:null,\n    minDate:null,\n    maxDate:null,\n    carouselMax:1,\n    rebalances:'-',\n    buttonGroups:[],\n    apiResults:null,\n    carouselIndex:0,\n    idleVersion:null,\n    statsVersions:{},\n    minStartTime:null,\n    endTimestamp:null,\n    showAdvanced:true,\n    govTokensPool:null,\n    unlentBalance:null,\n    quickSelection:null,\n    startTimestamp:null,\n    endTimestampObj:null,\n    shouldRebalance:null,\n    carouselOffsetLeft:0,\n    startTimestampObj:null,\n    showRefreshIdleSpeed:false,\n    apiResults_unfiltered:null,\n    dateRangeModalOpened:false\n  };\n\n  quickSelections = {\n    day:'Last day',\n    week:'Last week',\n    weeks:'Last 2 weeks',\n    month:'Last month'\n  };\n\n  // Utils\n  functionsUtil = null;\n  componentUnmounted = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount() {\n    this.loadUtils();\n    await this.loadParams();\n  }\n\n  componentWillUnmount(){\n    this.componentUnmounted = true;\n  }\n\n  async setStateSafe(newState,callback=null) {\n    if (!this.componentUnmounted){\n      return this.setState(newState,callback);\n    }\n    return null;\n  }\n\n  showRefreshIdleSpeed(){\n    this.setState({\n      showRefreshIdleSpeed:true\n    });\n  }\n\n  getLatestAvailableVersion(){\n    const statsVersions = globalConfigs.stats.versions;\n    let latestVersion = null;\n    Object.keys(statsVersions).forEach( version => {\n      const versionInfo = statsVersions[version];\n      if (versionInfo.enabledStrategies.includes(this.props.selectedStrategy)){\n        latestVersion = version;\n      }\n    });\n\n    return latestVersion;\n  }\n\n  getVersionInfo(version){\n    if (!version){\n      version = this.state.idleVersion;\n    }\n\n    if (!globalConfigs.stats.versions[version]){\n      return null;\n    }\n\n    const versionInfo = Object.assign({},globalConfigs.stats.versions[version]);\n\n    if (versionInfo.strategiesParams && versionInfo.strategiesParams[this.props.selectedStrategy]){\n      const versionInfoExtra = versionInfo.strategiesParams[this.props.selectedStrategy];\n      Object.keys(versionInfoExtra).forEach( param => {\n        versionInfo[param] = versionInfoExtra[param];\n      });\n    }\n\n    return versionInfo;\n  }\n\n  async loadParams() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    const newState = {};\n    const { match: { params } } = this.props;\n\n    const currentNetworkAvailableTokens = Object.keys(this.props.availableTokens);\n\n    if (!!params.customToken && currentNetworkAvailableTokens.indexOf(params.customToken.toUpperCase()) !== -1 ){\n      newState.selectedToken = params.customToken.toUpperCase();\n    } else {\n      newState.selectedToken = this.props.selectedToken.toUpperCase();\n    }\n\n    newState.tokenConfig = this.props.availableTokens[newState.selectedToken];\n    newState.minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp,'YYYY-MM-DD');\n    newState.maxEndDate = moment();\n\n    newState.endTimestampObj = moment(moment().format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    newState.latestVersion = this.getLatestAvailableVersion();\n    newState.idleVersion = this.state.idleVersion === null ? newState.latestVersion : this.state.idleVersion;\n\n    const versionInfo = this.getVersionInfo(newState.idleVersion);\n\n    // console.log('loadParams',newState.latestVersion,newState.idleVersion,versionInfo);\n\n    if (newState.idleVersion && versionInfo.endTimestamp){\n      const newEndTimestampObj = moment(moment(versionInfo.endTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.endTimestampObj.isAfter(newEndTimestampObj)){\n        newState.endTimestampObj = newEndTimestampObj;\n        newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n      }\n\n      if (!newState.maxEndDate || newState.maxEndDate.isAfter(newEndTimestampObj)){\n        newState.maxEndDate = newEndTimestampObj;\n      }\n    }\n\n    newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n\n    // Set start date\n    newState.startTimestampObj = newState.endTimestampObj.clone().subtract(1,'month');\n    newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n\n    if (newState.idleVersion && versionInfo.startTimestamp){\n      const newStartTimestampObj = moment(moment(versionInfo.startTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.startTimestampObj.isBefore(newStartTimestampObj)){\n        newState.startTimestampObj = newStartTimestampObj;\n        newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n      }\n\n      if (newState.minStartTime.isBefore(newStartTimestampObj)){\n        newState.minStartTime = newStartTimestampObj;\n      }\n    }\n\n    newState.minDate = newState.minStartTime._d;\n    newState.maxDate = newState.maxEndDate._d;\n\n    if (newState !== this.state){\n      await this.setStateSafe(newState);\n    }\n  }\n\n  setDateRange = (ranges,quickSelection=null) => {\n\n    const minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp);\n\n    let startTimestampObj = moment(ranges.startDate).isSameOrAfter(minStartTime) ? moment(ranges.startDate) : minStartTime;\n    let endTimestampObj = moment(ranges.endDate);\n\n    if (startTimestampObj.isSame(endTimestampObj)){\n      endTimestampObj.add(1,'day');\n    }\n\n    endTimestampObj = moment(endTimestampObj.format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    if (startTimestampObj.isBefore(this.state.minStartTime)){\n      startTimestampObj = this.state.minStartTime;\n    }\n\n    if (endTimestampObj.isAfter(this.state.maxEndDate)){\n      endTimestampObj = this.state.maxEndDate;\n    }\n\n    const startTimestamp = parseInt(startTimestampObj._d.getTime()/1000);\n    const endTimestamp = parseInt(endTimestampObj._d.getTime()/1000);\n\n    const newState = {\n      minStartTime,\n      endTimestamp,\n      quickSelection,\n      startTimestamp,\n      endTimestampObj,\n      startTimestampObj\n    };\n\n    this.setStateSafe(newState);\n\n    return newState;\n  }\n\n  toggleAdvancedCharts = (e) => {\n    e.preventDefault();\n    this.setStateSafe({\n      showAdvanced:!this.state.showAdvanced\n    });\n  }\n\n  setDateRangeModal = (dateRangeModalOpened) => {\n    if (dateRangeModalOpened !== this.state.dateRangeModalOpened){\n      this.setStateSafe({\n        dateRangeModalOpened\n      });\n    }\n  }\n\n  async componentDidMount() {\n\n    if (!this.props.web3){\n      this.props.initWeb3();\n      return false;\n    }\n\n    /*\n    const style = document.createElement('style');\n    style.id = 'crisp-custom-style';\n    style.type = 'text/css';\n    style.innerHTML = `\n    .crisp-client{\n      display:none !important;\n    }`;\n    document.body.appendChild(style);\n    */\n\n    this.loadUtils();\n    await this.loadParams();\n    this.loadApiData();\n    this.loadCarousel();\n  }\n\n  loadCarousel(){\n    const carouselMax = this.props.isMobile ? 3 : 2;\n    this.setStateSafe({\n      carouselMax\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const strategyChanged = prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    const dateChanged = prevState.startTimestamp !== this.state.startTimestamp || prevState.endTimestamp !== this.state.endTimestamp;\n    const versionChanged = prevState.idleVersion !== this.state.idleVersion;\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n\n    if (mobileChanged){\n      this.loadCarousel();\n    }\n\n    if (contractsInitialized || tokenChanged || strategyChanged || versionChanged){\n      // console.log('componentDidUpdate',this.props.selectedStrategy,this.props.selectedToken);\n      await this.componentDidMount();\n    } else if (dateChanged){\n      this.loadApiData();\n    }\n  }\n\n  filterTokenData = (apiResults) => {\n    return apiResults.filter((r,i) => {\n      return (!this.state.startTimestamp || r.timestamp >= this.state.startTimestamp) && (!this.state.endTimestamp || r.timestamp <= this.state.endTimestamp);\n    });\n  }\n\n  setIdleVersion = idleVersion => {\n    this.setStateSafe({\n      idleVersion\n    });\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    // Get COMP APR\n    // const compAPR = await this.functionsUtil.getCompAPR(this.props.tokenConfig);\n    // console.log('compAPR',compAPR.toString());\n\n    const startTimestamp = this.state.minDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.minDate).format('DD/MM/YYYY 00:00:00'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n    const endTimestamp = this.state.maxDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.maxDate).format('DD/MM/YYYY 23:59:59'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n\n    const isRisk = ['v3','v4'].includes(this.state.idleVersion) && this.props.selectedStrategy === 'risk';\n    let apiResults_unfiltered = await this.functionsUtil.getTokenApiData(this.props.tokenConfig.address,isRisk,startTimestamp,endTimestamp,true,7200);\n\n    const apiResults = this.filterTokenData(apiResults_unfiltered);\n\n    // console.log('loadApiData',startTimestamp,endTimestamp,new Date(startTimestamp*1000),new Date(endTimestamp*1000),apiResults,apiResults_unfiltered);\n\n    if (!apiResults || !apiResults_unfiltered || !apiResults.length || !apiResults_unfiltered.length){\n      return false;\n    }\n\n    const firstResult = apiResults[0];\n    const lastResult = Object.values(apiResults).pop();\n\n    window.moment = moment;\n\n    let days = (lastResult.timestamp-firstResult.timestamp)/86400;\n    if (days === 0){\n      days = 1;\n    }\n\n    let apr = null;\n    let delta = 'N/A';\n\n    const idleTokens = this.functionsUtil.fixTokenDecimals(lastResult.idleSupply,18);\n    const firstIdlePrice = this.functionsUtil.fixTokenDecimals(firstResult.idlePrice,this.props.tokenConfig.decimals);\n    const lastIdlePrice = this.functionsUtil.fixTokenDecimals(lastResult.idlePrice,this.props.tokenConfig.decimals);\n\n    // Calculate AUM\n    let aum = idleTokens.times(lastIdlePrice);\n\n    // Convert Token balance\n    aum = await this.functionsUtil.convertTokenBalance(aum,this.props.selectedToken,this.props.tokenConfig,isRisk);\n\n    const compoundInfo = this.props.tokenConfig.protocols.filter((p) => { return p.name === 'compound' })[0];\n    const firstCompoundData = compoundInfo ? firstResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n    const lastCompoundData = compoundInfo ? lastResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n\n    if (this.state.idleVersion === 'v4') {\n\n      apr = apiResults.reduce( (sum,r) => {\n        const idleRate = this.functionsUtil.fixTokenDecimals(r.idleRate,18);\n        return this.functionsUtil.BNify(sum).plus(idleRate);\n      },0);\n\n      // Calculate average\n      apr = apr.div(apiResults.length);\n\n      if (compoundInfo){\n        const compoundWithCOMPInfo = globalConfigs.stats.protocols.compoundWithCOMP;\n        const rateField = compoundWithCOMPInfo.rateField ? compoundWithCOMPInfo.rateField : 'rate';\n\n        let compoundAvgApr = apiResults.reduce( (sum,r) => {\n\n          const compoundData = r.protocolsData.find((pData,x) => {\n            return pData.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase()\n          });\n\n          let compoundRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n            if (compoundData && compoundData[field]){\n              return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(compoundData[field]));\n            }\n            return this.functionsUtil.BNify(acc);\n          },0) : this.functionsUtil.BNify(compoundData[rateField]);\n\n          compoundRate = this.functionsUtil.fixTokenDecimals(compoundRate,18);\n\n          return this.functionsUtil.BNify(sum).plus(compoundRate);\n        },0);\n\n        // Calculate average\n        compoundAvgApr = compoundAvgApr.div(apiResults.length);\n\n        // compoundAvgApr = this.functionsUtil.apr2apy(compoundAvgApr.div(100)).times(100);\n        // apr = this.functionsUtil.apr2apy(apr.div(100)).times(100);\n\n        delta = apr.minus(compoundAvgApr);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n\n      apr = apr.toFixed(2);\n\n    } else {\n      const earning = lastIdlePrice.div(firstIdlePrice).minus(1).times(100);\n      apr = earning.times(365).div(days).toFixed(2);\n\n      if (firstCompoundData && lastCompoundData){\n        const firstCompoundPrice = this.functionsUtil.fixTokenDecimals(firstCompoundData.price,this.props.tokenConfig.decimals);\n        const lastCompoundPrice = this.functionsUtil.fixTokenDecimals(lastCompoundData.price,this.props.tokenConfig.decimals);\n        const compoundApr = lastCompoundPrice.div(firstCompoundPrice).minus(1).times(100);\n        delta = earning.minus(compoundApr).times(365).div(days);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n    }\n\n    // Count rebalances\n    let rebalances = 0;\n    apiResults.forEach((row,index) => {\n      if (index){\n        const prevRow = apiResults[index-1];\n\n        const totalAllocation = row.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        const prevTotalAllocation = prevRow.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        let hasRebalanced = false;\n        row.protocolsData.forEach( p => {\n          if (hasRebalanced){\n            return;\n          }\n          const prevP = prevRow.protocolsData.find( prevP => (prevP.protocolAddr.toLowerCase() === p.protocolAddr.toLowerCase()) );\n          const allocation = this.functionsUtil.fixTokenDecimals(p.allocation,this.props.tokenConfig.decimals);\n          const prevAllocation = prevP ? this.functionsUtil.fixTokenDecimals(prevP.allocation,this.props.tokenConfig.decimals) : this.functionsUtil.BNify(0);\n          const allocationPerc = parseInt(parseFloat(allocation.div(totalAllocation).times(100)));\n          const prevAllocationPerc = parseInt(parseFloat(prevAllocation.div(prevTotalAllocation).times(100)));\n          if (allocationPerc!==prevAllocationPerc){\n            rebalances++;\n            hasRebalanced = true;\n          }\n        });\n      }\n    });\n\n    // Add gov tokens balance to AUM\n    const availableTokens = {};\n    availableTokens[this.props.selectedToken] = this.props.tokenConfig;\n    const govTokensPool = await this.functionsUtil.getGovTokenPool(null,availableTokens,'DAI');\n    if (govTokensPool){\n      aum = aum.plus(govTokensPool);\n    }\n\n    // Format AUM\n    /*\n    aum = this.functionsUtil.formatMoney(parseFloat(aum));\n\n    const conversionRateField = this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'conversionRateField']);\n    if (conversionRateField){\n      aum += ' $';\n    }\n    */\n\n    let unlentBalance = await this.functionsUtil.getUnlentBalance(this.props.tokenConfig);\n    if (unlentBalance){\n      unlentBalance = this.functionsUtil.formatMoney(parseFloat(unlentBalance));\n    }\n\n    this.setStateSafe({\n      aum,\n      apr,\n      days,\n      delta,\n      apiResults,\n      rebalances,\n      govTokensPool,\n      unlentBalance,\n      apiResults_unfiltered\n    });\n  }\n\n  selectToken = async (strategy,token) => {\n    await this.props.setStrategyToken(strategy,token);\n    this.props.changeToken(token);\n  }\n\n  handleCarousel = action => {\n    let carouselIndex = this.state.carouselIndex;\n    if (action==='next' && carouselIndex<this.state.carouselMax){\n      carouselIndex++;\n    } else if (action==='back' && carouselIndex>0){\n      carouselIndex--;\n    }\n\n    const $element = window.jQuery(`#carousel-cursor > div:eq(${carouselIndex})`);\n    const carouselOffsetLeft = -parseFloat($element.position().left)+'px';\n\n    this.setStateSafe({\n      carouselIndex,\n      carouselOffsetLeft\n    });\n  }\n\n  render() {\n\n    const valueProps = {\n      lineHeight:1,\n      fontSize:[4,5],\n      fontWeight:[3,4],\n      color:'statValue'\n    };\n\n    const unitProps = {\n      ml:2,\n      lineHeight:1,\n      fontWeight:[2,3],\n      color:'statValue',\n      fontSize:[3,'23px'],\n    };\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const apyLong = this.functionsUtil.getGlobalConfig(['messages','apyLong']);\n\n    if (!this.props.availableStrategies){\n      return (\n        <FlexLoader\n          textProps={{\n            textSize:4,\n            fontWeight:2\n          }}\n          loaderProps={{\n            mb:3,\n            size:'40px'\n          }}\n          flexProps={{\n            minHeight:'50vh',\n            flexDirection:'column'\n          }}\n          text={'Loading assets...'}\n        />\n      );\n    }\n\n    const statsTokens = this.functionsUtil.getGlobalConfig(['stats','tokens']);\n\n    if (!this.props.selectedToken){\n      const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n      const enabledTokens = [];\n      const statsProtocols = this.functionsUtil.getGlobalConfig(['stats','protocols']);\n\n      Object.keys(statsTokens).forEach(token => {\n        const tokenInfo = statsTokens[token];\n        if (tokenInfo.enabled){\n          enabledTokens.push(token);\n        }\n      });\n      return (\n        <Flex\n          mb={3}\n          width={1}\n          flexDirection={'column'}\n        >\n          <AssetsUnderManagement\n            {...this.props}\n            loaderAlign={'flex-end'}\n          />\n          {\n            Object.keys(strategies).map(strategy => {\n              const strategyInfo = strategies[strategy];\n              const availableTokens = this.props.availableStrategies[strategy];\n\n              if (!availableTokens){\n                return false;\n              }\n              \n              // Get available protocols name\n              const availableProtocolsKeys = [];\n              Object.keys(availableTokens).forEach( token => {\n                availableTokens[token].protocols.forEach( protocolInfo => {\n                  if (availableProtocolsKeys.indexOf(protocolInfo.name)<0){\n                    availableProtocolsKeys.push(protocolInfo.name);\n                  }\n                });\n              });\n\n              const availableProtocols = availableProtocolsKeys.map( protocolName => {\n                return statsProtocols[protocolName];\n              },{});\n\n              return (\n                <Box\n                  mb={2}\n                  width={1}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                  key={`strategy-container-${strategy}`}\n                >\n                  <Title\n                    mt={3}\n                    mb={[3,4]}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'baseline'}\n                      justifyContent={'center'}\n                    >\n                      {strategyInfo.title}\n                      {\n                        strategyInfo.titlePostfix &&\n                          <Text\n                            ml={2}\n                            fontWeight={3}\n                            fontSize={[2,4]}\n                            color={'dark-gray'}\n                          >\n                            {strategyInfo.titlePostfix}\n                          </Text>\n                      }\n                    </Flex>\n                  </Title>\n                  <AssetsList\n                    enabledTokens={enabledTokens}\n                    handleClick={(props) => this.selectToken(strategy,props.token)}\n                    cols={[\n                      {\n                        title:'CURRENCY',\n                        props:{\n                          width:[0.26,0.15]\n                        },\n                        fields:[\n                          {\n                            name:'icon',\n                            props:{\n                              mr:2,\n                              height:['1.4em','2.3em']\n                            }\n                          },\n                          {\n                            name:'tokenName'\n                          }\n                        ]\n                      },\n                      {\n                        title:'POOL',\n                        props:{\n                          width:[0.22,0.14],\n                        },\n                        fields:[\n                          {\n                            name:'allocationChart',\n                            mobile:false,\n                            parentProps:{\n                              width:0.3\n                            },\n                            style:{\n                              overflow:'visible'\n                            },\n                            showLoader:false,\n                          },\n                          {\n                            name:'pool',\n                            props:{\n                              ml:1\n                            },\n                            parentProps:{\n                              width:[1,0.7]\n                            }\n                          }\n                        ]\n                      },\n                      {\n                        title:'APY',\n                        desc:apyLong,\n                        props:{\n                          width: [0.29,0.14],\n                        },\n                        parentProps:{\n                          flexDirection:'column',\n                          alignItems:'flex-start',\n                        },\n                        fields:[\n                          {\n                            name:'apy',\n                            showTooltip:true\n                          },\n                          {\n                            name:'idleDistribution',\n                            showLoader:false,\n                            props:{\n                              decimals:this.props.isMobile ? 1 : 2,\n                              fontSize:this.props.isMobile ? '9px' : 0\n                            }\n                          },\n                        ]\n                      },\n                      {\n                        title:'RISK SCORE',\n                        desc:this.functionsUtil.getGlobalConfig(['messages','riskScore']),\n                        mobile:false,\n                        props:{\n                          width:[0.27,0.16],\n                        },\n                        fields:[\n                          {\n                            name:'score'\n                          }\n                        ]\n                      },\n                      {\n                        title:'APR LAST WEEK',\n                        mobile:false,\n                        props:{\n                          width: 0.25,\n                        },\n                        parentProps:{\n                          width:1,\n                          pr:[2,4]\n                        },\n                        fields:[\n                          {\n                            name:'aprChart',\n                            style:{\n                              overflow:'visible',\n                            },\n                          }\n                        ]\n                      },\n                      {\n                        title:'',\n                        props:{\n                          width:[0.23,0.16],\n                        },\n                        parentProps:{\n                          width:1\n                        },\n                        fields:[\n                          {\n                            name:'button',\n                            label:this.props.isMobile ? 'View' : 'View stats',\n                            props:{\n                              width:1,\n                              fontSize:3,\n                              fontWeight:3,\n                              height:'45px',\n                              borderRadius:4,\n                              boxShadow:null,\n                              mainColor:'redeem',\n                              size: this.props.isMobile ? 'small' : 'medium',\n                              handleClick:(props) => this.selectToken(strategy,props.token)\n                            }\n                          }\n                        ]\n                      }\n                    ]}\n                    {...this.props}\n                    selectedStrategy={strategy}\n                    availableTokens={availableTokens}\n                  />\n                  {\n                    !this.props.isMobile &&\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'flex-end'}\n                      >\n                        {\n                          availableProtocols.filter( p => p.legend ).map( (p,index) => (\n                            <Flex\n                              mr={3}\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              key={`legend_${index}`}\n                            >\n                              <Box\n                                mr={1}\n                                width={'10px'}\n                                height={'10px'}\n                                borderRadius={'50%'}\n                                backgroundColor={`rgb(${p.color.rgb.join(',')})`}\n                              >\n                              </Box>\n                              <Text.span\n                                fontSize={1}\n                                color={'cellText'}\n                              >\n                                {p.label}\n                              </Text.span>\n                            </Flex>\n                          ))\n                        }\n                      </Flex>\n                  }\n                </Box>\n              );\n            })\n          }\n          {\n            idleTokenEnabled && !this.state.showRefreshIdleSpeed ? (\n              <Flex\n                mb={4}\n                width={1}\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <Link\n                  hoverColor={'primary'}\n                  onClick={this.showRefreshIdleSpeed.bind(this)}\n                >\n                  Refresh Idle Speed\n                </Link>\n              </Flex>\n            ) : idleTokenEnabled && this.state.showRefreshIdleSpeed &&\n              <DashboardCard\n                cardProps={{\n                  p:2,\n                  mb:4,\n                  width:1,\n                  mt:[2,3],\n                }}\n                isActive={true}\n                isInteractive={false}\n              >\n                <Flex\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                >\n                  <Text\n                    fontWeight={500}\n                    color={'flashColor'}\n                    textAlign={'center'}\n                    fontSize={[1,'15px']}\n                  >\n                    By executing this transaction you can adjust the IDLE distribution speed among the pools.\n                  </Text>\n                  <ExecuteTransaction\n                    action={'Refresh'}\n                    Component={Button}\n                    parentProps={{\n                      mt:1\n                    }}\n                    componentProps={{\n                      size:'small',\n                      mainColor:'blue',\n                      value:'REFRESH IDLE SPEED'\n                    }}\n                    params={[]}\n                    contractName={'IdleController'}\n                    methodName={'refreshIdleSpeeds'}\n                    {...this.props}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'center'}\n                      justifyContent={'center'}\n                    >\n                      <Icon\n                        mr={1}\n                        name={'Done'}\n                        size={'1.4em'}\n                        color={this.props.theme.colors.transactions.status.completed}\n                      />\n                      <Text\n                        fontWeight={500}\n                        fontSize={'15px'}\n                        color={'copyColor'}\n                        textAlign={'center'}\n                      >\n                        Idle Speed Refreshed\n                      </Text>\n                    </Flex>\n                  </ExecuteTransaction>\n                </Flex>\n              </DashboardCard>\n          }\n        </Flex>\n      );\n    } else {\n\n      const tokenConfig = statsTokens[this.props.selectedToken];\n\n      const versionsOptions = Object.keys(globalConfigs.stats.versions).filter( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return versionInfo.enabledTokens.includes(this.props.selectedToken) && versionInfo.enabledStrategies.includes(this.props.selectedStrategy);\n      }).map( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return {\n          value:version,\n          label:versionInfo.label\n        }\n      });\n\n      const disabledCharts = tokenConfig.disabledCharts || [];\n\n      const versionInfo = this.getVersionInfo(this.state.idleVersion);\n\n      let performanceTooltip = null;\n      if (this.state.idleVersion && versionInfo){\n        const showPerformanceTooltip = this.functionsUtil.getGlobalConfig(['stats','versions',this.state.idleVersion,'showPerformanceTooltip']);\n        performanceTooltip = showPerformanceTooltip ? this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'performanceTooltip']) : null;\n      }\n\n      const versionDefaultValue = versionsOptions.find( v => (v.value === this.state.idleVersion) );\n\n      return (\n        <Flex\n          p={0}\n          width={1}\n          flexDirection={'column'}\n        >\n          {\n          /*\n          }\n          <Flex position={['absolute','relative']} left={0} px={[3,0]} zIndex={10} width={1} flexDirection={'row'} mb={[0,3]}>\n            <Flex alignItems={'center'} width={[2/3,1/2]}>\n              <RouterLink to=\"/\">\n                <Image src=\"images/logo-gradient.svg\"\n                  height={['35px','48px']}\n                  position={'relative'} />\n              </RouterLink>\n              <Heading.h3 color={'dark-gray'} textAlign={'left'} fontWeight={3} lineHeight={'initial'} fontSize={[4,5]} ml={[1,2]}>\n                <Text.span fontSize={'80%'}>|</Text.span> Stats\n              </Heading.h3>\n            </Flex>\n            <Flex flexDirection={'row'} width={[1/3,1/2]} justifyContent={'flex-end'} alignItems={'center'}>\n              {\n                this.state.buttonGroups && \n                  this.props.isMobile ? (\n                    <ButtonGroup\n                      isMobile={this.props.isMobile}\n                      components={ this.state.buttonGroups.reduce((components,array) => components.concat(array),[]) }\n                      theme={'light'}\n                    />\n                  ) :\n                  this.state.buttonGroups.map((buttonGroup,i) => (\n                    <ButtonGroup\n                      key={`buttonGroup_${i}`}\n                      isMobile={this.props.isMobile}\n                      components={buttonGroup}\n                      theme={'light'}\n                    />\n                  ))\n              }\n            </Flex>\n          </Flex>\n          */\n          }\n          <Box\n            mb={[3,4]}\n          >\n            <Flex\n              flexDirection={['column','row']}\n            >\n              <Flex\n                width={[1,0.4]}\n              >\n                <Breadcrumb\n                  {...this.props}\n                  showPathMobile={true}\n                  text={'ASSETS OVERVIEW'}\n                  isMobile={this.props.isMobile}\n                  handleClick={ e => this.props.goToSection('stats') }\n                  path={[this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])]}\n                />\n              </Flex>\n              <Flex\n                mt={[3,0]}\n                width={[1,0.6]}\n                flexDirection={['column','row']}\n                justifyContent={['center','space-between']}\n              >\n                <Flex\n                  width={[1,0.26]}\n                  flexDirection={'column'}\n                >\n                  <GenericSelector\n                    innerProps={{\n                      p:1,\n                      height:['100%','46px'],\n                    }}\n                    name={'idle-version'}\n                    options={versionsOptions}\n                    defaultValue={versionDefaultValue}\n                    onChange={ v => this.setIdleVersion(v) }\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.3]}\n                  flexDirection={'column'}\n                >\n                  <AssetSelector\n                    innerProps={{\n                      p:1\n                    }}\n                    {...this.props}\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.39]}\n                  flexDirection={'column'}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:1,\n                      display:'flex',\n                      alignItems:'center',\n                      height:['46px','100%'],\n                      justifyContent:'center'\n                    }}\n                    isInteractive={true}\n                    handleClick={ e => this.setDateRangeModal(true) }\n                  >\n                    <Text\n                      fontWeight={3}\n                      color={'copyColor'}\n                    >\n                    {\n                      this.state.quickSelection\n                      ?\n                        this.quickSelections[this.state.quickSelection]\n                      : this.state.startTimestampObj && this.state.endTimestampObj &&\n                        `${this.state.startTimestampObj.format('DD/MM/YY')} - ${this.state.endTimestampObj.format('DD/MM/YY')}`\n                    }\n                    </Text>\n                  </DashboardCard>\n                </Flex>\n              </Flex>\n            </Flex>\n          </Box>\n          {\n            !tokenConfig.enabled ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'DoNotDisturb'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Stats for {this.props.selectedToken} are not available!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : this.state.idleVersion && this.functionsUtil.strToMoment(versionInfo.startTimestamp).isAfter(Date.now()) ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'AccessTime'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Idle Stats {this.state.idleVersion} will be available shortly!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : this.functionsUtil.strToMoment(tokenConfig.startTimestamp).isAfter(Date.now()) ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'AccessTime'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Stats for {this.props.selectedToken} will be available shortly!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : (\n              <Box\n                width={1}\n              >\n                <Box\n                  mt={[3,0]}\n                  mb={[3,4]}\n                >\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    justifyContent={'center'}\n                    flexDirection={['column','row']}\n                  >\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Asset Under Management'}\n                        label={ this.state.unlentBalance ? `Unlent funds: ${this.state.unlentBalance} ${this.props.selectedToken}` : this.props.selectedToken }\n                        labelTooltip={ this.state.unlentBalance ? this.functionsUtil.getGlobalConfig(['messages','cheapRedeem']) : null}\n                      >\n                        <SmartNumber\n                          precision={2}\n                          type={'money'}\n                          {...valueProps}\n                          unitProps={unitProps}\n                          number={this.state.aum}\n                          flexProps={{\n                            alignItems:'baseline',\n                            justifyContent:'flex-start'\n                          }}\n                          unit={this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'conversionRateField']) ? '$' : null}\n                        />\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Avg APY'}\n                        label={'Annualized'}\n                      >\n                        <Flex\n                          width={1}\n                          alignItems={'center'}\n                          flexDirection={['column','row']}\n                        >\n                          <VariationNumber\n                            direction={'up'}\n                            iconPos={'right'}\n                            iconSize={'1.8em'}\n                            justifyContent={'flex-start'}\n                            width={1}\n                            >\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                              fontSize={[4,5]}\n                            >\n                              {this.state.apr}\n                              <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                            </Text>\n                          </VariationNumber>\n                        </Flex>\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Overperformance on Compound'}\n                        label={'Annualized'}\n                      >\n                        {\n                          this.state.delta && !isNaN(this.state.delta) ? (\n                            <VariationNumber\n                              direction={'up'}\n                              iconPos={'right'}\n                              iconSize={'1.8em'}\n                              justifyContent={'flex-start'}\n                              >\n                              <Text\n                                lineHeight={1}\n                                fontSize={[4,5]}\n                                fontWeight={[3,4]}\n                                color={'statValue'}\n                              >\n                                {this.state.delta}\n                                <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                              </Text>\n                            </VariationNumber>\n                          ) : (\n                            <Text\n                              lineHeight={1}\n                              fontSize={[4,5]}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                            >\n                              {this.state.delta}\n                            </Text>\n                          )\n                        }\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        label={' '}\n                        title={'Rebalances'}\n                        value={this.state.rebalances.toString()}\n                      />\n                    </Flex>\n                    {\n                    /*\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Current APR</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.currApr}\n                            <Text.span color={'copyColor'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Days Live</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.days}\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    */\n                    }\n                  </Flex>\n                </Box>\n\n                <DashboardCard\n                  title={'Historical Performance'}\n                  description={performanceTooltip}\n                  cardProps={{\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex id='chart-PRICE' width={1} mb={3}>\n                    <StatsChart\n                      height={ 350 }\n                      {...this.state}\n                      parentId={'chart-PRICE'}\n                      theme={this.props.theme}\n                      isMobile={this.props.isMobile}\n                      contracts={this.props.contracts}\n                      themeMode={this.props.themeMode}\n                      apiResults={this.state.apiResults}\n                      idleVersion={this.state.idleVersion}\n                      selectedToken={this.props.selectedToken}\n                      apiResults_unfiltered={this.state.apiResults_unfiltered}\n                      chartMode={this.state.idleVersion === this.state.latestVersion ? 'PRICE_V4' : 'PRICE'}\n                    />\n                  </Flex>\n                </DashboardCard>\n\n                <DashboardCard\n                  cardProps={{\n                    pb:3,\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex\n                    flexDirection={['column','row']}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      this.state.idleVersion === this.state.latestVersion && \n                      <Flex\n                        pt={2}\n                        width={[1,1/3]}\n                        id={'allocation-chart'}\n                        flexDirection={'column'}\n                        alignItems={'flex-start'}\n                        justifyContent={'flex-start'}\n                      >\n                        <AllocationChart\n                          height={310}\n                          {...this.props}\n                          parentId={'allocation-chart'}\n                        />\n                        <Rebalance\n                          {...this.props}\n                        />\n                      </Flex>\n                    }\n                    <Flex\n                      mb={[0,3]}\n                      id={'chart-ALL'}\n                      pl={[0,this.state.idleVersion === this.state.latestVersion ? 0 : 3]}\n                      width={[1, this.state.idleVersion === this.state.latestVersion ? 2/3 : 1]}\n                    >\n                      <Flex alignItems={'flex-start'} justifyContent={'flex-start'} flexDirection={'column'} width={1}>\n                        <Heading.h4\n                          mb={2}\n                          ml={3}\n                          mt={[3,4]}\n                          fontWeight={4}\n                          fontSize={[2,3]}\n                          textAlign={'left'}\n                          color={'dark-gray'}\n                          lineHeight={'initial'}\n                        >\n                          Allocations over time\n                        </Heading.h4>\n                        <StatsChart\n                          height={350}\n                          {...this.state}\n                          chartMode={'ALL'}\n                          parentId={'chart-ALL'}\n                          theme={this.props.theme}\n                          isMobile={this.props.isMobile}\n                          themeMode={this.props.themeMode}\n                          contracts={this.props.contracts}\n                          apiResults={this.state.apiResults}\n                          idleVersion={this.state.idleVersion}\n                          apiResults_unfiltered={this.state.apiResults_unfiltered}\n                        />\n                      </Flex>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n\n                <Flex\n                  position={'relative'}\n                >\n                  <Flex\n                    width={1}\n                    id={'carousel-container'}\n                    justifyContent={'flex-end'}\n                  >\n                    <RoundIconButton\n                      buttonProps={{\n                        mr:3\n                      }}\n                      iconName={'ArrowBack'}\n                      disabled={this.state.carouselIndex === 0}\n                      handleClick={ e => this.handleCarousel('back') }\n                    />\n                    <RoundIconButton\n                      iconName={'ArrowForward'}\n                      handleClick={ e => this.handleCarousel('next') }\n                      disabled={this.state.carouselIndex === this.state.carouselMax}\n                    />\n                  </Flex>\n                  <Flex\n                    mt={5}\n                    height={'400px'}\n                    position={'absolute'}\n                    id={'carousel-cursor'}\n                    width={['444%','200%']}\n                    justifyContent={'flex-start'}\n                    left={this.state.carouselOffsetLeft}\n                    style={{\n                      transition:'left 0.3s ease-in-out'\n                    }}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        id='chart-AUM'\n                      >\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            ml={3}\n                            mt={3}\n                            mb={2}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Asset Under Management\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'AUM'}\n                            parentId={'chart-AUM'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-APR' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            APRs\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'APR'}\n                            parentId={'chart-APR'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    {\n                      !disabledCharts.includes('score') &&\n                        <DashboardCard\n                          cardProps={{\n                            mr:4,\n                            height:'fit-content',\n                            style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                          }}\n                          title={'Risk Score'}\n                          description={'Idle Risk Score is a weighted average of the underlying protocols risks assessed by DeFi Score'}\n                          titleParentProps={{\n                            ml:16,\n                            mt:16\n                          }}\n                        >\n                          <Flex id='chart-SCORE' width={1}>\n                            <Flex\n                              mb={3}\n                              width={1}\n                              flexDirection={'column'}\n                              alignItems={'flex-start'}\n                              justifyContent={'center'}\n                            >\n                              <StatsChart\n                                height={300}\n                                {...this.state}\n                                chartMode={'SCORE'}\n                                parentId={'chart-SCORE'}\n                                theme={this.props.theme}\n                                isMobile={this.props.isMobile}\n                                themeMode={this.props.themeMode}\n                                contracts={this.props.contracts}\n                                apiResults={this.state.apiResults}\n                                idleVersion={this.state.idleVersion}\n                                apiResults_unfiltered={this.state.apiResults_unfiltered}\n                              />\n                            </Flex>\n                          </Flex>\n                        </DashboardCard>\n                    }\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-VOL' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Volume\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'VOL'}\n                            parentId={'chart-VOL'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                </Flex>\n              </Box>\n            )\n          }\n          <DateRangeModal\n            {...this.props}\n            minDate={this.state.minDate}\n            maxDate={this.state.maxDate}\n            handleSelect={this.setDateRange}\n            isOpen={this.state.dateRangeModalOpened}\n            closeModal={e => this.setDateRangeModal(false)}\n            startDate={this.state.startTimestampObj ? this.state.startTimestampObj._d : null}\n            endDate={this.state.endTimestampObj ? this.state.endTimestampObj._d : null}\n          />\n        </Flex>\n      );\n    }\n  }\n}\n\nexport default Stats;","import Title from '../Title/Title';\nimport IconBox from '../IconBox/IconBox';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport { Flex, Icon, Text, Box, Image } from \"rimble-ui\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass Utils extends Component {\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    const SubComponent = this.props.selectedSubsection && this.props.selectedSubsection.subComponent ? this.props.selectedSubsection.subComponent : null;\n    const viewOnly = this.props.connectorName === 'custom';\n    const showBreadCrumb = typeof this.props.showBreadCrumb !== 'undefined' ? this.props.showBreadCrumb : true;\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.props.selectedSubsection ? (\n            <Box\n              width={1}\n            >\n              {\n                showBreadCrumb && (\n                  <Flex\n                    width={1}\n                  >\n                    <Breadcrumb\n                      {...this.props}\n                      showPathMobile={true}\n                      isMobile={this.props.isMobile}\n                      path={[this.props.selectedSubsection.label]}\n                      text={this.props.selectedSection.label.toUpperCase()}\n                      handleClick={ e => this.props.goToSection(this.props.selectedSection.route) }\n                    />\n                  </Flex>\n                )\n              }\n              <Flex\n                my={[2,3]}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <Title\n                  mb={2}\n                >\n                  {this.props.selectedSubsection.label}\n                </Title>\n                <Text\n                  textAlign={'center'}\n                  dangerouslySetInnerHTML={{\n                    __html:this.props.selectedSubsection.desc\n                  }}\n                >\n                </Text>\n              </Flex>\n              <SubComponent\n                {...this.props}\n                {...this.props.selectedSubsection.directProps}\n                toolProps={this.props.selectedSubsection.props}\n              />\n            </Box>\n          ) : (\n            <Flex\n              my={[2,3]}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Title\n                mb={3}\n              >\n                Tools\n              </Title>\n              <Flex\n                width={1}\n                style={{\n                  flexWrap:'wrap'\n                }}\n                justifyContent={viewOnly ? 'center' : 'flex-start'}\n              >\n              {\n                viewOnly ? (\n                  <IconBox\n                    cardProps={{\n                      maxWidth:[1,'35em']\n                    }}\n                    icon={'Visibility'}\n                    text={'You are using Idle in \"Read-Only\" mode.<br />Logout and connect with your wallet to interact.'}\n                  />\n                ) : this.props.selectedSection.submenu.map( (tool,toolIndex) => (\n                  <DashboardCard\n                    isInteractive={true}\n                    key={`tool_${toolIndex}`}\n                    cardProps={{\n                      p:[3,4],\n                      mb:[3,3],\n                      mr:[0,'2%'],\n                      style:{\n                        flex: this.props.isMobile ? '1 1 100%' : '0 0 31%'\n                      },\n                      alignItems:'center',\n                      flexDirection:'column',\n                      justifyContent:'center'\n                    }}\n                    handleClick={ e => this.props.goToSection(this.props.selectedSection.route+'/'+tool.route) }\n                  >\n                    <Text\n                      fontSize={[3,4]}\n                      textAlign={'center'}\n                    >\n                      {tool.label}\n                    </Text>\n                    <Flex\n                      justifyContent={'center'}\n                    >\n                      {\n                        tool.image ? (\n                          <Image\n                            my={[0,2]}\n                            height={'2.2em'}\n                            src={tool.image}\n                          />\n                        ) : tool.icon && (\n                          <Icon\n                            my={[0,2]}\n                            size={'3em'}\n                            name={tool.icon}\n                          />\n                        )\n                      }\n                    </Flex>\n                    <Text\n                      fontSize={[2,2]}\n                      textAlign={'center'}\n                      dangerouslySetInnerHTML={{\n                        __html:tool.desc\n                      }}\n                    >\n                    </Text>\n                  </DashboardCard>\n                ) )\n              }\n              </Flex>\n            </Flex>\n          )\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default Utils;\n","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Heading, Text, Tooltip, Icon } from \"rimble-ui\";\nimport PortfolioEquity from '../PortfolioEquity/PortfolioEquity';\n\nclass FundsOverview extends Component {\n\n  state = {\n    // govTokensAprs:null,\n    aggregatedValues:[],\n    govTokensTotalApr:null,\n    govTokensUserBalance:null,\n    govTokensDistribution:null,\n    govTokensTotalBalance:null,\n    govTokensTotalAprTooltip:null,\n    idleTokenUserDistribution:null,\n    govTokensDistributionTooltip:null,\n    govTokensTotalBalanceTooltip:null\n  };\n\n  // Utils\n  functionsUtil = null;\n  idleGovToken = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    this.idleGovToken = this.functionsUtil.getIdleGovToken();\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const isRisk = this.props.selectedStrategy === 'risk';\n\n    const [\n      // govTokensAprs,\n      idleTokenUserDistribution,\n      govTokensUserBalance,\n      apy,\n      depositTimestamp,\n      days\n    ] = await Promise.all([\n      // this.functionsUtil.getGovTokensAprs(this.props.selectedToken,this.props.tokenConfig),\n      this.idleGovToken.getUserDistribution(this.props.account,govTokenAvailableTokens,true),\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,null),\n      this.functionsUtil.loadAssetField('apy',this.props.selectedToken,this.props.tokenConfig,this.props.account,false),\n      this.functionsUtil.loadAssetField('depositTimestamp',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    let avgAPY = await this.functionsUtil.getAvgAPYStats(this.props.tokenConfig.address,isRisk,depositTimestamp);\n\n    if (!avgAPY || this.functionsUtil.BNify(avgAPY).lte(0)){\n      avgAPY = apy;\n    }\n\n    const govTokensTotalBalance = govTokensUserBalance ? Object.values(govTokensUserBalance).reduce( (totBalance,govTokenBalance) => {\n      return totBalance.plus(this.functionsUtil.BNify(govTokenBalance));\n    },this.functionsUtil.BNify(0)) : null;\n\n    const govTokensTotalBalanceTooltip = govTokensUserBalance ? Object.keys(govTokensUserBalance).map( govToken => {\n      const balance = govTokensUserBalance[govToken];\n      if (balance.gt(0)){\n        return `+${balance.toFixed(2)} ${govToken}`;\n      } else {\n        return null;\n      }\n    }).filter(v => (v !== null)) : null;\n\n    // console.log(govTokensTotalBalance,govTokensUserBalance,govTokensTotalBalanceTooltip);\n\n    // const govTokensTotalApr = govTokensAprs ? Object.values(govTokensAprs).reduce( (totApr,govTokenApr) => {\n    //   return totApr.plus(this.functionsUtil.BNify(govTokenApr));\n    // },this.functionsUtil.BNify(0)) : null;\n\n    // const govTokensTotalAprTooltip = govTokensAprs ? Object.keys(govTokensAprs).map( govToken => {\n    //   const apr = govTokensAprs[govToken];\n    //   if (apr.gt(0)){\n    //     return `${govToken}: ${apr.toFixed(2)}%`;\n    //   }\n    //   return null;\n    // }).filter(v => (v !== null)) : null;\n\n    /*\n    const govTokensDistributionTooltip = govTokensUserDistribution ? Object.keys(govTokensUserDistribution).map( govToken => {\n      const speed = govTokensUserDistribution[govToken];\n      if (speed.gt(0)){\n        const distributionFrequency = this.functionsUtil.getGlobalConfig(['govTokens',govToken,'distributionFrequency']);\n        return `+${speed.toFixed(4)} ${govToken}/${distributionFrequency}`;\n      }\n      return null;\n    }).filter(v => (v !== null)) : null;\n    */\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          desc:this.functionsUtil.getGlobalConfig(['messages','apyLong']),\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '0.00%') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    this.setState({\n      // govTokensAprs,\n      aggregatedValues,\n      // govTokensTotalApr,\n      govTokensUserBalance,\n      govTokensTotalBalance,\n      // govTokensTotalAprTooltip,\n      idleTokenUserDistribution,\n      govTokensTotalBalanceTooltip\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Flex\n                          mt={2}\n                          width={1}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <Text\n                            fontWeight={2}\n                            fontSize={[1,2]}\n                            color={'cellText'}\n                          >\n                            {v.props.title}\n                          </Text>\n                          {\n                            v.props.desc && \n                              <Tooltip\n                                placement={'bottom'}\n                                message={v.props.desc}\n                              >\n                                <Icon\n                                  ml={2}\n                                  name={\"Info\"}\n                                  size={'1em'}\n                                  color={'cellTitle'}\n                                />\n                              </Tooltip>\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquity\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              chartToken={this.props.selectedToken}\n              enabledTokens={[this.props.selectedToken]}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLent',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:this.props.theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPerc',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.govTokensTotalBalanceTooltip && this.state.govTokensTotalBalanceTooltip.length>0 && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      this.state.govTokensTotalBalanceTooltip.map((govTokenBalance,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          mt={govTokenIndex ? 1 : 0}\n                          key={`govToken_${govTokenIndex}`}\n                        >\n                          {govTokenBalance}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                )/* : this.state.govTokensUserBalance && Object.keys(this.state.govTokensUserBalance).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + ${this.state.govTokensTotalBalance.toFixed(4)}\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalBalanceTooltip.join(' / ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Fees\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'feesCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'apy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.idleTokenUserDistribution && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      mt={1}\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      {this.state.idleTokenUserDistribution.toFixed(4)} {this.idleGovToken.tokenName}/{this.idleGovToken.tokenConfig.distributionFrequency}\n                    </Text>\n                  </Flex>\n                )\n                /*\n                this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length===1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      Object.keys(this.state.govTokensAprs).map((govToken,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          ml={govTokenIndex ? 2 : 0}\n                          key={`govToken_${govToken}`}\n                        >\n                          {this.state.govTokensAprs[govToken].toFixed(2)}% {govToken}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                ) : this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + {this.state.govTokensTotalApr.toFixed(2)}%\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalAprTooltip.join('; ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Risk Score\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'score',\n                  props:{\n                    decimals:1,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverview;","import React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Icon, Checkbox, Box, Link, Input, Tooltip } from \"rimble-ui\";\n\nclass CurveRedeem extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    tokenConfig:null,\n    unevenAmounts:null,\n    selectedToken:null,\n    availableTokens:null,\n    buttonDisabled:false,\n    showMaxSlippage:false,\n    redeemUnderlying:true,\n    curveTokenConfig:null,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    curveTokensAmounts:null,\n    fastBalanceSelector:null,\n    redeemUnevenAmounts:false,\n    curveRedeemableIdleTokens:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.initToken();\n  }\n\n  showMaxSlippage(){\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  async calculateSlippage(max_slippage=null){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (!inputValue || inputValue.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    let withdrawSlippage = null;\n    let curveTokensAmounts = null;\n    let curveIdleTokensAmounts = null;\n    if (this.state.redeemUnevenAmounts){\n      [\n        curveTokensAmounts,\n        curveIdleTokensAmounts\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokensAmounts(this.props.account,normalizedAmount,true),\n        this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,normalizedAmount)\n      ]);\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false,curveIdleTokensAmounts);\n    } else {\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false);\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const redeemableBalance = inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.times(100).plus(this.state.maxSlippage || this.functionsUtil.BNify(0)).div(100)));\n      curveTokensAmounts = {};\n      curveTokensAmounts[this.state.selectedToken] = redeemableBalance;\n    }\n\n    if (withdrawSlippage){\n      withdrawSlippage = withdrawSlippage.times(100);\n    }\n\n    this.setState({\n      withdrawSlippage,\n      curveTokensAmounts,\n      curveIdleTokensAmounts\n    });\n\n    // Add max slippage but don't save in state\n    if (withdrawSlippage && max_slippage){\n      withdrawSlippage = withdrawSlippage.plus(max_slippage);\n    }\n\n    return withdrawSlippage;\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.tokenConfig.idle.token !== this.props.tokenConfig.idle.token;\n    if (tokenChanged){\n      await this.initToken();\n    }\n\n    const redeemUnevenAmountsChanged = prevState.redeemUnevenAmounts !== this.state.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    const inputChanged = prevState.inputValue !== this.state.inputValue;\n    const maxSlippageChanged = parseFloat(prevState.maxSlippage) !== parseFloat(this.state.maxSlippage);\n    const tokenConfigChanged = JSON.stringify(prevState.tokenConfig) !== JSON.stringify(this.state.tokenConfig);\n    if (inputChanged || tokenConfigChanged || maxSlippageChanged){\n      this.calculateSlippage();\n    }\n\n    const selectedTokenChanged = prevState.selectedToken !== this.state.selectedToken;\n    if (selectedTokenChanged){\n      this.loadSelectedTokenConfig();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    let buttonDisabled = false;\n\n    // if (this.state.redeemUnevenAmounts){\n      buttonDisabled = !amount || amount.gt(this.state.curveTokenBalance);\n    // } else {\n      // buttonDisabled = !amount || amount.gt(this.state.redeemableBalance);\n    // }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    let inputValue = null;\n\n    // if (this.state.redeemUnevenAmounts){\n    inputValue = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n    // } else {\n      // inputValue = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n    // }\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  selectDestinationToken(selectedToken){\n    this.setState({\n      selectedToken\n    });\n  }\n\n  async loadSelectedTokenConfig(){\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const tokenConfig = this.state.availableTokens[this.state.selectedToken];\n    const curveTokenConfig = curveConfig.availableTokens[tokenConfig.idle.token];\n    this.setState({\n      tokenConfig,\n      curveTokenConfig\n    });\n  }\n\n  async initToken(){\n    const [curvePoolContract,curveSwapContract] = await Promise.all([\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract()\n    ]);\n\n    const [\n      curveTokenPrice,\n      curveTokenBalance,\n      curveRedeemableIdleTokens,\n    ] = await Promise.all([\n      this.functionsUtil.getCurveTokenPrice(),\n      this.functionsUtil.getCurveTokenBalance(this.props.account),\n      this.functionsUtil.getCurveRedeemableIdleTokens(this.props.account)\n    ]);\n\n    const unevenAmounts = [];\n    const redeemableBalance = curveTokenBalance ? curveTokenBalance.times(curveTokenPrice) : this.functionsUtil.BNify(0);\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();;\n    const selectedToken = Object.keys(availableTokens)[0];\n\n    this.setState({\n      selectedToken,\n      unevenAmounts,\n      curveTokenPrice,\n      availableTokens,\n      curvePoolContract,\n      curveSwapContract,\n      curveTokenBalance,\n      redeemableBalance,\n      curveRedeemableIdleTokens\n    });\n  }\n\n  async redeem(){\n\n    if (!this.state.curveTokenBalance){\n      return false;\n    }\n\n    const callbackRedeem = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveRedeem`,\n        eventAction: this.props.selectedToken,\n        eventValue: this.state.curveTokenBalance.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackRedeem === 'function' && txSucceeded){\n        this.props.callbackRedeem(tx);\n      }\n    };\n\n    const callbackReceiptRedeem = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.curveSwapContract.name;\n    const withdrawSlippage = await this.calculateSlippage(this.state.maxSlippage);\n    const max_slippage = this.functionsUtil.BNify(this.state.maxSlippage).div(100);\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    // const curveTokenBalance = this.functionsUtil.normalizeTokenAmount(this.state.curveTokenBalance,this.state.curvePoolContract.decimals);\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    if (this.state.redeemUnevenAmounts){\n      const min_amounts = this.state.redeemUnderlying ? await this.functionsUtil.getCurveTokensAmounts(this.props.account,_amount,false,true) : await this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,_amount,max_slippage);\n      console.log('remove_liquidity',_amount.toString(),min_amounts);\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    } else {\n      const coin_index = this.state.curveTokenConfig.migrationParams.coinIndex;\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.div(100))),this.state.tokenConfig.decimals);\n      // const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.minus(inputValue.times(withdrawSlippage.div(100))),this.state.curveTokenConfig.decimals);\n      // let _token_amount = await this.functionsUtil.getCurveTokenAmount(amounts,false);\n      // _token_amount = this.functionsUtil.BNify(_token_amount).isGreaterThan(curveTokenBalance) ? curveTokenBalance : this.functionsUtil.BNify(_token_amount);\n\n      console.log('remove_liquidity_one_coin',_amount, coin_index, min_amount);\n\n      // debugger;\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_one_coin', [_amount, coin_index, min_amount, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    }\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  getFastBalanceSelector(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n\n  render() {\n\n    const showSlippage = !this.state.buttonDisabled && this.state.withdrawSlippage;\n    const curveTokenName = this.functionsUtil.getGlobalConfig(['curve','poolContract','token']);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          {\n            !this.state.curveTokenBalance ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3,\n                  minHeight:'195px',\n                  style:{\n                    display:'flex',\n                    alignItems:'center',\n                    justifyContent:'center'\n                  }\n                }}\n              >\n                <FlexLoader\n                  flexProps={{\n                    flexDirection:'row'\n                  }}\n                  loaderProps={{\n                    size:'30px'\n                  }}\n                  textProps={{\n                    ml:2\n                  }}\n                  text={'Checking Curve Pool...'}\n                />\n              </DashboardCard>\n            ) : this.state.processing.loading ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3\n                }}\n              >\n                <Flex\n                  flexDirection={'column'}\n                >\n                  <TxProgressBar\n                    web3={this.props.web3}\n                    hash={this.state.processing.txHash}\n                    endMessage={`Finalizing redeem request...`}\n                    cancelTransaction={this.cancelTransaction.bind(this)}\n                    waitText={ this.props.waitText ? this.props.waitText : 'Redeem estimated in'}\n                  />\n                </Flex>\n              </DashboardCard>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    mb:2\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'1.8em'}\n                      color={'cellText'}\n                      name={'FileUpload'}\n                    />\n                    <Text\n                      mt={1}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Withdraw from the Curve Pool in a specific token or in uneven amounts of tokens (with no slippage).\n                    </Text>\n                    <Flex\n                      mt={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                    >\n                      <Checkbox\n                        required={false}\n                        label={`Redeem with no slippage`}\n                        checked={this.state.redeemUnevenAmounts}\n                        onChange={ e => this.toggleUnevenAmounts(e.target.checked) }\n                      />\n                      <Tooltip\n                        placement={'top'}\n                        message={`You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.`}\n                      >\n                        <Icon\n                          size={'1em'}\n                          color={'cellTitle'}\n                          name={\"InfoOutline\"}\n                        />\n                      </Tooltip>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n                {\n                  !this.state.redeemUnevenAmounts/* && (!this.props.selectedToken || (this.state.showMaxSlippage && showSlippage))*/ && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      {\n                        this.state.tokenConfig && \n                          <Box\n                            width={1}\n                          >\n                            <Text\n                              mb={1}\n                            >\n                              Select destination token:\n                            </Text>\n                            <AssetSelector\n                              {...this.props}\n                              id={'token-from'}\n                              showBalance={false}\n                              tokenConfig={this.state.tokenConfig}\n                              selectedToken={this.state.selectedToken}\n                              availableTokens={this.state.availableTokens}\n                              onChange={this.selectDestinationToken.bind(this)}\n                            />\n                          </Box>\n                      }\n                    </Box>\n                  )\n                }\n                {\n                  this.state.curveTokensAmounts && !this.state.buttonDisabled && (\n                    <DashboardCard\n                      cardProps={{\n                        mt:1,\n                        mb:2,\n                        py:2,\n                        px:1\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Text\n                          mt={1}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          You will receive:\n                        </Text>\n                        <Flex\n                          mt={2}\n                          width={1}\n                          boxShadow={0}\n                          style={{\n                            flexWrap:'wrap'\n                          }}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                          >\n                            {\n                              Object.keys(this.state.curveTokensAmounts).map( token => {\n                                const balance = this.state.curveTokensAmounts[token];\n                                return (\n                                  <Flex\n                                    mb={1}\n                                    mx={1}\n                                    width={'auto'}\n                                    flexDirection={'row'}\n                                    key={`tokenBalance_${token}`}\n                                    justifyContent={'flex-start'}\n                                  >\n                                    <AssetField\n                                      token={token}\n                                      tokenConfig={{\n                                        token:token\n                                      }}\n                                      fieldInfo={{\n                                        name:'icon',\n                                        props:{\n                                          mr:1,\n                                          width:['1.4em','1.6em'],\n                                          height:['1.4em','1.6em']\n                                        }\n                                      }}\n                                    />\n                                    <SmartNumber\n                                      ml={1}\n                                      fontSize={[0,1]}\n                                      fontWeight={500}\n                                      maxPrecision={4}\n                                      color={'cellText'}\n                                      number={balance.toString()}\n                                    />\n                                  </Flex>\n                                );\n                            })\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n                {\n                  this.state.showMaxSlippage && showSlippage && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Text>\n                          Choose max slippage:\n                        </Text>\n                        <Tooltip\n                          placement={'top'}\n                          message={`Max additional slippage on top of the one shown below`}\n                        >\n                          <Icon\n                            ml={1}\n                            size={'1em'}\n                            color={'cellTitle'}\n                            name={\"InfoOutline\"}\n                          />\n                        </Tooltip>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        {\n                          [0.2,0.5,1,5].map( slippage => (\n                            <FastBalanceSelector\n                              cardProps={{\n                                p:1\n                              }}\n                              textProps={{\n                                fontSize:1\n                              }}\n                              percentage={slippage}\n                              key={`selector_${slippage}`}\n                              onMouseDown={()=>this.setMaxSlippage(slippage)}\n                              isActive={this.state.maxSlippage === parseFloat(slippage)}\n                            />\n                          ))\n                        }\n                      </Flex>\n                    </Box>\n                  )\n                }\n                <Flex\n                  mb={3}\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  <Flex\n                    mb={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'flex-end'}\n                  >\n                    {\n                      showSlippage && (\n                        <Flex\n                          width={1}\n                          maxWidth={'40%'}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            textAlign={'right'}\n                            style={{\n                              whiteSpace:'nowrap'\n                            }}\n                            color={ parseFloat(this.state.withdrawSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                          >\n                            {\n                              parseFloat(this.state.withdrawSlippage.toFixed(3)) === 0 ?\n                                'No Slippage'\n                              : `${ this.state.withdrawSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.withdrawSlippage.abs().toFixed(3)}%`\n                            }\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={ this.state.redeemUnevenAmounts ? `You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.` : this.state.withdrawSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                          {\n                            !this.state.redeemUnevenAmounts &&\n                              <Link\n                                ml={1}\n                                color={'copyColor'}\n                                hoverColor={'primary'}\n                                onClick={this.showMaxSlippage.bind(this)}\n                              >\n                                change\n                              </Link>\n                          }\n                        </Flex>\n                      )\n                    }\n                    <Flex\n                      width={1}\n                      maxWidth={'60%'}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      justifyContent={'flex-end'}\n                    >\n                      <Link\n                        fontSize={1}\n                        fontWeight={3}\n                        color={'dark-gray'}\n                        textAlign={'right'}\n                        hoverColor={'copyColor'}\n                        onClick={ (e) => this.setFastBalanceSelector(100) }\n                        style={{\n                          maxWidth:'100%',\n                          overflow:'hidden',\n                          whiteSpace:'nowrap',\n                          textOverflow:'ellipsis'\n                        }}\n                      >\n                        {this.state.curveTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {curveTokenName}\n                      </Link>\n                    </Flex>\n                  </Flex>\n                  <Input\n                    min={0}\n                    type={\"number\"}\n                    required={true}\n                    height={'3.4em'}\n                    borderRadius={2}\n                    fontWeight={500}\n                    boxShadow={'none !important'}\n                    placeholder={`Insert amount`}\n                    onChange={this.changeInputValue.bind(this)}\n                    border={`1px solid ${this.props.theme.colors.divider}`}\n                    value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                  />\n                  <Flex\n                    mt={2}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      [25,50,75,100].map( percentage => (\n                        <FastBalanceSelector\n                          percentage={percentage}\n                          key={`selector_${percentage}`}\n                          onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                          isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                        />\n                      ))\n                    }\n                  </Flex>\n                </Flex>\n                <Flex\n                  justifyContent={'center'}\n                >\n                  <RoundButton\n                    buttonProps={{\n                      mt:2,\n                      width:[1,1/2],\n                      disabled:this.state.buttonDisabled\n                    }}\n                    handleClick={this.redeem.bind(this)}\n                  >\n                    Redeem\n                  </RoundButton>\n                </Flex>\n              </Flex>\n            )\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveRedeem;","import Migrate from '../Migrate/Migrate';\nimport IconBox from '../IconBox/IconBox';\nimport React, { Component } from 'react';\nimport ExtLink from '../ExtLink/ExtLink';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport ConnectBox from '../ConnectBox/ConnectBox';\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport RoundButton from '../RoundButton/RoundButton';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport ShareModal from '../utilities/components/ShareModal';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport TransactionField from '../TransactionField/TransactionField';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Input, Box, Icon, Link, Checkbox, Tooltip, Image } from \"rimble-ui\";\n\nclass DepositRedeem extends Component {\n\n  state = {\n    txError:{},\n    tokenAPY:'-',\n    inputValue:{},\n    processing:{},\n    curveAPY:null,\n    totalAUM:null,\n    canRedeem:false,\n    maxSlippage:0.2,\n    canDeposit:false,\n    action:'deposit',\n    directMint:false,\n    activeModal:null,\n    tokenGovTokens:{},\n    showBuyFlow:false,\n    maxUnlentPerc:null,\n    unlentBalance:null,\n    tokenApproved:false,\n    skipMigration:false,\n    redeemSkipGov:false,\n    showRedeemFlow:false,\n    contractPaused:false,\n    buttonDisabled:false,\n    canRedeemCurve:false,\n    erc20ForwarderTx:null,\n    signedParameters:null,\n    minAmountForMint:null,\n    showMaxSlippage:false,\n    redeemGovTokens:false,\n    canDepositCurve:false,\n    redeemSkipGovTokens:[],\n    fastBalanceSelector:{},\n    actionProxyContract:{},\n    migrationEnabled:false,\n    componentMounted:false,\n    curveTokenBalance:null,\n    agreeSkipGovTokens:false,\n    redeemCurveEnabled:false,\n    depositCurveBalance:null,\n    depositCurveEnabled:true,\n    showAdvancedOptions:false,\n    skipGovTokensGasSave:null,\n    depositCurveSlippage:null,\n    erc20ForwarderContract:{},\n    erc20ForwarderEnabled:false,\n    showETHWrapperEnabled:false,\n    skipGovTokensGasSaveUSD:null,\n    metaTransactionsEnabled:true,\n    skippedGovTokensBalance:null,\n    minAmountForMintReached:false,\n    loadingErc20ForwarderTx:false\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadProxyContracts();\n  }\n\n  async componentDidMount(){\n\n  }\n\n  setShowRedeemFlow = (showRedeemFlow) => {\n    this.setState({\n      showRedeemFlow\n    });\n  }\n\n  setShowBuyFlow = (showBuyFlow) => {\n    this.setState({\n      showBuyFlow\n    });\n  }\n\n  toggleShowAdvancedOptions = showAdvancedOptions => {\n    this.setState((prevState) => ({\n      showAdvancedOptions:!prevState.showAdvancedOptions\n    }));\n  }\n\n  toggleSkipMigration = skipMigration => {\n    this.setState({\n      skipMigration\n    });\n  }\n\n  toggleRedeemCurve = redeemCurveEnabled => {\n    this.setState({\n      redeemCurveEnabled\n    });\n  }\n\n  toggleDepositCurve = depositCurveEnabled => {\n    this.setState({\n      depositCurveEnabled\n    });\n  }\n\n  toggleShowETHWrapper = showETHWrapperEnabled => {\n    this.setState({\n      showETHWrapperEnabled\n    });\n  }\n\n  toggleAgreeSkipGovTokens = agreeSkipGovTokens => {\n    this.setState({\n      agreeSkipGovTokens\n    });\n  }\n\n  toggleSkipMint = (directMint) => {\n    this.setState({\n      directMint\n    });\n  }\n\n  toggleRedeemGovTokens = (redeemGovTokens) => {\n    this.setState({\n      redeemGovTokens,\n      redeemSkipGovTokens:[],\n      agreeSkipGovTokens:false,\n      skippedGovTokensBalance:this.functionsUtil.BNify(0),\n      redeemSkipGov:redeemGovTokens?false:this.state.redeemSkipGov\n    });\n  }\n\n  toggleRedeemSkipGov = (redeemSkipGov) => {\n    this.setState({\n      redeemSkipGov,\n      redeemSkipGovTokens:[],\n      agreeSkipGovTokens:false,\n      skippedGovTokensBalance:this.functionsUtil.BNify(0),\n      redeemGovTokens:redeemSkipGov?false:this.state.redeemGovTokens\n    });\n  }\n\n  getSkippedGovTokensFlags = async () => {\n    const govTokensIndexes = await this.functionsUtil.getGovTokensIndexes(this.props.account,this.props.tokenConfig);\n    const govTokensFlags = Object.keys(govTokensIndexes).map( token => {\n      return this.state.redeemSkipGovTokens.includes(token);\n    });\n    // console.log('getSkippedGovTokensFlags',govTokensIndexes,govTokensFlags);\n    return govTokensFlags;\n  }\n\n  calculateSkippedGovTokens = async () => {\n    let skippedGovTokensBalance = this.functionsUtil.BNify(0);\n    const DAITokenConfig = this.functionsUtil.getGlobalConfig(['stats','tokens','DAI']);\n\n    await this.functionsUtil.asyncForEach(this.state.redeemSkipGovTokens, async (govToken) => {\n      const govTokenConfig = this.functionsUtil.getGlobalConfig(['govTokens',govToken]);\n      const govTokenPrice = await this.functionsUtil.getUniswapConversionRate(DAITokenConfig,govTokenConfig);\n      const skippedAmount = this.props.govTokensUserBalances[govToken].times(govTokenPrice);\n      skippedGovTokensBalance = skippedGovTokensBalance.plus(skippedAmount);\n    });\n\n    const _skipGovTokenRedeem = await this.getSkippedGovTokensFlags();\n    const WETHTokenConfig = this.functionsUtil.getGlobalConfig(['stats','tokens','WETH']);\n\n    const [\n      wethPrice,\n      redeemGasUsage,\n      skipGovRedeemGasUsage\n    ] = await Promise.all([\n      this.functionsUtil.getUniswapConversionRate(DAITokenConfig,WETHTokenConfig),\n      this.functionsUtil.estimateMethodGasUsage(this.props.tokenConfig.idle.token, 'redeemIdleToken', [this.functionsUtil.normalizeTokenAmount(this.props.idleTokenBalance,this.props.tokenConfig.decimals)], this.props.account),\n      this.functionsUtil.estimateMethodGasUsage(this.props.tokenConfig.idle.token, 'redeemIdleTokenSkipGov', [this.functionsUtil.normalizeTokenAmount(this.props.idleTokenBalance,this.props.tokenConfig.decimals),_skipGovTokenRedeem], this.props.account)\n    ]);\n\n    const skipGovTokensGasSave = redeemGasUsage && skipGovRedeemGasUsage ? redeemGasUsage.minus(skipGovRedeemGasUsage) : this.functionsUtil.BNify(0);\n    const skipGovTokensGasSaveUSD = skipGovTokensGasSave ? skipGovTokensGasSave.times(wethPrice) : this.functionsUtil.BNify(0);\n\n    this.setState({\n      skipGovTokensGasSave,\n      skipGovTokensGasSaveUSD,\n      skippedGovTokensBalance\n    });\n    return skippedGovTokensBalance;\n  }\n\n  setRedeemSkipGovTokens = (token,checked) => {\n    this.setState((prevState) => {\n      const redeemSkipGovTokens = Object.assign([],prevState.redeemSkipGovTokens);\n      if (!checked && redeemSkipGovTokens.includes(token)){\n        redeemSkipGovTokens.splice(redeemSkipGovTokens.indexOf(token),1);\n      } else if (checked && !redeemSkipGovTokens.includes(token)) {\n        redeemSkipGovTokens.push(token);\n      }\n      return {\n        redeemSkipGovTokens\n      };\n    },() => {\n      this.calculateSkippedGovTokens();\n    });\n  }\n\n  toggleErc20ForwarderEnabled = (erc20ForwarderEnabled) => {\n    const newState = {\n      erc20ForwarderEnabled\n    };\n\n    this.setState(newState, () => {\n      this.cancelTransaction();\n    });\n  }\n\n  toggleMetaTransactionsEnabled = (metaTransactionsEnabled) => {\n    this.setState({\n      metaTransactionsEnabled\n    });\n  }\n\n  async loadProxyContracts(){\n    const actions = ['deposit','redeem'];\n    const newState = {\n      actionProxyContract:{},\n      erc20ForwarderContract:{}\n    };\n\n    await this.functionsUtil.asyncForEach(actions,async (action) => {\n      let mintProxyContractInfo = null;\n      const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods',action,'erc20ForwarderEnabled']);\n\n      if (depositErc20ForwarderEnabled){\n        mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract','methods',action,'erc20ForwarderProxyContract','forwarder']);\n\n        await this.props.initContract(mintProxyContractInfo.name,mintProxyContractInfo.address,mintProxyContractInfo.abi);\n\n        // Init contract for erc20 forwarder\n        const erc20ForwarderContractInfo = this.functionsUtil.getGlobalConfig(['contract','methods',action,'erc20ForwarderProxyContract','tokens',this.props.selectedToken]);\n        if (erc20ForwarderContractInfo){\n          mintProxyContractInfo = erc20ForwarderContractInfo;\n          const erc20ForwarderContract = await this.props.initContract(erc20ForwarderContractInfo.name,erc20ForwarderContractInfo.address,erc20ForwarderContractInfo.abi);\n          newState.erc20ForwarderContract[action] = erc20ForwarderContractInfo;\n          newState.erc20ForwarderContract[action].contract = erc20ForwarderContract.contract;\n        }\n      }\n\n      if (!mintProxyContractInfo){\n        mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract','methods',action,'proxyContract']);\n      }\n\n      const hasProxyContract = mintProxyContractInfo && mintProxyContractInfo.enabled;\n      newState.actionProxyContract[action] = hasProxyContract ? mintProxyContractInfo : null;\n      if (hasProxyContract){\n        const proxyContract = await this.props.initContract(mintProxyContractInfo.name,mintProxyContractInfo.address,mintProxyContractInfo.abi);\n        newState.actionProxyContract[action].contract = proxyContract.contract;\n        newState.actionProxyContract[action].approved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,mintProxyContractInfo.address,this.props.account);\n      }\n    });\n\n    this.setState(newState);\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadAPY(){\n    const tokenAprs = await this.functionsUtil.getTokenAprs(this.props.tokenConfig);\n    if (tokenAprs && tokenAprs.avgApy !== null){\n      const tokenAPY = this.functionsUtil.BNify(tokenAprs.avgApy).toFixed(2);\n\n      let curveAPY = null;\n      if (this.state.canDepositCurve){\n        curveAPY = await this.functionsUtil.getCurveAPY();\n        // console.log('curveAPY',curveAPY);\n        if (curveAPY){\n          curveAPY = curveAPY.plus(tokenAPY);\n        }\n      }\n      this.setState({\n        tokenAPY,\n        curveAPY\n      });\n    }\n  }\n\n  getReferralAddress(){\n    let _referral = this.functionsUtil.getQueryStringParameterByName('_referral');\n    if (!this.functionsUtil.checkAddress(_referral)){\n      _referral = null;\n    }\n    return _referral;\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    // console.log('componentDidUpdate',this.props.tokenBalance);\n\n    if (this.props.tokenBalance === null){\n      return false;\n    }\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    const erc20ForwarderEnabledChanged = prevState.erc20ForwarderEnabled !==  this.state.erc20ForwarderEnabled;\n    const tokenBalanceChanged = prevProps.tokenBalance !== this.props.tokenBalance && this.props.tokenBalance !== null;\n\n    if (tokenChanged || tokenBalanceChanged || erc20ForwarderEnabledChanged){\n      await this.loadProxyContracts();\n      this.loadTokenInfo();\n      return false;\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n\n    if (actionChanged || fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const inputValueChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputValueChanged){\n      // this.checkMinAmountForMint();\n    }\n\n    const redeemSkipGovChanged = prevState.redeemSkipGov !== this.state.redeemSkipGov;\n    const redeemGovTokensChanged = prevState.redeemGovTokens !== this.state.redeemGovTokens;\n    const agreeSkipGovTokensChanged = prevState.agreeSkipGovTokens !== this.state.agreeSkipGovTokens;\n    const redeemSkipGovTokensChanged = JSON.stringify(prevState.redeemSkipGovTokens) !== JSON.stringify(this.state.redeemSkipGovTokens);\n\n    if (redeemGovTokensChanged || actionChanged || redeemSkipGovTokensChanged || redeemSkipGovChanged || agreeSkipGovTokensChanged){\n      this.checkButtonDisabled();\n    }\n\n    const depositCurveChanged = prevState.depositCurveEnabled !== this.state.depositCurveEnabled;\n    const metaTransactionsChanged = prevState.metaTransactionsEnabled !== this.state.metaTransactionsEnabled;\n    if (metaTransactionsChanged || depositCurveChanged){\n      const tokenApproved = await this.checkTokenApproved();\n      this.setState({\n        tokenApproved\n      });\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateCurveSlippage();\n    }\n  }\n\n  async checkMinAmountForMint(){\n    let showPoolPerc = false;\n    let totalAUM = this.state.totalAUM;\n    let maxUnlentPerc = this.state.maxUnlentPerc;\n    const isRisk = this.props.selectedStrategy === 'risk';\n    const inputValue = this.functionsUtil.BNify(this.state.inputValue[this.state.action]);\n\n    if (inputValue.gt(this.props.tokenBalance)){\n      return false;\n    }\n\n    const convertedAmount = await this.functionsUtil.convertTokenBalance(inputValue,this.props.selectedToken,this.props.tokenConfig,isRisk);\n    let minAmountForMint = this.functionsUtil.BNify(this.functionsUtil.getGlobalConfig(['contract','methods','deposit','minAmountForMint']));\n    let minAmountForMintReached = convertedAmount.gte(minAmountForMint);\n\n    // Check token minAmountForMint\n    if (minAmountForMintReached){\n      if (this.props.tokenConfig.deposit && this.props.tokenConfig.deposit.minAmountForMint && convertedAmount.lt(this.props.tokenConfig.deposit.minAmountForMint)){\n        minAmountForMintReached = false;\n      } else {\n        [\n          maxUnlentPerc,\n          totalAUM\n        ] = await Promise.all([\n          maxUnlentPerc || this.functionsUtil.genericContractCall(this.props.tokenConfig.idle.token, 'maxUnlentPerc'),\n          totalAUM ||this.functionsUtil.loadAssetField('pool',this.props.selectedToken,this.props.tokenConfig,this.props.account)\n        ]);\n\n        if (maxUnlentPerc && totalAUM){\n          const depositPerc = inputValue.div(totalAUM).times(100);\n          maxUnlentPerc = this.functionsUtil.BNify(maxUnlentPerc);\n          const maxUnlentPercFormatted = maxUnlentPerc.div(1e3).times(2);\n          if (depositPerc.lt(maxUnlentPercFormatted)){\n            minAmountForMintReached = false;\n          } else if (totalAUM.times(maxUnlentPercFormatted.div(100)).gt(minAmountForMint)) {\n            showPoolPerc = true;\n            minAmountForMint = totalAUM.times(maxUnlentPercFormatted.div(100));\n          }\n        }\n      }\n    }\n\n    this.setState({\n      totalAUM,\n      showPoolPerc,\n      maxUnlentPerc,\n      minAmountForMint,\n      minAmountForMintReached\n    });\n  }\n\n  async calculateCurveSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,curvePoolContractInfo.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositCurveBalance = amount;\n        newState.depositCurveSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n      break;  \n      case 'redeem':\n        // newState.redeemBalance = amount;\n        // newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateCurveSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  checkUseProxyContract = () => {\n    const proxyContract = this.state.actionProxyContract[this.state.action];\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','metaTransactionsEnabled']) && this.state.metaTransactionsEnabled;\n    return ((depositErc20ForwarderEnabled || depositMetaTransactionsEnabled) && proxyContract && this.props.biconomy);\n  }\n\n  approveContract = async (callbackApprove,callbackReceiptApprove) => {\n    if (this.state.depositCurveEnabled){\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve','depositContract']);\n      this.functionsUtil.enableERC20(this.props.selectedToken,curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n    } else {\n      // Check Proxy Contract Approved for Deposit with Biconomy\n      const useProxyContract = this.checkUseProxyContract();\n      if (useProxyContract){\n        const proxyContract = this.state.actionProxyContract[this.state.action];\n        this.functionsUtil.enableERC20(this.props.selectedToken,proxyContract.address,callbackApprove,callbackReceiptApprove);\n      } else {\n        this.functionsUtil.enableERC20(this.props.selectedToken,this.props.tokenConfig.idle.address,callbackApprove,callbackReceiptApprove);\n      }\n    }\n  }\n\n  checkTokenApproved = async () => {\n    let tokenApproved = false;\n    if (this.state.depositCurveEnabled){\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve','depositContract']);\n      tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,curveDepositContract.address,this.props.account);\n    } else {\n      // Check Proxy Contract Approved for Deposit with Biconomy\n      const useProxyContract = this.checkUseProxyContract();\n      if (useProxyContract){\n        // Check for Permit Deposit\n        const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n        if (depositErc20ForwarderEnabled){\n          const permitEnabled = this.functionsUtil.getGlobalConfig(['permit',this.props.selectedToken]);\n          if (permitEnabled){\n            return true;\n          }\n        }\n        // Check proxy contract approved\n        const proxyContract = this.state.actionProxyContract[this.state.action];\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,proxyContract.address,this.props.account);\n        // console.log('tokenApproved 1',tokenApproved);\n      } else {\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,this.props.tokenConfig.idle.address,this.props.account);\n        // console.log('tokenApproved 2',tokenApproved);\n      }\n    }\n\n    return tokenApproved;\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = await this.checkTokenApproved();\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.props.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.approveContract(callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  loadTokenInfo = async () => {\n\n    if (this.state.componentMounted){\n      this.setState({\n        componentMounted:false\n      });\n    }\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token]);\n    const curveTokenEnabled = curveConfig.enabled && curveTokenConfig && curveTokenConfig.enabled;\n\n    const [\n      tokenApproved,\n      contractPaused,\n      curveSwapContract,\n      curveDepositContract,\n      unlentBalance,\n      {migrationEnabled},\n      curveTokenBalance,\n    ] = await Promise.all([\n      this.checkTokenApproved(),\n      this.functionsUtil.checkContractPaused(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract(),\n      this.functionsUtil.getUnlentBalance(this.props.tokenConfig),\n      this.functionsUtil.checkMigration(this.props.tokenConfig,this.props.account),\n      curveTokenEnabled ? this.functionsUtil.getCurveTokenBalance(this.props.account) : null\n    ]);\n\n    const canDeposit = this.props.tokenBalance && this.functionsUtil.BNify(this.props.tokenBalance).gt(0);\n    const canRedeem = this.props.idleTokenBalance && this.functionsUtil.BNify(this.props.idleTokenBalance).gt(0);\n\n    const canDepositCurve = curveTokenEnabled && canDeposit;\n    const depositCurveEnabled = canDepositCurve;\n\n    const showETHWrapperEnabled = this.props.selectedToken === 'WETH' && (this.state.showETHWrapperEnabled || !canDeposit);\n\n    const canRedeemCurve = curveTokenEnabled && curveTokenBalance && curveTokenBalance.gt(0);\n    const redeemCurveEnabled = canRedeemCurve;\n\n    const tokenGovTokens = this.functionsUtil.getTokenGovTokens(this.props.tokenConfig);\n\n    const newState = {...this.state};\n\n    // Check curve deposit enabled\n    if (newState.depositCurveEnabled && !curveTokenEnabled){\n      newState.depositCurveEnabled = false;\n    }\n    \n\n    newState.canRedeem = canRedeem;\n    newState.canDeposit = canDeposit;\n    newState.unlentBalance = unlentBalance;\n    newState.tokenApproved = tokenApproved;\n    newState.tokenGovTokens = tokenGovTokens;\n    newState.contractPaused = contractPaused;\n    newState.canRedeemCurve = canRedeemCurve;\n    newState.canDepositCurve = canDepositCurve;\n    newState.migrationEnabled = migrationEnabled;\n    newState.curveTokenBalance = curveTokenBalance;\n    newState.curveSwapContract = curveSwapContract;\n    newState.redeemCurveEnabled = redeemCurveEnabled;\n    newState.depositCurveEnabled = depositCurveEnabled;\n    newState.curveDepositContract = curveDepositContract;\n    newState.showETHWrapperEnabled = showETHWrapperEnabled;\n\n    newState.txError = {\n      redeem:false,\n      deposit:false\n    };\n    newState.processing = {\n      redeem:{\n        txHash:null,\n        loading:false\n      },\n      deposit:{\n        txHash:null,\n        loading:false\n      },\n      approve:{\n        txHash:null,\n        loading:false\n      },\n      boost:{\n        txHash:null,\n        loading:false\n      }\n    };\n    newState.inputValue = {\n      boost:null,\n      redeem:null,\n      deposit:null\n    };\n    newState.fastBalanceSelector = {\n      boost:null,\n      redeem:null,\n      deposit:null\n    };\n\n    newState.componentMounted = true;\n\n    // console.log('loadTokenInfo',newState);\n\n    this.setState(newState,() => {\n      this.checkAction();\n      this.loadAPY();\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      erc20ForwarderTx:null,\n      loadingErc20ForwarderTx:false,\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const redeemGovTokens = this.state.redeemGovTokens;\n    const selectedPercentage = this.getFastBalanceSelector();\n    const inputValue = this.state.inputValue[this.state.action];\n    const redeemSkipGov = this.state.redeemSkipGov && this.state.redeemSkipGovTokens.length>0 && this.state.agreeSkipGovTokens;\n\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','metaTransactionsEnabled']) && this.state.metaTransactionsEnabled;\n\n    let loading = true;\n\n    switch (this.state.action){\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        if (!this.state.tokenApproved){\n          return this.approveToken();\n        }\n\n        if (localStorage){\n          this.functionsUtil.setLocalStorage('redirectToFundsAfterLogged',0);\n        }\n\n        this.setState({\n          lendingProcessing: this.props.account,\n          lendAmount: '',\n          genericError: '',\n        });\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.props.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if ((this.state.metaTransactionsEnabled || this.state.erc20ForwarderEnabled) && txError){\n            this.setState({\n              erc20ForwarderTx:null,\n              loadingErc20ForwarderTx:false,\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          // console.log('callbackReceiptDeposit',tx);\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n        const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token,'enabled']);\n\n        // Curve Deposit\n        if (curveTokenEnabled && this.state.depositCurveEnabled){\n\n          const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,curvePoolContractInfo.decimals);\n\n          const amounts = await this.functionsUtil.getCurveAmounts(this.props.tokenConfig.idle.token,tokensToDeposit);\n          let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n          if (this.state.maxSlippage){\n            minMintAmount = this.functionsUtil.BNify(minMintAmount);\n            minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n            minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n          }\n          \n          const depositParams = [amounts,minMintAmount];\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, callbackDeposit, callbackReceiptDeposit);\n        // Normal Deposit\n        } else {\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n\n          // const gasLimitDeposit = this.functionsUtil.BNify(1000000);\n          let depositParams = [];\n\n          // Use Proxy Contract if enabled\n          const useProxyContract = this.checkUseProxyContract();\n          if (useProxyContract){\n            const mintProxyContractInfo = this.state.actionProxyContract[this.state.action];\n            const mintProxyContract = mintProxyContractInfo.contract;\n\n            // Use Meta-Transactions\n            if (depositMetaTransactionsEnabled){\n              depositParams = [tokensToDeposit, this.props.tokenConfig.idle.address];\n              const functionCall = mintProxyContract.methods[mintProxyContractInfo.function](...depositParams);\n              const functionSignature = functionCall.encodeABI();\n              // console.log('mintProxyContract',mintProxyContractInfo.function,depositParams);\n              // if (this.state.metaTransactionsEnabled){\n              contractSendResult = await this.functionsUtil.sendBiconomyTxWithPersonalSign(mintProxyContractInfo.name, functionSignature, callbackDeposit, callbackReceiptDeposit);\n              // } else {\n              //   contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n              // }\n            // Use Erc20 Forwarder\n            } else if (depositErc20ForwarderEnabled){\n\n              // Check if the deposit method require the nonce\n              const methodAbi = mintProxyContractInfo.contract._jsonInterface.find( f => f.name === mintProxyContractInfo.function );\n              const useNonce = methodAbi ? methodAbi.inputs.find( i => i.name === 'nonce' ) : true;\n\n              // Build ERC20 Forwarder Tx\n              if (!this.state.erc20ForwarderTx){\n                this.setState({\n                  txError:{\n                    [this.state.action]:false\n                  },\n                  loadingErc20ForwarderTx:true\n                }, async () => {\n                  const erc20ForwarderContract = this.state.erc20ForwarderContract[this.state.action];\n                  const signedParameters = await this.functionsUtil.signPermit(this.props.selectedToken, this.props.account, erc20ForwarderContract.name, 0, tokensToDeposit);\n                  \n                  // console.log('signedParameters_1',signedParameters);\n\n                  if (signedParameters){\n\n                    const { expiry, nonce, r, s, v } = signedParameters;\n\n                    if (useNonce){\n                      depositParams = [tokensToDeposit, parseInt(nonce), expiry, v, r, s];\n                    } else {\n                      depositParams = [tokensToDeposit, expiry, v, r, s];\n                    }\n\n                    if (mintProxyContractInfo.function === 'foo'){\n                      depositParams = [];\n                    }\n\n                    // console.log('permitAndDeposit',mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams);\n\n                    // contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n\n                    const permitType = erc20ForwarderContract.permitType;\n                    const functionCall = erc20ForwarderContract.contract.methods[erc20ForwarderContract.function](...depositParams);\n                    const functionSignature = functionCall.encodeABI();\n\n                    // console.log('functionSignature',permitType, erc20ForwarderContract.function, depositParams);\n\n                    let gasLimit = null;\n                    try {\n                      gasLimit = await functionCall.estimateGas({from: this.props.account}); // 5000000;\n                      if (gasLimit){\n                        gasLimit = this.functionsUtil.BNify(gasLimit).times(1.2);\n                      } else {\n                        gasLimit = this.functionsUtil.BNify(1000000);\n                      }\n                    } catch (error) {\n                      // console.log('Gas Estimate - Error: ',error);\n                    }\n                    \n                    if (!gasLimit){\n                      gasLimit = this.functionsUtil.BNify(1000000);\n                    }\n\n                    // console.log('gasEstimate',mintProxyContractInfo.name, depositParams, parseFloat(gasLimit));\n\n                    // debugger;\n\n                    const erc20ForwarderTx = await this.functionsUtil.buildBiconomyErc20ForwarderTx(erc20ForwarderContract.name, this.props.tokenConfig.address, permitType, functionSignature, gasLimit);\n                    // console.log('erc20ForwarderTx',erc20ForwarderTx);\n                    return this.setState({\n                      erc20ForwarderTx,\n                      loadingErc20ForwarderTx:false\n                    });\n                  } else {\n                    return this.setState((prevState) => ({\n                      processing: {\n                        ...prevState.processing,\n                        [this.state.action]:{\n                          txHash:null,\n                          loading:false\n                        }\n                      },\n                      signedParameters:null,\n                      erc20ForwarderTx:null,\n                      loadingErc20ForwarderTx:false\n                    }));\n                  }\n                });\n              // Send ERC20 Forwarder Tx\n              } else {\n                this.setState({\n                  txError:{\n                    [this.state.action]:false\n                  },\n                  loadingErc20ForwarderTx:true\n                }, async () => {\n                  const metaInfo = {};\n                  const permitOptions = {};\n                  const erc20ForwarderContract = this.state.erc20ForwarderContract[this.state.action];\n                  const erc20ForwarderBaseContract = this.functionsUtil.getGlobalConfig(['contract','methods',this.state.action,'erc20ForwarderProxyContract','forwarder']);\n\n                  const permitValue = `${tokensToDeposit}00`;\n                  const incrementNonce = 1; // useNonce ? 1 : 0;\n                  const signedParameters = await this.functionsUtil.signPermit(this.props.selectedToken, this.props.account, erc20ForwarderBaseContract.name, incrementNonce, permitValue);\n\n                  // console.log('signedParameters_2',signedParameters);\n\n                  if (signedParameters){\n\n                    this.setState({\n                      signedParameters\n                    });\n\n                    const permitConfig = this.functionsUtil.getGlobalConfig(['permit',this.props.selectedToken]);\n                    const setValue = permitConfig.type.find( t => t.name==='value' );\n\n                    const { expiry, nonce, r, s, v } = signedParameters;\n                    permitOptions.v = v;\n                    permitOptions.r = r;\n                    permitOptions.s = s;\n                    permitOptions.allowed = true;\n                    permitOptions.expiry = parseInt(expiry);\n                    permitOptions.holder = this.props.account;\n                    permitOptions.value = setValue ? permitValue : 0;\n                    permitOptions.nonce = parseInt(nonce.toString());\n                    permitOptions.spender = erc20ForwarderBaseContract.address;\n\n                    metaInfo.permitData = permitOptions;\n                    metaInfo.permitType = erc20ForwarderContract.permitType;\n\n                    // console.log('sendBiconomyTxWithErc20Forwarder',permitOptions,metaInfo);\n\n                    await this.functionsUtil.asyncTimeout(200);\n\n                    contractSendResult = await this.functionsUtil.sendBiconomyTxWithErc20Forwarder(this.state.erc20ForwarderTx.request, metaInfo, callbackDeposit, callbackReceiptDeposit);\n\n                    this.setState({\n                      erc20ForwarderTx:null,\n                      loadingErc20ForwarderTx:false\n                    });\n                  } else {\n                    return this.setState((prevState) => ({\n                      processing: {\n                        ...prevState.processing,\n                        [this.state.action]:{\n                          txHash:null,\n                          loading:false\n                        }\n                      },\n                      signedParameters:null,\n                      erc20ForwarderTx:null,\n                      loadingErc20ForwarderTx:false\n                    }));\n                  }\n                });\n              }\n            }\n          // Use main contract if no proxy contract exists\n          } else {\n            /*\n            let _skipMint = !this.state.directMint && this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMint']);\n            _skipMint = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : _skipMint;\n\n            // Check if deposited amount is greated that general lower limit for direct mint\n            if (_skipMint && this.state.minAmountForMintReached){\n              _skipMint = false;\n            }\n            */\n            // Always skip mint\n            let _skipMint = true;\n\n            const _referral = this.getReferralAddress() || '0x0000000000000000000000000000000000000000';\n            depositParams = [tokensToDeposit, _skipMint, _referral];\n            // console.log('depositParams',depositParams);\n            contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'mintIdleToken', depositParams, callbackDeposit, callbackReceiptDeposit);\n          }\n        }\n      break;\n      case 'redeem':\n\n        if (redeemGovTokens){\n          const callbackRedeem = (tx,error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_gov`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: 0\n            };\n\n            if (error){\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error'){\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  txHash:null,\n                  loading:false\n                }\n              }\n            }));\n\n            if (txSucceeded){\n              this.setState((prevState) => ({\n                inputValue:{\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'redeemIdleToken', [0], callbackRedeem, callbackReceiptRedeem);\n          \n        } else {\n\n          if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n            return false;\n          }\n\n          const txData = {\n            value:this.functionsUtil.BNify(inputValue)\n          };\n\n          let idleTokenToRedeem = null;\n          if (selectedPercentage){\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage);\n          } else {\n            const idleTokenPriceWithFee = await this.functionsUtil.getIdleTokenPriceWithFee(this.props.tokenConfig,this.props.account)\n            idleTokenToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals)).div(idleTokenPriceWithFee);\n          }\n\n          // Check if idleTokens to redeem > idleToken balance\n          if (idleTokenToRedeem.gt(this.functionsUtil.BNify(this.props.idleTokenBalance))){\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance);\n          }\n\n          // Normalize number\n          idleTokenToRedeem = this.functionsUtil.normalizeTokenAmount(idleTokenToRedeem,18);\n\n          if (!idleTokenToRedeem){\n            return false;\n          }\n\n          const callbackRedeem = (tx,error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_partial`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: parseInt(inputValue)\n            };\n\n            if (error){\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error'){\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  txHash:null,\n                  loading:false\n                }\n              }\n            }));\n\n            if (txSucceeded){\n              this.setState((prevState) => ({\n                inputValue:{\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          let redeemMethod = 'redeemIdleToken';\n          let redeemParams = [idleTokenToRedeem];\n\n          if (redeemSkipGov){\n            redeemMethod = 'redeemIdleTokenSkipGov';\n            const _skipGovTokenRedeem = await this.getSkippedGovTokensFlags();\n            redeemParams.push(_skipGovTokenRedeem);\n          }\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, redeemMethod, redeemParams, callbackRedeem, callbackReceiptRedeem, txData);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    if (contractSendResult !== false || loading !== this.state.processing[this.state.action].loading){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  showMaxSlippage = () => {\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  checkAction = () => {\n    let action = this.state.action;\n\n    switch(action){\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = 'deposit';\n        }\n      break;\n      default:\n      break;\n    }\n\n    if (action !== this.state.action){\n      this.setState({\n        action\n      },() => {\n        this.checkButtonDisabled();\n      });\n    } else {\n      this.checkButtonDisabled();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && (amount.lte(0) || amount.gt(this.props.tokenBalance)));\n      break;\n      case 'redeem':\n        buttonDisabled = !this.state.canRedeemCurve && !this.state.redeemGovTokens && (buttonDisabled || ( !amount || amount.lte(0) || amount.gt(this.props.redeemableBalance) ));\n\n        if (!buttonDisabled && this.state.redeemSkipGov && this.state.redeemSkipGovTokens.length>0 && !this.state.agreeSkipGovTokens){\n          buttonDisabled = true;\n        }\n        // console.log('checkButtonDisabled',this.state.redeemSkipGov,this.state.redeemSkipGovTokens.length,this.state.agreeSkipGovTokens,buttonDisabled);\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.props.tokenBalance ? this.functionsUtil.BNify(this.props.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        amount = this.props.redeemableBalance ? this.functionsUtil.BNify(this.props.redeemableBalance).times(selectedPercentage) : null;\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  changeInputValue = async (e) => {\n    if (!this.state.action){\n      return false;\n    }\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem && !this.state.canRedeemCurve){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const viewOnly = this.props.connectorName === 'custom';\n\n    const govTokensDisabled = this.props.tokenConfig.govTokensDisabled;\n    const govTokensEnabled = !govTokensDisabled && this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'govTokensEnabled']) && Object.keys(this.state.tokenGovTokens).length>0;\n    const skipMintForDepositEnabled = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : true;\n    const skipMintCheckboxEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMintCheckboxEnabled']) && skipMintForDepositEnabled;\n\n    const showRedeemFlow = this.state.canRedeem && (!this.state.redeemCurveEnabled || this.state.showRedeemFlow) && this.state.action==='redeem';\n\n    const redeemGovTokenEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','redeemGovTokens','enabled']) && govTokensEnabled && showRedeemFlow && this.props.govTokensBalance.gt(0);\n    const redeemGovTokens = redeemGovTokenEnabled && this.state.redeemGovTokens;\n\n    const redeemSkipGovConfig = this.functionsUtil.getGlobalConfig(['contract','methods','redeemSkipGov']);\n    const redeemSkipGovEnabled = redeemSkipGovConfig && !redeemSkipGovConfig.disabledTokens.includes(this.props.tokenConfig.idle.token) && govTokensEnabled && showRedeemFlow;\n    const redeemSkipGov = redeemSkipGovEnabled && this.state.redeemSkipGov && Object.keys(this.props.govTokensUserBalances).length>0 && this.props.govTokensBalance.gt(0);\n    const redeemSkipGovNoTokens = redeemSkipGovEnabled && this.state.redeemSkipGov && (!Object.keys(this.props.govTokensUserBalances).length || this.props.govTokensBalance.lte(0));\n\n\n    const showAdvancedRedeemOptions = redeemGovTokenEnabled || redeemSkipGovEnabled;\n    // console.log('showAdvancedRedeemOptions',showAdvancedRedeemOptions,redeemGovTokenEnabled,redeemSkipGovEnabled,govTokensEnabled,showRedeemFlow);\n\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderEnabled']);\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','metaTransactionsEnabled']);\n    const depositErc20ForwarderEnabledTokens = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderProxyContract','tokens']);\n\n    // Biconomy Start\n    const metaTransactionsAvailable = depositMetaTransactionsEnabled && this.props.biconomy && this.state.actionProxyContract[this.state.action];\n    const useMetaTx = metaTransactionsAvailable && this.state.metaTransactionsEnabled;\n\n    const erc20ForwarderEnabled = depositErc20ForwarderEnabled && Object.keys(depositErc20ForwarderEnabledTokens).includes(this.props.selectedToken) && depositErc20ForwarderEnabledTokens[this.props.selectedToken].enabled && this.props.biconomy && this.props.erc20ForwarderClient && this.state.actionProxyContract[this.state.action];\n\n    // console.log(erc20ForwarderEnabled,depositErc20ForwarderEnabled,this.props.biconomy,this.props.erc20ForwarderClient,this.state.actionProxyContract[this.state.action]);\n    // Biconomy End\n\n    const totalBalance = this.state.action === 'deposit' ? this.props.tokenBalance : this.props.redeemableBalance;\n    const migrateText = this.state.migrationEnabled && this.props.tokenConfig.migration.message !== undefined ? this.props.tokenConfig.migration.message : null;\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token,'enabled']);\n\n    const depositCurve = curveTokenEnabled && this.state.depositCurveEnabled && this.state.action === 'deposit';\n\n    const showDepositOptions = this.state.action === 'deposit' && !this.state.contractPaused && (curveTokenEnabled || this.state.tokenApproved);\n\n    const showDepositCurve = showDepositOptions && curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canDepositCurve && this.state.action === 'deposit';\n    const showRedeemCurve = curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canRedeemCurve && this.state.action === 'redeem';\n\n    const showCurveSlippage = depositCurve && this.state.depositCurveSlippage && this.state.depositCurveBalance && !this.state.buttonDisabled;\n\n    const showRebalanceOption = false && this.state.canDeposit && skipMintCheckboxEnabled && this.state.action === 'deposit';\n    const showAdvancedDepositOptions = showDepositCurve || showRebalanceOption;\n\n    const batchDepositInfo = this.functionsUtil.getGlobalConfig(['tools','batchDeposit']);\n    const batchDepositEnabled = batchDepositInfo.enabled && typeof batchDepositInfo.props.availableTokens[this.props.tokenConfig.idle.token] !== 'undefined';\n    const batchDepositDepositEnabled = batchDepositInfo.depositEnabled;\n\n    const showBatchDeposit = !useMetaTx && batchDepositEnabled && batchDepositDepositEnabled && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    const ethWrapperInfo = this.functionsUtil.getGlobalConfig(['tools','ethWrapper']);\n    const ETHWrapperComponent = ethWrapperInfo.subComponent;\n    const showETHWrapper = this.props.selectedToken === 'WETH' && ethWrapperInfo.enabled && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    const canPerformAction = /*!depositCurve && !this.state.redeemCurveEnabled && */((this.state.action === 'deposit' && this.state.canDeposit) || (this.state.action === 'redeem' && this.state.canRedeem) || redeemGovTokens) && (!this.state.showETHWrapperEnabled || this.state.action === 'redeem');\n    const showActionFlow = !redeemGovTokens && canPerformAction;\n\n    const showBuyFlow = this.state.componentMounted && (!showDepositCurve || this.state.showBuyFlow) && !this.state.depositCurveEnabled && this.state.tokenApproved && !this.state.contractPaused && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.action === 'deposit' && !this.state.canDeposit && !this.state.showETHWrapperEnabled;\n\n    const _referral = this.getReferralAddress();\n    const showReferral = _referral && this.state.action === 'deposit' && showActionFlow && !showBuyFlow;\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          <Box\n            width={1}\n          >\n            <Text mb={1}>\n              Select your asset:\n            </Text>\n            <AssetSelector\n              {...this.props}\n            />\n          </Box>\n          {\n            viewOnly ? (\n              <IconBox\n                cardProps={{\n                  mt:3\n                }}\n                icon={'Visibility'}\n                text={'You are using Idle in \"Read-Only\" mode.<br />Logout and connect with your wallet to interact.'}\n              />\n            ) : (\n              <Migrate\n                {...this.props}\n                migrateTextBefore={migrateText}\n                migrateText={migrateText !== null ? '' : null}\n                toggleSkipMigration={this.toggleSkipMigration.bind(this)}\n              >\n                {\n                  !this.props.account ? (\n                    <ConnectBox\n                      {...this.props}\n                    />\n                  ) : this.state.componentMounted ? (\n                    this.state.action && (\n                      <Box\n                        width={1}\n                      >\n                        <Flex\n                          mt={2}\n                          flexDirection={'column'}\n                        >\n                          <Text mb={2}>\n                            Choose the action:\n                          </Text>\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'space-between'}\n                          >\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                width:0.48,\n                                onMouseDown:() => {\n                                  this.setAction('deposit');\n                                }\n                              }}\n                              isInteractive={true}\n                              isActive={ this.state.action === 'deposit' }\n                            >\n                              <Flex\n                                my={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <TransactionField\n                                  transaction={{\n                                    action:'deposit'\n                                  }}\n                                  fieldInfo={{\n                                    name:'icon',\n                                    props:{\n                                      mr:3\n                                    }\n                                  }}\n                                />\n                                <Text\n                                  fontSize={3}\n                                  fontWeight={3}\n                                >\n                                  Deposit\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                width:0.48,\n                                onMouseDown:() => {\n                                  this.setAction('redeem');\n                                }\n                              }}\n                              isInteractive={true}\n                              isActive={ this.state.action === 'redeem' }\n                              isDisabled={ !this.state.canRedeem && !this.state.canRedeemCurve }\n                            >\n                              <Flex\n                                my={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <TransactionField\n                                  transaction={{\n                                    action:'redeem'\n                                  }}\n                                  fieldInfo={{\n                                    name:'icon',\n                                    props:{\n                                      mr:3\n                                    }\n                                  }}\n                                />\n                                <Text\n                                  fontSize={3}\n                                  fontWeight={3}\n                                >\n                                  Redeem\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          </Flex>\n                        </Flex>\n                        {\n                          (showRedeemFlow && this.state.unlentBalance) &&\n                            <DashboardCard\n                              cardProps={{\n                                py:2,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={'LocalGasStation'}\n                                />\n                                <Text\n                                  px={2}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Available balance for Cheap Redeem\n                                </Text>\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'center'}\n                                    hoverColor={'copyColor'}\n                                  >\n                                    {this.state.unlentBalance.toFixed(4)} {this.props.selectedToken}\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.functionsUtil.getGlobalConfig(['messages','cheapRedeem'])}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              </Flex>\n                            </DashboardCard>\n                        }\n                        {\n                          showAdvancedRedeemOptions ? (\n                            <DashboardCard\n                              cardProps={{\n                                pt:2,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                                pb:this.state.showAdvancedOptions ? 3 : 2,\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <Link\n                                  ml={1}\n                                  mainColor={'primary'}\n                                  hoverColor={'primary'}\n                                  onClick={this.toggleShowAdvancedOptions}\n                                >\n                                  { this.state.showAdvancedOptions ? 'Hide' : 'Show' } advanced options\n                                </Link>\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={this.state.showAdvancedOptions ? 'ArrowDropUp' : 'ArrowDropDown'}\n                                />\n                              </Flex>\n                              {\n                                this.state.showAdvancedOptions &&\n                                  <Flex\n                                    mt={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      redeemGovTokenEnabled && \n                                        <Flex\n                                          alignItems={'center'}\n                                          justifyContent={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            checked={this.state.redeemGovTokens}\n                                            label={`Redeem governance tokens only`}\n                                            onChange={ e => this.toggleRedeemGovTokens(e.target.checked) }\n                                          />\n                                          <Link\n                                            color={'link'}\n                                            hoverColor={'link'}\n                                            onClick={ e => this.props.openTooltipModal('Redeem governance tokens',`This feature allows you to redeem just the amount of governance tokens accrued${ this.props.govTokensBalance && this.props.govTokensBalance.gt(0) ? ` (~${this.props.govTokensBalance.toFixed(2)}$)` : null } without redeeming the underlying token.`) }\n                                          >\n                                            (read more)\n                                          </Link>\n                                        </Flex>\n                                    }\n                                    {\n                                      redeemSkipGovEnabled && \n                                        <Flex\n                                          alignItems={'center'}\n                                          flexDirection={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            checked={this.state.redeemSkipGov}\n                                            label={`Redeem without governance tokens`}\n                                            onChange={ e => this.toggleRedeemSkipGov(e.target.checked) }\n                                          />\n                                          <Icon\n                                            mr={1}\n                                            size={'1.2em'}\n                                            name={'Warning'}\n                                            color={'#ffe000'}\n                                          />\n                                          <Link\n                                            color={'link'}\n                                            hoverColor={'link'}\n                                            onClick={ e => this.props.openTooltipModal('Redeem without governance tokens',this.functionsUtil.getGlobalConfig(['messages','redeemSkipGov'])) }\n                                          >\n                                            (read more)\n                                          </Link>\n                                        </Flex>\n                                    }\n                                  </Flex>\n                              }\n                            </DashboardCard>\n                          ) :  showAdvancedDepositOptions ? (\n                            <DashboardCard\n                              cardProps={{\n                                pt:2,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                                pb:this.state.showAdvancedOptions ? 3 : 2,\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <Link\n                                  ml={1}\n                                  mainColor={'primary'}\n                                  hoverColor={'primary'}\n                                  onClick={this.toggleShowAdvancedOptions}\n                                >\n                                  { this.state.showAdvancedOptions ? 'Hide' : 'Show' } advanced options\n                                </Link>\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={this.state.showAdvancedOptions ? 'ArrowDropUp' : 'ArrowDropDown'}\n                                />\n                              </Flex>\n                              {\n                                this.state.showAdvancedOptions &&\n                                  <Flex\n                                    mt={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      showDepositCurve && \n                                        <Flex\n                                          alignItems={'center'}\n                                          justifyContent={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            disabled={this.state.directMint}\n                                            label={`Deposit in the Curve Pool`}\n                                            checked={this.state.depositCurveEnabled}\n                                            onChange={ e => this.toggleDepositCurve(e.target.checked) }\n                                          />\n                                          <Link\n                                            mainColor={'primary'}\n                                            hoverColor={'primary'}\n                                            onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                          >\n                                            (read more)\n                                          </Link>\n                                        </Flex>\n                                    }\n                                    {\n                                      showRebalanceOption && \n                                        <Flex\n                                          alignItems={'center'}\n                                          justifyContent={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            label={`Rebalance the pool`}\n                                            checked={this.state.directMint}\n                                            disabled={this.state.depositCurveEnabled}\n                                            onChange={ e => this.toggleSkipMint(e.target.checked) }\n                                          />\n                                          <Tooltip\n                                            placement={'bottom'}\n                                            message={this.functionsUtil.getGlobalConfig(['messages','directMint'])}\n                                          >\n                                            <Icon\n                                              size={'1em'}\n                                              color={'cellTitle'}\n                                              name={\"InfoOutline\"}\n                                            />\n                                          </Tooltip>\n                                        </Flex>\n                                    }\n                                  </Flex>\n                              }\n                            </DashboardCard>\n                          ) : (\n                            <Flex\n                              width={1}\n                              flexDirection={'column'}\n                            >\n                              {\n                                showDepositCurve && (\n                                  <Flex\n                                    width={1}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <DashboardCard\n                                      isRainbow={true}\n                                      cardProps={{\n                                        py:3,\n                                        px:2,\n                                        mt:3,\n                                        display:'flex',\n                                        alignItems:'center',\n                                        flexDirection:'column',\n                                        justifyContent:'center',\n                                      }}\n                                    >\n                                      <Flex\n                                        width={1}\n                                        alignItems={'center'}\n                                        flexDirection={'column'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Image\n                                          height={'1.8em'}\n                                          src={curveConfig.params.image}\n                                        />\n                                        <Text\n                                          mt={2}\n                                          px={2}\n                                          fontSize={1}\n                                          color={'dark-gray'}\n                                          textAlign={'center'}\n                                        >\n                                          Deposit your tokens in the Curve Pool and boost your APY up to {this.state.curveAPY ? this.state.curveAPY.toFixed(2) : '-'}%.\n                                          <Link\n                                            ml={1}\n                                            mainColor={'primary'}\n                                            hoverColor={'primary'}\n                                            onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                          >\n                                            Read More\n                                          </Link>\n                                        </Text>\n                                        <Checkbox\n                                          mt={2}\n                                          required={false}\n                                          label={`Deposit in Curve`}\n                                          checked={this.state.depositCurveEnabled}\n                                          onChange={ e => this.toggleDepositCurve(e.target.checked) }\n                                        />\n                                      </Flex>\n                                    </DashboardCard>\n                                    {\n                                      (!this.state.showBuyFlow && !this.state.depositCurveEnabled && !this.state.canDeposit) &&\n                                        <Link\n                                          textAlign={'center'}\n                                          hoverColor={'primary'}\n                                          onClick={ e => this.setShowBuyFlow(true) }\n                                        >\n                                          I just want to deposit more {this.props.selectedToken}\n                                        </Link>\n                                    }\n                                  </Flex>\n                                )\n                              }\n                              {\n                                showRebalanceOption && (\n                                  <DashboardCard\n                                    cardProps={{\n                                      py:3,\n                                      px:2,\n                                      mt:3,\n                                      display:'flex',\n                                      alignItems:'center',\n                                      flexDirection:'column',\n                                      justifyContent:'center',\n                                    }}\n                                  >\n                                    <Flex\n                                      width={1}\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        color={'cellText'}\n                                        name={'InfoOutline'}\n                                      />\n                                      <Text\n                                        mt={1}\n                                        px={2}\n                                        fontSize={1}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        By checking this flag you can rebalance the pool and help all users gain an additional APR\n                                      </Text>\n                                    </Flex>\n                                    <Checkbox\n                                      mt={2}\n                                      required={false}\n                                      label={`Rebalance the pool`}\n                                      checked={this.state.directMint}\n                                      onChange={ e => this.toggleSkipMint(e.target.checked) }\n                                    />\n                                  </DashboardCard>\n                                )\n                              }\n                              {\n                                redeemGovTokenEnabled && (\n                                  <DashboardCard\n                                    cardProps={{\n                                      py:3,\n                                      px:2,\n                                      mt:3,\n                                      display:'flex',\n                                      alignItems:'center',\n                                      flexDirection:'column',\n                                      justifyContent:'center',\n                                    }}\n                                  >\n                                    <Flex\n                                      width={1}\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        color={'cellText'}\n                                        name={'InfoOutline'}\n                                      />\n                                      <Text\n                                        mt={1}\n                                        px={2}\n                                        fontSize={1}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        By redeeming your {this.props.selectedToken} you will automatically get also the proportional amount of governance tokens accrued{ this.props.govTokensBalance && this.props.govTokensBalance.gt(0) ? ` (~ $${this.props.govTokensBalance.toFixed(2)})` : null }.\n                                      </Text>\n                                    </Flex>\n                                    <Checkbox\n                                      mt={2}\n                                      required={false}\n                                      checked={this.state.redeemGovTokens}\n                                      label={`Redeem governance tokens only`}\n                                      onChange={ e => this.toggleRedeemGovTokens(e.target.checked) }\n                                    />\n                                  </DashboardCard>\n                                )\n                              }\n                            </Flex>\n                          )\n                        }\n                        {\n                          redeemSkipGov ? (\n                            <DashboardCard\n                              cardProps={{\n                                mt:2,\n                                mb:2,\n                                py:2,\n                                px:1\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                              >\n                                <Text\n                                  mt={1}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Select the gov tokens you want to give away:\n                                </Text>\n                                <Flex\n                                  mt={2}\n                                  width={1}\n                                  boxShadow={0}\n                                  style={{\n                                    flexWrap:'wrap'\n                                  }}\n                                  alignItems={'center'}\n                                  justifyContent={'center'}\n                                  >\n                                    {\n                                      Object.keys(this.props.govTokensUserBalances).map( token => {\n                                        const balance = this.props.govTokensUserBalances[token];\n                                        const isActive = this.state.redeemSkipGovTokens.includes(token);\n                                        const tokenConfig = this.functionsUtil.getGlobalConfig(['govTokens',token]);\n                                        return (\n                                          <Flex\n                                            p={2}\n                                            mb={1}\n                                            mx={1}\n                                            width={'auto'}\n                                            style={{\n                                              cursor:'pointer'\n                                            }}\n                                            borderRadius={2}\n                                            flexDirection={'row'}\n                                            key={`skipGovToken_${token}`}\n                                            justifyContent={'flex-start'}\n                                            backgroundColor={isActive ? '#2a4b78' : 'cardBgHover'}\n                                            onClick={ e => this.setRedeemSkipGovTokens(token,!this.state.redeemSkipGovTokens.includes(token)) }\n                                          >\n                                            <Checkbox\n                                              m={0}\n                                              required={false}\n                                              checked={isActive}\n                                              onChange={ e => this.setRedeemSkipGovTokens(token,e.target.checked) }\n                                            />\n                                            <AssetField\n                                              token={token}\n                                              tokenConfig={tokenConfig}\n                                              fieldInfo={{\n                                                name:'icon',\n                                                props:{\n                                                  mr:1,\n                                                  width:['1.4em','1.6em'],\n                                                  height:['1.4em','1.6em']\n                                                }\n                                              }}\n                                            />\n                                            <SmartNumber\n                                              ml={1}\n                                              fontSize={[0,2]}\n                                              fontWeight={500}\n                                              maxPrecision={4}\n                                              color={'cellText'}\n                                              number={balance.toString()}\n                                            />\n                                          </Flex>\n                                        );\n                                    })\n                                  }\n                                </Flex>\n                              </Flex>\n                            </DashboardCard>\n                          ) : redeemSkipGovNoTokens && (\n                            <DashboardCard\n                              cardProps={{\n                                p:2,\n                                my:2\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'MoneyOff'}\n                                  color={'cellText'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  You don't have any gov tokens to give away.\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          redeemSkipGov && this.functionsUtil.BNify(this.state.skippedGovTokensBalance).gt(0) ? (\n                            <DashboardCard\n                              cardProps={{\n                                p:2,\n                                my:2\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'Warning'}\n                                  color={'#ffe000'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={1}\n                                  color={'red'}\n                                  textAlign={'center'}\n                                >\n                                  You are giving away {this.functionsUtil.formatMoney(this.state.skippedGovTokensBalance)}$ worth of governance tokens!\n                                </Text>\n                                {\n                                  this.state.skipGovTokensGasSave && this.state.skipGovTokensGasSave.gte(0.0001) && (\n                                    <Text\n                                      mt={1}\n                                      fontSize={1}\n                                      color={'#00b84a'}\n                                      textAlign={'center'}\n                                    >\n                                      This will save you {this.state.skipGovTokensGasSave.toFixed(4)} ETH of gas (~{this.state.skipGovTokensGasSaveUSD.toFixed(2)}$)\n                                    </Text>\n                                  )\n                                }\n                                <Text\n                                  mt={1}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  To proceed with the redeem please give your authorization by checking the following flag:\n                                </Text>\n                                <Checkbox\n                                  my={1}\n                                  required={false}\n                                  checked={this.state.agreeSkipGovTokens}\n                                  label={`I agree to give away my governance tokens`}\n                                  onChange={ e => this.toggleAgreeSkipGovTokens(e.target.checked) }\n                                />\n                              </Flex>\n                            </DashboardCard>\n                          ) : redeemSkipGov && this.state.redeemSkipGovTokens.length>0 && (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                my:2\n                              }}\n                            >\n                              <FlexLoader\n                                flexProps={{\n                                  flexDirection:'row'\n                                }}\n                                loaderProps={{\n                                  size:'25px',\n                                }}\n                                textProps={{\n                                  ml:2\n                                }}\n                                text={'Loading estimated gas usage...'}\n                              />\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          showReferral && (\n                            <DashboardCard\n                              cardProps={{\n                                py:3,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'Share'}\n                                  color={'cellText'}\n                                />\n                                <Text\n                                  mt={1}\n                                  px={2}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  You are depositing with the following referral address:\n                                </Text>\n                                <Text\n                                  mt={1}\n                                  px={2}\n                                  fontSize={1}\n                                  fontWeight={500}\n                                  textAlign={'center'}\n                                  color={this.props.theme.colors.transactions.status.completed}\n                                >\n                                  {_referral}\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          (metaTransactionsAvailable && !showBuyFlow && !this.state.contractPaused) ? (\n                            <DashboardCard\n                              cardProps={{\n                                py:3,\n                                px:2,\n                                my:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              {\n                                this.state.metaTransactionsEnabled && this.state.txError[this.state.action] && this.state.actionProxyContract[this.state.action].approved ? (\n                                  <Flex\n                                    width={1}\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <Icon\n                                      size={'1.8em'}\n                                      name={'Warning'}\n                                      color={'cellText'}\n                                    />\n                                    <Text\n                                      mt={1}\n                                      fontSize={1}\n                                      color={'cellText'}\n                                      textAlign={'center'}\n                                    >\n                                      Seems like you are having some trouble with Meta-Transactions... Disable them by unchecking the box below and try again!\n                                    </Text>\n                                  </Flex>\n                                ) : this.functionsUtil.getWalletProvider() === 'WalletConnect' && this.state.metaTransactionsEnabled ? (\n                                  <Flex\n                                    width={1}\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <Icon\n                                      size={'1.8em'}\n                                      name={'Warning'}\n                                      color={'cellText'}\n                                    />\n                                    <Text\n                                      mt={1}\n                                      fontSize={1}\n                                      color={'cellText'}\n                                      textAlign={'center'}\n                                    >\n                                      Please disable Meta-Transactions if you are using Argent Wallet to avoid failed transactions!\n                                    </Text>\n                                  </Flex>\n                                ) : (\n                                  <Text\n                                    mt={1}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    Meta-Transactions are {this.state.metaTransactionsEnabled ? 'enabled' : 'disabled'} for {this.state.action}s!<br />\n                                    {\n                                      this.state.metaTransactionsEnabled && !this.state.actionProxyContract[this.state.action].approved && `Please either enable the Smart-Contract to enjoy gas-less ${this.state.action} or just disable meta-tx.`\n                                    }\n                                  </Text>\n                                )\n                              }\n                              <Checkbox\n                                mt={2}\n                                required={false}\n                                checked={this.state.metaTransactionsEnabled}\n                                onChange={ e => this.toggleMetaTransactionsEnabled(e.target.checked) }\n                                label={`${this.functionsUtil.capitalize(this.state.action)} with Meta-Transaction`}\n                              />\n                            </DashboardCard>\n                          ) : (erc20ForwarderEnabled && !showBuyFlow && !this.state.contractPaused) && (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                my:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              <Text\n                                mb={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                How do you prefer to pay gas fees for this {this.state.action}?\n                              </Text>\n                              <Flex\n                                width={[1,0.7]}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'space-between'}\n                              >\n                                <CardIconButton\n                                  {...this.props}\n                                  cardProps={{\n                                    py:2,\n                                    px:[2,3],\n                                    width:0.48\n                                  }}\n                                  textProps={{\n                                    ml:[1,2],\n                                  }}\n                                  text={this.props.selectedToken}\n                                  isActive={this.state.erc20ForwarderEnabled}\n                                  imageProps={{\n                                    height:this.props.isMobile ? '1.4em' : '1.8em',\n                                    width:this.props.isMobile ? '1.4em' : '1.8em'\n                                  }}\n                                  image={`/images/tokens/${this.props.selectedToken}.svg`}\n                                  handleClick={e => this.toggleErc20ForwarderEnabled(true)}\n                                />\n                                <CardIconButton\n                                  {...this.props}\n                                  cardProps={{\n                                    py:2,\n                                    px:[2,3],\n                                    width:0.48\n                                  }}\n                                  textProps={{\n                                    ml:[1,2],\n                                  }}\n                                  text={'ETH'}\n                                  isActive={!this.state.erc20ForwarderEnabled}\n                                  imageProps={{\n                                    height:this.props.isMobile ? '1.4em' : '1.8em',\n                                    width:this.props.isMobile ? '1.4em' : '1.8em'\n                                  }}\n                                  image={`/images/tokens/ETH.svg`}\n                                  handleClick={e => this.toggleErc20ForwarderEnabled(false)}\n                                />\n                              </Flex>\n                              {\n                                this.state.erc20ForwarderEnabled && this.state.txError[this.state.action] && (\n                                  <Text\n                                    mt={2}\n                                    fontSize={1}\n                                    color={'red'}\n                                    textAlign={'center'}\n                                  >\n                                    The meta-transaction cannot be executed due to insufficient funds, fund your wallet or select ETH and try again.\n                                  </Text>\n                                )\n                              }\n                              <Text\n                                mt={2}\n                                fontSize={'11px'}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                Powered by <ExtLink fontSize={'11px'} href={'https://biconomy.io'}>Biconomy</ExtLink>\n                              </Text>\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          (this.state.minAmountForMintReached && this.state.action === 'deposit') && (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                mt:3\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={'InfoOutline'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  By depositing more than {this.functionsUtil.formatMoney(this.state.minAmountForMint)}$ { this.state.showPoolPerc ? `(${this.state.minAmountForMint.div(this.state.totalAUM).times(100).toFixed(0)}% of the pool)` : null } the pool will be automatically rebalanced, gas cost may be higher.\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          showBatchDeposit ? (\n                            <Flex\n                              p={2}\n                              mt={3}\n                              width={1}\n                              borderRadius={2}\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              justifyContent={'center'}\n                              backgroundColor={'DashboardCard'}\n                              border={`1px solid ${this.props.theme.colors.primary}`}\n                            >\n                              <Link\n                                textAlign={'center'}\n                                hoverColor={'primary'}\n                                href={`/#/dashboard/tools/${batchDepositInfo.route}/${this.props.tokenConfig.idle.token}`}\n                              >\n                                Gas fees too high? Save gas with our Batch Deposit!\n                              </Link>\n                              <Icon\n                                ml={1}\n                                size={'1em'}\n                                color={'primary'}\n                                name={'LocalGasStation'}\n                              />\n                            </Flex>\n                          ) : showETHWrapper && (\n                            <Flex\n                              width={1}\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <DashboardCard\n                                cardProps={{\n                                  py:3,\n                                  px:2,\n                                  mt:3,\n                                  display:'flex',\n                                  alignItems:'center',\n                                  flexDirection:'column',\n                                  justifyContent:'center',\n                                  pb:this.state.showAdvancedOptions ? 3 : 2,\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  justifyContent={'row'}\n                                >\n                                  <Checkbox\n                                    required={false}\n                                    checked={this.state.showETHWrapperEnabled}\n                                    label={`Convert your ETH to WETH`}\n                                    onChange={ e => this.toggleShowETHWrapper(e.target.checked) }\n                                  />\n                                </Flex>\n                              </DashboardCard>\n                              {\n                                this.state.showETHWrapperEnabled && \n                                  <ETHWrapperComponent\n                                    {...this.props}\n                                    action={'wrap'}\n                                    fullWidth={true}\n                                    toolProps={ethWrapperInfo.props}\n                                  />\n                              }\n                            </Flex>\n                          )\n                        }\n                        {\n                          showRedeemCurve && this.state.canRedeem && (\n                            <Flex\n                              width={1}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <DashboardCard\n                                isRainbow={true}\n                                cardProps={{\n                                  py:3,\n                                  px:2,\n                                  mt:3,\n                                  display:'flex',\n                                  alignItems:'center',\n                                  flexDirection:'column',\n                                  justifyContent:'center',\n                                }}\n                              >\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Image\n                                    height={'1.8em'}\n                                    src={curveConfig.params.image}\n                                  />\n                                  <Text\n                                    mt={2}\n                                    px={2}\n                                    fontSize={1}\n                                    color={'dark-gray'}\n                                    textAlign={'center'}\n                                  >\n                                    Redeem your tokens from the Curve Pool.\n                                    <Link\n                                      ml={1}\n                                      mainColor={'primary'}\n                                      hoverColor={'primary'}\n                                      onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                    >\n                                      Read More\n                                    </Link>\n                                  </Text>\n                                  {\n                                    this.state.canRedeem &&\n                                      <Checkbox\n                                        mt={2}\n                                        required={false}\n                                        label={`Redeem from Curve`}\n                                        checked={this.state.redeemCurveEnabled}\n                                        onChange={ e => this.toggleRedeemCurve(e.target.checked) }\n                                      />\n                                  }\n                                </Flex>\n                              </DashboardCard>\n                              {\n                                this.canRedeem &&\n                                  <Link\n                                    textAlign={'center'}\n                                    hoverColor={'primary'}\n                                    onClick={ e => this.setShowRedeemFlow(true) }\n                                  >\n                                    I just want to redeem my {this.props.selectedToken}\n                                  </Link>\n                              }\n                            </Flex>\n                          )\n                        }\n                        {\n                          (this.state.contractPaused && this.state.action === 'deposit') ? (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                mt:3\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'Warning'}\n                                  color={'cellText'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Deposits for {this.props.selectedToken} are temporarily unavailable due to Smart-Contract maintenance. Redeems are always available.\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          ) : (!this.state.tokenApproved && this.state.action === 'deposit' && !this.state.showETHWrapperEnabled) ? (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                mt:3\n                              }}\n                            >\n                              {\n                                this.state.processing['approve'] && this.state.processing['approve'].loading ? (\n                                  <Flex\n                                    flexDirection={'column'}\n                                  >\n                                    <TxProgressBar\n                                      {...this.props}\n                                      waitText={`Approve estimated in`}\n                                      endMessage={`Finalizing approve request...`}\n                                      hash={this.state.processing['approve'].txHash}\n                                      cancelTransaction={this.cancelTransaction.bind(this)}\n                                    />\n                                  </Flex>\n                                ) : (\n                                  <Flex\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                  >\n                                    <Icon\n                                      size={'1.8em'}\n                                      name={'LockOpen'}\n                                      color={'cellText'}\n                                    />\n                                    <Text\n                                      mt={3}\n                                      fontSize={2}\n                                      color={'cellText'}\n                                      textAlign={'center'}\n                                    >\n                                      {\n                                        this.state.depositCurveEnabled ? \n                                          `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.`\n                                        : useMetaTx ?\n                                          `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle using Meta-Transaction you need to approve our Smart-Contract first.`\n                                        :\n                                          `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle you need to approve our Smart-Contract first.`\n                                      }\n                                    </Text>\n                                    <RoundButton\n                                      buttonProps={{\n                                        mt:3,\n                                        width:[1,1/2]\n                                      }}\n                                      handleClick={this.approveToken.bind(this)}\n                                    >\n                                      Approve\n                                    </RoundButton>\n                                  </Flex>\n                                )\n                              }\n                            </DashboardCard>\n                          ) : (!showBuyFlow && canPerformAction) && (\n                            !this.state.processing[this.state.action].loading ? (\n                              <Flex\n                                mt={2}\n                                flexDirection={'column'}\n                              >\n                                {\n                                  showActionFlow && (\n                                    <Flex\n                                      mb={3}\n                                      width={1}\n                                      flexDirection={'column'}\n                                    >\n                                      {\n                                        (totalBalance || this.props.tokenFeesPercentage) && (\n                                          <Box\n                                            mb={1}\n                                            width={1}\n                                          >\n                                            {\n                                              this.state.showMaxSlippage && showCurveSlippage && (\n                                                <Box\n                                                  mb={2}\n                                                  width={1}\n                                                >\n                                                  <Flex\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                  >\n                                                    <Text>\n                                                      Choose max slippage:\n                                                    </Text>\n                                                    <Tooltip\n                                                      placement={'top'}\n                                                      message={`Max additional slippage on top of the one shown below`}\n                                                    >\n                                                      <Icon\n                                                        ml={1}\n                                                        size={'1em'}\n                                                        color={'cellTitle'}\n                                                        name={\"InfoOutline\"}\n                                                      />\n                                                    </Tooltip>\n                                                  </Flex>\n                                                  <Flex\n                                                    mt={2}\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                    justifyContent={'space-between'}\n                                                  >\n                                                    {\n                                                      [0.2,0.5,1,5].map( slippage => (\n                                                        <FastBalanceSelector\n                                                          cardProps={{\n                                                            p:1\n                                                          }}\n                                                          textProps={{\n                                                            fontSize:1\n                                                          }}\n                                                          percentage={slippage}\n                                                          key={`selector_${slippage}`}\n                                                          onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                                          isActive={this.state.maxSlippage === parseFloat(slippage)}\n                                                        />\n                                                      ))\n                                                    }\n                                                  </Flex>\n                                                </Box>\n                                              )\n                                            }\n                                            <Flex\n                                              width={1}\n                                              alignItems={'center'}\n                                              flexDirection={'row'}\n                                              justifyContent={'space-between'}\n                                            >\n                                              {\n                                                showCurveSlippage ? (\n                                                  <Flex\n                                                    width={1}\n                                                    maxWidth={'50%'}\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                  >\n                                                    <Text\n                                                      fontSize={1}\n                                                      fontWeight={3}\n                                                      textAlign={'right'}\n                                                      style={{\n                                                        whiteSpace:'nowrap'\n                                                      }}\n                                                      color={ this.state.depositCurveSlippage.gt(0) ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                                    >\n                                                      {\n                                                        parseFloat(this.state.depositCurveSlippage.times(100).toFixed(2)) === 0 ?\n                                                          'No Slippage'\n                                                        : `${ this.state.depositCurveSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositCurveSlippage.times(100).abs().toFixed(2)}%`\n                                                      }\n                                                    </Text>\n                                                    <Tooltip\n                                                      placement={'top'}\n                                                      message={this.functionsUtil.getGlobalConfig(['messages','curveBonusSlippage'])}\n                                                    >\n                                                      <Icon\n                                                        ml={1}\n                                                        size={'1em'}\n                                                        color={'cellTitle'}\n                                                        name={\"InfoOutline\"}\n                                                      />\n                                                    </Tooltip>\n                                                    <Link\n                                                      ml={1}\n                                                      color={'copyColor'}\n                                                      hoverColor={'primary'}\n                                                      onClick={this.showMaxSlippage}\n                                                    >\n                                                      change\n                                                    </Link>\n                                                  </Flex>\n                                                ) : this.props.tokenFeesPercentage && (\n                                                  <Flex\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                  >\n                                                    <Text\n                                                      fontSize={1}\n                                                      fontWeight={3}\n                                                      color={'dark-gray'}\n                                                      textAlign={'right'}\n                                                      hoverColor={'copyColor'}\n                                                    >\n                                                      Performance fee: {this.props.tokenFeesPercentage.times(100).toFixed(2)}%\n                                                    </Text>\n                                                    <Tooltip\n                                                      placement={'top'}\n                                                      message={this.functionsUtil.getGlobalConfig(['messages','performanceFee'])}\n                                                    >\n                                                      <Icon\n                                                        ml={1}\n                                                        size={'1em'}\n                                                        color={'cellTitle'}\n                                                        name={\"InfoOutline\"}\n                                                      />\n                                                    </Tooltip>\n                                                  </Flex>\n                                                )\n                                              }\n                                              {\n                                                totalBalance && (\n                                                  <Link\n                                                    fontSize={1}\n                                                    fontWeight={3}\n                                                    color={'dark-gray'}\n                                                    textAlign={'right'}\n                                                    hoverColor={'copyColor'}\n                                                    onClick={ (e) => this.setFastBalanceSelector(100) }\n                                                  >\n                                                    {totalBalance.toFixed(6)} {this.props.selectedToken}\n                                                  </Link>\n                                                )\n                                              }\n                                            </Flex>\n                                          </Box>\n                                        )\n                                      }\n                                      <Input\n                                        min={0}\n                                        type={\"number\"}\n                                        required={true}\n                                        height={'3.4em'}\n                                        borderRadius={2}\n                                        fontWeight={500}\n                                        borderColor={'cardBorder'}\n                                        backgroundColor={'cardBg'}\n                                        boxShadow={'none !important'}\n                                        placeholder={`Insert amount`}\n                                        onChange={this.changeInputValue.bind(this)}\n                                        border={`1px solid ${this.props.theme.colors.divider}`}\n                                        value={this.state.inputValue[this.state.action] !== null ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]).toFixed() : ''}\n                                      />\n                                      <Flex\n                                        mt={2}\n                                        alignItems={'center'}\n                                        flexDirection={'row'}\n                                        justifyContent={'space-between'}\n                                      >\n                                        {\n                                          [25,50,75,100].map( percentage => (\n                                            <FastBalanceSelector\n                                              percentage={percentage}\n                                              key={`selector_${percentage}`}\n                                              onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                              isActive={this.state.fastBalanceSelector[this.state.action] === parseInt(percentage)}\n                                            />\n                                          ))\n                                        }\n                                      </Flex>\n                                    </Flex>\n                                  )\n                                }\n                                {\n                                  canPerformAction && (\n                                    <Flex\n                                      justifyContent={'center'}\n                                      mt={ redeemGovTokens ? 2 : 0 }\n                                    >\n                                      <RoundButton\n                                        buttonProps={{\n                                          width:'auto',\n                                          minWidth:[1,1/2],\n                                          style:{\n                                            textTransform:'capitalize'\n                                          },\n                                          disabled:this.state.buttonDisabled\n                                        }}\n                                        handleClick={this.state.buttonDisabled ? null : this.executeAction.bind(this) }\n                                      >\n                                        {this.state.action}{ redeemGovTokens ? ' Gov Tokens' : '' /*(depositCurve ? ' in Curve' : '')*/ }\n                                      </RoundButton>\n                                    </Flex>\n                                  )\n                                }\n                              </Flex>\n                            ) : this.state.loadingErc20ForwarderTx ? (\n                              <Flex\n                                mt={3}\n                                flexDirection={'column'}\n                              >\n                                <FlexLoader\n                                  flexProps={{\n                                    flexDirection:'row'\n                                  }}\n                                  loaderProps={{\n                                    size:'25px',\n                                  }}\n                                  textProps={{\n                                    ml:2\n                                  }}\n                                  text={ this.state.erc20ForwarderTx ? ( this.state.signedParameters ? 'Please Sign the Transaction...' : 'Please Sign the Permit...' ) : 'Calculating transaction fees...'}\n                                />\n                              </Flex>\n                            ) : this.state.erc20ForwarderTx ? (\n                              <DashboardCard\n                                cardProps={{\n                                  p:3,\n                                  mt:3,\n                                  display:'flex',\n                                  alignItems:'center',\n                                  flexDirection:'column',\n                                  justifyContent:'center',\n                                }}\n                              >\n                                <Text\n                                  mb={2}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  The required gas fee to perform the {this.state.action} is <strong>{this.state.erc20ForwarderTx.cost} {this.props.selectedToken}</strong>\n                                </Text>\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <DashboardCard\n                                    cardProps={{\n                                      mx:2,\n                                      py:2,\n                                      px:[2,3],\n                                      width:0.40,\n                                      onMouseDown:() => {\n                                        this.executeAction()\n                                      }\n                                    }}\n                                    isInteractive={true}\n                                  >\n                                    <Flex\n                                      my={1}\n                                      alignItems={'center'}\n                                      flexDirection={'row'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Flex\n                                        mr={2}\n                                        alignItems={'center'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Icon\n                                          align={'center'}\n                                          color={'#00b84a'}\n                                          name={'CheckCircle'}\n                                          size={this.props.isMobile ? '1em' : '1.8em'}\n                                        />\n                                      </Flex>\n                                      <Text\n                                        fontWeight={3}\n                                        fontSize={[2,3]}\n                                      >\n                                        Confirm\n                                      </Text>\n                                    </Flex>\n                                  </DashboardCard>\n                                  <DashboardCard\n                                    cardProps={{\n                                      mx:2,\n                                      py:2,\n                                      px:[2,3],\n                                      width:0.40,\n                                      onMouseDown:() => {\n                                        this.cancelTransaction();\n                                      }\n                                    }}\n                                    isInteractive={true}\n                                  >\n                                    <Flex\n                                      my={1}\n                                      alignItems={'center'}\n                                      flexDirection={'row'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Flex\n                                        mr={2}\n                                        alignItems={'center'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Icon\n                                          name={'Cancel'}\n                                          align={'center'}\n                                          color={'#e13636'}\n                                          size={this.props.isMobile ? '1em' : '1.8em'}\n                                        />\n                                      </Flex>\n                                      <Text\n                                        fontWeight={3}\n                                        fontSize={[2,3]}\n                                      >\n                                        Decline\n                                      </Text>\n                                    </Flex>\n                                  </DashboardCard>\n                                </Flex>\n                              </DashboardCard>\n                            ) : (\n                              <Flex\n                                mt={3}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <TxProgressBar\n                                  {...this.props}\n                                  cancelTransaction={this.cancelTransaction.bind(this)}\n                                  hash={this.state.processing[this.state.action].txHash}\n                                  endMessage={`Finalizing ${this.state.action} request...`}\n                                  waitText={`${this.functionsUtil.capitalize(this.state.action)} estimated in`}\n                                />\n                              </Flex>\n                            )\n                          )\n                        }\n                      </Box>\n                    )\n                  ) : (\n                    <Flex\n                      mt={4}\n                      flexDirection={'column'}\n                    >\n                      <FlexLoader\n                        flexProps={{\n                          flexDirection:'row'\n                        }}\n                        loaderProps={{\n                          size:'30px'\n                        }}\n                        textProps={{\n                          ml:2\n                        }}\n                        text={'Loading asset info...'}\n                      />\n                    </Flex>\n                  )\n                }\n              </Migrate>\n            )\n          }\n        </Flex>\n        {\n          /*\n          showDepositCurve && this.state.depositCurveEnabled ? (\n            <CurveDeposit\n              {...this.props}\n            />\n          ) :\n          */\n          showRedeemCurve && this.state.redeemCurveEnabled && (\n            <Box\n              mt={3}\n              width={1}\n            >\n              <CurveRedeem\n                {...this.props}\n              />\n            </Box>\n          )\n        }\n        {\n          showBuyFlow &&\n            <Flex\n              mt={3}\n              width={[1,0.5]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <BuyModal\n                {...this.props}\n                showInline={true}\n                availableMethods={[]}\n                buyToken={this.props.selectedToken}\n              />\n            </Flex>\n        }\n\n        <ShareModal\n          confettiEnabled={true}\n          icon={`images/medal.svg`}\n          title={`Congratulations!`}\n          account={this.props.account}\n          closeModal={this.resetModal}\n          tokenName={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'share'}\n          text={`You have successfully deposited in Idle!<br />Enjoy <strong>${this.state.tokenAPY}% APY</strong> on your <strong>${this.props.selectedToken}</strong>!`}\n          tweet={`I'm earning ${this.state.tokenAPY}% APY on my ${this.props.selectedToken} with @idlefinance! Go to ${this.functionsUtil.getGlobalConfig(['baseURL'])} and start earning now from your idle tokens!`}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default DepositRedeem;\n","import theme from '../theme';\nimport { Bar } from '@nivo/bar';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Text, Input, Icon, Tooltip } from \"rimble-ui\";\n\nclass EstimatedEarnings extends Component {\n\n  state = {\n    chartData:null,\n    chartProps:null,\n    inputValue:1000,\n    maxInputValue:999999999999999\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    this.loadChart();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged){\n      this.loadChart();\n    }\n  }\n\n  async loadChart(){\n\n    const tokenApy = await this.functionsUtil.getTokenApy(this.props.tokenConfig);\n\n    if (!tokenApy){\n      return false;\n    }\n\n    const amount = this.functionsUtil.BNify(this.state.inputValue);\n    const earningsYear = amount.times(this.props.tokenApy.div(100));\n\n    const amountMonth = parseFloat(earningsYear.div(12));\n    const amount3Months = parseFloat(earningsYear.div(4));\n    const amount6Months = parseFloat(earningsYear.div(2));\n    const amountYear = parseFloat(earningsYear.div(1));\n\n    const chartData = [\n      {\n        perc:1/12,\n        label:'MONTH',\n        value:amountMonth,\n        month:amountMonth,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        monthColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:3/12,\n        label:'3 MONTHS',\n        value:amount3Months,\n        month3:amount3Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month3Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:6/12,\n        label:'6 MONTHS',\n        value:amount6Months,\n        month6:amount6Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month6Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:1,\n        label:'YEAR',\n        year:amountYear,\n        value:amountYear,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        yearColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      }\n    ];\n\n    let labelTextColorModifiers = this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'chart','labelTextColorModifiers']);\n\n    const maxGridLines = 4;\n    const gridYStep = amountYear/maxGridLines;\n    const gridYValues = [0];\n    for (let i=1;i<=maxGridLines;i++){\n      const gridYValue = i*gridYStep;\n      gridYValues.push(gridYValue);\n    }\n\n    const chartProps = {\n      padding: 0.2,\n      animate: false,\n      indexBy: 'label',\n      // enableLabel: false,\n      labelSkipWidth: 16,\n      labelSkipHeight: 16,\n      keys: ['month','month3','month6','year'],\n      colors: ({ id, data }) => data[`${id}Color`],\n      label: d => this.functionsUtil.abbreviateNumber(d.value,2,4)+' '+this.props.selectedToken,\n      labelTextColor: labelTextColorModifiers ? { from: 'color', modifiers: [ labelTextColorModifiers ] } : null,\n      isInteractive:false,\n      minValue:0,\n      gridYValues,\n      // maxValue:amountYear,\n      axisLeft:{\n        format: v => this.functionsUtil.abbreviateNumber(v,1,3),\n        tickValues:gridYValues,\n        orient: 'left',\n        tickSize: 0,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendPosition: 'middle'\n      },\n      axisBottom:{\n        legend: '',\n        tickSize:0,\n        tickPadding: 15,\n        orient: 'bottom',\n      },\n      theme:{\n        labels:{\n          text:{\n            fontSize:15,\n            fontWeight:600,\n            fill:theme.colors.counter,\n            fontFamily: theme.fonts.sansSerif\n          }\n        },\n        axis: {\n          ticks: {\n            text: {\n              fontSize:14,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '9 5'\n          }\n        },\n      },\n      margin: this.props.isMobile ? { top: 0, right: 0, bottom: 30, left: 0 } : { top: 10, right: 0, bottom: 50, left: 65 }\n    }\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  changeInputValue(e){\n    let inputValue = e.target.value.length && !isNaN(e.target.value) ? Math.min(this.state.maxInputValue,parseFloat(e.target.value)) : 0;\n    inputValue = this.functionsUtil.BNify(inputValue);\n    this.setState({\n      inputValue\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const showAPYDisclaimer = idleTokenEnabled && this.functionsUtil.getGlobalConfig(['govTokens','IDLE','showAPR']);\n\n    return (\n      <DashboardCard\n        cardProps={{\n          p:[3,4]\n        }}\n      >\n        <Flex\n          width={1}\n          flexDirection={['column','row']}\n        >\n          <Flex\n            width={[1,0.3]}\n            flexDirection={'column'}\n            justifyContent={'flex-start'}\n          >\n            <Flex\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <AssetField\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n                fieldInfo={{\n                  name:'icon',\n                  props:{\n                    mb:2,\n                    height:'2.5em'\n                  }\n                }}\n              />\n              <Text\n                fontSize={2}\n                color={'cellText'}\n                textAlign={'center'}\n              >\n                Set the amount and see your estimated earnings on time based on the current APY: { this.props.tokenApy ? `${this.props.tokenApy.toFixed(2)}%` : null}\n                {\n                  showAPYDisclaimer && \n                    <Flex\n                      style={{\n                        display:'inline-flex',\n                        verticalAlign:'middle'\n                      }}\n                    >\n                      <Tooltip\n                        placement={'top'}\n                        message={this.functionsUtil.getGlobalConfig(['messages','apyLong'])}\n                      >\n                        <Icon\n                          ml={1}\n                          name={\"Info\"}\n                          size={'1em'}\n                          color={'cellTitle'}\n                        />\n                      </Tooltip>\n                    </Flex>\n                }\n              </Text>\n            </Flex>\n            <Flex\n              mt={3}\n              flexDirection={'column'}\n            >\n              <Input\n                min={0}\n                type={\"number\"}\n                required={true}\n                borderRadius={2}\n                fontWeight={500}\n                textAlign={'center'}\n                height={['3em','3.4em']}\n                borderColor={'cardBorder'}\n                boxShadow={'none !important'}\n                max={this.state.maxInputValue}\n                backgroundColor={'cardBgHover'}\n                onChange={this.changeInputValue.bind(this)}\n                border={`1px solid ${theme.colors.divider}`}\n                placeholder={`Insert ${this.props.selectedToken.toUpperCase()} amount`}\n                value={this.state.inputValue && !isNaN(this.state.inputValue) ? this.state.inputValue : ''}\n              />\n            </Flex>\n            <Flex\n              mt={3}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                buttonProps={{\n                  width:[1,1/2],\n                }}\n                handleClick={this.loadChart.bind(this)}\n              >\n                CALCULATE\n              </RoundButton>\n            </Flex>\n          </Flex>\n          <Flex\n            mt={[3,0]}\n            width={[1,0.7]}\n            id={'estimated-earnings-chart'}\n          >\n            {\n              this.props.isMobile ? (\n                <Flex\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  {\n                    this.state.chartData !== null && this.state.chartData.map((v,index) => (\n                      <Flex\n                        py={2}\n                        my={2}\n                        width={1}\n                        flexDirection={'row'}\n                        key={`earnings_${index}`}\n                      >\n                        <Flex\n                          width={0.35}\n                          alignItems={'center'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            color={'legend'}\n                          >\n                            {v.label}\n                          </Text>\n                        </Flex>\n                        <Flex\n                          width={0.65}\n                          position={'relative'}\n                          alignItems={'center'}\n                          minHeight={['20px','35px']}\n                          justifyContent={'center'}\n                        >\n                          <Flex\n                            zIndex={1}\n                            position={'relative'}\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Text\n                              fontSize={1}\n                              fontWeight={3}\n                              color={'counter'}\n                            >\n                              {this.functionsUtil.abbreviateNumber(v.value,2,4)} {this.props.selectedToken}\n                            </Text>\n                          </Flex>\n                          <Flex\n                            right={0}\n                            width={v.perc}\n                            position={'absolute'}\n                            height={['20px','35px']}\n                            borderRadius={['20px 0 0 20px','35px 0 0 35px']}\n                            style={{background:`linear-gradient(-90deg, rgba(${v.color},0) 0%, rgba(${v.color},1) 100%)`}}\n                          ></Flex>\n                        </Flex>\n                      </Flex>\n                    ))\n                  }\n                </Flex>\n              ) : (\n                <GenericChart\n                  type={Bar}\n                  height={250}\n                  showLoader={true}\n                  {...this.state.chartProps}\n                  data={this.state.chartData}\n                  parentId={'estimated-earnings-chart'}\n                />\n              )\n            }\n          </Flex>\n        </Flex>\n      </DashboardCard>\n    );\n  }\n}\n\nexport default EstimatedEarnings;","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport { Box, Flex, Icon, Text } from \"rimble-ui\";\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport AssetsList from '../AssetsList/AssetsList';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport FundsOverview from '../FundsOverview/FundsOverview';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport DepositRedeem from '../DepositRedeem/DepositRedeem';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport ActiveCoverages from '../ActiveCoverages/ActiveCoverages';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport EstimatedEarnings from '../EstimatedEarnings/EstimatedEarnings';\n\nclass AssetPage extends Component {\n\n  state = {\n    tokenApy:{},\n    tokenFees:{},\n    tokenBalance:{},\n    tokenApproved:{},\n    activeModal:null,\n    idleTokenPrice:{},\n    govTokensBalance:{},\n    idleTokenBalance:{},\n    redeemableBalance:{},\n    govTokensDisabled:{},\n    availableGovTokens:{},\n    tokenFeesPercentage:{},\n    componentMounted:false,\n    govTokensUserBalances:{}\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadTokensInfo(){\n    if (this.props.account){\n      const newState = {...this.state};\n      // await this.functionsUtil.asyncForEach(Object.keys(this.props.availableTokens),async (token) => {\n      const token = this.props.selectedToken;\n      const tokenConfig = this.props.availableTokens[token];\n      const govTokenAvailableTokens = {};\n      govTokenAvailableTokens[token] = tokenConfig;\n\n      const [\n        tokenFeesPercentage,\n        idleTokenPrice,\n        tokenApy,\n        tokenBalance,\n        tokenFees,\n        idleTokenBalance,\n        tokenApproved,\n        govTokensUserBalances,\n        govTokensBalance\n      ] = await Promise.all([\n        this.functionsUtil.getTokenFees(tokenConfig),\n        this.functionsUtil.getIdleTokenPrice(tokenConfig),\n        this.functionsUtil.getTokenApy(this.props.tokenConfig),\n        this.functionsUtil.getTokenBalance(token,this.props.account),\n        this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n        this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n        this.functionsUtil.checkTokenApproved(token,tokenConfig.idle.address,this.props.account),\n        this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,null,null),\n        this.functionsUtil.getGovTokensUserTotalBalance(this.props.account,govTokenAvailableTokens,'DAI',false)\n      ]);\n\n      newState.tokenFees[token] = tokenFees;\n      newState.tokenBalance[token] = tokenBalance;\n      newState.tokenApproved[token] = tokenApproved;\n      newState.idleTokenPrice[token] = idleTokenPrice;\n      newState.idleTokenBalance[token] = idleTokenBalance;\n      newState.govTokensBalance[token] = govTokensBalance;\n      newState.tokenFeesPercentage[token] = tokenFeesPercentage;\n      newState.govTokensUserBalances[token] = govTokensUserBalances;\n      newState.govTokensDisabled[token] = tokenConfig.govTokensDisabled;\n      newState.tokenApy[token] = tokenApy && !tokenApy.isNaN() ? tokenApy : null;\n      newState.redeemableBalance[token] = idleTokenBalance && idleTokenPrice ? idleTokenBalance.times(idleTokenPrice) : this.functionsUtil.BNify(0);\n      // });\n\n      newState.availableGovTokens = this.functionsUtil.getTokenGovTokens(this.props.tokenConfig);\n\n      // console.log('govTokensBalance',newState.govTokensBalance);\n      // console.log('availableGovTokens',newState.availableGovTokens);\n      // console.log('govTokensUserBalances',newState.govTokensUserBalances);\n\n      newState.componentMounted = true;\n\n      this.setState(newState);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    const selectedTokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    const availableTokensChanged = JSON.stringify(prevProps.availableTokens) !== JSON.stringify(this.props.availableTokens);\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n    if (accountChanged || transactionsChanged || availableTokensChanged || selectedTokenChanged){\n      // console.log('AssetPage - availableTokensChanged',availableTokensChanged);\n      this.loadTokensInfo();\n    }\n  }\n\n  render() {\n\n    const nexusMutualConfig = this.functionsUtil.getGlobalConfig(['tools','nexusMutual']);\n    const userHasFunds = this.props.account && this.state.idleTokenBalance[this.props.selectedToken] && this.functionsUtil.BNify(this.state.idleTokenBalance[this.props.selectedToken]).gt(0);\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            <Breadcrumb\n              {...this.props}\n              isMobile={this.props.isMobile}\n              path={[this.props.selectedToken]}\n              handleClick={ e => this.props.goToSection(this.props.selectedStrategy) }\n              text={this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])}\n            />\n          </Flex>\n          <Flex\n            width={0.5}\n            justifyContent={'flex-end'}\n          >\n            <CardIconButton\n              icon={'Add'}\n              {...this.props}\n              text={'Add funds'}\n              handleClick={ e => this.setActiveModal('buy') }\n            />\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Deposit / Redeem\n        </Title>\n        <Flex\n          width={1}\n        >\n          <DepositRedeem\n            {...this.props}\n            tokenFees={this.state.tokenFees[this.props.selectedToken]}\n            tokenBalance={this.state.tokenBalance[this.props.selectedToken]}\n            tokenApproved={this.state.tokenApproved[this.props.selectedToken]}\n            govTokensBalance={this.state.govTokensBalance[this.props.selectedToken]}\n            idleTokenBalance={this.state.idleTokenBalance[this.props.selectedToken]}\n            redeemableBalance={this.state.redeemableBalance[this.props.selectedToken]}\n            tokenFeesPercentage={this.state.tokenFeesPercentage[this.props.selectedToken]}\n            govTokensUserBalances={this.state.govTokensUserBalances[this.props.selectedToken]}\n          />\n        </Flex>\n        {\n          userHasFunds && nexusMutualConfig.enabled && Object.keys(nexusMutualConfig.props.availableTokens).includes(this.props.tokenConfig.idle.token) &&\n            <Flex\n              width={1}\n              id={'active-coverages'}\n              flexDirection={'column'}\n            >\n              <ActiveCoverages\n                {...this.props}\n                titleProps={{\n                  mb:3,\n                  mt:[3,4],\n                }}\n                title={'Coverage'}\n                availableTokens={[this.props.tokenConfig.idle.token]}\n              >\n                <Flex\n                  width={1}\n                  alignItems={'center'}\n                  id={'no-active-cover'}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      py:3,\n                      px:[3,4],\n                      width:[1,'auto'],\n                    }}\n                  >\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                      justifyContent={'center'}\n                    >\n                      <Icon\n                        my={[0,2]}\n                        size={'3em'}\n                        name={nexusMutualConfig.icon}\n                      />\n                      <Text\n                        mb={1}\n                        fontSize={[2,3]}\n                        fontWeight={500}\n                        textAlign={'center'}\n                      >\n                        You don't have an active coverage\n                      </Text>\n                      <Text\n                        mb={2}\n                        color={'link'}\n                        fontSize={[1,2]}\n                        fontWeight={500}\n                        textAlign={'center'}\n                      >\n                        {nexusMutualConfig.desc}\n                      </Text>\n                      <RoundButton\n                        buttonProps={{\n                          mt:1,\n                          width:'auto',\n                          minHeight:'40px',\n                          mainColor:'redeem',\n                          size:this.props.isMobile ? 'small' : 'medium'\n                        }}\n                        handleClick={ e => this.props.goToSection(`tools/${nexusMutualConfig.route}/deposit/${this.props.tokenConfig.idle.token}`) }\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                          justifyContent={'center'}\n                        >\n                          <Text\n                            color={'white'}\n                            fontSize={[1,2]}\n                            fontWeight={500}\n                          >\n                            Get Covered\n                          </Text>\n                          <Icon\n                            ml={1}\n                            size={'1.3em'}\n                            name={'KeyboardArrowRight'}\n                          />\n                        </Flex>\n                      </RoundButton>\n                    </Flex>\n                  </DashboardCard>\n                </Flex>\n              </ActiveCoverages>\n            </Flex>\n        }\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverview\n                {...this.props}\n                tokenFees={this.state.tokenFees[this.props.selectedToken]}\n              />\n            </Flex>\n        }\n        {\n          userHasFunds && this.props.account && !this.state.govTokensDisabled[this.props.selectedToken] && Object.keys(this.state.availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id={\"yield-farming\"}\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(this.state.availableGovTokens)}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.30,0.15]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    mobile:false,\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.25],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','govTokenRedeemableBalance']),\n                    props:{\n                      width:[0.35,0.30],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                    ]\n                  },\n                  {\n                    title:'DISTRIBUTION',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','userDistributionSpeed']),\n                    props:{\n                      width:[0.35,0.30],\n                    },\n                    fields:[\n                      {\n                        name:'userDistributionSpeed',\n                        props:{\n                          decimals:6\n                        }\n                      }\n                    ]\n                  },\n                  /*\n                  {\n                    title:'APR',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','govTokenApr']),\n                    props:{\n                      width:[0.2,0.17],\n                    },\n                    fields:[\n                      {\n                        name:'apr',\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','tokenPrice']),\n                    mobile:false,\n                    props:{\n                      width: 0.17,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                  */\n                ]}\n                {...this.props}\n                availableTokens={this.state.availableGovTokens}\n              />\n            </Flex>\n        }\n        {\n        this.props.account && this.state.tokenApy[this.props.selectedToken] && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'estimated-earnings-container'}\n          >\n            <Title my={[3,4]}>Estimated earnings</Title>\n            <EstimatedEarnings\n              {...this.props}\n              tokenApy={this.state.tokenApy[this.props.selectedToken]}\n            />\n          </Flex>\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              enabledTokens={[this.props.selectedToken]}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport { Text, Modal, Flex, Link } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass BetaModal extends React.Component {\n\n  state = {};\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    this.functionsUtil.setLocalStorage('betaApproved',true);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','650px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            pt={3}\n            iconHeight={'40px'}\n            title={'Beta Version'}\n            icon={'images/warning.svg'}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                fontSize={2}\n                textAlign={'left'}\n                color={'dark-gray'}\n              >\n                You're about to enter Idle Finance Beta Dashboard – this is the place where several un-audited and risky features are being tested!<br />Please use at your own risk, or visit the official website at <Link fontSize={2} mainColor={'primary'} hoverColor={'primary'} href={this.functionsUtil.getGlobalConfig(['baseURL'])}>{this.functionsUtil.getGlobalConfig(['baseURL'])}</Link>.\n              </Text>\n            </Flex>\n            <Flex\n              my={3}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                handleClick={this.closeModal}\n                buttonProps={{\n                  width:['100%','40%']\n                }}\n              >\n                Continue Anyway\n              </RoundButton>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default BetaModal;","import React, { Component } from 'react';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Box, Text, Icon, Tooltip, Link, Input } from \"rimble-ui\";\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\n\nclass CurveDeposit extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    depositSlippage:null,\n    redeemableBalance:null,\n    migrationContract:null,\n    curveTokensBalance:null,\n    migrationSucceeded:false,\n    fastBalanceSelector:null,\n    migrationContractApproved:false,\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    await this.initToken();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const idleTokenBalanceChanged = prevProps.idleTokenBalance !== this.props.idleTokenBalance;\n    if (accountChanged || idleTokenBalanceChanged){\n      await this.initToken();\n    }\n    \n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const inputValueChanged = this.state.inputValue !== prevState.inputValue;\n    if (inputValueChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  setInputValue = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    const inputValue = this.props.idleTokenBalance ? this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage) : null;\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    const buttonDisabled = !amount || amount.gt(this.state.idleTokenBalance);\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  approve = async () => {\n    const migrationContract = this.state.migrationContract;\n    if (migrationContract){\n\n      // Check if the migration contract is approved\n      const migrationContractApproved = await this.checkMigrationContractApproved();\n\n      if (!migrationContractApproved){\n\n        const callbackApprove = (tx,error) => {\n          // Send Google Analytics event\n          const eventData = {\n            eventAction: 'approve',\n            eventCategory: 'CurveDeposit',\n            eventLabel: tx ? tx.status : null\n          };\n\n          const txSucceeded = tx && tx.status === 'success';\n\n          // console.log('callbackApprove',tx,error);\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            migrationContractApproved: txSucceeded, // True\n            processing: {\n              ...prevState.processing,\n              txHash:null,\n              loading:false\n            }\n          }));\n\n          if (typeof this.props.callbackApprove === 'function' && txSucceeded){\n            this.props.callbackApprove(tx);\n          }\n\n          this.checkMigration();\n        };\n\n        const callbackReceiptApprove = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              txHash\n            }\n          }));\n        };\n\n        this.functionsUtil.enableERC20(this.props.selectedToken,migrationContract.address,callbackApprove,callbackReceiptApprove);\n\n        this.setState((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            txHash:null,\n            loading:true\n          },\n          migrationContractApproved:false\n        }));\n      } else {\n        this.setState({\n          migrationContractApproved:true\n        });\n      }\n    }\n  }\n\n  deposit = async () => {\n\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    if (!inputValue){\n      return false;\n    }\n\n    const callbackDeposit = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveDeposit`,\n        eventAction: this.props.selectedToken,\n        eventValue: inputValue.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackDeposit === 'function' && txSucceeded){\n        this.props.callbackDeposit(tx);\n      }\n    };\n\n    const callbackReceiptDeposit = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.migrationContract.name;\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n    const depositParams = await this.getMigrationParams(_amount);\n\n    this.props.contractMethodSendWrapper(contractName, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  cancelTransaction = async () => {\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  async getMigrationParams(toMigrate){\n    const migrationParams = [];\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.selectedToken]);\n\n    if (!curveTokenConfig){\n      return false;\n    }\n    \n    const migrationContractParams = curveTokenConfig.migrationParams;\n    if (migrationContractParams.n_coins){\n      const amounts = await this.functionsUtil.getCurveAmounts(this.props.selectedToken,toMigrate,true);\n      let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n\n      if (this.state.maxSlippage){\n        minMintAmount = this.functionsUtil.BNify(minMintAmount);\n        minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n        minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n      }\n\n      migrationParams.push(amounts);\n      migrationParams.push(minMintAmount);\n    }\n\n    return migrationParams;\n  }\n\n  async calculateSlippage(){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (inputValue){\n      let underlyingBalanceToDeposit = inputValue;\n      if (underlyingBalanceToDeposit){\n        const idleTokenPrice = await this.functionsUtil.getIdleTokenPrice(this.props.tokenConfig);\n        if (idleTokenPrice){\n          underlyingBalanceToDeposit = underlyingBalanceToDeposit.times(idleTokenPrice);\n        }\n      } else {\n        underlyingBalanceToDeposit = this.functionsUtil.BNify(0);\n      }\n\n      const normalizeIdleTokenBalance = this.functionsUtil.normalizeTokenAmount(underlyingBalanceToDeposit,this.props.tokenConfig.decimals);\n      let depositSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizeIdleTokenBalance);\n      if (depositSlippage){\n        depositSlippage = depositSlippage.times(100);\n      }\n\n      this.setState({\n        depositSlippage\n      });\n    }\n  }\n\n  async checkMigrationContractApproved(){\n    const migrationContract = this.state.migrationContract || await this.functionsUtil.getCurveSwapContract();\n    if (migrationContract){\n      return await this.functionsUtil.checkTokenApproved(this.props.tokenConfig.idle.token,migrationContract.address,this.props.account);\n    }\n    return false;\n  }\n\n  async initToken(){\n\n    // Init and check migration contract\n    const migrationContract = await this.functionsUtil.getCurveSwapContract();\n    const migrationContractApproved = await this.checkMigrationContractApproved();\n\n    this.setState({\n      migrationContract,\n      migrationContractApproved\n    });\n  }\n\n  approveCallback = () => {\n    this.initToken();\n  }\n\n  migrationCallback = () => {\n    this.setState({\n      migrationSucceeded:true\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken){\n      return null;\n    }\n\n    // const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const hasCurveTokens = this.state.curveTokensBalance && this.state.curveTokensBalance.gt(0);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n            {\n              this.props.idleTokenBalance && this.props.idleTokenBalance.gt(0) && (\n                <Box\n                  width={1}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:3,\n                      px:[2,4]\n                    }}\n                  >\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    > \n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ this.state.migrationContractApproved ? 'CheckBox' : 'LooksOne'}\n                          color={ this.state.migrationContractApproved ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Approve the Curve contract\n                        </Text>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ hasCurveTokens ? 'CheckBox' : 'LooksTwo'}\n                          color={ hasCurveTokens ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Deposit your {this.props.tokenConfig.idle.token}\n                        </Text>\n                      </Flex>\n                    </Flex>\n                  </DashboardCard>\n                  {\n                    !this.state.migrationContractApproved ?\n                      this.state.processing.loading ? (\n                        <Flex\n                          mt={3}\n                          flexDirection={'column'}\n                        >\n                          <TxProgressBar\n                            web3={this.props.web3}\n                            waitText={`Approve estimated in`}\n                            hash={this.state.processing.txHash}\n                            endMessage={`Finalizing approve request...`}\n                            cancelTransaction={this.cancelTransaction.bind(this)}\n                          />\n                        </Flex>\n                      ) : (\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            mt:3,\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                          >\n                            <Icon\n                              size={'2.3em'}\n                              name={'LockOpen'}\n                              color={'cellText'}\n                            />\n                            <Text\n                              mt={1}\n                              fontSize={2}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              To deposit your {this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.\n                            </Text>\n                            <RoundButton\n                              buttonProps={{\n                                mt:3,\n                                width:[1,1/2]\n                              }}\n                              handleClick={this.approve.bind(this)}\n                            >\n                              Approve\n                            </RoundButton>\n                          </Flex>\n                        </DashboardCard>\n                      )\n                    : this.state.processing.loading ? (\n                      <Flex\n                        mt={3}\n                        flexDirection={'column'}\n                      >\n                        <TxProgressBar\n                          web3={this.props.web3}\n                          waitText={`Deposit estimated in`}\n                          hash={this.state.processing.txHash}\n                          endMessage={`Finalizing deposit request...`}\n                          cancelTransaction={this.cancelTransaction.bind(this)}\n                        />\n                      </Flex>\n                    ) : (\n                      <Box\n                        mt={2}\n                        width={1}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text>\n                            Choose max slippage:\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={`Max additional slippage on top of the one shown below`}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                          justifyContent={'space-between'}\n                        >\n                          {\n                            [0.2,0.5,1,5].map( slippage => (\n                              <FastBalanceSelector\n                                cardProps={{\n                                  p:1\n                                }}\n                                textProps={{\n                                  fontSize:1\n                                }}\n                                percentage={slippage}\n                                key={`selector_${slippage}`}\n                                onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                isActive={this.state.maxSlippage === parseFloat(slippage)}\n                              />\n                            ))\n                          }\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                        >\n                          <Flex\n                            mb={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={this.state.depositSlippage ? 'space-between' : 'flex-end'}\n                          >\n                            {\n                              this.state.depositSlippage && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    textAlign={'right'}\n                                    style={{\n                                      whiteSpace:'nowrap'\n                                    }}\n                                    color={ parseFloat(this.state.depositSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                  >\n                                    {\n                                      parseFloat(this.state.depositSlippage.toFixed(3)) === 0 ?\n                                        'No Slippage'\n                                      : `${ this.state.depositSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositSlippage.abs().toFixed(3)}%`\n                                    }\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.state.depositSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              )\n                            }\n                            {\n                              this.props.idleTokenBalance && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'flex-end'}\n                                >\n                                  <Link\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'right'}\n                                    hoverColor={'copyColor'}\n                                    onClick={ (e) => this.setFastBalanceSelector(100) }\n                                    style={{\n                                      maxWidth:'100%',\n                                      overflow:'hidden',\n                                      whiteSpace:'nowrap',\n                                      textOverflow:'ellipsis'\n                                    }}\n                                  >\n                                    {this.props.idleTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {this.props.selectedToken}\n                                  </Link>\n                                </Flex>\n                              )\n                            }\n                          </Flex>\n                          <Input\n                            min={0}\n                            type={\"number\"}\n                            required={true}\n                            height={'3.4em'}\n                            borderRadius={2}\n                            fontWeight={500}\n                            boxShadow={'none !important'}\n                            placeholder={`Insert amount`}\n                            onChange={this.changeInputValue.bind(this)}\n                            border={`1px solid ${this.props.theme.colors.divider}`}\n                            value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                          />\n                          <Flex\n                            mt={2}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'space-between'}\n                          >\n                            {\n                              [25,50,75,100].map( percentage => (\n                                <FastBalanceSelector\n                                  percentage={percentage}\n                                  key={`selector_${percentage}`}\n                                  onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                  isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                                />\n                              ))\n                            }\n                          </Flex>\n                          <Flex\n                            mt={2}\n                            justifyContent={'center'}\n                          >\n                            <RoundButton\n                              buttonProps={{\n                                mt:2,\n                                width:[1,1/2],\n                                disabled:this.state.buttonDisabled\n                              }}\n                              handleClick={this.deposit.bind(this)}\n                            >\n                              Deposit\n                            </RoundButton>\n                          </Flex>\n                        </Flex>\n                      </Box>\n                    )\n                  }\n                </Box>\n              )\n            }\n          {\n            /*\n            this.state.tokenConfig && this.state.redeemableBalance ? (\n              <Box width={1}>\n                <Migrate\n                  {...this.props}\n                  showActions={false}\n                  getTokenPrice={false}\n                  migrationTextProps={{\n                    fontWeight:500\n                  }}\n                  isMigrationTool={true}\n                  migrationImage={{\n                    mb:1,\n                    height:'1.8em',\n                    src:curveConfig.params.image\n                  }}\n                  showBalanceSelector={true}\n                  waitText={'Deposit estimated in'}\n                  tokenConfig={this.state.tokenConfig}\n                  callbackApprove={this.approveCallback.bind(this)}\n                  migrationParams={this.getMigrationParams.bind(this)}\n                  migrationCallback={this.migrationCallback.bind(this)}\n                  approveText={`To deposit your ${this.props.tokenConfig.idle.token} you need to approve Curve smart-contract first.`}\n                  migrationText={`You can deposit ${this.state.redeemableBalance.toFixed(4)} ${this.props.tokenConfig.idle.token} in the Curve Pool${ this.state.depositSlippage ? (this.state.depositSlippage.gte(0) ? ` with <span style=\"color:${this.props.theme.colors.transactions.status.failed}\">${this.state.depositSlippage.times(100).toFixed(2)}% of slippage</span>` : ` with <span style=\"color:${this.props.theme.colors.transactions.status.completed}\">${Math.abs(parseFloat(this.state.depositSlippage.times(100).toFixed(2)))}% of bonus</span>`) : '' }.`}\n                >\n                  {\n                    !this.props.account ? (\n                      <DashboardCard\n                        cardProps={{\n                          p:3,\n                          mt:3\n                        }}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                        >\n                          <Icon\n                            size={'2.3em'}\n                            name={'Input'}\n                            color={'cellText'}\n                          />\n                          <Text\n                            mt={2}\n                            fontSize={2}\n                            color={'cellText'}\n                            textAlign={'center'}\n                          >\n                            Please connect with your wallet interact with Idle.\n                          </Text>\n                          <RoundButton\n                            buttonProps={{\n                              mt:2,\n                              width:[1,1/2]\n                            }}\n                            handleClick={this.props.connectAndValidateAccount}\n                          >\n                            Connect\n                          </RoundButton>\n                        </Flex>\n                      </DashboardCard>\n                    ) : (\n                      <DashboardCard\n                        cardProps={{\n                          p:3\n                        }}\n                      >\n                        {\n                          this.state.migrationSucceeded ? (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'DoneAll'}\n                                color={this.props.theme.colors.transactions.status.completed}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You have successfully deposited your {this.props.tokenConfig.idle.token} in the Curve Pool!\n                              </Text>\n                            </Flex>\n                          ) : (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'MoneyOff'}\n                                color={'cellText'}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You don't have any {this.props.tokenConfig.idle.token} in your wallet.\n                              </Text>\n                            </Flex>\n                          )\n                        }\n                      </DashboardCard>\n                    )\n                  }\n                </Migrate>\n              </Box>\n            ) : null\n            */\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveDeposit;","import theme from '../theme';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\n// import { linearGradientDef } from '@nivo/core'\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport ChartCustomTooltip from '../ChartCustomTooltip/ChartCustomTooltip';\nimport ChartCustomTooltipRow from '../ChartCustomTooltipRow/ChartCustomTooltipRow';\n\nclass PortfolioEquityCurve extends Component {\n  state = {\n    startDate:null,\n    chartData:null,\n    chartProps:null,\n    chartwidth:null,\n    chartHeight:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentDidMount(){\n    this.loadUtils();\n    this.loadChartData();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n\n    const quickDateSelectionChanged = prevProps.quickDateSelection !== this.props.quickDateSelection;\n    const tokenChanged = JSON.stringify(prevProps.enabledTokens) !== JSON.stringify(this.props.enabledTokens);\n    if (tokenChanged || quickDateSelectionChanged){\n      this.setState({\n        chartData:null\n      },() => {\n        this.componentDidMount();\n      });\n    }\n\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n    if (mobileChanged){\n      this.loadChartData();\n    }\n  }\n\n  async loadChartData() {\n\n    let enabledTokens = this.props.enabledTokens;\n    if (!enabledTokens || !enabledTokens.length){\n      enabledTokens = Object.keys(this.props.availableTokens);\n    }\n\n    const curveTxs = await this.functionsUtil.getCurveTxs(this.props.account,0,'latest',enabledTokens);\n\n    const chartData = [];\n    let tokensBalance = [];\n    const processedTxs = {};\n    let firstTxTimestamp = null;\n    let totalBalance = this.functionsUtil.BNify(0);\n    const curvePoolContract = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    if (curveTxs && curveTxs.length){\n\n      curveTxs.forEach((tx,index) => {\n\n        if (!processedTxs[tx.hash]){\n          processedTxs[tx.hash] = [];\n        }\n\n        if (processedTxs[tx.hash].includes(tx.action)){\n          return;\n        }\n        \n        firstTxTimestamp = firstTxTimestamp ? Math.min(firstTxTimestamp,parseInt(tx.timeStamp)) : parseInt(tx.timeStamp);\n\n        const curveTokens = this.functionsUtil.BNify(tx.curveTokens);\n\n        switch (tx.action){\n          case 'CurveIn':\n          case 'CurveZapIn':\n          case 'CurveDepositIn':\n          case 'CurveTransferIn':\n            totalBalance = totalBalance.plus(curveTokens);\n          break;\n          case 'CurveOut':\n          case 'CurveZapOut':\n          case 'CurveDepositOut':\n          case 'CurveTransferOut':\n            totalBalance = totalBalance.minus(curveTokens);\n          break;\n          default:\n          break;\n        }\n\n        // Reset totalBalance if below zero\n        if (totalBalance.lt(0)){\n          totalBalance = this.functionsUtil.BNify(0);\n        }\n\n        const action = tx.action;\n        const balance = totalBalance;\n        const timeStamp = parseInt(tx.timeStamp);\n        const curveTokenPrice = this.functionsUtil.fixTokenDecimals(tx.curveTokenPrice,curvePoolContract.decimals);\n\n        // console.log(this.functionsUtil.strToMoment(timeStamp*1000).format('YYYY/MM/DD HH:mm'),tx.hash,tx.action,curveTokens.toString(),totalBalance.toString());\n\n        if (!curveTokenPrice.isNaN() && !curveTokenPrice.isNaN()){\n          tokensBalance.push({\n            action,\n            balance,\n            timeStamp,\n            curveTokens,\n            curveTokenPrice\n          });\n\n          processedTxs[tx.hash].push(action);\n        }\n      });\n    }\n\n    // Calculate Start Date\n    let startDate = null;\n    const currentDate = this.functionsUtil.strToMoment(new Date());\n\n    switch (this.props.quickDateSelection){\n      case 'week':\n        startDate = currentDate.clone().subtract(1,'week');\n      break;\n      case 'month':\n        startDate = currentDate.clone().subtract(1,'month');\n      break;\n      case 'month3':\n        startDate = currentDate.clone().subtract(3,'month');\n      break;\n      case 'month6':\n        startDate = currentDate.clone().subtract(6,'month');\n      break;\n      default:\n        startDate = null;\n      break;\n    }\n\n    const days = {};\n    let prevBalances = {};\n    let prevTimestamp = null;\n    let minChartValue = null;\n    let maxChartValue = null;\n    const aggregatedBalancesKeys = {};\n    const tokensBalancesPerDate = {};\n    let aggregatedBalance = this.functionsUtil.BNify(0);\n    // let curveTokenBalance = this.functionsUtil.BNify(0);\n    const currTimestamp = parseInt(new Date().getTime()/1000)+86400;\n\n    const tokensData = await this.functionsUtil.getTokenApiData(Object.values(this.props.availableTokens)[0].address,false,firstTxTimestamp,null,false,3600);\n\n    for (let timeStamp=firstTxTimestamp;timeStamp<=currTimestamp;timeStamp+=this.props.frequencySeconds){\n\n      let foundBalances = {};\n      let tokensBalances = {};\n      timeStamp = Math.min(currTimestamp,timeStamp);\n      let momentDate = this.functionsUtil.strToMoment(timeStamp*1000);\n\n      // eslint-disable-next-line\n      const filteredTokenData = tokensData.filter(tx => (tx.timestamp>=prevTimestamp && tx.timestamp<=timeStamp));\n\n      // eslint-disable-next-line\n      let filteredBalances = tokensBalance.filter(tx => (tx.timeStamp<=timeStamp && (!prevTimestamp || tx.timeStamp>prevTimestamp)));\n      \n      if (!filteredBalances.length){\n        if (prevBalances){\n          filteredBalances = prevBalances;\n          const lastFilteredTx = Object.values(filteredBalances).pop();\n          const currentBalance = parseFloat(lastFilteredTx.balance);\n\n          const lastTokenData = Object.values(filteredTokenData).pop();\n          let curveTokenPrice = null;\n          if (lastTokenData){\n            curveTokenPrice = await this.functionsUtil.getCurveTokenPrice(lastTokenData.blocknumber);\n          }\n\n          // Take idleToken price from API and calculate new balance\n          if (currentBalance>0 && timeStamp>firstTxTimestamp && curveTokenPrice){\n            // Set new curveTokenPrice\n            lastFilteredTx.curveTokenPrice = curveTokenPrice;\n            filteredBalances = [lastFilteredTx];\n          }\n        } else {\n          filteredBalances = [{\n            balance:this.functionsUtil.BNify(0),\n            curveTokenPrice:this.functionsUtil.BNify(0)\n          }];\n        }\n      }\n\n      const lastTx = Object.assign([],filteredBalances).pop();\n      let lastTxBalance = this.functionsUtil.BNify(lastTx.balance).times(lastTx.curveTokenPrice);\n\n      tokensBalances[curvePoolContract.token] = this.functionsUtil.BNify(lastTx.balance);\n      aggregatedBalance = lastTxBalance;\n\n      foundBalances = filteredBalances;\n\n      // console.log(momentDate.format('YYYY/MM/DD 00:00'),lastTx.balance.toString(),lastTx.curveTokenPrice.toString(),lastTxBalance.toString());\n\n      if (startDate === null || momentDate.isSameOrAfter(startDate)){\n        \n        if (momentDate.isAfter(new Date(),'day')){\n          momentDate = this.functionsUtil.strToMoment(new Date());\n        }\n\n        // Force date to midnight\n        const formattedDate = momentDate.format('YYYY/MM/DD 00:00');\n\n        // Save days for axisBottom format\n        days[momentDate.format('YYYY/MM/DD')] = 1;\n\n        const aggregatedBalanceParsed = parseFloat(parseFloat(aggregatedBalance.toFixed(6)));\n\n        aggregatedBalancesKeys[formattedDate] = aggregatedBalanceParsed;\n        tokensBalancesPerDate[formattedDate] = tokensBalances;\n\n        // console.log(formattedDate,tokensBalances);\n\n        minChartValue = minChartValue === null ? aggregatedBalanceParsed : Math.min(minChartValue,aggregatedBalanceParsed);\n        maxChartValue = maxChartValue === null ? aggregatedBalanceParsed : Math.max(maxChartValue,aggregatedBalanceParsed);\n      }\n\n      prevTimestamp = timeStamp;\n      prevBalances = foundBalances;\n    }\n\n    const aggregatedBalances = Object.keys(aggregatedBalancesKeys).map(date => ({\n      x:date,\n      y:aggregatedBalancesKeys[date],\n      balances:tokensBalancesPerDate[date]\n    }));\n\n    let itemIndex = 0;\n    aggregatedBalances.forEach( (item,index) => {\n      const itemPos = Math.floor(itemIndex/aggregatedBalances.length*100);\n      aggregatedBalances[index].itemPos = itemPos;\n      itemIndex++;\n    });\n\n    /*\n    aggregatedBalances.push({\n      x:momentDate.format('YYYY/MM/DD HH:mm'),\n      y:aggregatedBalance\n    });\n    */\n\n    // Add day before to start with zero balance\n    /*\n    const firstTxMomentDate = this.functionsUtil.strToMoment(firstTxTimestamp*1000);\n    if ((startDate === null || startDate.isSameOrBefore(firstTxMomentDate)) && aggregatedBalances.length){\n      const firstItem = aggregatedBalances[0];\n      const firstDate = this.functionsUtil.strToMoment(firstItem.x,'YYYY/MM/DD HH:mm');\n      firstDate.subtract(1,'day');\n      aggregatedBalances.unshift({\n        x:firstDate.format('YYYY/MM/DD HH:mm'),\n        y:0\n      });\n    }\n    */\n\n    // Add token Data\n    chartData.push({\n      id:'USD',\n      color: 'hsl('+ this.functionsUtil.getGlobalConfig(['stats','tokens','USD','color','hsl']).join(',')+')',\n      data:aggregatedBalances\n    });\n\n    let yFormatDecimals = 2;\n    if (maxChartValue-minChartValue<1){\n      yFormatDecimals = 4;\n    }\n\n    if (maxChartValue === minChartValue){\n      minChartValue = Math.max(0,maxChartValue-1);\n    }\n\n    const maxGridLines = 5;\n    const gridYStep = (maxChartValue-minChartValue)/maxGridLines;\n    const gridYValues = [];\n    for (let i=0;i<=maxGridLines;i++){\n      const gridYValue = parseFloat(parseFloat(minChartValue+(i*gridYStep)).toFixed(6));\n      gridYValues.push(gridYValue);\n    }\n    \n    const axisBottomMaxValues = 10;\n    const daysCount = Object.values(days).length;    \n    const daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n    const chartProps = {\n      xScale:{\n        type: 'time',\n        format: '%Y/%m/%d %H:%M',\n      },\n      yScale:{\n        type: 'linear',\n        stacked: false,\n        min: minChartValue,\n        max: maxChartValue\n      },\n      xFormat:'time:%b %d %Y',\n      yFormat:value => this.functionsUtil.formatMoney(value,yFormatDecimals),\n      axisBottom: this.props.isMobile ? null : {\n        legend: '',\n        tickSize:0,\n        format: '%b %d',\n        tickPadding: 15,\n        orient: 'bottom',\n        legendOffset: 36,\n        legendPosition: 'middle',\n        tickValues:'every '+daysFrequency+' days'\n      },\n      gridYValues,\n      pointSize:0,\n      useMesh:true,\n      axisLeft: this.props.isMobile ? null : {\n        legend: '',\n        tickSize: 0,\n        orient: 'left',\n        tickPadding: 10,\n        tickRotation: 0,\n        legendOffset: -70,\n        tickValues:gridYValues,\n        legendPosition: 'middle',\n        format: v => this.functionsUtil.abbreviateNumber(v,2),\n      },\n      animate:true,\n      pointLabel:'y',\n      areaOpacity:0.1,\n      enableArea:true,\n      enableSlices:'x',\n      enableGridY:true,\n      curve:'monotoneX',\n      enableGridX:false,\n      pointBorderWidth:1,\n      colors:d => d.color,\n      pointLabelYOffset:-12,\n      areaBaselineValue:minChartValue,\n      pointColor:{ from: 'color', modifiers: []},\n      theme:{\n        axis: {\n          ticks: {\n            text: {\n              fontSize:12,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '8 4'\n          }\n        },\n      },\n      /*\n      defs:[\n        linearGradientDef('gradientA', [\n          { offset: 0, color: 'inherit' },\n          { offset: 100, color: 'inherit', opacity: 0 },\n        ]),\n      ],\n      fill:[{ match: '*', id: 'gradientA' }],\n      */\n      margin: this.props.isMobile ? { top: 20, right: 25, bottom: 25, left: 20 } : { top: 30, right: 50, bottom: 45, left: 50 },\n      sliceTooltip:(slideData) => {\n        const { slice } = slideData;\n        const point = slice.points[0];\n        return (\n          <ChartCustomTooltip\n            point={point}\n          >\n            <ChartCustomTooltipRow\n              color={point.color}\n              label={point.serieId}\n              value={`$ ${point.data.yFormatted}`}\n            />\n            {\n            typeof point.data.balances === 'object' && Object.keys(point.data.balances).length>0 &&\n              Object.keys(point.data.balances).map(token => {\n                if (token === point.serieId){\n                  return null;\n                }\n                const tokenInfo = this.functionsUtil.getGlobalConfig(['stats','tokens',token]);\n                if (tokenInfo){\n                  const tokenName = tokenInfo.name ? tokenInfo.name : token;\n                  const color = tokenInfo.color.hex;\n                  const balance = point.data.balances[token];\n                  let formattedBalance = this.functionsUtil.formatMoney(balance,2);\n                  if (parseFloat(balance)>=0.01){\n                    return (\n                      <ChartCustomTooltipRow\n                        label={tokenName}\n                        color={color}\n                        key={`row_${token}`}\n                        value={`${formattedBalance}`}\n                      />\n                    );\n                  }\n                }\n                return null;\n              })\n            }\n          </ChartCustomTooltip>\n        );\n      }\n    };\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  render() {\n    return (\n      <GenericChart\n        type={Line}\n        showLoader={true}\n        {...this.state.chartProps}\n        data={this.state.chartData}\n        parentId={this.props.parentId}\n        height={this.props.chartHeight}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default PortfolioEquityCurve;","import theme from '../theme';\nimport Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport { Flex, Heading, Text } from \"rimble-ui\";\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport PortfolioEquityCurve from '../PortfolioEquityCurve/PortfolioEquityCurve';\n\nclass FundsOverviewCurve extends Component {\n\n  state = {\n    compAPR:null,\n    aggregatedValues:[],\n    govTokensUserBalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    await this.functionsUtil.getCurveAvgBuyPrice();\n\n    // debugger;\n\n    await this.functionsUtil.getCurveAvgSlippage();\n\n    // debugger;\n    /*\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const [govTokensUserBalance,avgAPY,days] = await Promise.all([\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,'DAI'),\n      this.functionsUtil.loadAssetField('avgAPY',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '-') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    let [tokenAllocation,compAPR] = await Promise.all([\n      this.functionsUtil.getTokenAllocation(this.props.tokenConfig,false,false),\n      this.functionsUtil.getCompAPR(this.props.selectedToken,this.props.tokenConfig)\n    ]);\n\n    if (tokenAllocation){\n      const compoundInfo = this.props.tokenConfig.protocols.find( p => (p.name === 'compound') );\n      if (compoundInfo){\n        if (tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()]){\n          const compoundAllocationPerc = tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()];\n          compAPR = compAPR.times(compoundAllocationPerc);\n        }\n      }\n    }\n\n    this.setState({\n      compAPR,\n      aggregatedValues,\n      govTokensUserBalance\n    });\n    */\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Text\n                          mt={2}\n                          fontWeight={2}\n                          fontSize={[1,2]}\n                          color={'cellText'}\n                        >\n                          {v.props.title}\n                        </Text>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquityCurve\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLentCurve',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPercCurve',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            {\n              /*\n              <Flex\n                mb={[2,0]}\n                width={[1,1/5]}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'flex-start'}\n              >\n                <Title\n                  mb={2}\n                  fontSize={[3,4]}\n                  component={Heading.h3}\n                >\n                  Fees\n                </Title>\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'feesCounter',\n                    props:{\n                      decimals:7,\n                      maxPrecision:8,\n                      style:{\n                        fontWeight:300,\n                        fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                        color:theme.colors.counter\n                      },\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n              */\n            }\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveApy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Avg Slippage\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveAvgSlippage',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverviewCurve;","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport { Box, Flex, Text, Icon } from \"rimble-ui\";\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport CurveDeposit from '../CurveDeposit/CurveDeposit';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport TransactionField from '../TransactionField/TransactionField';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport FundsOverviewCurve from '../FundsOverviewCurve/FundsOverviewCurve';\n\nclass AssetPage extends Component {\n\n  state = {\n    inputValue:{},\n    processing:{},\n    tokenFees:null,\n    canRedeem:null,\n    canDeposit:null,\n    action:'deposit',\n    activeModal:null,\n    tokenConfig:null,\n    tokenBalance:null,\n    tokenApproved:null,\n    selectedToken:null,\n    availableTokens:{},\n    redeemBalance:null,\n    depositBalance:null,\n    buttonDisabled:false,\n    curveTokenPrice:null,\n    depositSlippage:null,\n    idleTokenBalance:null,\n    withdrawSlippage:null,\n    govTokensBalance:null,\n    curveZapContract:null,\n    curveTokenConfig:null,\n    curveTokensAmounts:{},\n    govTokensDisabled:null,\n    componentMounted:false,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    redeemableBalance:null,\n    fastBalanceSelector:{},\n    curveAvailableTokens:{},\n    tokenFeesPercentage:null,\n    redeemUnevenAmounts:false,\n    curveDepositContract:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  changeFromToken = (selectedToken) => {\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    this.props.goToSection(`${curveConfig.params.route}/${selectedToken}`);\n  }\n\n  getSelectedToken(){\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    return this.props.urlParams.param1 && curveAvailableTokens[this.props.urlParams.param1] ? this.props.urlParams.param1 : Object.keys(curveAvailableTokens)[0];\n  }\n\n  setSelectedToken = async (selectedToken) => {\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n    this.setState({\n      tokenConfig,\n      selectedToken,\n      availableTokens,\n      curveTokenConfig\n    });\n  }\n\n  loadTokensInfo = async () => {\n\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    this.setState({\n      curveAvailableTokens\n    });\n\n    const selectedToken = this.getSelectedToken();\n    // Check if token is set the query params\n    if (selectedToken && selectedToken !== this.props.urlParams.param1){\n      this.changeFromToken(selectedToken);\n      return await this.setSelectedToken(selectedToken);\n    } else if (selectedToken !== this.state.selectedToken){\n      await this.setSelectedToken(selectedToken);\n    }\n\n    const newState = {...this.state};\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n\n    if (newState.selectedToken !== selectedToken){\n      newState.selectedToken = selectedToken;\n    }\n\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n\n    const [\n      curveZapContract,\n      curvePoolContract,\n      curveSwapContract,\n      curveDepositContract\n    ] = await Promise.all([\n      this.functionsUtil.getCurveZapContract(),\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract()\n    ]);\n\n    newState.curveZapContract = curveZapContract;\n    newState.curvePoolContract = curvePoolContract;\n    newState.curveSwapContract = curveSwapContract;\n    newState.curveDepositContract = curveDepositContract;\n\n    newState.availableTokens = availableTokens;\n\n\n    // console.log('curveTokenPrice',newState.curveTokenPrice.toFixed(6),'curveTokenBalance',newState.curveTokenBalance.toFixed(6),'redeemableBalance',newState.redeemableBalance.toFixed(20),'tokenBalance',newState.tokenBalance.toFixed(20));\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[selectedToken] = tokenConfig;\n\n    newState.tokenConfig = tokenConfig;\n    newState.curveTokenConfig = curveTokenConfig;\n\n    if (this.props.account){\n      [\n        newState.curveTokenPrice,\n        newState.curveTokenBalance,\n        newState.tokenFeesPercentage,\n        newState.tokenFees,\n        newState.tokenBalance,\n        newState.idleTokenBalance,\n        newState.tokenApproved,\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokenPrice(),\n        this.functionsUtil.getCurveTokenBalance(),\n        this.functionsUtil.getTokenFees(tokenConfig),\n        this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n        this.functionsUtil.getTokenBalance(selectedToken,this.props.account),\n        this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n        this.functionsUtil.checkTokenApproved(selectedToken,curveDepositContract.address,this.props.account),\n      ]);\n\n\n      newState.processing = {\n        redeem:{\n          txHash:null,\n          loading:false\n        },\n        deposit:{\n          txHash:null,\n          loading:false\n        },\n        approve:{\n          txHash:null,\n          loading:false\n        },\n      };\n      newState.inputValue = {\n        redeem:null,\n        deposit:null\n      };\n      newState.fastBalanceSelector = {\n        redeem:null,\n        deposit:null\n      };\n\n      newState.componentMounted = true;\n      newState.depositBalance = newState.tokenBalance;\n      newState.redeemBalance = newState.redeemableBalance;\n      newState.govTokensDisabled = tokenConfig.govTokensDisabled;\n      newState.canRedeem = newState.curveTokenBalance && newState.curveTokenBalance.gt(0);\n      newState.canDeposit = newState.idleTokenBalance && newState.idleTokenBalance.gt(0);\n      newState.redeemableBalance = newState.curveTokenBalance ? newState.curveTokenBalance.times(newState.curveTokenPrice) : this.functionsUtil.BNify(0);\n    }\n\n    this.setState(newState);\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async calculateSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,this.state.curvePoolContract.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositBalance = amount;\n        newState.depositSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      case 'redeem':\n        newState.redeemBalance = amount;\n        newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.urlParams.param1 !== this.props.urlParams.param1;\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n\n    if (accountChanged || transactionsChanged || tokenChanged){\n      await this.loadTokensInfo();\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const redeemUnevenAmountsChanged = this.state.redeemUnevenAmounts !== prevState.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n    if (actionChanged || fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    if (actionChanged){\n      this.updateAssetSelector();\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  updateAssetSelector = async () => {\n    const newState = {};\n    switch (this.state.action){\n      case 'deposit':\n        this.loadTokensInfo();\n      break;\n      case 'redeem':\n        // this.loadTokensInfo();\n        const tokenConfig = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n        newState.curveAvailableTokens = {};\n        newState.curveTokenConfig = tokenConfig;\n        newState.selectedToken = tokenConfig.token;\n        newState.curveAvailableTokens[tokenConfig.token] = tokenConfig;\n      break;\n      default:\n      break;\n    }\n\n    this.setState(newState);\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.state.tokenBalance ? this.functionsUtil.BNify(this.state.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          amount = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n        } else {\n          amount = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  changeInputValue = (e) => {\n    if (!this.state.action){\n      return false;\n    }\n\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && amount.gt(this.state.tokenBalance));\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.curveTokenBalance)) );\n        } else {\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.redeemableBalance)) );\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = this.state.tokenApproved;\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.state.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.functionsUtil.enableERC20(this.state.selectedToken,this.state.curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const inputValue = this.state.inputValue[this.state.action];\n    const selectedPercentage = this.getFastBalanceSelector();\n\n    let loading = true;\n\n    switch (this.state.action){\n      // Handle deposit in curve\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.state.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if (this.state.metaTransactionsEnabled && txError){\n            this.setState({\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,tokensToDeposit);\n        const minMintAmount = await this.functionsUtil.genericContractCall(this.state.curveSwapContract.name,'calc_token_amount',[amounts,true]);\n        const depositParams = [amounts,minMintAmount];\n\n        // No need for callback atm\n        contractSendResult = await this.props.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n      break;\n      case 'redeem':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        let curveTokensToRedeem = null;\n        if (selectedPercentage){\n          curveTokensToRedeem = this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage);\n        } else {\n          curveTokensToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals));\n          if (!this.state.redeemUnevenAmounts){\n            const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n            curveTokensToRedeem = curveTokensToRedeem.div(curveTokenPrice);\n          }\n        }\n\n        if (!curveTokensToRedeem){\n          return false;\n        }\n\n        const callbackRedeem = (tx,error) => {\n          const txSucceeded = tx.status === 'success';\n\n          // Send Google Analytics event\n          const eventData = {\n            eventLabel: tx.status,\n            eventCategory: `CurveRedeem`,\n            eventAction: this.state.selectedToken,\n            eventValue: curveTokensToRedeem.toFixed()\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          }\n        };\n\n        const callbackReceiptRedeem = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const _amount = this.functionsUtil.normalizeTokenAmount(curveTokensToRedeem,this.state.curvePoolContract.decimals).toString();\n        let min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,0);\n\n        const contractName = this.state.curveDepositContract.name;\n        if (this.state.redeemUnevenAmounts){\n          console.log('remove_liquidity_imbalance',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_imbalance', [min_amounts, _amount], null, callbackRedeem, callbackReceiptRedeem);\n        } else {\n          min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,_amount);\n          console.log('remove_liquidity',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts], null, callbackRedeem, callbackReceiptRedeem);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    // console.log('contractSendResult',contractSendResult);\n\n    if (contractSendResult !== false){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    const userHasFunds = this.props.account && this.state.curveTokenBalance && this.functionsUtil.BNify(this.state.curveTokenBalance).gt(0);\n    const canPerformAction = true;\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            {\n              <Breadcrumb\n                {...this.props}\n                isMobile={this.props.isMobile}\n                path={['Boost',this.state.selectedToken]}\n                handleClick={ e => this.props.goToSection('best') }\n                text={this.functionsUtil.getGlobalConfig(['strategies','best','title'])}\n              />\n            }\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Curve Pool\n        </Title>\n        <Flex\n          width={1}\n        >\n          <Flex\n            width={1}\n            alignItems={'center'}\n            flexDirection={'column'}\n            justifyContent={'center'}\n          >\n            <Flex\n              width={[1,0.36]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Box\n                width={1}\n              >\n                <Text\n                  mb={1}\n                >\n                  Select your asset:\n                </Text>\n                <AssetSelector\n                  {...this.props}\n                  id={'token-from'}\n                  onChange={this.changeFromToken}\n                  selectedToken={this.state.selectedToken}\n                  tokenConfig={this.state.curveTokenConfig}\n                  showBalance={this.state.action === 'deposit'}\n                  availableTokens={this.state.curveAvailableTokens}\n                />\n              </Box>\n              <Box\n                width={1}\n              >\n                {\n                  canPerformAction ? (\n                    <Flex\n                      mt={2}\n                      flexDirection={'column'}\n                    >\n                      <Text\n                        mb={2}\n                      >\n                        Choose the action:\n                      </Text>\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('deposit');\n                            }\n                          }}\n                          isInteractive={true}\n                          isActive={ this.state.action === 'deposit' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'deposit'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Deposit\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('redeem');\n                            }\n                          }}\n                          isInteractive={true}\n                          isDisabled={ !this.state.canRedeem }\n                          isActive={ this.state.action === 'redeem' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'redeem'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Redeem\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                      </Flex>\n                    </Flex>\n                  ) : (\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    >\n                      <Icon\n                        size={'2.3em'}\n                        name={'MoneyOff'}\n                        color={'cellText'}\n                      />\n                      <Text\n                        mt={2}\n                        fontSize={2}\n                        color={'cellText'}\n                        textAlign={'center'}\n                      >\n                        You don't have any {this.state.tokenConfig.idle.token} in your wallet.\n                      </Text>\n                    </Flex>\n                  )\n                }\n              </Box>\n            </Flex>\n            <Flex\n              width={1}\n              mt={ this.props.account ? 3 : 0 }\n            >\n            {\n              this.state.action === 'deposit' ? (\n                <CurveDeposit\n                  {...this.props}\n                  {...this.state}\n                />\n              ) : this.state.action === 'redeem' && (\n                <CurveRedeem\n                  {...this.props}\n                  {...this.state}\n                />\n              )\n            }\n            </Flex>\n          </Flex>\n        </Flex>\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverviewCurve\n                {...this.props}\n                tokenFees={this.state.tokenFees}\n                tokenConfig={this.state.tokenConfig}\n                selectedToken={this.state.selectedToken}\n                availableTokens={this.state.availableTokens}\n                enabledTokens={Object.keys(this.state.availableTokens)}\n              />\n            </Flex>\n        }\n        {\n          /*\n          this.props.account && !this.state.govTokensDisabled[this.state.selectedToken] && Object.keys(availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id=\"earnings-estimation\"\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(availableGovTokens)}\n                handleClick={(props) => {}}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.33,0.22]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.26],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    props:{\n                      width:[0.33,0.26],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                      {\n                        name:'tooltip',\n                        props:{\n                          placement:'bottom',\n                          message:'The shown balance may be lower than the real one.',\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    mobile:false,\n                    props:{\n                      width: 0.26,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                ]}\n                {...this.props}\n                availableTokens={availableGovTokens}\n              />\n            </Flex>\n          */\n        }\n        {\n          /*\n          this.props.account && \n            <Flex\n              mb={[3,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'estimated-earnings-container'}\n            >\n              <Title my={[3,4]}>Estimated earnings</Title>\n              <EstimatedEarnings\n                {...this.props}\n              />\n            </Flex>\n          */\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              availableTokens={this.state.availableTokens}\n              enabledTokens={Object.keys(this.state.availableTokens)}\n              enabledActions={['CurveIn','CurveOut','CurveZapIn','CurveZapOut','CurveTransferIn','CurveTransferOut','CurveDepositIn','CurveDepositOut']}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.state.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport {\n  Text,\n  Modal,\n  Button,\n  Form,\n  Icon,\n  Flex,\n  Link\n} from \"rimble-ui\";\nimport axios from 'axios';\nimport colors from '../../colors';\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\nimport globalConfigs from '../../configs/globalConfigs';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\n\nclass WelcomeModal extends React.Component {\n\n  state = {\n    email:null,\n    error:false,\n    subscribed:false,\n    sendingForm:false\n  };\n\n  functionsUtil = null;\n\n  constructor(props) {\n    super(props);\n    this.functionsUtil = new FunctionsUtil(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleValidation = this.handleValidation.bind(this);\n  }\n\n  componentDidUpdate = async () => {\n    this.functionsUtil.setProps(this.props);\n  }\n\n  sendUserInfo = (sendEmail=true) => {\n    const walletProvider = this.functionsUtil.getWalletProvider();\n    const userInfo = {\n      address: this.props.account,\n      provider: walletProvider\n    };\n\n    if (sendEmail && this.state.email !== null){\n      userInfo.email = this.state.email;\n    }\n\n    this.functionsUtil.simpleIDPassUserInfo(userInfo);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    if (!this.state.email){\n      return false;\n    }\n\n    const callback = () => {\n      this.setState({\n        sendingForm:false,\n        subscribed:true\n      });\n      window.setTimeout(this.props.closeModal,2500);\n    };\n\n    this.sendUserInfo();\n\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'send_email',\n      eventLabel: 'WelcomeModal'\n    });\n\n    axios.post(globalConfigs.newsletterSubscription.endpoint, {\n      'email': this.state.email\n    }).then(r => {\n      callback();\n    })\n    .catch(err => {\n      callback();\n    });\n\n    // Set signedUp in the localStorage\n    if (localStorage){\n      const walletAddress = this.props.account.toLowerCase();\n      let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : null;\n      if (lastLogin && lastLogin[walletAddress] && !lastLogin[walletAddress].signedUp){\n        lastLogin[walletAddress].signedUp = true;\n        this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n      }\n    }\n\n    this.setState({\n      sendingForm:true\n    })\n  };\n\n  closeModal = async () => {\n\n    const closeModal = () => {\n      this.props.closeModal();\n    };\n\n    try{\n      // Prevent sending email\n      this.sendUserInfo(false);\n\n      // Send Google Analytics event\n      if (globalConfigs.analytics.google.events.enabled){\n        this.functionsUtil.sendGoogleAnalyticsEvent({\n          eventCategory: 'UI',\n          eventAction: 'continue_without_email',\n          eventLabel: 'WelcomeModal'\n        },closeModal);\n\n        // Call callback after 1 second if stuck\n        setTimeout(closeModal,1000);\n      } else {\n        closeModal();\n      }\n    } catch (err) {\n      closeModal();\n    }\n  }\n\n  handleValidation(e) {\n    if (e && e.target) {\n      this.setState({ email: e.target.value });\n      e.target.parentNode.classList.add(\"was-validated\");\n    }\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        {\n          this.state.subscribed ? (\n            <ModalCard\n              closeFunc={this.closeModal}\n            >\n              <ModalCard.Header title={'All done'} icon={`images/done.svg`}></ModalCard.Header>\n              <ModalCard.Body>\n                <Flex width={1} flexDirection={'column'} mb={3}>\n                  <Text color={'dark-gray'} textAlign={'center'} fontSize={3} my={0}>\n                    Thanks for subscribing!\n                  </Text>\n                  <Button\n                    my={3}\n                    width={'100%'}\n                    borderRadius={4}\n                    onClick={this.closeModal}\n                  >\n                    CLOSE\n                  </Button>\n                </Flex>\n              </ModalCard.Body>\n            </ModalCard>\n          ) : (\n            <ModalCard closeFunc={this.closeModal}>\n              <ModalCard.Header title={'Stay up-to-date!'} icon={`images/notification.svg`}>\n              </ModalCard.Header>\n              <ModalCard.Body>\n                <Form onSubmit={this.handleSubmit}>\n                  <Flex width={1} flexDirection={'column'} mb={3}>\n                    <Text color={'mid-gray'} textAlign={'left'} fontSize={3} my={0}>\n                      Add your e-mail to receive updates about:\n                    </Text>\n                  </Flex>\n                  <Flex width={1} flexDirection={'column'} mt={2}>\n                    <Flex my={2} flexDirection={'row'} alignItems={'center'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Performance reports\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        New Protocols & Tokens\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Latest updates\n                      </Text>\n                    </Flex>\n                    <Form.Field width={1} label={''}>\n                      <Form.Input\n                        px={3}\n                        py={4}\n                        required\n                        width={1}\n                        border={0}\n                        fontSize={3}\n                        type={\"email\"}\n                        name={\"EMAIL\"}\n                        outline={'none'}\n                        borderColor={'cardBorder'}\n                        backgroundColor={'cardBg'}\n                        textAlign={['center','left']}\n                        className={header_styles.input}\n                        placeholder={'Enter your e-mail'}\n                        onChange={this.handleValidation}\n                      />\n                    </Form.Field>\n                    <Flex mb={3} flexDirection={'column'} alignItems={'center'} justifyContent={'center'}>\n                      <ButtonLoader\n                        buttonText={'SUBMIT'}\n                        isLoading={this.state.sendingForm}\n                        buttonProps={{className:header_styles.gradientButton,width:'100%',type:'submit'}}\n                      >\n                      </ButtonLoader>\n                      <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without e-mail</Link>\n                    </Flex>\n                  </Flex>\n                </Form>\n              </ModalCard.Body>\n            </ModalCard>\n          )\n        }\n      </Modal>\n    );\n  }\n}\n\nexport default WelcomeModal;\n","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\n\nclass MigrateModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'continue_without_migrate',\n        eventLabel: 'MigrateModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowMigrateModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowMigrateModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = () => {\n    const tokenMigrationRoute = this.functionsUtil.getGlobalConfig(['tools','tokenMigration','route']);\n    this.props.goToSection('tools/'+tokenMigrationRoute);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            iconHeight={'40px'}\n            title={'Migrate to Idle'}\n            icon={`images/migrate.svg`}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={3}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                You can migrate your funds from Compound, Aave, Fulcrum, Yearn and Idle V2 with just one transaction.\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                my={2}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.protocolsTokensBalances && Object.keys(this.props.protocolsTokensBalances).map( token => (\n                    <Flex\n                      mb={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      key={`token_${token}`}\n                      justifyContent={'space-between'}\n                    >\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'icon',\n                          props:{\n                            mr:2,\n                            height:'2.3em'\n                          }\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                      <SmartNumber\n                        mr={2}\n                        {...fieldProps}\n                        minPrecision={5}\n                        number={this.props.protocolsTokensBalances[token].balance} \n                      />\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'tokenName',\n                          props:fieldProps\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                    </Flex>\n                  ) )\n                }\n                <Text\n                  mb={0}\n                  fontSize={1}\n                  color={'red'}\n                  fontWeight={500}\n                  textAlign={'center'}\n                >\n                  Please be aware that by migrating your tokens from other protocols, your open positions might be liquidated if collateralized with migrated tokens.\n                </Text>\n              </Flex>\n              <Flex\n                mb={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <ButtonLoader\n                  buttonText={'MIGRATE'}\n                  handleClick={this.migrate}\n                  isLoading={this.state.sendingForm}\n                  buttonProps={{\n                    width:['100%','50%'],\n                    className:header_styles.gradientButton\n                  }}\n                >\n                </ButtonLoader>\n                {\n                /*\n                <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without migrate</Link>\n                */\n                }\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default MigrateModal;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass UpgradeModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'close_upgrade_modal',\n        eventLabel: 'UpgradeModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowUpgradeModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowUpgradeModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = async (token,strategy=null) => {\n\n    if (!strategy){\n      strategy = this.props.selectedStrategy;\n    }\n\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  convert = async (token) => {\n    const convertTool = this.functionsUtil.getGlobalConfig(['tools','tokenMigration']);\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n\n    if (!this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            icon={`images/migrate.svg`}\n            title={'Upgrade Available'}\n            iconHeight={['35px','40px']}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={[2,3]}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                Idle now supports yield farming and governance tokens distribution, migrate now your portfolio with just one click!\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n              >\n                <Flex\n                  fontSize={[2,3]}\n                  width={[0.5,0.28]}\n                  fontWeight={[4,5]}\n                  color={'copyColor'}\n                >\n                  {\n                    this.props.isMobile ? 'ASSET' : 'ASSET TO MIGRATE'\n                  }\n                </Flex>\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      BALANCE\n                    </Flex>\n                  )\n                }\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      OLD APY\n                    </Flex>\n                  )\n                }\n                <Flex\n                  fontSize={[2,3]}\n                  fontWeight={[4,5]}\n                  width={[0.25,0.19]}\n                  color={'copyColor'}\n                  justifyContent={'center'}\n                >\n                  {\n                    this.props.isMobile ? 'APY' : 'NEW APY'\n                  }\n                </Flex>\n                <Flex\n                  width={[0.25,0.15]}\n                >\n                  \n                </Flex>\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.tokensToMigrate && Object.keys(this.props.tokensToMigrate).map( tokenKey => {\n                    const token = this.props.tokensToMigrate[tokenKey].token;\n                    const strategy = this.props.tokensToMigrate[tokenKey].strategy;\n                    const tokenConfig = this.props.tokensToMigrate[tokenKey].tokenConfig;\n                    const balance = this.props.tokensToMigrate[tokenKey].oldContractBalanceFormatted;\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${tokenKey}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={[0.5,0.28]}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:['1.8em','2.3em']\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                        </Flex>\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <SmartNumber\n                                {...fieldProps}\n                                minPrecision={5}\n                                number={balance}\n                                flexProps={{\n                                  justifyContent:'center'\n                                }}\n                              />\n                            </Flex>\n                          )\n                        }\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <AssetField\n                                {...this.props}\n                                fieldInfo={{\n                                  name:'oldApy',\n                                  props:fieldProps\n                                }}\n                                token={token}\n                                tokenConfig={tokenConfig}\n                              />\n                            </Flex>\n                          )\n                        }\n                        <Flex\n                          width={[0.25,0.19]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={token}\n                            tokenConfig={tokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={[0.25,0.15]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.migrate(token,strategy) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.oldIdleTokensToMigrate && Object.keys(this.props.oldIdleTokensToMigrate).map( token => {\n                    const tokenConfig = this.props.oldIdleTokensToMigrate[token].tokenConfig;\n\n                    if (!tokenConfig){\n                      return null;\n                    }\n\n                    const balance = this.props.oldIdleTokensToMigrate[token].balance;\n                    let newTokenConfig = null;\n\n                    if (tokenConfig.availableStrategies && !this.props.availableTokens[tokenConfig.baseToken]){\n                      newTokenConfig = this.props.availableStrategies[tokenConfig.availableStrategies[0]][tokenConfig.baseToken];\n                    } else {\n                      newTokenConfig = this.props.availableTokens[tokenConfig.baseToken];\n                    }\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${token}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={0.28}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:'2.3em'\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <SmartNumber\n                            {...fieldProps}\n                            minPrecision={5}\n                            number={balance}\n                            flexProps={{\n                              justifyContent:'center'\n                            }}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'oldApy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.15}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.convert(token) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                my={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <RoundButton\n                  handleClick={this.closeModal}\n                  buttonProps={{\n                    fontSize:[2,3],\n                    width:['100%','40%'],\n                  }}\n                >\n                  MIGRATE LATER\n                </RoundButton>\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default UpgradeModal;","import React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport { Flex, Card, Icon, Text } from 'rimble-ui';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardMenu from '../DashboardMenu/DashboardMenu';\n\n// Import page components\nimport Stats from '../Stats/Stats';\nimport Utils from '../Utils/Utils';\nimport AssetPage from '../AssetPage/AssetPage';\nimport RoundButton from '../RoundButton/RoundButton';\nimport BetaModal from \"../utilities/components/BetaModal\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CurveStrategy from '../CurveStrategy/CurveStrategy';\nimport WelcomeModal from \"../utilities/components/WelcomeModal\";\nimport TooltipModal from \"../utilities/components/TooltipModal\";\nimport MigrateModal from \"../utilities/components/MigrateModal\";\nimport UpgradeModal from \"../utilities/components/UpgradeModal\";\nimport DashboardHeader from '../DashboardHeader/DashboardHeader';\n\nclass Dashboard extends Component {\n  state = {\n    menu:[],\n    baseRoute:null,\n    clickEvent:null,\n    activeModal:null,\n    currentRoute:null,\n    pageComponent:null,\n    currentSection:null,\n    selectedSection:null,\n    tokensToMigrate:null,\n    showResetButton:false,\n    selectedSubsection:null,\n    pageComponentProps:null,\n    oldIdleTokensToMigrate:null,\n    protocolsTokensBalances:null,\n  };\n\n  timeoutId = null;\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    window.functionsUtil = this.functionsUtil;\n  }\n\n  async loadMenu() {\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n\n    const menu = [];\n\n    const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n    Object.keys(strategies).filter( s => ( !strategies[s].comingSoon ) ).forEach(strategy => {\n      const strategyInfo = strategies[strategy];\n      menu.push({\n        submenu:[],\n        color:'#fff',\n        selected:false,\n        image:strategyInfo.icon,\n        label:strategyInfo.title,\n        bgColor:strategyInfo.color,\n        route:baseRoute+'/'+strategy,\n        visible:strategyInfo.visible,\n        component:strategyInfo.component,\n        imageInactive:strategyInfo.iconInactive,\n        imageInactiveDark:strategyInfo.iconInactiveDark\n      });\n    });\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n\n    // Add Curve\n    if (curveConfig.enabled){\n      const curveParams = Object.assign({\n        submenu:[],\n        selected:false,\n        component:CurveStrategy,\n      },curveConfig.params);\n\n      menu.push(curveParams);\n    }\n\n    // Add Stake\n    const stakeConfig = this.functionsUtil.getGlobalConfig(['tools','stake']);\n    if (stakeConfig.enabled){\n      menu.push(\n        {\n          submenu:[],\n          label:'Stake',\n          selected:false,\n          color:'dark-gray',\n          icon:stakeConfig.icon,\n          route:'/dashboard/stake',\n          component:Utils,\n          componentProps:{\n            showBreadCrumb:false,\n            toolProps:stakeConfig.props,\n            selectedSubsection:stakeConfig\n          },\n          bgColor:this.props.theme.colors.primary,\n        }\n      );\n    }\n\n    // Add tools\n    menu.push(\n      {\n        icon:'Build',\n        label:'Tools',\n        color:'dark-gray',\n        component:Utils,\n        selected:false,\n        route:'/dashboard/tools',\n        bgColor:this.props.theme.colors.primary,\n        submenu:Object.values(this.functionsUtil.getGlobalConfig(['tools'])).filter( u => (u.enabled) )\n      }\n    );\n\n    // Add Stats\n    menu.push(\n      {\n        icon:'Equalizer',\n        label:'Stats',\n        bgColor:'#21f36b',\n        color:'dark-gray',\n        component:Stats,\n        selected:false,\n        route:'/dashboard/stats',\n        submenu:[]\n      }\n    );\n\n    // Add Forum\n    menu.push(\n      {\n        submenu:[],\n        icon:'Forum',\n        mobile:false,\n        label:'Forum',\n        selected:false,\n        component:null,\n        color:'dark-gray',\n        bgColor:'#ff0000',\n        isExternalLink:true,\n        route:this.functionsUtil.getGlobalConfig(['forumURL'])\n      }\n    );\n\n    await this.setState({\n      menu\n    });\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  openTooltipModal = (modalTitle,modalContent) => {\n\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: modalTitle,\n      eventLabel: 'TooltipModal'\n    });\n\n    this.setState({\n      modalTitle,\n      modalContent\n    },() => {\n      this.setActiveModal('tooltip');\n    })\n  }\n\n  setActiveModal = (activeModal) => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadParams() {\n    const { match: { params } } = this.props;\n\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n    let currentRoute = baseRoute;\n\n    let pageComponent = null;\n    let selectedToken = null;\n    let currentSection = null;\n    let selectedStrategy = null;\n    let pageComponentProps = null;\n\n    // Set strategy\n    if (params.section){\n      currentSection = params.section;\n      const param1 = params.param1;\n      const param2 = params.param2;\n\n      const section_is_strategy = Object.keys(this.props.availableStrategies).includes(currentSection.toLowerCase());\n      const param1_is_strategy = param1 && Object.keys(this.props.availableStrategies).includes(param1.toLowerCase());\n\n      if (section_is_strategy || param1_is_strategy){\n\n        if (!section_is_strategy){\n          currentRoute += '/'+currentSection;\n        }\n\n        selectedStrategy = section_is_strategy ? currentSection : param1;\n        currentRoute += '/'+selectedStrategy;\n\n        // Set token\n        const param1_is_token = param1 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param1.toUpperCase());\n        const param2_is_token = param2 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param2.toUpperCase());\n        if (param1_is_token || param2_is_token){\n          selectedToken = param1_is_token ? param1.toUpperCase() : param2.toUpperCase();\n          currentRoute += '/'+selectedToken;\n\n          if (section_is_strategy){\n            pageComponent = AssetPage;\n          }\n        }\n      } else {\n        currentRoute += '/'+params.section;\n\n        if (params.param1 && params.param1.length){\n          currentRoute += '/'+params.param1;\n        }\n\n        // if (params.param2 && params.param2.length){\n        //   currentRoute += '/'+params.param2;\n        // }\n      }\n    }\n\n    const menu = this.state.menu;\n\n    let selectedSection = null;\n    let selectedSubsection = null;\n\n    menu.forEach(m => {\n      m.selected = false;\n      const sectionRoute = baseRoute+'/'+params.section;\n      if (currentRoute.toLowerCase() === m.route.toLowerCase() || ( !m.submenu.length && m.route.toLowerCase() === sectionRoute.toLowerCase() )){\n        m.selected = true;\n        if (pageComponent === null){\n          pageComponent = m.component;\n          pageComponentProps = m.componentProps;\n        }\n      } else if (m.submenu.length) {\n        m.submenu.forEach(subm => {\n          subm.selected = false;\n          const submRoute = m.route+'/'+subm.route;\n          if (submRoute.toLowerCase() === currentRoute.toLowerCase()){\n            m.selected = true;\n            subm.selected = true;\n\n            // Set component, if null use parent\n            if (pageComponent === null){\n              if (subm.component){\n                pageComponent = subm.component;\n                pageComponentProps = m.componentProps;\n              } else {\n                pageComponent = m.component;\n                pageComponentProps = m.componentProps;\n              }\n            }\n          }\n\n          // Set selected subsection\n          if (subm.selected){\n            selectedSubsection = subm;\n          }\n\n        });\n      }\n\n      // Set selected section\n      if (m.selected){\n        selectedSection = m;\n      }\n    });\n\n    // console.log('pageComponent',params,pageComponent);\n\n    // Exit if no strategy and token selected\n    if (!pageComponent){\n      return this.goToSection('/',false);\n    }\n\n    // console.log('loadParams',selectedStrategy,selectedToken);\n    await this.props.setStrategyToken(selectedStrategy,selectedToken);\n    \n    // Send GA pageview\n    this.functionsUtil.sendGoogleAnalyticsPageview(currentRoute);\n\n    await this.setState({\n      menu,\n      params,\n      baseRoute,\n      currentRoute,\n      pageComponent,\n      currentSection,\n      selectedSection,\n      pageComponentProps,\n      selectedSubsection\n    });\n  }\n\n  componentWillUnmount(){\n    if (this.timeoutId){\n      window.clearTimeout(this.timeoutId);\n    }\n  }\n\n  async componentWillMount() {\n\n    this.props.setCurrentSection('dashboard');\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n  }\n\n  async componentDidMount() {\n\n    this.timeoutId = window.setTimeout(() => {\n      if (!this.props.accountInizialized || !this.props.contractsInitialized){\n        this.setState({\n          showResetButton:true\n        });\n      }\n    },20000);\n\n    if (!this.props.web3){\n      return this.props.initWeb3();\n    } else if (!this.props.accountInizialized){\n      return this.props.initAccount();\n    } else if (!this.props.contractsInitialized){\n      return this.props.initializeContracts();\n    }\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n\n    const viewOnly = this.props.connectorName === 'custom';\n    if (!viewOnly){\n      this.checkModals();\n    }\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n\n    this.loadUtils();\n\n    const prevParams = prevProps.match.params;\n    const params = this.props.match.params;\n\n    if (JSON.stringify(prevParams) !== JSON.stringify(params)){\n      await this.setState({\n        pageComponent:null\n      }, () => {\n        this.loadParams();\n      });\n    }\n\n    const viewOnly = this.props.connectorName === 'custom';\n    const accountChanged = prevProps.account !== this.props.account;\n    const strategyChanged = this.props.selectedStrategy && prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const availableTokensChanged = JSON.stringify(prevProps.availableTokens) !== JSON.stringify(this.props.availableTokens);\n    const accountInizialized = this.props.accountInizialized && prevProps.accountInizialized !== this.props.accountInizialized;\n    const contractsInitialized = this.props.contractsInitialized && prevProps.contractsInitialized !== this.props.contractsInitialized;\n\n    if (!viewOnly && (accountChanged || accountInizialized || contractsInitialized || strategyChanged || availableTokensChanged)){\n      this.checkModals();\n    }\n  }\n\n  async checkModals(){\n\n    if (this.props.selectedToken || !this.props.accountInizialized || !this.props.contractsInitialized || !this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    await this.checkBetaApproval();\n    await this.checkTokensToMigrate();\n    await this.checkWelcomeModal();\n    await this.checkProtocolsTokensBalances();\n  }\n\n  async checkBetaApproval(){\n    const isOriginUrl = this.functionsUtil.checkUrlOrigin();\n    const isBetaApproved = this.functionsUtil.getStoredItem('betaApproved',false,false);\n\n    // Show Beta Warning modal\n    if (!isOriginUrl && !isBetaApproved){\n      const activeModal = 'beta';\n      if (activeModal !== this.state.activeModal){\n        await this.setState({\n          activeModal,\n        });\n\n        return activeModal;\n      }\n    }\n  }\n\n  async checkTokensToMigrate(){\n\n    const showUpgradeModal = this.functionsUtil.getStoredItem('dontShowUpgradeModal',false,null) !== null ? false : true;\n    if (this.props.selectedToken || !showUpgradeModal || !this.props.availableTokens || this.state.activeModal !== null){\n      return null;\n    }\n\n    const tokensToMigrate = await this.functionsUtil.getTokensToMigrate();\n    const oldIdleTokensToMigrate = await this.functionsUtil.getProtocolsTokensBalances('idle');\n\n    // console.log('tokensToMigrate',tokensToMigrate);\n    \n    if ((tokensToMigrate && Object.keys(tokensToMigrate).length>0) || (oldIdleTokensToMigrate && Object.keys(oldIdleTokensToMigrate).length>0)){\n      const activeModal = 'upgrade';\n      if (activeModal !== this.state.activeModal){\n        await this.setState({\n          activeModal,\n          tokensToMigrate,\n          oldIdleTokensToMigrate\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkWelcomeModal(){\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show welcome modal\n    if (this.props.account && this.state.activeModal === null){\n      let welcomeIsOpen = false;\n\n      const welcomeModalProps = this.functionsUtil.getGlobalConfig(['modals','welcome']);\n\n      if (welcomeModalProps.enabled && localStorage){\n\n        // Check the last login of the wallet\n        const currTime = new Date().getTime();\n        const walletAddress = this.props.account.toLowerCase();\n        let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : {};\n\n        // First login\n        if (!lastLogin[walletAddress]){\n          lastLogin[walletAddress] = {\n            'signedUp':false,\n            'lastTime':currTime\n          };\n          welcomeIsOpen = true;\n        // User didn't sign up\n        } else if (!lastLogin[walletAddress].signedUp) {\n          const lastTime = parseInt(lastLogin[walletAddress].lastTime);\n          const timeFromLastLogin = (currTime-lastTime)/1000;\n          welcomeIsOpen = timeFromLastLogin>=welcomeModalProps.frequency; // 1 day since last login\n        }\n\n        if (welcomeIsOpen){\n          lastLogin[walletAddress].lastTime = currTime;\n          this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n        }\n      }\n\n      const activeModal = welcomeIsOpen ? 'welcome' : this.state.activeModal;\n      if (this.state.activeModal !== activeModal){\n        await this.setState({\n          activeModal\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkProtocolsTokensBalances() {\n\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show migration modal if no other modals are opened\n    const migrateModalEnabled = this.functionsUtil.getGlobalConfig(['modals','migrate','enabled']);\n    const showMigrateModal = this.functionsUtil.getStoredItem('dontShowMigrateModal',false,null) !== null ? false : true;\n\n    if (this.state.activeModal === null && migrateModalEnabled && showMigrateModal && !this.state.protocolsTokensBalances){\n      const protocolsTokensBalances = await this.functionsUtil.getProtocolsTokensBalances();\n      const activeModal = protocolsTokensBalances && Object.keys(protocolsTokensBalances).length>0 ? 'migrate' : null;\n      const newState = {\n        activeModal,\n        protocolsTokensBalances\n      };\n      await this.setState(newState);\n      return activeModal;\n    }\n\n    return null;\n  }\n\n  goToSection(section,isDashboard=true){\n\n    // Remove dashboard route\n    if (isDashboard){\n      section = section.replace(this.state.baseRoute +'/','');\n    }\n\n    const newRoute = isDashboard ? this.state.baseRoute +'/' + section : section;\n    window.location.hash=newRoute;\n\n    // Send GA event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'goToSection',\n      eventLabel: newRoute\n    });\n\n    window.scrollTo(0, 0);\n  }\n\n  logout = async () => {\n    this.props.setConnector('Infura','Infura');\n    await this.props.initWeb3('Infura');\n  }\n\n  changeToken(selectedToken){\n    selectedToken = selectedToken.toUpperCase();\n    if (Object.keys(this.props.availableTokens).includes(selectedToken)){\n      const routeParts = [];\n\n      // Add section\n      if (this.state.currentSection.toLowerCase() !== this.props.selectedStrategy.toLowerCase()){\n        routeParts.push(this.state.currentSection);\n      }\n\n      // Add strategy\n      routeParts.push(this.props.selectedStrategy); \n\n      // Add token\n      routeParts.push(selectedToken);\n\n      this.goToSection(routeParts.join('/'));\n    }\n  }\n\n  propagateClickEvent(clickEvent){\n    this.setState({\n      clickEvent:clickEvent.target\n    });\n  }\n\n  render() {\n    const PageComponent = this.state.pageComponent ? this.state.pageComponent : null;\n    return (\n      <Flex\n        width={'100%'}\n        position={'fixed'}\n        flexDirection={'row'}\n        className={this.props.themeMode}\n        backgroundColor={['dashboardBg','white']}\n        /*onClick={ e => this.propagateClickEvent(e) }*/\n        height={[(window.innerHeight-61)+'px','100vh']}\n      >\n        <Flex\n          bottom={0}\n          zIndex={99999}\n          width={[1,1/6]}\n          flexDirection={'column'}\n          position={['fixed','relative']}\n        >\n          <Card\n            p={[0,3]}\n            border={0}\n            width={['100vw','auto']}\n            height={['auto','100vh']}\n            backgroundColor={'menuBg'}\n            borderColor={this.props.theme.colors.menuRightBorder}\n            borderRight={`1px solid ${this.props.theme.colors.menuRightBorder}`}\n            >\n            <DashboardMenu\n              {...this.props}\n              menu={this.state.menu}\n            />\n          </Card>\n        </Flex>\n        <Flex\n          py={3}\n          mb={0}\n          px={[3,5]}\n          width={[1,5/6]}\n          style={{\n            overflowY:'scroll',\n            overflowX:'hidden'\n          }}\n          height={['92vh','auto']}\n          flexDirection={'columns'}\n          backgroundColor={'dashboardBg'}\n        >\n          {\n            !this.props.accountInizialized || !this.props.contractsInitialized || !PageComponent ? (\n              <Flex\n                width={1}\n                minHeight={'50vg'}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                {\n                  !this.props.network.isCorrectNetwork ? (\n                    <DashboardCard\n                      cardProps={{\n                        p:3,\n                        mt:3,\n                        width:[1,0.35]\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Icon\n                          size={'2.3em'}\n                          name={'Warning'}\n                          color={'cellText'}\n                        />\n                        <Text\n                          mt={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          The <strong>{this.functionsUtil.capitalize(this.props.network.current.name)} Network</strong> is not supported, please switch to the correct network.\n                        </Text>\n                      </Flex>\n                    </DashboardCard>\n                  ) : !this.state.showResetButton ? (\n                    <FlexLoader\n                      textProps={{\n                        textSize:4,\n                        fontWeight:2\n                      }}\n                      loaderProps={{\n                        mb:3,\n                        size:'40px'\n                      }}\n                      flexProps={{\n                        my:3,\n                        flexDirection:'column'\n                      }}\n                      text={ !this.props.accountInizialized ? 'Loading account...' : ( !this.props.contractsInitialized ? 'Loading contracts...' : 'Loading assets...' )}\n                    />\n                  ) : (\n                    <DashboardCard\n                      cardProps={{\n                        p:3,\n                        mt:3,\n                        width:[1,0.35]\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Icon\n                          size={'2.3em'}\n                          name={'Warning'}\n                          color={'cellText'}\n                        />\n                        <Text\n                          mt={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          Idle can't connect to your wallet!<br />Make sure that your wallet is unlocked and try again.\n                        </Text>\n                        <RoundButton\n                          buttonProps={{\n                            mt:3,\n                            width:[1,1/2]\n                          }}\n                          handleClick={this.logout.bind(this)}\n                        >\n                          Logout\n                        </RoundButton>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n              </Flex>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardHeader\n                  clickEvent={this.state.clickEvent}\n                  goToSection={this.goToSection.bind(this)}\n                  {...this.props}\n                />\n                {\n                  PageComponent &&\n                    <PageComponent\n                      {...this.props}\n                      match={{ params:{} }}\n                      urlParams={this.state.params}\n                      changeToken={this.changeToken.bind(this)}\n                      goToSection={this.goToSection.bind(this)}\n                      selectedSection={this.state.selectedSection}\n                      selectedSubsection={this.state.selectedSubsection}\n                      openTooltipModal={this.openTooltipModal.bind(this)}\n                      {...this.state.pageComponentProps}\n                      />\n                }\n              </Flex>\n            )\n          }\n        </Flex>\n        <BetaModal\n          closeModal={this.resetModal}\n          isOpen={this.state.activeModal === 'beta'}\n        />\n        <UpgradeModal\n          {...this.props}\n          closeModal={this.resetModal}\n          goToSection={this.goToSection.bind(this)}\n          tokensToMigrate={this.state.tokensToMigrate}\n          isOpen={this.state.activeModal === 'upgrade'}\n          oldIdleTokensToMigrate={this.state.oldIdleTokensToMigrate}\n        />\n        <MigrateModal\n          {...this.props}\n          closeModal={this.resetModal}\n          goToSection={this.goToSection.bind(this)}\n          isOpen={this.state.activeModal === 'migrate'}\n          protocolsTokensBalances={this.state.protocolsTokensBalances}\n        />\n        <TooltipModal\n          closeModal={this.resetModal}\n          title={this.state.modalTitle}\n          content={this.state.modalContent}\n          isOpen={this.state.activeModal === 'tooltip'}\n        />\n        <WelcomeModal\n          closeModal={this.resetModal}\n          account={this.props.account}\n          simpleID={this.props.simpleID}\n          network={this.props.network.current}\n          tokenName={this.props.selectedToken}\n          initSimpleID={this.props.initSimpleID}\n          baseTokenName={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'welcome'}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default Dashboard;"],"sourceRoot":""}