{"version":3,"sources":["AssetsUnderManagement/AssetsUnderManagement.js","Stats/StatsChart.js","Rebalance/Rebalance.js","utilities/components/DateRangeModal.js","Stats/Stats.js","Utils/Utils.js","FundsOverview/FundsOverview.js","CurveRedeem/CurveRedeem.js","DepositRedeem/DepositRedeem.js","EstimatedEarnings/EstimatedEarnings.js","AssetPage/AssetPage.js","utilities/components/BetaModal.js","CurveDeposit/CurveDeposit.js","PortfolioEquityCurve/PortfolioEquityCurve.js","FundsOverviewCurve/FundsOverviewCurve.js","CurveStrategy/CurveStrategy.js","utilities/components/PolygonModal.js","utilities/components/WelcomeModal.js","utilities/components/MigrateModal.js","utilities/components/UpgradeModal.js","utilities/components/RiskAdjustedModal.js","Dashboard/Dashboard.js"],"names":["AssetsUnderManagement","state","totalAUM","totalAUMEndOfYear","functionsUtil","this","setProps","props","FunctionsUtil","loadUtils","loadTotalAUM","prevProps","prevState","contractsInitialized","availableStrategies","JSON","stringify","allNetworks","getAggregatedStats","avgAPY","plus","times","div","setState","_this2","react__WEBPACK_IMPORTED_MODULE_9___default","a","createElement","rimble_ui__WEBPACK_IMPORTED_MODULE_10__","width","react_countup__WEBPACK_IMPORTED_MODULE_8___default","delay","decimals","decimal","separator","useEasing","duration","start","parseFloat","end","formattingFn","n","formatMoney","_ref2","countUpRef","style","counterStyle","display","color","whiteSpace","fontFamily","theme","fonts","counter","fontWeight","fontWeights","textAlign","isMobile","fontSize","fontSizes","ref","subtitle","_Title_Title__WEBPACK_IMPORTED_MODULE_7__","Object","assign","subtitleProps","span","alignItems","justifyContent","loaderAlign","size","Component","StatsChart","chartProps","chartType","chartData","chartWidth","parseAum","value","parseInt","toFixed","_this","selectedToken","loadApiData","_callee3","maxGridLines","apiResults","apiResults_unfiltered","totalItems","protocols","versionInfo","keys","tempData","gridYStep","itemIndex","daysCount","gridYValues","maxChartValue","axisBottomIndex","daysFrequency","idleChartData","firstIdleBlock","axisBottomMaxValues","divergingData","startTimestamp","endTimestamp","timestamp","date","lastRow","maxRange","i","_i","dates","_i2","_i3","chartValues","prevValue","_i4","prevApr","prevData","avgApy","startBalance","currentBalance","aaveProtocolInfo","_i5","firstTokenPrice","_i6","regenerator_default","wrap","_context3","prev","next","tokenConfig","chartMode","abrupt","length","globalConfigs","stats","versions","idleVersion","Line","t0","moment","_d","getTime","format","deposits","redeems","forEach","row","idleTokens","fixTokenDecimals","idleSupply","idleTokensPrev","eq","diff","minus","gte","Math","max","abs","values","filter","v","sort","b","Bar","push","ceil","indexBy","enableLabel","minValue","maxValue","label","d","axisBottom","tickSize","legend","tickPadding","orient","legendOffset","tickValues","legendPosition","axisLeft","axisRight","tickRotation","abbreviateNumber","markers","axis","lineStyle","strokeOpacity","textStyle","fill","colors","transactions","action","deposit","legendOrientation","legendOffsetX","stroke","strokeDasharray","redeem","padding","labelTextColor","labelSkipWidth","labelSkipHeight","pointSize","useMesh","animate","pointLabel","curve","enableArea","enableSlices","enableGridX","enableGridY","pointBorderWidth","pointLabelYOffset","legends","dataFrom","itemWidth","itemHeight","translateX","translateY","symbolSize","itemsSpacing","direction","anchor","symbolShape","itemTextColor","effects","on","themeMode","ticks","text","sansSerif","grid","line","lineChartStroke","textTransform","tooltip","container","boxShadow","background","pointColor","from","modifiers","margin","top","right","bottom","left","data","xFormatted","strToMoment","point","id","depositFormatted","redeemFormatted","react_default","CustomTooltip","CustomTooltipRow","tokens","hsl","join","map","idlePrice","aum","x","y","toString","p","j","protocolsData","protocolAllocation","protocolAddr","toLowerCase","address","z","BNify","rate","allocation","foundItem","item","pos","indexOf","allocations","name","undefined","xScale","type","xFormat","yFormat","yScale","stacked","sliceTooltip","slideData","slice","points","serieId","serieColor","yFormatted","protocolName","protocolInfo","protocolColor","protocolAllocationFormatted","protocolAllocationPerc","key","concat","protocolData","protocolPaused","foundProtocol","find","tableCell","_ref3","DashboardCard","cardProps","py","px","borderCollapse","height","totalAllocation","reduce","accumulator","allocationPerc","_ref4","_ref5","additionalProtocols","additionalProtocol","protocol","enabledTokens","includes","enabled","unshift","objectSpread","rateField","protocolRate","acc","field","lt","aaveAdditionalAPR","gt","idle","idleRate","isBefore","protocolEarning","defiScore","isNaN","idleScore","apy","isSameOrBefore","aaveProtocolData","pData","apr","days","earnings","earning","daysSinceBeginning","blocknumber","itemPos","floor","tokensProps","tokenProps","isAfter","Date","now","chartRow","baseProfit","firstProtocolData","firstProtocolBlock","rowData","idlePerformance","d1","protocolApy","tokenPrice","asyncForEach","_ref6","asyncToGenerator","mark","_callee2","lastRowData","lastTokenPrice","_context2","_ref7","_callee","tokenExchangeRate","tokenPriceFixed","lastYDiff","_context","price","stop","_x2","apply","arguments","_x","showAdvanced","showAdvancedChanged","apiResultsChanged","tokenChanged","componentDidMount","GenericChart","showLoader","parentId","parentIdHeight","Rebalance","loading","processing","rebalance","txHash","shouldRebalance","componentUnmounted","checkRebalance","setStateSafe","sent","e","callback","callback_receipt","preventDefault","tx","error","eventData","eventLabel","status","eventCategory","eventAction","getTransactionError","sendGoogleAnalyticsEvent","window","toastProvider","addMessage","secondaryMessage","colorTheme","actionHref","actionText","variant","transactionHash","contractMethodSendWrapper","token","accountChanged","account","newState","index_es","minHeight","flexDirection","FlexLoader","flexProps","loaderProps","textProps","ml","TxProgressBar","waitText","endMessage","hash","mt","mb","RoundButton","buttonProps","disabled","handleClick","DateRangeModal","quickSelection","ranges","startDate","endDate","options","quickSelections","componentDidUpdate","selection","target","quickSelectionParams","clone","subtract","closeModal","handleSelect","startTimestampObj","endTimestampObj","_this3","isOpen","ModalCard","closeFunc","Header","title","Body","backgroundColor","cardBg","required","onChange","handleQuickSelect","bind","dist","minDate","maxDate","className","Footer","my","mx","borderRadius","mainColor","onClick","React","Stats","delta","carouselMax","rebalances","buttonGroups","carouselIndex","statsVersions","minStartTime","govTokensPool","unlentBalance","carouselOffsetLeft","showRefreshIdleSpeed","dateRangeModalOpened","day","week","weeks","month","ytd","setDateRange","isSameOrAfter","isSame","add","maxEndDate","toggleAdvancedCharts","setDateRangeModal","filterTokenData","r","setIdleVersion","isRisk","firstResult","lastResult","firstIdlePrice","lastIdlePrice","compoundInfo","firstCompoundData","lastCompoundData","compoundWithCOMPInfo","compoundAvgApr","firstCompoundPrice","lastCompoundPrice","compoundApr","availableTokens","selectedStrategy","getTokenApiData","pop","convertTokenBalance","sum","compoundWithCOMP","compoundData","compoundRate","index","prevRow","prevTotalAllocation","hasRebalanced","prevP","prevAllocation","getGovTokenPool","getUnlentBalance","selectToken","strategy","setStrategyToken","changeToken","handleCarousel","$element","jQuery","position","loadParams","latestVersion","version","enabledStrategies","strategiesParams","versionInfoExtra","param","params","match","currentNetworkAvailableTokens","customToken","toUpperCase","getLatestAvailableVersion","getVersionInfo","newEndTimestampObj","newStartTimestampObj","web3","initWeb3","loadCarousel","strategyChanged","dateChanged","versionChanged","networkId","getRequiredNetworkId","idleTokenAvailableNetworks","getGlobalConfig","idleTokenEnabled","refreshIdleSpeedConfig","refreshIdleSpeedEnabled","availableNetworks","apyLong","textSize","statsTokens","versionsOptions","performanceTooltip","versionDefaultValue","Breadcrumb","showPathMobile","goToSection","path","GenericSelector","innerProps","defaultValue","AssetSelector","isInteractive","pr","StatsCard","labelTooltip","SmartNumber","precision","lineHeight","unitProps","number","unit","VariationNumber","iconPos","iconSize","description","Stats_StatsChart","contracts","pb","pt","AllocationChart","src_Rebalance_Rebalance","pl","h4","RoundIconButton","mr","iconName","transition","utilities_components_DateRangeModal","strategies","statsProtocols","strategyInfo","availableProtocolsKeys","availableProtocols","Title","titlePostfix","AssetsList","cols","fields","mobile","parentProps","overflow","desc","showTooltip","rgb","hoverColor","isActive","ExecuteTransaction","Button","componentProps","contractName","methodName","completed","Utils","SubComponent","selectedSubsection","subComponent","viewOnly","connectorName","showBreadCrumb","selectedSection","route","dangerouslySetInnerHTML","__html","directProps","toolProps","flexWrap","IconBox","maxWidth","icon","submenu","tool","toolIndex","flex","image","src","FundsOverview","aggregatedValues","govTokensTotalApr","govTokensUserBalance","govTokensDistribution","govTokensTotalBalance","govTokensTotalAprTooltip","idleTokenUserDistribution","govTokensDistributionTooltip","govTokensTotalBalanceTooltip","idleGovToken","getIdleGovToken","govTokenAvailableTokens","Promise","all","getUserDistribution","getGovTokensUserBalances","loadAssetField","depositTimestamp","getAvgAPYStats","lte","totBalance","govTokenBalance","govToken","balance","children","AssetField","fieldInfo","placement","message","PortfolioEquity","chartHeight","chartToken","frequencySeconds","getFrequencySeconds","component","Heading","h3","maxPrecision","govTokenIndex","tokenName","distributionFrequency","CurveRedeem","inputValue","maxSlippage","unevenAmounts","buttonDisabled","showMaxSlippage","redeemUnderlying","curveTokenConfig","curvePoolContract","curveSwapContract","curveTokenBalance","curveTokensAmounts","fastBalanceSelector","redeemUnevenAmounts","curveRedeemableIdleTokens","toggleUnevenAmounts","checkButtonDisabled","amount","changeInputValue","setFastBalanceSelector","setMaxSlippage","initToken","max_slippage","normalizedAmount","normalizeTokenAmount","withdrawSlippage","curveIdleTokensAmounts","getCurveTokensAmounts","getCurveIdleTokensAmounts","getCurveSlippage","getCurveTokenPrice","curveTokenPrice","redeemableBalance","redeemUnevenAmountsChanged","setInputValue","inputChanged","maxSlippageChanged","tokenConfigChanged","calculateSlippage","loadSelectedTokenConfig","selectedPercentage","curveConfig","getCurvePoolContract","getCurveSwapContract","getCurveTokenBalance","getCurveRedeemableIdleTokens","getCurveAvailableTokens","callbackRedeem","txSucceeded","eventValue","callbackReceiptRedeem","_amount","min_amounts","console","log","coin_index","migrationParams","coinIndex","min_amount","showSlippage","curveTokenName","cancelTransaction","checked","showBalance","selectDestinationToken","slippage","FastBalanceSelector","percentage","onMouseDown","failed","textOverflow","min","placeholder","border","divider","DepositRedeem","txError","tokenAPY","curveAPY","canRedeem","canDeposit","directMint","activeModal","tokenGovTokens","showBuyFlow","maxUnlentPerc","tokenApproved","skipMigration","redeemSkipGov","showRedeemFlow","contractPaused","canRedeemCurve","erc20ForwarderTx","signedParameters","minAmountForMint","redeemGovTokens","canDepositCurve","redeemSkipGovTokens","actionProxyContract","migrationEnabled","componentMounted","agreeSkipGovTokens","redeemCurveEnabled","depositCurveBalance","depositCurveEnabled","showAdvancedOptions","skipGovTokensGasSave","depositCurveSlippage","erc20ForwarderContract","erc20ForwarderEnabled","showETHWrapperEnabled","skipGovTokensGasSaveUSD","metaTransactionsEnabled","skippedGovTokensBalance","minAmountForMintReached","loadingErc20ForwarderTx","setShowRedeemFlow","setShowBuyFlow","toggleShowAdvancedOptions","toggleSkipMigration","toggleRedeemCurve","toggleDepositCurve","toggleShowETHWrapper","toggleAgreeSkipGovTokens","toggleSkipMint","toggleRedeemGovTokens","toggleRedeemSkipGov","getSkippedGovTokensFlags","govTokensIndexes","govTokensFlags","getGovTokensIndexes","calculateSkippedGovTokens","DAITokenConfig","_skipGovTokenRedeem","WETHTokenConfig","wethPrice","redeemGasUsage","skipGovRedeemGasUsage","govTokenConfig","govTokenPrice","skippedAmount","getUniswapConversionRate","govTokensUserBalances","estimateMethodGasUsage","idleTokenBalance","slicedToArray","setRedeemSkipGovTokens","splice","toggleErc20ForwarderEnabled","toggleMetaTransactionsEnabled","resetModal","setActiveModal","checkUseProxyContract","proxyContract","depositErc20ForwarderEnabled","depositMetaTransactionsEnabled","biconomy","approveContract","_callee4","callbackApprove","callbackReceiptApprove","curveDepositContract","_context4","enableERC20","checkTokenApproved","_callee5","_context5","approveToken","_callee6","_context6","approve","loadTokenInfo","_callee7","curveTokenEnabled","_ref10","_ref11","_context7","checkContractPaused","getCurveDepositContract","checkMigration","tokenBalance","getTokenGovTokens","boost","checkAction","loadAPY","_callee8","_context8","defineProperty","executeAction","_callee11","contractSendResult","callbackDeposit","callbackReceiptDeposit","curvePoolContractInfo","tokensToDeposit","amounts","minMintAmount","depositParams","_tokensToDeposit","_depositParams","mintProxyContractInfo","mintProxyContract","_mintProxyContract$me","functionCall","functionSignature","methodAbi","useNonce","_referral","txData","idleTokenToRedeem","idleTokenPriceWithFee","_callbackRedeem","_callbackReceiptRedeem","redeemMethod","redeemParams","_context11","getFastBalanceSelector","localStorage","setLocalStorage","lendingProcessing","lendAmount","genericError","getCurveAmounts","getCurveTokenAmount","integerValue","contract","methods","function","toConsumableArray","encodeABI","sendBiconomyTxWithPersonalSign","_jsonInterface","f","inputs","_callee10","metaInfo","permitOptions","erc20ForwarderBaseContract","permitValue","permitConfig","setValue","expiry","nonce","s","_context10","signPermit","t","allowed","holder","spender","permitData","permitType","asyncTimeout","sendBiconomyTxWithErc20Forwarder","request","_callee9","_erc20ForwarderContra","_functionCall","_functionSignature","gasLimit","_context9","estimateGas","buildBiconomyErc20ForwarderTx","getReferralAddress","getIdleTokenPriceWithFee","_callee12","_context12","setAction","loadProxyContracts","actions","_ref17","_callee15","erc20ForwarderContractInfo","hasProxyContract","_context15","initContract","abi","approved","_x5","getTokenAprs","tokenAprs","getCurveAPY","getQueryStringParameterByName","checkAddress","erc20ForwarderEnabledChanged","tokenBalanceChanged","actionChanged","fastBalanceSelectorChanged","redeemSkipGovChanged","redeemGovTokensChanged","agreeSkipGovTokensChanged","redeemSkipGovTokensChanged","depositCurveChanged","calculateCurveSlippage","showPoolPerc","convertedAmount","genericContractCall","depositPerc","maxUnlentPercFormatted","currentNetwork","getCurrentNetwork","isDepositDisabled","depositDisabledMessage","disabledMessageRedeemKey","disabledMessageDepositKey","govTokensEnabled","govTokensDisabled","skipMintForDepositEnabled","skipMintForDeposit","redeemGovTokenEnabled","redeemSkipGovConfig","redeemSkipGovEnabled","disabledTokens","govTokensBalance","redeemSkipGovNoTokens","showAdvancedRedeemOptions","depositErc20ForwarderEnabledTokens","metaTransactionsAvailable","useMetaTx","erc20ForwarderClient","totalBalance","migrateText","migration","depositCurve","showDepositCurve","showRedeemCurve","showCurveSlippage","showAdvancedDepositOptions","batchDepositInfo","batchDepositEnabled","batchDepositDepositEnabled","depositEnabled","showBatchDeposit","isMigrationTool","ethWrapperInfo","ETHWrapperComponent","showETHWrapper","polygonBridgeInfo","polygonNetworkId","canPerformAction","showPolygonBridgeEnabled","showActionFlow","provider","showPolygonBridge","showPolygonBridgeBanner","buyToken","accountBalance","getBaseToken","showReferral","Migrate","migrateTextBefore","TransactionField","transaction","isDisabled","iconProps","openTooltipModal","isRainbow","cursor","m","CardIconButton","imageProps","getWalletProvider","capitalize","primary","href","fullWidth","cost","align","tokenFeesPercentage","borderColor","minWidth","ConnectBox","src_CurveRedeem_CurveRedeem","BuyModal","showInline","availableMethods","ShareModal","confettiEnabled","tweet","EstimatedEarnings","maxInputValue","loadChart","getTokenApy","earningsYear","tokenApy","amountMonth","amount3Months","amount6Months","amountYear","perc","monthColor","month3","month3Color","month6","month6Color","year","yearColor","labelTextColorModifiers","gridYValue","_ref","labels","showAPYDisclaimer","verticalAlign","zIndex","AssetPage","tokenFees","idleTokenPrice","userHasFunds","availableGovTokens","getTokenFees","getIdleTokenPrice","getTokenBalance","getUserTokenFees","getGovTokensUserTotalBalance","loadTokensInfo","selectedTokenChanged","availableTokensChanged","transactionsChanged","nexusMutualConfig","Fragment","src_DepositRedeem_DepositRedeem","ActiveCoverages","titleProps","src_FundsOverview_FundsOverview","src_EstimatedEarnings_EstimatedEarnings","TransactionsList","BetaModal","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","iconHeight","CurveDeposit","depositSlippage","migrationContract","curveTokensBalance","migrationSucceeded","migrationContractApproved","checkMigrationContractApproved","getMigrationParams","approveCallback","migrationCallback","idleTokenBalanceChanged","toMigrate","n_coins","underlyingBalanceToDeposit","normalizeIdleTokenBalance","hasCurveTokens","PortfolioEquityCurve","chartwidth","loadChartData","quickDateSelectionChanged","quickDateSelection","getCurveTxs","curveTxs","tokensBalance","processedTxs","firstTxTimestamp","timeStamp","curveTokens","currentDate","prevBalances","prevTimestamp","minChartValue","aggregatedBalancesKeys","tokensBalancesPerDate","aggregatedBalance","currTimestamp","tokensData","foundBalances","tokensBalances","momentDate","filteredTokenData","filteredBalances","lastFilteredTx","lastTokenData","lastTx","lastTxBalance","formattedDate","aggregatedBalanceParsed","aggregatedBalances","balances","yFormatDecimals","areaOpacity","areaBaselineValue","ChartCustomTooltip","ChartCustomTooltipRow","tokenInfo","hex","formattedBalance","FundsOverviewCurve","compAPR","getCurveAvgBuyPrice","getCurveAvgSlippage","src_PortfolioEquityCurve_PortfolioEquityCurve","redeemBalance","depositBalance","curveZapContract","curveAvailableTokens","changeFromToken","setSelectedToken","baseToken","getSelectedToken","urlParams","param1","getCurveZapContract","updateAssetSelector","curveTokensToRedeem","src_CurveDeposit_CurveDeposit","src_FundsOverviewCurve_FundsOverviewCurve","enabledActions","PolygonModal","ExtLink","getEtherscanAddressUrl","WelcomeModal","email","subscribed","sendingForm","sendUserInfo","sendEmail","walletProvider","userInfo","simpleIDPassUserInfo","analytics","google","events","setTimeout","err","handleSubmit","assertThisInitialized","handleValidation","axios","post","newsletterSubscription","endpoint","then","catch","walletAddress","lastLogin","getItem","parse","signedUp","parentNode","classList","onSubmit","green","Field","Input","outline","header_styles","input","ButtonLoader","buttonText","isLoading","gradientButton","MigrateModal","dontShowAgain","toggleDontShowAgain","removeStoredItem","migrate","tokenMigrationRoute","fieldProps","protocolsTokensBalances","minPrecision","UpgradeModal","_args3","convert","convertTool","tokensToMigrate","tokenKey","oldContractBalanceFormatted","oldIdleTokensToMigrate","newTokenConfig","RiskAdjustedModal","getAppUrl","Dashboard","menu","baseRoute","clickEvent","menuOpened","currentRoute","pageComponent","currentSection","showResetButton","pageComponentProps","timeoutId","modalTitle","modalContent","logout","setConnector","extraicons","getRequiredNetwork","stakePolygonConfig","selected","imageDark","iconDark","bgColor","imageInactive","iconInactive","imageInactiveDark","iconInactiveDark","comingSoon","enabledEnvs","currentEnv","imageInfo","visible","curveParams","CurveStrategy","stakeConfig","statsInfo","isExternalLink","networkInitialized","section","param2","section_is_strategy","param1_is_strategy","param1_is_token","param2_is_token","sectionRoute","subm","sendGoogleAnalyticsPageview","clearTimeout","setCurrentSection","loadMenu","accountInizialized","initAccount","initializeContracts","checkModals","prevParams","_this4","requiredNetworkChanged","network","networkChanged","checkRiskAdjusted","checkPolygonModal","checkBetaApproval","checkTokensToMigrate","checkWelcomeModal","checkProtocolsTokensBalances","isPolygon","isPolygonApproved","getStoredItem","isOriginUrl","checkUrlOrigin","isBetaApproved","showUpgradeModal","getTokensToMigrate","getProtocolsTokensBalances","welcomeIsOpen","welcomeModalProps","currTime","lastTime","frequency","migrateModalConfig","migrateModalEnabled","showMigrateModal","isDashboard","replace","newRoute","location","scrollTo","routeParts","setMenu","dir","_this5","PageComponent","current","networkCorrect","isCorrectNetwork","networkSupported","isSupportedNetwork","Swipeable","swipeCallback","menuRightBorder","borderRight","DashboardMenu","closeMenu","overflowY","overflowX","DashboardHeader","toggleMenu","addEthereumChain","components_PolygonModal","components_BetaModal","components_RiskAdjustedModal","components_UpgradeModal","components_MigrateModal","TooltipModal","content","components_WelcomeModal","simpleID","initSimpleID","baseTokenName"],"mappings":"mNAMMA,6MAEJC,MAAQ,CACNC,SAAS,KACTC,kBAAkB,QAIpBC,cAAgB,gFAGVC,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,4JAK9CF,KAAKI,YACLJ,KAAKK,oMAGkBC,EAAUC,yEACjCP,KAAKI,YACCI,EAAuBF,EAAUE,uBAAyBR,KAAKE,MAAMM,uBACvCF,EAAUG,qBAAuBC,KAAKC,UAAUL,EAAUG,uBAAyBC,KAAKC,UAAUX,KAAKE,MAAMO,sBAC/GD,IAChCR,KAAKK,oRAMDO,EAAcZ,KAAKE,MAAMU,cAAe,EAEzCZ,KAAKE,MAAMO,qBAAwBT,KAAKE,MAAMM,wBAAyBI,IAAeZ,KAAKJ,MAAMC,oDAC7F,0BAMCG,KAAKD,cAAcc,oBAAmB,EAAKD,mBAFnDE,WACAjB,aAGIC,EAAoBD,EAASkB,KAAKlB,EAASmB,MAAMF,EAAOG,IAAI,OAElEjB,KAAKkB,SAAS,CACZrB,WACAC,0JAIK,IAAAqB,EAAAnB,KACP,OAAOA,KAAKJ,MAAMC,SAChBuB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,MAAO,GAEPJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CACEK,MAAO,EACPC,SAAU,EACVC,QAAS,IACTC,UAAW,GACXC,WAAW,EACXC,SAAU,QACVC,MAAOC,WAAWjC,KAAKJ,MAAMC,UAC7BqC,IAAKD,WAAWjC,KAAKJ,MAAME,mBAC3BqC,aAAe,SAAAC,GAAC,MAAI,KAAKjB,EAAKpB,cAAcsC,YAAYD,EAAE,KAEzD,SAAAE,GAAA,IAAGC,EAAHD,EAAGC,WAAHD,EAAeN,MAAf,OACCZ,EAAAC,EAAAC,cAAA,QACEkB,MAAQrB,EAAKjB,MAAMuC,aAAetB,EAAKjB,MAAMuC,aAAe,CAC1DC,QAAQ,QACRC,MAAM,YACNC,WAAW,SACXC,WAAW1B,EAAKjB,MAAM4C,MAAMC,MAAMC,QAClCC,WAAW9B,EAAKjB,MAAM4C,MAAMI,YAAY,GACxCC,UAAWhC,EAAKjB,MAAMkD,SAAW,SAAW,QAC5CC,SAAUlC,EAAKjB,MAAMkD,SAAW,QAAUjC,EAAKjB,MAAM4C,MAAMQ,UAAU,IAEvEC,IAAKhB,OAKuB,qBAAxBvC,KAAKE,MAAMsD,UAA4BxD,KAAKE,MAAMsD,WACxDpC,EAAAC,EAAAC,cAACmC,EAAA,EAADC,OAAAC,OAAA,CACEV,WAAY,EACZI,SAAU,CAAC,EAAE,GACbV,MAAO,YACPQ,UAAW,CAAC,SAAS,UACjBnD,KAAKE,MAAM0D,eAGb5D,KAAKE,MAAMsD,SAAWxD,KAAKE,MAAMsD,SAC/BpC,EAAAC,EAAAC,cAACC,EAAA,EAAKsC,KAAN,CAAWZ,WAAY,UAAWN,MAAO,UAAWU,SAAU,WAA9D,6BAQZjC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEuC,WAAY,SACZC,eAAgB/D,KAAKE,MAAM8D,aAAe,UAE1C5C,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACE0C,KAAM,iBA5GoBC,aAmHrBvE,yRCo5DAwE,6MAjgEbvE,MAAQ,CACNwE,WAAW,GACXC,UAAU,KACVC,UAAU,KACVC,WAAW,QAuBbxE,cAAgB,OAShByE,SAAW,SAAAC,GACT,OAAQC,SAASD,IAAQ,IAAOxC,WAAWwC,EAAM,KAAME,QAAQ,GAAG,IAAM1C,WAAWwC,IAAS,IAAIG,EAAK1E,MAAM2E,iBAG7GC,iCAAc,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAApB,EAAAF,EAAAC,EAAAsB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAAC,GAAAC,GAAAC,GAAA,OAAAC,EAAArG,EAAAsG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAEPlD,EAAK1E,MAAM6H,aAAgBnD,EAAK1E,MAAM2E,eAAkBD,EAAK1E,MAAM8H,WAAcpD,EAAK1E,MAAM+E,WAFrF,CAAA2C,EAAAE,KAAA,eAAAF,EAAAK,OAAA,UAGH,GAHG,OAMNjD,EAAe,EACfC,EAAaL,EAAK1E,MAAM+E,WACxBC,EAAwBN,EAAK1E,MAAMgF,sBACnCC,EAAaF,EAAWiD,OACxB9C,EAAY1B,OAAOC,OAAO,GAAGiB,EAAK1E,MAAM6H,YAAY3C,WAGpDC,EAAc8C,IAAcC,MAAMC,SAASzD,EAAK1E,MAAMoI,aAExDhD,EAAO,GACPC,EAAW,GACXC,EAAY,EACZC,EAAY,EACZC,EAAY,EACZpB,EAAY,GACZF,EAAa,GACbC,EAAYkE,IACZ5C,EAAc,GACdC,EAAgB,EAChBC,EAAkB,EAClBC,EAAgB,KAChBC,EAAgB,KAChBC,EAAiB,KACjBC,EAAsB,GA7Bd2B,EAAAY,GA+BJ5D,EAAK1E,MAAM8H,UA/BPJ,EAAAE,KAgCL,QAhCKF,EAAAY,GAAA,GAmVL,QAnVKZ,EAAAY,GAAA,GA2kBL,QA3kBKZ,EAAAY,GAAA,GAyvBL,aAzvBKZ,EAAAY,GAAA,GAg1BL,QAh1BKZ,EAAAY,GAAA,GA2lCL,UA3lCKZ,EAAAY,GAAA,GA0xCL,aA1xCKZ,EAAAY,GAAA,IAsoDL,UAtoDKZ,EAAAY,GAAA,sBAsCR,IALItC,EAAgB,GAEdC,EAAiBzB,SAASQ,EAAsB,GAAGmB,WACnDD,EAAe1B,SAAS+D,MAASC,GAAGC,UAAU,KAE3CtC,EAAUF,EAAeE,GAAWD,EAAaC,GAAW,MAC7DC,EAAOmC,IAAiB,IAAVpC,GAAgBuC,OAAO,cACtC1C,EAAcI,KACjBJ,EAAcI,GAAQ,CACpBA,OACAD,YACAwC,SAAU,EACVC,QAAS,IAsDf,IAjDIvC,EAAU,KACdrB,EAAsB6D,QAAQ,SAAAC,GAC5B,IAAM1C,EAAOmC,IAAqB,IAAdO,EAAI3C,WAAgBuC,OAAO,cACzCK,EAAarE,EAAK7E,cAAcmJ,iBAAiBF,EAAIG,WAAW,IAWtE,GATKjD,EAAcI,KACjBJ,EAAcI,GAAQ,CACpBA,OACAD,UAAU2C,EAAI3C,UACdwC,SAAU,EACVC,QAAS,IAITvC,EAAQ,CACV,IAAM6C,EAAiBxE,EAAK7E,cAAcmJ,iBAAiB3C,EAAQ4C,WAAW,IAE9E,IADwBF,EAAWI,GAAGD,GACnB,CACjB,IAAME,EAAOL,EAAWM,MAAMH,GAE1BE,EAAKE,IAAI,IACXtD,EAAcI,GAAMuC,UAAU5G,WAAWqH,GACzC1D,EAAgB6D,KAAKC,IAAI9D,EAAcM,EAAcI,GAAMuC,YAE3D3C,EAAcI,GAAMwC,SAAS7G,WAAWqH,GACxC1D,EAAgB6D,KAAKC,IAAI9D,EAAc6D,KAAKE,IAAIzD,EAAcI,GAAMuC,kBAKxE3C,EAAcI,GAAMuC,UAAU5G,WAAWgH,GAG3C1C,EAAUyC,IAGZ1E,EAAYZ,OAAOkG,OAAO1D,GAAe2D,OAAO,SAAAC,GAC9C,QAASlF,EAAK1E,MAAMiG,gBAAkB2D,EAAEzD,WAAWzB,EAAK1E,MAAMiG,mBAAqBvB,EAAK1E,MAAMkG,cAAgB0D,EAAEzD,WAAWzB,EAAK1E,MAAMkG,gBACrI2D,KAAK,SAAC1I,EAAE2I,GAAH,OAAU3I,EAAEgF,UAAY2D,EAAE3D,WAAa,EAAI,IAE/CG,EAAW,EACflC,EAAUyE,QAAQ,SAAAe,GAChBtD,EAAWiD,KAAKC,IAAIlD,EAASiD,KAAKE,IAAIG,EAAEjB,UAAUY,KAAKE,IAAIG,EAAEhB,YAG/DzE,EAAY4F,IAEZzE,EAAYvD,WAAW2D,EAAcZ,GACrCW,EAAc,CAAC,GACNc,EAAE,EAAEA,GAAG,EAAEA,IAChBd,EAAYuE,KAAKzD,EAAEjB,GApGb,OAuGRK,EAAkB,EAClBI,EAAsB,EACtBP,EAAY+C,IAAOnE,EAAUA,EAAU4D,OAAO,GAAG5B,KAAK,cAAcgD,KAAKb,IAAOnE,EAAU,GAAGgC,KAAK,cAAc,QAChHR,EAAgB2D,KAAKC,IAAI,EAAED,KAAKU,KAAKzE,EAAUO,IAE/C7B,EAAa,CACXgG,QAAS,OACTC,aAAa,EACbC,UAAU9D,EACV+D,SAAS/D,EACTgE,MAAO,SAAAC,GACL,OAAOhB,KAAKE,IAAIc,EAAEhG,QAEpBiG,WAAY9F,EAAK1E,MAAMkD,SAAW,KAAO,CACvCuH,SAAU,EACVC,OAAQ,GACRC,YAAa,GACbC,OAAQ,SACRC,aAAc,EACdC,WAAY,YACZpC,OAAQ,SAACnE,GACP,GAAIoB,IAAoBC,IAAkB,EACxC,OAAO2C,IAAOhE,EAAM,cAAcmE,OAAO,WAG7CqC,eAAgB,UAElBC,SAAU,KACVC,UAAW,CACTP,OAAQ,GACRD,SAAU,EACVG,OAAQ,OACRD,YAAa,GACbO,aAAc,EACdL,cAAe,GACfC,WAAW,EACXC,eAAgB,SAChBrC,OAAQ,SAAAkB,GAAC,OAAIlF,EAAK7E,cAAcsL,iBAAiB5B,KAAKE,IAAIG,GAAG,KAE/DwB,QAAS,CACP,CACEC,KAAM,IACN9G,MAAO,EACP+G,UAAW,CAAEC,cAAe,GAC5BC,UAAW,CAAEC,KAAM/G,EAAK1E,MAAM4C,MAAM8I,OAAOC,aAAaC,OAAOC,SAC/DnB,OAAQ,WACRK,eAAgB,WAChBe,kBAAmB,WAEnBC,eAAgB,IAElB,CACEV,KAAM,IACN9G,MAAO,EACP+G,UAAW,CAAEU,OAAQtH,EAAK1E,MAAM4C,MAAM8I,OAAO,aAAcO,gBAAiB,OAC5ET,UAAW,CAAEC,KAAM/G,EAAK1E,MAAM4C,MAAM8I,OAAOC,aAAaC,OAAOM,QAC/DxB,OAAQ,UACRK,eAAgB,cAChBe,kBAAmB,WAEnBC,eAAgB,KAGpB3G,KAAK,CAAC,WAAW,WACjB+G,QAAQ,GACRT,OAAO,CAAChH,EAAK1E,MAAM4C,MAAM8I,OAAOC,aAAaC,OAAOC,QAASnH,EAAK1E,MAAM4C,MAAM8I,OAAOC,aAAaC,OAAOM,QACzGE,eAAgB,sBAChBC,eAAgB,GAChBC,gBAAiB,GACjBC,UAAU,EACVC,SAAQ,EACRC,SAAQ,EACRC,WAAW,IACXC,MAAM,SACNC,YAAW,EACXC,aAAa,IACbC,aAAY,EACZC,aAAY,EACZC,iBAAiB,EACjBC,mBAAmB,GACnBC,QAAQ,CACN,CACEC,SAAS,OACTC,UAAW1I,EAAK1E,MAAMkD,SAAW,GAAK,IACtCmK,WAAY,GACZC,WAAY,EACZC,WAAY7I,EAAK1E,MAAMkD,SAAW,GAAK,GACvCsK,WAAY,GACZC,aAAc,EACdC,UAAW,MACXC,OAAQ,cACRC,YAAa,SACbC,cAAenJ,EAAK1E,MAAM4C,MAAM8I,OAAOhB,OACvCoD,QAAS,CACP,CACEC,GAAI,QACJzL,MAAO,CACLuL,cAAwC,UAAzBnJ,EAAK1E,MAAMgO,UAAwB,OAAS,YAMrEpL,MAAM,CACJyI,KAAM,CACJ4C,MAAO,CACLC,KAAM,CACJ/K,SAAUuB,EAAK1E,MAAMkD,SAAW,GAAI,GACpCH,WAAW,IACX0I,KAAK/G,EAAK1E,MAAM4C,MAAM8I,OAAOhB,OAC7B/H,WAAY+B,EAAK1E,MAAM4C,MAAMC,MAAMsL,aAIzCC,KAAM,CACJC,KAAM,CACJrC,OAAQtH,EAAK1E,MAAM4C,MAAM8I,OAAO4C,gBAAiBrC,gBAAiB,SAGtEiB,QAAQ,CACNgB,KAAK,CACHnL,WAAW,IACX0I,KAAK/G,EAAK1E,MAAM4C,MAAM8I,OAAOhB,OAC7B6D,cAAc,aACd5L,WAAY+B,EAAK1E,MAAM4C,MAAMC,MAAMsL,UACnChL,SAAUuB,EAAK1E,MAAMkD,SAAW,GAAI,KAGxCsL,QAAQ,CACNC,UAAU,CACRC,UAAU,KACVC,WAAW,QAIjBC,WAAW,CAAEC,KAAM,QAASC,UAAW,IACvCC,OAAQrK,EAAK1E,MAAMkD,SAAW,CAAE8L,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAAO,CAAEH,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IACrHX,QAAQ,SAACY,GACP,IAAMC,EAAa3K,EAAK7E,cAAcyP,YAAgC,IAApBF,EAAKA,KAAKjJ,WAAgBuC,OAAO,gBAC7E6G,EAAQ,CACZC,GAAGJ,EAAKI,GACRJ,KAAK,CACHC,eAGEI,EAAmB/K,EAAK7E,cAAcsL,iBAAiBiE,EAAKA,KAAKzG,SAAS,GAAG,IAAIjE,EAAK1E,MAAM2E,cAC5F+K,EAAkBhL,EAAK7E,cAAcsL,iBAAiBiE,EAAKA,KAAKxG,QAAQ,GAAG,IAAIlE,EAAK1E,MAAM2E,cAChG,OACEgL,EAAAxO,EAAAC,cAACwO,EAAA,EAAD,CACEL,MAAOA,GAEPI,EAAAxO,EAAAC,cAACyO,EAAA,EAAD,CACEvF,MAAO,WACP7H,MAAOiC,EAAK1E,MAAM4C,MAAM8I,OAAOG,QAC/BtH,MAAOkL,IAETE,EAAAxO,EAAAC,cAACyO,EAAA,EAAD,CACEvF,MAAO,SACP7H,MAAOiC,EAAK1E,MAAM4C,MAAM8I,OAAOQ,OAC/B3H,MAAOmL,OAtQThI,EAAAK,OAAA,qBA0YR,IArDArC,EAAgB,EAEhBtB,EAAU4F,KAAK,CACbwF,GAAG,MACH/M,MAAO,OAAOwF,IAAcC,MAAM4H,OAAOpL,EAAK1E,MAAM2E,eAAelC,MAAMsN,IAAIC,KAAK,KAAK,IACvFZ,KAAMrK,EAAWkL,IAAI,SAAC1F,EAAEhE,GACtB,IAAMwC,EAAarE,EAAK7E,cAAcmJ,iBAAiBuB,EAAEtB,WAAW,IAC9DiH,EAAYxL,EAAK7E,cAAcmJ,iBAAiBuB,EAAE2F,UAAUxL,EAAK1E,MAAM6H,YAAYpG,UACnF0O,EAAMpH,EAAWjI,MAAMoP,GACvBE,EAAI7H,IAAmB,IAAZgC,EAAEpE,WAAgBuC,OAAO,oBACpC2H,EAAItO,WAAWoO,EAAIG,YAIzB,OAFA5K,EAAgB6D,KAAKC,IAAI9D,EAAc2K,GAEhC,CAAED,IAAEC,SAKf3L,EAAK1E,MAAM6H,YAAY3C,UAAU2D,QAAQ,SAAC0H,EAAEC,GAC1CzL,EAAWkL,IAAI,SAAC1F,EAAEhE,GAChB,OAAOgE,EAAEkG,cAAc9G,OAAO,SAAC+G,EAAmBN,GAC9C,OAAOM,EAAmBC,aAAaC,gBAAkBL,EAAEM,QAAQD,gBAEtEX,IAAI,SAACS,EAAmBI,GAEvB,IADuBpM,EAAK7E,cAAckR,MAAML,EAAmBM,MAAM7H,GAAG,GACxD,CAClB,IAAMiH,EAAI7H,IAAmB,IAAZgC,EAAEpE,WAAgBuC,OAAO,oBACtC2H,EAAItO,WAAW2C,EAAK7E,cAAcmJ,iBAAiB0H,EAAmBO,WAAWvM,EAAK1E,MAAM6H,YAAYpG,WAE5GiE,EAAgB6D,KAAKC,IAAI9D,EAAc2K,GAEvC,IAAIa,EAAY9M,EAAU,GAAGgL,KAAKzF,OAAO,SAAAwH,GAAU,OAAOA,EAAKf,IAAMA,IACrE,GAAIc,EAAU,CACZA,EAAYA,EAAU,GACtB,IAAME,EAAMhN,EAAU,GAAGgL,KAAKiC,QAAQH,GACjCA,EAAUI,cACbJ,EAAUI,YAAc,IAE1BJ,EAAUI,YAAYf,EAAEgB,MAAQlB,EAChCjM,EAAU,GAAGgL,KAAKgC,GAAOF,MAI5B,KACFvH,OAAO,SAACC,GAAQ,YAAa4H,IAAN5H,MAI5BzF,EAAYkE,IAEZ/C,EAAYvD,WAAW2D,EAAcZ,GACrCW,EAAc,CAAC,GACNc,EAAE,EAAEA,GAAG,EAAEA,IAChBd,EAAYuE,KAAKzD,EAAEjB,GA3Yb,OA8YRK,EAAkB,EAClBI,EAAsB,EACtBP,EAAY+C,IAAOnE,EAAU,GAAGgL,KAAKhL,EAAU,GAAGgL,KAAKpH,OAAO,GAAGoI,EAAE,oBAAoBhH,KAAKb,IAAOnE,EAAU,GAAGgL,KAAK,GAAGgB,EAAE,oBAAoB,QAC9IxK,EAAgB2D,KAAKC,IAAI,EAAED,KAAKU,KAAKzE,EAAUO,IAE/C7B,EAAa,CACXuN,OAAO,CACLC,KAAM,OACNhJ,OAAQ,kBAGViJ,QAAQ,mBACRC,QAAQ,SAAAhI,GAAC,OAAIlF,EAAK7E,cAAcsC,YAAYyH,EAAEA,EAAE,EAAI,EAAG,IACvDiI,OAAO,CACLH,KAAM,SACNI,SAAS,GAEX9G,SAAS,CACPN,OAAQ,GACRD,SAAU,EACVG,OAAQ,OACRD,YAAa,GACbO,aAAc,EACdL,cAAe,GACfC,WAAWrF,EACXsF,eAAgB,SAChBrC,OAAQ,SAAAkB,GAAC,OAAIlF,EAAK7E,cAAcsL,iBAAiBvB,EAAEA,EAAE,EAAI,EAAG,KAE9DY,WAAY9F,EAAK1E,MAAMkD,SAAW,KAAO,CACvCwH,OAAQ,GACRD,SAAU,EACV/B,OAAQ,SAACnE,GACP,GAAIoB,IAAoBC,IAAkB,EACxC,OAAO2C,IAAOhE,EAAM,oBAAoBmE,OAAO,WAGnDiC,YAAa,GACbC,OAAQ,SACRC,aAAc,EACdC,WAAY,YACZC,eAAgB,UAElBtF,cACA8G,UAAU,EACVC,SAAQ,EACRC,SAAQ,EACRC,WAAW,IACXC,MAAM,SACNC,YAAW,EACXC,aAAa,IACbC,aAAY,EACZC,aAAY,EACZC,iBAAiB,EACjBtB,OAAO,SAAAnB,GAAC,OAAIA,EAAE9H,OACdwK,mBAAmB,GACnBC,QAAQ,CACN,CACEE,UAAW1I,EAAK1E,MAAMkD,SAAW,GAAK,GACtCmK,WAAY,GACZC,WAAY5I,EAAK1E,MAAMkD,UAAY,GAAK,EACxCqK,WAAY7I,EAAK1E,MAAMkD,SAAW,GAAK,GACvCsK,WAAY,GACZC,aAAc,EACdC,UAAW,MACXC,OAAQ,cACRC,YAAa,SACbC,cAAenJ,EAAK1E,MAAM4C,MAAM8I,OAAOhB,OACvCoD,QAAS,CACP,CACEC,GAAI,QACJzL,MAAO,CACLuL,cAAwC,UAAzBnJ,EAAK1E,MAAMgO,UAAwB,OAAS,YAMrEpL,MAAM,CACJyI,KAAM,CACJ4C,MAAO,CACLC,KAAM,CACJ/K,SAAUuB,EAAK1E,MAAMkD,SAAW,GAAI,GACpCH,WAAW,IACX0I,KAAK/G,EAAK1E,MAAM4C,MAAM8I,OAAOhB,OAC7B/H,WAAY+B,EAAK1E,MAAM4C,MAAMC,MAAMsL,aAIzCC,KAAM,CACJC,KAAM,CACJrC,OAAQtH,EAAK1E,MAAM4C,MAAM8I,OAAO4C,gBAAiBrC,gBAAiB,SAGtEiB,QAAQ,CACNgB,KAAK,CACH/K,SAAUuB,EAAK1E,MAAMkD,SAAW,GAAI,GACpCuI,KAAK/G,EAAK1E,MAAM4C,MAAM8I,OAAOhB,OAC7B3H,WAAW,IACXJ,WAAY+B,EAAK1E,MAAM4C,MAAMC,MAAMsL,aAIzCS,WAAW,CAAEC,KAAM,QAASC,UAAW,IACvCC,OAAQrK,EAAK1E,MAAMkD,SAAW,CAAE8L,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAAO,CAAEH,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IACrH4C,aAAa,SAACC,GAAc,IAEpBzC,EADYyC,EAAVC,MACYC,OAAO,GAC3B,MAAqB,kBAAV3C,GAA4C,kBAAfA,EAAMH,KAE1CO,EAAAxO,EAAAC,cAACwO,EAAA,EAAD,CACEL,MAAOA,GAEPI,EAAAxO,EAAAC,cAACyO,EAAA,EAAD,CACEvF,MAAOiF,EAAM4C,QACb1P,MAAO8M,EAAM6C,WACb7N,MAAOgL,EAAMH,KAAKiD,aAGlB9C,EAAMH,KAAKkC,aAAiD,kBAA3B/B,EAAMH,KAAKkC,aAC1C9N,OAAO4B,KAAKmK,EAAMH,KAAKkC,aAAarB,IAAI,SAAAqC,GACtC,IAAMC,EAAetK,IAAcC,MAAMhD,UAAUoN,GAC7CE,EAAgB,OAAOD,EAAa9P,MAAMsN,IAAIC,KAAK,KAAK,IACxDU,EAAqBnB,EAAMH,KAAKkC,YAAYgB,GAC5CG,EAA8B/N,EAAK7E,cAAcsC,YAAYuO,EAAmBA,EAAmB,EAAI,EAAI,GAC3GgC,EAAyBhO,EAAK7E,cAAckR,MAAMxB,EAAMH,KAAKkC,YAAYgB,IAAevR,IAAI2D,EAAK7E,cAAckR,MAAMxB,EAAMH,KAAKiB,IAAIvP,MAAM,KAAK2D,QAAQ,GAAG,IAChK,OACEkL,EAAAxO,EAAAC,cAACyO,EAAA,EAAD,CACEpN,MAAO+P,EACPlI,MAAOiI,EAAajI,MACpBqI,IAAG,GAAAC,OAAKrD,EAAMC,GAAX,KAAAoD,OAAiBN,GACpB/N,MAAK,GAAAqO,OAAKH,EAAL,MAAAG,OAAqCF,EAArC,UAuDd,OAvkBHhL,EAAAK,OAAA,qBAonBR,IAxCA3C,EAAO,GACPC,EAAW,GAEXN,EAAW8D,QAAQ,SAAC0B,EAAEhE,GACpB,IAAMH,EAAOmC,IAAmB,IAAZgC,EAAEpE,WAAgBuC,OAAO,cAEzCI,EAAM,CACR1C,QAGFmE,EAAEkG,cAAc5H,QAAQ,SAACgK,GACvB,IAAMC,EAAiBpO,EAAK7E,cAAckR,MAAM8B,EAAa7B,MAAM7H,GAAG,GAChE4J,EAAgBrO,EAAK1E,MAAM6H,YAAY3C,UAAU8N,KAAK,SAACzC,GAAQ,OAAOA,EAAEM,QAAQD,gBAAkBiC,EAAalC,aAAaC,gBAClI,GAAImC,EAAc,CAChB,IAAMR,EAAetK,IAAcC,MAAMhD,UAAU6N,EAAcxB,MACjE,GAAKuB,EAQHhK,EAAIyJ,EAAajI,OAAS,MARR,CAClB,IAAI2G,EAAalP,WAAW2C,EAAK7E,cAAcmJ,iBAAiB6J,EAAa5B,WAAWvM,EAAK1E,MAAM6H,YAAYpG,WAC/G2D,EAAKmN,EAAajI,OAAS,EAC3BxB,EAAIyJ,EAAajI,OAAS2G,EAC1BnI,EAAG,GAAA8J,OAAIL,EAAajI,MAAjB,UAAiC,OAAOiI,EAAa9P,MAAMsN,IAAIC,KAAK,KAAK,IAE5EtK,EAAgB6D,KAAKC,IAAI9D,EAAcuL,OAQ7C5L,EAASe,GAAQ0C,IAGbrC,EAAQjD,OAAO4B,KAAKC,GAC1BjB,EAAYZ,OAAOkG,OAAOrE,GAG1BlB,EAAY4F,IAEZzE,EAAYvD,WAAW2D,EAAcZ,GACrCW,EAAc,CAAC,GACNc,EAAE,EAAEA,GAAG,EAAEA,IAChBd,EAAYuE,KAAKzD,EAAEjB,GArnBb,OAwnBRK,EAAkB,EAClBI,EAAsB,GACtBP,EAAY+C,IAAO9B,EAAMA,EAAMuB,OAAO,GAAG,cAAcoB,KAAKb,IAAO9B,EAAM,GAAG,cAAc,QAC1Fb,EAAgB2D,KAAKC,IAAI,EAAED,KAAKU,KAAKzE,EAAUO,IAE/C7B,EAAa,CACXiI,QAAS,GACTM,SAAS,EACTvC,QAAS,OACTC,aAAa,EACbkC,eAAgB,GAChBC,gBAAiB,GACjBlH,KAAM5B,OAAO4B,KAAKA,GAClBgH,eAAgB,sBAChBV,OAAQ,SAAAtJ,GAAA,IAAGoN,EAAHpN,EAAGoN,GAAH,OAAApN,EAAOgN,KAAe,GAAAwD,OAAIpD,EAAJ,WAC9BxE,SAAS,CACPtC,OAAQ,SAAAkB,GAAC,OAAIlF,EAAK7E,cAAcsL,iBAAiBvB,EAAEA,EAAE,EAAI,EAAG,IAC5DgB,OAAQ,OACRH,SAAU,EACVE,YAAa,GACbO,aAAc,EACdR,OAAQ,GACRG,cAAe,GACfC,WAAWrF,EACXsF,eAAgB,UAElBtF,cACA+E,WAAY9F,EAAK1E,MAAMkD,SAAW,KAAO,CACvCwH,OAAQ,GACRhC,OAAQ,SAACnE,GACP,GAAIoB,IAAoBC,IAAkB,EACxC,OAAO2C,IAAOhE,EAAM,oBAAoBmE,OAAO,WAGnD+B,SAAU,EACVE,YAAa,GACbE,aAAc,GACdD,OAAQ,cACRE,WAAY,YACZC,eAAgB,UAElBmC,QAAQ,CACN,CACEC,SAAS,OACTC,UAAW1I,EAAK1E,MAAMkD,SAAW,GAAK,GACtCmK,WAAY,GACZC,WAAY5I,EAAK1E,MAAMkD,UAAY,GAAK,EACxCqK,WAAY7I,EAAK1E,MAAMkD,SAAW,GAAK,GACvCsK,WAAY,GACZC,aAAc,EACdC,UAAW,MACXC,OAAQ,cACRC,YAAa,SACbC,cAAenJ,EAAK1E,MAAM4C,MAAM8I,OAAOhB,OACvCoD,QAAS,CACP,CACEC,GAAI,QACJzL,MAAO,CACLuL,cAAwC,UAAzBnJ,EAAK1E,MAAMgO,UAAwB,OAAS,YAMrEpL,MAAM,CACJ4L,QAAS,CACPC,UAAU,CACRtC,QAAQ,IACRuC,UAAU,OACVC,WAAW,eAEbsE,UAAU,CACR9G,QAAQ,MAGZd,KAAM,CACJ4C,MAAO,CACLC,KAAM,CACJ/K,SAASuB,EAAK1E,MAAMkD,SAAW,GAAK,GACpCH,WAAW,IACX0I,KAAK/G,EAAK1E,MAAM4C,MAAM8I,OAAOhB,OAC7B/H,WAAY+B,EAAK1E,MAAM4C,MAAMC,MAAMsL,aAIzCC,KAAM,CACJC,KAAM,CACJrC,OAAQtH,EAAK1E,MAAM4C,MAAM8I,OAAO4C,gBAAiBrC,gBAAiB,SAGtEiB,QAAQ,CACNgB,KAAK,CACH/K,SAASuB,EAAK1E,MAAMkD,SAAW,GAAK,GACpCuI,KAAK/G,EAAK1E,MAAM4C,MAAM8I,OAAOhB,OAC7B3H,WAAW,IACXJ,WAAY+B,EAAK1E,MAAM4C,MAAMC,MAAMsL,aAIzCS,WAAW,CAAEC,KAAM,QAASC,UAAW,IACvCC,OAAQrK,EAAK1E,MAAMkD,SAAW,CAAE8L,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAAO,CAAEH,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IACrHX,QAAQ,SAAA0E,GAA0B,IAAvB1D,EAAuB0D,EAAvB1D,GAAIjL,EAAmB2O,EAAnB3O,MAAO9B,EAAYyQ,EAAZzQ,MACdwO,EAAavM,EAAK7E,cAAcsC,YAAYoC,EAAM,GACxD,OACEoL,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACTC,GAAG,EACHC,GAAG,EACHhS,MAAM,IAGRqO,EAAAxO,EAAAC,cAAA,SACEkB,MAAO,CAAChB,MAAM,OAAOiS,eAAe,aAEpC5D,EAAAxO,EAAAC,cAAA,aACEuO,EAAAxO,EAAAC,cAAA,UACEuO,EAAAxO,EAAAC,cAAA,MAAIkB,MAAO,CAAC6J,QAAQ,YAClBwD,EAAAxO,EAAAC,cAAA,QAAMkB,MAAO,CAACE,QAAQ,QAASlB,MAAO,OAAQkS,OAAQ,OAAQ7E,WAAYlM,MAE5EkN,EAAAxO,EAAAC,cAAA,MAAIkB,MAAO,CAAC6J,QAAQ,UAAUoC,cAAc,eAAgBiB,GAC5DG,EAAAxO,EAAAC,cAAA,MAAIkB,MAAO,CAAC6J,QAAQ,YAAYwD,EAAAxO,EAAAC,cAAA,cAAS6P,EAAT,IAAsBvM,EAAK1E,MAAM2E,sBAhvBvE+C,EAAAK,OAAA,4BA0vBR3C,EAAO,GACPC,EAAW,GAEXN,EAAW8D,QAAQ,SAAC0B,EAAEhE,GACpB,IAAMH,EAAOmC,IAAmB,IAAZgC,EAAEpE,WAAgBuC,OAAO,cACzCI,EAAM,CACR1C,KAAKmC,IAAmB,IAAZgC,EAAEpE,WAAgBuC,OAAO,qBAEnCrD,EAASe,KACX0C,EAAMzD,EAASe,IAGjB,IAAMqN,EAAkBlJ,EAAEkG,cAAciD,OAAO,SAACC,EAAYjD,GAC1D,IAAMO,EAAavM,EAAK7E,cAAcmJ,iBAAiB0H,EAAmBO,WAAWvM,EAAK1E,MAAM6H,YAAYpG,UAC5G,OAAOiD,EAAK7E,cAAckR,MAAM4C,GAAa9S,KAAKoQ,IAClD,GAEF1G,EAAEkG,cAAc5H,QAAQ,SAACgK,GACvB,IAAMC,EAAiBpO,EAAK7E,cAAckR,MAAM8B,EAAa7B,MAAM7H,GAAG,GAChEmJ,EAAe5N,EAAK1E,MAAM6H,YAAY3C,UAAUyE,OAAO,SAAC4G,GAAQ,OAAOA,EAAEM,QAAQD,gBAAkBiC,EAAalC,aAAaC,gBAAiB,GAAGW,KACvJ,GAAKuB,OAMmCtB,WAAtB1I,EAAIwJ,KACpBxJ,EAAIwJ,GAAgB,OAPF,CAClB,IAAMrB,EAAavM,EAAK7E,cAAcmJ,iBAAiB6J,EAAa5B,WAAWvM,EAAK1E,MAAM6H,YAAYpG,UAChGmS,EAAiB7R,WAAWkP,EAAWlQ,IAAI0S,GAAiB3S,MAAM,MACxEsE,EAAKkN,GAAgB,EACrBxJ,EAAIwJ,GAAgBsB,EACpB9K,EAAG,GAAA8J,OAAIN,EAAJ,UAA2B,OAAOrK,IAAcC,MAAMhD,UAAUoN,GAAc7P,MAAMsN,IAAIC,KAAK,KAAK,OAMzG3K,EAASe,GAAQ0C,IAGnB1E,EAAYZ,OAAOkG,OAAOrE,GAG1BlB,EAAY4F,IAEZpE,EAAkB,EAElBzB,EAAa,CACXiI,QAAS,GACTM,SAAS,EACTvC,QAAS,OACTkF,KAAMhL,EACN+F,aAAa,EACbkC,eAAgB,GAChBC,gBAAiB,GACjBlH,KAAM5B,OAAO4B,KAAKA,GAClBgH,eAAgB,sBAChB2C,OAAQrK,EAAK1E,MAAMkD,SAAW,CAAE8L,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAAO,CAAEH,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IACrHzD,OAAQ,SAAAmI,GAAA,IAAGrE,EAAHqE,EAAGrE,GAAH,OAAAqE,EAAOzE,KAAe,GAAAwD,OAAIpD,EAAJ,WAC9BxE,SAAS,CACPtC,OAAQ,SAAAkB,GAAC,OAAIpF,SAASoF,GAAG,MAE3BY,WAAY9F,EAAK1E,MAAMkD,SAAW,KAAO,CACvCwH,OAAQ,GACRhC,OAAQ,SAACnE,GACP,GAAIoB,IAAoB,IAAM,EAC5B,OAAO4C,IAAOhE,EAAM,oBAAoBmE,OAAO,WAGnDkC,OAAQ,SACRC,aAAc,GACdE,eAAgB,SAChBD,WAAY,gBAEd0D,QAAQ,SAAAsF,GAA0B,IAAvBtE,EAAuBsE,EAAvBtE,GAAIjL,EAAmBuP,EAAnBvP,MAAO9B,EAAYqR,EAAZrR,MACdwO,EAA+B,MAAlBzM,SAASD,GAAeG,EAAK7E,cAAcsC,YAAYoC,EAAM,GAAKG,EAAK7E,cAAcsC,YAAYoC,EAAM,GAC1H,OACEoL,EAAAxO,EAAAC,cAAA,SAAOkB,MAAO,CAAChB,MAAM,OAAOiS,eAAe,aACzC5D,EAAAxO,EAAAC,cAAA,aACEuO,EAAAxO,EAAAC,cAAA,UACEuO,EAAAxO,EAAAC,cAAA,MAAIkB,MAAO,CAAC6J,QAAQ,YAClBwD,EAAAxO,EAAAC,cAAA,QAAMkB,MAAO,CAACE,QAAQ,QAASlB,MAAO,OAAQkS,OAAQ,OAAQ7E,WAAYlM,MAE5EkN,EAAAxO,EAAAC,cAAA,MAAIkB,MAAO,CAAC6J,QAAQ,UAAUoC,cAAc,eAAgBiB,GAC5DG,EAAAxO,EAAAC,cAAA,MAAIkB,MAAO,CAAC6J,QAAQ,YAAYwD,EAAAxO,EAAAC,cAAA,cAAS6P,EAAT,WAx0BpCvJ,EAAAK,OAAA,qBA+8BR,IA7HArC,EAAgB,EAGZP,EAAY4O,qBAAuB5O,EAAY4O,oBAAoB/L,OAAO,GAC5E7C,EAAY4O,oBAAoBlL,QAAS,SAAAmL,GACvC,IAAMzB,EAAe7N,EAAK1E,MAAM6H,YAAY3C,UAAU8N,KAAM,SAAAzC,GAAC,OAAKA,EAAEgB,OAASyC,EAAmBC,WAC5F1B,GAAgByB,EAAmBE,cAAcC,SAASzP,EAAK1E,MAAM2E,iBACvEqP,EAAmBI,SAAU,EAC7BJ,EAAmBnD,QAAU0B,EAAa1B,QAC1C3L,EAAUmP,QAAQL,MAKxB9O,EAAU2D,QAAQ,SAAC0H,EAAEC,GACnB,IAAM+B,EAAY/O,OAAA8Q,EAAA,EAAA9Q,CAAA,GAAOyE,IAAcC,MAAMhD,UAAUqL,EAAEgB,OACzD,GAAKgB,EAAa6B,UAGdhQ,EAAUuF,OAAO,SAAAY,GAAO,OAAOA,EAAEgH,OAAShB,EAAEgB,OAASvJ,OAAzD,CAIA,IAAMuM,EAAYhC,EAAagC,UAAYhC,EAAagC,UAAY,OAEpEnQ,EAAU4F,KAAK,CACbwF,GAAG+C,EAAajI,MAChB7H,MAAM,OAAOwF,IAAcC,MAAMhD,UAAUqL,EAAEgB,MAAM9O,MAAMsN,IAAIC,KAAK,KAAK,IACvEZ,KAAKrK,EAAWkL,IAAI,SAAC1F,EAAEhE,GACrB,OAAOgE,EAAEkG,cAAc9G,OAAO,SAAC+G,EAAmBN,GAC9C,OAAOM,EAAmBC,aAAaC,gBAAkBL,EAAEM,QAAQD,gBAEtEX,IAAI,SAACS,EAAmBI,GAGvB,IAAI0D,EAAoC,kBAAdD,GAA0BA,EAAUvM,OAASuM,EAAUb,OAAO,SAACe,EAAIC,GAC3F,OAAIhE,EAAmBgE,GACdhQ,EAAK7E,cAAckR,MAAM0D,GAAK5T,KAAK6D,EAAK7E,cAAckR,MAAML,EAAmBgE,KAEjFhQ,EAAK7E,cAAckR,MAAM0D,IAChC,GAAK/P,EAAK7E,cAAckR,MAAML,EAAmB6D,IAGnD,IADuBC,EAAarL,GAAG,GACnB,CAGdqL,EAAaG,GAAG,IAAMjE,EAAmBkE,mBAAqBlQ,EAAK7E,cAAckR,MAAML,EAAmBkE,mBAAmBC,GAAG,KAClIL,EAAeA,EAAa3T,KAAK6D,EAAK7E,cAAckR,MAAML,EAAmBkE,qBAG/EJ,EAAe9P,EAAK7E,cAAcmJ,iBAAiBwL,EAAa,IAEhE,IAAMpE,EAAI7H,IAAmB,IAAZgC,EAAEpE,WAAgBuC,OAAO,oBACpC2H,EAAItO,WAAWyS,GAIrB,OAFA9O,EAAgB6D,KAAKC,IAAI9D,EAAc2K,GAEhC,CAAED,IAAGC,QAGb,KACF1G,OAAO,SAACC,GAAQ,YAAa4H,IAAN5H,SAI9BxF,EAAU4F,KAAK,CACbwF,GAAG,OACH/M,MAAM,OAAOwF,IAAcC,MAAMhD,UAAU4P,KAAKrS,MAAMsN,IAAIC,KAAK,KAAK,IACpEZ,KAAKrK,EAAWkL,IAAI,SAAC1F,EAAEhE,GACrB,IAAM6J,EAAI7H,IAAmB,IAAZgC,EAAEpE,WAAgBuC,OAAO,oBACpC2H,EAAItO,WAAW2C,EAAK7E,cAAcmJ,iBAAiBuB,EAAEwK,SAAS,KAEpE,OADArP,EAAgB6D,KAAKC,IAAI9D,EAAc2K,GAChC,CAAED,IAAGC,SAiDhBlM,EAAYkE,IAEZ/C,EAAYvD,WAAW2D,EAAcZ,GACrCW,EAAc,CAAC,GACNc,EAAE,EAAEA,GAAG,EAAEA,IAChBd,EAAYuE,KAAKzD,EAAEjB,GAh9Bb,OAm9BRK,EAAkB,EAClBI,EAAsB,EAChBa,EAAcxC,EAAUA,EAAU4D,OAAO,GAAGoH,KAAKvF,KAAK,SAAC1I,EAAE2I,GAAH,OAAUvB,IAAOpH,EAAEiP,EAAE,oBAAoB4E,SAASzM,IAAOuB,EAAEsG,EAAE,sBAAwB,EAAI,IACrJ5K,EAAY+C,IAAO3B,EAAYA,EAAYoB,OAAO,GAAGoI,EAAE,oBAAoBhH,KAAKb,IAAO3B,EAAY,GAAGwJ,EAAE,oBAAoB,QAC5HxK,EAAgB2D,KAAKC,IAAI,EAAED,KAAKU,KAAKzE,EAAUO,IAI/C7B,EAAa,CACXuN,OAAO,CACLC,KAAM,OACNhJ,OAAQ,kBAGViJ,QAAQ,mBACRC,QAAQ,SAAArN,GAAK,OAAIxC,WAAWwC,GAAOE,QAAQ,GAAG,KAC9CoN,OAAO,CACLH,KAAM,SACNI,SAAS,GAEX9G,SAAS,CACPN,OAAQ,GACRD,SAAU,EACVG,OAAQ,OACRD,YAAa,GACbO,aAAc,EACdL,cAAe,GACfC,WAAWrF,EACXsF,eAAgB,SAChBrC,OAAO,SAAAnE,GAAK,OAAIxC,WAAWwC,GAAOE,QAAQ,GAAG,MAE/C+F,WAAY9F,EAAK1E,MAAMkD,SAAW,KAAO,CACvCwH,OAAQ,GACRD,SAAU,EACVE,YAAa,GACbE,aAAc,EACdD,OAAQ,SACRlC,OAAQ,SAACnE,GACP,GAAIoB,IAAoBC,IAAkB,EACxC,OAAO2C,IAAOhE,EAAM,oBAAoBmE,OAAO,WAGnDoC,WAAY,YACZC,eAAgB,UAElBtF,cACA8G,UAAU,EACVC,SAAQ,EACRC,SAAQ,EACRC,WAAW,IACXC,MAAM,SACNC,YAAW,EACXC,aAAa,IACbC,aAAY,EACZC,aAAY,EACZC,iBAAiB,EACjBtB,OAAO,SAAAnB,GAAC,OAAIA,EAAE9H,OACdwK,mBAAmB,GACnBC,QAAQ,CACN,CACEE,UAAW1I,EAAK1E,MAAMkD,SAAW,GAAK,GACtCmK,WAAY,GACZC,WAAY5I,EAAK1E,MAAMkD,UAAY,GAAK,EACxCqK,WAAY7I,EAAK1E,MAAMkD,SAAW,GAAK,GACvCsK,WAAY,GACZC,aAAc,EACdC,UAAW,MACXC,OAAQ,cACRC,YAAa,SACbC,cAAenJ,EAAK1E,MAAM4C,MAAM8I,OAAOhB,OACvCoD,QAAS,CACP,CACEC,GAAI,QACJzL,MAAO,CACLuL,cAAwC,UAAzBnJ,EAAK1E,MAAMgO,UAAwB,OAAS,YAMrEpL,MAAM,CACJyI,KAAM,CACJ4C,MAAO,CACLC,KAAM,CACJ/K,SAAUuB,EAAK1E,MAAMkD,SAAW,GAAI,GACpCH,WAAW,IACX0I,KAAK/G,EAAK1E,MAAM4C,MAAM8I,OAAOhB,OAC7B/H,WAAY+B,EAAK1E,MAAM4C,MAAMC,MAAMsL,aAIzCC,KAAM,CACJC,KAAM,CACJrC,OAAQtH,EAAK1E,MAAM4C,MAAM8I,OAAO4C,gBAAiBrC,gBAAiB,SAGtEiB,QAAQ,CACNgB,KAAK,CACHnL,WAAW,IACX0I,KAAK/G,EAAK1E,MAAM4C,MAAM8I,OAAOhB,OAC7B6D,cAAc,aACd5L,WAAY+B,EAAK1E,MAAM4C,MAAMC,MAAMsL,UACnChL,SAAUuB,EAAK1E,MAAMkD,SAAW,GAAI,MAI1C0L,WAAW,CAAEC,KAAM,QAASC,UAAW,IACvCC,OAAQrK,EAAK1E,MAAMkD,SAAW,CAAE8L,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAAO,CAAEH,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IACrH4C,aAAa,SAACC,GAAc,IAClBC,EAAUD,EAAVC,MACF1C,EAAQ0C,EAAMC,OAAO,GAC3B,OACEvC,EAAAxO,EAAAC,cAACwO,EAAA,EAAD,CACEL,MAAOA,GAGiB,kBAAjB0C,EAAMC,QAAuBD,EAAMC,OAAOlK,QAC/CiK,EAAMC,OAAOjC,IAAI,SAAAV,GACf,IAAM+C,EAAe/C,EAAM4C,QACrB8C,EAAkB1F,EAAMH,KAAKiD,WAEnC,OACE1C,EAAAxO,EAAAC,cAACyO,EAAA,EAAD,CACE8C,IAAKpD,EAAMC,GACX/M,MAAO8M,EAAM9M,MACb6H,MAAOgI,EACP/N,MAAO0Q,SAjlCfvN,EAAAK,OAAA,qBAkpCR,IArDIlB,EAAY,EAChBnB,EAAgB,EAEhBhB,EAAK1E,MAAM6H,YAAY3C,UAAU2D,QAAQ,SAAC0H,EAAEC,GAC1C,IAAM+B,EAAetK,IAAcC,MAAMhD,UAAUqL,EAAEgB,MAChDgB,EAAa6B,UAGdhQ,EAAUuF,OAAO,SAAAY,GAAO,OAAOA,EAAEgH,OAAShB,EAAEgB,OAASvJ,QAGzD5D,EAAU4F,KAAK,CACbwF,GAAG+C,EAAajI,MAChB7H,MAAM,OAAOwF,IAAcC,MAAMhD,UAAUqL,EAAEgB,MAAM9O,MAAMsN,IAAIC,KAAK,KAAK,IACvEZ,KAAKrK,EAAWkL,IAAI,SAAC1F,EAAEhE,GACrB,OAAOgE,EAAEkG,cAAc9G,OAAO,SAAC+G,EAAmBN,GAC9C,OAAOM,EAAmBC,aAAaC,gBAAkBL,EAAEM,QAAQD,gBAEtEX,IAAI,SAACS,EAAmBI,GACvB,IAAMV,EAAI7H,IAAmB,IAAZgC,EAAEpE,WAAgBuC,OAAO,oBACtC2H,EAAItO,WAAW2O,EAAmBwE,WAMtC,OAJA7E,EAAI8E,MAAM9E,KAAOA,EAAIxJ,EAAYwJ,EACjCxJ,EAAYwJ,EACZ3K,EAAgB6D,KAAKC,IAAI9D,EAAc2K,GAEhC,CAAED,IAAGC,OACX,KACF1G,OAAO,SAACC,GAAQ,YAAa4H,IAAN5H,SAI9BxF,EAAU4F,KAAK,CACbwF,GAAG,OACH/M,MAAO,OAAOwF,IAAcC,MAAMhD,UAAU4P,KAAKrS,MAAMsN,IAAIC,KAAK,KAAK,IACrEZ,KAAMrK,EAAWkL,IAAI,SAAC1F,EAAEhE,GACtB,IAAM6J,EAAI7H,IAAmB,IAAZgC,EAAEpE,WAAgBuC,OAAO,oBACtC2H,EAAItO,WAAWwI,EAAE6K,WAKrB,OAJA/E,EAAI8E,MAAM9E,KAAOA,EAAIxJ,EAAYwJ,EACjCxJ,EAAYwJ,EACZ3K,EAAgB6D,KAAKC,IAAI9D,EAAc2K,GAEhC,CAAED,IAAGC,SAOhBlM,EAAYkE,IAEZ/C,EAAYvD,WAAW2D,EAAcZ,GACrCW,EAAc,CAAC,GACNc,EAAE,EAAEA,GAAG,EAAEA,IAChBd,EAAYuE,KAAKzD,EAAEjB,GAnpCb,OAspCRK,EAAkB,EAClBI,EAAsB,EACtBP,EAAY+C,IAAOnE,EAAU,GAAGgL,KAAKhL,EAAU,GAAGgL,KAAKpH,OAAO,GAAGoI,EAAE,cAAchH,KAAKb,IAAOnE,EAAU,GAAGgL,KAAK,GAAGgB,EAAE,cAAc,QAClIxK,EAAgB2D,KAAKC,IAAI,EAAED,KAAKU,KAAKzE,EAAUO,IAE/C7B,EAAa,CACXuN,OAAO,CACLC,KAAM,OACNhJ,OAAQ,kBAGViJ,QAAQ,mBACRC,QAAQ,SAAArN,GAAK,OAAIxC,WAAWwC,GAAOE,QAAQ,IAC3CoN,OAAO,CACLH,KAAM,SACNI,SAAS,GAEX9G,SAAS,CACPN,OAAQ,GACRD,SAAU,EACVG,OAAQ,OACRD,YAAa,GACbO,aAAc,EACdL,cAAe,GACfC,WAAWrF,EACXsF,eAAgB,SAChBrC,OAAO,SAAAnE,GAAK,OAAIxC,WAAWwC,GAAOE,QAAQ,KAE5C+F,WAAY9F,EAAK1E,MAAMkD,SAAW,KAAO,CACvCwH,OAAQ,GACRD,SAAU,EACVE,YAAa,GACbC,OAAQ,SACRC,aAAc,EACdC,WAAY,YACZpC,OAAQ,SAACnE,GACP,GAAIoB,IAAoBC,IAAkB,EACxC,OAAO2C,IAAOhE,EAAM,oBAAoBmE,OAAO,WAGnDqC,eAAgB,UAElBtF,cACA8G,UAAU,EACVC,SAAQ,EACRC,SAAQ,EACRC,WAAW,IACXC,MAAM,SACNC,YAAW,EACXC,aAAa,IACbC,aAAY,EACZC,aAAY,EACZC,iBAAiB,EACjBtB,OAAO,SAAAnB,GAAC,OAAIA,EAAE9H,OACdwK,mBAAmB,GACnBC,QAAQ,CACN,CACEE,UAAW1I,EAAK1E,MAAMkD,SAAW,GAAK,GACtCmK,WAAY,GACZC,WAAY5I,EAAK1E,MAAMkD,UAAY,GAAK,EACxCqK,WAAY7I,EAAK1E,MAAMkD,SAAW,GAAK,GACvCsK,WAAY,GACZC,aAAc,EACdC,UAAW,MACXC,OAAQ,cACRC,YAAa,SACbC,cAAenJ,EAAK1E,MAAM4C,MAAM8I,OAAOhB,OACvCoD,QAAS,CACP,CACEC,GAAI,QACJzL,MAAO,CACLuL,cAAwC,UAAzBnJ,EAAK1E,MAAMgO,UAAwB,OAAS,YAMrEpL,MAAM,CACJyI,KAAM,CACJ4C,MAAO,CACLC,KAAM,CACJ/K,SAAUuB,EAAK1E,MAAMkD,SAAW,GAAI,GACpCH,WAAW,IACX0I,KAAK/G,EAAK1E,MAAM4C,MAAM8I,OAAOhB,OAC7B/H,WAAY+B,EAAK1E,MAAM4C,MAAMC,MAAMsL,aAIzCC,KAAM,CACJC,KAAM,CACJrC,OAAQtH,EAAK1E,MAAM4C,MAAM8I,OAAO4C,gBAAiBrC,gBAAiB,SAGtEiB,QAAQ,CACNgB,KAAK,CACHnL,WAAW,IACX0I,KAAK/G,EAAK1E,MAAM4C,MAAM8I,OAAOhB,OAC7B6D,cAAc,aACd5L,WAAY+B,EAAK1E,MAAM4C,MAAMC,MAAMsL,UACnChL,SAAUuB,EAAK1E,MAAMkD,SAAW,GAAI,MAI1C0L,WAAW,CAAEC,KAAM,QAASC,UAAW,IACvCC,OAAQrK,EAAK1E,MAAMkD,SAAW,CAAE8L,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAAO,CAAEH,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IACrH4C,aAAa,SAACC,GAAc,IAClBC,EAAUD,EAAVC,MACF1C,EAAQ0C,EAAMC,OAAO,GAC3B,OACEvC,EAAAxO,EAAAC,cAACwO,EAAA,EAAD,CACEL,MAAOA,GAGiB,kBAAjB0C,EAAMC,QAAuBD,EAAMC,OAAOlK,QAC/CiK,EAAMC,OAAOjC,IAAI,SAAAV,GACf,IAAM+C,EAAe/C,EAAM4C,QACrB8C,EAAkB1F,EAAMH,KAAKiD,WACnC,OACE1C,EAAAxO,EAAAC,cAACyO,EAAA,EAAD,CACE8C,IAAKpD,EAAMC,GACX/M,MAAO8M,EAAM9M,MACb6H,MAAOgI,EACP/N,MAAO0Q,SAhxCfvN,EAAAK,OAAA,sBAo/CR,IAxNAxC,EAAY,EACZG,EAAgB,EAEZqB,EAAU,KACVC,EAAW,KACXC,EAASvC,EAAK7E,cAAckR,MAAM,GAClC7J,EAAexC,EAAK7E,cAAckR,MAAM,GACxC5J,EAAiBzC,EAAK7E,cAAckR,MAAM,GAE9ClL,EAAgB,GACVuB,GAAmBlC,EAAU8N,KAAM,SAAAzC,GAAC,MAAe,WAAXA,EAAEgB,OAEhDxM,EAAW8D,QAAQ,SAAC0B,EAAEhE,GAEpB,IAAIwO,EAAWrQ,EAAK7E,cAAckR,MAAMxG,EAAEwK,UACtC1E,EAAI,EACJgF,EAAM,EACJjF,EAAI7H,IAAmB,IAAZgC,EAAEpE,WAAgBuC,OAAO,oBAG1C,GAAiC,SAA7BhE,EAAK1E,MAAM2E,eAA4B4D,IAAO6H,GAAGkF,eAAe/M,IAAO,mBAAmB,qBAAqB,CACjH,IAAMgN,EAAmBnO,GAAmBmD,EAAEkG,cAAcuC,KAAK,SAACwC,EAAMpF,GACtE,OAAOoF,EAAM7E,aAAaC,gBAAkBxJ,GAAiByJ,QAAQD,gBAClE,KACD2E,EAAiBX,mBAAqBlQ,EAAK7E,cAAckR,MAAMwE,EAAiBX,mBAAmBC,GAAG,KACxGE,EAAWA,EAASlU,KAAK6D,EAAK7E,cAAckR,MAAMwE,EAAiBX,qBAIvE,IAAMa,EAAM/Q,EAAK7E,cAAcmJ,iBAAiB+L,EAAS,IAAIhU,IAAI,KAKjE,GAFAkG,EAASA,EAAOpG,KAAK4U,EAAI3U,MAAM,MAE3BiG,EAAQ,CACV,IAAM2O,GAAQnL,EAAEpE,UAAUa,EAASb,WAAW,MAGxCwP,EAAWxO,EAAerG,MAAMiG,EAAQjG,MAAM4U,GAAM3U,IAAI,MAGxD6U,GAFNzO,EAAiBA,EAAetG,KAAK8U,IAEN5U,IAAImG,GAAcmC,MAAM,GAAGvI,MAAM,KAChEuP,EAAItO,WAAW6T,GAGf,IAAMC,EAAqBhQ,EAAcmC,OAAO,EAAIuB,KAAKC,IAAI,EAAEjB,IAAmB,IAAZgC,EAAEpE,WAAgBiD,KAAKb,IAAO1C,EAAc,GAAGuK,EAAE,oBAAoB,SAAW,EACtJiF,EAAMtT,WAAa,IAAFsO,EAAMwF,GAAoBpR,QAAQ,GAGrDuC,EAAWuD,EAEXxD,EAAU0O,EAEa,OAAnB3P,IACFA,EAAiBtB,SAAS+F,EAAEuL,cAG9BpQ,EAAgB6D,KAAKC,IAAI9D,EAAc2K,GAEvC,IAAM0F,EAAUxM,KAAKyM,MAAMzQ,EAAUN,EAAW,KAC1C6Q,EAAcvL,EAAEuL,YAEtBvQ,IAEI8P,EAAI,GACNxP,EAAcmE,KAAK,CAAEoG,IAAGC,IAAGgF,MAAKS,cAAaC,cAK7C5Q,EAAY4O,qBAAuB5O,EAAY4O,oBAAoB/L,OAAO,GAC5E7C,EAAY4O,oBAAoBlL,QAAS,SAAAmL,GACvC,IAAMzB,EAAe7N,EAAK1E,MAAM6H,YAAY3C,UAAU8N,KAAM,SAAAzC,GAAC,OAAKA,EAAEgB,OAASyC,EAAmBC,WAC5F1B,GAAgByB,EAAmBE,cAAcC,SAASzP,EAAK1E,MAAM2E,iBACvEqP,EAAmBI,SAAU,EAC7BJ,EAAmBnD,QAAU0B,EAAa1B,QAC1C3L,EAAUmP,QAAQL,MAKxB9O,EAAU2D,QAAS,SAAA0H,GAEjB,IAAMgC,EAAY/O,OAAA8Q,EAAA,EAAA9Q,CAAA,GAAOyE,IAAcC,MAAMhD,UAAUqL,EAAEgB,OAGzD,GAAIgB,EAAa0D,aAAe1D,EAAa0D,YAAYvR,EAAK1E,MAAM2E,eAAe,CACjF,IAAMuR,EAAa3D,EAAa0D,YAAYvR,EAAK1E,MAAM2E,eACvDnB,OAAO4B,KAAK8Q,GAAYrN,QAAQ,SAAA0H,GAC9BgC,EAAahC,GAAK2F,EAAW3F,KAIjC,MAAKgC,EAAa6B,SAAY7B,EAAatM,gBAAkBvB,EAAK7E,cAAcyP,YAAYiD,EAAatM,gBAAgBkQ,QAAQC,KAAKC,QAAtI,CAIA,IAAM9B,EAAYhC,EAAagC,UAAYhC,EAAagC,UAAY,OAE9D+B,EAAW,CACf9G,GAAG+C,EAAajI,MAChB7H,MAAO,OAAO8P,EAAa9P,MAAMsN,IAAIC,KAAK,KAAK,IAC/CZ,KAAM,IAGR7J,EAAY,EAEZwB,EAAU,KACVC,EAAW,KACX,IAAIuP,EAAa,EACbC,EAAoB,KACpBC,EAAqB,KACzBxP,EAASvC,EAAK7E,cAAckR,MAAM,GAClC7J,EAAexC,EAAK7E,cAAckR,MAAM,GACxC5J,EAAiBzC,EAAK7E,cAAckR,MAAM,GACdhM,EAAW4E,OAAQ,SAAAY,GAAC,OAAMgI,EAAatM,gBAAkBsC,IAAOgK,EAAatM,gBAAgBqP,eAAe/M,IAAmB,IAAZgC,EAAEpE,cAE7H0C,QAAS,SAAC0B,EAAEhE,GAE9B,IAAMsM,EAAetI,EAAEkG,cAAcuC,KAAK,SAACwC,EAAMpF,GAC/C,OAAOoF,EAAM7E,aAAaC,gBAAkBL,EAAEM,QAAQD,gBAGxD,GAAIiC,EAAa,CAEV2D,IACHA,EAAoB3D,GAGtB,IAAI2B,EAAoC,kBAAdD,GAA0BA,EAAUvM,OAASuM,EAAUb,OAAO,SAACe,EAAIC,GAC3F,OAAI7B,EAAa6B,GACRhQ,EAAK7E,cAAckR,MAAM0D,GAAK5T,KAAK6D,EAAK7E,cAAckR,MAAM8B,EAAa6B,KAE3EhQ,EAAK7E,cAAckR,MAAM0D,IAChC,GAAK/P,EAAK7E,cAAckR,MAAM8B,EAAa0B,IAQ7C,GALIC,EAAaG,GAAG,IAAM9B,EAAa+B,mBAAqBlQ,EAAK7E,cAAckR,MAAM8B,EAAa+B,mBAAmBC,GAAG,KACtHL,EAAeA,EAAa3T,KAAK6D,EAAK7E,cAAckR,MAAM8B,EAAa+B,sBAGlDJ,EAAarL,GAAG,GACnB,CAElB,IAAIuN,EAAU,GAEVrG,EAAI,EAEFD,EAAI7H,IAAmB,IAAZgC,EAAEpE,WAAgBuC,OAAO,oBACpC+M,EAAM/Q,EAAK7E,cAAcmJ,iBAAiBwL,EAAa,IAAIzT,IAAI,KAMrE,GAJAkG,EAASA,EAAOpG,KAAK4U,EAAI3U,MAAM,MAIJ,OAAvB2V,IACFA,EAAqBjS,SAAS+F,EAAEuL,cACThQ,EAAe,CACpC,IAAM6Q,EAAkB9Q,EAAcmN,KAAK,SAAA4D,GAAE,OAAKA,EAAGd,aAAaW,IAC9DE,IAEFtG,EADAkG,EAAaI,EAAgBtG,EAEvBpJ,EAAOxC,QAAQ,IAO3B,GAFAc,IAEIyB,EAAU,CACZ,IAAM0O,GAAQnL,EAAEpE,UAAUa,EAASb,WAAW,MAGxCwP,EAAWxO,EAAerG,MAAMiG,EAAQjG,MAAM4U,GAAM3U,IAAI,MAGxD6U,GAFNzO,EAAiBA,EAAetG,KAAK8U,IAEN5U,IAAImG,GAAcmC,MAAM,GAAGvI,MAAM,KAChEuP,EAAItO,WAAW6T,GAASW,EAExB,IAAMV,EAAqBtM,KAAKC,IAAI,EAAEjB,IAAmB,IAAZgC,EAAEpE,WAAgBiD,KAAKb,IAAO1C,EAAc,GAAGuK,EAAE,oBAAoB,SAMlHsG,EAAU,CACRtG,IACAC,IACAgF,IARItT,WAAa,IAAFsO,EAAMwF,GAAoBpR,QAAQ,GASjDsR,QALcxM,KAAKyM,MAAMzQ,EAAUN,EAAW,MAQhDM,IACA+Q,EAASlH,KAAKpF,KAAK0M,GAGrB1P,EAAWuD,EACXxD,EAAU0O,EAEa,OAAnB3P,IACFA,EAAiBtB,SAAS+F,EAAEuL,cAG9BpQ,EAAgB6D,KAAKC,IAAI9D,EAAc2K,OAQ7CjM,EAAU4F,KAAKsM,MAGjBhR,EAAYvD,WAAW2D,EAAcZ,GACrCW,EAAc,CAAC,GACNc,GAAE,EAAEA,IAAG,EAAEA,KAChBd,EAAYuE,KAAKzD,GAAEjB,GAr/Cb,OAw/CRlB,EAAU4F,KAAK,CACbwF,GAAG,OACHJ,KAAMvJ,EACNpD,MAAO,OAAOwF,IAAcC,MAAMhD,UAAU4P,KAAKrS,MAAMsN,IAAIC,KAAK,KAAK,MAIvE7L,EAAYkE,IAEZ1C,EAAkB,EAClBI,EAAsB,GACtBP,EAAY+C,IAAO1C,EAAcA,EAAcmC,OAAO,GAAGoI,EAAE,oBAAoBhH,KAAKb,IAAO1C,EAAc,GAAGuK,EAAE,oBAAoB,QAClIxK,EAAgB2D,KAAKC,IAAI,EAAED,KAAKU,KAAKzE,EAAUO,IAE/C7B,EAAa,CACXuN,OAAO,CACLC,KAAM,OACNhJ,OAAQ,kBAGViJ,QAAQ,mBACRC,QAAQ,SAAArN,GAAK,OAAIxC,WAAWwC,GAAOE,QAAQ,GAAG,KAC9CoN,OAAO,CACLH,KAAM,SACNI,SAAS,GAGX9G,SAAS,CACPN,OAAQ,GACRD,SAAU,EACVG,OAAQ,OACRD,YAAa,GACbO,aAAc,EACdL,cAAe,GACfC,WAAWrF,EACXsF,eAAgB,SAChBrC,OAAQ,SAAAnE,GAAK,OAAIxC,WAAWwC,GAAOE,QAAQ,GAAG,MAEhD+F,WAAY9F,EAAK1E,MAAMkD,SAAW,KAAO,CACvCwH,OAAQ,GACRD,SAAU,EACV/B,OAAQ,SAACnE,GACP,GAAIoB,IAAoBC,IAAkB,EACxC,OAAO2C,IAAOhE,EAAM,oBAAoBmE,OAAO,WAGnDiC,YAAa,GACbE,aAAc,EACdD,OAAQ,SACRE,WAAU,YACVC,eAAgB,UAElBtF,cACA8G,UAAU,EACVC,SAAQ,EACRC,SAAQ,EACRC,WAAW,IACXC,MAAM,YACNC,YAAW,EACXC,aAAa,IACbC,aAAY,EACZC,aAAY,EACZC,iBAAiB,EACjBtB,OAAO,SAAAnB,GAAC,OAAIA,EAAE9H,OACdwK,mBAAmB,GACnBC,QAAQ,CACN,CACEG,WAAY,GACZG,WAAY,GACZC,aAAc,EACdC,UAAW,MACXC,OAAQ,cACRC,YAAa,SACbC,cAAenJ,EAAK1E,MAAM4C,MAAM8I,OAAOhB,OACvC0C,UAAW1I,EAAK1E,MAAMkD,SAAW,GAAK,IACtCoK,WAAY5I,EAAK1E,MAAMkD,UAAY,GAAK,EACxCqK,WAAY7I,EAAK1E,MAAMkD,SAAW,GAAK,GACvC4K,QAAS,CACP,CACEC,GAAI,QACJzL,MAAO,CACLuL,cAAwC,UAAzBnJ,EAAK1E,MAAMgO,UAAwB,OAAS,YAMrEpL,MAAM,CACJyI,KAAM,CACJ4C,MAAO,CACLC,KAAM,CACJ/K,SAAUuB,EAAK1E,MAAMkD,SAAW,GAAI,GACpCH,WAAW,IACX0I,KAAK/G,EAAK1E,MAAM4C,MAAM8I,OAAOhB,OAC7B/H,WAAY+B,EAAK1E,MAAM4C,MAAMC,MAAMsL,aAIzCC,KAAM,CACJC,KAAM,CACJrC,OAAQtH,EAAK1E,MAAM4C,MAAM8I,OAAO4C,gBAAiBrC,gBAAiB,SAGtEiB,QAAQ,CACNgB,KAAK,CACH/K,SAAUuB,EAAK1E,MAAMkD,SAAW,GAAI,GACpCuI,KAAK/G,EAAK1E,MAAM4C,MAAM8I,OAAOhB,OAC7B3H,WAAW,IACXJ,WAAY+B,EAAK1E,MAAM4C,MAAMC,MAAMsL,aAIzCS,WAAW,CAAEC,KAAM,QAASC,UAAW,IACvCC,OAAQrK,EAAK1E,MAAMkD,SAAW,CAAE8L,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAAO,CAAEH,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IACrH4C,aAAa,SAACC,GAAc,IAClBC,EAAUD,EAAVC,MACF1C,EAAQ0C,EAAMC,OAAO,GAC3B,OACEvC,EAAAxO,EAAAC,cAACwO,EAAA,EAAD,CACEL,MAAOA,GAGiB,kBAAjB0C,EAAMC,QAAuBD,EAAMC,OAAOlK,QAC/CiK,EAAMC,OAAOjC,IAAI,SAAAV,GACf,IAAM+C,EAAe/C,EAAM4C,QACrB8C,EAAkB1F,EAAMH,KAAKiD,WAC7BwE,EAActH,EAAMH,KAAKiG,IAC/B,OACE1F,EAAAxO,EAAAC,cAACyO,EAAA,EAAD,CACE8C,IAAKpD,EAAMC,GACXlF,MAAOgI,EACP7P,MAAO8M,EAAM9M,MACb8B,MAAK,GAAAqO,OAAKqC,EAAL,aAAArC,OAAgCiE,EAAhC,yBA5nDbnP,EAAAK,OAAA,6BAwoDRrC,EAAgB,EACZ4B,GAAkB,KAEtBzB,EAAgBd,EAAWkL,IAAI,SAAC1F,EAAEhE,GAEhC,IAAI8J,EAAI,EACJgF,EAAM,EACNK,EAAO,EACLtF,EAAI7H,IAAmB,IAAZgC,EAAEpE,WAAgBuC,OAAO,oBACpCoO,EAAapS,EAAK7E,cAAcmJ,iBAAiBuB,EAAE2F,UAAUxL,EAAK1E,MAAM6H,YAAYpG,UAErF6F,IAGH+I,EAAItO,WAAW+U,EAAW/V,IAAIuG,IAAiB+B,MAAM,GAAGvI,MAAM,MAE9D4U,GAAQnL,EAAEpE,UAAUpB,EAAW,GAAGoB,WAAW,MAE7CkP,EADgByB,EAAW/V,IAAIuG,IAAiB+B,MAAM,GAAGvI,MAAM,KACjDA,MAAM,KAAKC,IAAI2U,GAAMjR,QAAQ,IAN3C6C,GAAkBwP,EAWG,OAAnBhR,IACFA,EAAiBtB,SAAS+F,EAAEuL,cAG9BpQ,EAAgB6D,KAAKC,IAAI9D,EAAc2K,GAEvC,IAAM0F,EAAUxM,KAAKyM,MAAMzQ,EAAUN,EAAW,KAC1C6Q,EAAcvL,EAAEuL,YAItB,OAFAvQ,IAEO,CAAE6K,IAAGC,IAAGgF,MAAKS,cAAaC,aAI/B5Q,EAAY4O,qBAAuB5O,EAAY4O,oBAAoB/L,OAAO,GAC5E7C,EAAY4O,oBAAoBlL,QAAS,SAAAmL,GACvC,IAAMzB,EAAe7N,EAAK1E,MAAM6H,YAAY3C,UAAU8N,KAAM,SAAAzC,GAAC,OAAKA,EAAEgB,OAASyC,EAAmBC,WAC5F1B,GAAgByB,EAAmBE,cAAcC,SAASzP,EAAK1E,MAAM2E,iBACvEqP,EAAmBI,SAAU,EAC7BJ,EAAmBnD,QAAU0B,EAAa1B,QAC1C3L,EAAUmP,QAAQL,MAprDhBtM,EAAAE,KAAA,IAyrDFlD,EAAK7E,cAAckX,aAAa7R,EAAhC,eAAA8R,EAAAxT,OAAAyT,EAAA,EAAAzT,CAAAgE,EAAArG,EAAA+V,KAA0C,SAAAC,EAAO5G,GAAP,IAAAgC,EAAAgC,EAAA+B,EAAAC,EAAAa,EAAAC,EAAAb,EAAAC,EAAA,OAAAjP,EAAArG,EAAAsG,KAAA,SAAA6P,GAAA,cAAAA,EAAA3P,KAAA2P,EAAA1P,MAAA,WAExC2K,EAAetK,IAAcC,MAAMhD,UAAUqL,EAAEgB,OAEnC6C,QAJ4B,CAAAkD,EAAA1P,KAAA,eAAA0P,EAAAvP,OAAA,wBAQxCwM,EAAYhC,EAAagC,UAAYhC,EAAagC,UAAY,OAE9D+B,EAAW,CACf9G,GAAG+C,EAAajI,MAChB7H,MAAO,OAAO8P,EAAa9P,MAAMsN,IAAIC,KAAK,KAAK,IAC/CZ,KAAM,IAGR7J,EAAY,EACRgR,EAAa,EACjBjP,GAAkB,KACd8P,EAAc,KACdC,EAAiB,KACjBb,EAAoB,KACpBC,EAAqB,KAtBqBa,EAAA1P,KAAA,GAwBxClD,EAAK7E,cAAckX,aAAahS,EAAhC,eAAAwS,EAAA/T,OAAAyT,EAAA,EAAAzT,CAAAgE,EAAArG,EAAA+V,KAA2C,SAAAM,EAAOjN,GAAP,IAAAsI,EAAA8D,EAAAD,EAAAe,EAAAC,EAAAtH,EAAAC,EAAAgF,EAAAsC,EAAAjC,EAAAE,EAAAG,EAAA,OAAAvO,EAAArG,EAAAsG,KAAA,SAAAmQ,GAAA,cAAAA,EAAAjQ,KAAAiQ,EAAAhQ,MAAA,QAEzCiL,EAAetI,EAAEkG,cAAcuC,KAAK,SAACwC,EAAMpF,GAC/C,OAAOoF,EAAM7E,aAAaC,gBAAkBL,EAAEM,QAAQD,kBAGpCiC,EAAa0B,KAE1BiC,IACHA,EAAoB3D,GAGCnO,EAAK7E,cAAckR,MAAM8B,EAAa0B,IAAYpL,GAAG,KAI/C,OAAvBsN,IACFA,EAAqBjS,SAAS+F,EAAEuL,cACThQ,IACf6Q,EAAkB9Q,EAAcmN,KAAK,SAAA4D,GACzC,OAAOA,EAAGd,aAAaW,OAGvBF,EAAaI,EAAgBtG,GAKrB,GACVoH,EAAoB5E,EAAagF,MACjCH,EAAkBhT,EAAK7E,cAAcmJ,iBAAiByO,EAAkBlH,EAAE9O,UACxE2O,EAAI7H,IAAmB,IAAZgC,EAAEpE,WAAgBuC,OAAO,oBAGtC6J,GAAgBA,EAAanD,MAAQmD,EAAanD,KAAKmB,EAAEM,QAAQD,gBAAkB2B,EAAanD,KAAKmB,EAAEM,QAAQD,eAAerG,EAAEuL,eAClI2B,EAAoB/S,EAAK7E,cAAckR,MAAM9I,IAAcC,MAAMhD,UAAUqL,EAAEgB,MAAMnC,KAAKmB,EAAEM,QAAQD,eAAerG,EAAEuL,cACnH4B,EAAkBhT,EAAK7E,cAAcmJ,iBAAiByO,EAAkBlH,EAAE9O,WAiBxE4O,EAAIkG,EACJlB,EAAM,EAEL/N,IAGCoQ,EAAgB/C,GAAG0C,IACrB/P,GAAkBoQ,EACZC,EAAYrB,EAASlH,KAAKkH,EAASlH,KAAKpH,OAAO,GAAGqI,EAAEiG,EAASlH,KAAKkH,EAASlH,KAAKpH,OAAO,GAAGqI,EAChGA,EAAI+G,EAAY/G,EAAEsH,EAClBpB,EAAalG,GAEbA,GAAKtO,WAAW2V,EAAgB3W,IAAIuG,IAAiB+B,MAAM,GAAGvI,MAAM,MAGhE4U,GAAQnL,EAAEpE,UAAUpB,EAAW,GAAGoB,WAAW,MAC7CyP,EAAU8B,EAAgB3W,IAAIuG,IAAiB+B,MAAM,GAAGvI,MAAM,KACpEuU,EAAMO,EAAQ9U,MAAM,KAAKC,IAAI2U,GAAMjR,QAAQ,IAb3C6C,GAAkBoQ,EAgBpBrH,EAAI9G,KAAKC,IAAI,EAAE6G,GACf3K,EAAgB6D,KAAKC,IAAI9D,EAAc2K,GAEjC0F,EAAUxM,KAAKyM,MAAMzQ,EAAUN,EAAW,KAShDM,IACA6R,EARAV,EAAU,CACRtG,IACAC,IACAgF,MACAU,WAKFO,EAASlH,KAAKpF,KAAK0M,GACnBW,EAAiBK,IAxF0B,wBAAAE,EAAAE,SAAAN,EAAA1X,SAA3C,gBAAAiY,GAAA,OAAAR,EAAAS,MAAAlY,KAAAmY,YAAA,IAxBwC,QAqH9C7T,EAAU4F,KAAKsM,GArH+B,yBAAAgB,EAAAQ,SAAAX,EAAArX,SAA1C,gBAAAoY,GAAA,OAAAlB,EAAAgB,MAAAlY,KAAAmY,YAAA,IAzrDE,SAmzDR,IAFA3S,EAAYvD,WAAW2D,EAAcZ,GACrCW,EAAc,CAAC,GACNc,GAAE,EAAEA,IAAG,EAAEA,KAChBd,EAAYuE,KAAKzD,GAAEjB,GApzDb,OAuzDRlB,EAAU4F,KAAK,CACbwF,GAAG,OACH/M,MAAO,OAAOwF,IAAcC,MAAMhD,UAAU4P,KAAKrS,MAAMsN,IAAIC,KAAK,KAAK,IACrEZ,KAAMvJ,IAIR1B,EAAYkE,IAEZnE,EAAa,CACXuN,OAAO,CACLC,KAAM,OACNhJ,OAAQ,kBAGViJ,QAAQ,mBACRC,QAAQ,SAAArN,GAAK,OAAIxC,WAAWwC,GAAOE,QAAQ,GAAG,KAC9CoN,OAAO,CACLH,KAAM,SACNI,SAAS,GAGX9G,SAAS,CACPN,OAAQ,GACRD,SAAU,EACVG,OAAQ,OACRD,YAAa,GACbO,aAAc,EACdL,cAAe,GACfC,WAAWrF,EACXsF,eAAgB,SAChBrC,OAAQ,SAAAnE,GAAK,OAAIxC,WAAWwC,GAAOE,QAAQ,GAAG,MAEhD+F,WAAY9F,EAAK1E,MAAMkD,SAAW,KAAO,CACvCwH,OAAQ,GACRD,SAAU,EACV/B,OAAQ,QACRiC,YAAa,GACbE,aAAc,EACdD,OAAQ,SACRG,eAAgB,SAChBD,WAAYpG,EAAK1E,MAAMkD,SAAW,eAAmBwB,EAAK1E,MAAMmY,aAAe,eAAiB,gBAElG1S,cACA8G,UAAU,EACVC,SAAQ,EACRC,SAAQ,EACRC,WAAW,IACXC,MAAM,YACNC,YAAW,EACXC,aAAa,IACbC,aAAY,EACZC,aAAY,EACZC,iBAAiB,EACjBtB,OAAO,SAAAnB,GAAC,OAAIA,EAAE9H,OACdwK,mBAAmB,GACnBC,QAAQ,CACN,CACEG,WAAY,GACZD,UAAW1I,EAAK1E,MAAMkD,SAAW,GAAK,IACtCoK,WAAY5I,EAAK1E,MAAMkD,UAAY,GAAK,EACxCqK,WAAY7I,EAAK1E,MAAMkD,SAAW,GAAK,GACvCsK,WAAY,GACZC,aAAc,EACdC,UAAW,MACXC,OAAQ,cACRC,YAAa,SACbC,cAAenJ,EAAK1E,MAAM4C,MAAM8I,OAAOhB,OACvCoD,QAAS,CACP,CACEC,GAAI,QACJzL,MAAO,CACLuL,cAAwC,UAAzBnJ,EAAK1E,MAAMgO,UAAwB,OAAS,YAMrEpL,MAAM,CACJyI,KAAM,CACJ4C,MAAO,CACLC,KAAM,CACJ/K,SAAUuB,EAAK1E,MAAMkD,SAAW,GAAI,GACpCH,WAAW,IACX0I,KAAK/G,EAAK1E,MAAM4C,MAAM8I,OAAOhB,OAC7B/H,WAAY+B,EAAK1E,MAAM4C,MAAMC,MAAMsL,aAIzCC,KAAM,CACJC,KAAM,CACJrC,OAAQtH,EAAK1E,MAAM4C,MAAM8I,OAAO4C,gBAAiBrC,gBAAiB,SAGtEiB,QAAQ,CACNgB,KAAK,CACHnL,WAAW,IACX0I,KAAK/G,EAAK1E,MAAM4C,MAAM8I,OAAOhB,OAC7B6D,cAAc,aACd5L,WAAY+B,EAAK1E,MAAM4C,MAAMC,MAAMsL,UACnChL,SAAUuB,EAAK1E,MAAMkD,SAAW,GAAI,MAI1C0L,WAAW,CAAEC,KAAM,QAASC,UAAW,IACvCC,OAAQrK,EAAK1E,MAAMkD,SAAW,CAAE8L,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAAO,CAAEH,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IACrH4C,aAAa,SAACC,GAAc,IAClBC,EAAUD,EAAVC,MACF1C,EAAQ0C,EAAMC,OAAO,GAC3B,OACEvC,EAAAxO,EAAAC,cAACwO,EAAA,EAAD,CACEL,MAAOA,GAGiB,kBAAjB0C,EAAMC,QAAuBD,EAAMC,OAAOlK,QAC/CiK,EAAMC,OAAOjC,IAAI,SAAAV,GACf,IAAM+C,EAAe/C,EAAM4C,QACrB8C,EAAkB1F,EAAMH,KAAKiD,WAC7BwE,EAActH,EAAMH,KAAKiG,IAC/B,OACE1F,EAAAxO,EAAAC,cAACyO,EAAA,EAAD,CACE8C,IAAKpD,EAAMC,GACXlF,MAAOgI,EACP7P,MAAO8M,EAAM9M,MACb8B,MAAK,GAAAqO,OAAKqC,EAAL,aAAArC,OAAgCiE,EAAhC,yBAn7DbnP,EAAAK,OAAA,6BAAAL,EAAAK,OAAA,sBAi8DZrD,EAAK1D,SAAS,CACZmD,YACAD,aACAE,cAp8DU,0BAAAsD,EAAAoQ,SAAAjT,EAAA/E,oMAhCZA,KAAKkB,SAAS,CACZoD,UAAU,KACVD,UAAU,KACVD,WAAW,OAEbpE,KAAKI,YACLJ,KAAK8E,mMAGkBxE,6EACjBgY,EAAsBhY,EAAU+X,eAAiBrY,KAAKE,MAAMmY,aAC5DE,EAAoBjY,EAAU2E,aAAejF,KAAKE,MAAM+E,WACxDuT,EAAelY,EAAUuE,gBAAkB7E,KAAKE,MAAM2E,eAAiBnE,KAAKC,UAAUL,EAAUyH,eAAiBrH,KAAKC,UAAUX,KAAKE,MAAM6H,cAC7IwQ,GAAqBD,GAAuBE,IAC9CxY,KAAKyY,2JAOHzY,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,wCAi9D9C,OACE2P,EAAAxO,EAAAC,cAACoX,EAAA,EAADhV,OAAAC,OAAA,CACEgV,YAAY,GACR3Y,KAAKJ,MAAMwE,WAFjB,CAGEsP,OAAQ1T,KAAKE,MAAMwT,OACnB9B,KAAM5R,KAAKJ,MAAMyE,UACjBiL,KAAMtP,KAAKJ,MAAM0E,UACjB9C,MAAOxB,KAAKJ,MAAM2E,WAClBnB,SAAUpD,KAAKE,MAAMkD,SACrBwV,SAAU5Y,KAAKE,MAAM0Y,SACrBC,eAAgB7Y,KAAKE,MAAM2Y,yBA5/DV3U,8BC0MV4U,6MA5MblZ,MAAQ,CACNmZ,SAAQ,EACRC,WAAW,CACTC,UAAU,CACRC,OAAO,KACPH,SAAQ,IAGZI,gBAAgB,QAIlBpZ,cAAgB,OAChBqZ,oBAAqB,IAoCrBC,oCAAiB,SAAA3B,IAAA,IAAAyB,EAAA,OAAAzR,EAAArG,EAAAsG,KAAA,SAAAmQ,GAAA,cAAAA,EAAAjQ,KAAAiQ,EAAAhQ,MAAA,cACflD,EAAK0U,aAAa,CAChBP,SAAQ,IAFKjB,EAAAhQ,KAAA,EAKelD,EAAK7E,cAAcsZ,eAAezU,EAAK1E,MAAM6H,aAL5D,OAKToR,EALSrB,EAAAyB,KAOf3U,EAAK0U,aAAa,CAChBP,SAAQ,EACRI,oBATa,wBAAArB,EAAAE,SAAAN,EAAA1X,WAajBiZ,gDAAY,SAAA5B,EAAOmC,GAAP,IAAAC,EAAAC,EAAA,OAAAhS,EAAArG,EAAAsG,KAAA,SAAA6P,GAAA,cAAAA,EAAA3P,KAAA2P,EAAA1P,MAAA,cACV0R,EAAEG,iBAEIF,EAAW,SAACG,EAAGC,GAEnB,GAAID,EAAG,CAEL,IAAME,EAAY,CAChBC,WAAYH,EAAGI,OACfC,cAAe,YACfC,YAAatV,EAAK1E,MAAM2E,eAKtBgV,IACFC,EAAUC,WAAanV,EAAK7E,cAAcoa,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUE,SACrBpV,EAAK7E,cAAcqa,yBAAyBN,GAG5B,YAAdF,EAAGI,OAELK,OAAOC,cAAcC,WAArB,sBAAuD,CACrDC,iBAAgB,4BAChBC,WAAY,QACZC,WAAY,GACZC,WAAY,GACZC,QAAS,YAGXP,OAAOC,cAAcC,WAArB,kBAAmD,CACjDC,iBAAgB,yCAChBC,WAAY,QACZC,WAAY,GACZC,WAAY,GACZC,QAAS,YAKfhW,EAAK0U,aAAa,SAAC/Y,GAAD,MAAgB,CAChCyY,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADL,CAERC,UAAU,CACRC,OAAO,KACPH,SAAQ,QAKdnU,EAAKyU,kBAGDK,EAAmB,SAACE,GACxB,IAAMV,EAASU,EAAGiB,gBAClBjW,EAAK0U,aAAa,SAAC/Y,GAAD,MAAgB,CAC9ByY,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADL,CAERC,UAAUvV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACLnD,EAAUyY,WAAWC,UADjB,CAEPC,iBAhEA1B,EAAA1P,KAAA,EAuEJlD,EAAK0U,aAAa,CACtBN,WAAW,CACTC,UAAU,CACRC,OAAO,KACPH,SAAQ,MA3EJ,OAgFVnU,EAAK1E,MAAM4a,0BAA0BlW,EAAK1E,MAAM6H,YAAYiN,KAAK+F,MAAO,YAAa,GAAI,KAAOtB,EAAUC,GAhFhG,wBAAAlC,EAAAQ,SAAAX,EAAArX,0IA9CNA,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,8JAK9CF,KAAKoZ,oBAAqB,yPAI1BpZ,KAAKI,YACLJ,KAAKqZ,sMAGkB/Y,EAAUC,yEACjCP,KAAKI,YAEC4a,EAAiB1a,EAAU2a,UAAYjb,KAAKE,MAAM+a,SACnC3a,EAAUuE,gBAAkB7E,KAAKE,MAAM2E,eACxCmW,IAClBhb,KAAKqZ,mMAIU6B,wFAASzB,iCAAS,KAC9BzZ,KAAKoZ,4DACDpZ,KAAKkB,SAASga,EAASzB,oCAEzB,0IAmGA,IAAAtY,EAAAnB,KACP,OACE6P,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3H,GAAI,EACJhS,MAAO,EACP4Z,UAAW,QACXtX,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAGhB/D,KAAKJ,MAAMmZ,QACTlJ,EAAAxO,EAAAC,cAACga,EAAA,EAAD,CACEC,UAAW,CACTF,cAAc,OAEhBG,YAAa,CACXvX,KAAK,QAEPwX,UAAW,CACTC,GAAG,GAELtN,KAAM,0BAGRpO,KAAKJ,MAAMoZ,WAAWC,UAAUF,QAC9BlJ,EAAAxO,EAAAC,cAACqa,EAAA,EAADjY,OAAAC,OAAA,GAAmB3D,KAAKE,MAAxB,CAA+B0b,SAAQ,yBAA4BC,WAAU,kCAAqCC,KAAM9b,KAAKJ,MAAMoZ,WAAWC,UAAUC,UAExJrJ,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJC,GAAI,EACJ7Y,UAAW,UAEVnD,KAAKJ,MAAMuZ,gBAAkB,uDAAyD,iCAEzFtJ,EAAAxO,EAAAC,cAAC2a,EAAA,EAAD,CACEC,YAAa,CACX1a,MAAM,OACN2a,UAAUnc,KAAKJ,MAAMuZ,iBAEvBiD,YAAa,SAAA5C,GAAC,OAAIrY,EAAK8X,UAAUO,KALnC,sBA5LUtV,wIC0ITmY,sNAhIbzc,MAAQ,CACN0c,eAAe,GACfC,OAAO,CACLC,UAAW5X,EAAK1E,MAAMsc,UAAY5X,EAAK1E,MAAMsc,UAAY,IAAIlG,KAC7DmG,QAAS7X,EAAK1E,MAAMuc,QAAU7X,EAAK1E,MAAMuc,QAAU,IAAInG,KACvDzD,IAAK,aAEP6J,QAAQhZ,OAAO4B,KAAKV,EAAK1E,MAAMyc,iBAAiBxM,IAAK,SAAA1L,GAAK,MAAK,CAAEA,QAAM+F,MAAM5F,EAAK1E,MAAMyc,gBAAgBlY,GAAO+F,YA0CjHoS,mBAAqB,SAACtc,GAChBA,EAAUkc,YAAc5X,EAAK1E,MAAMsc,WAAalc,EAAUmc,UAAY7X,EAAK1E,MAAMuc,SACnF7X,EAAK1D,SAAS,CACZqb,OAAO,CACLC,UAAW5X,EAAK1E,MAAMsc,UAAY5X,EAAK1E,MAAMsc,UAAY,IAAIlG,KAC7DmG,QAAS7X,EAAK1E,MAAMuc,QAAU7X,EAAK1E,MAAMuc,QAAU,IAAInG,KACvDzD,IAAK,4FA7CA0J,GACXvc,KAAKkB,SAAS,CACZob,eAAe,GACfC,OAAOA,EAAOM,sDAIArD,GAAE,IAAArY,EAAAnB,KACdwc,EAAY,KACZC,EAAUhU,IAAO,IAAI6N,MACnBgG,EAAiB9C,EAAEsD,OAAOrY,MAEhC,GAAI6X,GAAkBtc,KAAKE,MAAMyc,gBAAgBL,GAAgB,CAC/D,IAAMS,EAAuB/c,KAAKE,MAAMyc,gBAAgBL,GACxDE,EAAYC,EAAQO,QAAQC,SAASF,EAAqBtY,MAAMsY,EAAqBnL,WAErF4K,EAAY,KACZC,EAAU,KAGZ,GAAID,GAAaC,EAAQ,CAIvB,IAAMF,EAAS,CACbC,UAJFA,EAAYA,EAAU9T,GAKpB+T,QAJFA,EAAUA,EAAQ/T,GAKhBmK,IAAI,aAGN7S,KAAKkB,SAAS,CACZqb,SACAD,kBACC,WACDnb,EAAK+b,qDAkBT,IAAMhC,EAAWlb,KAAKE,MAAMid,aAAand,KAAKJ,MAAM2c,OAAOvc,KAAKJ,MAAM0c,gBAChEC,EAAS,CACbC,UAAUtB,EAASkC,kBAAoBlC,EAASkC,kBAAkB1U,GAAK,IAAI4N,KAC3EmG,QAAQvB,EAASmC,gBAAkBnC,EAASmC,gBAAgB3U,GAAK,IAAI4N,KACrEzD,IAAK,aAEP7S,KAAKkB,SAAS,CACZqb,WAEFvc,KAAKE,MAAMgd,8CAGJ,IAAAI,EAAAtd,KACP,OACE6P,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CAAOoC,OAAQvd,KAAKE,MAAMqd,QACxB1N,EAAAxO,EAAAC,cAACkc,EAAA,EAAD,CAAWC,UAAWzd,KAAKE,MAAMgd,YAC/BrN,EAAAxO,EAAAC,cAACkc,EAAA,EAAUE,OAAX,CAAkBC,MAAO,sBAEzB9N,EAAAxO,EAAAC,cAACkc,EAAA,EAAUI,KAAX,KACE/N,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CAAM3Z,MAAO,EAAG6Z,cAAe,SAAUvX,WAAY,UACnD+L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CAAO3Q,MAAM,uBAAuBhI,MAAO,CAACE,QAAQ,OAAOlB,MAAM,OAAOsC,WAAW,UAAUC,eAAe,WAC1G8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Y,MAAO,CACLa,SAAS,OACTqQ,OAAO,QACP9E,UAAU,OACVjM,MAAM3C,KAAKE,MAAM4C,MAAM8I,OAAO5I,QAC9B6a,gBAAgB7d,KAAKE,MAAM4C,MAAM8I,OAAOkS,QAE1Ctc,MAAO,OACPuc,UAAU,EACVrB,QAAS1c,KAAKJ,MAAM8c,QACpBjY,MAAOzE,KAAKJ,MAAM0c,eAClB0B,SAAUhe,KAAKie,kBAAkBC,KAAKle,SAG1C6P,EAAAxO,EAAAC,cAAC6c,EAAA,UAAD,CACE5B,OAAQ,CAACvc,KAAKJ,MAAM2c,QACpB6B,QAASpe,KAAKE,MAAMke,QACpBC,QAASre,KAAKE,MAAMme,QACpBC,UAAWte,KAAKE,MAAMgO,UACtB8P,SAAUhe,KAAKmd,aAAae,KAAKle,UAIvC6P,EAAAxO,EAAAC,cAACkc,EAAA,EAAUe,OAAX,KACE1O,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CAAM3H,GAAI,CAAC,EAAE,GAAI6H,cAAe,CAAC,SAAU,OAAQ7Z,MAAO,EAAGuC,eAAgB,UAC3E8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEqD,GAAI,EACJC,GAAI,CAAC,EAAG,GACRC,aAAc,EACdC,UAAW,OACXC,QAAU,SAAApF,GAAC,OAAI8D,EAAKJ,WAAW1D,IAC/BvV,KAAMjE,KAAKE,MAAMkD,SAAW,QAAU,UANxC,oBA/Geyb,IAAM3a,+BCsmDpB4a,6MA7lDblf,MAAQ,CACNyQ,IAAI,KACJsF,IAAI,KACJC,KAAK,IACLmJ,MAAM,KACNjJ,QAAQ,KACRsI,QAAQ,KACRC,QAAQ,KACRW,YAAY,EACZC,WAAW,IACXC,aAAa,GACbja,WAAW,KACXka,cAAc,EACd7W,YAAY,KACZ8W,cAAc,GACdC,aAAa,KACbjZ,aAAa,KACbiS,cAAa,EACbiH,cAAc,KACdC,cAAc,KACdjD,eAAe,KACfnW,eAAe,KACfkX,gBAAgB,KAChBlE,gBAAgB,KAChBqG,mBAAmB,EACnBpC,kBAAkB,KAClBqC,sBAAqB,EACrBva,sBAAsB,KACtBwa,sBAAqB,KAGvB/C,gBAAkB,CAChBgD,IAAI,CACFlb,MAAM,EACNmN,KAAK,MACLpH,MAAM,YAERoV,KAAK,CACHnb,MAAM,EACNmN,KAAK,OACLpH,MAAM,aAERqV,MAAM,CACJpb,MAAM,EACNmN,KAAK,OACLpH,MAAM,gBAERsV,MAAM,CACJrb,MAAM,EACNmN,KAAK,QACLpH,MAAM,cAERuV,IAAI,CACFnO,KAAK,MACLpH,MAAM,eACN/F,MAAMgE,MAASa,KAAKb,IAAO,aAAa,cAAc,YAK1D1I,cAAgB,OAChBqZ,mBAAqB,OAqIrB4G,aAAe,SAACzD,GAA+B,IAAxBD,EAAwBnE,UAAAjQ,OAAA,QAAAwJ,IAAAyG,UAAA,GAAAA,UAAA,GAAT,KAE9BkH,EAAe5W,IAAON,IAAcC,MAAM4H,OAAOpL,EAAK1E,MAAM2E,eAAesB,gBAE7EiX,EAAoB3U,IAAO8T,EAAOC,WAAWyD,cAAcZ,GAAgB5W,IAAO8T,EAAOC,WAAa6C,EACtGhC,EAAkB5U,IAAO8T,EAAOE,SAEhCW,EAAkB8C,OAAO7C,IAC3BA,EAAgB8C,IAAI,EAAE,OAGxB9C,EAAkB5U,IAAO4U,EAAgBzU,OAAO,oBAAoB,oBAEhEwU,EAAkBlI,SAAStQ,EAAKhF,MAAMyf,gBACxCjC,EAAoBxY,EAAKhF,MAAMyf,cAG7BhC,EAAgBhH,QAAQzR,EAAKhF,MAAMwgB,cACrC/C,EAAkBzY,EAAKhF,MAAMwgB,YAG/B,IAAMja,EAAiBzB,SAAS0Y,EAAkB1U,GAAGC,UAAU,KAGzDuS,EAAW,CACfmE,eACAjZ,aAJmB1B,SAAS2Y,EAAgB3U,GAAGC,UAAU,KAKzD2T,iBACAnW,iBACAkX,kBACAD,qBAKF,OAFAxY,EAAK0U,aAAa4B,GAEXA,KAGTmF,qBAAuB,SAAC7G,GACtBA,EAAEG,iBACF/U,EAAK0U,aAAa,CAChBjB,cAAczT,EAAKhF,MAAMyY,kBAI7BiI,kBAAoB,SAACZ,GACfA,IAAyB9a,EAAKhF,MAAM8f,sBACtC9a,EAAK0U,aAAa,CAChBoG,4BAwDNa,gBAAkB,SAACtb,GACjB,OAAOA,EAAW4E,OAAO,SAAC2W,EAAE/Z,GAC1B,QAAS7B,EAAKhF,MAAMuG,gBAAkBqa,EAAEna,WAAazB,EAAKhF,MAAMuG,mBAAqBvB,EAAKhF,MAAMwG,cAAgBoa,EAAEna,WAAazB,EAAKhF,MAAMwG,mBAI9Iqa,eAAiB,SAAAnY,GACf1D,EAAK0U,aAAa,CAChBhR,mBAIJxD,iCAAc,SAAA4S,IAAA,IAAAvR,EAAAC,EAAAsa,EAAAxb,EAAAD,EAAA0b,EAAAC,EAAAhL,EAAAD,EAAAoJ,EAAA9V,EAAA4X,EAAAC,EAAAzQ,EAAA0Q,EAAAC,EAAAC,EAAAC,EAAAzM,EAAA0M,EAAArL,EAAAsL,EAAAC,EAAAC,EAAArC,EAAAsC,EAAAjC,EAAAC,EAAA,OAAA7X,EAAArG,EAAAsG,KAAA,SAAAmQ,GAAA,cAAAA,EAAAjQ,KAAAiQ,EAAAhQ,MAAA,UAEPlD,EAAK1E,MAAM2E,eAAkBD,EAAK1E,MAAM6H,YAFjC,CAAA+P,EAAAhQ,KAAA,eAAAgQ,EAAA7P,OAAA,UAGH,GAHG,cAUN9B,EAAiBvB,EAAKhF,MAAMwe,QAAU1Z,SAASE,EAAK7E,cAAcyP,YAAY5K,EAAK7E,cAAcyP,YAAY5K,EAAKhF,MAAMwe,SAASxV,OAAO,uBAAuB,uBAAuBF,GAAGC,UAAU,KAAQ,KAC3MvC,EAAexB,EAAKhF,MAAMye,QAAU3Z,SAASE,EAAK7E,cAAcyP,YAAY5K,EAAK7E,cAAcyP,YAAY5K,EAAKhF,MAAMye,SAASzV,OAAO,uBAAuB,uBAAuBF,GAAGC,UAAU,KAAQ,KAEzM+X,EAAS,CAAC,KAAK,MAAMrM,SAASzP,EAAKhF,MAAM0I,cAAgD,SAAhC1D,EAAK1E,MAAMshB,iBAb9D1J,EAAAhQ,KAAA,EAcsBlD,EAAK7E,cAAc0hB,gBAAgB7c,EAAK1E,MAAM6H,YAAYgJ,QAAQ2P,EAAOva,EAAeC,GAAa,EAAK,MAdhI,UAcRlB,EAdQ4S,EAAAyB,MAgBNtU,EAAaL,EAAK2b,gBAAgBrb,KAIpBA,GAA0BD,EAAWiD,QAAWhD,EAAsBgD,OApB9E,CAAA4P,EAAAhQ,KAAA,gBAAAgQ,EAAA7P,OAAA,UAqBH,GArBG,eAwBN0Y,EAAc1b,EAAW,GACzB2b,EAAald,OAAOkG,OAAO3E,GAAYyc,MAE7CrH,OAAO5R,OAASA,IAGH,KADTmN,GAAQgL,EAAWva,UAAUsa,EAAYta,WAAW,SAEtDuP,EAAO,GAGLD,EAAM,KACNoJ,EAAQ,MAEN9V,EAAarE,EAAK7E,cAAcmJ,iBAAiB0X,EAAWzX,WAAW,IACvE0X,EAAiBjc,EAAK7E,cAAcmJ,iBAAiByX,EAAYvQ,UAAUxL,EAAK1E,MAAM6H,YAAYpG,UAClGmf,EAAgBlc,EAAK7E,cAAcmJ,iBAAiB0X,EAAWxQ,UAAUxL,EAAK1E,MAAM6H,YAAYpG,UAGlG0O,EAAMpH,EAAWjI,MAAM8f,GA1CfhJ,EAAAhQ,KAAA,GA6CAlD,EAAK7E,cAAc4hB,oBAAoBtR,EAAIzL,EAAK1E,MAAM2E,cAAcD,EAAK1E,MAAM6H,YAAY2Y,GA7C3F,eA6CZrQ,EA7CYyH,EAAAyB,KA+CNwH,EAAenc,EAAK1E,MAAM6H,YAAY3C,UAAUyE,OAAO,SAAC4G,GAAQ,MAAkB,aAAXA,EAAEgB,OAAuB,GAChGuP,EAAoBD,EAAeJ,EAAYhQ,cAAc9G,OAAO,SAAC4G,GAAQ,OAAOA,EAAEI,aAAaC,gBAAkBiQ,EAAahQ,QAAQD,gBAAiB,GAAK,KAChKmQ,EAAmBF,EAAeH,EAAWjQ,cAAc9G,OAAO,SAAC4G,GAAQ,OAAOA,EAAEI,aAAaC,gBAAkBiQ,EAAahQ,QAAQD,gBAAiB,GAAK,KAErI,OAA3BlM,EAAKhF,MAAM0I,aAQbqN,GANAA,EAAM1Q,EAAW2O,OAAQ,SAACgO,EAAIpB,GAC5B,IAAMvL,EAAWrQ,EAAK7E,cAAcmJ,iBAAiBsX,EAAEvL,SAAS,IAChE,OAAOrQ,EAAK7E,cAAckR,MAAM2Q,GAAK7gB,KAAKkU,IAC1C,IAGQhU,IAAIgE,EAAWiD,QAErB6Y,IACIG,EAAuB/Y,IAAcC,MAAMhD,UAAUyc,iBACrDpN,EAAYyM,EAAqBzM,UAAYyM,EAAqBzM,UAAY,OAqBpF0M,GAnBIA,EAAiBlc,EAAW2O,OAAQ,SAACgO,EAAIpB,GAE3C,IAAMsB,EAAetB,EAAE7P,cAAcuC,KAAK,SAACwC,EAAMpF,GAC/C,OAAOoF,EAAM7E,aAAaC,gBAAkBiQ,EAAahQ,QAAQD,gBAG/DiR,EAAoC,kBAAdtN,GAA0BA,EAAUvM,OAASuM,EAAUb,OAAO,SAACe,EAAIC,GAC3F,OAAIkN,GAAgBA,EAAalN,GACxBhQ,EAAK7E,cAAckR,MAAM0D,GAAK5T,KAAK6D,EAAK7E,cAAckR,MAAM6Q,EAAalN,KAE3EhQ,EAAK7E,cAAckR,MAAM0D,IAChC,GAAK/P,EAAK7E,cAAckR,MAAM6Q,EAAarN,IAI7C,OAFAsN,EAAend,EAAK7E,cAAcmJ,iBAAiB6Y,EAAa,IAEzDnd,EAAK7E,cAAckR,MAAM2Q,GAAK7gB,KAAKghB,IAC1C,IAG8B9gB,IAAIgE,EAAWiD,QAK/C6W,EAAQpJ,EAAIpM,MAAM4X,GACdlf,WAAW8c,GAAO,IACpBA,EAAQ,GAEVA,EAAQA,EAAMpa,QAAQ,IAGxBgR,EAAMA,EAAIhR,QAAQ,KAGZmR,EAAUgL,EAAc7f,IAAI4f,GAAgBtX,MAAM,GAAGvI,MAAM,KACjE2U,EAAMG,EAAQ9U,MAAM,KAAKC,IAAI2U,GAAMjR,QAAQ,GAEvCqc,GAAqBC,IACjBG,EAAqBxc,EAAK7E,cAAcmJ,iBAAiB8X,EAAkBjJ,MAAMnT,EAAK1E,MAAM6H,YAAYpG,UACxG0f,EAAoBzc,EAAK7E,cAAcmJ,iBAAiB+X,EAAiBlJ,MAAMnT,EAAK1E,MAAM6H,YAAYpG,UACtG2f,EAAcD,EAAkBpgB,IAAImgB,GAAoB7X,MAAM,GAAGvI,MAAM,KAC7E+d,EAAQjJ,EAAQvM,MAAM+X,GAAatgB,MAAM,KAAKC,IAAI2U,GAC9C3T,WAAW8c,GAAO,IACpBA,EAAQ,GAEVA,EAAQA,EAAMpa,QAAQ,KAKtBsa,EAAa,EACjBha,EAAW8D,QAAQ,SAACC,EAAIgZ,GACtB,GAAIA,EAAM,CACR,IAAMC,EAAUhd,EAAW+c,EAAM,GAE3BrO,EAAkB3K,EAAI2H,cAAciD,OAAO,SAACC,EAAYjD,GAC5D,IAAMO,EAAavM,EAAK7E,cAAcmJ,iBAAiB0H,EAAmBO,WAAWvM,EAAK1E,MAAM6H,YAAYpG,UAC5G,OAAOiD,EAAK7E,cAAckR,MAAM4C,GAAa9S,KAAKoQ,IAClD,GAEI+Q,EAAsBD,EAAQtR,cAAciD,OAAO,SAACC,EAAYjD,GACpE,IAAMO,EAAavM,EAAK7E,cAAcmJ,iBAAiB0H,EAAmBO,WAAWvM,EAAK1E,MAAM6H,YAAYpG,UAC5G,OAAOiD,EAAK7E,cAAckR,MAAM4C,GAAa9S,KAAKoQ,IAClD,GAEEgR,GAAgB,EACpBnZ,EAAI2H,cAAc5H,QAAS,SAAA0H,GACzB,IAAI0R,EAAJ,CAGA,IAAMC,EAAQH,EAAQtR,cAAcuC,KAAM,SAAAkP,GAAK,OAAKA,EAAMvR,aAAaC,gBAAkBL,EAAEI,aAAaC,gBAClGK,EAAavM,EAAK7E,cAAcmJ,iBAAiBuH,EAAEU,WAAWvM,EAAK1E,MAAM6H,YAAYpG,UACrF0gB,EAAiBD,EAAQxd,EAAK7E,cAAcmJ,iBAAiBkZ,EAAMjR,WAAWvM,EAAK1E,MAAM6H,YAAYpG,UAAYiD,EAAK7E,cAAckR,MAAM,GACzHvM,SAASzC,WAAWkP,EAAWlQ,IAAI0S,GAAiB3S,MAAM,SACtD0D,SAASzC,WAAWogB,EAAephB,IAAIihB,GAAqBlhB,MAAM,SAE3Fie,IACAkD,GAAgB,UAOlBZ,EAAkB,IACR3c,EAAK1E,MAAM2E,eAAiBD,EAAK1E,MAAM6H,YAtJ3C+P,EAAAhQ,KAAA,GAuJgBlD,EAAK7E,cAAcuiB,gBAAgB,KAAKf,EAAgB,OAvJxE,eAuJNjC,EAvJMxH,EAAAyB,QAyJVlJ,EAAMA,EAAItP,KAAKue,IAzJLxH,EAAAhQ,KAAA,GAsKclD,EAAK7E,cAAcwiB,iBAAiB3d,EAAK1E,MAAM6H,aAtK7D,SAsKRwX,EAtKQzH,EAAAyB,QAwKVgG,EAAgB3a,EAAK7E,cAAcsC,YAAYJ,WAAWsd,KAG5D3a,EAAK0U,aAAa,CAChBjJ,MACAsF,MACAC,OACAmJ,QACA9Z,aACAga,aACAK,gBACAC,gBACAra,0BApLU,yBAAA4S,EAAAE,SAAAN,EAAA1X,WAwLdwiB,kDAAc,SAAAnL,EAAOoL,EAAS1H,GAAhB,OAAArT,EAAArG,EAAAsG,KAAA,SAAA6P,GAAA,cAAAA,EAAA3P,KAAA2P,EAAA1P,MAAA,cAAA0P,EAAA1P,KAAA,EACNlD,EAAK1E,MAAMwiB,iBAAiBD,EAAS1H,GAD/B,OAEZnW,EAAK1E,MAAMyiB,YAAY5H,GAFX,wBAAAvD,EAAAQ,SAAAX,EAAArX,mEAKd4iB,eAAiB,SAAA9W,GACf,IAAIqT,EAAgBva,EAAKhF,MAAMuf,cAClB,SAATrT,GAAmBqT,EAAcva,EAAKhF,MAAMof,YAC9CG,IACkB,SAATrT,GAAmBqT,EAAc,GAC1CA,IAGF,IAAM0D,EAAWxI,OAAOyI,OAAP,6BAAAhQ,OAA2CqM,EAA3C,MACXK,GAAsBvd,WAAW4gB,EAASE,WAAW1T,MAAM,KAEjEzK,EAAK0U,aAAa,CAChB6F,gBACAK,mGAjcExf,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,mKAK9CF,KAAKI,qBACCJ,KAAKgjB,8JAIXhjB,KAAKoZ,oBAAqB,+EAGT8B,wFAASzB,iCAAS,KAC9BzZ,KAAKoZ,4DACDpZ,KAAKkB,SAASga,EAASzB,oCAEzB,wJAIPzZ,KAAKkB,SAAS,CACZue,sBAAqB,wDAIE,IAAAte,EAAAnB,KACnBof,EAAgBjX,IAAcC,MAAMC,SACtC4a,EAAgB,KAQpB,OAPAvf,OAAO4B,KAAK8Z,GAAerW,QAAS,SAAAma,GACd9D,EAAc8D,GAClBC,kBAAkB9O,SAASlT,EAAKjB,MAAMshB,oBACpDyB,EAAgBC,KAIbD,yCAGMC,GAKb,GAJKA,IACHA,EAAUljB,KAAKJ,MAAM0I,cAGlBH,IAAcC,MAAMC,SAAS6a,GAChC,OAAO,KAGT,IAAM7d,EAAc3B,OAAOC,OAAO,GAAGwE,IAAcC,MAAMC,SAAS6a,IAElE,GAAI7d,EAAY+d,kBAAoB/d,EAAY+d,iBAAiBpjB,KAAKE,MAAMshB,kBAAkB,CAC5F,IAAM6B,EAAmBhe,EAAY+d,iBAAiBpjB,KAAKE,MAAMshB,kBACjE9d,OAAO4B,KAAK+d,GAAkBta,QAAS,SAAAua,GACrCje,EAAYie,GAASD,EAAiBC,KAI1C,OAAOje,kKAKFrF,KAAKE,MAAM2E,eAAkB7E,KAAKE,MAAM6H,sDACpC,aAGHmT,EAAW,GACAqI,EAAavjB,KAAKE,MAA3BsjB,MAASD,OAEXE,EAAgC/f,OAAO4B,KAAKtF,KAAKE,MAAMqhB,iBAEvDgC,EAAOG,cAA4F,IAA7ED,EAA8BlS,QAAQgS,EAAOG,YAAYC,eACnFzI,EAASrW,cAAgB0e,EAAOG,YAAYC,cAE5CzI,EAASrW,cAAgB7E,KAAKE,MAAM2E,cAAc8e,cAGpDzI,EAASnT,YAAc/H,KAAKE,MAAMqhB,gBAAgBrG,EAASrW,eAC3DqW,EAASmE,aAAe5W,IAAON,IAAcC,MAAM4H,OAAOhQ,KAAKE,MAAM2E,eAAesB,eAAe,cACnG+U,EAASkF,WAAa3X,MAEtByS,EAASmC,gBAAkB5U,IAAOA,MAASG,OAAO,oBAAoB,oBAEtEsS,EAAS+H,cAAgBjjB,KAAK4jB,4BAC9B1I,EAAS5S,YAAyC,OAA3BtI,KAAKJ,MAAM0I,YAAuB4S,EAAS+H,cAAgBjjB,KAAKJ,MAAM0I,YAEvFjD,EAAcrF,KAAK6jB,eAAe3I,EAAS5S,aAI7C4S,EAAS5S,aAAejD,EAAYe,eAChC0d,EAAqBrb,IAAOA,IAAgC,IAAzBpD,EAAYe,cAAmBwC,OAAO,oBAAoB,oBAC/FsS,EAASmC,gBAAgBhH,QAAQyN,KACnC5I,EAASmC,gBAAkByG,EAC3B5I,EAAS9U,aAAe1B,SAASwW,EAASmC,gBAAgB3U,GAAGC,UAAU,MAGpEuS,EAASkF,aAAclF,EAASkF,WAAW/J,QAAQyN,KACtD5I,EAASkF,WAAa0D,IAI1B5I,EAAS9U,aAAe1B,SAASwW,EAASmC,gBAAgB3U,GAAGC,UAAU,KAGvEuS,EAASkC,kBAAoBlC,EAASmC,gBAAgBL,QAAQC,SAAS,EAAE,SACzE/B,EAAS/U,eAAiBzB,SAASwW,EAASkC,kBAAkB1U,GAAGC,UAAU,KAEvEuS,EAAS5S,aAAejD,EAAYc,iBAChC4d,EAAuBtb,IAAOA,IAAkC,IAA3BpD,EAAYc,gBAAqByC,OAAO,oBAAoB,oBACnGsS,EAASkC,kBAAkBlI,SAAS6O,KACtC7I,EAASkC,kBAAoB2G,EAC7B7I,EAAS/U,eAAiBzB,SAASwW,EAASkC,kBAAkB1U,GAAGC,UAAU,MAGzEuS,EAASmE,aAAanK,SAAS6O,KACjC7I,EAASmE,aAAe0E,IAI5B7I,EAASkD,QAAUlD,EAASmE,aAAa3W,GACzCwS,EAASmD,QAAUnD,EAASkF,WAAW1X,GAEnCwS,IAAalb,KAAKJ,wCACdI,KAAKsZ,aAAa4B,6PA2DrBlb,KAAKE,MAAM8jB,4BACdhkB,KAAKE,MAAM+jB,8BACJ,iBAcTjkB,KAAKI,qBACCJ,KAAKgjB,oBACXhjB,KAAK8E,cACL9E,KAAKkkB,wJAIL,IAAMlF,EAAchf,KAAKE,MAAMkD,SAAW,EAAI,EAC9CpD,KAAKsZ,aAAa,CAChB0F,mGAIqB1e,EAAUC,oFAC3BC,EAAuBF,EAAUE,uBAAyBR,KAAKE,MAAMM,qBACrE2jB,EAAkB7jB,EAAUkhB,mBAAqBxhB,KAAKE,MAAMshB,iBAC5DhJ,EAAelY,EAAUuE,gBAAkB7E,KAAKE,MAAM2E,eAAiBnE,KAAKC,UAAUL,EAAUyH,eAAiBrH,KAAKC,UAAUX,KAAKE,MAAM6H,aAC3Iqc,EAAc7jB,EAAU4F,iBAAmBnG,KAAKJ,MAAMuG,gBAAkB5F,EAAU6F,eAAiBpG,KAAKJ,MAAMwG,aAC9Gie,EAAiB9jB,EAAU+H,cAAgBtI,KAAKJ,MAAM0I,YACtChI,EAAU8C,WAAapD,KAAKE,MAAMkD,UAGtDpD,KAAKkkB,iBAGH1jB,GAAwBgY,GAAgB2L,GAAmBE,qCAEvDrkB,KAAKyY,oDACF2L,GACTpkB,KAAK8E,qJA8NA,IAAAwY,EAAAtd,KAiBDskB,EAAYtkB,KAAKD,cAAcwkB,uBAC/BC,EAA6BxkB,KAAKD,cAAc0kB,gBAAgB,CAAC,YAAY,OAAO,sBACpFC,EAAmB1kB,KAAKD,cAAc0kB,gBAAgB,CAAC,YAAY,OAAO,aAAeD,EAA2BnQ,SAASiQ,GAC7HK,EAAyB3kB,KAAKD,cAAc0kB,gBAAgB,CAAC,WAAW,UAAU,qBAClFG,EAA0BD,EAAuBrQ,SAAWqQ,EAAuBE,kBAAkBxQ,SAASiQ,GAE9GQ,EAAU9kB,KAAKD,cAAc0kB,gBAAgB,CAAC,WAAW,YAE/D,IAAKzkB,KAAKE,MAAMO,oBACd,OACEoP,EAAAxO,EAAAC,cAACga,EAAA,EAAD,CACEG,UAAW,CACTsJ,SAAS,EACT9hB,WAAW,GAEbuY,YAAa,CACXQ,GAAG,EACH/X,KAAK,QAEPsX,UAAW,CACTH,UAAU,OACVC,cAAc,UAEhBjN,KAAM,sBAKZ,IAAM4W,EAAchlB,KAAKD,cAAc0kB,gBAAgB,CAAC,QAAQ,WAEhE,GAAKzkB,KAAKE,MAAM2E,cA+UT,CAEL,IAAMkD,EAAcid,EAAYhlB,KAAKE,MAAM2E,eAErCogB,EAAkBvhB,OAAO4B,KAAK6C,IAAcC,MAAMC,UAAUwB,OAAQ,SAAAqZ,GACxE,IAAM7d,EAAciY,EAAKuG,eAAeX,GACxC,OAAO7d,EAAY+O,cAAcC,SAASiJ,EAAKpd,MAAM2E,gBAAkBQ,EAAY8d,kBAAkB9O,SAASiJ,EAAKpd,MAAMshB,oBACxHrR,IAAK,SAAA+S,GAEN,MAAO,CACLze,MAAMye,EACN1Y,MAHkB8S,EAAKuG,eAAeX,GAGpB1Y,SAMhBnF,EAAcrF,KAAK6jB,eAAe7jB,KAAKJ,MAAM0I,aAE/C4c,EAAqB,KACzB,GAAIllB,KAAKJ,MAAM0I,aAAejD,EAE5B6f,EAD+BllB,KAAKD,cAAc0kB,gBAAgB,CAAC,QAAQ,WAAWzkB,KAAKJ,MAAM0I,YAAY,2BAC/DtI,KAAKD,cAAc0kB,gBAAgB,CAAC,QAAQ,SAASzkB,KAAKE,MAAM2E,cAAc,uBAAyB,KAGvJ,IAAMsgB,EAAsBF,EAAgB/R,KAAM,SAAApJ,GAAC,OAAKA,EAAErF,QAAU6Y,EAAK1d,MAAM0I,cAE/E,OACEuH,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE1K,EAAG,EACHjP,MAAO,EACP6Z,cAAe,UAuCfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,IAEPnM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEE,cAAe,CAAC,SAAS,QAEzBxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,CAAC,EAAE,KAEVqO,EAAAxO,EAAAC,cAAC8jB,EAAA,EAAD1hB,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEEmlB,gBAAgB,EAChBjX,KAAM,kBACNhL,SAAUpD,KAAKE,MAAMkD,SACrBgZ,YAAc,SAAA5C,GAAC,OAAI8D,EAAKpd,MAAMolB,YAAY,UAC1CC,KAAM,CAACvlB,KAAKD,cAAc0kB,gBAAgB,CAAC,aAAazkB,KAAKE,MAAMshB,iBAAiB,eAGxF3R,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,CAAC,EAAE,GACPva,MAAO,CAAC,EAAE,IACV6Z,cAAe,CAAC,SAAS,OACzBtX,eAAgB,CAAC,SAAS,kBAE1B8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,CAAC,EAAE,KACV6Z,cAAe,UAEfxL,EAAAxO,EAAAC,cAACkkB,EAAA,EAAD,CACEC,WAAY,CACVhV,EAAE,EACFiD,OAAO,CAAC,OAAO,SAEjBjC,KAAM,eACNiL,QAASuI,EACTS,aAAcP,EACdnH,SAAW,SAAAlU,GAAC,OAAIwT,EAAKmD,eAAe3W,OAGxC+F,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,CAAC,EAAE,GACPva,MAAO,CAAC,EAAE,IACV6Z,cAAe,UAEfxL,EAAAxO,EAAAC,cAACqkB,EAAA,EAADjiB,OAAAC,OAAA,CACE8hB,WAAY,CACVhV,EAAE,IAEAzQ,KAAKE,SAGb2P,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,CAAC,EAAE,GACPva,MAAO,CAAC,EAAE,KACV6Z,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACT7C,EAAE,EACF/N,QAAQ,OACRoB,WAAW,SACX4P,OAAO,CAAC,OAAO,QACf3P,eAAe,UAEjB6hB,eAAe,EACfxJ,YAAc,SAAA5C,GAAC,OAAI8D,EAAKgD,mBAAkB,KAE1CzQ,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACElY,WAAY,EACZN,MAAO,aAGP3C,KAAKJ,MAAM0c,eAETtc,KAAK2c,gBAAgB3c,KAAKJ,MAAM0c,gBAAgB9R,MAChDxK,KAAKJ,MAAMwd,mBAAqBpd,KAAKJ,MAAMyd,iBAA3C,GAAAvK,OACG9S,KAAKJ,MAAMwd,kBAAkBxU,OAAO,YADvC,OAAAkK,OACwD9S,KAAKJ,MAAMyd,gBAAgBzU,OAAO,mBASrGb,EAAYuM,QAiCTtU,KAAKJ,MAAM0I,aAAetI,KAAKD,cAAcyP,YAAYnK,EAAYc,gBAAgBkQ,QAAQC,KAAKC,OACpG1G,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZuX,cAAe,MACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACT7C,EAAE,EACFjP,MAAM,CAAC,EAAE,MAGXqO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZuX,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACElX,KAAM,QACNtB,MAAO,WACP8O,KAAM,eAER5B,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJ1Y,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,cAMcnD,KAAKJ,MAAM0I,YANzB,kCAWJtI,KAAKD,cAAcyP,YAAYzH,EAAY5B,gBAAgBkQ,QAAQC,KAAKC,OAC1E1G,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZuX,cAAe,MACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACT7C,EAAE,EACFjP,MAAM,CAAC,EAAE,MAGXqO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZuX,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACElX,KAAM,QACNtB,MAAO,WACP8O,KAAM,eAER5B,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJ1Y,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,aAManD,KAAKE,MAAM2E,cANxB,kCAYNgL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,GAEPqO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,CAAC,EAAE,GACPC,GAAI,CAAC,EAAE,IAEPnM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZC,eAAgB,SAChBsX,cAAe,CAAC,SAAS,QAEzBxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACP6J,GAAI,CAAC,EAAE,GACPrkB,MAAO,CAAC,EAAE,KACV6Z,cAAe,UAEfxL,EAAAxO,EAAAC,cAACwkB,EAAA,EAAD,CACEnI,MAAO,yBACPnT,MAAQxK,KAAKJ,MAAM2f,cAAX,iBAAAzM,OAA4C9S,KAAKJ,MAAM2f,cAAvD,KAAAzM,OAAwE9S,KAAKE,MAAM2E,eAAkB7E,KAAKE,MAAM2E,cACxHkhB,aAAe/lB,KAAKJ,MAAM2f,cAAgBvf,KAAKD,cAAc0kB,gBAAgB,CAAC,WAAW,gBAAkB,MAE3G5U,EAAAxO,EAAAC,cAAC0kB,EAAA,EAADtiB,OAAAC,OAAA,CACEsiB,UAAW,EACXrU,KAAM,SArpBT,CACjBsU,WAAW,EACX7iB,SAAS,CAAC,EAAE,GACZJ,WAAW,CAAC,EAAE,GACdN,MAAM,aA+oBY,CAIEwjB,UAhpBJ,CAChBzK,GAAG,EACHwK,WAAW,EACXjjB,WAAW,CAAC,EAAE,GACdN,MAAM,YACNU,SAAS,CAAC,EAAE,SA4oBQ+iB,OAAQpmB,KAAKJ,MAAMyQ,IACnBkL,UAAW,CACTzX,WAAW,WACXC,eAAe,cAEjBsiB,KAAMrmB,KAAKD,cAAc0kB,gBAAgB,CAAC,QAAQ,SAASzkB,KAAKE,MAAM2E,cAAc,wBAA0B,IAAM,UAI1HgL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACP6J,GAAI,CAAC,EAAE,GACPrkB,MAAO,CAAC,EAAE,KACV6Z,cAAe,UAEfxL,EAAAxO,EAAAC,cAACwkB,EAAA,EAAD,CACEnI,MAAO,UACPnT,MAAO,cAEPqF,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZuX,cAAe,CAAC,SAAS,QAEzBxL,EAAAxO,EAAAC,cAACglB,EAAA,EAAD,CACE1Y,UAAW,KACX2Y,QAAS,QACTC,SAAU,QACVziB,eAAgB,aAChBvC,MAAO,GAEPqO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE+K,WAAY,EACZjjB,WAAY,CAAC,EAAE,GACfN,MAAO,YACPU,SAAU,CAAC,EAAE,IAEZrD,KAAKJ,MAAM+V,IACZ9F,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAKtX,KAAN,CAAWlB,MAAO,YAAaM,WAAY,EAAGI,SAAU,CAAC,MAAM,QAA/D,UAMVwM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACP6J,GAAI,CAAC,EAAE,GACPrkB,MAAO,CAAC,EAAE,KACV6Z,cAAe,UAEfxL,EAAAxO,EAAAC,cAACwkB,EAAA,EAAD,CACEnI,MAAO,8BACPnT,MAAO,cAGLxK,KAAKJ,MAAMmf,QAAU1J,MAAMrV,KAAKJ,MAAMmf,OACpClP,EAAAxO,EAAAC,cAACglB,EAAA,EAAD,CACE1Y,UAAW,KACX2Y,QAAS,QACTC,SAAU,QACVziB,eAAgB,cAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE+K,WAAY,EACZ7iB,SAAU,CAAC,EAAE,GACbJ,WAAY,CAAC,EAAE,GACfN,MAAO,aAEN3C,KAAKJ,MAAMmf,MACZlP,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAKtX,KAAN,CAAWlB,MAAO,YAAaM,WAAY,EAAGI,SAAU,CAAC,MAAM,QAA/D,OAIJwM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE+K,WAAY,EACZ7iB,SAAU,CAAC,EAAE,GACbJ,WAAY,CAAC,EAAE,GACfN,MAAO,aAEN3C,KAAKJ,MAAMmf,SAMtBlP,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACP6J,GAAI,CAAC,EAAE,GACPrkB,MAAO,CAAC,EAAE,KACV6Z,cAAe,UAEfxL,EAAAxO,EAAAC,cAACwkB,EAAA,EAAD,CACEtb,MAAO,IACPmT,MAAO,aACPlZ,MAAOzE,KAAKJ,MAAMqf,WAAWzO,gBA+BrCX,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEsK,MAAO,yBACP8I,YAAavB,EACb5R,UAAW,CACT0I,GAAG,CAAC,EAAE,KAGRnM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CAAMzL,GAAG,cAAclO,MAAO,EAAGwa,GAAI,GACnCnM,EAAAxO,EAAAC,cAAColB,EAADhjB,OAAAC,OAAA,CACE+P,OAAS,KACL1T,KAAKJ,MAFX,CAGEgZ,SAAU,cACV9V,MAAO9C,KAAKE,MAAM4C,MAClBM,SAAUpD,KAAKE,MAAMkD,SACrBujB,UAAW3mB,KAAKE,MAAMymB,UACtBzY,UAAWlO,KAAKE,MAAMgO,UACtBjJ,WAAYjF,KAAKJ,MAAMqF,WACvBqD,YAAatI,KAAKJ,MAAM0I,YACxBzD,cAAe7E,KAAKE,MAAM2E,cAC1BK,sBAAuBlF,KAAKJ,MAAMsF,sBAClC8C,UAAWhI,KAAKJ,MAAM0I,cAAgBtI,KAAKJ,MAAMqjB,cAAgB,WAAa,aAKpFpT,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACTsT,GAAG,EACH5K,GAAG,CAAC,EAAE,KAGRnM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEE,cAAe,CAAC,SAAS,OACzBtX,eAAgB,iBAGd/D,KAAKJ,MAAM0I,cAAgBtI,KAAKJ,MAAMqjB,eACtCpT,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE0L,GAAI,EACJrlB,MAAO,CAAC,EAAE,EAAE,GACZkO,GAAI,mBACJ2L,cAAe,SACfvX,WAAY,aACZC,eAAgB,cAEhB8L,EAAAxO,EAAAC,cAACwlB,EAAA,EAADpjB,OAAAC,OAAA,CACE+P,OAAQ,KACJ1T,KAAKE,MAFX,CAGE0Y,SAAU,sBAEZ/I,EAAAxO,EAAAC,cAACylB,EACK/mB,KAAKE,QAIf2P,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPtM,GAAI,YACJsX,GAAI,CAAC,EAAEhnB,KAAKJ,MAAM0I,cAAgBtI,KAAKJ,MAAMqjB,cAAgB,EAAI,GACjEzhB,MAAO,CAAC,EAAGxB,KAAKJ,MAAM0I,cAAgBtI,KAAKJ,MAAMqjB,cAAgB,EAAE,EAAI,IAEvEpT,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CAAMrX,WAAY,aAAcC,eAAgB,aAAcsX,cAAe,SAAU7Z,MAAO,GAC5FqO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAQ8L,GAAT,CACEjL,GAAI,EACJN,GAAI,EACJK,GAAI,CAAC,EAAE,GACP9Y,WAAY,EACZI,SAAU,CAAC,EAAE,GACbF,UAAW,OACXR,MAAO,YACPujB,WAAY,WARd,yBAYArW,EAAAxO,EAAAC,cAAColB,EAADhjB,OAAAC,OAAA,CACE+P,OAAQ,KACJ1T,KAAKJ,MAFX,CAGEoI,UAAW,MACX4Q,SAAU,YACV9V,MAAO9C,KAAKE,MAAM4C,MAClBM,SAAUpD,KAAKE,MAAMkD,SACrB8K,UAAWlO,KAAKE,MAAMgO,UACtByY,UAAW3mB,KAAKE,MAAMymB,UACtB1hB,WAAYjF,KAAKJ,MAAMqF,WACvBqD,YAAatI,KAAKJ,MAAM0I,YACxBpD,sBAAuBlF,KAAKJ,MAAMsF,6BAO5C2K,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE4H,SAAU,YAEVlT,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPkO,GAAI,qBACJ3L,eAAgB,YAEhB8L,EAAAxO,EAAAC,cAAC4lB,EAAA,EAAD,CACEhL,YAAa,CACXiL,GAAG,GAELC,SAAU,YACVjL,SAAuC,IAA7Bnc,KAAKJ,MAAMuf,cACrB/C,YAAc,SAAA5C,GAAC,OAAI8D,EAAKsF,eAAe,WAEzC/S,EAAAxO,EAAAC,cAAC4lB,EAAA,EAAD,CACEE,SAAU,eACVhL,YAAc,SAAA5C,GAAC,OAAI8D,EAAKsF,eAAe,SACvCzG,SAAUnc,KAAKJ,MAAMuf,gBAAkBnf,KAAKJ,MAAMof,eAGtDnP,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJrI,OAAQ,QACRqP,SAAU,WACVrT,GAAI,kBACJlO,MAAO,CAAC,OAAO,QACfuC,eAAgB,aAChBsL,KAAMrP,KAAKJ,MAAM4f,mBACjBhd,MAAO,CACL6kB,WAAW,0BAGbxX,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACT6T,GAAG,EACHzT,OAAO,cACPlR,MAAMxC,KAAKE,MAAMkD,SAAW,CAAC5B,MAAM,QAAU,CAACA,MAAM,UAGtDqO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPkO,GAAG,aAEHG,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,EACJxa,MAAO,EACP6Z,cAAe,SACfvX,WAAY,aACZC,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAQ8L,GAAT,CACEvL,GAAI,EACJK,GAAI,EACJC,GAAI,EACJ/Y,WAAY,EACZI,SAAU,CAAC,EAAE,GACbF,UAAW,OACXR,MAAO,YACPujB,WAAY,WARd,0BAYArW,EAAAxO,EAAAC,cAAColB,EAADhjB,OAAAC,OAAA,CACE+P,OAAQ,KACJ1T,KAAKJ,MAFX,CAGEoI,UAAW,MACX4Q,SAAU,YACV9V,MAAO9C,KAAKE,MAAM4C,MAClBM,SAAUpD,KAAKE,MAAMkD,SACrB8K,UAAWlO,KAAKE,MAAMgO,UACtByY,UAAW3mB,KAAKE,MAAMymB,UACtB1hB,WAAYjF,KAAKJ,MAAMqF,WACvBqD,YAAatI,KAAKJ,MAAM0I,YACxBpD,sBAAuBlF,KAAKJ,MAAMsF,4BAK1C2K,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACT6T,GAAG,EACHzT,OAAO,cACPlR,MAAMxC,KAAKE,MAAMkD,SAAW,CAAC5B,MAAM,QAAU,CAACA,MAAM,UAGtDqO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CAAMzL,GAAG,YAAYlO,MAAO,GAC1BqO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,EACJxa,MAAO,EACP6Z,cAAe,SACfvX,WAAY,aACZC,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAQ8L,GAAT,CACEjL,GAAI,EACJN,GAAI,EACJK,GAAI,EACJ9Y,WAAY,EACZI,SAAU,CAAC,EAAE,GACbF,UAAW,OACXR,MAAO,YACPujB,WAAY,WARd,QAYArW,EAAAxO,EAAAC,cAAColB,EAADhjB,OAAAC,OAAA,CACE+P,OAAQ,KACJ1T,KAAKJ,MAFX,CAGEoI,UAAW,MACX4Q,SAAU,YACV9V,MAAO9C,KAAKE,MAAM4C,MAClBM,SAAUpD,KAAKE,MAAMkD,SACrB8K,UAAWlO,KAAKE,MAAMgO,UACtByY,UAAW3mB,KAAKE,MAAMymB,UACtB1hB,WAAYjF,KAAKJ,MAAMqF,WACvBqD,YAAatI,KAAKJ,MAAM0I,YACxBpD,sBAAuBlF,KAAKJ,MAAMsF,4BA+C1C2K,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACT6T,GAAG,EACHzT,OAAO,cACPlR,MAAMxC,KAAKE,MAAMkD,SAAW,CAAC5B,MAAM,QAAU,CAACA,MAAM,UAGtDqO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CAAMzL,GAAG,YAAYlO,MAAO,GAC1BqO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,EACJxa,MAAO,EACP6Z,cAAe,SACfvX,WAAY,aACZC,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAQ8L,GAAT,CACEjL,GAAI,EACJN,GAAI,EACJK,GAAI,EACJ9Y,WAAY,EACZI,SAAU,CAAC,EAAE,GACbF,UAAW,OACXR,MAAO,YACPujB,WAAY,WARd,UAYArW,EAAAxO,EAAAC,cAAColB,EAADhjB,OAAAC,OAAA,CACE+P,OAAQ,KACJ1T,KAAKJ,MAFX,CAGEoI,UAAW,MACX4Q,SAAU,YACV9V,MAAO9C,KAAKE,MAAM4C,MAClBM,SAAUpD,KAAKE,MAAMkD,SACrB8K,UAAWlO,KAAKE,MAAMgO,UACtByY,UAAW3mB,KAAKE,MAAMymB,UACtB1hB,WAAYjF,KAAKJ,MAAMqF,WACvBqD,YAAatI,KAAKJ,MAAM0I,YACxBpD,sBAAuBlF,KAAKJ,MAAMsF,+BApiBhD2K,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZuX,cAAe,MACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACT7C,EAAE,EACFjP,MAAM,CAAC,EAAE,MAGXqO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZuX,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACElX,KAAM,QACNtB,MAAO,WACP8O,KAAM,iBAER5B,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJ1Y,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,aAManD,KAAKE,MAAM2E,cANxB,0BAyhBVgL,EAAAxO,EAAAC,cAACgmB,EAAD5jB,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEEke,QAASpe,KAAKJ,MAAMwe,QACpBC,QAASre,KAAKJ,MAAMye,QACpBlB,aAAcnd,KAAKggB,aACnBrD,gBAAiB3c,KAAK2c,gBACtBY,OAAQvd,KAAKJ,MAAM8f,qBACnBxC,WAAY,SAAA1D,GAAC,OAAI8D,EAAKgD,mBAAkB,IACxC9D,UAAWxc,KAAKJ,MAAMwd,kBAAoBpd,KAAKJ,MAAMwd,kBAAkB1U,GAAK,KAC5E+T,QAASzc,KAAKJ,MAAMyd,gBAAkBrd,KAAKJ,MAAMyd,gBAAgB3U,GAAK,SAjiC5E,IAAM6e,EAAavnB,KAAKD,cAAc0kB,gBAAgB,CAAC,eACjDrQ,EAAgB,GAChBoT,EAAiBxnB,KAAKD,cAAc0kB,gBAAgB,CAAC,QAAQ,cAQnE,OANA/gB,OAAO4B,KAAK0f,GAAajc,QAAQ,SAAAgS,GACbiK,EAAYjK,GAChBzG,SACZF,EAAclK,KAAK6Q,KAIrBlL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,EACJxa,MAAO,EACP6Z,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC3B,EAAA,EAAD+D,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEE8D,YAAa,cAGbN,OAAO4B,KAAKiiB,GAAYpX,IAAI,SAAAsS,GAC1B,IAAMgF,EAAeF,EAAW9E,GAC1BlB,EAAkBjE,EAAKpd,MAAMO,oBAAoBgiB,GAEvD,IAAKlB,IAAoB7d,OAAO4B,KAAKic,GAAiBrZ,OACpD,OAAO,EAIT,IAAMwf,EAAyB,GAC/BhkB,OAAO4B,KAAKic,GAAiBxY,QAAS,SAAAgS,GACpCwG,EAAgBxG,GAAO3V,UAAU2D,QAAS,SAAA0J,GACpCiV,EAAuBnW,QAAQkB,EAAahB,MAAM,GACpDiW,EAAuBxd,KAAKuI,EAAahB,UAK/C,IAAMkW,EAAqBD,EAAuBvX,IAAK,SAAAqC,GACrD,OAAOgV,EAAehV,IACtB,IAEF,OACE3C,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,EACJxa,MAAO,EACP6Z,cAAe,SACftX,eAAgB,SAChB8O,IAAG,sBAAAC,OAAwB2P,IAE3B5S,EAAAxO,EAAAC,cAACsmB,EAAA,EAAD,CACE7L,GAAI,EACJC,GAAI,CAAC,EAAE,IAEPnM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEE,cAAe,MACfvX,WAAY,WACZC,eAAgB,UAEf0jB,EAAa9J,MAEZ8J,EAAaI,cACXhY,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEO,GAAI,EACJzY,WAAY,EACZI,SAAU,CAAC,EAAE,GACbV,MAAO,aAEN8kB,EAAaI,gBAKxBhY,EAAAxO,EAAAC,cAACwmB,EAAA,EAADpkB,OAAAC,OAAA,CACEyQ,cAAeA,EACfgI,YAAa,SAAClc,GAAD,OAAWod,EAAKkF,YAAYC,EAASviB,EAAM6a,QACxDgN,KAAM,CACJ,CACEpK,MAAM,WACNzd,MAAM,CACJsB,MAAM,CAAC,IAAK,MAEdwmB,OAAO,CACL,CACEvW,KAAK,OACLvR,MAAM,CACJinB,GAAG,EACHzT,OAAO,CAAC,QAAQ,WAGpB,CACEjC,KAAK,eAIX,CACEkM,MAAM,OACNzd,MAAM,CACJsB,MAAM,CAAC,IAAK,MAEdwmB,OAAO,CACL,CACEvW,KAAK,kBACLwW,QAAO,EACPC,YAAY,CACV1mB,MAAM,IAERgB,MAAM,CACJ2lB,SAAS,WAEXxP,YAAW,GAEb,CACElH,KAAK,OACLvR,MAAM,CACJwb,GAAG,GAELwM,YAAY,CACV1mB,MAAM,CAAC,EAAE,QAKjB,CACEmc,MAAM,MACNyK,KAAKtD,EACL5kB,MAAM,CACJsB,MAAO,CAAC,IAAK,MAEf0mB,YAAY,CACV7M,cAAc,SACdvX,WAAW,cAEbkkB,OAAO,CACL,CACEvW,KAAK,MACL4W,aAAY,GAEd,CACE5W,KAAK,mBACLkH,YAAW,EACXzY,MAAM,CACJyB,SAAS2b,EAAKpd,MAAMkD,SAAW,EAAI,EACnCC,SAASia,EAAKpd,MAAMkD,SAAW,MAAQ,MAK/C,CACEua,MAAM,UACNyK,KAAK9K,EAAKvd,cAAc0kB,gBAAgB,CAAC,WAAW,iBACpDwD,QAAO,EACP/nB,MAAM,CACJsB,MAAM,CAAC,IAAK,MAEdwmB,OAAO,CACL,CACEvW,KAAK,eAIX,CACEkM,MAAM,gBACNsK,QAAO,EACP/nB,MAAM,CACJsB,MAAO,KAET0mB,YAAY,CACV1mB,MAAM,EACNqkB,GAAG,CAAC,EAAE,IAERmC,OAAO,CACL,CACEvW,KAAK,WACLjP,MAAM,CACJ2lB,SAAS,cAKjB,CACExK,MAAM,GACNzd,MAAM,CACJsB,MAAM,CAAC,IAAK,MAEd0mB,YAAY,CACV1mB,MAAM,GAERwmB,OAAO,CACL,CACEvW,KAAK,SACLjH,MAAM8S,EAAKpd,MAAMkD,SAAW,OAAS,aACrClD,MAAM,CACJsB,MAAM,EACN6B,SAAS,EACTJ,WAAW,EACXyQ,OAAO,OACPgL,aAAa,EACb9P,UAAU,KACV+P,UAAU,SACV1a,KAAMqZ,EAAKpd,MAAMkD,SAAW,QAAU,SACtCgZ,YAAY,SAAClc,GAAD,OAAWod,EAAKkF,YAAYC,EAASviB,EAAM6a,cAM7DuC,EAAKpd,MAtIX,CAuIEshB,iBAAkBiB,EAClBlB,gBAAiBA,MAGhBjE,EAAKpd,MAAMkD,UACVyM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJjY,WAAY,SACZuX,cAAe,MACftX,eAAgB,YAGd4jB,EAAmB9d,OAAQ,SAAA4G,GAAC,OAAIA,EAAE7F,SAASuF,IAAK,SAACM,EAAEuR,GAAH,OAC9CnS,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEgM,GAAI,EACJrjB,WAAY,SACZuX,cAAe,MACfxI,IAAG,UAAAC,OAAYkP,IAEfnS,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEgM,GAAI,EACJ3lB,MAAO,OACPkS,OAAQ,OACRgL,aAAc,MACdb,gBAAe,OAAA/K,OAASrC,EAAE9N,MAAM2lB,IAAIpY,KAAK,KAA1B,OAGjBL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAKtX,KAAN,CACER,SAAU,EACVV,MAAO,YAEN8N,EAAEjG,cAYvBka,GAAoBE,IAA4B5kB,KAAKJ,MAAM6f,qBACzD5P,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,EACJxa,MAAO,EACPua,GAAI,CAAC,EAAE,GACPjY,WAAY,SACZuX,cAAe,MACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEoN,WAAY,UACZ3J,QAAS5e,KAAKyf,qBAAqBvB,KAAKle,OAF1C,uBAOA0kB,GAAoBE,GAA2B5kB,KAAKJ,MAAM6f,sBAC5D5P,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACT7C,EAAE,EACFuL,GAAG,EACHxa,MAAM,EACNua,GAAG,CAAC,EAAE,IAERyM,UAAU,EACV5C,eAAe,GAEf/V,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACElY,WAAY,IACZN,MAAO,aACPQ,UAAW,SACXE,SAAU,CAAC,EAAE,SAJf,6FAQAwM,EAAAxO,EAAAC,cAACmnB,EAAA,EAAD/kB,OAAAC,OAAA,CACEmI,OAAQ,UACR5H,UAAWwkB,IACXR,YAAa,CACXnM,GAAG,GAEL4M,eAAgB,CACd1kB,KAAK,QACL0a,UAAU,OACVla,MAAM,sBAER8e,OAAQ,GACRqF,aAAc,iBACdC,WAAY,qBACR7oB,KAAKE,OAET2P,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEE,cAAe,MACfvX,WAAY,SACZC,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEgM,GAAI,EACJ1V,KAAM,OACNxN,KAAM,QACNtB,MAAO3C,KAAKE,MAAM4C,MAAM8I,OAAOC,aAAamO,OAAO8O,YAErDjZ,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACElY,WAAY,IACZI,SAAU,OACVV,MAAO,YACPQ,UAAW,UAJb,oCAp3BFe,sBCqJL6kB,6MAjKbhpB,cAAgB,gFAGVC,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,4JAK9CF,KAAKI,iMAGkBE,EAAUC,mEACjCP,KAAKI,kJAGE,IAAAe,EAAAnB,KACDgpB,EAAehpB,KAAKE,MAAM+oB,oBAAsBjpB,KAAKE,MAAM+oB,mBAAmBC,aAAelpB,KAAKE,MAAM+oB,mBAAmBC,aAAe,KAC1IC,EAAwC,WAA7BnpB,KAAKE,MAAMkpB,cACtBC,EAAsD,qBAA9BrpB,KAAKE,MAAMmpB,gBAAiCrpB,KAAKE,MAAMmpB,eACrF,OACExZ,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACP6Z,cAAe,UAGbrb,KAAKE,MAAM+oB,mBACTpZ,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,GAGL6nB,GACExZ,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,GAEPqO,EAAAxO,EAAAC,cAAC8jB,EAAA,EAAD1hB,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEEmlB,gBAAgB,EAChBjiB,SAAUpD,KAAKE,MAAMkD,SACrBmiB,KAAM,CAACvlB,KAAKE,MAAM+oB,mBAAmBze,OACrC4D,KAAMpO,KAAKE,MAAMopB,gBAAgB9e,MAAMmZ,cACvCvH,YAAc,SAAA5C,GAAC,OAAIrY,EAAKjB,MAAMolB,YAAYnkB,EAAKjB,MAAMopB,gBAAgBC,YAK7E1Z,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEqD,GAAI,CAAC,EAAE,GACPnD,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAACsmB,EAAA,EAAD,CACE5L,GAAI,GAEHhc,KAAKE,MAAM+oB,mBAAmBze,OAEjCqF,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEhY,UAAW,SACXqmB,wBAAyB,CACvBC,OAAOzpB,KAAKE,MAAM+oB,mBAAmBb,SAK3CvY,EAAAxO,EAAAC,cAAC0nB,EAADtlB,OAAAC,OAAA,GACM3D,KAAKE,MACLF,KAAKE,MAAM+oB,mBAAmBS,YAFpC,CAGEC,UAAW3pB,KAAKE,MAAM+oB,mBAAmB/oB,UAI7C2P,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEqD,GAAI,CAAC,EAAE,GACPnD,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAACsmB,EAAA,EAAD,CACE5L,GAAI,GADN,SAKAnM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPgB,MAAO,CACLonB,SAAS,QAEX7lB,eAAgBolB,EAAW,SAAW,cAGtCA,EACEtZ,EAAAxO,EAAAC,cAACuoB,EAAA,EAAD,CACEvW,UAAW,CACTwW,SAAS,CAAC,EAAE,SAEdC,KAAM,aACN3b,KAAM,kGAENpO,KAAKE,MAAMopB,gBAAgBU,QAAQ7Z,IAAK,SAAC8Z,EAAKC,GAAN,OAC1Cra,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEuS,eAAe,EACf/S,IAAG,QAAAC,OAAUoX,GACb5W,UAAW,CACT7C,EAAE,CAAC,EAAE,GACLuL,GAAG,CAAC,EAAE,GACNmL,GAAG,CAAC,EAAE,MACN3kB,MAAM,CACJ2nB,KAAMhpB,EAAKjB,MAAMkD,SAAW,WAAa,WAE3CU,WAAW,SACXuX,cAAc,SACdtX,eAAe,UAEjBqY,YAAc,SAAA5C,GAAC,OAAIrY,EAAKjB,MAAMolB,YAAYnkB,EAAKjB,MAAMopB,gBAAgBC,MAAM,IAAIU,EAAKV,SAEpF1Z,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE9X,SAAU,CAAC,EAAE,GACbF,UAAW,UAEV8mB,EAAKzf,OAERqF,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEpX,eAAgB,UAGdkmB,EAAKG,MACHva,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEqD,GAAI,CAAC,EAAE,GACP9K,OAAQ,QACR2W,IAAKJ,EAAKG,QAEVH,EAAKF,MACPla,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEqD,GAAI,CAAC,EAAE,GACPva,KAAM,MACNwN,KAAMwY,EAAKF,QAKnBla,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE9X,SAAU,CAAC,EAAE,GACbF,UAAW,SACXqmB,wBAAyB,CACvBC,OAAOQ,EAAK7B,qBApJhBlkB,gDCwpBLomB,6MAtpBb1qB,MAAQ,CAEN2qB,iBAAiB,GACjBC,kBAAkB,KAClBC,qBAAqB,KACrBC,sBAAsB,KACtBC,sBAAsB,KACtBC,yBAAyB,KACzBC,0BAA0B,KAC1BC,6BAA6B,KAC7BC,6BAA6B,QAI/BhrB,cAAgB,OAChBirB,aAAe,gFAGThrB,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,OAG9CF,KAAKgrB,aAAehrB,KAAKD,cAAckrB,uKAIvCjrB,KAAKI,8SAKC8qB,EAA0B,IACRlrB,KAAKE,MAAM2E,eAAiB7E,KAAKE,MAAM6H,YAEzD2Y,EAAyC,SAAhC1gB,KAAKE,MAAMshB,0BAShB2J,QAAQC,IAAI,CAEpBprB,KAAKgrB,aAAaK,oBAAoBrrB,KAAKE,MAAM+a,QAAQiQ,GAAwB,GACjFlrB,KAAKD,cAAcurB,yBAAyBtrB,KAAKE,MAAM+a,QAAQiQ,EAAwB,MACvFlrB,KAAKD,cAAcwrB,eAAe,MAAMvrB,KAAKE,MAAM2E,cAAc7E,KAAKE,MAAM6H,YAAY/H,KAAKE,MAAM+a,SAAQ,GAC3Gjb,KAAKD,cAAcwrB,eAAe,mBAAmBvrB,KAAKE,MAAM2E,cAAc7E,KAAKE,MAAM6H,YAAY/H,KAAKE,MAAM+a,SAChHjb,KAAKD,cAAcwrB,eAAe,mBAAmBvrB,KAAKE,MAAM2E,cAAc7E,KAAKE,MAAM6H,YAAY/H,KAAKE,MAAM+a,qDAXhH4P,OACAJ,OACAlV,OACAiW,OACA5V,iBAUiB5V,KAAKD,cAAc0rB,eAAezrB,KAAKE,MAAM6H,YAAYgJ,QAAQ2P,EAAO8K,YAAvF1qB,YAEWd,KAAKD,cAAckR,MAAMnQ,GAAQ4qB,IAAI,KAClD5qB,EAASyU,GAGLoV,EAAwBF,EAAuB/mB,OAAOkG,OAAO6gB,GAAsB7W,OAAQ,SAAC+X,EAAWC,GAC3G,OAAOD,EAAW5qB,KAAKI,EAAKpB,cAAckR,MAAM2a,KAChD5rB,KAAKD,cAAckR,MAAM,IAAM,KAE3B8Z,EAA+BN,EAAuB/mB,OAAO4B,KAAKmlB,GAAsBta,IAAK,SAAA0b,GACjG,IAAMC,EAAUrB,EAAqBoB,GACrC,OAAIC,EAAQ/W,GAAG,GACb,IAAAjC,OAAWgZ,EAAQnnB,QAAQ,GAA3B,KAAAmO,OAAiC+Y,GAE1B,OAERhiB,OAAO,SAAAC,GAAC,OAAW,OAANA,IAAe,KA2BzBygB,EAAmB,CACvB,CACEhP,UAAU,CACR/Z,MAAM,CAAC,EAAE,MAEXtB,MAAM,CACJyd,MAAM,UACNyK,KAAKpoB,KAAKD,cAAc0kB,gBAAgB,CAAC,WAAW,YACpDsH,SACElc,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZ4P,OAAQ,CAAC,OAAO,QAChB2H,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE+K,WAAY,EACZjjB,WAAY,CAAC,EAAE,GACfN,MAAO,YACPE,WAAY,UACZQ,SAAU,CAAC,QAAQ,SACnBmmB,wBAAyB,CAAEC,OAAS3oB,EAASA,EAAO6D,QAAQ,GAAG,IAAM,cAM/E,CACE4W,UAAU,CACR/Z,MAAM,CAAC,EAAE,MAEXtB,MAAM,CACJyd,MAAM,qBACNoO,SACElc,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPkO,GAAI,kBACJgE,OAAQ,CAAC,OAAO,QAChB2H,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC0qB,EAAA,EAADtoB,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEEyY,YAAY,EACZsT,UAAW,CACTxa,KAAK,mBAEPmH,SAAU,kBACVmC,MAAO/a,KAAKE,MAAM2E,cAClBkD,YAAa/H,KAAKE,MAAM6H,gBAI9ByC,MAAM,KAGV,CACE+Q,UAAU,CACR/Z,MAAM,CAAC,EAAE,MAEXtB,MAAM,CACJyd,MAAM,2BACNoO,SACElc,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZ4P,OAAQ,CAAC,OAAO,QAChB2H,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE+K,WAAY,EACZjjB,WAAY,CAAC,EAAE,GACfN,MAAO,YACPE,WAAY,UACZQ,SAAU,CAAC,QAAQ,SACnBmmB,wBAAyB,CAAEC,OAAS7T,EAAOlR,SAASkR,GAAQ,WAQxE5V,KAAKkB,SAAS,CAEZqpB,mBAEAE,uBACAE,wBAEAE,4BACAE,uNAIqBzqB,EAAUC,mEACjCP,KAAKI,kJAIL,OACEyP,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACP6Z,cAAe,UAGbrb,KAAKJ,MAAM2qB,iBAAiBriB,OAAO,GACjC2H,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPwa,GAAI,CAAC,EAAE,GACPD,GAAI,CAAC,EAAE,GACPjY,WAAY,SACZuX,cAAe,CAAC,SAAS,OACzBtX,eAAgB,iBAGd/D,KAAKJ,MAAM2qB,iBAAiBpa,IAAI,SAACrG,EAAErD,GAAH,OAC9BoJ,EAAAxO,EAAAC,cAAC6Z,EAAA,EAADzX,OAAAC,OAAA,GACMmG,EAAEyR,UADR,CAEEF,cAAe,SACfxI,IAAG,mBAAAC,OAAqBrM,KAExBoJ,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACTC,GAAG,CAAC,EAAE,GACNyI,GAAG,CAAC,EAAE,KAGRnM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAGd+F,EAAE5J,MAAM6rB,SAAWjiB,EAAE5J,MAAM6rB,SACzBlc,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE+K,WAAY,EACZjjB,WAAY,CAAC,EAAE,GACfN,MAAO,YACPE,WAAY,UACZQ,SAAU,CAAC,EAAE,SACbmmB,wBAAyB,CAAEC,OAAQ3f,EAAE5J,MAAMuE,SAKjDoL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJva,MAAO,EACPsC,WAAY,SACZC,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACElY,WAAY,EACZI,SAAU,CAAC,EAAE,GACbV,MAAO,YAENmH,EAAE5J,MAAMyd,OAGT7T,EAAE5J,MAAMkoB,MACNvY,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE+Q,UAAW,SACXC,QAASriB,EAAE5J,MAAMkoB,MAEjBvY,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEO,GAAI,EACJjK,KAAM,OACNxN,KAAM,MACNtB,MAAO,sBAYjCkN,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACTE,GAAG,EACHD,GAAG,IAGL1D,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPka,GAAI,CAAC,EAAE,GACPhM,GAAI,kBAEJG,EAAAxO,EAAAC,cAAC8qB,EAAA,EAAD1oB,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEEmsB,YAAa,IACbzT,SAAU,iBACV0T,WAAYtsB,KAAKE,MAAM2E,cACvBuP,cAAe,CAACpU,KAAKE,MAAM2E,eAC3B0nB,iBAAkBvsB,KAAKD,cAAcysB,oBAAoB,MAAM,OAGnE3c,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACP6Z,cAAe,CAAC,SAAS,QAEzBxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPxa,MAAO,CAAC,EAAE,IACVsC,WAAY,SACZuX,cAAe,SACftX,eAAgB,cAEhB8L,EAAAxO,EAAAC,cAACsmB,EAAA,EAAD,CACE5L,GAAI,EACJ3Y,SAAU,CAAC,EAAE,GACbopB,UAAWC,IAAQC,IAHrB,aAOA9c,EAAAxO,EAAAC,cAAC0qB,EAAA,EAADtoB,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEE6a,MAAO/a,KAAKE,MAAM2E,cAClBonB,UAAW,CACTxa,KAAK,aACLvR,MAAM,CACJyB,SAAS,EACTirB,aAAa,EACb3pB,WAAW,IACXI,SAAS,CAAC,QAAQ,SAClBV,MAAM3C,KAAKE,MAAM4C,MAAM8I,OAAO5I,QAC9BuY,UAAU,CACRxX,eAAe,gBAMzB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPxa,MAAO,CAAC,EAAE,IACVsC,WAAY,SACZuX,cAAe,SACftX,eAAgB,cAEhB8L,EAAAxO,EAAAC,cAACsmB,EAAA,EAAD,CACE5L,GAAI,EACJ3Y,SAAU,CAAC,EAAE,GACbopB,UAAWC,IAAQC,IAHrB,cAOA9c,EAAAxO,EAAAC,cAAC0qB,EAAA,EAADtoB,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEE6a,MAAO/a,KAAKE,MAAM2E,cAClBonB,UAAW,CACTxa,KAAK,2BACLvR,MAAM,CACJyB,SAAS,EACTirB,aAAa,EACbpqB,MAAM,CACJS,WAAW,IACXN,MAAM3C,KAAKE,MAAM4C,MAAM8I,OAAO5I,QAC9BK,SAAUrD,KAAKE,MAAMkD,SAAW,QAAU,SAE5CmY,UAAU,CACRxX,eAAe,eAKvB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPua,GAAI,QAEJlM,EAAAxO,EAAAC,cAAC0qB,EAAA,EAADtoB,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEE6a,MAAO/a,KAAKE,MAAM2E,cAClBonB,UAAW,CACTxa,KAAK,eACLvR,MAAM,CACJmD,SAAS,EACTJ,WAAW,EACXN,MAAM,WACN4Y,UAAU,CACRxX,eAAe,iBAO3B8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPxa,MAAO,CAAC,EAAE,IACVsC,WAAY,SACZuX,cAAe,SACftX,eAAgB,cAEhB8L,EAAAxO,EAAAC,cAACsmB,EAAA,EAAD,CACE5L,GAAI,EACJ3Y,SAAU,CAAC,EAAE,GACbopB,UAAWC,IAAQC,IAHrB,YAOA9c,EAAAxO,EAAAC,cAAC0qB,EAAA,EAADtoB,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEE6a,MAAO/a,KAAKE,MAAM2E,cAClBonB,UAAW,CACTxa,KAAK,kBACLvR,MAAM,CACJyB,SAAS,EACTirB,aAAa,EACbpqB,MAAM,CACJS,WAAW,IACXI,SAASrD,KAAKE,MAAMkD,SAAW,QAAU,QACzCT,MAAM3C,KAAKE,MAAM4C,MAAM8I,OAAO5I,SAEhCuY,UAAU,CACRxX,eAAe,eAMrB/D,KAAKJ,MAAMmrB,8BAAgC/qB,KAAKJ,MAAMmrB,6BAA6B7iB,OAAO,GACxF2H,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAGd/D,KAAKJ,MAAMmrB,6BAA6B5a,IAAI,SAACyb,EAAgBiB,GAAjB,OAC1Chd,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE9X,SAAU,EACV6iB,WAAY,EACZjjB,WAAY,EACZN,MAAO,WACPQ,UAAW,SACX4Y,GAAI8Q,EAAgB,EAAI,EACxBha,IAAG,YAAAC,OAAc+Z,IAEhBjB,OAqCf/b,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPxa,MAAO,CAAC,EAAE,IACVsC,WAAY,SACZuX,cAAe,SACftX,eAAgB,cAEhB8L,EAAAxO,EAAAC,cAACsmB,EAAA,EAAD,CACE5L,GAAI,EACJ3Y,SAAU,CAAC,EAAE,GACbopB,UAAWC,IAAQC,IAHrB,QAOA9c,EAAAxO,EAAAC,cAAC0qB,EAAA,EAADtoB,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEE6a,MAAO/a,KAAKE,MAAM2E,cAClBonB,UAAW,CACTxa,KAAK,cACLvR,MAAM,CACJyB,SAAS,EACTirB,aAAa,EACbpqB,MAAM,CACJS,WAAW,IACXI,SAASrD,KAAKE,MAAMkD,SAAW,QAAU,QACzCT,MAAM3C,KAAKE,MAAM4C,MAAM8I,OAAO5I,SAEhCuY,UAAU,CACRxX,eAAe,gBAMzB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPxa,MAAO,CAAC,EAAE,IACVsC,WAAY,SACZuX,cAAe,SACftX,eAAgB,cAEhB8L,EAAAxO,EAAAC,cAACsmB,EAAA,EAAD,CACE5L,GAAI,EACJ3Y,SAAU,CAAC,EAAE,GACbopB,UAAWC,IAAQC,IAHrB,eAOA9c,EAAAxO,EAAAC,cAAC0qB,EAAA,EAADtoB,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEE6a,MAAO/a,KAAKE,MAAM2E,cAClBonB,UAAW,CACTxa,KAAK,MACLvR,MAAM,CACJyB,SAAS,EACTsB,WAAW,IACXI,SAAS,CAAC,QAAQ,SAClBV,MAAM3C,KAAKE,MAAM4C,MAAM8I,OAAO5I,QAC9BuY,UAAU,CACRxX,eAAe,eAMrB/D,KAAKJ,MAAMirB,2BACThb,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJ1Y,SAAU,EACV6iB,WAAY,EACZjjB,WAAY,EACZN,MAAO,WACPQ,UAAW,UAEVnD,KAAKJ,MAAMirB,0BAA0BlmB,QAAQ,GARhD,IAQqD3E,KAAKgrB,aAAa8B,UARvE,IAQmF9sB,KAAKgrB,aAAajjB,YAAYglB,mCAljBzG7oB,6DCmvBb8oB,8MA7uBbptB,MAAQ,CACNoZ,WAAW,CACTE,OAAO,KACPH,SAAQ,GAEVkU,WAAW,KACXC,YAAY,GACZnlB,YAAY,KACZolB,cAAc,KACdtoB,cAAc,KACd0c,gBAAgB,KAChB6L,gBAAe,EACfC,iBAAgB,EAChBC,kBAAiB,EACjBC,iBAAiB,KACjBC,kBAAkB,KAClBC,kBAAkB,KAClBC,kBAAkB,KAClBC,mBAAmB,KACnBC,oBAAoB,KACpBC,qBAAoB,EACpBC,0BAA0B,QAI5B/tB,cAAgB,OAqBhBguB,oBAAsB,SAACF,GACrBjpB,EAAK1D,SAAS,CACZ2sB,2BA8EJG,oBAAsB,WAAiB,IAAhBC,EAAgB9V,UAAAjQ,OAAA,QAAAwJ,IAAAyG,UAAA,GAAAA,UAAA,GAAT,KAEvB8V,IACHA,EAASrpB,EAAKhF,MAAMqtB,YAGtB,IAAIG,EAGFA,GAAkBa,GAAUA,EAAOlZ,GAAGnQ,EAAKhF,MAAM8tB,mBAKnD9oB,EAAK1D,SAAS,CACZksB,sBAsKJc,iBAAmB,SAAC1U,GAClB,IAAMyT,EAAazT,EAAEsD,OAAOrY,MAAMyD,SAAWmN,MAAMmE,EAAEsD,OAAOrY,OAASG,EAAK7E,cAAckR,MAAMuI,EAAEsD,OAAOrY,OAASG,EAAK7E,cAAckR,MAAM,GACzIrM,EAAKopB,oBAAoBf,GAIzBroB,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5B0sB,aACAW,oBAJ0B,WAe9BO,uBAAyB,SAACP,GACxBhpB,EAAK1D,SAAS,CACZ0sB,2BAIJQ,eAAiB,SAAClB,GAChBtoB,EAAK1D,SAAS,CACZgsB,4FAlTEltB,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,mKAK9CF,KAAKI,qBACCJ,KAAKquB,wJAIXruB,KAAKkB,SAAS,CACZmsB,iBAAgB,+LAUIiB,iCAAa,MAC7BrB,EAAajtB,KAAKJ,MAAMqtB,WAAajtB,KAAKD,cAAckR,MAAMjR,KAAKJ,MAAMqtB,YAAc,QAE1EA,EAAWvB,IAAI,6CACzB,aAGH6C,EAAmBvuB,KAAKD,cAAcyuB,qBAAqBvB,EAAWjtB,KAAKJ,MAAM4tB,kBAAkB7rB,UAErG8sB,EAAmB,KACnBd,EAAqB,KACrBe,EAAyB,MACzB1uB,KAAKJ,MAAMiuB,sDAIH1C,QAAQC,IAAI,CACpBprB,KAAKD,cAAc4uB,sBAAsB3uB,KAAKE,MAAM+a,QAAQsT,GAAiB,GAC7EvuB,KAAKD,cAAc6uB,0BAA0B5uB,KAAKE,MAAM+a,QAAQsT,gDAJhEZ,OACAe,iBAKuB1uB,KAAKD,cAAc8uB,iBAAiB7uB,KAAKJ,MAAMmI,YAAYiN,KAAK+F,MAAMwT,GAAiB,EAAMG,WAAtHD,kDAEyBzuB,KAAKD,cAAc8uB,iBAAiB7uB,KAAKJ,MAAMmI,YAAYiN,KAAK+F,MAAMwT,GAAiB,kBAAhHE,mBAC8BzuB,KAAKD,cAAc+uB,6BAA3CC,SACAC,EAAoB/B,EAAWjsB,MAAM+tB,GAAiBxlB,MAAM0jB,EAAWjsB,MAAMytB,EAAiBztB,MAAM,KAAKD,KAAKf,KAAKJ,MAAMstB,aAAeltB,KAAKD,cAAckR,MAAM,IAAIhQ,IAAI,QAC/K0sB,EAAqB,IACF3tB,KAAKJ,MAAMiF,eAAiBmqB,iBAG7CP,IACFA,EAAmBA,EAAiBztB,MAAM,MAG5ChB,KAAKkB,SAAS,CACZutB,mBACAd,qBACAe,2BAIED,GAAoBH,IACtBG,EAAmBA,EAAiB1tB,KAAKutB,sBAGpCG,yLAGgBnuB,EAAUC,kFACjCP,KAAKI,cAEgBE,EAAUyH,YAAYiN,KAAK+F,QAAU/a,KAAKE,MAAM6H,YAAYiN,KAAK+F,uCAE9E/a,KAAKquB,mBAGPY,EAA6B1uB,EAAUstB,sBAAwB7tB,KAAKJ,MAAMiuB,qBAC7C7tB,KAAKJ,MAAMguB,sBAAwBrtB,EAAUqtB,qBAC9CqB,IAChCjvB,KAAKkvB,gBAGDC,EAAe5uB,EAAU0sB,aAAejtB,KAAKJ,MAAMqtB,WACnDmC,EAAqBntB,WAAW1B,EAAU2sB,eAAiBjrB,WAAWjC,KAAKJ,MAAMstB,aACjFmC,EAAqB3uB,KAAKC,UAAUJ,EAAUwH,eAAiBrH,KAAKC,UAAUX,KAAKJ,MAAMmI,cAC3FonB,GAAgBE,GAAsBD,IACxCpvB,KAAKsvB,oBAGsB/uB,EAAUsE,gBAAkB7E,KAAKJ,MAAMiF,eAElE7E,KAAKuvB,wKAwBP,GAAuC,OAAnCvvB,KAAKJ,MAAMguB,oBACb,OAAO,EAGT,IACIX,EADEuC,EAAqBxvB,KAAKD,cAAckR,MAAMjR,KAAKJ,MAAMguB,qBAAqB3sB,IAAI,KAIxFgsB,EAAajtB,KAAKJ,MAAM8tB,kBAAoB1tB,KAAKD,cAAckR,MAAMjR,KAAKJ,MAAM8tB,mBAAmB1sB,MAAMwuB,GAAsB,KAK/HxvB,KAAKguB,oBAAoBf,GAEzBjtB,KAAKkB,SAAS,CACZ+rB,8DAImBpoB,GACrB7E,KAAKkB,SAAS,CACZ2D,sLAKI4qB,EAAczvB,KAAKD,cAAc0kB,gBAAgB,CAAC,UAClD1c,EAAc/H,KAAKJ,MAAM2hB,gBAAgBvhB,KAAKJ,MAAMiF,eACpD0oB,EAAmBkC,EAAYlO,gBAAgBxZ,EAAYiN,KAAK+F,OACtE/a,KAAKkB,SAAS,CACZ6G,cACAwlB,iTAKkDpC,QAAQC,IAAI,CAC9DprB,KAAKD,cAAc2vB,uBACnB1vB,KAAKD,cAAc4vB,mEAFdnC,OAAkBC,gBASftC,QAAQC,IAAI,CACpBprB,KAAKD,cAAc+uB,qBACnB9uB,KAAKD,cAAc6vB,qBAAqB5vB,KAAKE,MAAM+a,SACnDjb,KAAKD,cAAc8vB,6BAA6B7vB,KAAKE,MAAM+a,8CAN3D8T,OACArB,OACAI,OAOIX,EAAgB,GAChB6B,EAAoBtB,EAAoBA,EAAkB1sB,MAAM+tB,GAAmB/uB,KAAKD,cAAckR,MAAM,GAE5GsQ,EAAkBvhB,KAAKD,cAAc+vB,0BACrCjrB,EAAgBnB,OAAO4B,KAAKic,GAAiB,GAEnDvhB,KAAKkB,SAAS,CACZ2D,gBACAsoB,gBACA4B,kBACAxN,kBACAiM,oBACAC,oBACAC,oBACAsB,oBACAlB,8SAMG9tB,KAAKJ,MAAM8tB,4DACP,iBAGHqC,EAAiB,SAACnW,EAAGC,GACzB,IAAMmW,EAA4B,YAAdpW,EAAGI,OAGjBF,EAAY,CAChBC,WAAYH,EAAGI,OACfC,cAAa,cACbC,YAAa/Y,EAAKjB,MAAM2E,cACxBorB,WAAY9uB,EAAKvB,MAAM8tB,kBAAkB/oB,WAGvCkV,IACFC,EAAUC,WAAa5Y,EAAKpB,cAAcoa,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUE,SACrB7Y,EAAKpB,cAAcqa,yBAAyBN,GAG9C3Y,EAAKD,SAAS,SAACX,GAAD,MAAgB,CAC5ByY,WAAY,CACVE,OAAO,KACPH,SAAQ,MAI6B,oBAA9B5X,EAAKjB,MAAM6vB,gBAAiCC,GACrD7uB,EAAKjB,MAAM6vB,eAAenW,IAIxBsW,EAAwB,SAACtW,GAC7B,IAAMV,EAASU,EAAGiB,gBAClB1Z,EAAKD,SAAS,SAACX,GAAD,MAAgB,CAC5ByY,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADL,CAERE,eAKA0P,EAAe5oB,KAAKJ,MAAM6tB,kBAAkBhc,cACnBzR,KAAKsvB,kBAAkBtvB,KAAKJ,MAAMstB,uBAA3DuB,SACAH,EAAetuB,KAAKD,cAAckR,MAAMjR,KAAKJ,MAAMstB,aAAajsB,IAAI,KACpEgsB,EAAajtB,KAAKJ,MAAMqtB,WAAajtB,KAAKD,cAAckR,MAAMjR,KAAKJ,MAAMqtB,YAAc,KAEvFkD,EAAUnwB,KAAKD,cAAcyuB,qBAAqBvB,EAAWjtB,KAAKJ,MAAM4tB,kBAAkB7rB,WAE5F3B,KAAKJ,MAAMiuB,yCACO7tB,KAAKJ,MAAM0tB,mDAAyBttB,KAAKD,cAAc4uB,sBAAsB3uB,KAAKE,MAAM+a,QAAQkV,GAAQ,GAAM,gEAAcnwB,KAAKD,cAAc6uB,0BAA0B5uB,KAAKE,MAAM+a,QAAQkV,EAAQ7B,+BAAlN8B,OACNC,QAAQC,IAAI,mBAAmBH,EAAQ3f,WAAW4f,GAClDpwB,KAAKE,MAAM4a,0BAA0B8N,EAAc,mBAAoB,CAACuH,EAASC,EAAapwB,KAAKJ,MAAM0tB,kBAAmB,KAAMyC,EAAgBG,kCAE5IK,EAAavwB,KAAKJ,MAAM2tB,iBAAiBiD,gBAAgBC,oBACjCzwB,KAAKD,cAAc+uB,6BAA3CC,SACA2B,EAAa1wB,KAAKD,cAAcyuB,qBAAqBvB,EAAWjsB,MAAM+tB,GAAiBxlB,MAAM0jB,EAAWjsB,MAAMytB,EAAiBxtB,IAAI,OAAOjB,KAAKJ,MAAMmI,YAAYpG,UAKvK0uB,QAAQC,IAAI,4BAA4BH,EAASI,EAAYG,GAG7D1wB,KAAKE,MAAM4a,0BAA0B8N,EAAc,4BAA6B,CAACuH,EAASI,EAAYG,EAAY1wB,KAAKJ,MAAM0tB,kBAAmB,KAAMyC,EAAgBG,WAGxKlwB,KAAKkB,SAAS,SAACX,GAAD,MAAgB,CAC5ByY,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADL,CAERD,SAAQ,8PAMZ/Y,KAAKkB,SAAS,CACZ8X,WAAY,CACVE,OAAO,KACPH,SAAQ,wJAkBZ,OAAuC,OAAnC/Y,KAAKJ,MAAMguB,qBAGR5tB,KAAKD,cAAckR,MAAMjR,KAAKJ,MAAMguB,qBAAqB3sB,IAAI,sCAgB7D,IAAAqc,EAAAtd,KAED2wB,GAAgB3wB,KAAKJ,MAAMwtB,gBAAkBptB,KAAKJ,MAAM6uB,iBACxDmC,EAAiB5wB,KAAKD,cAAc0kB,gBAAgB,CAAC,QAAQ,eAAe,UAElF,OACE5U,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,CAAC,EAAE,KACVsC,WAAY,UACZuX,cAAe,SACftX,eAAgB,UAGb/D,KAAKJ,MAAM8tB,kBA0BR1tB,KAAKJ,MAAMoZ,WAAWD,QACxBlJ,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACT7C,EAAE,EACFsL,GAAG,IAGLlM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEE,cAAe,UAEfxL,EAAAxO,EAAAC,cAACqa,EAAA,EAAD,CACEqI,KAAMhkB,KAAKE,MAAM8jB,KACjBlI,KAAM9b,KAAKJ,MAAMoZ,WAAWE,OAC5B2C,WAAU,+BACVgV,kBAAmB7wB,KAAK6wB,kBAAkB3S,KAAKle,MAC/C4b,SAAW5b,KAAKE,MAAM0b,SAAW5b,KAAKE,MAAM0b,SAAW,0BAK7D/L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACP6Z,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACT7C,EAAE,EACFuL,GAAG,IAGLnM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZuX,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACElX,KAAM,QACNtB,MAAO,WACP8O,KAAM,eAER5B,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJ1Y,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,uGAQA0M,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJjY,WAAY,SACZuX,cAAe,OAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE4C,UAAU,EACVvT,MAAK,0BACLsmB,QAAS9wB,KAAKJ,MAAMiuB,oBACpB7P,SAAW,SAAAxE,GAAC,OAAI8D,EAAKyQ,oBAAoBvU,EAAEsD,OAAOgU,YAEpDjhB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE+Q,UAAW,MACXC,QAAO,yCAAArZ,OAA2CpP,OAAO4B,KAAKtF,KAAKJ,MAAM2hB,iBAAiBrR,KAAK,MAAxF,kEAEPL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACElX,KAAM,MACNtB,MAAO,YACP8O,KAAM,qBAObzR,KAAKJ,MAAMiuB,qBACVhe,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,EACJxa,MAAO,GAGLxB,KAAKJ,MAAMmI,aACT8H,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,GAEPqO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,GADN,6BAKAnM,EAAAxO,EAAAC,cAACqkB,EAAA,EAADjiB,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEEwP,GAAI,aACJqhB,aAAa,EACbhpB,YAAa/H,KAAKJ,MAAMmI,YACxBlD,cAAe7E,KAAKJ,MAAMiF,cAC1B0c,gBAAiBvhB,KAAKJ,MAAM2hB,gBAC5BvD,SAAUhe,KAAKgxB,uBAAuB9S,KAAKle,WAQvDA,KAAKJ,MAAM+tB,qBAAuB3tB,KAAKJ,MAAMwtB,gBAC3Cvd,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACTyI,GAAG,EACHC,GAAG,EACHzI,GAAG,EACHC,GAAG,IAGL3D,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZuX,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJ1Y,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,qBAQA0M,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJva,MAAO,EACPoN,UAAW,EACXpM,MAAO,CACLonB,SAAS,QAEX9lB,WAAY,SACZC,eAAgB,UAGZL,OAAO4B,KAAKtF,KAAKJ,MAAM+tB,oBAAoBxd,IAAK,SAAA4K,GAC9C,IAAM+Q,EAAUxO,EAAK1d,MAAM+tB,mBAAmB5S,GAC9C,OACElL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,EACJyC,GAAI,EACJjd,MAAO,OACP6Z,cAAe,MACfxI,IAAG,gBAAAC,OAAkBiI,GACrBhX,eAAgB,cAEhB8L,EAAAxO,EAAAC,cAAC0qB,EAAA,EAAD,CACEjR,MAAOA,EACPhT,YAAa,CACXgT,MAAMA,GAERkR,UAAW,CACTxa,KAAK,OACLvR,MAAM,CACJinB,GAAG,EACH3lB,MAAM,CAAC,QAAQ,SACfkS,OAAO,CAAC,QAAQ,aAItB7D,EAAAxO,EAAAC,cAAC0kB,EAAA,EAAD,CACEtK,GAAI,EACJrY,SAAU,CAAC,EAAE,GACbJ,WAAY,IACZ2pB,aAAc,EACdjqB,MAAO,WACPyjB,OAAQ0F,EAAQtb,mBAYpCxQ,KAAKJ,MAAMytB,iBAAmBsD,GAC5B9gB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,EACJxa,MAAO,GAEPqO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZuX,cAAe,OAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,6BAGAtL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE+Q,UAAW,MACXC,QAAO,yDAEPtc,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEO,GAAI,EACJzX,KAAM,MACNtB,MAAO,YACP8O,KAAM,kBAIZ5B,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJjY,WAAY,SACZuX,cAAe,MACftX,eAAgB,iBAGd,CAAC,GAAI,GAAI,EAAE,GAAGoM,IAAK,SAAA8gB,GAAQ,OACzBphB,EAAAxO,EAAAC,cAAC4vB,GAAA,EAAD,CACE5d,UAAW,CACT7C,EAAE,GAEJgL,UAAW,CACTpY,SAAS,GAEX8tB,WAAYF,EACZpe,IAAG,YAAAC,OAAcme,GACjBG,YAAa,kBAAI9T,EAAK8Q,eAAe6C,IACrCzI,SAAUlL,EAAK1d,MAAMstB,cAAgBjrB,WAAWgvB,SAQ9DphB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,EACJxa,MAAO,EACP6Z,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,EACJlY,WAAY,SACZuX,cAAe,MACftX,eAAgB,YAGd4sB,GACE9gB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsoB,SAAU,MACVhmB,WAAY,SACZuX,cAAe,OAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE9X,SAAU,EACVJ,WAAY,EACZE,UAAW,QACXX,MAAO,CACLI,WAAW,UAEbD,MAAQV,WAAWjC,KAAKJ,MAAM6uB,iBAAiB9pB,QAAQ,IAAI,EAAI3E,KAAKE,MAAM4C,MAAM8I,OAAOC,aAAamO,OAAOqX,OAASrxB,KAAKE,MAAM4C,MAAM8I,OAAOC,aAAamO,OAAO8O,WAGvG,IAAvD7mB,WAAWjC,KAAKJ,MAAM6uB,iBAAiB9pB,QAAQ,IAC7C,cADF,GAAAmO,OAEM9S,KAAKJ,MAAM6uB,iBAAiB1Z,GAAG,GAAK,aAAe,UAFzD,KAAAjC,OAEuE9S,KAAKJ,MAAM6uB,iBAAiB9kB,MAAMhF,QAAQ,GAFjH,MAKJkL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE+Q,UAAW,MACXC,QAAUnsB,KAAKJ,MAAMiuB,oBAAX,yCAAA/a,OAA0EpP,OAAO4B,KAAKtF,KAAKJ,MAAM2hB,iBAAiBrR,KAAK,MAAvH,iEAA8LlQ,KAAKJ,MAAM6uB,iBAAiB1Z,GAAG,GAAK,uHAAyH,kHAErWlF,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEO,GAAI,EACJzX,KAAM,MACNtB,MAAO,YACP8O,KAAM,kBAIPzR,KAAKJ,MAAMiuB,qBACVhe,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEO,GAAI,EACJ/Y,MAAO,YACP4lB,WAAY,UACZ3J,QAAS5e,KAAKqtB,gBAAgBnP,KAAKle,OAJrC,WAYV6P,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsoB,SAAU,MACVhmB,WAAY,SACZuX,cAAe,MACftX,eAAgB,YAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE9X,SAAU,EACVJ,WAAY,EACZN,MAAO,YACPQ,UAAW,QACXolB,WAAY,YACZ3J,QAAU,SAACpF,GAAD,OAAO8D,EAAK6Q,uBAAuB,MAC7C3rB,MAAO,CACLsnB,SAAS,OACT3B,SAAS,SACTvlB,WAAW,SACX0uB,aAAa,aAGdtxB,KAAKJ,MAAM8tB,kBAAkB/oB,QAAQ3E,KAAKE,MAAMkD,SAAW,EAAI,GAdlE,IAcuEwtB,KAI3E/gB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEoW,IAAK,EACL3f,KAAM,SACNmM,UAAU,EACVrK,OAAQ,QACRgL,aAAc,EACdzb,WAAY,IACZ2L,UAAW,kBACX4iB,YAAW,gBACXxT,SAAUhe,KAAKkuB,iBAAiBhQ,KAAKle,MACrCyxB,OAAM,aAAA3e,OAAe9S,KAAKE,MAAM4C,MAAM8I,OAAO8lB,SAC7CjtB,MAAiC,OAA1BzE,KAAKJ,MAAMqtB,WAAsBjtB,KAAKD,cAAckR,MAAMjR,KAAKJ,MAAMqtB,YAAYtoB,UAAY,KAEtGkL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJjY,WAAY,SACZuX,cAAe,MACftX,eAAgB,iBAGd,CAAC,GAAG,GAAG,GAAG,KAAKoM,IAAK,SAAAghB,GAAU,OAC5BthB,EAAAxO,EAAAC,cAAC4vB,GAAA,EAAD,CACEC,WAAYA,EACZte,IAAG,YAAAC,OAAcqe,GACjBC,YAAa,kBAAI9T,EAAK6Q,uBAAuBgD,IAC7C3I,SAAUlL,EAAK1d,MAAMguB,sBAAwBlpB,SAASysB,SAMhEthB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEpX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC2a,EAAA,EAAD,CACEC,YAAa,CACXH,GAAG,EACHva,MAAM,CAAC,EAAE,IACT2a,SAASnc,KAAKJ,MAAMwtB,gBAEtBhR,YAAapc,KAAKoM,OAAO8R,KAAKle,OANhC,YAlXJ6P,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACT7C,EAAE,EACFsL,GAAG,EACHX,UAAU,QACV5Y,MAAM,CACJE,QAAQ,OACRoB,WAAW,SACXC,eAAe,YAInB8L,EAAAxO,EAAAC,cAACga,EAAA,EAAD,CACEC,UAAW,CACTF,cAAc,OAEhBG,YAAa,CACXvX,KAAK,QAEPwX,UAAW,CACTC,GAAG,GAELtN,KAAM,qCA/XElK,2CCgpGXytB,8MAroGb/xB,MAAQ,CACNgyB,QAAS,GACTC,SAAU,IACV5E,WAAY,GACZjU,WAAY,GACZ8Y,SAAU,KACVjyB,SAAU,KACVkyB,WAAW,EACX7E,YAAa,GACb8E,YAAY,EACZlmB,OAAQ,UACRmmB,YAAY,EACZC,YAAa,KACbC,eAAgB,GAChBC,aAAa,EACbC,cAAe,KACf9S,cAAe,KACf+S,eAAe,EACfC,eAAe,EACfC,eAAe,EACfC,gBAAgB,EAChBC,gBAAgB,EAChBtF,gBAAgB,EAChBuF,gBAAgB,EAChBC,iBAAkB,KAClBC,iBAAkB,KAClBC,iBAAkB,KAClBzF,iBAAiB,EACjB0F,iBAAiB,EACjBC,iBAAiB,EACjBC,oBAAqB,GACrBrF,oBAAqB,GACrBsF,oBAAqB,GACrBC,kBAAkB,EAClBC,kBAAkB,EAClB1F,kBAAmB,KACnB2F,oBAAoB,EACpBC,oBAAoB,EACpBC,oBAAqB,KACrBC,qBAAqB,EACrBC,qBAAqB,EACrBC,qBAAsB,KACtBC,qBAAsB,KACtBC,uBAAwB,GACxBC,uBAAuB,EACvBC,uBAAuB,EACvBC,wBAAyB,KACzBC,yBAAyB,EACzBC,wBAAyB,KACzBC,yBAAyB,EACzBC,yBAAyB,KAI3Bp0B,cAAgB,OAmBhBq0B,kBAAoB,SAAC3B,GACnB7tB,EAAK1D,SAAS,CACZuxB,sBAIJ4B,eAAiB,SAACjC,GAChBxtB,EAAK1D,SAAS,CACZkxB,mBAIJkC,0BAA4B,SAAAb,GAC1B7uB,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5BkzB,qBAAsBlzB,EAAUkzB,0BAIpCc,oBAAsB,SAAAhC,GACpB3tB,EAAK1D,SAAS,CACZqxB,qBAIJiC,kBAAoB,SAAAlB,GAClB1uB,EAAK1D,SAAS,CACZoyB,0BAIJmB,mBAAqB,SAAAjB,GACnB5uB,EAAK1D,SAAS,CACZsyB,2BAIJkB,qBAAuB,SAAAZ,GACrBlvB,EAAK1D,SAAS,CACZ4yB,6BAIJa,yBAA2B,SAAAtB,GACzBzuB,EAAK1D,SAAS,CACZmyB,0BAIJuB,eAAiB,SAAC3C,GAChBrtB,EAAK1D,SAAS,CACZ+wB,kBAIJ4C,sBAAwB,SAAC9B,GACvBnuB,EAAK1D,SAAS,CACZ6xB,kBACAE,oBAAqB,GACrBI,oBAAoB,EACpBY,wBAAyBrvB,EAAK7E,cAAckR,MAAM,GAClDuhB,eAAeO,GAA0BnuB,EAAKhF,MAAM4yB,mBAIxDsC,oBAAsB,SAACtC,GACrB5tB,EAAK1D,SAAS,CACZsxB,gBACAS,oBAAqB,GACrBI,oBAAoB,EACpBY,wBAAyBrvB,EAAK7E,cAAckR,MAAM,GAClD8hB,iBAAiBP,GAAwB5tB,EAAKhF,MAAMmzB,qBAIxDgC,8CAA2B,SAAArd,IAAA,IAAAsd,EAAAC,EAAA,OAAAvtB,EAAArG,EAAAsG,KAAA,SAAAmQ,GAAA,cAAAA,EAAAjQ,KAAAiQ,EAAAhQ,MAAA,cAAAgQ,EAAAhQ,KAAA,EACMlD,EAAK7E,cAAcm1B,oBAAoBtwB,EAAK1E,MAAM+a,QAASrW,EAAK1E,MAAM6H,aAD5E,cACnBitB,EADmBld,EAAAyB,KAEnB0b,EAAiBvxB,OAAO4B,KAAK0vB,GAAkB7kB,IAAI,SAAA4K,GACvD,OAAOnW,EAAKhF,MAAMqzB,oBAAoB5e,SAAS0G,KAHxBjD,EAAA7P,OAAA,SAMlBgtB,GANkB,wBAAAnd,EAAAE,SAAAN,EAAA1X,WAS3Bm1B,+CAA4B,SAAApwB,IAAA,IAAAkvB,EAAAmB,EAAAC,EAAAC,EAAAvhB,EAAAC,EAAAuhB,EAAAC,EAAAC,EAAA/B,EAAAK,EAAA,OAAArsB,EAAArG,EAAAsG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACtBmsB,EAA0BrvB,EAAK7E,cAAckR,MAAM,GACjDmkB,EAAiBxwB,EAAK7E,cAAc0kB,gBAAgB,CAAC,QAAS,SAAU,QAFpD7c,EAAAE,KAAA,EAIpBlD,EAAK7E,cAAckX,aAAarS,EAAKhF,MAAMqzB,oBAA3C,eAAA7f,EAAA1P,OAAAyT,EAAA,EAAAzT,CAAAgE,EAAArG,EAAA+V,KAAgE,SAAAC,EAAOwU,GAAP,IAAA6J,EAAAC,EAAAC,EAAA,OAAAluB,EAAArG,EAAAsG,KAAA,SAAA6P,GAAA,cAAAA,EAAA3P,KAAA2P,EAAA1P,MAAA,cAC9D4tB,EAAiB9wB,EAAK7E,cAAc0kB,gBAAgB,CAAC,YAAaoH,IADJrU,EAAA1P,KAAA,EAExClD,EAAK7E,cAAc81B,yBAAyBT,EAAgBM,GAFpB,OAE9DC,EAF8Dne,EAAA+B,KAG9Dqc,EAAgBhxB,EAAK1E,MAAM41B,sBAAsBjK,GAAU7qB,MAAM20B,GACvE1B,EAA0BA,EAAwBlzB,KAAK60B,GAJa,wBAAApe,EAAAQ,SAAAX,EAAArX,SAAhE,gBAAAoY,GAAA,OAAAhF,EAAA8E,MAAAlY,KAAAmY,YAAA,IAJoB,cAAAvQ,EAAAE,KAAA,EAWQlD,EAAKmwB,2BAXb,cAWpBM,EAXoBztB,EAAA2R,KAYpB+b,EAAkB1wB,EAAK7E,cAAc0kB,gBAAgB,CAAC,QAAS,SAAU,SAZrD7c,EAAAE,KAAA,GAkBhBqjB,QAAQC,IAAI,CACpBxmB,EAAK7E,cAAc81B,yBAAyBT,EAAgBE,GAC5D1wB,EAAK7E,cAAcg2B,uBAAuBnxB,EAAK1E,MAAM6H,YAAYiN,KAAK+F,MAAO,kBAAmB,CAACnW,EAAK7E,cAAcyuB,qBAAqB5pB,EAAK1E,MAAM81B,iBAAkBpxB,EAAK1E,MAAM6H,YAAYpG,WAAYiD,EAAK1E,MAAM+a,SACpNrW,EAAK7E,cAAcg2B,uBAAuBnxB,EAAK1E,MAAM6H,YAAYiN,KAAK+F,MAAO,yBAA0B,CAACnW,EAAK7E,cAAcyuB,qBAAqB5pB,EAAK1E,MAAM81B,iBAAkBpxB,EAAK1E,MAAM6H,YAAYpG,UAAW0zB,GAAsBzwB,EAAK1E,MAAM+a,WArBxN,eAAAlH,EAAAnM,EAAA2R,KAAAvF,EAAAtQ,OAAAuyB,EAAA,EAAAvyB,CAAAqQ,EAAA,GAexBwhB,EAfwBvhB,EAAA,GAgBxBwhB,EAhBwBxhB,EAAA,GAiBxByhB,EAjBwBzhB,EAAA,GAwBpB0f,EAAuB8B,GAAkBC,EAAwBD,EAAejsB,MAAMksB,GAAyB7wB,EAAK7E,cAAckR,MAAM,GACxI8iB,EAA0BL,EAAuBA,EAAqB1yB,MAAMu0B,GAAa3wB,EAAK7E,cAAckR,MAAM,GAExHrM,EAAK1D,SAAS,CACZwyB,uBACAK,0BACAE,4BA9BwBrsB,EAAAK,OAAA,SAgCnBgsB,GAhCmB,yBAAArsB,EAAAoQ,SAAAjT,EAAA/E,WAmC5Bk2B,uBAAyB,SAACnb,EAAO+V,GAC/BlsB,EAAK1D,SAAS,SAACX,GACb,IAAM0yB,EAAsBvvB,OAAOC,OAAO,GAAIpD,EAAU0yB,qBAMxD,OALKnC,GAAWmC,EAAoB5e,SAAS0G,GAC3CkY,EAAoBkD,OAAOlD,EAAoB1hB,QAAQwJ,GAAQ,GACtD+V,IAAYmC,EAAoB5e,SAAS0G,IAClDkY,EAAoB/oB,KAAK6Q,GAEpB,CACLkY,wBAED,WACDruB,EAAKuwB,iCAITiB,4BAA8B,SAACvC,GAC7B,IAAM3Y,EAAW,CACf2Y,yBAGFjvB,EAAK1D,SAASga,EAAU,WACtBtW,EAAKisB,yBAITwF,8BAAgC,SAACrC,GAC/BpvB,EAAK1D,SAAS,CACZ8yB,+BAyDJsC,WAAa,WACX1xB,EAAK1D,SAAS,CACZgxB,YAAa,UAIjBqE,eAAiB,SAAArE,GACfttB,EAAK1D,SAAS,CACZgxB,mBAyKJsE,sBAAwB,WACtB,IAAMC,EAAgB7xB,EAAKhF,MAAMszB,oBAAoBtuB,EAAKhF,MAAMkM,QAC1D4qB,EAA+B9xB,EAAK7E,cAAc0kB,gBAAgB,CAAC,WAAY,UAAW,UAAW,2BAA6B7f,EAAKhF,MAAMi0B,sBAC7I8C,EAAiC/xB,EAAK7E,cAAc0kB,gBAAgB,CAAC,WAAY,UAAW,UAAW,6BAA+B7f,EAAKhF,MAAMo0B,wBACvJ,OAAS0C,GAAgCC,IAAmCF,GAAiB7xB,EAAK1E,MAAM02B,YAG1GC,sDAAkB,SAAAC,EAAOC,EAAiBC,GAAxB,IAAAC,EAAAR,EAAA,OAAA/uB,EAAArG,EAAAsG,KAAA,SAAAuvB,GAAA,cAAAA,EAAArvB,KAAAqvB,EAAApvB,MAAA,OACZlD,EAAKhF,MAAM4zB,qBACPyD,EAAuBryB,EAAK7E,cAAc0kB,gBAAgB,CAAC,QAAS,oBAC1E7f,EAAK7E,cAAco3B,YAAYvyB,EAAK1E,MAAM2E,cAAeoyB,EAAqBlmB,QAASgmB,EAAiBC,IAG/EpyB,EAAK4xB,yBAEtBC,EAAgB7xB,EAAKhF,MAAMszB,oBAAoBtuB,EAAKhF,MAAMkM,QAChElH,EAAK7E,cAAco3B,YAAYvyB,EAAK1E,MAAM2E,cAAe4xB,EAAc1lB,QAASgmB,EAAiBC,IAEjGpyB,EAAK7E,cAAco3B,YAAYvyB,EAAK1E,MAAM2E,cAAeD,EAAK1E,MAAM6H,YAAYiN,KAAKjE,QAASgmB,EAAiBC,GAXnG,wBAAAE,EAAAlf,SAAA8e,EAAA92B,mEAgBlBo3B,wCAAqB,SAAAC,IAAA,IAAA/E,EAAA2E,EAAAR,EAAA,OAAA/uB,EAAArG,EAAAsG,KAAA,SAAA2vB,GAAA,cAAAA,EAAAzvB,KAAAyvB,EAAAxvB,MAAA,UACfwqB,GAAgB,GAChB1tB,EAAKhF,MAAM4zB,oBAFI,CAAA8D,EAAAxvB,KAAA,eAGXmvB,EAAuBryB,EAAK7E,cAAc0kB,gBAAgB,CAAC,QAAS,oBAHzD6S,EAAAxvB,KAAA,EAIKlD,EAAK7E,cAAcq3B,mBAAmBxyB,EAAK1E,MAAM2E,cAAeoyB,EAAqBlmB,QAASnM,EAAK1E,MAAM+a,SAJ9G,OAIjBqX,EAJiBgF,EAAA/d,KAAA+d,EAAAxvB,KAAA,oBAOQlD,EAAK4xB,wBAPb,CAAAc,EAAAxvB,KAAA,cAUsBlD,EAAK7E,cAAc0kB,gBAAgB,CAAC,WAAY,UAAW,UAAW,2BAA6B7f,EAAKhF,MAAMi0B,uBAVpI,CAAAyD,EAAAxvB,KAAA,aAYSlD,EAAK7E,cAAc0kB,gBAAgB,CAAC,SAAU7f,EAAK1E,MAAM2E,gBAZlE,CAAAyyB,EAAAxvB,KAAA,gBAAAwvB,EAAArvB,OAAA,UAcJ,GAdI,eAkBTwuB,EAAgB7xB,EAAKhF,MAAMszB,oBAAoBtuB,EAAKhF,MAAMkM,QAlBjDwrB,EAAAxvB,KAAA,GAmBOlD,EAAK7E,cAAcq3B,mBAAmBxyB,EAAK1E,MAAM2E,cAAe4xB,EAAc1lB,QAASnM,EAAK1E,MAAM+a,SAnBzG,QAmBfqX,EAnBegF,EAAA/d,KAAA+d,EAAAxvB,KAAA,wBAAAwvB,EAAAxvB,KAAA,GAsBOlD,EAAK7E,cAAcq3B,mBAAmBxyB,EAAK1E,MAAM2E,cAAeD,EAAK1E,MAAM6H,YAAYiN,KAAKjE,QAASnM,EAAK1E,MAAM+a,SAtBvH,QAsBfqX,EAtBegF,EAAA/d,KAAA,eAAA+d,EAAArvB,OAAA,SA2BZqqB,GA3BY,yBAAAgF,EAAAtf,SAAAqf,EAAAr3B,WA8BrBu3B,kCAAe,SAAAC,IAAA,IAAAlF,EAAAyE,EAAAC,EAAA,OAAAtvB,EAAArG,EAAAsG,KAAA,SAAA8vB,GAAA,cAAAA,EAAA5vB,KAAA4vB,EAAA3vB,MAAA,cAAA2vB,EAAA3vB,KAAA,EAGelD,EAAKwyB,qBAHpB,YAGP9E,EAHOmF,EAAAle,MAAA,CAAAke,EAAA3vB,KAAA,eAAA2vB,EAAAxvB,OAAA,SAMJrD,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CACnC+xB,gBACAtZ,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADL,CAER0e,QAAS,CACPxe,OAAQ,KACRH,SAAS,SAZJ,OAkBPge,EAAkB,SAACnd,EAAIC,GAE3B,IAAMC,EAAY,CAChBG,cAAe,UACfC,YAAatV,EAAK1E,MAAM2E,cACxBkV,WAAYH,EAAGI,QAGbH,IACFC,EAAUC,WAAanV,EAAK7E,cAAcoa,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUE,SACrBpV,EAAK7E,cAAcqa,yBAAyBN,GAG9ClV,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5B+xB,cAA8B,YAAd1Y,EAAGI,OACnBhB,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADL,CAER0e,QAAS,CACPxe,OAAQ,KACRH,SAAS,SAMXie,EAAyB,SAACpd,GAC9B,IAAMV,EAASU,EAAGiB,gBAClBjW,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5ByY,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADL,CAER0e,QAAQh0B,OAAA8Q,EAAA,EAAA9Q,CAAA,GACHnD,EAAUyY,WAAV,QADE,CAELE,iBAMRtU,EAAKiyB,gBAAgBE,EAAiBC,GAEtCpyB,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5ByY,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADL,CAER0e,QAAS,CACPxe,OAAQ,KACRH,SAAS,QAnEF,wBAAA0e,EAAAzf,SAAAwf,EAAAx3B,WAyEf23B,mCAAgB,SAAAC,IAAA,IAAAnI,EAAAlC,EAAAsK,EAAAC,EAAAC,EAAAzF,EAAAI,EAAAjF,EAAAwJ,EAAA1X,EAAA4T,EAAAzF,EAAAsE,EAAAD,EAAAiB,EAAAQ,EAAAM,EAAAnB,EAAAW,EAAAnB,EAAAjX,EAAA,OAAAxT,EAAArG,EAAAsG,KAAA,SAAAqwB,GAAA,cAAAA,EAAAnwB,KAAAmwB,EAAAlwB,MAAA,cAEVlD,EAAKhF,MAAMwzB,kBACbxuB,EAAK1D,SAAS,CACZkyB,kBAAkB,IAIhB3D,EAAc7qB,EAAK7E,cAAc0kB,gBAAgB,CAAC,UAClD8I,EAAmB3oB,EAAK7E,cAAc0kB,gBAAgB,CAAC,QAAS,kBAAmB7f,EAAK1E,MAAM6H,YAAYiN,KAAK+F,QAC/G8c,EAAoBpI,EAAYnb,SAAWiZ,GAAoBA,EAAiBjZ,QAVxE0jB,EAAAlwB,KAAA,EAoBJqjB,QAAQC,IAAI,CACpBxmB,EAAKwyB,qBACLxyB,EAAK7E,cAAck4B,sBACnBrzB,EAAK7E,cAAc4vB,uBACnB/qB,EAAK7E,cAAcm4B,0BACnBtzB,EAAK7E,cAAcwiB,iBAAiB3d,EAAK1E,MAAM6H,aAC/CnD,EAAK7E,cAAco4B,eAAevzB,EAAK1E,MAAM6H,YAAanD,EAAK1E,MAAM+a,SACrE4c,EAAoBjzB,EAAK7E,cAAc6vB,qBAAqBhrB,EAAK1E,MAAM+a,SAAW,OA3BtE,OAAA6c,EAAAE,EAAAze,KAAAwe,EAAAr0B,OAAAuyB,EAAA,EAAAvyB,CAAAo0B,EAAA,GAaZxF,EAbYyF,EAAA,GAcZrF,EAdYqF,EAAA,GAeZtK,EAfYsK,EAAA,GAgBZd,EAhBYc,EAAA,GAiBZxY,EAjBYwY,EAAA,GAkBV5E,EAlBU4E,EAAA,GAkBV5E,iBACFzF,EAnBYqK,EAAA,GA8BR/F,EAAaptB,EAAK1E,MAAMk4B,cAAgBxzB,EAAK7E,cAAckR,MAAMrM,EAAK1E,MAAMk4B,cAAcrjB,GAAG,GAC7Fgd,EAAYntB,EAAK1E,MAAM81B,kBAAoBpxB,EAAK7E,cAAckR,MAAMrM,EAAK1E,MAAM81B,kBAAkBjhB,GAAG,GAGpGye,EADAR,EAAkB6E,GAAqB7F,EAGvC8B,EAAqD,SAA7BlvB,EAAK1E,MAAM2E,gBAA6BD,EAAKhF,MAAMk0B,wBAA0B9B,GAErGW,EAAiBkF,GAAqBnK,GAAqBA,EAAkB3Y,GAAG,GAChFue,EAAqBX,EAErBR,EAAiBvtB,EAAK7E,cAAcs4B,kBAAkBzzB,EAAK1E,MAAM6H,cAEjEmT,EA3CQxX,OAAA8Q,EAAA,EAAA9Q,CAAA,GA2CQkB,EAAKhF,QAGd4zB,sBAAwBqE,IACnC3c,EAASsY,qBAAsB,GAIjCtY,EAAS6W,UAAYA,EACrB7W,EAAS8W,WAAaA,EACtB9W,EAASqE,cAAgBA,EACzBrE,EAASoX,cAAgBA,EACzBpX,EAASiX,eAAiBA,EAC1BjX,EAASwX,eAAiBA,EAC1BxX,EAASyX,eAAiBA,EAC1BzX,EAAS8X,gBAAkBA,EAC3B9X,EAASiY,iBAAmBA,EAC5BjY,EAASwS,kBAAoBA,EAC7BxS,EAASuS,kBAAoBA,EAC7BvS,EAASoY,mBAAqBA,EAC9BpY,EAASsY,oBAAsBA,EAC/BtY,EAAS+b,qBAAuBA,EAChC/b,EAAS4Y,sBAAwBA,EAEjC5Y,EAAS0W,QAAU,CACjBxlB,QAAQ,EACRL,SAAS,GAEXmP,EAASlC,WAAa,CACpB5M,OAAQ,CACN8M,OAAQ,KACRH,SAAS,GAEXhN,QAAS,CACPmN,OAAQ,KACRH,SAAS,GAEX2e,QAAS,CACPxe,OAAQ,KACRH,SAAS,GAEXuf,MAAO,CACLpf,OAAQ,KACRH,SAAS,IAGbmC,EAAS+R,WAAa,CACpBqL,MAAO,KACPlsB,OAAQ,KACRL,QAAS,MAEXmP,EAAS0S,oBAAsB,CAC7B0K,MAAO,KACPlsB,OAAQ,KACRL,QAAS,MAGXmP,EAASkY,kBAAmB,EAE5BxuB,EAAK1D,SAASga,EAAU,WACtBtW,EAAK2zB,cACL3zB,EAAK4zB,YAxGO,yBAAAR,EAAAhgB,SAAA4f,EAAA53B,WA4GhB6wB,uCAAoB,SAAA4H,IAAA,OAAA/wB,EAAArG,EAAAsG,KAAA,SAAA+wB,GAAA,cAAAA,EAAA7wB,KAAA6wB,EAAA5wB,MAAA,OAClBlD,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5BqyB,iBAAkB,KAClBuB,yBAAyB,EACzBnb,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADLtV,OAAAi1B,GAAA,EAAAj1B,CAAA,CAERg0B,QAAS,CACPxe,OAAQ,KACRH,SAAS,IAEVnU,EAAKhF,MAAMkM,OAAS,CACnBoN,OAAQ,KACRH,SAAS,QAZG,wBAAA2f,EAAA1gB,SAAAygB,EAAAz4B,WAkBpB44B,mCAAgB,SAAAC,IAAA,IAAAC,EAAA/F,EAAAvD,EAAAvC,EAAAuF,EAAAkE,EAAAC,EAAA5d,EAAAggB,EAAAC,EAAAvJ,EAAAwJ,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAhK,EAAAG,EAAA8J,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAjF,EAAA,OAAA3tB,EAAArG,EAAAsG,KAAA,SAAA4yB,GAAA,cAAAA,EAAA1yB,KAAA0yB,EAAAzyB,MAAA,OAEVgxB,EAAqB,KACnB/F,EAAkBnuB,EAAKhF,MAAMmzB,gBAC7BvD,EAAqB5qB,EAAK41B,yBAC1BvN,EAAaroB,EAAKhF,MAAMqtB,WAAWroB,EAAKhF,MAAMkM,QAC9C0mB,EAAgB5tB,EAAKhF,MAAM4yB,eAAiB5tB,EAAKhF,MAAMqzB,oBAAoB/qB,OAAS,GAAKtD,EAAKhF,MAAMyzB,mBAEpGqD,EAA+B9xB,EAAK7E,cAAc0kB,gBAAgB,CAAC,WAAY,UAAW,UAAW,2BAA6B7f,EAAKhF,MAAMi0B,sBAC7I8C,EAAiC/xB,EAAK7E,cAAc0kB,gBAAgB,CAAC,WAAY,UAAW,UAAW,6BAA+B7f,EAAKhF,MAAMo0B,wBAEnJjb,GAAU,EAXAwhB,EAAA/xB,GAaN5D,EAAKhF,MAAMkM,OAbLyuB,EAAAzyB,KAcP,YAdOyyB,EAAA/xB,GAAA,GAmUP,WAnUO+xB,EAAA/xB,GAAA,yBAgBN5D,EAAKhF,MAAMwtB,gBAAmBH,IAAcroB,EAAK7E,cAAckR,MAAMgc,GAAYvB,IAAI,GAhB/E,CAAA6O,EAAAzyB,KAAA,gBAAAyyB,EAAAtyB,OAAA,UAiBD,GAjBC,WAoBLrD,EAAKhF,MAAM0yB,cApBN,CAAAiI,EAAAzyB,KAAA,gBAAAyyB,EAAAtyB,OAAA,SAqBDrD,EAAK2yB,gBArBJ,WAwBNkD,cACF71B,EAAK7E,cAAc26B,gBAAgB,6BAA8B,GAGnE91B,EAAK1D,SAAS,CACZy5B,kBAAmB/1B,EAAK1E,MAAM+a,QAC9B2f,WAAY,GACZC,aAAc,KAGV9B,EAAkB,SAACnf,EAAIC,IAEtBD,GAAMC,IACTD,EAAK,CACHI,OAAQ,UAIZ,IAAM4X,EAAwB,UAAdhY,EAAGI,OACbgW,EAA4B,YAAdpW,EAAGI,OAEjBF,EAAY,CAChBG,cAAe,UACfC,YAAatV,EAAK1E,MAAM2E,cACxBkV,WAAYH,EAAGI,OACfiW,WAAYvrB,SAASuoB,IAGnBpT,IACFC,EAAUC,WAAanV,EAAK7E,cAAcoa,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUE,SACrBpV,EAAK7E,cAAcqa,yBAAyBN,GAG9ClV,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5ByY,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADLtV,OAAAi1B,GAAA,EAAAj1B,CAAA,GAEPkB,EAAKhF,MAAMkM,OAAS,CACnBoN,OAAQ,KACRH,SAAS,QAKXiX,EACFprB,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5B2xB,YAAa,QACbjF,WAAWvpB,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAU0sB,WADLvpB,OAAAi1B,GAAA,EAAAj1B,CAAA,GAEPkB,EAAKhF,MAAMkM,OAASlH,EAAK7E,cAAckR,MAAM,SAGxCrM,EAAKhF,MAAMo0B,yBAA2BpvB,EAAKhF,MAAMi0B,wBAA0BjC,GACrFhtB,EAAK1D,SAAS,CACZ0xB,iBAAkB,KAClBuB,yBAAyB,EACzBvC,QAAQluB,OAAAi1B,GAAA,EAAAj1B,CAAA,GACLkB,EAAKhF,MAAMkM,QAAS,MAMvBktB,EAAyB,SAACpf,GAE9B,IAAMV,EAASU,EAAGiB,gBAClBjW,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5ByY,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADLtV,OAAAi1B,GAAA,EAAAj1B,CAAA,GAEPkB,EAAKhF,MAAMkM,OAFJpI,OAAA8Q,EAAA,EAAA9Q,CAAA,GAGHnD,EAAUyY,WAAWpU,EAAKhF,MAAMkM,QAH7B,CAINoN,iBAMFuW,EAAc7qB,EAAK7E,cAAc0kB,gBAAgB,CAAC,YAC9BgL,EAAYnb,SAAW1P,EAAK7E,cAAc0kB,gBAAgB,CAAC,QAAS,kBAAmB7f,EAAK1E,MAAM6H,YAAYiN,KAAK+F,MAAO,eAG3HnW,EAAKhF,MAAM4zB,oBA5G1B,CAAA+G,EAAAzyB,KAAA,gBA8GFmxB,EAAwBr0B,EAAK7E,cAAc0kB,gBAAgB,CAAC,QAAS,iBACrEyU,EAAkBt0B,EAAK7E,cAAcyuB,qBAAqBvB,EAAYgM,EAAsBt3B,UA/G1F44B,EAAAzyB,KAAA,GAiHclD,EAAK7E,cAAc+6B,gBAAgBl2B,EAAK1E,MAAM6H,YAAYiN,KAAK+F,MAAOme,GAjHpF,eAiHFC,EAjHEoB,EAAAhhB,KAAAghB,EAAAzyB,KAAA,GAkHkBlD,EAAK7E,cAAcg7B,oBAAoB5B,GAlHzD,eAkHJC,EAlHImB,EAAAhhB,KAmHJ3U,EAAKhF,MAAMstB,cAEbkM,GADAA,EAAgBx0B,EAAK7E,cAAckR,MAAMmoB,IACX7vB,MAAM6vB,EAAcp4B,MAAM4D,EAAK7E,cAAckR,MAAMrM,EAAKhF,MAAMstB,aAAajsB,IAAI,OAC7Gm4B,EAAgBx0B,EAAK7E,cAAci7B,aAAa5B,IAG5CC,EAAgB,CAACF,EAASC,GAzHxBmB,EAAAzyB,KAAA,GA2HmBlD,EAAK7E,cAAc+a,0BAA0BlW,EAAKhF,MAAMq3B,qBAAqBxlB,KAAM,gBAAiB4nB,EAAeN,EAAiBC,GA3HvJ,QA2HRF,EA3HQyB,EAAAhhB,KAAAghB,EAAAzyB,KAAA,oBA8HFoxB,EAAkBt0B,EAAK7E,cAAcyuB,qBAAqBvB,EAAYroB,EAAK1E,MAAM6H,YAAYpG,UAG/F03B,EAAgB,IAGKz0B,EAAK4xB,wBApItB,CAAA+D,EAAAzyB,KAAA,YAsIA0xB,EAAwB50B,EAAKhF,MAAMszB,oBAAoBtuB,EAAKhF,MAAMkM,QAClE2tB,EAAoBD,EAAsByB,UAG5CtE,EA1IE,CAAA4D,EAAAzyB,KAAA,gBA2IJuxB,EAAgB,CAACH,EAAiBt0B,EAAK1E,MAAM6H,YAAYiN,KAAKjE,SACxD4oB,GAAeD,EAAAD,EAAkByB,SAAQ1B,EAAsB2B,UAAhDjjB,MAAAwhB,EAAAh2B,OAAA03B,GAAA,EAAA13B,CAA6D21B,IAC5EO,EAAoBD,EAAa0B,YA7InCd,EAAAzyB,KAAA,GAgJuBlD,EAAK7E,cAAcu7B,+BAA+B9B,EAAsB/nB,KAAMmoB,EAAmBb,EAAiBC,GAhJzI,QAgJJF,EAhJIyB,EAAAhhB,KAAAghB,EAAAzyB,KAAA,iBAqJK4uB,IAGHmD,EAAYL,EAAsByB,SAASM,eAAeroB,KAAK,SAAAsoB,GAAC,OAAIA,EAAE/pB,OAAS+nB,EAAsB2B,WACrGrB,GAAWD,GAAYA,EAAU4B,OAAOvoB,KAAK,SAAAzM,GAAC,MAAe,UAAXA,EAAEgL,OAGrD7M,EAAKhF,MAAMgzB,iBA+EdhuB,EAAK1D,SAAS,CACZ0wB,QAAQluB,OAAAi1B,GAAA,EAAAj1B,CAAA,GACLkB,EAAKhF,MAAMkM,QAAS,GAEvBqoB,yBAAyB,GAJ3BzwB,OAAAyT,EAAA,EAAAzT,CAAAgE,EAAArG,EAAA+V,KAKG,SAAAskB,IAAA,IAAAC,EAAAC,EAAAhI,EAAAiI,EAAAC,EAAAjJ,EAAAkJ,EAAAC,EAAAC,EAAAC,EAAA1b,EAAA2b,EAAAryB,EAAA,OAAApC,EAAArG,EAAAsG,KAAA,SAAAy0B,GAAA,cAAAA,EAAAv0B,KAAAu0B,EAAAt0B,MAAA,cACK6zB,EAAW,GACXC,EAAgB,GAChBhI,EAAyBhvB,EAAKhF,MAAMg0B,uBAAuBhvB,EAAKhF,MAAMkM,QACtE+vB,EAA6Bj3B,EAAK7E,cAAc0kB,gBAAgB,CAAC,WAAY,UAAW7f,EAAKhF,MAAMkM,OAAQ,8BAA+B,cAE1IgwB,EANL,GAAAhpB,OAMsBomB,EANtB,MAOsB,EAPtBkD,EAAAt0B,KAAA,EAQ8BlD,EAAK7E,cAAcs8B,WAAWz3B,EAAK1E,MAAM2E,cAAeD,EAAK1E,MAAM+a,QAAS4gB,EAA2BpqB,KAD/G,EACqIqqB,GAR3J,YAQKjJ,EARLuJ,EAAA7iB,MAAA,CAAA6iB,EAAAt0B,KAAA,gBAcClD,EAAK1D,SAAS,CACZ2xB,qBAGIkJ,EAAen3B,EAAK7E,cAAc0kB,gBAAgB,CAAC,SAAU7f,EAAK1E,MAAM2E,gBACxEm3B,EAAWD,EAAanqB,KAAKsB,KAAK,SAAAopB,GAAC,MAAe,UAAXA,EAAE7qB,OAEvCwqB,EAA2BpJ,EAA3BoJ,OAAQC,EAAmBrJ,EAAnBqJ,MAAO1b,EAAYqS,EAAZrS,EAAG2b,EAAStJ,EAATsJ,EAAGryB,EAAM+oB,EAAN/oB,EAC7B8xB,EAAc9xB,EAAIA,EAClB8xB,EAAcpb,EAAIA,EAClBob,EAAcO,EAAIA,EAClBP,EAAcW,SAAU,EACxBX,EAAcK,OAASv3B,SAASu3B,GAChCL,EAAcY,OAAS53B,EAAK1E,MAAM+a,QAClC2gB,EAAcn3B,MAAQu3B,EAAWF,EAAc,EAC/CF,EAAcM,MAAQx3B,SAASw3B,EAAM1rB,YACrCorB,EAAca,QAAUZ,EAA2B9qB,QAEnD4qB,EAASe,WAAad,EACtBD,EAASgB,WAAa/I,EAAuB+I,WAjC9CP,EAAAt0B,KAAA,GAqCOlD,EAAK7E,cAAc68B,aAAa,KArCvC,eAAAR,EAAAt0B,KAAA,GAuC4BlD,EAAK7E,cAAc88B,iCAAiCj4B,EAAKhF,MAAMgzB,iBAAiBkK,QAASnB,EAAU5C,EAAiBC,GAvChJ,QAuCCF,EAvCDsD,EAAA7iB,KAyCC3U,EAAK1D,SAAS,CACZ0xB,iBAAkB,KAClBuB,yBAAyB,IA3C5BiI,EAAAt0B,KAAA,wBAAAs0B,EAAAn0B,OAAA,SA8CQrD,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CACnCyY,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADLtV,OAAAi1B,GAAA,EAAAj1B,CAAA,GAEPkB,EAAKhF,MAAMkM,OAAS,CACnBoN,OAAQ,KACRH,SAAS,KAGb8Z,iBAAkB,KAClBD,iBAAkB,KAClBuB,yBAAyB,MAxD5B,yBAAAiI,EAAApkB,SAAA0jB,EAAA17B,UAnFH4E,EAAK1D,SAAS,CACZ0wB,QAAQluB,OAAAi1B,GAAA,EAAAj1B,CAAA,GACLkB,EAAKhF,MAAMkM,QAAS,GAEvBqoB,yBAAyB,GAJ3BzwB,OAAAyT,EAAA,EAAAzT,CAAAgE,EAAArG,EAAA+V,KAKG,SAAA2lB,IAAA,IAAAnJ,EAAAf,EAAAmK,EAAAf,EAAAC,EAAA1b,EAAA2b,EAAAryB,EAAA6yB,EAAAM,EAAAC,EAAAC,EAAAvK,EAAA,OAAAlrB,EAAArG,EAAAsG,KAAA,SAAAy1B,GAAA,cAAAA,EAAAv1B,KAAAu1B,EAAAt1B,MAAA,cACK8rB,EAAyBhvB,EAAKhF,MAAMg0B,uBAAuBhvB,EAAKhF,MAAMkM,QAD3EsxB,EAAAt1B,KAAA,EAE8BlD,EAAK7E,cAAcs8B,WAAWz3B,EAAK1E,MAAM2E,cAAeD,EAAK1E,MAAM+a,QAAS2Y,EAAuBniB,KAAM,EAAGynB,GAF1I,YAEKrG,EAFLuK,EAAA7jB,MAAA,CAAA6jB,EAAAt1B,KAAA,gBAQSm0B,EAA2BpJ,EAA3BoJ,OAAQC,EAAmBrJ,EAAnBqJ,MAAO1b,EAAYqS,EAAZrS,EAAG2b,EAAStJ,EAATsJ,EAAGryB,EAAM+oB,EAAN/oB,EAG3BuvB,EADES,EACc,CAACZ,EAAiBx0B,SAASw3B,GAAQD,EAAQnyB,EAAG0W,EAAG2b,GAEjD,CAACjD,EAAiB+C,EAAQnyB,EAAG0W,EAAG2b,GAGX,QAAnC3C,EAAsB2B,WACxB9B,EAAgB,IAOZsD,EAAa/I,EAAuB+I,WACpChD,GAAeqD,EAAApJ,EAAuBqH,SAASC,SAAQtH,EAAuBuH,UAA/DjjB,MAAA8kB,EAAAt5B,OAAA03B,GAAA,EAAA13B,CAA4E21B,IAC3FO,EAAoBD,EAAa0B,YAInC8B,EAAW,KA9BhBC,EAAAv1B,KAAA,GAAAu1B,EAAAt1B,KAAA,GAgCoB6xB,EAAa0D,YAAY,CAAEtuB,KAAMnK,EAAK1E,MAAM+a,UAhChE,QAkCKkiB,GAFFA,EAhCHC,EAAA7jB,MAkCgB3U,EAAK7E,cAAckR,MAAMksB,GAAUn8B,MAAM,KAEzC4D,EAAK7E,cAAckR,MAAM,KApCzCmsB,EAAAt1B,KAAA,iBAAAs1B,EAAAv1B,KAAA,GAAAu1B,EAAA50B,GAAA40B,EAAA,yBA0CMD,IACHA,EAAWv4B,EAAK7E,cAAckR,MAAM,MA3CvCmsB,EAAAt1B,KAAA,GAkDgClD,EAAK7E,cAAcu9B,8BAA8B1J,EAAuBniB,KAAM7M,EAAK1E,MAAM6H,YAAYgJ,QAAS4rB,EAAY/C,EAAmBuD,GAlD7K,eAkDOvK,EAlDPwK,EAAA7jB,KAAA6jB,EAAAn1B,OAAA,SAoDQrD,EAAK1D,SAAS,CACnB0xB,mBACAuB,yBAAyB,KAtD5B,eAAAiJ,EAAAn1B,OAAA,SAyDQrD,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CACnCyY,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADLtV,OAAAi1B,GAAA,EAAAj1B,CAAA,GAEPkB,EAAKhF,MAAMkM,OAAS,CACnBoN,OAAQ,KACRH,SAAS,KAGb8Z,iBAAkB,KAClBD,iBAAkB,KAClBuB,yBAAyB,MAnE5B,yBAAAiJ,EAAAplB,SAAA+kB,EAAA/8B,KAAA,gBAlKD,QAAAu6B,EAAAzyB,KAAA,wBA0TU,EAEViyB,EAAYn1B,EAAK24B,sBAAwB,6CAC/ClE,EAAgB,CAACH,GAHD,EAG6Ba,GA7TvCQ,EAAAzyB,KAAA,GA+TqBlD,EAAK7E,cAAc+a,0BAA0BlW,EAAK1E,MAAM6H,YAAYiN,KAAK+F,MAAO,gBAAiBse,EAAeN,EAAiBC,GA/TtJ,QA+TNF,EA/TMyB,EAAAhhB,KAAA,eAAAghB,EAAAtyB,OAAA,yBAqUN8qB,EArUM,CAAAwH,EAAAzyB,KAAA,gBAsUFioB,EAAiB,SAACnW,EAAIC,GAC1B,IAAMmW,EAA4B,YAAdpW,EAAGI,OAGjBF,EAAY,CAChBG,cAAa,aACbC,YAAatV,EAAK1E,MAAM2E,cACxBkV,WAAYH,EAAGI,OACfiW,WAAY,GAGVpW,IACFC,EAAUC,WAAanV,EAAK7E,cAAcoa,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUE,SACrBpV,EAAK7E,cAAcqa,yBAAyBN,GAG9ClV,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5ByY,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADLtV,OAAAi1B,GAAA,EAAAj1B,CAAA,GAEPkB,EAAKhF,MAAMkM,OAAS,CACnBoN,OAAQ,KACRH,SAAS,QAKXiX,GACFprB,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5B0sB,WAAWvpB,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAU0sB,WADLvpB,OAAAi1B,GAAA,EAAAj1B,CAAA,GAEPkB,EAAKhF,MAAMkM,OAASlH,EAAK7E,cAAckR,MAAM,SAMhDif,EAAwB,SAACtW,GAC7B,IAAMV,EAASU,EAAGiB,gBAClBjW,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5ByY,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADLtV,OAAAi1B,GAAA,EAAAj1B,CAAA,GAEPkB,EAAKhF,MAAMkM,OAFJpI,OAAA8Q,EAAA,EAAA9Q,CAAA,GAGHnD,EAAUyY,WAAWpU,EAAKhF,MAAMkM,QAH7B,CAINoN,iBArXAqhB,EAAAzyB,KAAA,GA2XmBlD,EAAK7E,cAAc+a,0BAA0BlW,EAAK1E,MAAM6H,YAAYiN,KAAK+F,MAAO,kBAAmB,CAAC,GAAIgV,EAAgBG,GA3X3I,QA2XR4I,EA3XQyB,EAAAhhB,KAAAghB,EAAAzyB,KAAA,qBA+XJlD,EAAKhF,MAAMwtB,gBAAmBH,IAAcroB,EAAK7E,cAAckR,MAAMgc,GAAYvB,IAAI,GA/XjF,CAAA6O,EAAAzyB,KAAA,gBAAAyyB,EAAAtyB,OAAA,UAgYC,GAhYD,WAmYF+xB,EAAS,CACbv1B,MAAOG,EAAK7E,cAAckR,MAAMgc,IAG9BgN,EAAoB,MACpBzK,EAxYI,CAAA+K,EAAAzyB,KAAA,SAyYNmyB,EAAoBr1B,EAAK7E,cAAckR,MAAMrM,EAAK1E,MAAM81B,kBAAkBh1B,MAAMwuB,GAzY1E+K,EAAAzyB,KAAA,wBAAAyyB,EAAAzyB,KAAA,GA2Y8BlD,EAAK7E,cAAcy9B,yBAAyB54B,EAAK1E,MAAM6H,YAAanD,EAAK1E,MAAM+a,SA3Y7G,QA2YAif,EA3YAK,EAAAhhB,KA4YN0gB,EAAoBr1B,EAAK7E,cAAckR,MAAMrM,EAAK7E,cAAcyuB,qBAAqBvB,EAAYroB,EAAK1E,MAAM6H,YAAYpG,WAAWV,IAAIi5B,GA5YjI,WAgZJD,EAAkBllB,GAAGnQ,EAAK7E,cAAckR,MAAMrM,EAAK1E,MAAM81B,qBAC3DiE,EAAoBr1B,EAAK7E,cAAckR,MAAMrM,EAAK1E,MAAM81B,mBAI1DiE,EAAoBr1B,EAAK7E,cAAcyuB,qBAAqByL,EAAmB,IArZvE,CAAAM,EAAAzyB,KAAA,gBAAAyyB,EAAAtyB,OAAA,UAwZC,GAxZD,WA2ZF8nB,EAAiB,SAACnW,EAAIC,GAC1B,IAAMmW,EAA4B,YAAdpW,EAAGI,OAGjBF,EAAY,CAChBG,cAAa,iBACbC,YAAatV,EAAK1E,MAAM2E,cACxBkV,WAAYH,EAAGI,OACfiW,WAAYvrB,SAASuoB,IAGnBpT,IACFC,EAAUC,WAAanV,EAAK7E,cAAcoa,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUE,SACrBpV,EAAK7E,cAAcqa,yBAAyBN,GAG9ClV,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5ByY,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADLtV,OAAAi1B,GAAA,EAAAj1B,CAAA,GAEPkB,EAAKhF,MAAMkM,OAAS,CACnBoN,OAAQ,KACRH,SAAS,QAKXiX,GACFprB,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5B0sB,WAAWvpB,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAU0sB,WADLvpB,OAAAi1B,GAAA,EAAAj1B,CAAA,GAEPkB,EAAKhF,MAAMkM,OAASlH,EAAK7E,cAAckR,MAAM,SAMhDif,EAAwB,SAACtW,GAC7B,IAAMV,EAASU,EAAGiB,gBAClBjW,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5ByY,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADLtV,OAAAi1B,GAAA,EAAAj1B,CAAA,GAEPkB,EAAKhF,MAAMkM,OAFJpI,OAAA8Q,EAAA,EAAA9Q,CAAA,GAGHnD,EAAUyY,WAAWpU,EAAKhF,MAAMkM,QAH7B,CAINoN,iBAMJmhB,EAAe,kBACfC,EAAe,CAACL,IAEhBzH,EAndI,CAAA+H,EAAAzyB,KAAA,gBAodNuyB,EAAe,yBApdTE,EAAAzyB,KAAA,GAqd4BlD,EAAKmwB,2BArdjC,QAqdAM,EArdAkF,EAAAhhB,KAsdN+gB,EAAapwB,KAAKmrB,GAtdZ,eAAAkF,EAAAzyB,KAAA,GAydmBlD,EAAK7E,cAAc+a,0BAA0BlW,EAAK1E,MAAM6H,YAAYiN,KAAK+F,MAAOsf,EAAcC,EAAcvK,EAAgBG,EAAuB8J,GAzdtK,QAydRlB,EAzdQyB,EAAAhhB,KAAA,eAAAghB,EAAAtyB,OAAA,6BA6dV8Q,GAAU,EA7dAwhB,EAAAtyB,OAAA,uBAiea,IAAvB6wB,GAAgC/f,IAAYnU,EAAKhF,MAAMoZ,WAAWpU,EAAKhF,MAAMkM,QAAQiN,SACvFnU,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5ByY,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADLtV,OAAAi1B,GAAA,EAAAj1B,CAAA,GAEPkB,EAAKhF,MAAMkM,OAFJpI,OAAA8Q,EAAA,EAAA9Q,CAAA,GAGHnD,EAAUyY,WAAWpU,EAAKhF,MAAMkM,QAH7B,CAINiN,iBAveM,0BAAAwhB,EAAAviB,SAAA6gB,EAAA74B,WA8ehBouB,eAAiB,SAAClB,GAChBtoB,EAAK1D,SAAS,CACZgsB,mBAIJG,gBAAkB,WAChBzoB,EAAK1D,SAAS,CACZmsB,iBAAiB,OAIrBkL,YAAc,WACZ,IAAIzsB,EAASlH,EAAKhF,MAAMkM,OAExB,OAAQA,GACN,IAAK,SACElH,EAAKhF,MAAMmyB,YACdjmB,EAAS,WAOXA,IAAWlH,EAAKhF,MAAMkM,OACxBlH,EAAK1D,SAAS,CACZ4K,UACC,WACDlH,EAAKopB,wBAGPppB,EAAKopB,yBAITA,oBAAsB,WAAmB,IAAlBC,EAAkB9V,UAAAjQ,OAAA,QAAAwJ,IAAAyG,UAAA,GAAAA,UAAA,GAAT,KAE9B,IAAKvT,EAAKhF,MAAMkM,OACd,OAAO,EAGJmiB,IACHA,EAASrpB,EAAKhF,MAAMqtB,WAAWroB,EAAKhF,MAAMkM,SAG5C,IAAIshB,GAAiB,EAErB,OAAQxoB,EAAKhF,MAAMkM,QACjB,IAAK,UACHshB,EAAiBA,GAAmBa,IAAWA,EAAOvC,IAAI,IAAMuC,EAAOlZ,GAAGnQ,EAAK1E,MAAMk4B,eACrF,MACF,IAAK,WACHhL,GAAkBxoB,EAAKhF,MAAM+yB,iBAAmB/tB,EAAKhF,MAAMmzB,kBAAoB3F,IAAoBa,GAAUA,EAAOvC,IAAI,IAAMuC,EAAOlZ,GAAGnQ,EAAK1E,MAAM8uB,sBAE5HpqB,EAAKhF,MAAM4yB,eAAiB5tB,EAAKhF,MAAMqzB,oBAAoB/qB,OAAS,IAAMtD,EAAKhF,MAAMyzB,qBAC1GjG,GAAiB,GAQvBxoB,EAAK1D,SAAS,CACZksB,sBAIJ8B,cAAgB,WACd,IAAKtqB,EAAKhF,MAAMkM,QAAgE,OAAtDlH,EAAKhF,MAAMguB,oBAAoBhpB,EAAKhF,MAAMkM,QAClE,OAAO,EAGT,IAAM0jB,EAAqB5qB,EAAK7E,cAAckR,MAAMrM,EAAKhF,MAAMguB,oBAAoBhpB,EAAKhF,MAAMkM,SAAS7K,IAAI,KACvGgtB,EAAS,KAEb,OAAQrpB,EAAKhF,MAAMkM,QACjB,IAAK,UACHmiB,EAASrpB,EAAK1E,MAAMk4B,aAAexzB,EAAK7E,cAAckR,MAAMrM,EAAK1E,MAAMk4B,cAAcp3B,MAAMwuB,GAAsB,KACjH,MACF,IAAK,SACHvB,EAASrpB,EAAK1E,MAAM8uB,kBAAoBpqB,EAAK7E,cAAckR,MAAMrM,EAAK1E,MAAM8uB,mBAAmBhuB,MAAMwuB,GAAsB,KAM/H5qB,EAAKopB,oBAAoBC,GAEzBrpB,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5B0sB,WAAWvpB,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAU0sB,WADLvpB,OAAAi1B,GAAA,EAAAj1B,CAAA,GAEPkB,EAAKhF,MAAMkM,OAASmiB,UAK3BuM,uBAAyB,WACvB,OAA0D,OAAtD51B,EAAKhF,MAAMguB,oBAAoBhpB,EAAKhF,MAAMkM,SAIvClH,EAAK7E,cAAckR,MAAMrM,EAAKhF,MAAMguB,oBAAoBhpB,EAAKhF,MAAMkM,SAAS7K,IAAI,QAGzFktB,uBAAyB,SAACgD,GACxB,IAAKvsB,EAAKhF,MAAMkM,OACd,OAAO,EAETlH,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5BqtB,oBAAoBlqB,OAAA8Q,EAAA,EAAA9Q,CAAA,GACfnD,EAAUqtB,oBADIlqB,OAAAi1B,GAAA,EAAAj1B,CAAA,GAEhBkB,EAAKhF,MAAMkM,OAASqlB,UAK3BjD,uDAAmB,SAAAuP,EAAOjkB,GAAP,IAAAyU,EAAA,OAAAvmB,EAAArG,EAAAsG,KAAA,SAAA+1B,GAAA,cAAAA,EAAA71B,KAAA61B,EAAA51B,MAAA,UACZlD,EAAKhF,MAAMkM,OADC,CAAA4xB,EAAA51B,KAAA,eAAA41B,EAAAz1B,OAAA,UAER,GAFQ,OAIXgmB,EAASzU,EAAEsD,OAAOrY,MAAMyD,SAAWmN,MAAMmE,EAAEsD,OAAOrY,OAASG,EAAK7E,cAAckR,MAAMuI,EAAEsD,OAAOrY,OAASG,EAAK7E,cAAckR,MAAM,GACrIrM,EAAKopB,oBAAoBC,GAEzBrpB,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5BqtB,oBAAoBlqB,OAAA8Q,EAAA,EAAA9Q,CAAA,GACfnD,EAAUqtB,oBADIlqB,OAAAi1B,GAAA,EAAAj1B,CAAA,GAEhBkB,EAAKhF,MAAMkM,OAAS,OAEvBmhB,WAAWvpB,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAU0sB,WADLvpB,OAAAi1B,GAAA,EAAAj1B,CAAA,GAEPkB,EAAKhF,MAAMkM,OAASmiB,OAdR,wBAAAyP,EAAA1lB,SAAAylB,EAAAz9B,iEAmBnB29B,UAAY,SAAC7xB,GACX,OAAQA,EAAOgF,eACb,IAAK,UAEH,MACF,IAAK,SACElM,EAAKhF,MAAMmyB,WAAcntB,EAAKhF,MAAM+yB,iBACvC7mB,EAAS,MAEX,MACF,QACEA,EAAS,KAIE,OAAXA,GACFlH,EAAK1D,SAAS,CACZ4K,uFAhxCA9L,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,mKAK9CF,KAAKI,qBACCJ,KAAK49B,2QAIX59B,KAAK23B,yRA2JA33B,KAAKE,MAAMM,+DACP,iBAGHq9B,EAAU,CAAC,UAAW,UACtB3iB,EAAW,CACfgY,oBAAqB,GACrBU,uBAAwB,aAGpB5zB,KAAKD,cAAckX,aAAa4mB,EAAhC,eAAAC,EAAAp6B,OAAAyT,EAAA,EAAAzT,CAAAgE,EAAArG,EAAA+V,KAAyC,SAAA2mB,EAAOjyB,GAAP,IAAA0tB,EAAAwE,EAAApK,EAAAqK,EAAAxH,EAAA,OAAA/uB,EAAArG,EAAAsG,KAAA,SAAAu2B,GAAA,cAAAA,EAAAr2B,KAAAq2B,EAAAp2B,MAAA,UACzC0xB,EAAwB,MACSr4B,EAAKpB,cAAc0kB,gBAAgB,CAAC,WAAY,UAAW3Y,EAAQ,0BAF3D,CAAAoyB,EAAAp2B,KAAA,gBAK3C0xB,EAAwBr4B,EAAKpB,cAAc0kB,gBAAgB,CAAC,WAAY,UAAW3Y,EAAQ,8BAA+B,cAL/EoyB,EAAAp2B,KAAA,EAOrC3G,EAAKjB,MAAMi+B,aAAa3E,EAAsB/nB,KAAM+nB,EAAsBzoB,QAASyoB,EAAsB4E,KAPpE,YAUrCJ,EAA6B78B,EAAKpB,cAAc0kB,gBAAgB,CAAC,WAAY,UAAW3Y,EAAQ,8BAA+B,SAAU3K,EAAKjB,MAAM2E,iBAV/G,CAAAq5B,EAAAp2B,KAAA,gBAYzC0xB,EAAwBwE,EAZiBE,EAAAp2B,KAAA,GAaJ3G,EAAKjB,MAAMi+B,aAAaH,EAA2BvsB,KAAMusB,EAA2BjtB,QAASitB,EAA2BI,KAbpH,SAanCxK,EAbmCsK,EAAA3kB,QAevC2B,EAAS0Y,uBAAuB9nB,GAAUkyB,EAC1C9iB,EAAS0Y,uBAAuB9nB,GAAQmvB,SAAWrH,EAAuBqH,UAhBnC,WAqBxCzB,IACHA,EAAwBr4B,EAAKpB,cAAc0kB,gBAAgB,CAAC,WAAY,UAAW3Y,EAAQ,mBAGvFmyB,EAAmBzE,GAAyBA,EAAsBllB,QACxE4G,EAASgY,oBAAoBpnB,GAAUmyB,EAAmBzE,EAAwB,MAC9EyE,EA3ByC,CAAAC,EAAAp2B,KAAA,gBAAAo2B,EAAAp2B,KAAA,GA4Bf3G,EAAKjB,MAAMi+B,aAAa3E,EAAsB/nB,KAAM+nB,EAAsBzoB,QAASyoB,EAAsB4E,KA5B1F,aA4BrC3H,EA5BqCyH,EAAA3kB,MAAA,CAAA2kB,EAAAp2B,KAAA,gBA8BzCoT,EAASgY,oBAAoBpnB,GAAQmvB,SAAWxE,EAAcwE,SA9BrBiD,EAAAp2B,KAAA,GA+Ba3G,EAAKpB,cAAcq3B,mBAAmBj2B,EAAKjB,MAAM2E,cAAe20B,EAAsBzoB,QAAS5P,EAAKjB,MAAM+a,SA/BvH,QA+BzCC,EAASgY,oBAAoBpnB,GAAQuyB,SA/BIH,EAAA3kB,KAAA,yBAAA2kB,EAAAlmB,SAAA+lB,EAAA/9B,SAAzC,gBAAAs+B,GAAA,OAAAR,EAAA5lB,MAAAlY,KAAAmY,YAAA,2BAsCOnY,KAAKkB,SAASga,iTAgBHlb,KAAKD,cAAcw+B,aAAav+B,KAAKE,MAAM6H,yBAA7Dy2B,WACgC,OAArBA,EAAUr3B,2BACnB0qB,EAAW7xB,KAAKD,cAAckR,MAAMutB,EAAUr3B,QAAQxC,QAAQ,GAEhEmtB,EAAW,MACX9xB,KAAKJ,MAAMozB,iDACIhzB,KAAKD,cAAc0+B,sBAApC3M,YAGEA,EAAWA,EAAS/wB,KAAK8wB,YAG7B7xB,KAAKkB,SAAS,CACZ2wB,WACAC,6JAMJ,IAAIiI,EAAY/5B,KAAKD,cAAc2+B,8BAA8B,aAIjE,OAHK1+B,KAAKD,cAAc4+B,aAAa5E,KACnCA,EAAY,MAEPA,qFAGgBz5B,EAAWC,oGAClCP,KAAKI,YAI2B,OAA5BJ,KAAKE,MAAMk4B,uDACN,aAGHpd,EAAiB1a,EAAU2a,UAAYjb,KAAKE,MAAM+a,QAClDzC,EAAelY,EAAUuE,gBAAkB7E,KAAKE,MAAM2E,cACtDrE,EAAuBF,EAAUE,uBAAyBR,KAAKE,MAAMM,qBACrEo+B,EAA+Br+B,EAAUszB,wBAA0B7zB,KAAKJ,MAAMi0B,sBAC9EgL,EAAsBv+B,EAAU83B,eAAiBp4B,KAAKE,MAAMk4B,cAA4C,OAA5Bp4B,KAAKE,MAAMk4B,eAEzFpd,GAAkBxC,GAAgBqmB,GAAuBD,GAAgCp+B,qCACrFR,KAAK49B,oCACX59B,KAAK23B,mCACE,cAGHmH,EAAgB9+B,KAAKJ,MAAMkM,SAAWvL,EAAUuL,OAChDizB,EAA6B/+B,KAAKJ,MAAMguB,oBAAoB5tB,KAAKJ,MAAMkM,UAAYvL,EAAUqtB,oBAAoB5tB,KAAKJ,MAAMkM,SAE9HgzB,GAAiBC,IACnB/+B,KAAKkvB,gBAGmB3uB,EAAU0sB,WAAWjtB,KAAKJ,MAAMkM,UAAY9L,KAAKJ,MAAMqtB,WAAWjtB,KAAKJ,MAAMkM,QAKjGkzB,EAAuBz+B,EAAUiyB,gBAAkBxyB,KAAKJ,MAAM4yB,cAC9DyM,EAAyB1+B,EAAUwyB,kBAAoB/yB,KAAKJ,MAAMmzB,gBAClEmM,EAA4B3+B,EAAU8yB,qBAAuBrzB,KAAKJ,MAAMyzB,mBACxE8L,EAA6Bz+B,KAAKC,UAAUJ,EAAU0yB,uBAAyBvyB,KAAKC,UAAUX,KAAKJ,MAAMqzB,sBAE3GgM,GAA0BH,GAAiBK,GAA8BH,GAAwBE,IACnGl/B,KAAKguB,sBAGDoR,EAAsB7+B,EAAUizB,sBAAwBxzB,KAAKJ,MAAM4zB,sBACzCjzB,EAAUyzB,0BAA4Bh0B,KAAKJ,MAAMo0B,2BAClDoL,oCACDp/B,KAAKo3B,6BAA3B9E,SACNtyB,KAAKkB,SAAS,CACZoxB,0BAIiB/xB,EAAU0sB,WAAWjtB,KAAKJ,MAAMkM,UAAY9L,KAAKJ,MAAMqtB,WAAWjtB,KAAKJ,MAAMkM,SAEhG9L,KAAKq/B,sTAKHC,GAAe,EACfz/B,EAAWG,KAAKJ,MAAMC,SACtBwyB,EAAgBryB,KAAKJ,MAAMyyB,cACzB3R,EAAyC,SAAhC1gB,KAAKE,MAAMshB,mBACpByL,EAAajtB,KAAKD,cAAckR,MAAMjR,KAAKJ,MAAMqtB,WAAWjtB,KAAKJ,MAAMkM,UAE9DiJ,GAAG/U,KAAKE,MAAMk4B,wDACpB,0BAGqBp4B,KAAKD,cAAc4hB,oBAAoBsL,EAAYjtB,KAAKE,MAAM2E,cAAe7E,KAAKE,MAAM6H,YAAa2Y,aAA7H6e,SACFzM,EAAmB9yB,KAAKD,cAAckR,MAAMjR,KAAKD,cAAc0kB,gBAAgB,CAAC,WAAY,UAAW,UAAW,wBAClHyP,EAA0BqL,EAAgB/1B,IAAIspB,0BAI5C9yB,KAAKE,MAAM6H,YAAYgE,SAAW/L,KAAKE,MAAM6H,YAAYgE,QAAQ+mB,kBAAoByM,EAAgB1qB,GAAG7U,KAAKE,MAAM6H,YAAYgE,QAAQ+mB,oCACzIoB,GAA0B,2CAKhB/I,QAAQC,IAAI,CACpBiH,GAAiBryB,KAAKD,cAAcy/B,oBAAoBx/B,KAAKE,MAAM6H,YAAYiN,KAAK+F,MAAO,iBAC3Flb,GAAYG,KAAKD,cAAcwrB,eAAe,OAAQvrB,KAAKE,MAAM2E,cAAe7E,KAAKE,MAAM6H,YAAa/H,KAAKE,MAAM+a,+CAJnHoX,OACAxyB,OAMEwyB,GAAiBxyB,IACb4/B,EAAcxS,EAAWhsB,IAAIpB,GAAUmB,MAAM,KACnDqxB,EAAgBryB,KAAKD,cAAckR,MAAMohB,GACnCqN,EAAyBrN,EAAcpxB,IAAI,KAAKD,MAAM,GACxDy+B,EAAY5qB,GAAG6qB,GACjBxL,GAA0B,EACjBr0B,EAASmB,MAAM0+B,EAAuBz+B,IAAI,MAAM8T,GAAG+d,KAC5DwM,GAAe,EACfxM,EAAmBjzB,EAASmB,MAAM0+B,EAAuBz+B,IAAI,gBAMrEjB,KAAKkB,SAAS,CACZrB,WACAy/B,eACAjN,gBACAS,mBACAoB,wSAKIjG,EAASjuB,KAAKJ,MAAMqtB,WAAWjtB,KAAKJ,MAAMkM,QAAU9L,KAAKD,cAAckR,MAAMjR,KAAKJ,MAAMqtB,WAAWjtB,KAAKJ,MAAMkM,SAAW,QAEhHmiB,EAAOvC,IAAI,6CACjB,UAGHuN,EAAwBj5B,KAAKD,cAAc0kB,gBAAgB,CAAC,QAAS,iBAErE8J,EAAmBvuB,KAAKD,cAAcyuB,qBAAqBP,EAAQgL,EAAsBt3B,UACzFuZ,EAAW,QAETlb,KAAKJ,MAAMkM,cACZ,mBAIA,0CAHHoP,EAASqY,oBAAsBtF,YACOjuB,KAAKD,cAAc8uB,iBAAiB7uB,KAAKE,MAAM6H,YAAYiN,KAAK+F,MAAOwT,GAAkB,kBAA/HrT,EAASyY,qGAWb3zB,KAAKkB,SAASga,uIA44BP,IAAAoC,EAAAtd,KAEP,IAAKA,KAAKE,MAAM2E,gBAAkB7E,KAAKE,MAAM6H,YAC3C,OAAO,KAIT,IAAMohB,EAAwC,WAA7BnpB,KAAKE,MAAMkpB,cACtBuW,EAAiB3/B,KAAKD,cAAc6/B,oBAEpCC,EAAoB7/B,KAAKE,MAAM6H,YAAYiqB,aAAehyB,KAAKE,MAAM6H,YAAYiqB,WAAW1d,QAG5FwrB,EAAyBD,EAAqB7/B,KAAKJ,MAAMmyB,WAAa/xB,KAAKE,MAAM6H,YAAYiqB,WAAW+N,yBAA2B//B,KAAKD,cAAc0kB,gBAAgB,CAAC,WAAYzkB,KAAKE,MAAM6H,YAAYiqB,WAAW+N,2BAA8B//B,KAAKE,MAAM6H,YAAYiqB,WAAWgO,0BAA4BhgC,KAAKD,cAAc0kB,gBAAgB,CAAC,WAAYzkB,KAAKE,MAAM6H,YAAYiqB,WAAWgO,4BAA8B,KAAU,KAG3aC,GADoBjgC,KAAKE,MAAM6H,YAAYm4B,mBACFlgC,KAAKD,cAAc0kB,gBAAgB,CAAC,aAAczkB,KAAKE,MAAMshB,iBAAkB,sBAAwB9d,OAAO4B,KAAKtF,KAAKJ,MAAMuyB,gBAAgBjqB,OAAS,EAChMi4B,EAAiF,qBAA9CngC,KAAKE,MAAM6H,YAAYq4B,oBAAqCpgC,KAAKE,MAAM6H,YAAYq4B,mBAGtH3N,GAF0BzyB,KAAKD,cAAc0kB,gBAAgB,CAAC,WAAY,UAAW,UAAW,4BAE/EzkB,KAAKJ,MAAMmyB,aAAe/xB,KAAKJ,MAAM0zB,oBAAsBtzB,KAAKJ,MAAM6yB,iBAAyC,WAAtBzyB,KAAKJ,MAAMkM,QAErHu0B,EAAwBrgC,KAAKD,cAAc0kB,gBAAgB,CAAC,WAAY,UAAW,kBAAmB,aAAewb,GAAoBxN,EACzIM,EAAkBsN,GAAyBrgC,KAAKJ,MAAMmzB,gBAEtDuN,EAAsBtgC,KAAKD,cAAc0kB,gBAAgB,CAAC,WAAY,UAAW,kBACjF8b,EAAuBD,IAAwBA,EAAoBE,eAAensB,SAASrU,KAAKE,MAAM6H,YAAYiN,KAAK+F,QAAUklB,GAAoBxN,EACrJD,EAAgB+N,GAAwBvgC,KAAKJ,MAAM4yB,eAAiB9uB,OAAO4B,KAAKtF,KAAKE,MAAM41B,uBAAuB5tB,OAAS,GAAKlI,KAAKE,MAAMugC,iBAAiB1rB,GAAG,GAC/J2rB,EAAwBH,GAAwBvgC,KAAKJ,MAAM4yB,iBAAmB9uB,OAAO4B,KAAKtF,KAAKE,MAAM41B,uBAAuB5tB,QAAUlI,KAAKE,MAAMugC,iBAAiB/U,IAAI,IAGtKiV,EAA4BN,GAAyBE,EAGrD7J,EAA+B12B,KAAKD,cAAc0kB,gBAAgB,CAAC,WAAY,UAAW,UAAW,0BACrGkS,EAAiC32B,KAAKD,cAAc0kB,gBAAgB,CAAC,WAAY,UAAW,UAAW,4BACvGmc,EAAqC5gC,KAAKD,cAAc0kB,gBAAgB,CAAC,WAAY,UAAW,UAAW,8BAA+B,WAG1Ioc,EAA4BlK,GAAkC32B,KAAKE,MAAM02B,UAAY52B,KAAKJ,MAAMszB,oBAAoBlzB,KAAKJ,MAAMkM,QAC/Hg1B,EAAYD,GAA6B7gC,KAAKJ,MAAMo0B,wBAEpDH,EAAwB6C,GAAgChzB,OAAO4B,KAAKs7B,GAAoCvsB,SAASrU,KAAKE,MAAM2E,gBAAkB+7B,EAAmC5gC,KAAKE,MAAM2E,eAAeyP,SAAWtU,KAAKE,MAAM02B,UAAY52B,KAAKE,MAAM6gC,sBAAwB/gC,KAAKJ,MAAMszB,oBAAoBlzB,KAAKJ,MAAMkM,UAAY+zB,EAKtUmB,EAAqC,YAAtBhhC,KAAKJ,MAAMkM,OAAuB9L,KAAKE,MAAMk4B,aAAep4B,KAAKE,MAAM8uB,kBACtFiS,EAAcjhC,KAAKJ,MAAMuzB,uBAAiEzhB,IAA7C1R,KAAKE,MAAM6H,YAAYm5B,UAAU/U,QAAwBnsB,KAAKE,MAAM6H,YAAYm5B,UAAU/U,QAAU,KAEjJsD,EAAczvB,KAAKD,cAAc0kB,gBAAgB,CAAC,UAClDoT,EAAoBpI,EAAYnb,SAAWtU,KAAKD,cAAc0kB,gBAAgB,CAAC,QAAS,kBAAmBzkB,KAAKE,MAAM6H,YAAYiN,KAAK+F,MAAO,YAE9IomB,EAAetJ,GAAqB73B,KAAKJ,MAAM4zB,qBAA6C,YAAtBxzB,KAAKJ,MAAMkM,OAIjFs1B,EAF2C,YAAtBphC,KAAKJ,MAAMkM,SAAyB9L,KAAKJ,MAAM8yB,iBAAmBmF,GAAqB73B,KAAKJ,MAAM0yB,gBAE9EuF,GAAqB73B,KAAKJ,MAAMwzB,oBAAsBpzB,KAAKJ,MAAMuzB,kBAAoBnzB,KAAKJ,MAAM2yB,gBAAkBvyB,KAAKJ,MAAMozB,iBAAyC,YAAtBhzB,KAAKJ,MAAMkM,OACpMu1B,EAAkBxJ,GAAqB73B,KAAKJ,MAAMwzB,oBAAsBpzB,KAAKJ,MAAMuzB,kBAAoBnzB,KAAKJ,MAAM2yB,gBAAkBvyB,KAAKJ,MAAM+yB,gBAAwC,WAAtB3yB,KAAKJ,MAAMkM,OAE5Kw1B,EAAoBH,GAAgBnhC,KAAKJ,MAAM+zB,sBAAwB3zB,KAAKJ,MAAM2zB,sBAAwBvzB,KAAKJ,MAAMwtB,eAGrHmU,EAA6BH,IADP,EAGtBI,EAAmBxhC,KAAKD,cAAc0kB,gBAAgB,CAAC,QAAQ,iBAE/Dgd,EAAsBD,EAAiBltB,SAAgG,qBAA9EktB,EAAiBthC,MAAMqhB,gBAAgBvhB,KAAKE,MAAM6H,YAAYiN,KAAK+F,QAA0BymB,EAAiB3c,kBAAkBxQ,SAASsrB,EAAejwB,IAEjNgyB,EAA6BF,EAAiBG,eAE9CC,GAAoBd,GAAaW,GAAuBC,IAA+B1hC,KAAKE,MAAM2hC,iBAAyC,YAAtB7hC,KAAKJ,MAAMkM,OAEhIg2B,EAAiB9hC,KAAKD,cAAc0kB,gBAAgB,CAAC,QAAS,eAC9Dsd,EAAsBD,EAAe5Y,aACrC8Y,EAA8C,SAA7BhiC,KAAKE,MAAM2E,eAA4Bi9B,EAAextB,SAAWwtB,EAAejd,kBAAkBxQ,SAASsrB,EAAejwB,MAAQ1P,KAAKE,MAAM2hC,iBAAyC,YAAtB7hC,KAAKJ,MAAMkM,OAE5Lm2B,EAAoBjiC,KAAKD,cAAc0kB,gBAAgB,CAAC,QAAQ,kBAEhEyd,EAAmBliC,KAAKD,cAAc0kB,gBAAgB,CAAC,UAAU,YAAY,UAAU,eAAekb,EAAejwB,KAGrHyyB,GAAkG,YAAtBniC,KAAKJ,MAAMkM,QAAwB9L,KAAKJ,MAAMoyB,aAAe6N,GAA6C,WAAtB7/B,KAAKJ,MAAMkM,QAAuB9L,KAAKJ,MAAMmyB,WAAcgB,MAAsB/yB,KAAKJ,MAAMk0B,uBAA+C,WAAtB9zB,KAAKJ,MAAMkM,WAA0B9L,KAAKJ,MAAMwiC,0BAAkD,WAAtBpiC,KAAKJ,MAAMkM,QAC5Wu2B,GAAkBtP,GAAmBoP,EAErC/P,EAAcpyB,KAAKJ,MAAMwzB,kBAAgD,WAA5BuM,EAAe2C,YAA2BlB,GAAoBphC,KAAKJ,MAAMwyB,eAAiBpyB,KAAKJ,MAAM4zB,qBAAuBxzB,KAAKJ,MAAM0yB,gBAAkBtyB,KAAKJ,MAAM8yB,kBAAoB1yB,KAAKJ,MAAMuzB,kBAAoBnzB,KAAKJ,MAAM2yB,gBAAwC,YAAtBvyB,KAAKJ,MAAMkM,SAAyB+zB,IAAsB7/B,KAAKJ,MAAMoyB,aAAehyB,KAAKJ,MAAMk0B,sBAChYyO,EAAoBviC,KAAKJ,MAAMwzB,kBAA0C,YAAtBpzB,KAAKJ,MAAMkM,SAAyB9L,KAAKJ,MAAMoyB,YAA0C,YAA5B2N,EAAe2C,SAC/HE,IAA2BD,GAAiD,YAA5B5C,EAAe2C,UAA0BJ,GAAoBD,EAAkB3tB,SAAiC,YAAtBtU,KAAKJ,MAAMkM,OAErJ22B,GAAWziC,KAAKD,cAAckR,MAAMjR,KAAKE,MAAMwiC,gBAAgB3tB,GAAG,GAAK/U,KAAKE,MAAM2E,cAAgB7E,KAAKD,cAAc4iC,eAErH5I,GAAY/5B,KAAKu9B,qBACjBqF,GAAe7I,IAAmC,YAAtB/5B,KAAKJ,MAAMkM,QAAwBu2B,IAAmBjQ,EAExF,OACEviB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,CAAC,EAAG,KACXsC,WAAY,UACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,GAEPqO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CAAMa,GAAI,GAAV,sBAGAnM,EAAAxO,EAAAC,cAACqkB,EAAA,EACK3lB,KAAKE,QAIXipB,EACEtZ,EAAAxO,EAAAC,cAACuoB,EAAA,EAAD,CACEvW,UAAW,CACTyI,GAAI,GAENgO,KAAM,aACN3b,KAAM,kGAGNyB,EAAAxO,EAAAC,cAACuhC,GAAA,EAADn/B,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEE4iC,kBAAmB7B,EACnBA,YAA6B,OAAhBA,EAAuB,GAAK,KACzC1M,oBAAqBv0B,KAAKu0B,oBAAoBrW,KAAKle,QAGhDA,KAAKE,MAAM+a,QAIRjb,KAAKJ,MAAMwzB,iBACbpzB,KAAKJ,MAAMkM,QACT+D,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,GAEPqO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJV,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CAAMa,GAAI,GAAV,sBAIAnM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZuX,cAAe,MACftX,eAAgB,iBAEhB8L,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACT7C,EAAG,EACHjP,MAAO,IACP4vB,YAAa,WACX9T,EAAKqgB,UAAU,aAGnB/X,eAAe,EACf4C,SAAgC,YAAtBxoB,KAAKJ,MAAMkM,QAGrB+D,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEqD,GAAI,EACJ1a,WAAY,SACZuX,cAAe,MACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAACyhC,GAAA,EAAD,CACEC,YAAa,CACXl3B,OAAQ,WAEVmgB,UAAW,CACTxa,KAAM,OACNvR,MAAO,CACLinB,GAAI,MAIVtX,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE9X,SAAU,EACVJ,WAAY,GAFd,aAQJ4M,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACT7C,EAAG,EACHjP,MAAO,IACP4vB,YAAa,WACX9T,EAAKqgB,UAAU,YAGnB/X,eAAe,EACf4C,SAAgC,WAAtBxoB,KAAKJ,MAAMkM,OACrBm3B,YAAajjC,KAAKJ,MAAMmyB,YAAc/xB,KAAKJ,MAAM+yB,gBAEjD9iB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEqD,GAAI,EACJ1a,WAAY,SACZuX,cAAe,MACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAACyhC,GAAA,EAAD,CACEC,YAAa,CACXl3B,OAAQ,UAEVmgB,UAAW,CACTxa,KAAM,OACNvR,MAAO,CACLinB,GAAI,MAIVtX,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE9X,SAAU,EACVJ,WAAY,GAFd,aAUJ48B,GACEhwB,EAAAxO,EAAAC,cAACuoB,EAAA,EAAD,CACEvW,UAAW,CACTyI,GAAI,GAENmnB,UAAW,CACTvgC,MAAM,WAERonB,KAAM,UACN3b,KAAM0xB,GAGkB,YAAtB9/B,KAAKJ,MAAMkM,QAAwB9L,KAAKJ,MAAMmyB,WAC5CliB,EAAAxO,EAAAC,cAAC2a,EAAA,EAAD,CACEC,YAAa,CACXH,GAAG,EACHva,MAAM,CAAC,EAAE,KAEX4a,YAAa,SAAA5C,GAAC,OAAI8D,EAAKqgB,UAAU,YALnC,YAgBTlL,GAAkBzyB,KAAKJ,MAAM2f,eAC9B1P,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACTC,GAAI,EACJC,GAAI,EACJuI,GAAI,EACJrZ,QAAS,OACToB,WAAY,SACZuX,cAAe,SACftX,eAAgB,WAGlB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACElX,KAAM,QACNtB,MAAO,WACP8O,KAAM,oBAER5B,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3H,GAAI,EACJnQ,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,sCAQA0M,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZuX,cAAe,OAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE9X,SAAU,EACVJ,WAAY,EACZN,MAAO,YACPQ,UAAW,SACXolB,WAAY,aAEXvoB,KAAKJ,MAAM2f,cAAc5a,QAAQ,GAPpC,IAOyC3E,KAAKE,MAAM2E,eAEpDgL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE+Q,UAAW,MACXC,QAASnsB,KAAKD,cAAc0kB,gBAAgB,CAAC,WAAY,iBAEzD5U,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEO,GAAI,EACJzX,KAAM,MACNtB,MAAO,YACP8O,KAAM,oBAQhBkvB,EACE9wB,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACTuT,GAAI,EACJrT,GAAI,EACJuI,GAAI,EACJrZ,QAAS,OACToB,WAAY,SACZuX,cAAe,SACftX,eAAgB,SAChB6iB,GAAI5mB,KAAKJ,MAAM6zB,oBAAsB,EAAI,IAG3C5jB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZuX,cAAe,MACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEO,GAAI,EACJiD,UAAW,UACX4J,WAAY,UACZ3J,QAAS5e,KAAKs0B,2BAEbt0B,KAAKJ,MAAM6zB,oBAAsB,OAAS,OAN7C,qBAQA5jB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACElX,KAAM,QACNtB,MAAO,WACP8O,KAAMzR,KAAKJ,MAAM6zB,oBAAsB,cAAgB,mBAIzDzzB,KAAKJ,MAAM6zB,qBACX5jB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJV,cAAe,UAGbglB,GACAxwB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZC,eAAgB,OAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE4C,UAAU,EACV+S,QAAS9wB,KAAKJ,MAAMmzB,gBACpBvoB,MAAK,gCACLwT,SAAU,SAAAxE,GAAC,OAAI8D,EAAKuX,sBAAsBrb,EAAEsD,OAAOgU,YAErDjhB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACExY,MAAO,OACP4lB,WAAY,OACZ3J,QAAS,SAAApF,GAAC,OAAI8D,EAAKpd,MAAMijC,iBAAiB,2BAA5B,iFAAArwB,OAAyIwK,EAAKpd,MAAMugC,kBAAoBnjB,EAAKpd,MAAMugC,iBAAiB1rB,GAAG,GAA9D,MAAAjC,OAAyEwK,EAAKpd,MAAMugC,iBAAiB97B,QAAQ,GAA7G,MAAsH,KAA/P,+CAHhB,gBAUF47B,GACA1wB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZuX,cAAe,OAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE4C,UAAU,EACV+S,QAAS9wB,KAAKJ,MAAM4yB,cACpBhoB,MAAK,mCACLwT,SAAU,SAAAxE,GAAC,OAAI8D,EAAKwX,oBAAoBtb,EAAEsD,OAAOgU,YAEnDjhB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEgM,GAAI,EACJljB,KAAM,QACNwN,KAAM,UACN9O,MAAO,YAETkN,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACExY,MAAO,OACP4lB,WAAY,OACZ3J,QAAS,SAAApF,GAAC,OAAI8D,EAAKpd,MAAMijC,iBAAiB,mCAAoC7lB,EAAKvd,cAAc0kB,gBAAgB,CAAC,WAAY,qBAHhI,kBAYR8c,EACF1xB,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACTuT,GAAI,EACJrT,GAAI,EACJuI,GAAI,EACJrZ,QAAS,OACToB,WAAY,SACZuX,cAAe,SACftX,eAAgB,SAChB6iB,GAAI5mB,KAAKJ,MAAM6zB,oBAAsB,EAAI,IAG3C5jB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZuX,cAAe,MACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEO,GAAI,EACJiD,UAAW,UACX4J,WAAY,UACZ3J,QAAS5e,KAAKs0B,2BAEbt0B,KAAKJ,MAAM6zB,oBAAsB,OAAS,OAN7C,qBAQA5jB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACElX,KAAM,QACNtB,MAAO,WACP8O,KAAMzR,KAAKJ,MAAM6zB,oBAAsB,cAAgB,mBAIzDzzB,KAAKJ,MAAM6zB,qBACX5jB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJV,cAAe,UAGb+lB,GACAvxB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZC,eAAgB,OAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE4C,UAAU,EACV5B,SAAUnc,KAAKJ,MAAMqyB,WACrBznB,MAAK,4BACLsmB,QAAS9wB,KAAKJ,MAAM4zB,oBACpBxV,SAAU,SAAAxE,GAAC,OAAI8D,EAAKmX,mBAAmBjb,EAAEsD,OAAOgU,YAElDjhB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEwD,UAAW,UACX4J,WAAY,UACZ3J,QAAS,SAAApF,GAAC,OAAI8D,EAAKpd,MAAMijC,iBAAiB,kBAAmB7lB,EAAKvd,cAAc0kB,gBAAgB,CAAC,WAAY,yBAH/G,iBAjZR,IAubE5U,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACP6Z,cAAe,UAGb+lB,GACEvxB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACP6Z,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACE+vB,WAAW,EACX9vB,UAAW,CACTC,GAAI,EACJC,GAAI,EACJuI,GAAI,EACJrZ,QAAS,OACToB,WAAY,SACZuX,cAAe,SACftX,eAAgB,WAGlB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEzH,OAAQ,QACR2W,IAAKoF,EAAYlM,OAAO6G,QAE1Bva,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJvI,GAAI,EACJnQ,SAAU,EACVV,MAAO,YACPQ,UAAW,UALb,kEAOkEnD,KAAKJ,MAAMkyB,SAAW9xB,KAAKJ,MAAMkyB,SAASntB,QAAQ,GAAK,IAPzH,KAQJkL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACQO,GAAI,EACJiD,UAAW,UACX4J,WAAY,UACZ3J,QAAS,SAAApF,GAAC,OAAI8D,EAAKpd,MAAMijC,iBAAiB,kBAAmB7lB,EAAKvd,cAAc0kB,gBAAgB,CAAC,WAAY,yBAJrH,cASI5U,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJgC,UAAU,EACVvT,MAAK,mBACLsmB,QAAS9wB,KAAKJ,MAAM4zB,oBACpBxV,SAAU,SAAAxE,GAAC,OAAI8D,EAAKmX,mBAAmBjb,EAAEsD,OAAOgU,eAKlD9wB,KAAKJ,MAAMwyB,cAAgBpyB,KAAKJ,MAAM4zB,sBAAwBxzB,KAAKJ,MAAMoyB,YAC3EniB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEhY,UAAW,SACXolB,WAAY,UACZ3J,QAAS,SAAApF,GAAC,OAAI8D,EAAK+W,gBAAe,KAHpC,+BAK+Br0B,KAAKE,MAAM2E,iBAzftD,EA4iBMw7B,GACExwB,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACTC,GAAI,EACJC,GAAI,EACJuI,GAAI,EACJrZ,QAAS,OACToB,WAAY,SACZuX,cAAe,SACftX,eAAgB,WAGlB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACElX,KAAM,QACNtB,MAAO,WACP8O,KAAM,gBAER5B,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJvI,GAAI,EACJnQ,SAAU,EACVV,MAAO,WACPQ,UAAW,UALb,qBAOqBnD,KAAKE,MAAM2E,cAPhC,wFAOoI7E,KAAKE,MAAMugC,kBAAoBzgC,KAAKE,MAAMugC,iBAAiB1rB,GAAG,GAA9D,QAAAjC,OAA2E9S,KAAKE,MAAMugC,iBAAiB97B,QAAQ,GAA/G,KAAuH,KAP3P,MAUFkL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJgC,UAAU,EACV+S,QAAS9wB,KAAKJ,MAAMmzB,gBACpBvoB,MAAK,gCACLwT,SAAU,SAAAxE,GAAC,OAAI8D,EAAKuX,sBAAsBrb,EAAEsD,OAAOgU,cASnE0B,EACE3iB,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACTyI,GAAI,EACJC,GAAI,EACJzI,GAAI,EACJC,GAAI,IAGN3D,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZuX,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJ1Y,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,gDAQA0M,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJva,MAAO,EACPoN,UAAW,EACXpM,MAAO,CACLonB,SAAU,QAEZ9lB,WAAY,SACZC,eAAgB,UAGdL,OAAO4B,KAAKtF,KAAKE,MAAM41B,uBAAuB3lB,IAAI,SAAA4K,GAChD,IAAM+Q,EAAUxO,EAAKpd,MAAM41B,sBAAsB/a,GAC3CyN,EAAWlL,EAAK1d,MAAMqzB,oBAAoB5e,SAAS0G,GACnDhT,EAAcuV,EAAKvd,cAAc0kB,gBAAgB,CAAC,YAAa1J,IACrE,OACElL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE1K,EAAG,EACHuL,GAAI,EACJyC,GAAI,EACJjd,MAAO,OACPgB,MAAO,CACL6gC,OAAQ,WAEV3kB,aAAc,EACdrD,cAAe,MACfxI,IAAG,gBAAAC,OAAkBiI,GACrBhX,eAAgB,aAChB8Z,gBAAiB2K,EAAW,UAAY,cACxC5J,QAAS,SAAApF,GAAC,OAAI8D,EAAK4Y,uBAAuBnb,GAAQuC,EAAK1d,MAAMqzB,oBAAoB5e,SAAS0G,MAE1FlL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEmoB,EAAG,EACHvlB,UAAU,EACV+S,QAAStI,EACTxK,SAAU,SAAAxE,GAAC,OAAI8D,EAAK4Y,uBAAuBnb,EAAOvB,EAAEsD,OAAOgU,YAE7DjhB,EAAAxO,EAAAC,cAAC0qB,EAAA,EAAD,CACEjR,MAAOA,EACPhT,YAAaA,EACbkkB,UAAW,CACTxa,KAAM,OACNvR,MAAO,CACLinB,GAAI,EACJ3lB,MAAO,CAAC,QAAS,SACjBkS,OAAQ,CAAC,QAAS,aAIxB7D,EAAAxO,EAAAC,cAAC0kB,EAAA,EAAD,CACEtK,GAAI,EACJrY,SAAU,CAAC,EAAG,GACdJ,WAAY,IACZ2pB,aAAc,EACdjqB,MAAO,WACPyjB,OAAQ0F,EAAQtb,mBAS9BkwB,GACF7wB,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACT7C,EAAG,EACH+N,GAAI,IAGN3O,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACElX,KAAM,QACNwN,KAAM,WACN9O,MAAO,aAETkN,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJ1Y,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,iDAaNqvB,GAAiBxyB,KAAKD,cAAckR,MAAMjR,KAAKJ,MAAMq0B,yBAAyBlf,GAAG,GAC/ElF,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACT7C,EAAG,EACH+N,GAAI,IAGN3O,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACElX,KAAM,QACNwN,KAAM,UACN9O,MAAO,YAETkN,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJ1Y,SAAU,EACVV,MAAO,MACPQ,UAAW,UAJb,uBAMuBnD,KAAKD,cAAcsC,YAAYrC,KAAKJ,MAAMq0B,yBANjE,iCASEj0B,KAAKJ,MAAM8zB,sBAAwB1zB,KAAKJ,MAAM8zB,qBAAqBlqB,IAAI,OACrEqG,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJ1Y,SAAU,EACVV,MAAO,UACPQ,UAAW,UAJb,sBAMsBnD,KAAKJ,MAAM8zB,qBAAqB/uB,QAAQ,GAN9D,iBAMgF3E,KAAKJ,MAAMm0B,wBAAwBpvB,QAAQ,GAN3H,MAUJkL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJ1Y,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,6FAQA0M,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEqD,GAAI,EACJT,UAAU,EACV+S,QAAS9wB,KAAKJ,MAAMyzB,mBACpB7oB,MAAK,4CACLwT,SAAU,SAAAxE,GAAC,OAAI8D,EAAKqX,yBAAyBnb,EAAEsD,OAAOgU,cAI1D0B,GAAiBxyB,KAAKJ,MAAMqzB,oBAAoB/qB,OAAS,GAC3D2H,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACT7C,EAAG,EACH+N,GAAI,IAGN3O,EAAAxO,EAAAC,cAACga,EAAA,EAAD,CACEC,UAAW,CACTF,cAAe,OAEjBG,YAAa,CACXvX,KAAM,QAERwX,UAAW,CACTC,GAAI,GAENtN,KAAM,oCAMZw0B,IACE/yB,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACTC,GAAI,EACJC,GAAI,EACJuI,GAAI,EACJrZ,QAAS,OACToB,WAAY,SACZuX,cAAe,SACftX,eAAgB,WAGlB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACElX,KAAM,QACNwN,KAAM,QACN9O,MAAO,aAETkN,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJvI,GAAI,EACJnQ,SAAU,EACVV,MAAO,WACPQ,UAAW,UALb,2DASA0M,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJvI,GAAI,EACJnQ,SAAU,EACVJ,WAAY,IACZE,UAAW,SACXR,MAAO3C,KAAKE,MAAM4C,MAAM8I,OAAOC,aAAamO,OAAO8O,WAElDiR,OAOR8G,GAA8BzO,GAAgBpyB,KAAKJ,MAAM8yB,eA6ErDmB,IAA0BzB,IAAgBpyB,KAAKJ,MAAM8yB,gBACxD7iB,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACT7C,EAAG,EACH+N,GAAI,EACJ9b,QAAS,OACToB,WAAY,SACZuX,cAAe,SACftX,eAAgB,WAGlB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,EACJ3Y,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,8CAM8CnD,KAAKJ,MAAMkM,OANzD,KAQA+D,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,CAAC,EAAG,IACXsC,WAAY,SACZuX,cAAe,MACftX,eAAgB,iBAEhB8L,EAAAxO,EAAAC,cAACiiC,GAAA,EAAD7/B,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEEoT,UAAW,CACTC,GAAI,EACJC,GAAI,CAAC,EAAG,GACRhS,MAAO,KAETia,UAAW,CACTC,GAAI,CAAC,EAAG,IAEVtN,KAAMpO,KAAKE,MAAM2E,cACjB2jB,SAAUxoB,KAAKJ,MAAMi0B,sBACrB2P,WAAY,CACV9vB,OAAQ1T,KAAKE,MAAMkD,SAAW,QAAU,QACxC5B,MAAOxB,KAAKE,MAAMkD,SAAW,QAAU,SAEzCgnB,MAAK,kBAAAtX,OAAoB9S,KAAKE,MAAM2E,cAA/B,QACLuX,YAAa,SAAA5C,GAAC,OAAI8D,EAAK8Y,6BAA4B,OAErDvmB,EAAAxO,EAAAC,cAACiiC,GAAA,EAAD7/B,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEEoT,UAAW,CACTC,GAAI,EACJC,GAAI,CAAC,EAAG,GACRhS,MAAO,KAETia,UAAW,CACTC,GAAI,CAAC,EAAG,IAEVtN,KAAM,MACNoa,UAAWxoB,KAAKJ,MAAMi0B,sBACtB2P,WAAY,CACV9vB,OAAQ1T,KAAKE,MAAMkD,SAAW,QAAU,QACxC5B,MAAOxB,KAAKE,MAAMkD,SAAW,QAAU,SAEzCgnB,MAAK,yBACLhO,YAAa,SAAA5C,GAAC,OAAI8D,EAAK8Y,6BAA4B,QAIrDp2B,KAAKJ,MAAMi0B,uBAAyB7zB,KAAKJ,MAAMgyB,QAAQ5xB,KAAKJ,MAAMkM,SAChE+D,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJ1Y,SAAU,EACVV,MAAO,MACPQ,UAAW,UAJb,qHA9IN0M,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACTC,GAAI,EACJC,GAAI,EACJgL,GAAI,EACJ9b,QAAS,OACToB,WAAY,SACZuX,cAAe,SACftX,eAAgB,WAIhB/D,KAAKJ,MAAMo0B,yBAA2Bh0B,KAAKJ,MAAMgyB,QAAQ5xB,KAAKJ,MAAMkM,SAAW9L,KAAKJ,MAAMszB,oBAAoBlzB,KAAKJ,MAAMkM,QAAQuyB,SAC/HxuB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACElX,KAAM,QACNwN,KAAM,UACN9O,MAAO,aAETkN,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJ1Y,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,6HAS2C,kBAA3CnD,KAAKD,cAAc0jC,qBAA2CzjC,KAAKJ,MAAMo0B,wBAC3EnkB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACElX,KAAM,QACNwN,KAAM,UACN9O,MAAO,aAETkN,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJ1Y,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,kGAUE0M,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJ1Y,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,yBAMyBnD,KAAKJ,MAAMo0B,wBAA0B,UAAY,WAN1E,QAM2Fh0B,KAAKJ,MAAMkM,OANtG,KAM+G+D,EAAAxO,EAAAC,cAAA,WAE3GtB,KAAKJ,MAAMo0B,0BAA4Bh0B,KAAKJ,MAAMszB,oBAAoBlzB,KAAKJ,MAAMkM,QAAQuyB,UAAzF,6DAAAvrB,OAAkK9S,KAAKJ,MAAMkM,OAA7K,8BAKZ+D,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJgC,UAAU,EACV+S,QAAS9wB,KAAKJ,MAAMo0B,wBACpBhW,SAAU,SAAAxE,GAAC,OAAI8D,EAAK+Y,8BAA8B7c,EAAEsD,OAAOgU,UAC3DtmB,MAAK,GAAAsI,OAAK9S,KAAKD,cAAc2jC,WAAW1jC,KAAKJ,MAAMkM,QAA9C,6BA+FV9L,KAAKJ,MAAMs0B,yBAAiD,YAAtBl0B,KAAKJ,MAAMkM,QAChD+D,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACT7C,EAAG,EACHsL,GAAI,IAGNlM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZuX,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACElX,KAAM,QACNtB,MAAO,WACP8O,KAAM,gBAER5B,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJ1Y,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,2BAM2BnD,KAAKD,cAAcsC,YAAYrC,KAAKJ,MAAMkzB,kBANrE,KAM0F9yB,KAAKJ,MAAM0/B,aAAX,IAAAxsB,OAA8B9S,KAAKJ,MAAMkzB,iBAAiB7xB,IAAIjB,KAAKJ,MAAMC,UAAUmB,MAAM,KAAK2D,QAAQ,GAAtG,kBAA2H,KANrN,yEAaNi9B,EACE/xB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE1K,EAAG,EACHsL,GAAI,EACJva,MAAO,EACPkd,aAAc,EACd5a,WAAY,SACZuX,cAAe,MACftX,eAAgB,SAChB8Z,gBAAiB,gBACjB4T,OAAM,aAAA3e,OAAe9S,KAAKE,MAAM4C,MAAM8I,OAAO+3B,UAE7C9zB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEhY,UAAW,SACXolB,WAAY,UACZqb,KAAI,sBAAA9wB,OAAwB0uB,EAAiBjY,MAAzC,KAAAzW,OAAkD9S,KAAKE,MAAM6H,YAAYiN,KAAK+F,QAHpF,uDAOAlL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEO,GAAI,EACJzX,KAAM,MACNtB,MAAO,UACP8O,KAAM,qBAGRuwB,EACFnyB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACTC,GAAI,EACJC,GAAI,EACJuI,GAAI,EACJrZ,QAAS,OACToB,WAAY,SACZuX,cAAe,SACftX,eAAgB,SAChB6iB,GAAI5mB,KAAKJ,MAAM6zB,oBAAsB,EAAI,IAG3C5jB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZC,eAAgB,OAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE4C,UAAU,EACV+S,QAAS9wB,KAAKJ,MAAMk0B,sBACpBtpB,MAAK,2BACLwT,SAAU,SAAAxE,GAAC,OAAI8D,EAAKoX,qBAAqBlb,EAAEsD,OAAOgU,cAKtD9wB,KAAKJ,MAAMk0B,uBACXjkB,EAAAxO,EAAAC,cAACygC,EAADr+B,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEE4L,OAAQ,OACR+3B,WAAW,EACXla,UAAWmY,EAAe5hC,UAI9BsiC,IACF3yB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE1K,EAAG,EACHsL,GAAI,EACJva,MAAO,EACPkd,aAAc,EACd5a,WAAY,SACZuX,cAAe,SACftX,eAAgB,SAChB8Z,gBAAiB,gBACjB4T,OAAM,aAAA3e,OAAe9S,KAAKE,MAAM4C,MAAM8I,OAAO+3B,UAE7C9zB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEzH,OAAQ,QACR2W,IAAK4X,EAAkB7X,QAEzBva,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZuX,cAAe,MACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEhY,UAAW,SACXolB,WAAY,UACZqb,KAAI,sBAAA9wB,OAAwBmvB,EAAkB1Y,MAA1C,KAAAzW,OAAmD9S,KAAKE,MAAM2E,gBAHpE,WAKWo9B,EAAkBz3B,MAL7B,oBAKqDxK,KAAKE,MAAM2E,eAEhEgL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEO,GAAI,EACJzX,KAAM,MACNtB,MAAO,UACP8O,KAAM,mBAOd4vB,GAAmBrhC,KAAKJ,MAAMmyB,WAC5BliB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACP6Z,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACE+vB,WAAW,EACX9vB,UAAW,CACTC,GAAI,EACJC,GAAI,EACJuI,GAAI,EACJrZ,QAAS,OACToB,WAAY,SACZuX,cAAe,SACftX,eAAgB,WAGlB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEzH,OAAQ,QACR2W,IAAKoF,EAAYlM,OAAO6G,QAE1Bva,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJvI,GAAI,EACJnQ,SAAU,EACVV,MAAO,YACPQ,UAAW,UALb,0CAQA0M,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACIO,GAAI,EACJiD,UAAW,UACX4J,WAAY,UACZ3J,QAAS,SAAApF,GAAC,OAAI8D,EAAKpd,MAAMijC,iBAAiB,kBAAmB7lB,EAAKvd,cAAc0kB,gBAAgB,CAAC,WAAY,yBAJjH,cAUEzkB,KAAKJ,MAAMmyB,WACXliB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJgC,UAAU,EACVvT,MAAK,oBACLsmB,QAAS9wB,KAAKJ,MAAM0zB,mBACpBtV,SAAU,SAAAxE,GAAC,OAAI8D,EAAKkX,kBAAkBhb,EAAEsD,OAAOgU,cAMrD9wB,KAAK+xB,WACLliB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEhY,UAAW,SACXolB,WAAY,UACZ3J,QAAS,SAAApF,GAAC,OAAI8D,EAAK8W,mBAAkB,KAHvC,4BAK4Bp0B,KAAKE,MAAM2E,gBAO5C7E,KAAKJ,MAAM8yB,gBAAwC,YAAtB1yB,KAAKJ,MAAMkM,OACvC+D,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACT7C,EAAG,EACHsL,GAAI,IAGNlM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZuX,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACElX,KAAM,QACNwN,KAAM,UACN9O,MAAO,aAETkN,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJ1Y,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,gBAMgBnD,KAAKE,MAAM2E,cAN3B,mGAUA7E,KAAKJ,MAAM0yB,eAAuC,YAAtBtyB,KAAKJ,MAAMkM,QAAyB9L,KAAKJ,MAAMk0B,uBAA0B+L,GA2DrGzN,GAAe+P,IAClBniC,KAAKJ,MAAMoZ,WAAWhZ,KAAKJ,MAAMkM,QAAQiN,QA8NtC/Y,KAAKJ,MAAMu0B,wBACbtkB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJV,cAAe,UAEfxL,EAAAxO,EAAAC,cAACga,EAAA,EAAD,CACEC,UAAW,CACTF,cAAe,OAEjBG,YAAa,CACXvX,KAAM,QAERwX,UAAW,CACTC,GAAI,GAENtN,KAAMpO,KAAKJ,MAAMgzB,iBAAoB5yB,KAAKJ,MAAMizB,iBAAmB,iCAAmC,4BAA+B,qCAGvI7yB,KAAKJ,MAAMgzB,iBACb/iB,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACT7C,EAAG,EACHsL,GAAI,EACJrZ,QAAS,OACToB,WAAY,SACZuX,cAAe,SACftX,eAAgB,WAGlB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,EACJ3Y,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,uCAMuCnD,KAAKJ,MAAMkM,OANlD,OAM6D+D,EAAAxO,EAAAC,cAAA,cAAStB,KAAKJ,MAAMgzB,iBAAiBkR,KAArC,IAA4C9jC,KAAKE,MAAM2E,gBAEpHgL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZuX,cAAe,MACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACTmL,GAAI,EACJlL,GAAI,EACJC,GAAI,CAAC,EAAG,GACRhS,MAAO,GACP4vB,YAAa,WACX9T,EAAKsb,kBAGThT,eAAe,GAEf/V,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEqD,GAAI,EACJ1a,WAAY,SACZuX,cAAe,MACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEgM,GAAI,EACJrjB,WAAY,SACZC,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE4oB,MAAO,SACPphC,MAAO,UACP8O,KAAM,cACNxN,KAAMjE,KAAKE,MAAMkD,SAAW,MAAQ,WAGxCyM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACElY,WAAY,EACZI,SAAU,CAAC,EAAG,IAFhB,aAQJwM,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACTmL,GAAI,EACJlL,GAAI,EACJC,GAAI,CAAC,EAAG,GACRhS,MAAO,GACP4vB,YAAa,WACX9T,EAAKuT,sBAGTjL,eAAe,GAEf/V,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEqD,GAAI,EACJ1a,WAAY,SACZuX,cAAe,MACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEgM,GAAI,EACJrjB,WAAY,SACZC,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE1J,KAAM,SACNsyB,MAAO,SACPphC,MAAO,UACPsB,KAAMjE,KAAKE,MAAMkD,SAAW,MAAQ,WAGxCyM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACElY,WAAY,EACZI,SAAU,CAAC,EAAG,IAFhB,eAWFwM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJjY,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAACqa,EAAA,EAADjY,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEE2wB,kBAAmB7wB,KAAK6wB,kBAAkB3S,KAAKle,MAC/C8b,KAAM9b,KAAKJ,MAAMoZ,WAAWhZ,KAAKJ,MAAMkM,QAAQoN,OAC/C2C,WAAU,cAAA/I,OAAgB9S,KAAKJ,MAAMkM,OAA3B,eACV8P,SAAQ,GAAA9I,OAAK9S,KAAKD,cAAc2jC,WAAW1jC,KAAKJ,MAAMkM,QAA9C,qBAlWlB+D,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJV,cAAe,UAGbgnB,GACExyB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,EACJxa,MAAO,EACP6Z,cAAe,WAGZ2lB,GAAgBhhC,KAAKE,MAAM8jC,sBAC1Bn0B,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,EACJxa,MAAO,GAGLxB,KAAKJ,MAAMytB,iBAAmBiU,GAC5BzxB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,EACJxa,MAAO,GAEPqO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZuX,cAAe,OAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,6BAGAtL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE+Q,UAAW,MACXC,QAAO,yDAEPtc,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEO,GAAI,EACJzX,KAAM,MACNtB,MAAO,YACP8O,KAAM,kBAIZ5B,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJjY,WAAY,SACZuX,cAAe,MACftX,eAAgB,iBAGd,CAAC,GAAK,GAAK,EAAG,GAAGoM,IAAI,SAAA8gB,GAAQ,OAC3BphB,EAAAxO,EAAAC,cAAC4vB,GAAA,EAAD,CACE5d,UAAW,CACT7C,EAAG,GAELgL,UAAW,CACTpY,SAAU,GAEZ8tB,WAAYF,EACZpe,IAAG,YAAAC,OAAcme,GACjBG,YAAa,kBAAM9T,EAAK8Q,eAAe6C,IACvCzI,SAAUlL,EAAK1d,MAAMstB,cAAgBjrB,WAAWgvB,SAQ9DphB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZuX,cAAe,MACftX,eAAgB,iBAGdu9B,EACEzxB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsoB,SAAU,MACVhmB,WAAY,SACZuX,cAAe,OAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE9X,SAAU,EACVJ,WAAY,EACZE,UAAW,QACXX,MAAO,CACLI,WAAY,UAEdD,MAAO3C,KAAKJ,MAAM+zB,qBAAqB5e,GAAG,GAAK/U,KAAKE,MAAM4C,MAAM8I,OAAOC,aAAamO,OAAOqX,OAASrxB,KAAKE,MAAM4C,MAAM8I,OAAOC,aAAamO,OAAO8O,WAGxE,IAAtE7mB,WAAWjC,KAAKJ,MAAM+zB,qBAAqB3yB,MAAM,KAAK2D,QAAQ,IAC5D,cADF,GAAAmO,OAEO9S,KAAKJ,MAAM+zB,qBAAqB5e,GAAG,GAAK,aAAe,UAF9D,KAAAjC,OAE2E9S,KAAKJ,MAAM+zB,qBAAqB3yB,MAAM,KAAK2I,MAAMhF,QAAQ,GAFpI,MAKJkL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE+Q,UAAW,MACXC,QAASnsB,KAAKD,cAAc0kB,gBAAgB,CAAC,WAAY,wBAEzD5U,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEO,GAAI,EACJzX,KAAM,MACNtB,MAAO,YACP8O,KAAM,iBAGV5B,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEO,GAAI,EACJ/Y,MAAO,YACP4lB,WAAY,UACZ3J,QAAS5e,KAAKqtB,iBAJhB,WASArtB,KAAKE,MAAM8jC,qBACbn0B,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZuX,cAAe,OAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE9X,SAAU,EACVJ,WAAY,EACZN,MAAO,YACPQ,UAAW,QACXolB,WAAY,aALd,oBAOoBvoB,KAAKE,MAAM8jC,oBAAoBhjC,MAAM,KAAK2D,QAAQ,GAPtE,KASAkL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE+Q,UAAW,MACXC,QAASnsB,KAAKD,cAAc0kB,gBAAgB,CAAC,WAAY,oBAEzD5U,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEO,GAAI,EACJzX,KAAM,MACNtB,MAAO,YACP8O,KAAM,kBAOduvB,GACEnxB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE9X,SAAU,EACVJ,WAAY,EACZN,MAAO,YACPQ,UAAW,QACXolB,WAAY,YACZ3J,QAAS,SAACpF,GAAD,OAAO8D,EAAK6Q,uBAAuB,OAE3C6S,EAAar8B,QAAQ,GARxB,IAQ6B3E,KAAKE,MAAM2E,iBAQpDgL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEoW,IAAK,EACL3f,KAAM,SACNmM,UAAU,EACVrK,OAAQ,QACRgL,aAAc,EACdzb,WAAY,IACZghC,YAAa,aACbpmB,gBAAiB,SACjBjP,UAAW,kBACX4iB,YAAW,gBACXxT,SAAUhe,KAAKkuB,iBAAiBhQ,KAAKle,MACrCyxB,OAAM,aAAA3e,OAAe9S,KAAKE,MAAM4C,MAAM8I,OAAO8lB,SAC7CjtB,MAAoD,OAA7CzE,KAAKJ,MAAMqtB,WAAWjtB,KAAKJ,MAAMkM,QAAmB9L,KAAKD,cAAckR,MAAMjR,KAAKJ,MAAMqtB,WAAWjtB,KAAKJ,MAAMkM,SAASnH,UAAY,KAE5IkL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJjY,WAAY,SACZuX,cAAe,MACftX,eAAgB,iBAGd,CAAC,GAAI,GAAI,GAAI,KAAKoM,IAAI,SAAAghB,GAAU,OAC9BthB,EAAAxO,EAAAC,cAAC4vB,GAAA,EAAD,CACEC,WAAYA,EACZte,IAAG,YAAAC,OAAcqe,GACjBC,YAAa,kBAAM9T,EAAK6Q,uBAAuBgD,IAC/C3I,SAAUlL,EAAK1d,MAAMguB,oBAAoBtQ,EAAK1d,MAAMkM,UAAYpH,SAASysB,SASrFgR,GACEtyB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEpX,eAAgB,SAChBgY,GAAIgX,EAAkB,EAAI,GAE1BljB,EAAAxO,EAAAC,cAAC2a,EAAA,EAAD,CACEC,YAAa,CACX1a,MAAO,OACP0iC,SAAU,CAAC,EAAG,IACd1hC,MAAO,CACLiM,cAAe,cAEjB0N,SAAUnc,KAAKJ,MAAMwtB,gBAEvBhR,YAAapc,KAAKJ,MAAMwtB,eAAiB,KAAOptB,KAAK44B,cAAc1a,KAAKle,OAEvEA,KAAKJ,MAAMkM,OAAQinB,EAAkB,cAAgB,OAnRlEljB,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACE4vB,WAAYpD,EACZvsB,UAAW,CACT7C,EAAG,EACHsL,GAAI,IAIJ/b,KAAKJ,MAAMoZ,WAAX,SAAoChZ,KAAKJ,MAAMoZ,WAAX,QAAiCD,QACnElJ,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEE,cAAe,UAEfxL,EAAAxO,EAAAC,cAACqa,EAAA,EAADjY,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEE0b,SAAQ,uBACRC,WAAU,gCACVC,KAAM9b,KAAKJ,MAAMoZ,WAAX,QAAiCE,OACvC2X,kBAAmB7wB,KAAK6wB,kBAAkB3S,KAAKle,UAInD6P,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZuX,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACElX,KAAM,QACNwN,KAAM,WACN9O,MAAO,aAETkN,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJ1Y,SAAU,EACVV,MAAO,WACPQ,UAAW,UAGTnD,KAAKJ,MAAM4zB,oBAAX,MAAA1gB,OACQ9S,KAAKD,cAAc2jC,WAAW1jC,KAAKJ,MAAMkM,QADjD,UAAAgH,OACiE9S,KAAKE,MAAM2E,cAD5E,oEAEIi8B,EAAS,MAAAhuB,OACH9S,KAAKD,cAAc2jC,WAAW1jC,KAAKJ,MAAMkM,QADtC,UAAAgH,OACsD9S,KAAKE,MAAM2E,cADjE,yFAAAiO,OAGH9S,KAAKD,cAAc2jC,WAAW1jC,KAAKJ,MAAMkM,QAHtC,UAAAgH,OAGsD9S,KAAKE,MAAM2E,cAHjE,6DAMjBgL,EAAAxO,EAAAC,cAAC2a,EAAA,EAAD,CACEC,YAAa,CACXH,GAAI,EACJva,MAAO,CAAC,EAAG,KAEb4a,YAAapc,KAAKu3B,aAAarZ,KAAKle,OALtC,cA0XhB6P,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJV,cAAe,UAEfxL,EAAAxO,EAAAC,cAACga,EAAA,EAAD,CACEC,UAAW,CACTF,cAAe,OAEjBG,YAAa,CACXvX,KAAM,QAERwX,UAAW,CACTC,GAAI,GAENtN,KAAM,2BAzkDVyB,EAAAxO,EAAAC,cAAC6iC,GAAA,EACKnkC,KAAKE,SAylDvBmhC,GAAmBrhC,KAAKJ,MAAM0zB,oBAC5BzjB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJva,MAAO,GAEPqO,EAAAxO,EAAAC,cAAC8iC,GACKpkC,KAAKE,QAMfkyB,EACEviB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJva,MAAO,CAAC,EAAE,IACVsC,WAAY,UACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC+iC,EAAA,EAAD3gC,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEEokC,YAAY,EACZC,iBAAkB,GAClB9B,SAAUziC,KAAKE,MAAM2E,kBAGvB09B,GACF1yB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJva,MAAO,CAAC,EAAE,KACVsC,WAAY,UACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACT7C,EAAE,IAGJZ,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZuX,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEzH,OAAQ,MACR2W,IAAK4X,EAAkB7X,QAEzBva,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJ1Y,SAAU,EACVV,MAAO,WACPQ,UAAW,UAEX0M,EAAAxO,EAAAC,cAAA,uCAA+BmhC,GAA/B,oBAAiE5yB,EAAAxO,EAAAC,cAAA,WANnE,WAMkF2gC,EAAkBz3B,MANpG,qBAM6Hi4B,GAN7H,gBAQA5yB,EAAAxO,EAAAC,cAAC2a,EAAA,EAAD,CACEC,YAAa,CACXH,GAAG,EACHva,MAAM,CAAC,EAAE,KAEX4a,YAAc,SAAA5C,GAAC,OAAI8D,EAAKpd,MAAMolB,YAAX,SAAAxS,OAAgCmvB,EAAkB1Y,MAAlD,KAAAzW,OAA2D2vB,OALhF,WAOWA,OAOrB5yB,EAAAxO,EAAAC,cAACkjC,GAAA,EAAD,CACEC,iBAAiB,EACjB1a,KAAI,mBACJpM,MAAK,mBACL1C,QAASjb,KAAKE,MAAM+a,QACpBiC,WAAYld,KAAKs2B,WACjBxJ,UAAW9sB,KAAKE,MAAM2E,cACtB0Y,OAAmC,UAA3Bvd,KAAKJ,MAAMsyB,YACnB9jB,KAAI,+DAAA0E,OAAiE9S,KAAKJ,MAAMiyB,SAA5E,mCAAA/e,OAAsH9S,KAAKE,MAAM2E,cAAjI,cACJ6/B,MAAK,eAAA5xB,OAAiB9S,KAAKJ,MAAMiyB,SAA5B,gBAAA/e,OAAmD9S,KAAKE,MAAM2E,cAA9D,8BAAAiO,OAAwG9S,KAAKD,cAAc0kB,gBAAgB,CAAC,YAA5I,2DAhoGavgB,4CC+VbygC,8MAxWb/kC,MAAQ,CACN0E,UAAU,KACVF,WAAW,KACX6oB,WAAW,IACX2X,cAAc,mBAIhB7kC,cAAgB,gFAGVC,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,4JAK9CF,KAAKI,kQAILJ,KAAK6kC,iMAGkBvkC,EAAUC,mEACjCP,KAAKI,YAEgBE,EAAUuE,gBAAkB7E,KAAKE,MAAM2E,eAE1D7E,KAAK6kC,kTAMgB7kC,KAAKD,cAAc+kC,YAAY9kC,KAAKE,MAAM6H,wEAGxD,UAmDT,IAhDMkmB,EAASjuB,KAAKD,cAAckR,MAAMjR,KAAKJ,MAAMqtB,YAC7C8X,EAAe9W,EAAOjtB,MAAMhB,KAAKE,MAAM8kC,SAAS/jC,IAAI,MAEpDgkC,EAAchjC,WAAW8iC,EAAa9jC,IAAI,KAC1CikC,EAAgBjjC,WAAW8iC,EAAa9jC,IAAI,IAC5CkkC,EAAgBljC,WAAW8iC,EAAa9jC,IAAI,IAC5CmkC,EAAanjC,WAAW8iC,EAAa9jC,IAAI,IAEzCqD,EAAY,CAChB,CACE+gC,KAAK,EAAE,GACP76B,MAAM,QACN/F,MAAMwgC,EACNnlB,MAAMmlB,EACNtiC,MAAM3C,KAAKD,cAAc0kB,gBAAgB,CAAC,QAAQ,SAASzkB,KAAKE,MAAM2E,cAAc,QAAQ,QAAQqL,KAAK,KACzGo1B,WAAW,OAAOtlC,KAAKD,cAAc0kB,gBAAgB,CAAC,QAAQ,SAASzkB,KAAKE,MAAM2E,cAAc,QAAQ,QAAQqL,KAAK,KAAK,KAE5H,CACEm1B,KAAK,IACL76B,MAAM,WACN/F,MAAMygC,EACNK,OAAOL,EACPviC,MAAM3C,KAAKD,cAAc0kB,gBAAgB,CAAC,QAAQ,SAASzkB,KAAKE,MAAM2E,cAAc,QAAQ,QAAQqL,KAAK,KACzGs1B,YAAY,OAAOxlC,KAAKD,cAAc0kB,gBAAgB,CAAC,QAAQ,SAASzkB,KAAKE,MAAM2E,cAAc,QAAQ,QAAQqL,KAAK,KAAK,KAE7H,CACEm1B,KAAK,GACL76B,MAAM,WACN/F,MAAM0gC,EACNM,OAAON,EACPxiC,MAAM3C,KAAKD,cAAc0kB,gBAAgB,CAAC,QAAQ,SAASzkB,KAAKE,MAAM2E,cAAc,QAAQ,QAAQqL,KAAK,KACzGw1B,YAAY,OAAO1lC,KAAKD,cAAc0kB,gBAAgB,CAAC,QAAQ,SAASzkB,KAAKE,MAAM2E,cAAc,QAAQ,QAAQqL,KAAK,KAAK,KAE7H,CACEm1B,KAAK,EACL76B,MAAM,OACNm7B,KAAKP,EACL3gC,MAAM2gC,EACNziC,MAAM3C,KAAKD,cAAc0kB,gBAAgB,CAAC,QAAQ,SAASzkB,KAAKE,MAAM2E,cAAc,QAAQ,QAAQqL,KAAK,KACzG01B,UAAU,OAAO5lC,KAAKD,cAAc0kB,gBAAgB,CAAC,QAAQ,SAASzkB,KAAKE,MAAM2E,cAAc,QAAQ,QAAQqL,KAAK,KAAK,MAIzH21B,EAA0B7lC,KAAKD,cAAc0kB,gBAAgB,CAAC,QAAQ,SAASzkB,KAAKE,MAAM2E,cAAc,QAAQ,4BAE/F,EACfW,EAAY4/B,EADG,EAEfz/B,EAAc,CAAC,GACZc,EAAE,EAAEA,GAHQ,EAGQA,IACrBq/B,EAAar/B,EAAEjB,EACrBG,EAAYuE,KAAK47B,GAGb1hC,EAAa,CACjBiI,QAAS,GACTM,SAAS,EACTvC,QAAS,QAETmC,eAAgB,GAChBC,gBAAiB,GACjBlH,KAAM,CAAC,QAAQ,SAAS,SAAS,QACjCsG,OAAQ,SAAAm6B,GAAA,IAAGr2B,EAAHq2B,EAAGr2B,GAAH,OAAAq2B,EAAOz2B,KAAe,GAAAwD,OAAIpD,EAAJ,WAC9BlF,MAAO,SAAAC,GAAC,OAAItJ,EAAKpB,cAAcsL,iBAAiBZ,EAAEhG,MAAM,EAAE,GAAG,IAAItD,EAAKjB,MAAM2E,eAC5EyH,eAAgBu5B,EAA0B,CAAE92B,KAAM,QAASC,UAAW,CAAE62B,IAA8B,KACtGjgB,eAAc,EACdtb,SAAS,EACT3E,cAEAuF,SAAS,CACPtC,OAAQ,SAAAkB,GAAC,OAAI3I,EAAKpB,cAAcsL,iBAAiBvB,EAAE,EAAE,IACrDkB,WAAWrF,EACXmF,OAAQ,OACRH,SAAU,EACVE,YAAa,EACbO,aAAc,EACdR,OAAQ,GACRK,eAAgB,UAElBP,WAAW,CACTE,OAAQ,GACRD,SAAS,EACTE,YAAa,GACbC,OAAQ,UAEVhI,MAAM,CACJkjC,OAAO,CACL53B,KAAK,CACH/K,SAAS,GACTJ,WAAW,IACX0I,KAAK7I,KAAM8I,OAAO5I,QAClBH,WAAYC,KAAMC,MAAMsL,YAG5B9C,KAAM,CACJ4C,MAAO,CACLC,KAAM,CACJ/K,SAAS,GACTJ,WAAW,IACX0I,KAAK7I,KAAM8I,OAAOhB,OAClB/H,WAAYC,KAAMC,MAAMsL,aAI9BC,KAAM,CACJC,KAAM,CACJrC,OAAQ,UAAWC,gBAAiB,SAI1C8C,OAAQjP,KAAKE,MAAMkD,SAAW,CAAE8L,IAAK,EAAGC,MAAO,EAAGC,OAAQ,GAAIC,KAAM,GAAM,CAAEH,IAAK,GAAIC,MAAO,EAAGC,OAAQ,GAAIC,KAAM,KAGnHrP,KAAKkB,SAAS,CACZoD,YACAF,2JAIaoV,GACf,IAAIyT,EAAazT,EAAEsD,OAAOrY,MAAMyD,SAAWmN,MAAMmE,EAAEsD,OAAOrY,OAASgF,KAAK8nB,IAAIvxB,KAAKJ,MAAMglC,cAAc3iC,WAAWuX,EAAEsD,OAAOrY,QAAU,EACnIwoB,EAAajtB,KAAKD,cAAckR,MAAMgc,GACtCjtB,KAAKkB,SAAS,CACZ+rB,gDAIK,IAAA3P,EAAAtd,KAEP,IAAKA,KAAKE,MAAM2E,gBAAkB7E,KAAKE,MAAM6H,YAC3C,OAAO,KAGT,IACMk+B,EADmBjmC,KAAKD,cAAc0kB,gBAAgB,CAAC,YAAY,OAAO,aAClCzkB,KAAKD,cAAc0kB,gBAAgB,CAAC,YAAY,OAAO,YAErG,OACE5U,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACT7C,EAAE,CAAC,EAAE,KAGPZ,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACP6Z,cAAe,CAAC,SAAS,QAEzBxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,CAAC,EAAE,IACV6Z,cAAe,SACftX,eAAgB,cAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC0qB,EAAA,EAAD,CACEjR,MAAO/a,KAAKE,MAAM2E,cAClBkD,YAAa/H,KAAKE,MAAM6H,YACxBkkB,UAAW,CACTxa,KAAK,OACLvR,MAAM,CACJ8b,GAAG,EACHtI,OAAO,YAIb7D,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE9X,SAAU,EACVV,MAAO,WACPQ,UAAW,UAHb,oFAKqFnD,KAAKE,MAAM8kC,SAAX,GAAAlyB,OAAyB9S,KAAKE,MAAM8kC,SAASrgC,QAAQ,GAArD,KAA6D,KAE9IshC,GACEp2B,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Y,MAAO,CACLE,QAAQ,cACRwjC,cAAc,WAGhBr2B,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE+Q,UAAW,MACXC,QAASnsB,KAAKD,cAAc0kB,gBAAgB,CAAC,WAAW,aAExD5U,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEO,GAAI,EACJjK,KAAM,OACNxN,KAAM,MACNtB,MAAO,kBAOrBkN,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJV,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEoW,IAAK,EACL3f,KAAM,SACNmM,UAAU,EACVW,aAAc,EACdzb,WAAY,IACZE,UAAW,SACXuQ,OAAQ,CAAC,MAAM,SACfuwB,YAAa,aACbr1B,UAAW,kBACXlF,IAAK1J,KAAKJ,MAAMglC,cAChB/mB,gBAAiB,cACjBG,SAAUhe,KAAKkuB,iBAAiBhQ,KAAKle,MACrCyxB,OAAM,aAAA3e,OAAehQ,KAAM8I,OAAO8lB,SAClCF,YAAW,UAAA1e,OAAY9S,KAAKE,MAAM2E,cAAc8e,cAArC,WACXlf,MAAOzE,KAAKJ,MAAMqtB,aAAe5X,MAAMrV,KAAKJ,MAAMqtB,YAAcjtB,KAAKJ,MAAMqtB,WAAa,MAG5Fpd,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJhY,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC2a,EAAA,EAAD,CACEC,YAAa,CACX1a,MAAM,CAAC,EAAE,KAEX4a,YAAapc,KAAK6kC,UAAU3mB,KAAKle,OAJnC,eAUJ6P,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,CAAC,EAAE,GACPva,MAAO,CAAC,EAAE,IACVkO,GAAI,4BAGF1P,KAAKE,MAAMkD,SACTyM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACP6Z,cAAe,UAGY,OAAzBrb,KAAKJ,MAAM0E,WAAsBtE,KAAKJ,MAAM0E,UAAU6L,IAAI,SAACrG,EAAEkY,GAAH,OACxDnS,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE5H,GAAI,EACJiL,GAAI,EACJhd,MAAO,EACP6Z,cAAe,MACfxI,IAAG,YAAAC,OAAckP,IAEjBnS,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,IACPsC,WAAY,SACZC,eAAgB,cAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE9X,SAAU,EACVJ,WAAY,EACZN,MAAO,UAENmH,EAAEU,QAGPqF,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,IACPuhB,SAAU,WACVjf,WAAY,SACZsX,UAAW,CAAC,OAAO,QACnBrX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEgrB,OAAQ,EACRpjB,SAAU,WACVjf,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE9X,SAAU,EACVJ,WAAY,EACZN,MAAO,WAEN2a,EAAKvd,cAAcsL,iBAAiBvB,EAAErF,MAAM,EAAE,GALjD,IAKsD6Y,EAAKpd,MAAM2E,gBAGnEgL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEhM,MAAO,EACP3N,MAAOsI,EAAEu7B,KACTtiB,SAAU,WACVrP,OAAQ,CAAC,OAAO,QAChBgL,aAAc,CAAC,gBAAgB,iBAC/Blc,MAAO,CAACqM,WAAU,gCAAAiE,OAAiChJ,EAAEnH,MAAnC,iBAAAmQ,OAAwDhJ,EAAEnH,MAA1D,qBAQ9BkN,EAAAxO,EAAAC,cAACoX,EAAA,EAADhV,OAAAC,OAAA,CACEiO,KAAM3H,IACNyJ,OAAQ,IACRiF,YAAY,GACR3Y,KAAKJ,MAAMwE,WAJjB,CAKEkL,KAAMtP,KAAKJ,MAAM0E,UACjBsU,SAAU,wCA/VI1U,aCimBjBkiC,8MAzlBbxmC,MAAQ,CACNolC,SAAS,GACTqB,UAAU,GACVjO,aAAa,GACb9F,cAAc,GACdJ,YAAY,KACZoU,eAAe,GACfC,cAAa,EACb9F,iBAAiB,GACjBzK,iBAAiB,GACjBhH,kBAAkB,GAClBkR,kBAAkB,GAClBsG,mBAAmB,GACnBxC,oBAAoB,GACpB5Q,kBAAiB,EACjB0C,sBAAsB,MAIxB/1B,cAAgB,OAUhBu2B,WAAa,WACX1xB,EAAK1D,SAAS,CACZgxB,YAAa,UAIjBqE,eAAiB,SAAArE,GACfttB,EAAK1D,SAAS,CACZgxB,4FAfElyB,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,6LAkBzCF,KAAKE,MAAM+a,SAAYjb,KAAKE,MAAMM,8DAC9BR,KAAKkB,SAAS,CACnBqlC,cAAa,mBAIXrrB,iBAAelb,KAAKJ,OAEpBmb,EAAQ/a,KAAKE,MAAM2E,cACnBkD,EAAc/H,KAAKE,MAAMqhB,gBAAgBxG,IACzCmQ,EAA0B,IACRnQ,GAAShT,WAYvBojB,QAAQC,IAAI,CACpBprB,KAAKD,cAAc0mC,aAAa1+B,GAChC/H,KAAKD,cAAc2mC,kBAAkB3+B,GACrC/H,KAAKD,cAAc+kC,YAAY9kC,KAAKE,MAAM6H,aAC1C/H,KAAKD,cAAc4mC,gBAAgB5rB,EAAM/a,KAAKE,MAAM+a,SACpDjb,KAAKD,cAAc6mC,iBAAiB7+B,EAAY/H,KAAKE,MAAM+a,SAC3Djb,KAAKD,cAAc4mC,gBAAgB5+B,EAAYiN,KAAK+F,MAAM/a,KAAKE,MAAM+a,SACrEjb,KAAKD,cAAcq3B,mBAAmBrc,EAAMhT,EAAYiN,KAAKjE,QAAQ/Q,KAAKE,MAAM+a,SAChFjb,KAAKD,cAAcurB,yBAAyBtrB,KAAKE,MAAM+a,QAAQiQ,EAAwB,KAAK,MAC5FlrB,KAAKD,cAAc8mC,6BAA6B7mC,KAAKE,MAAM+a,QAAQiQ,EAAwB,OAAM,wCAlBjG8Y,OACAsC,OACAtB,OACA5M,OACAiO,OACArQ,OACA1D,OACAwD,OACA2K,OAaFvlB,EAASmrB,UAAUtrB,GAASsrB,EAC5BnrB,EAASkd,aAAard,GAASqd,EAC/Bld,EAASoX,cAAcvX,GAASuX,EAChCpX,EAASorB,eAAevrB,GAASurB,EACjCprB,EAAS8a,iBAAiBjb,GAASib,EACnC9a,EAASulB,iBAAiB1lB,GAAS0lB,EACnCvlB,EAAS8oB,oBAAoBjpB,GAASipB,EACtC9oB,EAAS4a,sBAAsB/a,GAAS+a,EACxC5a,EAASglB,kBAAkBnlB,GAAShT,EAAYm4B,kBAChDhlB,EAAS8pB,SAASjqB,GAASiqB,IAAaA,EAAS3vB,QAAU2vB,EAAW,KACtE9pB,EAAS8T,kBAAkBjU,GAASib,GAAoBsQ,EAAiBtQ,EAAiBh1B,MAAMslC,GAAkBtmC,KAAKD,cAAckR,MAAM,GAG3IiK,EAASsrB,mBAAqBxmC,KAAKD,cAAcs4B,kBAAkBr4B,KAAKE,MAAM6H,aAM9EmT,EAASkY,kBAAmB,EAC5BlY,EAASqrB,aAAevmC,KAAKE,MAAM+a,SAAWC,EAAS8a,iBAAiBjb,IAAU/a,KAAKD,cAAckR,MAAMiK,EAAS8a,iBAAiBjb,IAAQhG,GAAG,GAIhJ/U,KAAKkB,SAASga,kQAIdlb,KAAKI,qBACCJ,KAAK8mC,wBACXzsB,OAAOysB,eAAiB9mC,KAAK8mC,eAAe5oB,KAAKle,2LAG1BM,EAAWC,+EAClCP,KAAKI,YACC4a,EAAiB1a,EAAU2a,UAAYjb,KAAKE,MAAM+a,QAClD8rB,EAAuBzmC,EAAUuE,gBAAkB7E,KAAKE,MAAM2E,cAC9DmiC,EAAyBtmC,KAAKC,UAAUL,EAAUihB,mBAAqB7gB,KAAKC,UAAUX,KAAKE,MAAMqhB,iBACjG0lB,EAAsB3mC,EAAUuL,cAAgB7L,KAAKE,MAAM2L,cAAgBnI,OAAOkG,OAAOtJ,EAAUuL,cAAchC,OAAO,SAAA+P,GAAE,MAAiB,YAAZA,EAAGI,SAAqB9R,SAAWxE,OAAOkG,OAAO5J,KAAKE,MAAM2L,cAAchC,OAAO,SAAA+P,GAAE,MAAiB,YAAZA,EAAGI,SAAqB9R,QACjP8S,GAAkBisB,GAAuBD,GAA0BD,IAErE/mC,KAAK8mC,uJAIA,IAAA3lC,EAAAnB,KAGDknC,EAAoBlnC,KAAKD,cAAc0kB,gBAAgB,CAAC,QAAQ,gBAEtE,OACE5U,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,GAEPqO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPwa,GAAI,CAAC,EAAE,GACPlY,WAAY,SACZuX,cAAe,MACftX,eAAgB,cAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,IAEPqO,EAAAxO,EAAAC,cAAC8jB,EAAA,EAAD1hB,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEEkD,SAAUpD,KAAKE,MAAMkD,SACrBmiB,KAAM,CAACvlB,KAAKE,MAAM2E,eAClBuX,YAAc,SAAA5C,GAAC,OAAIrY,EAAKjB,MAAMolB,YAAYnkB,EAAKjB,MAAMshB,mBACrDpT,KAAMpO,KAAKD,cAAc0kB,gBAAgB,CAAC,aAAazkB,KAAKE,MAAMshB,iBAAiB,cAGvF3R,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,GACPuC,eAAgB,YAEhB8L,EAAAxO,EAAAC,cAACiiC,GAAA,EAAD7/B,OAAAC,OAAA,CACEomB,KAAM,OACF/pB,KAAKE,MAFX,CAGEkO,KAAM,YACNgO,YAAc,SAAA5C,GAAC,OAAIrY,EAAKo1B,eAAe,aAI7C1mB,EAAAxO,EAAAC,cAACsmB,EAAA,EAAD,CACE5L,GAAI,CAAC,EAAE,IADT,oBAsDInM,EAAAxO,EAAAC,cAAAuO,EAAAxO,EAAA8lC,SAAA,KACEt3B,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,GAEPqO,EAAAxO,EAAAC,cAAC8lC,GAAD1jC,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEEmmC,UAAWrmC,KAAKJ,MAAMymC,UAAUrmC,KAAKE,MAAM2E,eAC3CuzB,aAAcp4B,KAAKJ,MAAMw4B,aAAap4B,KAAKE,MAAM2E,eACjDytB,cAAetyB,KAAKJ,MAAM0yB,cAActyB,KAAKE,MAAM2E,eACnD47B,iBAAkBzgC,KAAKJ,MAAM6gC,iBAAiBzgC,KAAKE,MAAM2E,eACzDmxB,iBAAkBh2B,KAAKJ,MAAMo2B,iBAAiBh2B,KAAKE,MAAM2E,eACzDmqB,kBAAmBhvB,KAAKJ,MAAMovB,kBAAkBhvB,KAAKE,MAAM2E,eAC3Dm/B,oBAAqBhkC,KAAKJ,MAAMokC,oBAAoBhkC,KAAKE,MAAM2E,eAC/DixB,sBAAuB91B,KAAKJ,MAAMk2B,sBAAsB91B,KAAKE,MAAM2E,mBAIrE7E,KAAKJ,MAAM2mC,cAAgBW,EAAkB5yB,SAAW5Q,OAAO4B,KAAK4hC,EAAkBhnC,MAAMqhB,iBAAiBlN,SAASrU,KAAKE,MAAM6H,YAAYiN,KAAK+F,QAChJlL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPkO,GAAI,mBACJ2L,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC+lC,GAAA,EAAD3jC,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEEonC,WAAY,CACVtrB,GAAG,EACHD,GAAG,CAAC,EAAE,IAER4B,MAAO,WACP4D,gBAAiB,CAACvhB,KAAKE,MAAM6H,YAAYiN,KAAK+F,SAE9ClL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZ4L,GAAI,kBACJ2L,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACTC,GAAG,EACHC,GAAG,CAAC,EAAE,GACNhS,MAAM,CAAC,EAAE,UAGXqO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEqD,GAAI,CAAC,EAAE,GACPva,KAAM,MACNwN,KAAMy1B,EAAkBnd,OAE1Bla,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,EACJ3Y,SAAU,CAAC,EAAE,GACbJ,WAAY,IACZE,UAAW,UAJb,qCAQA0M,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,EACJrZ,MAAO,OACPU,SAAU,CAAC,EAAE,GACbJ,WAAY,IACZE,UAAW,UAEV+jC,EAAkB9e,MAErBvY,EAAAxO,EAAAC,cAAC2a,EAAA,EAAD,CACEC,YAAa,CACXH,GAAG,EACHva,MAAM,OACN4Z,UAAU,OACVuD,UAAU,SACV1a,KAAKjE,KAAKE,MAAMkD,SAAW,QAAU,UAEvCgZ,YAAc,SAAA5C,GAAC,OAAIrY,EAAKjB,MAAMolB,YAAX,SAAAxS,OAAgCo0B,EAAkB3d,MAAlD,aAAAzW,OAAmE3R,EAAKjB,MAAM6H,YAAYiN,KAAK+F,UAElHlL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZuX,cAAe,MACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACExY,MAAO,QACPU,SAAU,CAAC,EAAE,GACbJ,WAAY,KAHd,eAOA4M,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEO,GAAI,EACJzX,KAAM,QACNwN,KAAM,8BAYxBzR,KAAKJ,MAAM2mC,cAAgBvmC,KAAKE,MAAM+a,SACpCpL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPxa,MAAO,EACP6Z,cAAe,SACf3L,GAAI,4BAEJG,EAAAxO,EAAAC,cAACsmB,EAAA,EAAD,CAAOpJ,GAAI,CAAC,EAAE,IAAd,kBACA3O,EAAAxO,EAAAC,cAACimC,EAAD7jC,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEEmmC,UAAWrmC,KAAKJ,MAAMymC,UAAUrmC,KAAKE,MAAM2E,mBAMjD7E,KAAKJ,MAAM2mC,cAAgBvmC,KAAKE,MAAM+a,UAAYjb,KAAKJ,MAAMsgC,kBAAkBlgC,KAAKE,MAAM2E,gBAAkBnB,OAAO4B,KAAKtF,KAAKJ,MAAM4mC,oBAAoBt+B,OAAO,GAC5J2H,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPkO,GAAI,gBACJ2L,cAAe,UAEfxL,EAAAxO,EAAAC,cAACsmB,EAAA,EAAD,CAAOpJ,GAAI,CAAC,EAAE,IAAd,iBACA3O,EAAAxO,EAAAC,cAACwmB,EAAA,EAADpkB,OAAAC,OAAA,CACEyQ,cAAe1Q,OAAO4B,KAAKtF,KAAKJ,MAAM4mC,oBACtCze,KAAM,CACJ,CACEpK,MAAM,QACNzd,MAAM,CACJsB,MAAM,CAAC,GAAK,MAEdwmB,OAAO,CACL,CACEvW,KAAK,OACLvR,MAAM,CACJinB,GAAG,EACHzT,OAAO,CAAC,QAAQ,WAGpB,CACEjC,KAAK,eAIX,CACEwW,QAAO,EACPtK,MAAM,UACNzd,MAAM,CACJsB,MAAM,CAAC,IAAM,MAEfwmB,OAAO,CACL,CACEvW,KAAK,eACLvR,MAAM,CACJyB,SAAU3B,KAAKE,MAAMkD,SAAW,EAAI,MAK5C,CACEua,MAAM,aACNyK,KAAKpoB,KAAKD,cAAc0kB,gBAAgB,CAAC,WAAW,8BACpDvkB,MAAM,CACJsB,MAAM,CAAC,IAAK,IACZuC,eAAe,CAAC,SAAS,eAE3BikB,OAAO,CACL,CACEvW,KAAK,oBACLvR,MAAM,CACJyB,SAAU3B,KAAKE,MAAMkD,SAAW,EAAI,MAK5C,CACEua,MAAM,eACNyK,KAAKpoB,KAAKD,cAAc0kB,gBAAgB,CAAC,WAAW,0BACpDvkB,MAAM,CACJsB,MAAM,CAAC,IAAK,KAEdwmB,OAAO,CACL,CACEvW,KAAK,wBACLvR,MAAM,CACJyB,SAAS,QA+Cf3B,KAAKE,MA7GX,CA8GEqhB,gBAAiBvhB,KAAKJ,MAAM4mC,uBAKpCxmC,KAAKE,MAAM+a,SAAWjb,KAAKJ,MAAMolC,SAAShlC,KAAKE,MAAM2E,gBACnDgL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPxa,MAAO,EACP6Z,cAAe,SACf3L,GAAI,gCAEJG,EAAAxO,EAAAC,cAACsmB,EAAA,EAAD,CAAOpJ,GAAI,CAAC,EAAE,IAAd,sBACA3O,EAAAxO,EAAAC,cAACkmC,GAAD9jC,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEE8kC,SAAUhlC,KAAKJ,MAAMolC,SAAShlC,KAAKE,MAAM2E,mBAK/C7E,KAAKE,MAAM+a,SACTpL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPxa,MAAO,EACP6Z,cAAe,SACf3L,GAAI,0BAEJG,EAAAxO,EAAAC,cAACsmB,EAAA,EAAD,CAAOpJ,GAAI,CAAC,EAAE,IAAd,gBACA3O,EAAAxO,EAAAC,cAACmmC,GAAA,EAAD/jC,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEEkU,cAAe,CAACpU,KAAKE,MAAM2E,eAC3BkjB,KAAM,CACJ,CACEpK,MAAO3d,KAAKE,MAAMkD,SAAW,GAAK,OAClClD,MAAM,CACJsB,MAAM,CAAC,IAAK,MAEdwmB,OAAO,CACL,CACEvW,KAAK,OACLvR,MAAM,CACJinB,GAAG,CAAC,EAAE,KAGV,CACE1V,KAAK,OACLwW,QAAO,KAIb,CACEtK,MAAM,SACNsK,QAAO,EACP/nB,MAAM,CACJsB,MAAM,KAERwmB,OAAO,CACL,CACEvW,KAAK,YAIX,CACEkM,MAAM,OACNzd,MAAM,CACJsB,MAAM,CAAC,IAAK,MAEdwmB,OAAO,CACL,CACEvW,KAAK,UAIX,CACEkM,MAAM,SACNzd,MAAM,CACJsB,MAAM,CAAC,IAAK,KACZuC,eAAe,CAAC,SAAS,eAE3BikB,OAAO,CACL,CACEvW,KAAK,aACLvR,MAAM,CACJinB,GAAG,CAAC,EAAE,KAGV,CACEc,QAAO,EACPxW,KAAK,YAIX,CACEkM,MAAM,SACNzd,MAAM,CACJsB,MAAM,KAERwmB,OAAO,CACL,CACEvW,KAAK,YAIX,CACEkM,MAAM,QACNzd,MAAM,CACJsB,MAAM,CAAC,IAAK,IACZuC,eAAe,CAAC,SAAS,eAE3BikB,OAAO,CACL,CACEvW,KAAK,YACLvR,MAAM,CACJinB,GAAG,CAAC,EAAE,GACNzT,OAAO,CAAC,QAAQ,WAGpB,CACEuU,QAAO,EACPxW,KAAK,qBAYzB5B,EAAAxO,EAAAC,cAAC+iC,EAAA,EAAD3gC,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEEgd,WAAYld,KAAKs2B,WACjBmM,SAAUziC,KAAKE,MAAM2E,cACrB0Y,OAAmC,QAA3Bvd,KAAKJ,MAAMsyB,uBAplBLhuB,wBCsETwjC,eAlEb,SAAAA,EAAYxnC,GAAO,IAAA0E,EAAA,OAAAlB,OAAAikC,EAAA,EAAAjkC,CAAA1D,KAAA0nC,IACjB9iC,EAAAlB,OAAAkkC,EAAA,EAAAlkC,CAAA1D,KAAA0D,OAAAmkC,EAAA,EAAAnkC,CAAAgkC,GAAAI,KAAA9nC,KAAME,KAbRN,MAAQ,GAYWgF,EATnB7E,cAAgB,KASG6E,EAKnBgY,mBALmBlZ,OAAAyT,EAAA,EAAAzT,CAAAgE,EAAArG,EAAA+V,KAKE,SAAAM,IAAA,OAAAhQ,EAAArG,EAAAsG,KAAA,SAAAmQ,GAAA,cAAAA,EAAAjQ,KAAAiQ,EAAAhQ,MAAA,OACnBlD,EAAKxE,YADc,wBAAA0X,EAAAE,SAAAN,EAAA1X,SALF4E,EASnBsY,WATmBxZ,OAAAyT,EAAA,EAAAzT,CAAAgE,EAAArG,EAAA+V,KASN,SAAAC,IAAA,OAAA3P,EAAArG,EAAAsG,KAAA,SAAA6P,GAAA,cAAAA,EAAA3P,KAAA2P,EAAA1P,MAAA,OACXlD,EAAK7E,cAAc26B,gBAAgB,gBAAe,GAClD91B,EAAK1E,MAAMgd,aAFA,wBAAA1F,EAAAQ,SAAAX,EAAArX,SAPX4E,EAAKxE,YAFYwE,2EAPb5E,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,yDAoB9C,OACE2P,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEoC,OAAQvd,KAAKE,MAAMqd,QAEnB1N,EAAAxO,EAAAC,cAACkc,EAAA,EAAD,CACEsM,SAAU,CAAC,QAAQ,SACnBrM,UAAWzd,KAAKE,MAAMgd,YAEtBrN,EAAAxO,EAAAC,cAACkc,EAAA,EAAUE,OAAX,CACEmJ,GAAI,EACJkhB,WAAY,OACZpqB,MAAO,eACPoM,KAAM,uBAGRla,EAAAxO,EAAAC,cAACkc,EAAA,EAAUI,KAAX,KACE/N,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACP6Z,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE9X,SAAU,EACVF,UAAW,OACXR,MAAO,aAHT,2IAKqIkN,EAAAxO,EAAAC,cAAA,WALrI,iEAKyMuO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CAAM9X,SAAU,EAAGsb,UAAW,UAAW4J,WAAY,UAAWqb,KAAM5jC,KAAKD,cAAc0kB,gBAAgB,CAAC,aAAczkB,KAAKD,cAAc0kB,gBAAgB,CAAC,aALrW,MAQF5U,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEqD,GAAI,EACJ1a,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC2a,EAAA,EAAD,CACEG,YAAapc,KAAKkd,WAClBhB,YAAa,CACX1a,MAAM,CAAC,OAAO,SAHlB,8BAhEUqd,IAAM3a,WCoxBf8jC,8MAhxBbpoC,MAAQ,CACNoZ,WAAW,CACTE,OAAO,KACPH,SAAQ,GAEVkU,WAAW,KACXC,YAAY,GACZ+a,gBAAgB,KAChBjZ,kBAAkB,KAClBkZ,kBAAkB,KAClBC,mBAAmB,KACnBC,oBAAmB,EACnBxa,oBAAoB,KACpBya,2BAA0B,KAI5BtoC,cAAgB,OAsChBmuB,iBAAmB,SAAC1U,GAClB,IAAMyT,EAAazT,EAAEsD,OAAOrY,MAAMyD,SAAWmN,MAAMmE,EAAEsD,OAAOrY,OAASG,EAAK7E,cAAckR,MAAMuI,EAAEsD,OAAOrY,OAASG,EAAK7E,cAAckR,MAAM,GACzIrM,EAAKopB,oBAAoBf,GAIzBroB,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5B0sB,aACAW,oBAJ0B,WAQ9BsB,cAAgB,WACd,GAAuC,OAAnCtqB,EAAKhF,MAAMguB,oBACb,OAAO,EAGT,IAAM4B,EAAqB5qB,EAAK7E,cAAckR,MAAMrM,EAAKhF,MAAMguB,qBAAqB3sB,IAAI,KAClFgsB,EAAaroB,EAAK1E,MAAM81B,iBAAmBpxB,EAAK7E,cAAckR,MAAMrM,EAAK1E,MAAM81B,kBAAkBh1B,MAAMwuB,GAAsB,KAEnI5qB,EAAKopB,oBAAoBf,GAEzBroB,EAAK1D,SAAS,CACZ+rB,kBAIJuN,uBAAyB,WACvB,OAAuC,OAAnC51B,EAAKhF,MAAMguB,qBAGRhpB,EAAK7E,cAAckR,MAAMrM,EAAKhF,MAAMguB,qBAAqB3sB,IAAI,QAGtEktB,uBAAyB,SAACP,GACxBhpB,EAAK1D,SAAS,CACZ0sB,2BAIJI,oBAAsB,WAAiB,IAAhBC,EAAgB9V,UAAAjQ,OAAA,QAAAwJ,IAAAyG,UAAA,GAAAA,UAAA,GAAT,KAEvB8V,IACHA,EAASrpB,EAAKhF,MAAMqtB,YAGtB,IAAMG,GAAkBa,GAAUA,EAAOlZ,GAAGnQ,EAAKhF,MAAMo2B,kBAEvDpxB,EAAK1D,SAAS,CACZksB,sBAIJsK,6BAAU,SAAAhgB,IAAA,IAAAwwB,EAAAnR,EAAAC,EAAA,OAAAtvB,EAAArG,EAAAsG,KAAA,SAAAmQ,GAAA,cAAAA,EAAAjQ,KAAAiQ,EAAAhQ,MAAA,YACFogC,EAAoBtjC,EAAKhF,MAAMsoC,mBAD7B,CAAApwB,EAAAhQ,KAAA,eAAAgQ,EAAAhQ,KAAA,EAKkClD,EAAK0jC,iCALvC,OAAAxwB,EAAAyB,KAmEJ3U,EAAK1D,SAAS,CACZmnC,2BAA0B,KA3DtBtR,EAAkB,SAACnd,EAAGC,GAE1B,IAAMC,EAAY,CAChBI,YAAa,UACbD,cAAe,eACfF,WAAYH,EAAKA,EAAGI,OAAS,MAGzBgW,EAAcpW,GAAoB,YAAdA,EAAGI,OAIzBH,IACFC,EAAUC,WAAanV,EAAK7E,cAAcoa,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUE,SACrBpV,EAAK7E,cAAcqa,yBAAyBN,GAG9ClV,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5B8nC,0BAA2BrY,EAC3BhX,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADL,CAERE,OAAO,KACPH,SAAQ,OAI8B,oBAA/BnU,EAAK1E,MAAM62B,iBAAkC/G,GACtDprB,EAAK1E,MAAM62B,gBAAgBnd,GAG7BhV,EAAKuzB,kBAGDnB,EAAyB,SAACpd,GAC9B,IAAMV,EAASU,EAAGiB,gBAClBjW,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5ByY,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADL,CAERE,eAKNtU,EAAK7E,cAAco3B,YAAYvyB,EAAK1E,MAAM2E,cAAcqjC,EAAkBn3B,QAAQgmB,EAAgBC,GAElGpyB,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5ByY,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADL,CAERE,OAAO,KACPH,SAAQ,IAEVsvB,2BAA0B,MAhExB,wBAAAvwB,EAAAE,SAAAN,EAAA1X,WA0EV+L,6BAAU,SAAAsL,IAAA,IAAA4V,EAAA8L,EAAAC,EAAApQ,EAAAuH,EAAAkJ,EAAA,OAAA3xB,EAAArG,EAAAsG,KAAA,SAAA6P,GAAA,cAAAA,EAAA3P,KAAA2P,EAAA1P,MAAA,UAEFmlB,EAAaroB,EAAKhF,MAAMqtB,WAAaroB,EAAK7E,cAAckR,MAAMrM,EAAKhF,MAAMqtB,YAAc,KAFrF,CAAAzV,EAAA1P,KAAA,eAAA0P,EAAAvP,OAAA,UAIC,GAJD,cAOF8wB,EAAkB,SAACnf,EAAGC,GAC1B,IAAMmW,EAA4B,YAAdpW,EAAGI,OAGjBF,EAAY,CAChBC,WAAYH,EAAGI,OACfC,cAAa,eACbC,YAAatV,EAAK1E,MAAM2E,cACxBorB,WAAYhD,EAAWtoB,WAGrBkV,IACFC,EAAUC,WAAanV,EAAK7E,cAAcoa,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUE,SACrBpV,EAAK7E,cAAcqa,yBAAyBN,GAG9ClV,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5ByY,WAAY,CACVE,OAAO,KACPH,SAAQ,MAI8B,oBAA/BnU,EAAK1E,MAAM64B,iBAAkC/I,GACtDprB,EAAK1E,MAAM64B,gBAAgBnf,IAIzBof,EAAyB,SAACpf,GAC9B,IAAMV,EAASU,EAAGiB,gBAClBjW,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5ByY,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADL,CAERE,eAKA0P,EAAehkB,EAAKhF,MAAMsoC,kBAAkBz2B,KAC5C0e,EAAUvrB,EAAK7E,cAAcyuB,qBAAqBvB,EAAWroB,EAAK1E,MAAM6H,YAAYpG,UAlDlF6V,EAAA1P,KAAA,EAmDoBlD,EAAK2jC,mBAAmBpY,GAnD5C,OAmDFkJ,EAnDE7hB,EAAA+B,KAqDR3U,EAAK1E,MAAM4a,0BAA0B8N,EAAc,gBAAiByQ,EAAe,KAAMN,EAAiBC,GAE1Gp0B,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5ByY,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADL,CAERD,SAAQ,OA1DJ,yBAAAvB,EAAAQ,SAAAX,EAAArX,WA+DV6wB,uCAAoB,SAAA9rB,IAAA,OAAA2C,EAAArG,EAAAsG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAClBlD,EAAK1D,SAAS,CACZ8X,WAAY,CACVE,OAAO,KACPH,SAAQ,KAJM,wBAAAnR,EAAAoQ,SAAAjT,EAAA/E,WASpBouB,eAAiB,SAAClB,GAChBtoB,EAAK1D,SAAS,CACZgsB,mBA4EJsb,gBAAkB,WAChB5jC,EAAKypB,eAGPoa,kBAAoB,WAClB7jC,EAAK1D,SAAS,CACZknC,oBAAmB,gFA9TjBpoC,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,4JAK9CF,KAAKI,kRAICJ,KAAKquB,iMAGY/tB,EAAUC,8EACjCP,KAAKI,YAEC4a,EAAiB1a,EAAU2a,UAAYjb,KAAKE,MAAM+a,QAClDytB,EAA0BpoC,EAAU01B,mBAAqBh2B,KAAKE,MAAM81B,kBACtEhb,IAAkB0tB,kCACd1oC,KAAKquB,mBAGsBruB,KAAKJ,MAAMguB,sBAAwBrtB,EAAUqtB,qBAE9E5tB,KAAKkvB,gBAGmBlvB,KAAKJ,MAAMqtB,aAAe1sB,EAAU0sB,YAE5DjtB,KAAKsvB,6MAiNgBqZ,kFACjBnY,EAAkB,GAClBjD,EAAmBvtB,KAAKD,cAAc0kB,gBAAgB,CAAC,QAAQ,kBAAkBzkB,KAAKE,MAAM2E,0DAGzF,cAGuB0oB,EAAiBiD,gBACrBoY,yCACJ5oC,KAAKD,cAAc+6B,gBAAgB96B,KAAKE,MAAM2E,cAAc8jC,GAAU,iBAAtFxP,mBACoBn5B,KAAKD,cAAcg7B,oBAAoB5B,WAA7DC,SAEAp5B,KAAKJ,MAAMstB,cAEbkM,GADAA,EAAgBp5B,KAAKD,cAAckR,MAAMmoB,IACX7vB,MAAM6vB,EAAcp4B,MAAMhB,KAAKD,cAAckR,MAAMjR,KAAKJ,MAAMstB,aAAajsB,IAAI,OAC7Gm4B,EAAgBp5B,KAAKD,cAAci7B,aAAa5B,IAGlD5I,EAAgBtmB,KAAKivB,GACrB3I,EAAgBtmB,KAAKkvB,oCAGhB5I,8QAIDvD,EAAajtB,KAAKJ,MAAMqtB,WAAajtB,KAAKD,cAAckR,MAAMjR,KAAKJ,MAAMqtB,YAAc,4BAGvF4b,EAA6B5b,oCAEFjtB,KAAKD,cAAc2mC,kBAAkB1mC,KAAKE,MAAM6H,qBAAvEu+B,YAEJuC,EAA6BA,EAA2B7nC,MAAMslC,4BAGhEuC,EAA6B7oC,KAAKD,cAAckR,MAAM,kBAGlD63B,EAA4B9oC,KAAKD,cAAcyuB,qBAAqBqa,EAA2B7oC,KAAKE,MAAM6H,YAAYpG,oBAChG3B,KAAKD,cAAc8uB,iBAAiB7uB,KAAKE,MAAM6H,YAAYiN,KAAK+F,MAAM+tB,YAA9Fb,YAEFA,EAAkBA,EAAgBjnC,MAAM,MAG1ChB,KAAKkB,SAAS,CACZ+mC,sSAMsBjoC,KAAKJ,MAAMsoC,uDAA2BloC,KAAKD,cAAc4vB,sDAA7EuY,yCAESloC,KAAKD,cAAcq3B,mBAAmBp3B,KAAKE,MAAM6H,YAAYiN,KAAK+F,MAAMmtB,EAAkBn3B,QAAQ/Q,KAAKE,MAAM+a,mFAErH,0QAMyBjb,KAAKD,cAAc4vB,qCAA7CuY,kBACkCloC,KAAKsoC,wCAAvCD,SAENroC,KAAKkB,SAAS,CACZgnC,oBACAG,iKAcK,IAAAlnC,EAAAnB,KAEP,IAAKA,KAAKE,MAAM2E,cACd,OAAO,KAIT,IAAMkkC,EAAiB/oC,KAAKJ,MAAMuoC,oBAAsBnoC,KAAKJ,MAAMuoC,mBAAmBpzB,GAAG,GAEzF,OACElF,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,CAAC,EAAE,KACVsC,WAAY,UACZuX,cAAe,SACftX,eAAgB,UAGZ/D,KAAKE,MAAM81B,kBAAoBh2B,KAAKE,MAAM81B,iBAAiBjhB,GAAG,IAC5DlF,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,GAEPqO,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACT7C,EAAE,EACF+C,GAAG,CAAC,EAAE,KAGR3D,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZuX,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZuX,cAAe,OAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACElX,KAAM,QACNwN,KAAOzR,KAAKJ,MAAMyoC,0BAA4B,WAAa,WAC3D1lC,MAAQ3C,KAAKJ,MAAMyoC,0BAA4BroC,KAAKE,MAAM4C,MAAM8I,OAAOC,aAAamO,OAAO8O,UAAY,aAEzGjZ,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEO,GAAI,EACJrY,SAAU,EACVV,MAAO,WACPQ,UAAW,QAJb,+BASF0M,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJva,MAAO,EACPsC,WAAY,SACZuX,cAAe,OAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACElX,KAAM,QACNwN,KAAOs3B,EAAiB,WAAa,WACrCpmC,MAAQomC,EAAiB/oC,KAAKE,MAAM4C,MAAM8I,OAAOC,aAAamO,OAAO8O,UAAY,aAEnFjZ,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEO,GAAI,EACJrY,SAAU,EACVV,MAAO,WACPQ,UAAW,QAJb,gBAMgBnD,KAAKE,MAAM6H,YAAYiN,KAAK+F,UAM/C/a,KAAKJ,MAAMyoC,0BAkDVroC,KAAKJ,MAAMoZ,WAAWD,QACtBlJ,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJV,cAAe,UAEfxL,EAAAxO,EAAAC,cAACqa,EAAA,EAAD,CACEqI,KAAMhkB,KAAKE,MAAM8jB,KACjBpI,SAAQ,uBACRE,KAAM9b,KAAKJ,MAAMoZ,WAAWE,OAC5B2C,WAAU,gCACVgV,kBAAmB7wB,KAAK6wB,kBAAkB3S,KAAKle,SAInD6P,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJva,MAAO,GAEPqO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZuX,cAAe,OAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,6BAGAtL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE+Q,UAAW,MACXC,QAAO,yDAEPtc,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEO,GAAI,EACJzX,KAAM,MACNtB,MAAO,YACP8O,KAAM,kBAIZ5B,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJjY,WAAY,SACZuX,cAAe,MACftX,eAAgB,iBAGd,CAAC,GAAI,GAAI,EAAE,GAAGoM,IAAK,SAAA8gB,GAAQ,OACzBphB,EAAAxO,EAAAC,cAAC4vB,GAAA,EAAD,CACE5d,UAAW,CACT7C,EAAE,GAEJgL,UAAW,CACTpY,SAAS,GAEX8tB,WAAYF,EACZpe,IAAG,YAAAC,OAAcme,GACjBG,YAAa,kBAAIjwB,EAAKitB,eAAe6C,IACrCzI,SAAUrnB,EAAKvB,MAAMstB,cAAgBjrB,WAAWgvB,QAKxDphB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJC,GAAI,EACJxa,MAAO,EACP6Z,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,EACJlY,WAAY,SACZuX,cAAe,MACftX,eAAgB/D,KAAKJ,MAAMqoC,gBAAkB,gBAAkB,YAG7DjoC,KAAKJ,MAAMqoC,iBACTp4B,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsoB,SAAU,MACVhmB,WAAY,SACZuX,cAAe,OAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE9X,SAAU,EACVJ,WAAY,EACZE,UAAW,QACXX,MAAO,CACLI,WAAW,UAEbD,MAAQV,WAAWjC,KAAKJ,MAAMqoC,gBAAgBtjC,QAAQ,IAAI,EAAI3E,KAAKE,MAAM4C,MAAM8I,OAAOC,aAAamO,OAAOqX,OAASrxB,KAAKE,MAAM4C,MAAM8I,OAAOC,aAAamO,OAAO8O,WAGvG,IAAtD7mB,WAAWjC,KAAKJ,MAAMqoC,gBAAgBtjC,QAAQ,IAC5C,cADF,GAAAmO,OAEM9S,KAAKJ,MAAMqoC,gBAAgBlzB,GAAG,GAAK,aAAe,UAFxD,KAAAjC,OAEsE9S,KAAKJ,MAAMqoC,gBAAgBt+B,MAAMhF,QAAQ,GAF/G,MAKJkL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE+Q,UAAW,MACXC,QAASnsB,KAAKJ,MAAMqoC,gBAAgBlzB,GAAG,GAAK,uHAAyH,kHAErKlF,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEO,GAAI,EACJzX,KAAM,MACNtB,MAAO,YACP8O,KAAM,kBAOdzR,KAAKE,MAAM81B,kBACTnmB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsoB,SAAU,MACVhmB,WAAY,SACZuX,cAAe,MACftX,eAAgB,YAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE9X,SAAU,EACVJ,WAAY,EACZN,MAAO,YACPQ,UAAW,QACXolB,WAAY,YACZ3J,QAAU,SAACpF,GAAD,OAAOrY,EAAKgtB,uBAAuB,MAC7C3rB,MAAO,CACLsnB,SAAS,OACT3B,SAAS,SACTvlB,WAAW,SACX0uB,aAAa,aAGdtxB,KAAKE,MAAM81B,iBAAiBrxB,QAAQ3E,KAAKE,MAAMkD,SAAW,EAAI,GAdjE,IAcsEpD,KAAKE,MAAM2E,iBAMzFgL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEoW,IAAK,EACL3f,KAAM,SACNmM,UAAU,EACVrK,OAAQ,QACRgL,aAAc,EACdzb,WAAY,IACZ2L,UAAW,kBACX4iB,YAAW,gBACXxT,SAAUhe,KAAKkuB,iBAAiBhQ,KAAKle,MACrCyxB,OAAM,aAAA3e,OAAe9S,KAAKE,MAAM4C,MAAM8I,OAAO8lB,SAC7CjtB,MAAiC,OAA1BzE,KAAKJ,MAAMqtB,WAAsBjtB,KAAKD,cAAckR,MAAMjR,KAAKJ,MAAMqtB,YAAYtoB,UAAY,KAEtGkL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJjY,WAAY,SACZuX,cAAe,MACftX,eAAgB,iBAGd,CAAC,GAAG,GAAG,GAAG,KAAKoM,IAAK,SAAAghB,GAAU,OAC5BthB,EAAAxO,EAAAC,cAAC4vB,GAAA,EAAD,CACEC,WAAYA,EACZte,IAAG,YAAAC,OAAcqe,GACjBC,YAAa,kBAAIjwB,EAAKgtB,uBAAuBgD,IAC7C3I,SAAUrnB,EAAKvB,MAAMguB,sBAAwBlpB,SAASysB,QAK9DthB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJhY,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC2a,EAAA,EAAD,CACEC,YAAa,CACXH,GAAG,EACHva,MAAM,CAAC,EAAE,IACT2a,SAASnc,KAAKJ,MAAMwtB,gBAEtBhR,YAAapc,KAAK+L,QAAQmS,KAAKle,OANjC,cA7NNA,KAAKJ,MAAMoZ,WAAWD,QACpBlJ,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJV,cAAe,UAEfxL,EAAAxO,EAAAC,cAACqa,EAAA,EAAD,CACEqI,KAAMhkB,KAAKE,MAAM8jB,KACjBpI,SAAQ,uBACRE,KAAM9b,KAAKJ,MAAMoZ,WAAWE,OAC5B2C,WAAU,gCACVgV,kBAAmB7wB,KAAK6wB,kBAAkB3S,KAAKle,SAInD6P,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACT7C,EAAE,EACFsL,GAAG,IAGLlM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZuX,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACElX,KAAM,QACNwN,KAAM,WACN9O,MAAO,aAETkN,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJ1Y,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,mBAMmBnD,KAAKE,MAAM2E,cAN9B,oEAQAgL,EAAAxO,EAAAC,cAAC2a,EAAA,EAAD,CACEC,YAAa,CACXH,GAAG,EACHva,MAAM,CAAC,EAAE,KAEX4a,YAAapc,KAAK03B,QAAQxZ,KAAKle,OALjC,uBA7cDkE,iCCkbZ8kC,8MAhbbppC,MAAQ,CACN4c,UAAU,KACVlY,UAAU,KACVF,WAAW,KACX6kC,WAAW,KACX5c,YAAY,QAIdtsB,cAAgB,gFAGVC,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,2JAK9CF,KAAKI,YACLJ,KAAKkpC,qMAGkB5oC,EAAWC,gFAClCP,KAAKI,YAEC+oC,EAA4B7oC,EAAU8oC,qBAAuBppC,KAAKE,MAAMkpC,oBACzD1oC,KAAKC,UAAUL,EAAU8T,iBAAmB1T,KAAKC,UAAUX,KAAKE,MAAMkU,gBACvE+0B,IAClBnpC,KAAKkB,SAAS,CACZoD,UAAU,MACV,WACAnD,EAAKsX,sBAIanY,EAAU8C,WAAapD,KAAKE,MAAMkD,UAEtDpD,KAAKkpC,uVAMH90B,EAAgBpU,KAAKE,MAAMkU,gBACRA,EAAclM,SACnCkM,EAAgB1Q,OAAO4B,KAAKtF,KAAKE,MAAMqhB,2BAGlBvhB,KAAKD,cAAcspC,YAAYrpC,KAAKE,MAAM+a,QAAQ,EAAE,SAAS7G,UAA9Ek1B,SAEAhlC,EAAY,GACdilC,EAAgB,GACdC,EAAe,GACjBC,EAAmB,KACnBzI,EAAehhC,KAAKD,cAAckR,MAAM,GACtCuc,EAAoBxtB,KAAKD,cAAc0kB,gBAAgB,CAAC,QAAQ,iBAElE6kB,GAAYA,EAASphC,QAEvBohC,EAASvgC,QAAQ,SAAC6Q,EAAGoI,GAMnB,GAJKwnB,EAAa5vB,EAAGkC,QACnB0tB,EAAa5vB,EAAGkC,MAAQ,KAGtB0tB,EAAa5vB,EAAGkC,MAAMzH,SAASuF,EAAG9N,QAAtC,CAIA29B,EAAmBA,EAAmBhgC,KAAK8nB,IAAIkY,EAAiB/kC,SAASkV,EAAG8vB,YAAchlC,SAASkV,EAAG8vB,WAEtG,IAAMC,EAAcrsB,EAAKvd,cAAckR,MAAM2I,EAAG+vB,aAEhD,OAAQ/vB,EAAG9N,QACT,IAAK,UACL,IAAK,aACL,IAAK,iBACL,IAAK,kBACHk1B,EAAeA,EAAajgC,KAAK4oC,GACnC,MACA,IAAK,WACL,IAAK,cACL,IAAK,kBACL,IAAK,mBACH3I,EAAeA,EAAaz3B,MAAMogC,GAOlC3I,EAAansB,GAAG,KAClBmsB,EAAe1jB,EAAKvd,cAAckR,MAAM,IAG1C,IAAMnF,EAAS8N,EAAG9N,OACZggB,EAAUkV,EACV0I,EAAYhlC,SAASkV,EAAG8vB,WACxB3a,EAAkBzR,EAAKvd,cAAcmJ,iBAAiB0Q,EAAGmV,gBAAgBvB,EAAkB7rB,UAI5FotB,EAAgB1Z,SAAY0Z,EAAgB1Z,UAC/Ck0B,EAAcr/B,KAAK,CACjB4B,SACAggB,UACA4d,YACAC,cACA5a,oBAGFya,EAAa5vB,EAAGkC,MAAM5R,KAAK4B,OAM7B0Q,EAAY,KACVotB,EAAc5pC,KAAKD,cAAcyP,YAAY,IAAI8G,WAE/CtW,KAAKE,MAAMkpC,0BACZ,iBAGA,kBAGA,mBAGA,2CARH5sB,EAAYotB,EAAY5sB,QAAQC,SAAS,EAAE,4CAG3CT,EAAYotB,EAAY5sB,QAAQC,SAAS,EAAE,6CAG3CT,EAAYotB,EAAY5sB,QAAQC,SAAS,EAAE,6CAG3CT,EAAYotB,EAAY5sB,QAAQC,SAAS,EAAE,6CAG3CT,EAAY,yCAIV5G,EAAO,GACTi0B,EAAe,GACfC,EAAgB,KAChBC,EAAgB,KAChBnkC,EAAgB,KACdokC,EAAyB,GACzBC,EAAwB,GAC1BC,EAAoBlqC,KAAKD,cAAckR,MAAM,GAE3Ck5B,EAAgBzlC,UAAS,IAAI4R,MAAO3N,UAAU,KAAM,gBAEjC3I,KAAKD,cAAc0hB,gBAAgB/d,OAAOkG,OAAO5J,KAAKE,MAAMqhB,iBAAiB,GAAGxQ,SAAQ,EAAM04B,EAAiB,MAAK,EAAM,cAA7IW,mIAIAC,EAAgB,GAChBC,EAAiB,GACrBZ,EAAYjgC,KAAK8nB,IAAI4Y,EAAcT,GAC/Ba,EAAajtB,EAAKvd,cAAcyP,YAAsB,IAAVk6B,GAG1Cc,EAAoBJ,EAAWvgC,OAAO,SAAA+P,GAAE,OAAKA,EAAGvT,WAAWyjC,GAAiBlwB,EAAGvT,WAAWqjC,KAG5Fe,EAAmBlB,EAAc1/B,OAAO,SAAA+P,GAAE,OAAKA,EAAG8vB,WAAWA,KAAeI,GAAiBlwB,EAAG8vB,UAAUI,MAExF5hC,4BAChB2hC,sBACFY,EAAmBZ,EACba,EAAiBhnC,OAAOkG,OAAO6gC,GAAkB/oB,MACjDra,EAAiBpF,WAAWyoC,EAAe5e,SAE3C6e,EAAgBjnC,OAAOkG,OAAO4gC,GAAmB9oB,MACnDqN,EAAkB,MAClB4b,oCACsBrtB,EAAKvd,cAAc+uB,mBAAmB6b,EAAc30B,qBAA5E+Y,iBAIE1nB,EAAe,GAAKqiC,EAAUD,GAAoB1a,IAEpD2b,EAAe3b,gBAAkBA,EACjC0b,EAAmB,CAACC,4BAGtBD,EAAmB,CAAC,CAClB3e,QAAQxO,EAAKvd,cAAckR,MAAM,GACjC8d,gBAAgBzR,EAAKvd,cAAckR,MAAM,aAKzC25B,EAASlnC,OAAOC,OAAO,GAAG8mC,GAAkB/oB,MAC9CmpB,EAAgBvtB,EAAKvd,cAAckR,MAAM25B,EAAO9e,SAAS9qB,MAAM4pC,EAAO7b,iBAE1Eub,EAAe9c,EAAkBzS,OAASuC,EAAKvd,cAAckR,MAAM25B,EAAO9e,SAC1Eoe,EAAoBW,EAEpBR,EAAgBI,GAIE,OAAdjuB,GAAsB+tB,EAAWtqB,cAAczD,MAE7C+tB,EAAWl0B,QAAQ,IAAIC,KAAO,SAChCi0B,EAAajtB,EAAKvd,cAAcyP,YAAY,IAAI8G,OAI5Cw0B,EAAgBP,EAAW3hC,OAAO,oBAGxCgN,EAAK20B,EAAW3hC,OAAO,eAAiB,EAElCmiC,EAA0B9oC,WAAWA,WAAWioC,EAAkBvlC,QAAQ,KAEhFqlC,EAAuBc,GAAiBC,EACxCd,EAAsBa,GAAiBR,EAIvCP,EAAkC,OAAlBA,EAAyBgB,EAA0BthC,KAAK8nB,IAAIwY,EAAcgB,GAC1FnlC,EAAkC,OAAlBA,EAAyBmlC,EAA0BthC,KAAKC,IAAI9D,EAAcmlC,IAG5FjB,EAAgBJ,EAChBG,EAAeQ,oDAzERX,EAAUD,eAAiBC,GAAWS,6CAAtCT,oBAAoDA,GAAW1pC,KAAKE,MAAMqsB,yCAiInF,IArDMye,EAAqBtnC,OAAO4B,KAAK0kC,GAAwB75B,IAAI,SAAA7J,GAAI,MAAK,CAC1EgK,EAAEhK,EACFiK,EAAEy5B,EAAuB1jC,GACzB2kC,SAAShB,EAAsB3jC,MAG7Bb,EAAY,EAChBulC,EAAmBjiC,QAAS,SAACsI,EAAK2Q,GAChC,IAAM/L,EAAUxM,KAAKyM,MAAMzQ,EAAUulC,EAAmB9iC,OAAO,KAC/D8iC,EAAmBhpB,GAAO/L,QAAUA,EACpCxQ,MAyBFnB,EAAU4F,KAAK,CACbwF,GAAG,MACH/M,MAAO,OAAQ3C,KAAKD,cAAc0kB,gBAAgB,CAAC,QAAQ,SAAS,MAAM,QAAQ,QAAQvU,KAAK,KAAK,IACpGZ,KAAK07B,IAGHE,EAAkB,EAClBtlC,EAAcmkC,EAAc,IAC9BmB,EAAkB,GAGhBtlC,IAAkBmkC,IACpBA,EAAgBtgC,KAAKC,IAAI,EAAE9D,EAAc,IAGtB,EACfJ,GAAaI,EAAcmkC,GADZ,EAEfpkC,EAAc,GACXc,EAAE,EAAEA,GAHQ,EAGQA,IACrBq/B,EAAa7jC,WAAWA,WAAW8nC,EAAetjC,EAAEjB,GAAYb,QAAQ,IAC9EgB,EAAYuE,KAAK47B,GAGS,GACtBpgC,EAAYhC,OAAOkG,OAAOgM,GAAM1N,OAChCpC,EAAgB2D,KAAKC,IAAI,EAAED,KAAKU,KAAKzE,EAFf,KAItBtB,EAAa,CACjBuN,OAAO,CACLC,KAAM,OACNhJ,OAAQ,kBAEVmJ,OAAO,CACLH,KAAM,SACNI,SAAS,EACTuf,IAAKwY,EACLrgC,IAAK9D,GAEPiM,QAAQ,gBACRC,QAAQ,SAAArN,GAAK,OAAI6Y,EAAKvd,cAAcsC,YAAYoC,EAAMymC,IACtDxgC,WAAY1K,KAAKE,MAAMkD,SAAW,KAAO,CACvCwH,OAAQ,GACRD,SAAS,EACT/B,OAAQ,QACRiC,YAAa,GACbC,OAAQ,SACRC,aAAc,GACdE,eAAgB,SAChBD,WAAW,SAASlF,EAAc,SAEpCH,cACA8G,UAAU,EACVC,SAAQ,EACRxB,SAAUlL,KAAKE,MAAMkD,SAAW,KAAO,CACrCwH,OAAQ,GACRD,SAAU,EACVG,OAAQ,OACRD,YAAa,GACbO,aAAc,EACdL,cAAe,GACfC,WAAWrF,EACXsF,eAAgB,SAChBrC,OAAQ,SAAAkB,GAAC,OAAIwT,EAAKvd,cAAcsL,iBAAiBvB,EAAE,KAErD6C,SAAQ,EACRC,WAAW,IACXu+B,YAAY,GACZr+B,YAAW,EACXC,aAAa,IACbE,aAAY,EACZJ,MAAM,YACNG,aAAY,EACZE,iBAAiB,EACjBtB,OAAO,SAAAnB,GAAC,OAAIA,EAAE9H,OACdwK,mBAAmB,GACnBi+B,kBAAkBrB,EAClBj7B,WAAW,CAAEC,KAAM,QAASC,UAAW,IACvClM,MAAM,CACJyI,KAAM,CACJ4C,MAAO,CACLC,KAAM,CACJ/K,SAAS,GACTJ,WAAW,IACX0I,KAAK7I,KAAM8I,OAAOhB,OAClB/H,WAAYC,KAAMC,MAAMsL,aAI9BC,KAAM,CACJC,KAAM,CACJrC,OAAQ,UAAWC,gBAAiB,SAa1C8C,OAAQjP,KAAKE,MAAMkD,SAAW,CAAE8L,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAAO,CAAEH,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IACrH4C,aAAa,SAACC,GAAc,IAEpBzC,EADYyC,EAAVC,MACYC,OAAO,GAC3B,OACEvC,EAAAxO,EAAAC,cAAC+pC,GAAA,EAAD,CACE57B,MAAOA,GAEPI,EAAAxO,EAAAC,cAACgqC,GAAA,EAAD,CACE3oC,MAAO8M,EAAM9M,MACb6H,MAAOiF,EAAM4C,QACb5N,MAAK,KAAAqO,OAAOrD,EAAMH,KAAKiD,cAGM,kBAAxB9C,EAAMH,KAAK27B,UAAyBvnC,OAAO4B,KAAKmK,EAAMH,KAAK27B,UAAU/iC,OAAO,GACjFxE,OAAO4B,KAAKmK,EAAMH,KAAK27B,UAAU96B,IAAI,SAAA4K,GACnC,GAAIA,IAAUtL,EAAM4C,QAClB,OAAO,KAET,IAAMk5B,EAAYjuB,EAAKvd,cAAc0kB,gBAAgB,CAAC,QAAQ,SAAS1J,IACvE,GAAIwwB,EAAU,CACZ,IAAMze,EAAYye,EAAU95B,KAAO85B,EAAU95B,KAAOsJ,EAC9CpY,EAAQ4oC,EAAU5oC,MAAM6oC,IACxB1f,EAAUrc,EAAMH,KAAK27B,SAASlwB,GAChC0wB,EAAmBnuB,EAAKvd,cAAcsC,YAAYypB,EAAQ,GAC9D,GAAI7pB,WAAW6pB,IAAU,IACvB,OACEjc,EAAAxO,EAAAC,cAACgqC,GAAA,EAAD,CACE9gC,MAAOsiB,EACPnqB,MAAOA,EACPkQ,IAAG,OAAAC,OAASiI,GACZtW,MAAK,GAAAqO,OAAK24B,KAKlB,OAAO,UAQnBzrC,KAAKkB,SAAS,CACZoD,YACAF,mJAKF,OACEyL,EAAAxO,EAAAC,cAACoX,EAAA,EAADhV,OAAAC,OAAA,CACEiO,KAAMrJ,IACNoQ,YAAY,GACR3Y,KAAKJ,MAAMwE,WAHjB,CAIEkL,KAAMtP,KAAKJ,MAAM0E,UACjBsU,SAAU5Y,KAAKE,MAAM0Y,SACrBlF,OAAQ1T,KAAKE,MAAMmsB,YACnBxT,eAAgB7Y,KAAKE,MAAM2Y,yBA3aA3U,aCgdpBwnC,8MA9cb9rC,MAAQ,CACN+rC,QAAQ,KACRphB,iBAAiB,GACjBE,qBAAqB,QAIvB1qB,cAAgB,gFAGVC,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,4JAK9CF,KAAKI,kRAKCJ,KAAKD,cAAc6rC,6CAInB5rC,KAAKD,cAAc8rC,2MAuHFvrC,EAAUC,mEACjCP,KAAKI,kJAIL,OACEyP,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACP6Z,cAAe,UAGbrb,KAAKJ,MAAM2qB,iBAAiBriB,OAAO,GACjC2H,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPwa,GAAI,CAAC,EAAE,GACPD,GAAI,CAAC,EAAE,GACPjY,WAAY,SACZuX,cAAe,CAAC,SAAS,OACzBtX,eAAgB,iBAGd/D,KAAKJ,MAAM2qB,iBAAiBpa,IAAI,SAACrG,EAAErD,GAAH,OAC9BoJ,EAAAxO,EAAAC,cAAC6Z,EAAA,EAADzX,OAAAC,OAAA,GACMmG,EAAEyR,UADR,CAEEF,cAAe,SACfxI,IAAG,mBAAAC,OAAqBrM,KAExBoJ,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACTC,GAAG,CAAC,EAAE,GACNyI,GAAG,CAAC,EAAE,KAGRnM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAGd+F,EAAE5J,MAAM6rB,SAAWjiB,EAAE5J,MAAM6rB,SACzBlc,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE+K,WAAY,EACZjjB,WAAY,CAAC,EAAE,GACfN,MAAO,YACPE,WAAY,UACZQ,SAAU,CAAC,EAAE,SACbmmB,wBAAyB,CAAEC,OAAQ3f,EAAE5J,MAAMuE,SAKjDoL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJ9Y,WAAY,EACZI,SAAU,CAAC,EAAE,GACbV,MAAO,YAENmH,EAAE5J,MAAMyd,aAS3B9N,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACTE,GAAG,EACHD,GAAG,IAGL1D,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPka,GAAI,CAAC,EAAE,GACPhM,GAAI,kBAEJG,EAAAxO,EAAAC,cAACwqC,GAADpoC,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEEmsB,YAAa,IACbzT,SAAU,iBACV2T,iBAAkBvsB,KAAKD,cAAcysB,oBAAoB,MAAM,OAGnE3c,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACP6Z,cAAe,CAAC,SAAS,QAEzBxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPxa,MAAO,CAAC,EAAE,IACVsC,WAAY,SACZuX,cAAe,SACftX,eAAgB,cAEhB8L,EAAAxO,EAAAC,cAACsmB,EAAA,EAAD,CACE5L,GAAI,EACJ3Y,SAAU,CAAC,EAAE,GACbopB,UAAWC,IAAQC,IAHrB,aAOA9c,EAAAxO,EAAAC,cAAC0qB,EAAA,EAADtoB,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEE6a,MAAO/a,KAAKE,MAAM2E,cAClBonB,UAAW,CACTxa,KAAK,kBACLvR,MAAM,CACJyB,SAAS,EACTirB,aAAa,EACb3pB,WAAW,IACXI,SAAS,CAAC,QAAQ,SAClBV,MAAMG,KAAM8I,OAAO5I,QACnBuY,UAAU,CACRxX,eAAe,gBAMzB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPxa,MAAO,CAAC,EAAE,IACVsC,WAAY,SACZuX,cAAe,SACftX,eAAgB,cAEhB8L,EAAAxO,EAAAC,cAACsmB,EAAA,EAAD,CACE5L,GAAI,EACJ3Y,SAAU,CAAC,EAAE,GACbopB,UAAWC,IAAQC,IAHrB,cAOA9c,EAAAxO,EAAAC,cAAC0qB,EAAA,EAADtoB,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEE6a,MAAO/a,KAAKE,MAAM2E,cAClBonB,UAAW,CACTxa,KAAK,gCACLvR,MAAM,CACJyB,SAAS,EACTirB,aAAa,EACbpqB,MAAM,CACJS,WAAW,IACXN,MAAMG,KAAM8I,OAAO5I,QACnBK,SAAUrD,KAAKE,MAAMkD,SAAW,QAAU,SAE5CmY,UAAU,CACRxX,eAAe,eAKvB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPua,GAAI,QAEJlM,EAAAxO,EAAAC,cAAC0qB,EAAA,EAADtoB,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEE6a,MAAO/a,KAAKE,MAAM2E,cAClBonB,UAAW,CACTxa,KAAK,oBACLvR,MAAM,CACJmD,SAAS,EACTJ,WAAW,EACXN,MAAM,WACN4Y,UAAU,CACRxX,eAAe,iBAO3B8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPxa,MAAO,CAAC,EAAE,IACVsC,WAAY,SACZuX,cAAe,SACftX,eAAgB,cAEhB8L,EAAAxO,EAAAC,cAACsmB,EAAA,EAAD,CACE5L,GAAI,EACJ3Y,SAAU,CAAC,EAAE,GACbopB,UAAWC,IAAQC,IAHrB,YAOA9c,EAAAxO,EAAAC,cAAC0qB,EAAA,EAADtoB,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEE6a,MAAO/a,KAAKE,MAAM2E,cAClBonB,UAAW,CACTxa,KAAK,uBACLvR,MAAM,CACJyB,SAAS,EACTirB,aAAa,EACbpqB,MAAM,CACJS,WAAW,IACXI,SAASrD,KAAKE,MAAMkD,SAAW,QAAU,QACzCT,MAAMG,KAAM8I,OAAO5I,SAErBuY,UAAU,CACRxX,eAAe,gBA4CzB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPxa,MAAO,CAAC,EAAE,IACVsC,WAAY,SACZuX,cAAe,SACftX,eAAgB,cAEhB8L,EAAAxO,EAAAC,cAACsmB,EAAA,EAAD,CACE5L,GAAI,EACJ3Y,SAAU,CAAC,EAAE,GACbopB,UAAWC,IAAQC,IAHrB,eAOA9c,EAAAxO,EAAAC,cAAC0qB,EAAA,EAADtoB,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEE6a,MAAO/a,KAAKE,MAAM2E,cAClBonB,UAAW,CACTxa,KAAK,WACLvR,MAAM,CACJyB,SAAS,EACTsB,WAAW,IACXI,SAAS,CAAC,QAAQ,SAClBV,MAAMG,KAAM8I,OAAO5I,QACnBuY,UAAU,CACRxX,eAAe,gBAMzB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPxa,MAAO,CAAC,EAAE,IACVsC,WAAY,SACZuX,cAAe,SACftX,eAAgB,cAEhB8L,EAAAxO,EAAAC,cAACsmB,EAAA,EAAD,CACE5L,GAAI,EACJ3Y,SAAU,CAAC,EAAE,GACbopB,UAAWC,IAAQC,IAHrB,gBAOA9c,EAAAxO,EAAAC,cAAC0qB,EAAA,EAADtoB,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEE6a,MAAO/a,KAAKE,MAAM2E,cAClBonB,UAAW,CACTxa,KAAK,mBACLvR,MAAM,CACJyB,SAAS,EACTsB,WAAW,IACXI,SAAS,CAAC,QAAQ,SAClBV,MAAMG,KAAM8I,OAAO5I,QACnBuY,UAAU,CACRxX,eAAe,0BAncJG,aCyoClBkiC,8MAloCbxmC,MAAQ,CACNqtB,WAAW,GACXjU,WAAW,GACXqtB,UAAU,KACVtU,UAAU,KACVC,WAAW,KACXlmB,OAAO,UACPomB,YAAY,KACZnqB,YAAY,KACZqwB,aAAa,KACb9F,cAAc,KACdztB,cAAc,KACd0c,gBAAgB,GAChBwqB,cAAc,KACdC,eAAe,KACf5e,gBAAe,EACf2B,gBAAgB,KAChBkZ,gBAAgB,KAChBjS,iBAAiB,KACjBvH,iBAAiB,KACjBgS,iBAAiB,KACjBwL,iBAAiB,KACjB1e,iBAAiB,KACjBI,mBAAmB,GACnBuS,kBAAkB,KAClB9M,kBAAiB,EACjB5F,kBAAkB,KAClBC,kBAAkB,KAClBC,kBAAkB,KAClBsB,kBAAkB,KAClBpB,oBAAoB,GACpBse,qBAAqB,GACrBlI,oBAAoB,KACpBnW,qBAAoB,EACpBoJ,qBAAqB,QAIvBl3B,cAAgB,OAUhBu2B,WAAa,WACX1xB,EAAK1D,SAAS,CACZgxB,YAAa,UAIjBqE,eAAiB,SAAArE,GACfttB,EAAK1D,SAAS,CACZgxB,mBAIJnE,oBAAsB,SAACF,GACrBjpB,EAAK1D,SAAS,CACZ2sB,2BAIJse,gBAAkB,SAACtnC,GACjB,IAAM4qB,EAAc7qB,EAAK7E,cAAc0kB,gBAAgB,CAAC,UACxD7f,EAAK1E,MAAMolB,YAAX,GAAAxS,OAA0B2c,EAAYlM,OAAOgG,MAA7C,KAAAzW,OAAsDjO,OAQxDunC,uDAAmB,SAAA10B,EAAO7S,GAAP,IAAA0c,EAAA2qB,EAAA3e,EAAAxlB,EAAA,OAAAL,EAAArG,EAAAsG,KAAA,SAAAmQ,GAAA,cAAAA,EAAAjQ,KAAAiQ,EAAAhQ,MAAA,OACXyZ,EAAkB3c,EAAK7E,cAAc+vB,0BACrCoc,EAAuBtnC,EAAK7E,cAAc0kB,gBAAgB,CAAC,QAAQ,oBACnE8I,EAAmB2e,EAAqBrnC,GACxCkD,EAAcwZ,EAAgBgM,EAAiB8e,WACrDznC,EAAK1D,SAAS,CACZ6G,cACAlD,gBACA0c,kBACAgM,qBATe,wBAAAzV,EAAAE,SAAAN,EAAA1X,iEAanB8mC,oCAAiB,SAAAzvB,IAAA,IAAA60B,EAAArnC,EAAAqW,EAAAqG,EAAAgM,EAAAxlB,EAAAqL,EAAAW,EAAAk4B,EAAAze,EAAAC,EAAAwJ,EAAAjjB,EAAAkD,EAAA,OAAAxP,EAAArG,EAAAsG,KAAA,SAAA6P,GAAA,cAAAA,EAAA3P,KAAA2P,EAAA1P,MAAA,UAETokC,EAAuBtnC,EAAK7E,cAAc0kB,gBAAgB,CAAC,QAAQ,oBACzE7f,EAAK1D,SAAS,CACZgrC,2BAGIrnC,EAAgBD,EAAK0nC,qBAENznC,IAAkBD,EAAK1E,MAAMqsC,UAAUC,OAT7C,CAAAh1B,EAAA1P,KAAA,gBAUblD,EAAKunC,gBAAgBtnC,GAVR2S,EAAA1P,KAAA,EAWAlD,EAAKwnC,iBAAiBvnC,GAXtB,cAAA2S,EAAAvP,OAAA,SAAAuP,EAAA+B,MAAA,WAYJ1U,IAAkBD,EAAKhF,MAAMiF,cAZzB,CAAA2S,EAAA1P,KAAA,gBAAA0P,EAAA1P,KAAA,GAaPlD,EAAKwnC,iBAAiBvnC,GAbf,eAgBTqW,EAhBSxX,OAAA8Q,EAAA,EAAA9Q,CAAA,GAgBMkB,EAAKhF,OAEpB2hB,EAAkB3c,EAAK7E,cAAc+vB,0BAEvC5U,EAASrW,gBAAkBA,IAC7BqW,EAASrW,cAAgBA,GAGrB0oB,EAAmB2e,EAAqBrnC,GACxCkD,EAAcwZ,EAAgBgM,EAAiB8e,WAzBtC70B,EAAA1P,KAAA,GAgCLqjB,QAAQC,IAAI,CACpBxmB,EAAK7E,cAAc0sC,sBACnB7nC,EAAK7E,cAAc2vB,uBACnB9qB,EAAK7E,cAAc4vB,uBACnB/qB,EAAK7E,cAAcm4B,4BApCN,WAAA9kB,EAAAoE,EAAA+B,KAAAxF,EAAArQ,OAAAuyB,EAAA,EAAAvyB,CAAA0P,EAAA,GA4Bb64B,EA5Bal4B,EAAA,GA6BbyZ,EA7BazZ,EAAA,GA8Bb0Z,EA9Ba1Z,EAAA,GA+BbkjB,EA/BaljB,EAAA,GAuCfmH,EAAS+wB,iBAAmBA,EAC5B/wB,EAASsS,kBAAoBA,EAC7BtS,EAASuS,kBAAoBA,EAC7BvS,EAAS+b,qBAAuBA,EAEhC/b,EAASqG,gBAAkBA,EAIK,GACR1c,GAAiBkD,EAEzCmT,EAASnT,YAAcA,EACvBmT,EAASqS,iBAAmBA,GAExB3oB,EAAK1E,MAAM+a,QAtDA,CAAAzD,EAAA1P,KAAA,gBAAA0P,EAAA1P,KAAA,GA+DHqjB,QAAQC,IAAI,CACpBxmB,EAAK7E,cAAc+uB,qBACnBlqB,EAAK7E,cAAc6vB,uBACnBhrB,EAAK7E,cAAc0mC,aAAa1+B,GAChCnD,EAAK7E,cAAc6mC,iBAAiB7+B,EAAYnD,EAAK1E,MAAM+a,SAC3DrW,EAAK7E,cAAc4mC,gBAAgB9hC,EAAcD,EAAK1E,MAAM+a,SAC5DrW,EAAK7E,cAAc4mC,gBAAgB5+B,EAAYiN,KAAK+F,MAAMnW,EAAK1E,MAAM+a,SACrErW,EAAK7E,cAAcq3B,mBAAmBvyB,EAAcoyB,EAAqBlmB,QAAQnM,EAAK1E,MAAM+a,WAtEjF,QAAAjH,EAAAwD,EAAA+B,KAAArC,EAAAxT,OAAAuyB,EAAA,EAAAvyB,CAAAsQ,EAAA,GAwDXkH,EAAS6T,gBAxDE7X,EAAA,GAyDXgE,EAASwS,kBAzDExW,EAAA,GA0DXgE,EAAS8oB,oBA1DE9sB,EAAA,GA2DXgE,EAASmrB,UA3DEnvB,EAAA,GA4DXgE,EAASkd,aA5DElhB,EAAA,GA6DXgE,EAAS8a,iBA7DE9e,EAAA,GA8DXgE,EAASoX,cA9DEpb,EAAA,GA0EbgE,EAASlC,WAAa,CACpB5M,OAAO,CACL8M,OAAO,KACPH,SAAQ,GAEVhN,QAAQ,CACNmN,OAAO,KACPH,SAAQ,GAEV2e,QAAQ,CACNxe,OAAO,KACPH,SAAQ,IAGZmC,EAAS+R,WAAa,CACpB7gB,OAAO,KACPL,QAAQ,MAEVmP,EAAS0S,oBAAsB,CAC7BxhB,OAAO,KACPL,QAAQ,MAGVmP,EAASkY,kBAAmB,EAC5BlY,EAAS8wB,eAAiB9wB,EAASkd,aACnCld,EAAS6wB,cAAgB7wB,EAAS8T,kBAClC9T,EAASglB,kBAAoBn4B,EAAYm4B,kBACzChlB,EAAS6W,UAAY7W,EAASwS,mBAAqBxS,EAASwS,kBAAkB3Y,GAAG,GACjFmG,EAAS8W,WAAa9W,EAAS8a,kBAAoB9a,EAAS8a,iBAAiBjhB,GAAG,GAChFmG,EAAS8T,kBAAoB9T,EAASwS,kBAAoBxS,EAASwS,kBAAkB1sB,MAAMka,EAAS6T,iBAAmBnqB,EAAK7E,cAAckR,MAAM,GAvGnI,QA0GfrM,EAAK1D,SAASga,GA1GC,yBAAA1D,EAAAQ,SAAAX,EAAArX,WAwKjB0sC,yCAAsB,SAAA3nC,IAAA,IAAAmW,EAAAnT,EAAA,OAAAL,EAAArG,EAAAsG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACdoT,EAAW,GADGtT,EAAAY,GAEZ5D,EAAKhF,MAAMkM,OAFClE,EAAAE,KAGb,YAHaF,EAAAY,GAAA,EAMb,WANaZ,EAAAY,GAAA,yBAIhB5D,EAAKkiC,iBAJWl/B,EAAAK,OAAA,0BAQVF,EAAcnD,EAAK7E,cAAc0kB,gBAAgB,CAAC,QAAQ,iBAChEvJ,EAASgxB,qBAAuB,GAChChxB,EAASqS,iBAAmBxlB,EAC5BmT,EAASrW,cAAgBkD,EAAYgT,MACrCG,EAASgxB,qBAAqBnkC,EAAYgT,OAAShT,EAZnCH,EAAAK,OAAA,2BAAAL,EAAAK,OAAA,oBAkBpBrD,EAAK1D,SAASga,GAlBM,yBAAAtT,EAAAoQ,SAAAjT,EAAA/E,WAqBtBw6B,uBAAyB,WACvB,OAA0D,OAAtD51B,EAAKhF,MAAMguB,oBAAoBhpB,EAAKhF,MAAMkM,SAGvClH,EAAK7E,cAAckR,MAAMrM,EAAKhF,MAAMguB,oBAAoBhpB,EAAKhF,MAAMkM,SAAS7K,IAAI,QAGzFktB,uBAAyB,SAACgD,GACxB,IAAKvsB,EAAKhF,MAAMkM,OACd,OAAO,EAETlH,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5BqtB,oBAAoBlqB,OAAA8Q,EAAA,EAAA9Q,CAAA,GACfnD,EAAUqtB,oBADIlqB,OAAAi1B,GAAA,EAAAj1B,CAAA,GAEhBkB,EAAKhF,MAAMkM,OAASqlB,UAK3BjC,cAAgB,WACd,IAAKtqB,EAAKhF,MAAMkM,QAAgE,OAAtDlH,EAAKhF,MAAMguB,oBAAoBhpB,EAAKhF,MAAMkM,QAClE,OAAO,EAGT,IAAM0jB,EAAqB5qB,EAAK7E,cAAckR,MAAMrM,EAAKhF,MAAMguB,oBAAoBhpB,EAAKhF,MAAMkM,SAAS7K,IAAI,KACvGgtB,EAAS,KAEb,OAAOrpB,EAAKhF,MAAMkM,QAChB,IAAK,UACHmiB,EAASrpB,EAAKhF,MAAMw4B,aAAexzB,EAAK7E,cAAckR,MAAMrM,EAAKhF,MAAMw4B,cAAcp3B,MAAMwuB,GAAsB,KACnH,MACA,IAAK,SAEDvB,EADErpB,EAAKhF,MAAMiuB,oBACJjpB,EAAKhF,MAAM8tB,kBAAoB9oB,EAAK7E,cAAckR,MAAMrM,EAAKhF,MAAM8tB,mBAAmB1sB,MAAMwuB,GAAsB,KAElH5qB,EAAKhF,MAAMovB,kBAAoBpqB,EAAK7E,cAAckR,MAAMrM,EAAKhF,MAAMovB,mBAAmBhuB,MAAMwuB,GAAsB,KAOjI5qB,EAAKopB,oBAAoBC,GAEzBrpB,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5B0sB,WAAWvpB,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAU0sB,WADLvpB,OAAAi1B,GAAA,EAAAj1B,CAAA,GAEPkB,EAAKhF,MAAMkM,OAASmiB,UAK3BC,iBAAmB,SAAC1U,GAClB,IAAK5U,EAAKhF,MAAMkM,OACd,OAAO,EAGT,IAAMmiB,EAASzU,EAAEsD,OAAOrY,MAAMyD,SAAWmN,MAAMmE,EAAEsD,OAAOrY,OAASG,EAAK7E,cAAckR,MAAMuI,EAAEsD,OAAOrY,OAASG,EAAK7E,cAAckR,MAAM,GACrIrM,EAAKopB,oBAAoBC,GAEzBrpB,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5BqtB,oBAAoBlqB,OAAA8Q,EAAA,EAAA9Q,CAAA,GACfnD,EAAUqtB,oBADIlqB,OAAAi1B,GAAA,EAAAj1B,CAAA,GAEhBkB,EAAKhF,MAAMkM,OAAS,OAEvBmhB,WAAWvpB,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAU0sB,WADLvpB,OAAAi1B,GAAA,EAAAj1B,CAAA,GAEPkB,EAAKhF,MAAMkM,OAASmiB,UAK3BD,oBAAsB,WAAiB,IAAhBC,EAAgB9V,UAAAjQ,OAAA,QAAAwJ,IAAAyG,UAAA,GAAAA,UAAA,GAAT,KAE5B,IAAKvT,EAAKhF,MAAMkM,OACd,OAAO,EAGJmiB,IACHA,EAASrpB,EAAKhF,MAAMqtB,WAAWroB,EAAKhF,MAAMkM,SAG5C,IAAIshB,GAAiB,EAErB,OAAQxoB,EAAKhF,MAAMkM,QACjB,IAAK,UACHshB,EAAiBA,GAAmBa,GAAUA,EAAOlZ,GAAGnQ,EAAKhF,MAAMw4B,cACrE,MACA,IAAK,SAEDhL,EADExoB,EAAKhF,MAAMiuB,qBACKjpB,EAAKhF,MAAMmyB,WAAc3E,GAAmBa,GAAUA,EAAOlZ,GAAGnQ,EAAKhF,MAAM8tB,oBAE3E9oB,EAAKhF,MAAMmyB,WAAc3E,GAAmBa,GAAUA,EAAOlZ,GAAGnQ,EAAKhF,MAAMovB,mBAOnGpqB,EAAK1D,SAAS,CACZksB,sBAIJyD,uCAAoB,SAAAiG,IAAA,OAAApvB,EAAArG,EAAAsG,KAAA,SAAAuvB,GAAA,cAAAA,EAAArvB,KAAAqvB,EAAApvB,MAAA,OAClBlD,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5ByY,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADLtV,OAAAi1B,GAAA,EAAAj1B,CAAA,CAERg0B,QAAQ,CACNxe,OAAO,KACPH,SAAQ,IAETnU,EAAKhF,MAAMkM,OAAQ,CAClBoN,OAAO,KACPH,SAAQ,QAVI,wBAAAme,EAAAlf,SAAA8e,EAAA92B,WAgBpBu3B,kCAAe,SAAAF,IAAA,IAAA/E,EAAAyE,EAAAC,EAAA,OAAAtvB,EAAArG,EAAAsG,KAAA,SAAA2vB,GAAA,cAAAA,EAAAzvB,KAAAyvB,EAAAxvB,MAAA,YAGPwqB,EAAgB1tB,EAAKhF,MAAM0yB,eAHpB,CAAAgF,EAAAxvB,KAAA,eAAAwvB,EAAArvB,OAAA,SAMJrD,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CACnC+xB,gBACAtZ,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADL,CAER0e,QAAQ,CACNxe,OAAO,KACPH,SAAQ,SAZH,OAkBPge,EAAkB,SAACnd,EAAGC,GAE1B,IAAMC,EAAY,CAChBG,cAAe,UACfC,YAAatV,EAAKhF,MAAMiF,cACxBkV,WAAYH,EAAGI,QAGbH,IACFC,EAAUC,WAAanV,EAAK7E,cAAcoa,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUE,SACrBpV,EAAK7E,cAAcqa,yBAAyBN,GAG9ClV,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5B+xB,cAA8B,YAAd1Y,EAAGI,OACnBhB,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADL,CAER0e,QAAQ,CACNxe,OAAO,KACPH,SAAQ,SAMVie,EAAyB,SAACpd,GAC9B,IAAMV,EAASU,EAAGiB,gBAClBjW,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5ByY,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADL,CAER0e,QAAQh0B,OAAA8Q,EAAA,EAAA9Q,CAAA,GACHnD,EAAUyY,WAAV,QADE,CAELE,iBAMRtU,EAAK7E,cAAco3B,YAAYvyB,EAAKhF,MAAMiF,cAAcD,EAAKhF,MAAMq3B,qBAAqBlmB,QAAQgmB,EAAgBC,GAEhHpyB,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5ByY,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADL,CAER0e,QAAQ,CACNxe,OAAO,KACPH,SAAQ,QAnED,wBAAAue,EAAAtf,SAAAqf,EAAAr3B,WAyEf44B,mCAAgB,SAAApB,IAAA,IAAAsB,EAAA7L,EAAAuC,EAAAzW,EAAAmgB,EAAAH,EAAAC,EAAAG,EAAAC,EAAAC,EAAAsT,EAAA5d,EAAAgB,EAAAG,EAAAC,EAAAC,EAAAxH,EAAA,OAAAlhB,EAAArG,EAAAsG,KAAA,SAAA8vB,GAAA,cAAAA,EAAA5vB,KAAA4vB,EAAA3vB,MAAA,OAEVgxB,EAAqB,KACnB7L,EAAaroB,EAAKhF,MAAMqtB,WAAWroB,EAAKhF,MAAMkM,QAC9C0jB,EAAqB5qB,EAAK41B,yBAE5BzhB,GAAU,EANA0e,EAAAjvB,GAQN5D,EAAKhF,MAAMkM,OARL2rB,EAAA3vB,KAUP,YAVO2vB,EAAAjvB,GAAA,EA4FP,WA5FOivB,EAAAjvB,GAAA,uBAYN5D,EAAKhF,MAAMwtB,gBAAmBH,IAAcroB,EAAK7E,cAAckR,MAAMgc,GAAYvB,IAAI,GAZ/E,CAAA+L,EAAA3vB,KAAA,eAAA2vB,EAAAxvB,OAAA,UAaD,GAbC,cAgBJixB,EAAkBt0B,EAAK7E,cAAcyuB,qBAAqBvB,EAAWroB,EAAKhF,MAAM4tB,kBAAkB7rB,UAElGo3B,EAAkB,SAACnf,EAAGC,IAErBD,GAAMC,IACTD,EAAK,CACHI,OAAO,UAIX,IAAM4X,EAAwB,UAAdhY,EAAGI,OACbgW,EAA4B,YAAdpW,EAAGI,OAEjBF,EAAY,CAChBG,cAAe,UACfC,YAAatV,EAAKhF,MAAMiF,cACxBkV,WAAYH,EAAGI,OACfiW,WAAYvrB,SAASuoB,IAGnBpT,IACFC,EAAUC,WAAanV,EAAK7E,cAAcoa,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUE,SACrBpV,EAAK7E,cAAcqa,yBAAyBN,GAG9ClV,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5ByY,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADLtV,OAAAi1B,GAAA,EAAAj1B,CAAA,GAEPkB,EAAKhF,MAAMkM,OAAQ,CAClBoN,OAAO,KACPH,SAAQ,QAKViX,EACFprB,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5B2xB,YAAY,QACZjF,WAAWvpB,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAU0sB,WADLvpB,OAAAi1B,GAAA,EAAAj1B,CAAA,GAEPkB,EAAKhF,MAAMkM,OAASlH,EAAK7E,cAAckR,MAAM,QAGzCrM,EAAKhF,MAAMo0B,yBAA2BpC,GAC/ChtB,EAAK1D,SAAS,CACZ0wB,QAAQluB,OAAAi1B,GAAA,EAAAj1B,CAAA,GACLkB,EAAKhF,MAAMkM,QAAS,MAMvBktB,EAAyB,SAACpf,GAC9B,IAAMV,EAASU,EAAGiB,gBAClBjW,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5ByY,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADLtV,OAAAi1B,GAAA,EAAAj1B,CAAA,GAEPkB,EAAKhF,MAAMkM,OAFJpI,OAAA8Q,EAAA,EAAA9Q,CAAA,GAGHnD,EAAUyY,WAAWpU,EAAKhF,MAAMkM,QAH7B,CAINoN,iBA/EEue,EAAA3vB,KAAA,GAqFYlD,EAAK7E,cAAc+6B,gBAAgBl2B,EAAKhF,MAAMmI,YAAYiN,KAAK+F,MAAMme,GArFjF,eAqFJC,EArFI1B,EAAAle,KAAAke,EAAA3vB,KAAA,GAsFkBlD,EAAK7E,cAAcy/B,oBAAoB56B,EAAKhF,MAAM6tB,kBAAkBhc,KAAK,oBAAoB,CAAC0nB,GAAQ,IAtFxH,eAsFJC,EAtFI3B,EAAAle,KAuFJ8f,EAAgB,CAACF,EAAQC,GAvFrB3B,EAAA3vB,KAAA,GA0FiBlD,EAAK1E,MAAM4a,0BAA0BlW,EAAKhF,MAAMq3B,qBAAqBxlB,KAAM,gBAAiB4nB,EAAe,KAAMN,EAAiBC,GA1FnJ,eA0FVF,EA1FUrB,EAAAle,KAAAke,EAAAxvB,OAAA,wBA8FNrD,EAAKhF,MAAMwtB,gBAAmBH,IAAcroB,EAAK7E,cAAckR,MAAMgc,GAAYvB,IAAI,GA9F/E,CAAA+L,EAAA3vB,KAAA,gBAAA2vB,EAAAxvB,OAAA,UA+FD,GA/FC,WAkGN0kC,EAAsB,MACtBnd,EAnGM,CAAAiI,EAAA3vB,KAAA,SAoGR6kC,EAAsB/nC,EAAK7E,cAAckR,MAAMrM,EAAKhF,MAAM8tB,mBAAmB1sB,MAAMwuB,GApG3EiI,EAAA3vB,KAAA,oBAsGR6kC,EAAsB/nC,EAAK7E,cAAckR,MAAMrM,EAAK7E,cAAcyuB,qBAAqBvB,EAAWroB,EAAKhF,MAAM4tB,kBAAkB7rB,WAC1HiD,EAAKhF,MAAMiuB,oBAvGR,CAAA4J,EAAA3vB,KAAA,gBAAA2vB,EAAA3vB,KAAA,GAwGwBlD,EAAK7E,cAAc+uB,qBAxG3C,QAwGAC,EAxGA0I,EAAAle,KAyGNozB,EAAsBA,EAAoB1rC,IAAI8tB,GAzGxC,WA6GL4d,EA7GK,CAAAlV,EAAA3vB,KAAA,gBAAA2vB,EAAAxvB,OAAA,UA8GD,GA9GC,eAiHJ8nB,EAAiB,SAACnW,EAAGC,GACzB,IAAMmW,EAA4B,YAAdpW,EAAGI,OAGjBF,EAAY,CAChBC,WAAYH,EAAGI,OACfC,cAAa,cACbC,YAAatV,EAAKhF,MAAMiF,cACxBorB,WAAY0c,EAAoBhoC,WAG9BkV,IACFC,EAAUC,WAAanV,EAAK7E,cAAcoa,oBAAoBN,KAI5DA,GAA8B,UAArBC,EAAUE,SACrBpV,EAAK7E,cAAcqa,yBAAyBN,GAG9ClV,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5ByY,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADLtV,OAAAi1B,GAAA,EAAAj1B,CAAA,GAEPkB,EAAKhF,MAAMkM,OAAQ,CAClBoN,OAAO,KACPH,SAAQ,QAKViX,GACFprB,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5B0sB,WAAWvpB,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAU0sB,WADLvpB,OAAAi1B,GAAA,EAAAj1B,CAAA,GAEPkB,EAAKhF,MAAMkM,OAASlH,EAAK7E,cAAckR,MAAM,SAMhDif,EAAwB,SAACtW,GAC7B,IAAMV,EAASU,EAAGiB,gBAClBjW,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5ByY,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADLtV,OAAAi1B,GAAA,EAAAj1B,CAAA,GAEPkB,EAAKhF,MAAMkM,OAFJpI,OAAA8Q,EAAA,EAAA9Q,CAAA,GAGHnD,EAAUyY,WAAWpU,EAAKhF,MAAMkM,QAH7B,CAINoN,iBAMFiX,EAAUvrB,EAAK7E,cAAcyuB,qBAAqBme,EAAoB/nC,EAAKhF,MAAM4tB,kBAAkB7rB,UAAU6O,WAtKzGinB,EAAA3vB,KAAA,GAuKclD,EAAK7E,cAAc+6B,gBAAgBl2B,EAAKhF,MAAMmI,YAAYiN,KAAK+F,MAAM,GAvKnF,WAuKNqV,EAvKMqH,EAAAle,KAyKJqP,EAAehkB,EAAKhF,MAAMq3B,qBAAqBxlB,MACjD7M,EAAKhF,MAAMiuB,oBA1KL,CAAA4J,EAAA3vB,KAAA,SA2KRuoB,QAAQC,IAAI,6BAA6B1rB,EAAK7E,cAAckR,MAAMgc,GAAYzc,WAAW2f,EAAQ3f,WAAW4f,GAC5GxrB,EAAK1E,MAAM4a,0BAA0B8N,EAAc,6BAA8B,CAACwH,EAAaD,GAAU,KAAMJ,EAAgBG,GA5KvHuH,EAAA3vB,KAAA,wBAAA2vB,EAAA3vB,KAAA,GA8KYlD,EAAK7E,cAAc+6B,gBAAgBl2B,EAAKhF,MAAMmI,YAAYiN,KAAK+F,MAAMoV,GA9KjF,QA8KRC,EA9KQqH,EAAAle,KA+KR8W,QAAQC,IAAI,mBAAmB1rB,EAAK7E,cAAckR,MAAMgc,GAAYzc,WAAW2f,EAAQ3f,WAAW4f,GAClGxrB,EAAK1E,MAAM4a,0BAA0B8N,EAAc,mBAAoB,CAACuH,EAASC,GAAc,KAAML,EAAgBG,GAhL7G,eAAAuH,EAAAxvB,OAAA,2BAoLV8Q,GAAU,EApLA0e,EAAAxvB,OAAA,qBA0La,IAAvB6wB,GACFl0B,EAAK1D,SAAS,SAACX,GAAD,MAAgB,CAC5ByY,WAAWtV,OAAA8Q,EAAA,EAAA9Q,CAAA,GACNnD,EAAUyY,WADLtV,OAAAi1B,GAAA,EAAAj1B,CAAA,GAEPkB,EAAKhF,MAAMkM,OAFJpI,OAAA8Q,EAAA,EAAA9Q,CAAA,GAGHnD,EAAUyY,WAAWpU,EAAKhF,MAAMkM,QAH7B,CAINiN,iBAhMM,yBAAA0e,EAAAzf,SAAAwf,EAAAx3B,WAuMhB29B,UAAY,SAAC7xB,GACX,OAAQA,EAAOgF,eACb,IAAK,UAEL,MACA,IAAK,SACElM,EAAKhF,MAAMmyB,YACdjmB,EAAS,MAEb,MACA,QACEA,EAAS,KAIE,OAAXA,GACFlH,EAAK1D,SAAS,CACZ4K,uFAtoBA9L,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,kDA4B9C,IAAMgsC,EAAuBlsC,KAAKD,cAAc0kB,gBAAgB,CAAC,QAAQ,oBACzE,OAAOzkB,KAAKE,MAAMqsC,UAAUC,QAAUN,EAAqBlsC,KAAKE,MAAMqsC,UAAUC,QAAUxsC,KAAKE,MAAMqsC,UAAUC,OAAS9oC,OAAO4B,KAAK4mC,GAAsB,+JA8H1JlsC,KAAKI,qBACCJ,KAAK8mC,qRAIL7Y,EAASjuB,KAAKJ,MAAMqtB,WAAWjtB,KAAKJ,MAAMkM,QAAU9L,KAAKD,cAAckR,MAAMjR,KAAKJ,MAAMqtB,WAAWjtB,KAAKJ,MAAMkM,SAAW,QAEhHmiB,EAAOvC,IAAI,6CACjB,UAGH6C,EAAmBvuB,KAAKD,cAAcyuB,qBAAqBP,EAAOjuB,KAAKJ,MAAM4tB,kBAAkB7rB,UAC/FuZ,EAAW,QAETlb,KAAKJ,MAAMkM,cACZ,mBAIA,0CAHHoP,EAAS8wB,eAAiB/d,YACOjuB,KAAKD,cAAc8uB,iBAAiB7uB,KAAKJ,MAAMmI,YAAYiN,KAAK+F,MAAMwT,GAAiB,kBAAxHrT,EAAS+sB,2DAGT/sB,EAAS6wB,cAAgB9d,YACSjuB,KAAKD,cAAc8uB,iBAAiB7uB,KAAKJ,MAAMmI,YAAYiN,KAAK+F,MAAMwT,GAAiB,kBAAzHrT,EAASuT,yFAObzuB,KAAKkB,SAASga,yLAGS5a,EAAWC,sFAClCP,KAAKI,YACC4a,EAAiB1a,EAAU2a,UAAYjb,KAAKE,MAAM+a,QAClDzC,EAAelY,EAAUisC,UAAUC,SAAWxsC,KAAKE,MAAMqsC,UAAUC,OACnEvF,EAAsB3mC,EAAUuL,cAAgB7L,KAAKE,MAAM2L,cAAgBnI,OAAOkG,OAAOtJ,EAAUuL,cAAchC,OAAO,SAAA+P,GAAE,MAAiB,YAAZA,EAAGI,SAAqB9R,SAAWxE,OAAOkG,OAAO5J,KAAKE,MAAM2L,cAAchC,OAAO,SAAA+P,GAAE,MAAiB,YAAZA,EAAGI,SAAqB9R,SAEjP8S,GAAkBisB,GAAuBzuB,mCACrCxY,KAAK8mC,wBAGPhI,EAAgB9+B,KAAKJ,MAAMkM,SAAWvL,EAAUuL,OAChDmjB,EAA6BjvB,KAAKJ,MAAMiuB,sBAAwBttB,EAAUstB,oBAC1EkR,EAA6B/+B,KAAKJ,MAAMguB,oBAAoB5tB,KAAKJ,MAAMkM,UAAYvL,EAAUqtB,oBAAoB5tB,KAAKJ,MAAMkM,SAC9HgzB,GAAiBC,GAA8B9P,IACjDjvB,KAAKkvB,gBAGH4P,GACF9+B,KAAK0sC,sBAGcnsC,EAAU0sB,WAAWjtB,KAAKJ,MAAMkM,UAAY9L,KAAKJ,MAAMqtB,WAAWjtB,KAAKJ,MAAMkM,SAEhG9L,KAAKsvB,2JAubD,IAAAnuB,EAAAnB,KAEAumC,EAAevmC,KAAKE,MAAM+a,SAAWjb,KAAKJ,MAAM8tB,mBAAqB1tB,KAAKD,cAAckR,MAAMjR,KAAKJ,MAAM8tB,mBAAmB3Y,GAAG,GAGrI,OACElF,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,GAEPqO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPwa,GAAI,CAAC,EAAE,GACPlY,WAAY,SACZuX,cAAe,MACftX,eAAgB,cAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,IAGLqO,EAAAxO,EAAAC,cAAC8jB,EAAA,EAAD1hB,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEEkD,SAAUpD,KAAKE,MAAMkD,SACrBmiB,KAAM,CAAC,QAAQvlB,KAAKJ,MAAMiF,eAC1BuX,YAAc,SAAA5C,GAAC,OAAIrY,EAAKjB,MAAMolB,YAAY,SAC1ClX,KAAMpO,KAAKD,cAAc0kB,gBAAgB,CAAC,aAAa,OAAO,eAKtE5U,EAAAxO,EAAAC,cAACsmB,EAAA,EAAD,CACE5L,GAAI,CAAC,EAAE,IADT,cAKAnM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,GAEPqO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,CAAC,EAAE,KACVsC,WAAY,UACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,GAEPqO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,GADN,sBAKAnM,EAAAxO,EAAAC,cAACqkB,EAAA,EAADjiB,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEEwP,GAAI,aACJsO,SAAUhe,KAAKmsC,gBACftnC,cAAe7E,KAAKJ,MAAMiF,cAC1BkD,YAAa/H,KAAKJ,MAAM2tB,iBACxBwD,YAAmC,YAAtB/wB,KAAKJ,MAAMkM,OACxByV,gBAAiBvhB,KAAKJ,MAAMssC,yBAGhCr8B,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,GAIHqO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJV,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,GADN,sBAKAnM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZuX,cAAe,MACftX,eAAgB,iBAEhB8L,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACT7C,EAAE,CAAC,EAAE,GACLjP,MAAM,IACN4vB,YAAY,WACVjwB,EAAKw8B,UAAU,aAGnB/X,eAAe,EACf4C,SAAiC,YAAtBxoB,KAAKJ,MAAMkM,QAEtB+D,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEqD,GAAI,EACJ1a,WAAY,SACZuX,cAAe,MACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAACyhC,GAAA,EAAD,CACEC,YAAa,CACXl3B,OAAO,WAETmgB,UAAW,CACTxa,KAAK,OACLvR,MAAM,CACJinB,GAAG,CAAC,EAAE,OAIZtX,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE9X,SAAU,EACVJ,WAAY,GAFd,aAQJ4M,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACT7C,EAAE,CAAC,EAAE,GACLjP,MAAM,IACN4vB,YAAY,WACVjwB,EAAKw8B,UAAU,YAGnB/X,eAAe,EACfqd,YAAcjjC,KAAKJ,MAAMmyB,UACzBvJ,SAAiC,WAAtBxoB,KAAKJ,MAAMkM,QAEtB+D,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEqD,GAAI,EACJ1a,WAAY,SACZuX,cAAe,MACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAACyhC,GAAA,EAAD,CACEC,YAAa,CACXl3B,OAAO,UAETmgB,UAAW,CACTxa,KAAK,OACLvR,MAAM,CACJinB,GAAG,CAAC,EAAE,OAIZtX,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE9X,SAAU,EACVJ,WAAY,GAFd,gBAiChB4M,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPua,GAAK/b,KAAKE,MAAM+a,QAAU,EAAI,GAGR,YAAtBjb,KAAKJ,MAAMkM,OACT+D,EAAAxO,EAAAC,cAACsrC,GAADlpC,OAAAC,OAAA,GACM3D,KAAKE,MACLF,KAAKJ,QAEa,WAAtBI,KAAKJ,MAAMkM,QACb+D,EAAAxO,EAAAC,cAAC8iC,GAAD1gC,OAAAC,OAAA,GACM3D,KAAKE,MACLF,KAAKJ,WAQjB2mC,GACE12B,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPxa,MAAO,EACP6Z,cAAe,SACf3L,GAAI,4BAEJG,EAAAxO,EAAAC,cAACsmB,EAAA,EAAD,CAAOpJ,GAAI,CAAC,EAAE,IAAd,kBACA3O,EAAAxO,EAAAC,cAACurC,GAADnpC,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEEmmC,UAAWrmC,KAAKJ,MAAMymC,UACtBt+B,YAAa/H,KAAKJ,MAAMmI,YACxBlD,cAAe7E,KAAKJ,MAAMiF,cAC1B0c,gBAAiBvhB,KAAKJ,MAAM2hB,gBAC5BnN,cAAe1Q,OAAO4B,KAAKtF,KAAKJ,MAAM2hB,qBAyH9CvhB,KAAKE,MAAM+a,SACTpL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,CAAC,EAAE,GACPxa,MAAO,EACP6Z,cAAe,SACf3L,GAAI,0BAEJG,EAAAxO,EAAAC,cAACsmB,EAAA,EAAD,CAAOpJ,GAAI,CAAC,EAAE,IAAd,gBACA3O,EAAAxO,EAAAC,cAACmmC,GAAA,EAAD/jC,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEEqhB,gBAAiBvhB,KAAKJ,MAAM2hB,gBAC5BnN,cAAe1Q,OAAO4B,KAAKtF,KAAKJ,MAAM2hB,iBACtCurB,eAAgB,CAAC,UAAU,WAAW,aAAa,cAAc,kBAAkB,mBAAmB,iBAAiB,mBACvH/kB,KAAM,CACJ,CACEpK,MAAO3d,KAAKE,MAAMkD,SAAW,GAAK,OAClClD,MAAM,CACJsB,MAAM,CAAC,IAAK,MAEdwmB,OAAO,CACL,CACEvW,KAAK,OACLvR,MAAM,CACJinB,GAAG,CAAC,EAAE,KAGV,CACE1V,KAAK,OACLwW,QAAO,KAIb,CACEtK,MAAM,SACNsK,QAAO,EACP/nB,MAAM,CACJsB,MAAM,KAERwmB,OAAO,CACL,CACEvW,KAAK,YAIX,CACEkM,MAAM,OACNzd,MAAM,CACJsB,MAAM,CAAC,IAAK,MAEdwmB,OAAO,CACL,CACEvW,KAAK,UAIX,CACEkM,MAAM,SACNzd,MAAM,CACJsB,MAAM,CAAC,IAAK,KACZuC,eAAe,CAAC,SAAS,eAE3BikB,OAAO,CACL,CACEvW,KAAK,aACLvR,MAAM,CACJinB,GAAG,CAAC,EAAE,KAGV,CACEc,QAAO,EACPxW,KAAK,YAIX,CACEkM,MAAM,SACNzd,MAAM,CACJsB,MAAM,KAERwmB,OAAO,CACL,CACEvW,KAAK,YAIX,CACEkM,MAAM,QACNzd,MAAM,CACJsB,MAAM,CAAC,IAAK,IACZuC,eAAe,CAAC,SAAS,eAE3BikB,OAAO,CACL,CACEvW,KAAK,YACLvR,MAAM,CACJinB,GAAG,CAAC,EAAE,GACNzT,OAAO,CAAC,QAAQ,WAGpB,CACEuU,QAAO,EACPxW,KAAK,oBASnB5B,EAAAxO,EAAAC,cAAC+iC,EAAA,EAAD3gC,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEEgd,WAAYld,KAAKs2B,WACjBmM,SAAUziC,KAAKJ,MAAMiF,cACrB0Y,OAAmC,QAA3Bvd,KAAKJ,MAAMsyB,uBA7nCLhuB,sBC0ET6oC,eAnEb,SAAAA,EAAY7sC,GAAO,IAAA0E,EAAA,OAAAlB,OAAAikC,EAAA,EAAAjkC,CAAA1D,KAAA+sC,IACjBnoC,EAAAlB,OAAAkkC,EAAA,EAAAlkC,CAAA1D,KAAA0D,OAAAmkC,EAAA,EAAAnkC,CAAAqpC,GAAAjF,KAAA9nC,KAAME,KAbRN,MAAQ,GAYWgF,EATnB7E,cAAgB,KASG6E,EAKnBgY,mBALmBlZ,OAAAyT,EAAA,EAAAzT,CAAAgE,EAAArG,EAAA+V,KAKE,SAAAM,IAAA,OAAAhQ,EAAArG,EAAAsG,KAAA,SAAAmQ,GAAA,cAAAA,EAAAjQ,KAAAiQ,EAAAhQ,MAAA,OACnBlD,EAAKxE,YADc,wBAAA0X,EAAAE,SAAAN,EAAA1X,SALF4E,EASnBsY,WATmBxZ,OAAAyT,EAAA,EAAAzT,CAAAgE,EAAArG,EAAA+V,KASN,SAAAC,IAAA,OAAA3P,EAAArG,EAAAsG,KAAA,SAAA6P,GAAA,cAAAA,EAAA3P,KAAA2P,EAAA1P,MAAA,OACXlD,EAAK7E,cAAc26B,gBAAgB,mBAAkB,GACrD91B,EAAK1E,MAAMgd,aAFA,wBAAA1F,EAAAQ,SAAAX,EAAArX,SAPX4E,EAAKxE,YAFYwE,2EAPb5E,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,yDAkBvC,IAAAiB,EAAAnB,KACDiiC,EAAoBjiC,KAAKD,cAAc0kB,gBAAgB,CAAC,QAAQ,kBAEtE,OACE5U,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEoC,OAAQvd,KAAKE,MAAMqd,QAEnB1N,EAAAxO,EAAAC,cAACkc,EAAA,EAAD,CACEsM,SAAU,CAAC,QAAQ,SACnBrM,UAAWzd,KAAKE,MAAMgd,YAEtBrN,EAAAxO,EAAAC,cAACkc,EAAA,EAAUE,OAAX,CACEmJ,GAAI,EACJkhB,WAAY,MACZpqB,MAAO,6BACPoM,KAAM,iCAGRla,EAAAxO,EAAAC,cAACkc,EAAA,EAAUI,KAAX,KACE/N,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACP6Z,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE9X,SAAU,EACVF,UAAW,OACXR,MAAO,aAHT,qFAKoFkN,EAAAxO,EAAAC,cAAC0rC,GAAA,EAAD,CAASrqC,MAAO,OAAQU,SAAU,EAAGugC,KAAM5jC,KAAKD,cAAcktC,uBAAuBjtC,KAAKD,cAAc0kB,gBAAgB,CAAC,QAAQ,SAASzkB,KAAKE,MAAMy/B,eAAe0M,UAAU,cAAersC,KAAKE,MAAMy/B,eAAe0M,WAL3S,0EAKsYx8B,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CAAMxY,MAAO,OAAQU,SAAU,EAAGsb,UAAW,OAAQC,QAAU,SAAApF,GAAC,OAAIrY,EAAKjB,MAAMolB,YAAX,SAAAxS,OAAgCmvB,EAAkB1Y,MAAlD,KAAAzW,OAA2D3R,EAAKjB,MAAMy/B,eAAe0M,cAAepK,EAAkBz3B,OALhkB,oDAK8nBqF,EAAAxO,EAAAC,cAAA,WAL9nB,0FAQFuO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEqD,GAAI,EACJ1a,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC2a,EAAA,EAAD,CACEG,YAAapc,KAAKkd,WAClBhB,YAAa,CACX1a,MAAM,CAAC,OAAO,SAHlB,wBAjEaqd,IAAM3a,kFC4OlBgpC,eAtNb,SAAAA,EAAYhtC,GAAO,IAAA0E,EAAA,OAAAlB,OAAAikC,EAAA,EAAAjkC,CAAA1D,KAAAktC,IACjBtoC,EAAAlB,OAAAkkC,EAAA,EAAAlkC,CAAA1D,KAAA0D,OAAAmkC,EAAA,EAAAnkC,CAAAwpC,GAAApF,KAAA9nC,KAAME,KAVRN,MAAQ,CACNutC,MAAM,KACNtzB,OAAM,EACNuzB,YAAW,EACXC,aAAY,GAKKzoC,EAFnB7E,cAAgB,KAEG6E,EAOnBgY,mBAPmBlZ,OAAAyT,EAAA,EAAAzT,CAAAgE,EAAArG,EAAA+V,KAOE,SAAAM,IAAA,OAAAhQ,EAAArG,EAAAsG,KAAA,SAAAmQ,GAAA,cAAAA,EAAAjQ,KAAAiQ,EAAAhQ,MAAA,OACnBlD,EAAK7E,cAAcE,SAAS2E,EAAK1E,OADd,wBAAA4X,EAAAE,SAAAN,EAAA1X,SAPF4E,EAWnB0oC,aAAe,WAAoB,IAAnBC,IAAmBp1B,UAAAjQ,OAAA,QAAAwJ,IAAAyG,UAAA,KAAAA,UAAA,GAC3Bq1B,EAAiB5oC,EAAK7E,cAAc0jC,oBACpCgK,EAAW,CACf18B,QAASnM,EAAK1E,MAAM+a,QACpBqnB,SAAUkL,GAGRD,GAAkC,OAArB3oC,EAAKhF,MAAMutC,QAC1BM,EAASN,MAAQvoC,EAAKhF,MAAMutC,OAG9BvoC,EAAK7E,cAAc2tC,qBAAqBD,IAtBvB7oC,EAyEnBsY,WAzEmBxZ,OAAAyT,EAAA,EAAAzT,CAAAgE,EAAArG,EAAA+V,KAyEN,SAAAC,IAAA,IAAA6F,EAAA,OAAAxV,EAAArG,EAAAsG,KAAA,SAAA6P,GAAA,cAAAA,EAAA3P,KAAA2P,EAAA1P,MAAA,OAELoV,EAAa,WACjBtY,EAAK1E,MAAMgd,cAGb,IAEEtY,EAAK0oC,cAAa,GAGdnlC,IAAcwlC,UAAUC,OAAOC,OAAOv5B,SACxC1P,EAAK7E,cAAcqa,yBAAyB,CAC1CH,cAAe,KACfC,YAAa,yBACbH,WAAY,gBACZmD,GAGF4wB,WAAW5wB,EAAW,MAEtBA,IAEF,MAAO6wB,GACP7wB,IAxBS,wBAAA1F,EAAAQ,SAAAX,EAAArX,SAvEX4E,EAAK7E,cAAgB,IAAII,IAAcD,GACvC0E,EAAKopC,aAAeppC,EAAKopC,aAAa9vB,KAAlBxa,OAAAuqC,GAAA,EAAAvqC,QAAAuqC,GAAA,EAAAvqC,CAAAkB,KACpBA,EAAKspC,iBAAmBtpC,EAAKspC,iBAAiBhwB,KAAtBxa,OAAAuqC,GAAA,EAAAvqC,QAAAuqC,GAAA,EAAAvqC,CAAAkB,KAJPA,4EAyBN4U,GAAG,IAAArY,EAAAnB,KAGd,GAFAwZ,EAAEG,kBAEG3Z,KAAKJ,MAAMutC,MACd,OAAO,EAGT,IAAM1zB,EAAW,WACftY,EAAKD,SAAS,CACZmsC,aAAY,EACZD,YAAW,IAEb/yB,OAAOyzB,WAAW3sC,EAAKjB,MAAMgd,WAAW,OAsB1C,GAnBAld,KAAKstC,eAGLttC,KAAKD,cAAcqa,yBAAyB,CAC1CH,cAAe,KACfC,YAAa,aACbH,WAAY,iBAGdo0B,KAAMC,KAAKjmC,IAAckmC,uBAAuBC,SAAU,CACxDnB,MAASntC,KAAKJ,MAAMutC,QACnBoB,KAAK,SAAA/tB,GACN/G,MAED+0B,MAAM,SAAAT,GACLt0B,MAIEghB,aAAa,CACf,IAAMgU,EAAgBzuC,KAAKE,MAAM+a,QAAQnK,cACrC49B,EAAYjU,aAAakU,QAAQ,aAAejuC,KAAKkuC,MAAMnU,aAAakU,QAAQ,cAAgB,KAChGD,GAAaA,EAAUD,KAAmBC,EAAUD,GAAeI,WACrEH,EAAUD,GAAeI,UAAW,EACpC7uC,KAAKD,cAAc26B,gBAAgB,YAAYh6B,KAAKC,UAAU+tC,KAIlE1uC,KAAKkB,SAAS,CACZmsC,aAAY,6CAgCC7zB,GACXA,GAAKA,EAAEsD,SACT9c,KAAKkB,SAAS,CAAEisC,MAAO3zB,EAAEsD,OAAOrY,QAChC+U,EAAEsD,OAAOgyB,WAAWC,UAAU5uB,IAAI,mDAKpC,OACEtQ,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CAAOoC,OAAQvd,KAAKE,MAAMqd,QAEtBvd,KAAKJ,MAAMwtC,WACTv9B,EAAAxO,EAAAC,cAACkc,EAAA,EAAD,CACEC,UAAWzd,KAAKkd,YAEhBrN,EAAAxO,EAAAC,cAACkc,EAAA,EAAUE,OAAX,CAAkBC,MAAO,WAAYoM,KAAI,oBACzCla,EAAAxO,EAAAC,cAACkc,EAAA,EAAUI,KAAX,KACE/N,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CAAM3Z,MAAO,EAAG6Z,cAAe,SAAUW,GAAI,GAC3CnM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CAAMxY,MAAO,YAAaQ,UAAW,SAAUE,SAAU,EAAGmb,GAAI,GAAhE,2BAGA3O,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEqD,GAAI,EACJhd,MAAO,OACPkd,aAAc,EACdE,QAAS5e,KAAKkd,YAJhB,YAYNrN,EAAAxO,EAAAC,cAACkc,EAAA,EAAD,CAAWC,UAAWzd,KAAKkd,YACzBrN,EAAAxO,EAAAC,cAACkc,EAAA,EAAUE,OAAX,CAAkBC,MAAO,mBAAoBoM,KAAI,4BAEjDla,EAAAxO,EAAAC,cAACkc,EAAA,EAAUI,KAAX,KACE/N,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CAAM6zB,SAAUhvC,KAAKguC,cACnBn+B,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CAAM3Z,MAAO,EAAG6Z,cAAe,SAAUW,GAAI,GAC3CnM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CAAMxY,MAAO,WAAYQ,UAAW,OAAQE,SAAU,EAAGmb,GAAI,GAA7D,8CAIF3O,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CAAM3Z,MAAO,EAAG6Z,cAAe,SAAUU,GAAI,GAC3ClM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CAAMqD,GAAI,EAAGnD,cAAe,MAAOvX,WAAY,UAC7C+L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE1J,KAAM,cACN9O,MAAOiJ,KAAOqjC,MACdhrC,KAAM,OAER4L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CAAMxY,MAAO,YAAaQ,UAAW,OAAQE,SAAU,EAAGJ,WAAY,EAAGub,GAAI,EAAG9C,GAAI,GAApF,wBAIF7L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CAAMqD,GAAI,EAAGnD,cAAe,OAC1BxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE1J,KAAM,cACN9O,MAAOiJ,KAAOqjC,MACdhrC,KAAM,OAER4L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CAAMxY,MAAO,YAAaQ,UAAW,OAAQE,SAAU,EAAGJ,WAAY,EAAGub,GAAI,EAAG9C,GAAI,GAApF,2BAIF7L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CAAMqD,GAAI,EAAGnD,cAAe,OAC1BxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE1J,KAAM,cACN9O,MAAOiJ,KAAOqjC,MACdhrC,KAAM,OAER4L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CAAMxY,MAAO,YAAaQ,UAAW,OAAQE,SAAU,EAAGJ,WAAY,EAAGub,GAAI,EAAG9C,GAAI,GAApF,mBAIF7L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAK+zB,MAAN,CAAY1tC,MAAO,EAAGgJ,MAAO,IAC3BqF,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAKg0B,MAAN,CACE37B,GAAI,EACJD,GAAI,EACJwK,UAAQ,EACRvc,MAAO,EACPiwB,OAAQ,EACRpuB,SAAU,EACVuO,KAAM,QACNH,KAAM,QACN29B,QAAS,OACTnL,YAAa,aACbpmB,gBAAiB,SACjB1a,UAAW,CAAC,SAAS,QACrBmb,UAAW+wB,KAAcC,MACzB9d,YAAa,oBACbxT,SAAUhe,KAAKkuC,oBAGnBr+B,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CAAMa,GAAI,EAAGX,cAAe,SAAUvX,WAAY,SAAUC,eAAgB,UAC1E8L,EAAAxO,EAAAC,cAACiuC,GAAA,EAAD,CACEC,WAAY,SACZC,UAAWzvC,KAAKJ,MAAMytC,YACtBnxB,YAAa,CAACoC,UAAU+wB,KAAcK,eAAeluC,MAAM,OAAOoQ,KAAK,YAGzE/B,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CAAMY,GAAI,EAAG6C,QAAS5e,KAAKkd,WAAYqL,WAAY,QAAnD,wCApNK1J,IAAM3a,sBCwLlByrC,eAjLb,SAAAA,EAAYzvC,GAAO,IAAA0E,EAAA,OAAAlB,OAAAikC,EAAA,EAAAjkC,CAAA1D,KAAA2vC,IACjB/qC,EAAAlB,OAAAkkC,EAAA,EAAAlkC,CAAA1D,KAAA0D,OAAAmkC,EAAA,EAAAnkC,CAAAisC,GAAA7H,KAAA9nC,KAAME,KAfRN,MAAQ,CACNgwC,eAAc,GAaGhrC,EATnB7E,cAAgB,KASG6E,EAKnBgY,mBALmBlZ,OAAAyT,EAAA,EAAAzT,CAAAgE,EAAArG,EAAA+V,KAKE,SAAAM,IAAA,OAAAhQ,EAAArG,EAAAsG,KAAA,SAAAmQ,GAAA,cAAAA,EAAAjQ,KAAAiQ,EAAAhQ,MAAA,OACnBlD,EAAKxE,YADc,wBAAA0X,EAAAE,SAAAN,EAAA1X,SALF4E,EASnBsY,WATmBxZ,OAAAyT,EAAA,EAAAzT,CAAAgE,EAAArG,EAAA+V,KASN,SAAAC,IAAA,OAAA3P,EAAArG,EAAAsG,KAAA,SAAA6P,GAAA,cAAAA,EAAA3P,KAAA2P,EAAA1P,MAAA,WACalD,EAAK7E,cAAc0kB,gBAAgB,CAAC,gBAAgB,YAAY,SAAS,SAAS,YAD/F,CAAAjN,EAAA1P,KAAA,eAAA0P,EAAA1P,KAAA,EAIHlD,EAAK7E,cAAcqa,yBAAyB,CAChDH,cAAe,KACfC,YAAa,2BACbH,WAAY,iBAPL,OASTnV,EAAK1E,MAAMgd,aATF1F,EAAA1P,KAAA,eAWTlD,EAAK1E,MAAMgd,aAXF,wBAAA1F,EAAAQ,SAAAX,EAAArX,SATM4E,EAwBnBirC,oBAAsB,SAACD,GAEjBA,EACFhrC,EAAK7E,cAAc26B,gBAAgB,uBAAuB,QAE1D91B,EAAK7E,cAAc+vC,iBAAiB,wBAGtClrC,EAAK1D,SAAS,CACZ0uC,mBAjCehrC,EAqCnBmrC,QAAU,WACR,IAAMC,EAAsBprC,EAAK7E,cAAc0kB,gBAAgB,CAAC,QAAQ,iBAAiB,UACzF7f,EAAK1E,MAAMolB,YAAY,SAAS0qB,GAChCprC,EAAK1E,MAAMgd,cAtCXtY,EAAKxE,YAFYwE,2EAPb5E,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,yDA+CvC,IAAAiB,EAAAnB,KAEDiwC,EAAa,CACjBhtC,WAAW,EACXI,SAAS,CAAC,EAAE,GACZV,MAAM,WACN4Y,UAAU,CACRxX,eAAe,eAInB,OACE8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEoC,OAAQvd,KAAKE,MAAMqd,QAEnB1N,EAAAxO,EAAAC,cAACkc,EAAA,EAAD,CACEsM,SAAU,CAAC,QAAQ,SACnBrM,UAAWzd,KAAKE,MAAMgd,YAEtBrN,EAAAxO,EAAAC,cAACkc,EAAA,EAAUE,OAAX,CACEqqB,WAAY,OACZpqB,MAAO,kBACPoM,KAAI,uBAGNla,EAAAxO,EAAAC,cAACkc,EAAA,EAAUI,KAAX,KACE/N,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,EACJxa,MAAO,EACP6Z,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEqD,GAAI,EACJnb,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,0GASF0M,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACP6Z,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEqD,GAAI,EACJ1a,WAAY,SACZuX,cAAe,UAGbrb,KAAKE,MAAMgwC,yBAA2BxsC,OAAO4B,KAAKtF,KAAKE,MAAMgwC,yBAAyB//B,IAAK,SAAA4K,GAAK,OAC9FlL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,EACJlY,WAAY,SACZuX,cAAe,MACfxI,IAAG,SAAAC,OAAWiI,GACdhX,eAAgB,iBAEhB8L,EAAAxO,EAAAC,cAAC0qB,EAAA,EAAD,CACEjR,MAAOA,EACPkR,UAAW,CACTxa,KAAK,OACLvR,MAAM,CACJinB,GAAG,EACHzT,OAAO,UAGX3L,YAAa5G,EAAKjB,MAAMgwC,wBAAwBn1B,GAAOhT,cAEzD8H,EAAAxO,EAAAC,cAAC0kB,EAAA,EAADtiB,OAAAC,OAAA,CACEwjB,GAAI,GACA8oB,EAFN,CAGEE,aAAc,EACd/pB,OAAQjlB,EAAKjB,MAAMgwC,wBAAwBn1B,GAAO+Q,WAEpDjc,EAAAxO,EAAAC,cAAC0qB,EAAA,EAAD,CACEjR,MAAOA,EACPkR,UAAW,CACTxa,KAAK,YACLvR,MAAM+vC,GAERloC,YAAa5G,EAAKjB,MAAMgwC,wBAAwBn1B,GAAOhT,iBAK/D8H,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,EACJ3Y,SAAU,EACVV,MAAO,MACPM,WAAY,IACZE,UAAW,UALb,wJAUF0M,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,EACJlY,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAACiuC,GAAA,EAAD,CACEC,WAAY,UACZpzB,YAAapc,KAAK+vC,QAClBN,UAAWzvC,KAAKJ,MAAMytC,YACtBnxB,YAAa,CACX1a,MAAM,CAAC,OAAO,OACd8c,UAAU+wB,KAAcK,kBAS5B7/B,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJgC,UAAU,EACVpb,MAAO,WACPmuB,QAAS9wB,KAAKJ,MAAMgwC,cACpBplC,MAAK,8BACLwT,SAAW,SAAAxE,GAAC,OAAIrY,EAAK0uC,oBAAoBr2B,EAAEsD,OAAOgU,wBAtLzCjS,IAAM3a,WCmdlBksC,eAncb,SAAAA,EAAYlwC,GAAO,IAAA0E,EAAA,OAAAlB,OAAAikC,EAAA,EAAAjkC,CAAA1D,KAAAowC,IACjBxrC,EAAAlB,OAAAkkC,EAAA,EAAAlkC,CAAA1D,KAAA0D,OAAAmkC,EAAA,EAAAnkC,CAAA0sC,GAAAtI,KAAA9nC,KAAME,KAfRN,MAAQ,CACNgwC,eAAc,GAaGhrC,EATnB7E,cAAgB,KASG6E,EAKnBgY,mBALmBlZ,OAAAyT,EAAA,EAAAzT,CAAAgE,EAAArG,EAAA+V,KAKE,SAAAM,IAAA,OAAAhQ,EAAArG,EAAAsG,KAAA,SAAAmQ,GAAA,cAAAA,EAAAjQ,KAAAiQ,EAAAhQ,MAAA,OACnBlD,EAAKxE,YADc,wBAAA0X,EAAAE,SAAAN,EAAA1X,SALF4E,EASnBsY,WATmBxZ,OAAAyT,EAAA,EAAAzT,CAAAgE,EAAArG,EAAA+V,KASN,SAAAC,IAAA,OAAA3P,EAAArG,EAAAsG,KAAA,SAAA6P,GAAA,cAAAA,EAAA3P,KAAA2P,EAAA1P,MAAA,WACalD,EAAK7E,cAAc0kB,gBAAgB,CAAC,gBAAgB,YAAY,SAAS,SAAS,YAD/F,CAAAjN,EAAA1P,KAAA,eAAA0P,EAAA1P,KAAA,EAIHlD,EAAK7E,cAAcqa,yBAAyB,CAChDH,cAAe,KACfC,YAAa,sBACbH,WAAY,iBAPL,OASTnV,EAAK1E,MAAMgd,aATF1F,EAAA1P,KAAA,eAWTlD,EAAK1E,MAAMgd,aAXF,wBAAA1F,EAAAQ,SAAAX,EAAArX,SATM4E,EAwBnBirC,oBAAsB,SAACD,GAEjBA,EACFhrC,EAAK7E,cAAc26B,gBAAgB,uBAAuB,QAE1D91B,EAAK7E,cAAc+vC,iBAAiB,wBAGtClrC,EAAK1D,SAAS,CACZ0uC,mBAjCehrC,EAqCnBmrC,QArCmB,eAAA38B,EAAA1P,OAAAyT,EAAA,EAAAzT,CAAAgE,EAAArG,EAAA+V,KAqCT,SAAArS,EAAOgW,GAAP,IAAA0H,EAAA4tB,EAAAl4B,UAAA,OAAAzQ,EAAArG,EAAAsG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WAAa2a,EAAb4tB,EAAAnoC,OAAA,QAAAwJ,IAAA2+B,EAAA,GAAAA,EAAA,GAAsB,QAG5B5tB,EAAW7d,EAAK1E,MAAMshB,mBAGA5c,EAAK7E,cAAc0kB,gBAAgB,CAAC,gBAAgB,YAAY,SAAS,SAAS,YANlG,CAAA7c,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EASAlD,EAAK7E,cAAcqa,yBAAyB,CAChDH,cAAe,eACfC,YAAa,UACbH,WAAU,GAAAjH,OAAKlO,EAAK1E,MAAMshB,iBAAhB,KAAA1O,OAAoCiI,KAZ1C,OAcNnW,EAAK1E,MAAMolB,YAAX,GAAAxS,OAA0B2P,EAA1B,KAAA3P,OAAsCiI,IACtCnW,EAAK1E,MAAMgd,aAfLtV,EAAAE,KAAA,iBAiBNlD,EAAK1E,MAAMolB,YAAX,GAAAxS,OAA0B2P,EAA1B,KAAA3P,OAAsCiI,IACtCnW,EAAK1E,MAAMgd,aAlBL,yBAAAtV,EAAAoQ,SAAAjT,EAAA/E,SArCS,gBAAAoY,GAAA,OAAAhF,EAAA8E,MAAAlY,KAAAmY,YAAA,GAAAvT,EA2DnB0rC,QA3DmB,eAAAv8B,EAAArQ,OAAAyT,EAAA,EAAAzT,CAAAgE,EAAArG,EAAA+V,KA2DT,SAAA0f,EAAO/b,GAAP,IAAAw1B,EAAA,OAAA7oC,EAAArG,EAAAsG,KAAA,SAAAuvB,GAAA,cAAAA,EAAArvB,KAAAqvB,EAAApvB,MAAA,UACFyoC,EAAc3rC,EAAK7E,cAAc0kB,gBAAgB,CAAC,QAAQ,oBACxC7f,EAAK7E,cAAc0kB,gBAAgB,CAAC,gBAAgB,YAAY,SAAS,SAAS,YAFlG,CAAAyS,EAAApvB,KAAA,eAAAovB,EAAApvB,KAAA,EAKAlD,EAAK7E,cAAcqa,yBAAyB,CAChDH,cAAe,eACfC,YAAa,UACbH,WAAU,GAAAjH,OAAKlO,EAAK1E,MAAMshB,iBAAhB,KAAA1O,OAAoCiI,KAR1C,OAUNnW,EAAK1E,MAAMolB,YAAX,SAAAxS,OAAgCy9B,EAAYhnB,MAA5C,KAAAzW,OAAqDiI,IACrDnW,EAAK1E,MAAMgd,aAXLga,EAAApvB,KAAA,gBAaNlD,EAAK1E,MAAMolB,YAAX,SAAAxS,OAAgCy9B,EAAYhnB,MAA5C,KAAAzW,OAAqDiI,IACrDnW,EAAK1E,MAAMgd,aAdL,yBAAAga,EAAAlf,SAAA8e,EAAA92B,SA3DS,gBAAAiY,GAAA,OAAAlE,EAAAmE,MAAAlY,KAAAmY,YAAA,GAEjBvT,EAAKxE,YAFYwE,2EAPb5E,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,yDAiFvC,IAAAiB,EAAAnB,KAEP,IAAKA,KAAKE,MAAMO,sBAAwBT,KAAKE,MAAMqhB,gBACjD,OAAO,KAGT,IAAM0uB,EAAa,CACjBhtC,WAAW,EACXI,SAAS,CAAC,EAAE,GACZV,MAAM,WACN4Y,UAAU,CACRxX,eAAe,eAInB,OACE8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEoC,OAAQvd,KAAKE,MAAMqd,QAEnB1N,EAAAxO,EAAAC,cAACkc,EAAA,EAAD,CACEsM,SAAU,CAAC,QAAQ,SACnBrM,UAAWzd,KAAKE,MAAMgd,YAEtBrN,EAAAxO,EAAAC,cAACkc,EAAA,EAAUE,OAAX,CACEqM,KAAI,qBACJpM,MAAO,oBACPoqB,WAAY,CAAC,OAAO,UAGtBl4B,EAAAxO,EAAAC,cAACkc,EAAA,EAAUI,KAAX,KACE/N,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEa,GAAI,EACJxa,MAAO,EACP6Z,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEqD,GAAI,EACJnb,SAAU,CAAC,EAAE,GACbV,MAAO,WACPQ,UAAW,UAJb,wHASF0M,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACP6Z,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,CAAC,EAAE,GACPjY,WAAY,SACZuX,cAAe,OAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE9X,SAAU,CAAC,EAAE,GACb7B,MAAO,CAAC,GAAI,KACZyB,WAAY,CAAC,EAAE,GACfN,MAAO,aAGL3C,KAAKE,MAAMkD,SAAW,QAAU,qBAIjCpD,KAAKE,MAAMkD,UACVyM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,IACPyB,WAAY,CAAC,EAAE,GACfN,MAAO,YACPoB,eAAgB,UAJlB,YAWD/D,KAAKE,MAAMkD,UACVyM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,IACPyB,WAAY,CAAC,EAAE,GACfN,MAAO,YACPoB,eAAgB,UAJlB,WAUJ8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE9X,SAAU,CAAC,EAAE,GACbJ,WAAY,CAAC,EAAE,GACfzB,MAAO,CAAC,IAAK,KACbmB,MAAO,YACPoB,eAAgB,UAGd/D,KAAKE,MAAMkD,SAAW,MAAQ,WAGlCyM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,CAAC,IAAK,QAKjBqO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZuX,cAAe,UAGbrb,KAAKE,MAAMswC,iBAAmB9sC,OAAO4B,KAAKtF,KAAKE,MAAMswC,iBAAiBrgC,IAAK,SAAAsgC,GACzE,IAAM11B,EAAQ5Z,EAAKjB,MAAMswC,gBAAgBC,GAAU11B,MAC7C0H,EAAWthB,EAAKjB,MAAMswC,gBAAgBC,GAAUhuB,SAChD1a,EAAc5G,EAAKjB,MAAMswC,gBAAgBC,GAAU1oC,YACnD+jB,EAAU3qB,EAAKjB,MAAMswC,gBAAgBC,GAAUC,4BACrD,OACE7gC,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJva,MAAO,EACPsC,WAAY,SACZuX,cAAe,MACfxI,IAAG,SAAAC,OAAW29B,GACd1sC,eAAgB,iBAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,CAAC,GAAI,KACZsC,WAAY,SACZuX,cAAe,OAEfxL,EAAAxO,EAAAC,cAAC0qB,EAAA,EAAD,CACEC,UAAW,CACTxa,KAAK,OACLvR,MAAM,CACJinB,GAAG,EACHzT,OAAO,CAAC,QAAQ,WAGpB3L,YAAaA,EACbgT,MAAOhT,EAAYiN,KAAK+F,QAE1BlL,EAAAxO,EAAAC,cAAC0qB,EAAA,EAAD,CACEC,UAAW,CACTxa,KAAK,YACLvR,MAAM+vC,GAERloC,YAAaA,EACbgT,MAAOhT,EAAYiN,KAAK+F,UAIzB5Z,EAAKjB,MAAMkD,UACVyM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,IACPsC,WAAY,SACZC,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC0kB,EAAA,EAADtiB,OAAAC,OAAA,GACMssC,EADN,CAEEE,aAAc,EACd/pB,OAAQ0F,EACRvQ,UAAW,CACTxX,eAAe,eAOtB5C,EAAKjB,MAAMkD,UACVyM,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,IACPsC,WAAY,SACZC,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC0qB,EAAA,EAADtoB,OAAAC,OAAA,GACMxC,EAAKjB,MADX,CAEE+rB,UAAW,CACTxa,KAAK,SACLvR,MAAM+vC,GAERl1B,MAAOA,EACPhT,YAAaA,MAKrB8H,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,CAAC,IAAK,KACbsC,WAAY,SACZC,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC0qB,EAAA,EAADtoB,OAAAC,OAAA,GACMxC,EAAKjB,MADX,CAEE+rB,UAAW,CACTxa,KAAK,MACLvR,MAAM+vC,GAERl1B,MAAOA,EACPhT,YAAaA,MAGjB8H,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,CAAC,IAAK,KACbsC,WAAY,SACZC,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC2a,EAAA,EAAD,CACEG,YAAc,SAAA5C,GAAC,OAAIrY,EAAK4uC,QAAQh1B,EAAM0H,IACtCvG,YAAa,CACXjY,KAAK,QACLzC,MAAM,OACN8c,UAAU+wB,KAAcK,iBAL5B,gBAgBZ7/B,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACPsC,WAAY,SACZuX,cAAe,UAGbrb,KAAKE,MAAMywC,wBAA0BjtC,OAAO4B,KAAKtF,KAAKE,MAAMywC,wBAAwBxgC,IAAK,SAAA4K,GACvF,IAAMhT,EAAc5G,EAAKjB,MAAMywC,uBAAuB51B,GAAOhT,YAE7D,IAAKA,EACH,OAAO,KAGT,IAAM+jB,EAAU3qB,EAAKjB,MAAMywC,uBAAuB51B,GAAO+Q,QACrD8kB,EAAiB,KAOrB,OAJEA,EADE7oC,EAAYtH,sBAAwBU,EAAKjB,MAAMqhB,gBAAgBxZ,EAAYskC,WAC5DlrC,EAAKjB,MAAMO,oBAAoBsH,EAAYtH,oBAAoB,IAAIsH,EAAYskC,WAE/ElrC,EAAKjB,MAAMqhB,gBAAgBxZ,EAAYskC,WAGxDx8B,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJva,MAAO,EACPsC,WAAY,SACZuX,cAAe,MACfxI,IAAG,SAAAC,OAAWiI,GACdhX,eAAgB,iBAEhB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,IACPsC,WAAY,SACZuX,cAAe,OAEfxL,EAAAxO,EAAAC,cAAC0qB,EAAA,EAAD,CACEC,UAAW,CACTxa,KAAK,OACLvR,MAAM,CACJinB,GAAG,EACHzT,OAAO,UAGX3L,YAAaA,EACbgT,MAAOA,IAETlL,EAAAxO,EAAAC,cAAC0qB,EAAA,EAAD,CACEC,UAAW,CACTxa,KAAK,YACLvR,MAAM+vC,GAERloC,YAAaA,EACbgT,MAAOA,KAGXlL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,IACPsC,WAAY,SACZC,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC0kB,EAAA,EAADtiB,OAAAC,OAAA,GACMssC,EADN,CAEEE,aAAc,EACd/pB,OAAQ0F,EACRvQ,UAAW,CACTxX,eAAe,cAIrB8L,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,IACPsC,WAAY,SACZC,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC0qB,EAAA,EAADtoB,OAAAC,OAAA,GACMxC,EAAKjB,MADX,CAEE+rB,UAAW,CACTxa,KAAK,SACLvR,MAAM+vC,GAERl1B,MAAO61B,EAAe71B,MACtBhT,YAAa6oC,MAGjB/gC,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,IACPsC,WAAY,SACZC,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC0qB,EAAA,EAADtoB,OAAAC,OAAA,GACMxC,EAAKjB,MADX,CAEE+rB,UAAW,CACTxa,KAAK,MACLvR,MAAM+vC,GAERl1B,MAAO61B,EAAe71B,MACtBhT,YAAa6oC,MAGjB/gC,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,IACPsC,WAAY,SACZC,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC2a,EAAA,EAAD,CACEG,YAAc,SAAA5C,GAAC,OAAIrY,EAAKmvC,QAAQv1B,IAChCmB,YAAa,CACXjY,KAAK,QACLzC,MAAM,OACN8c,UAAU+wB,KAAcK,iBAL5B,gBAgBZ7/B,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEqD,GAAI,EACJ1a,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC2a,EAAA,EAAD,CACEG,YAAapc,KAAKkd,WAClBhB,YAAa,CACX7Y,SAAS,CAAC,EAAE,GACZ7B,MAAM,CAAC,OAAO,SAJlB,iBASAqO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJgC,UAAU,EACVpb,MAAO,WACPmuB,QAAS9wB,KAAKJ,MAAMgwC,cACpBplC,MAAK,8BACLwT,SAAW,SAAAxE,GAAC,OAAIrY,EAAK0uC,oBAAoBr2B,EAAEsD,OAAOgU,wBAxczCjS,IAAM3a,sBC6ElB2sC,eAjEb,SAAAA,EAAY3wC,GAAO,IAAA0E,EAAA,OAAAlB,OAAAikC,EAAA,EAAAjkC,CAAA1D,KAAA6wC,IACjBjsC,EAAAlB,OAAAkkC,EAAA,EAAAlkC,CAAA1D,KAAA0D,OAAAmkC,EAAA,EAAAnkC,CAAAmtC,GAAA/I,KAAA9nC,KAAME,KAbRN,MAAQ,GAYWgF,EATnB7E,cAAgB,KASG6E,EAKnBgY,mBALmBlZ,OAAAyT,EAAA,EAAAzT,CAAAgE,EAAArG,EAAA+V,KAKE,SAAAM,IAAA,OAAAhQ,EAAArG,EAAAsG,KAAA,SAAAmQ,GAAA,cAAAA,EAAAjQ,KAAAiQ,EAAAhQ,MAAA,OACnBlD,EAAKxE,YADc,wBAAA0X,EAAAE,SAAAN,EAAA1X,SALF4E,EASnBsY,WATmBxZ,OAAAyT,EAAA,EAAAzT,CAAAgE,EAAArG,EAAA+V,KASN,SAAAC,IAAA,OAAA3P,EAAArG,EAAAsG,KAAA,SAAA6P,GAAA,cAAAA,EAAA3P,KAAA2P,EAAA1P,MAAA,OACXlD,EAAK1E,MAAMgd,aADA,wBAAA1F,EAAAQ,SAAAX,EAAArX,SAPX4E,EAAKxE,YAFYwE,2EAPb5E,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,yDAmB9C,OACE2P,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEoC,OAAQvd,KAAKE,MAAMqd,QAEnB1N,EAAAxO,EAAAC,cAACkc,EAAA,EAAD,CACEsM,SAAU,CAAC,QAAQ,SACnBrM,UAAWzd,KAAKE,MAAMgd,YAEtBrN,EAAAxO,EAAAC,cAACkc,EAAA,EAAUE,OAAX,CACEmJ,GAAI,EACJkhB,WAAY,OACZhe,KAAM,qBACNpM,MAAO,4BAGT9N,EAAAxO,EAAAC,cAACkc,EAAA,EAAUI,KAAX,KACE/N,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACP6Z,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE9X,SAAU,EACVF,UAAW,OACXR,MAAO,aAHT,wEAKuEkN,EAAAxO,EAAAC,cAAC0rC,GAAA,EAAD,CAAS3pC,SAAU,EAAGugC,KAAM5jC,KAAKD,cAAc+wC,UAAU,8BAAzD,UALvE,6GAKwRjhC,EAAAxO,EAAAC,cAAC0rC,GAAA,EAAD,CAAS3pC,SAAU,EAAGugC,KAAM,8DAA5B,kBALxR,oFAK2d/zB,EAAAxO,EAAAC,cAAC0rC,GAAA,EAAD,CAAS3pC,SAAU,EAAGugC,KAAM,+EAA5B,yBAL3d,0DAQF/zB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEqD,GAAI,EACJ1a,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAEhB8L,EAAAxO,EAAAC,cAAC2a,EAAA,EAAD,CACEG,YAAapc,KAAKkd,WAClBhB,YAAa,CACX1a,MAAM,CAAC,OAAO,SAHlB,qBA/DkBqd,IAAM3a,WCgBhC6sC,8MACJnxC,MAAQ,CACNoxC,KAAK,GACLC,UAAU,KACVC,WAAW,KACXhf,YAAY,KACZif,YAAW,EACXC,aAAa,KACbC,cAAc,KACdC,eAAe,KACf3R,eAAe,KACfrW,gBAAgB,KAChBknB,gBAAgB,KAChBe,iBAAgB,EAChBtoB,mBAAmB,KACnBuoB,mBAAmB,KACnBb,uBAAuB,KACvBT,wBAAwB,QAG1BuB,UAAY,OAGZ1xC,cAAgB,OAmKhBu2B,WAAa,WACX1xB,EAAK1D,SAAS,CACZgxB,YAAa,UAIjBiR,iBAAmB,SAACuO,EAAWC,GAE7B/sC,EAAK7E,cAAcqa,yBAAyB,CAC1CH,cAAe,KACfC,YAAaw3B,EACb33B,WAAY,iBAGdnV,EAAK1D,SAAS,CACZwwC,aACAC,gBACA,WACA/sC,EAAK2xB,eAAe,gBAIxBA,eAAiB,SAACrE,GAChBttB,EAAK1D,SAAS,CACZgxB,mBA6ZJ0f,4BAAS,SAAAl6B,IAAA,OAAAhQ,EAAArG,EAAAsG,KAAA,SAAAmQ,GAAA,cAAAA,EAAAjQ,KAAAiQ,EAAAhQ,MAAA,cACPlD,EAAK1E,MAAM2xC,aAAa,SAAS,UAD1B/5B,EAAAhQ,KAAA,EAEDlD,EAAK1E,MAAM+jB,SAAS,UAFnB,wBAAAnM,EAAAE,SAAAN,EAAA1X,oFAtlBHA,KAAKD,cACPC,KAAKD,cAAcE,SAASD,KAAKE,OAEjCF,KAAKD,cAAgB,IAAII,IAAcH,KAAKE,OAG9Cma,OAAOta,cAAgBC,KAAKD,+LAItB+xC,EAAW9xC,KAAKD,cAAc0kB,gBAAgB,CAAC,eAC/CwsB,EAAYjxC,KAAKD,cAAc0kB,gBAAgB,CAAC,YAAY,cAE5DusB,EAAO,GACPrR,EAAiB3/B,KAAKD,cAAcgyC,uBAGpCC,EAAqBhyC,KAAKD,cAAc0kB,gBAAgB,CAAC,QAAQ,kBAChDnQ,SAAa09B,EAAmBntB,oBAAqBmtB,EAAmBntB,kBAAkBxQ,SAASsrB,EAAejwB,KACvIshC,EAAK9mC,KACH,CACE8f,QAAQ,GACRxf,MAAM,QACNynC,UAAS,EACTtvC,MAAM,YACN4mB,MAAM,mBACNa,MAAM0nB,EAAU,MAAU/nB,KAC1BmoB,UAAUJ,EAAU,MAAUK,SAC9BC,QAAQpyC,KAAKE,MAAM4C,MAAM8I,OAAO+3B,QAChC0O,cAAcP,EAAU,MAAUQ,aAClCC,kBAAkBT,EAAU,MAAUU,iBACtC/lB,UAAU1D,EACVJ,eAAe,CACbU,gBAAe,EACfM,UAAUqoB,EAAmB9xC,MAC7B+oB,mBAAmB+oB,KAMrBzqB,EAAavnB,KAAKD,cAAc0kB,gBAAgB,CAAC,eACvD/gB,OAAO4B,KAAKiiB,GAAY1d,OAAQ,SAAAsyB,GAAC,OAAO5U,EAAW4U,GAAGsW,cAAgBlrB,EAAW4U,GAAGtX,mBAAqB0C,EAAW4U,GAAGtX,kBAAkBxQ,SAASsrB,EAAejwB,QAAU6X,EAAW4U,GAAGuW,YAAYxqC,QAAUqf,EAAW4U,GAAGuW,YAAYr+B,SAASlT,EAAKjB,MAAMyyC,eAAiB5pC,QAAQ,SAAA0Z,GACpR,IAAMgF,EAAeF,EAAW9E,GAC1BmwB,EAAUd,EAAWrvB,GAC3BuuB,EAAK9mC,KAAK,CACR8f,QAAQ,GACRrnB,MAAM,OACNsvC,UAAS,EACT7nB,MAAMwoB,EAAU7oB,KAChBvf,MAAMid,EAAa9J,MACnBy0B,QAAQ3qB,EAAa9kB,MACrB4mB,MAAM0nB,EAAU,IAAIxuB,EACpBowB,QAAQprB,EAAaorB,QACrBX,UAAUU,EAAUT,SACpB1lB,UAAUhF,EAAagF,UACvB4lB,cAAcO,EAAUN,aACxBC,kBAAkBK,EAAUJ,sBAK1B/iB,EAAczvB,KAAKD,cAAc0kB,gBAAgB,CAAC,WAGxCnQ,UACRw+B,EAAcpvC,OAAOC,OAAO,CAChCqmB,QAAQ,GACRioB,UAAS,EACTxlB,UAAUsmB,IACVtjB,EAAYlM,QAEdytB,EAAK9mC,KAAK4oC,MAINE,EAAchzC,KAAKD,cAAc0kB,gBAAgB,CAAC,QAAQ,WAChDnQ,SAAa0+B,EAAYnuB,oBAAqBmuB,EAAYnuB,kBAAkBxQ,SAASsrB,EAAejwB,KAClHshC,EAAK9mC,KACH,CACE8f,QAAQ,GACRxf,MAAM,QACNynC,UAAS,EACTtvC,MAAM,YACN4mB,MAAM,mBACNa,MAAM0nB,EAAU,MAAU/nB,KAC1BmoB,UAAUJ,EAAU,MAAUK,SAC9BC,QAAQpyC,KAAKE,MAAM4C,MAAM8I,OAAO+3B,QAChC0O,cAAcP,EAAU,MAAUQ,aAClCC,kBAAkBT,EAAU,MAAUU,iBACtC/lB,UAAU1D,EACVJ,eAAe,CACbU,gBAAe,EACfM,UAAUqpB,EAAY9yC,MACtB+oB,mBAAmB+pB,MAMrBC,EAAYjzC,KAAKD,cAAc0kB,gBAAgB,CAAC,WACvCI,oBAAqBouB,EAAUpuB,kBAAkBxQ,SAASsrB,EAAejwB,KACtFshC,EAAK9mC,KACH,CACE8f,QAAQ,GACRxf,MAAM,QACNynC,UAAS,EACTxlB,UAAU3N,EACVszB,QAAQ,UACRzvC,MAAM,YACN4mB,MAAM,mBACNa,MAAM0nB,EAAU,MAAU/nB,KAC1BmoB,UAAUJ,EAAU,MAAUK,SAC9BE,cAAcP,EAAU,MAAUQ,aAClCC,kBAAkBT,EAAU,MAAUU,mBAM5CxB,EAAK9mC,KACH,CACEM,MAAM,QACNynC,UAAS,EACTxlB,UAAU1D,EACVpmB,MAAM,YACN4mB,MAAM,mBACNa,MAAM0nB,EAAU,MAAU/nB,KAC1BmoB,UAAUJ,EAAU,MAAUK,SAC9BC,QAAQpyC,KAAKE,MAAM4C,MAAM8I,OAAO+3B,QAChC0O,cAAcP,EAAU,MAAUQ,aAClCC,kBAAkBT,EAAU,MAAUU,iBACtCxoB,QAAQtmB,OAAOkG,OAAO5J,KAAKD,cAAc0kB,gBAAgB,CAAC,WAAW5a,OAAQ,SAAAogB,GAAI,OAAKA,EAAK3V,WAAa2V,EAAKpF,mBAAqBoF,EAAKpF,kBAAkBxQ,SAASsrB,EAAejwB,SAKrLshC,EAAK9mC,KACH,CACE8f,QAAQ,GACR/B,QAAO,EACPzd,MAAM,QACNynC,UAAS,EACTxlB,UAAU,KACV9pB,MAAM,YACNyvC,QAAQ,UACRc,gBAAe,EACf9oB,MAAM0nB,EAAU,MAAU/nB,KAC1BmoB,UAAUJ,EAAU,MAAUK,SAC9BE,cAAcP,EAAU,MAAUQ,aAClCC,kBAAkBT,EAAU,MAAUU,iBACtCjpB,MAAMvpB,KAAKD,cAAc0kB,gBAAgB,CAAC,yBAIxCzkB,KAAKkB,SAAS,CAClB8vC,OACArR,8SAkCG3/B,KAAKE,MAAMizC,uEAIC5vB,EAAavjB,KAAKE,MAA3BsjB,MAASD,OAEX0tB,EAAYjxC,KAAKD,cAAc0kB,gBAAgB,CAAC,YAAY,cAC9D2sB,EAAeH,EAEfI,EAAgB,KAChBxsC,EAAgB,KAChBysC,EAAiB,KACjB9vB,EAAmB,KACnBgwB,EAAqB,KAGrBjuB,EAAO6vB,UACT9B,EAAiB/tB,EAAO6vB,QAClB5G,EAASjpB,EAAOipB,OAChB6G,EAAS9vB,EAAO8vB,OAEhBC,EAAsB5vC,OAAO4B,KAAKtF,KAAKE,MAAMO,qBAAqB4T,SAASi9B,EAAexgC,eAC1FyiC,EAAqB/G,GAAU9oC,OAAO4B,KAAKtF,KAAKE,MAAMO,qBAAqB4T,SAASm4B,EAAO17B,eAE7FwiC,GAAuBC,GAEpBD,IACHlC,GAAgB,IAAIE,GAItBF,GAAgB,KADhB5vB,EAAmB8xB,EAAsBhC,EAAiB9E,GAIpDgH,EAAkBhH,GAAU9oC,OAAO4B,KAAKtF,KAAKE,MAAMO,oBAAoB+gB,IAAmBnN,SAASm4B,EAAO7oB,eAC1G8vB,EAAkBJ,GAAU3vC,OAAO4B,KAAKtF,KAAKE,MAAMO,oBAAoB+gB,IAAmBnN,SAASg/B,EAAO1vB,gBAC5G6vB,GAAmBC,KACrB5uC,EAAgB2uC,EAAkBhH,EAAO7oB,cAAgB0vB,EAAO1vB,cAChEytB,GAAgB,IAAIvsC,EAEhByuC,IACFjC,EAAgBjL,OAIpBgL,GAAgB,IAAI7tB,EAAO6vB,QAEvB7vB,EAAOipB,QAAUjpB,EAAOipB,OAAOtkC,SACjCkpC,GAAgB,IAAI7tB,EAAOipB,UAS3BwE,EAAOhxC,KAAKJ,MAAMoxC,KAEpB1nB,EAAkB,KAClBL,EAAqB,KAEzB+nB,EAAKjoC,QAAQ,SAAAu6B,GACXA,EAAE2O,UAAW,EACb,IAAMyB,EAAezC,EAAU,IAAI1tB,EAAO6vB,QACtChC,EAAatgC,gBAAkBwyB,EAAE/Z,MAAMzY,gBAAoBwyB,EAAEtZ,QAAQ9hB,QAAUo7B,EAAE/Z,MAAMzY,gBAAkB4iC,EAAa5iC,eACxHwyB,EAAE2O,UAAW,EACS,OAAlBZ,IACFA,EAAgB/N,EAAE7W,UAClB+kB,EAAqBlO,EAAE3a,iBAEhB2a,EAAEtZ,QAAQ9hB,QACnBo7B,EAAEtZ,QAAQjhB,QAAQ,SAAA4qC,GAChBA,EAAK1B,UAAW,GACE3O,EAAE/Z,MAAM,IAAIoqB,EAAKpqB,OACrBzY,gBAAkBsgC,EAAatgC,gBAC3CwyB,EAAE2O,UAAW,EACb0B,EAAK1B,UAAW,EAGM,OAAlBZ,IACEsC,EAAKlnB,WACP4kB,EAAgBsC,EAAKlnB,UACrB+kB,EAAqBlO,EAAE3a,iBAEvB0oB,EAAgB/N,EAAE7W,UAClB+kB,EAAqBlO,EAAE3a,kBAMzBgrB,EAAK1B,WACPhpB,EAAqB0qB,KAOvBrQ,EAAE2O,WACJ3oB,EAAkBga,KAOjB+N,4CAEIrxC,KAAKslB,YAAY,IAAG,6BAIvBtlB,KAAKE,MAAMwiB,iBAAiBlB,EAAiB3c,kBAGnD7E,KAAKD,cAAc6zC,4BAA4BxC,GAEzCl2B,EAAW,CACf81B,OACAztB,SACA0tB,YACAG,eACAC,gBACAC,iBACAhoB,kBACAkoB,qBACAvoB,gCAGIjpB,KAAKkB,SAASga,oCAEbA,qJAIHlb,KAAKyxC,WACPp3B,OAAOw5B,aAAa7zC,KAAKyxC,uKAM3BzxC,KAAKE,MAAM4zC,kBAAkB,aAE7B9zC,KAAKI,qBACCJ,KAAK+zC,kBACX/zC,KAAKgjB,iRAKLhjB,KAAKyxC,UAAYp3B,OAAOyzB,WAAW,WAC5BxwB,EAAKpd,MAAM8zC,oBAAuB12B,EAAKpd,MAAMM,sBAChD8c,EAAKpc,SAAS,CACZqwC,iBAAgB,KAGpB,KAEGvxC,KAAKE,MAAM8jB,8CACPhkB,KAAKE,MAAM+jB,sBACRjkB,KAAKE,MAAM8zC,4DACdh0C,KAAKE,MAAM+zC,yBACRj0C,KAAKE,MAAMM,+DACdR,KAAKE,MAAMg0C,sCAGpBl0C,KAAKI,sBACCJ,KAAK+zC,mBACX/zC,KAAKgjB,aAEyC,WAA7BhjB,KAAKE,MAAMkpB,eAE1BppB,KAAKm0C,oMAIgB7zC,EAAUC,qGAEjCP,KAAKI,YAECg0C,EAAa9zC,EAAUkjB,MAAMD,OAC7BA,EAASvjB,KAAKE,MAAMsjB,MAAMD,OAERjjB,EAAU8C,WAAapD,KAAKE,MAAMkD,UAExDpD,KAAKkB,SAAS,CACZiwC,YAAW,IAIXzwC,KAAKC,UAAUyzC,KAAgB1zC,KAAKC,UAAU4iB,mCAC1CvjB,KAAKkB,SAAS,CAClBmwC,cAAc,MACb,WACDgD,EAAKrxB,yBAIHsxB,EAAyB5zC,KAAKC,UAAUL,EAAUi0C,QAAQx2B,YAAcrd,KAAKC,UAAUX,KAAKE,MAAMq0C,QAAQx2B,YAC1Gy2B,GAAmBl0C,EAAU6yC,oBAAsBnzC,KAAKE,MAAMizC,oBAAuBmB,qCAEnFt0C,KAAK+zC,mBACX/zC,KAAKgjB,qBAGDmG,EAAwC,WAA7BnpB,KAAKE,MAAMkpB,cACtBpO,EAAiB1a,EAAU2a,UAAYjb,KAAKE,MAAM+a,QAClDkJ,EAAkBnkB,KAAKE,MAAMshB,kBAAoBlhB,EAAUkhB,mBAAqBxhB,KAAKE,MAAMshB,iBAC3FwlB,EAAyBtmC,KAAKC,UAAUL,EAAUihB,mBAAqB7gB,KAAKC,UAAUX,KAAKE,MAAMqhB,iBACjGyyB,EAAqBh0C,KAAKE,MAAM8zC,oBAAsB1zC,EAAU0zC,qBAAuBh0C,KAAKE,MAAM8zC,mBAClGxzC,EAAuBR,KAAKE,MAAMM,sBAAwBF,EAAUE,uBAAyBR,KAAKE,MAAMM,sBAEzG2oB,IAAaqrB,GAAkBx5B,GAAkBg5B,GAAsBxzC,GAAwB2jB,GAAmB6iB,IACrHhnC,KAAKm0C,sQAMHn0C,KAAKE,MAAM2E,eAAkB7E,KAAKE,MAAM8zC,oBAAuBh0C,KAAKE,MAAMM,sBAAyBR,KAAKE,MAAMO,qBAAwBT,KAAKE,MAAMqhB,yDAC5I,6BAGHvhB,KAAKy0C,2CACLz0C,KAAK00C,2CACL10C,KAAK20C,4CACL30C,KAAK40C,gDACL50C,KAAK60C,6CACL70C,KAAK80C,iSAI4C,SAAhC90C,KAAKE,MAAMshB,sCAE1B0Q,EAAc,UACAlyB,KAAKJ,MAAMsyB,4CACvBlyB,KAAKkB,SAAS,CAClBgxB,gDAEKA,sQAML6iB,EAAmD,YAAvC/0C,KAAKJ,MAAM+/B,eAAe2C,SACtC0S,EAAoBh1C,KAAKD,cAAck1C,cAAc,mBAAkB,GAAM,IAK/EF,GAAcC,sBACV9iB,EAAc,aACAlyB,KAAKJ,MAAMsyB,4CACvBlyB,KAAKkB,SAAS,CAClBgxB,gDAEKA,wQAMLgjB,EAAcl1C,KAAKD,cAAco1C,iBACjCJ,EAAmD,YAAvC/0C,KAAKJ,MAAM+/B,eAAe2C,SACtC8S,EAAiBp1C,KAAKD,cAAck1C,cAAc,gBAAe,GAAM,GAGxEC,GAAgBE,GAAmBL,GAAwC,OAA3B/0C,KAAKJ,MAAMsyB,gCACxDA,EAAc,UACAlyB,KAAKJ,MAAMsyB,4CACvBlyB,KAAKkB,SAAS,CAClBgxB,gDAEKA,2QAOLmjB,EAA2F,OAAxEr1C,KAAKD,cAAck1C,cAAc,wBAAuB,EAAM,OACnFj1C,KAAKE,MAAM2E,eAAkBwwC,GAAqBr1C,KAAKE,MAAMqhB,iBAA8C,OAA3BvhB,KAAKJ,MAAMsyB,qDACtF,6BAGqBlyB,KAAKD,cAAcu1C,mCAA3C9E,kBAC+BxwC,KAAKD,cAAcw1C,2BAA2B,kBAA7E5E,WAIDH,GAAmB9sC,OAAO4B,KAAKkrC,GAAiBtoC,OAAO,GAAOyoC,GAA0BjtC,OAAO4B,KAAKqrC,GAAwBzoC,OAAO,wBAChIgqB,EAAc,aACAlyB,KAAKJ,MAAMsyB,8CACvBlyB,KAAKkB,SAAS,CAClBgxB,cACAse,kBACAG,4DAGKze,oCAIJ,kRAIFlyB,KAAKE,MAAM+a,SAAYjb,KAAKE,MAAM8zC,oBAAuBh0C,KAAKE,MAAMM,8DAChE,iBAILR,KAAKE,MAAM+a,SAAsC,OAA3Bjb,KAAKJ,MAAMsyB,gCAC/BsjB,GAAgB,GAEdC,EAAoBz1C,KAAKD,cAAc0kB,gBAAgB,CAAC,SAAS,aAEjDnQ,SAAWmmB,eAGzBib,GAAW,IAAIp/B,MAAO3N,UACtB8lC,EAAgBzuC,KAAKE,MAAM+a,QAAQnK,eACrC49B,EAAYjU,aAAakU,QAAQ,aAAejuC,KAAKkuC,MAAMnU,aAAakU,QAAQ,cAAgB,IAGrFF,GAOHC,EAAUD,GAAeI,WAC7B8G,EAAWjxC,SAASgqC,EAAUD,GAAekH,UAEnDH,GAD2BE,EAASC,GAAU,KACXF,EAAkBG,YATrDlH,EAAUD,GAAiB,CACzBI,UAAW,EACX8G,SAAWD,GAEbF,GAAgB,GAQdA,IACF9G,EAAUD,GAAekH,SAAWD,EACpC11C,KAAKD,cAAc26B,gBAAgB,YAAYh6B,KAAKC,UAAU+tC,MAI5Dxc,EAAcsjB,EAAgB,UAAYx1C,KAAKJ,MAAMsyB,YACvDlyB,KAAKJ,MAAMsyB,cAAgBA,oCACvBlyB,KAAKkB,SAAS,CAClBgxB,iDAGKA,oCAIJ,2RAKFlyB,KAAKE,MAAM+a,SAAYjb,KAAKE,MAAM8zC,oBAAuBh0C,KAAKE,MAAMM,8DAChE,gBAIHq1C,EAAqB71C,KAAKD,cAAc0kB,gBAAgB,CAAC,SAAS,YAClEqxB,EAAsBD,EAAmBvhC,SAAWuhC,EAAmBhxB,kBAAkBxQ,SAASrU,KAAKJ,MAAM+/B,eAAejwB,IAE5HqmC,EAA2F,OAAxE/1C,KAAKD,cAAck1C,cAAc,wBAAuB,EAAM,MAExD,OAA3Bj1C,KAAKJ,MAAMsyB,cAAwB4jB,IAAuBC,GAAqB/1C,KAAKJ,MAAMswC,yDACtDlwC,KAAKD,cAAcw1C,2CAAnDrF,SACAhe,EAAcge,GAA2BxsC,OAAO4B,KAAK4qC,GAAyBhoC,OAAO,EAAI,UAAY,KACrGgT,EAAW,CACfgX,cACAge,qCAEIlwC,KAAKkB,SAASga,oCACbgX,oCAGF,6IAGGkhB,GAAyB,IAAjB4C,IAAiB79B,UAAAjQ,OAAA,QAAAwJ,IAAAyG,UAAA,KAAAA,UAAA,GAG/B69B,IACF5C,EAAUA,EAAQ6C,QAAQj2C,KAAKJ,MAAMqxC,UAAW,IAAI,KAGtD,IAAMiF,EAAWF,EAAch2C,KAAKJ,MAAMqxC,UAAW,IAAMmC,EAAUA,EACrE/4B,OAAO87B,SAASr6B,KAAKo6B,EAGrBl2C,KAAKD,cAAcqa,yBAAyB,CAC1CH,cAAe,KACfC,YAAa,cACbH,WAAYm8B,IAGd77B,OAAO+7B,SAAS,EAAG,uCAQTvxC,GAEV,GADAA,EAAgBA,EAAc8e,cAC1BjgB,OAAO4B,KAAKtF,KAAKE,MAAMqhB,iBAAiBlN,SAASxP,GAAe,CAClE,IAAMwxC,EAAa,GAGfr2C,KAAKJ,MAAM0xC,eAAexgC,gBAAkB9Q,KAAKE,MAAMshB,iBAAiB1Q,eAC1EulC,EAAWnsC,KAAKlK,KAAKJ,MAAM0xC,gBAI7B+E,EAAWnsC,KAAKlK,KAAKE,MAAMshB,kBAG3B60B,EAAWnsC,KAAKrF,GAEhB7E,KAAKslB,YAAY+wB,EAAWnmC,KAAK,mDAIjBghC,GAClBlxC,KAAKkB,SAAS,CACZgwC,WAAWA,EAAWp0B,yCAIlBq0B,GACNnxC,KAAKkB,SAAS,CACZiwC,oDAKF,IAAMA,GAAcnxC,KAAKJ,MAAMuxC,WAC/BnxC,KAAKs2C,QAAQnF,yCAGDr3B,GAEU,UAAlBA,EAAUy8B,IACZv2C,KAAKs2C,SAAQ,GACc,SAAlBx8B,EAAUy8B,KACnBv2C,KAAKs2C,SAAQ,oCAIR,IAAAE,EAAAx2C,KAEDy2C,EAAgBz2C,KAAKJ,MAAMyxC,cAAgBrxC,KAAKJ,MAAMyxC,cAAgB,KACtE8B,EAAqBnzC,KAAKE,MAAMizC,oBAAsBnzC,KAAKE,MAAMq0C,QAAQmC,QAAQhnC,IAAM1P,KAAKE,MAAMq0C,QAAQx2B,SAASrO,GACnHinC,EAAiB32C,KAAKE,MAAMq0C,QAAQqC,iBACpCC,EAAmB72C,KAAKE,MAAMq0C,QAAQuC,mBAE5C,OAAK92C,KAAKE,MAAMO,oBAiCdoP,EAAAxO,EAAAC,cAACy1C,GAAA,EAAD,CACEt9B,SAAUzZ,KAAKg3C,cAAc94B,KAAKle,OAElC6P,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEzH,OAAQ,QACRqP,SAAU,QACV1H,cAAe,MACfiD,UAAWte,KAAKE,MAAMgO,UACtB2P,gBAAiB,CAAC,cAAc,SAChCrc,MAAOxB,KAAKE,MAAMkD,UAAYpD,KAAKJ,MAAMuxC,WAAa,QAAU,WAI5DnxC,KAAKE,MAAMkD,UAAYpD,KAAKJ,MAAMuxC,aAClCthC,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE/L,OAAQ,EACR+2B,OAAQ,MACR3kC,MAAO,CAAC,OAAO,EAAE,GACjBuhB,SAAU,WACV1H,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE1K,EAAG,EACHghB,OAAQ,EACRjwB,MAAO,OACPkS,OAAQ,QACRmK,gBAAiB,SACjBomB,YAAajkC,KAAKE,MAAM4C,MAAM8I,OAAOqrC,gBACrCC,YAAW,aAAApkC,OAAe9S,KAAKE,MAAM4C,MAAM8I,OAAOqrC,kBAElDpnC,EAAAxO,EAAAC,cAAC61C,EAAA,EAADzzC,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEE8wC,KAAMhxC,KAAKJ,MAAMoxC,KACjBoG,UAAW,SAAA59B,GAAC,OAAIg9B,EAAKF,SAAQ,SAMvCzmC,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE5H,GAAI,EACJyI,GAAI,EACJxI,GAAI,CAAC,EAAE,GACPhS,MAAO,CAAC,QAAQ,EAAE,GAClBgB,MAAO,CACL60C,UAAU,SACVC,UAAU,UAEZ5jC,OAAQ,CAAC,QAAQ,QACjB2H,cAAe,SACfwC,gBAAiB,eAEjBhO,EAAAxO,EAAAC,cAACi2C,GAAA,EAAD7zC,OAAAC,OAAA,CACEwtC,WAAYnxC,KAAKJ,MAAMuxC,WACvBD,WAAYlxC,KAAKJ,MAAMsxC,WACvBsG,WAAYx3C,KAAKw3C,WAAWt5B,KAAKle,MACjCslB,YAAatlB,KAAKslB,YAAYpH,KAAKle,OAC/BA,KAAKE,QAGRizC,GAAuBnzC,KAAKE,MAAM8zC,oBAAuBh0C,KAAKE,MAAMM,sBAAyBi2C,GAAkBE,GAAmBE,EAwJjIhnC,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACP6Z,cAAe,UAGbo7B,GACE5mC,EAAAxO,EAAAC,cAACm1C,EAAD/yC,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEEsjB,MAAO,CAAED,OAAO,IAChBgpB,UAAWvsC,KAAKJ,MAAM2jB,OACtBZ,YAAa3iB,KAAK2iB,YAAYzE,KAAKle,MACnCslB,YAAatlB,KAAKslB,YAAYpH,KAAKle,MACnCspB,gBAAiBtpB,KAAKJ,MAAM0pB,gBAC5BL,mBAAoBjpB,KAAKJ,MAAMqpB,mBAC/Bka,iBAAkBnjC,KAAKmjC,iBAAiBjlB,KAAKle,OACzCA,KAAKJ,MAAM4xC,sBAtKvB3hC,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACP4Z,UAAW,OACXtX,WAAY,SACZuX,cAAe,SACftX,eAAgB,UAGdovC,IAAuBwD,EACrB9mC,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACT7C,EAAE,EACFsL,GAAG,EACHva,MAAM,CAAC,EAAE,OAGXqO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZuX,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACElX,KAAM,QACNwN,KAAM,UACN9O,MAAO,aAETkN,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJ1Y,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,wBAMuB0M,EAAAxO,EAAAC,cAAA,cAAStB,KAAKD,cAAc2jC,WAAW1jC,KAAKE,MAAMq0C,QAAQx2B,SAAStM,MAAnE,YANvB,wCAMsJ5B,EAAAxO,EAAAC,cAAA,cAAStB,KAAKD,cAAc2jC,WAAW1jC,KAAKE,MAAMq0C,QAAQmC,QAAQjlC,MAAlE,YANtJ,2CAS6C,IAA3C/M,SAAS1E,KAAKE,MAAMq0C,QAAQx2B,SAASrO,IACnCG,EAAAxO,EAAAC,cAAC2a,EAAA,EAAD,CACEC,YAAa,CACXH,GAAG,EACHva,MAAM,CAAC,EAAE,KAEX4a,YAAa,SAAA5C,GAAC,OAAIg9B,EAAKz2C,cAAc03C,iBAAiBjB,EAAKt2C,MAAMq0C,QAAQx2B,SAASrO,MALpF,kBAUAG,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZC,eAAgB,SAChBsX,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEqD,GAAI,EACJnb,SAAU,EACVV,MAAO,QACPQ,UAAW,UAJb,gBAMgBnD,KAAKD,cAAc2jC,WAAW1jC,KAAKE,MAAMq0C,QAAQx2B,SAAStM,MAN1E,yFAQA5B,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJva,MAAO,CAAC,EAAE,OACV6oB,IAAK,mCAOf8oB,IAAuB0D,EACzBhnC,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACT7C,EAAE,EACFsL,GAAG,EACHva,MAAM,CAAC,EAAE,OAGXqO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZuX,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACElX,KAAM,QACNwN,KAAM,UACN9O,MAAO,aAETkN,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJ1Y,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,OAMM0M,EAAAxO,EAAAC,cAAA,cAAStB,KAAKD,cAAc2jC,WAAW1jC,KAAKE,MAAMq0C,QAAQmC,QAAQjlC,MAAlE,YANN,8DAUDzR,KAAKJ,MAAM2xC,gBAiBd1hC,EAAAxO,EAAAC,cAAC+R,EAAA,EAAD,CACEC,UAAW,CACT7C,EAAE,EACFsL,GAAG,EACHva,MAAM,CAAC,EAAE,OAGXqO,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACErX,WAAY,SACZuX,cAAe,UAEfxL,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACElX,KAAM,QACNwN,KAAM,UACN9O,MAAO,aAETkN,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACEY,GAAI,EACJ1Y,SAAU,EACVV,MAAO,WACPQ,UAAW,UAJb,qCAMoC0M,EAAAxO,EAAAC,cAAA,WANpC,yDAQAuO,EAAAxO,EAAAC,cAAC2a,EAAA,EAAD,CACEC,YAAa,CACXH,GAAG,EACHva,MAAM,CAAC,EAAE,KAEX4a,YAAapc,KAAK4xC,OAAO1zB,KAAKle,OALhC,YAxCJ6P,EAAAxO,EAAAC,cAACga,EAAA,EAAD,CACEG,UAAW,CACTsJ,SAAS,EACT9hB,WAAW,GAEbuY,YAAa,CACXQ,GAAG,EACH/X,KAAK,QAEPsX,UAAW,CACTiD,GAAG,EACHnD,cAAc,UAEhBjN,KAAQpO,KAAKE,MAAMizC,mBAA8CnzC,KAAKE,MAAM8zC,mBAA+Ch0C,KAAKE,MAAMM,qBAAgD,oBAAzB,uBAA5D,qBAAzD,yBAiEpDR,KAAKJ,MAAM+/B,gBACT9vB,EAAAxO,EAAAC,cAACo2C,GAAD,CACEx6B,WAAYld,KAAKs2B,WACjBhR,YAAatlB,KAAKslB,YAAYpH,KAAKle,MACnC2/B,eAAgB3/B,KAAKJ,MAAM+/B,eAC3BpiB,OAAmC,YAA3Bvd,KAAKJ,MAAMsyB,cAGzBriB,EAAAxO,EAAAC,cAACq2C,GAAD,CACEz6B,WAAYld,KAAKs2B,WACjB/Y,OAAmC,SAA3Bvd,KAAKJ,MAAMsyB,cAErBriB,EAAAxO,EAAAC,cAACs2C,GAAD,CACE16B,WAAYld,KAAKs2B,WACjB/Y,OAAmC,SAA3Bvd,KAAKJ,MAAMsyB,cAErBriB,EAAAxO,EAAAC,cAACu2C,GAADn0C,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEEgd,WAAYld,KAAKs2B,WACjBhR,YAAatlB,KAAKslB,YAAYpH,KAAKle,MACnCwwC,gBAAiBxwC,KAAKJ,MAAM4wC,gBAC5BjzB,OAAmC,YAA3Bvd,KAAKJ,MAAMsyB,YACnBye,uBAAwB3wC,KAAKJ,MAAM+wC,0BAErC9gC,EAAAxO,EAAAC,cAACw2C,GAADp0C,OAAAC,OAAA,GACM3D,KAAKE,MADX,CAEEgd,WAAYld,KAAKs2B,WACjBhR,YAAatlB,KAAKslB,YAAYpH,KAAKle,MACnCud,OAAmC,YAA3Bvd,KAAKJ,MAAMsyB,YACnBge,wBAAyBlwC,KAAKJ,MAAMswC,2BAEtCrgC,EAAAxO,EAAAC,cAACy2C,GAAA,EAAD,CACE76B,WAAYld,KAAKs2B,WACjB3Y,MAAO3d,KAAKJ,MAAM8xC,WAClBsG,QAASh4C,KAAKJ,MAAM+xC,aACpBp0B,OAAmC,YAA3Bvd,KAAKJ,MAAMsyB,cAErBriB,EAAAxO,EAAAC,cAAC22C,GAAD,CACE/6B,WAAYld,KAAKs2B,WACjBrb,QAASjb,KAAKE,MAAM+a,QACpBi9B,SAAUl4C,KAAKE,MAAMg4C,SACrB3D,QAASv0C,KAAKE,MAAMq0C,QAAQmC,QAC5B5pB,UAAW9sB,KAAKE,MAAM2E,cACtBszC,aAAcn4C,KAAKE,MAAMi4C,aACzBC,cAAep4C,KAAKE,MAAM2E,cAC1B0Y,OAAmC,YAA3Bvd,KAAKJ,MAAMsyB,gBAvTvBriB,EAAAxO,EAAAC,cAAC6Z,EAAA,EAAD,CACE3Z,MAAO,EACP4Z,UAAW,QACXtX,WAAY,SACZuX,cAAe,SACftX,eAAgB,SAChB8Z,gBAAiB,YAEjBhO,EAAAxO,EAAAC,cAACga,EAAA,EAAD,CACEG,UAAW,CACTsJ,SAAU,EACV9hB,WAAY,GAEduY,YAAa,CACXQ,GAAI,EACJ/X,KAAM,OACNtB,MAAO,WAET4Y,UAAW,CACTiD,GAAI,EACJnD,cAAe,UAEjBjN,KAAM,aAjsBMlK,aA0+BT6sC","file":"static/js/4.323d2adc.chunk.js","sourcesContent":["import Title from '../Title/Title';\nimport CountUp from 'react-countup';\nimport React, { Component } from 'react';\nimport { Box, Flex, Text, Loader } from \"rimble-ui\";\nimport FunctionsUtil from '../utilities/FunctionsUtil';\n\nclass AssetsUnderManagement extends Component {\n\n  state = {\n    totalAUM:null,\n    totalAUMEndOfYear:null\n  }\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.loadTotalAUM();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const availableStrategiesChanged = !prevProps.availableStrategies && JSON.stringify(prevProps.availableStrategies) !== JSON.stringify(this.props.availableStrategies);\n    if (availableStrategiesChanged || contractsInitialized){\n      this.loadTotalAUM();\n    }\n  }\n\n  async loadTotalAUM(){\n\n    const allNetworks = this.props.allNetworks || false;\n\n    if (!this.props.availableStrategies || !this.props.contractsInitialized || (allNetworks && this.state.totalAUM)){\n      return true;\n    }\n\n    const {\n      avgAPY,\n      totalAUM\n    } = await this.functionsUtil.getAggregatedStats(true,allNetworks);\n\n    const totalAUMEndOfYear = totalAUM.plus(totalAUM.times(avgAPY.div(100)));\n\n    this.setState({\n      totalAUM,\n      totalAUMEndOfYear\n    });\n  }\n\n  render() {\n    return this.state.totalAUM ? (\n      <Box\n        width={1}\n      >\n        <CountUp\n          delay={0}\n          decimals={4}\n          decimal={'.'}\n          separator={''}\n          useEasing={false}\n          duration={31536000}\n          start={parseFloat(this.state.totalAUM)}\n          end={parseFloat(this.state.totalAUMEndOfYear)}\n          formattingFn={ n => '$ '+this.functionsUtil.formatMoney(n,4) }\n        >\n          {({ countUpRef, start }) => (\n            <span\n              style={ this.props.counterStyle ? this.props.counterStyle : {\n                display:'block',\n                color:'dark-gray',\n                whiteSpace:'nowrap',\n                fontFamily:this.props.theme.fonts.counter,\n                fontWeight:this.props.theme.fontWeights[5],\n                textAlign: this.props.isMobile ? 'center' : 'right',\n                fontSize: this.props.isMobile ? '1.6em' : this.props.theme.fontSizes[6]\n              }}\n              ref={countUpRef}\n            />\n          )}\n        </CountUp>\n        {\n          (typeof this.props.subtitle === 'undefined' || this.props.subtitle) && (\n            <Title\n              fontWeight={3}\n              fontSize={[2,2]}\n              color={'cellTitle'}\n              textAlign={['center','right']}\n              {...this.props.subtitleProps}\n            >\n              {\n                this.props.subtitle ? this.props.subtitle : (\n                  <Text.span fontWeight={'inherit'} color={'inherit'} fontSize={'inherit'}>Assets Under Management{/*<Text.span color={'cellTitle'} fontWeight={3} fontSize={'70%'}>(V3 + V4)</Text.span>*/}</Text.span>\n                )\n              }\n            </Title>\n          )\n        }\n      </Box>\n    ) : (\n      <Flex\n        alignItems={'center'}\n        justifyContent={this.props.loaderAlign || 'center'}\n      >\n        <Loader\n          size={\"30px\"}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default AssetsUnderManagement;\n","import moment from 'moment';\nimport { Bar } from '@nivo/bar';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CustomTooltip from '../CustomTooltip/CustomTooltip';\nimport CustomTooltipRow from '../CustomTooltip/CustomTooltipRow';\n\nclass StatsChart extends Component {\n  state = {\n    chartProps:{},\n    chartType:null,\n    chartData:null,\n    chartWidth:null\n  };\n\n  async componentDidMount() {\n    this.setState({\n      chartData:null,\n      chartType:null,\n      chartProps:null,\n    });\n    this.loadUtils();\n    this.loadApiData();\n  }\n\n  async componentDidUpdate(prevProps) {\n    const showAdvancedChanged = prevProps.showAdvanced !== this.props.showAdvanced;\n    const apiResultsChanged = prevProps.apiResults !== this.props.apiResults;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    if (apiResultsChanged || showAdvancedChanged || tokenChanged){\n      this.componentDidMount();\n    }\n  }\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  parseAum = value => {\n    return (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.tokenConfig || !this.props.selectedToken || !this.props.chartMode || !this.props.apiResults){\n      return false;\n    }\n\n    const maxGridLines = 4;\n    const apiResults = this.props.apiResults;\n    const apiResults_unfiltered = this.props.apiResults_unfiltered;\n    const totalItems = apiResults.length;\n    const protocols = Object.assign([],this.props.tokenConfig.protocols);\n    // const compoundProtocol = this.props.tokenConfig.protocols.find( p => (p.name === 'compound'));\n\n    const versionInfo = globalConfigs.stats.versions[this.props.idleVersion];\n\n    let keys = {};\n    let tempData = {};\n    let gridYStep = 0;\n    let itemIndex = 0;\n    let daysCount = 0;\n    let chartData = [];\n    let chartProps = {};\n    let chartType = Line;\n    let gridYValues = [];\n    let maxChartValue = 0;\n    let axisBottomIndex = 0;\n    let daysFrequency = null;\n    let idleChartData = null;\n    let firstIdleBlock = null;\n    let axisBottomMaxValues = 12;\n\n    switch (this.props.chartMode){\n      case 'VOL':\n        let divergingData = {};\n\n        const startTimestamp = parseInt(apiResults_unfiltered[0].timestamp);\n        const endTimestamp = parseInt(moment()._d.getTime()/1000);\n\n        for (let timestamp=startTimestamp;timestamp<=endTimestamp;timestamp+=86400){\n          const date = moment(timestamp*1000).format(\"YYYY/MM/DD\");\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n        }\n\n        let lastRow = null;\n        apiResults_unfiltered.forEach(row => {\n          const date = moment(row.timestamp*1000).format(\"YYYY/MM/DD\");\n          const idleTokens = this.functionsUtil.fixTokenDecimals(row.idleSupply,18);\n\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp:row.timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n\n          if (lastRow){\n            const idleTokensPrev = this.functionsUtil.fixTokenDecimals(lastRow.idleSupply,18);\n            const idleTokensDiff = !idleTokens.eq(idleTokensPrev);\n            if (idleTokensDiff){\n              const diff = idleTokens.minus(idleTokensPrev);\n              // Deposits\n              if (diff.gte(0)){\n                divergingData[date].deposits+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,divergingData[date].deposits);\n              } else {\n                divergingData[date].redeems+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,Math.abs(divergingData[date].deposits));\n              }\n            }\n\n          } else {\n            divergingData[date].deposits+=parseFloat(idleTokens);\n          }\n\n          lastRow = row;\n        });\n\n        chartData = Object.values(divergingData).filter(v => {\n          return (!this.props.startTimestamp || v.timestamp>=this.props.startTimestamp) && (!this.props.endTimestamp || v.timestamp<=this.props.endTimestamp);\n        }).sort((a,b) => (a.timestamp < b.timestamp ? -1 : 1));\n\n        let maxRange = 0;\n        chartData.forEach(v => {\n          maxRange = Math.max(maxRange,Math.abs(v.deposits),Math.abs(v.redeems));\n        });\n\n        chartType = Bar;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 6;\n        daysCount = moment(chartData[chartData.length-1].date,\"YYYY/MM/DD\").diff(moment(chartData[0].date,\"YYYY/MM/DD\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          indexBy: 'date',\n          enableLabel: false,\n          minValue:-maxRange,\n          maxValue:maxRange,\n          label: d => {\n            return Math.abs(d.value);\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            legend: '',\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            tickValues: 'every day',\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD').format('MMM DD')\n              }\n            },\n            legendPosition: 'middle',\n          },\n          axisLeft: null,\n          axisRight: {\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:8,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(Math.abs(v),0)\n          },\n          markers: [\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { strokeOpacity: 0 },\n              textStyle: { fill: this.props.theme.colors.transactions.action.deposit },\n              legend: 'deposits',\n              legendPosition: 'top-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { stroke: this.props.theme.colors['dark-gray'], strokeDasharray: '5 3' },\n              textStyle: { fill: this.props.theme.colors.transactions.action.redeem },\n              legend: 'redeems',\n              legendPosition: 'bottom-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n          ],\n          keys:['deposits','redeems'],\n          padding:0.4,\n          colors:[this.props.theme.colors.transactions.action.deposit, this.props.theme.colors.transactions.action.redeem],\n          labelTextColor: 'inherit:darker(1.4)',\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 80 : 100,\n              itemHeight: 18,\n              translateX: 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            },\n            tooltip:{\n              container:{\n                boxShadow:null,\n                background:null\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 50, bottom: 45, left: 50 } : { top: 20, right: 70, bottom: 70, left: 50 },\n          tooltip:(data) => {\n            const xFormatted = this.functionsUtil.strToMoment(data.data.timestamp*1000).format('MMM DD HH:ss');\n            const point = {\n              id:data.id,\n              data:{\n                xFormatted\n              }\n            };\n            const depositFormatted = this.functionsUtil.abbreviateNumber(data.data.deposits,2)+' '+this.props.selectedToken;\n            const redeemFormatted = this.functionsUtil.abbreviateNumber(data.data.redeems,2)+' '+this.props.selectedToken;\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                <CustomTooltipRow\n                  label={'Deposits'}\n                  color={this.props.theme.colors.deposit}\n                  value={depositFormatted}\n                />\n                <CustomTooltipRow\n                  label={'Redeem'}\n                  color={this.props.theme.colors.redeem}\n                  value={redeemFormatted}\n                />\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      /*\n      case 'AUM_ALL':\n        await this.functionsUtil.asyncForEach(Object.keys(availableTokens[globalConfigs.network.requiredNetwork]),async (tokenName,i) => {\n          const tokenConfig = availableTokens[globalConfigs.network.requiredNetwork][tokenName];\n          const tokenDataApi = await this.props.getTokenData(tokenConfig.address);\n          chartData.push({\n            id:tokenName,\n            color: tokenConfig.color,\n            data: tokenDataApi.map((d,i) => {\n              const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n              const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,tokenConfig.decimals);\n              const aum = idleTokens.times(idlePrice);\n              return {\n                x: moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\"),\n                y: parseInt(aum.toString())\n              };\n            })\n          });\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken,\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v),\n            orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            legendPosition: 'middle'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            format: '%b %d',\n            tickValues: this.props.isMobile ? 'every 4 days' : 'every 3 days',\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 36,\n            legendPosition: 'middle'\n          },\n          enableArea:false,\n          curve:\"linear\",\n          enableSlices:'x',\n          enableGridX:true,\n          enableGridY:false,\n          colors:d => d.color,\n          pointSize:0,\n          pointColor:{ from: 'color', modifiers: []},\n          pointBorderWidth:1,\n          pointLabel:\"y\",\n          pointLabelYOffset:-12,\n          useMesh:true,\n          animate:false,\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 60, bottom: 40, left: 60 },\n        };\n      break;\n      */\n      case 'AUM':\n\n        maxChartValue = 0;\n\n        chartData.push({\n          id:'AUM',\n          color: 'hsl('+globalConfigs.stats.tokens[this.props.selectedToken].color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n            const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n            const aum = idleTokens.times(idlePrice);\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(aum.toString());\n\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x,y };\n          })\n        });\n\n        // Add allocation\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          apiResults.map((d,i) => {\n            return d.protocolsData.filter((protocolAllocation,x) => {\n                return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            })\n            .map((protocolAllocation,z) => {\n              const protocolPaused = this.functionsUtil.BNify(protocolAllocation.rate).eq(0);\n              if (!protocolPaused){\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals));\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                let foundItem = chartData[0].data.filter(item => { return item.x === x });\n                if (foundItem){\n                  foundItem = foundItem[0];\n                  const pos = chartData[0].data.indexOf(foundItem);\n                  if (!foundItem.allocations){\n                    foundItem.allocations = {};\n                  }\n                  foundItem.allocations[p.name] = y;\n                  chartData[0].data[pos] = foundItem;\n                }\n              }\n              return undefined;\n            })[0]\n          }).filter((v) => { return v !== undefined; } )\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 6;\n        daysCount = moment(chartData[0].data[chartData[0].data.length-1].x,\"YYYY/MM/DD HH:mm\").diff(moment(chartData[0].data[0].x,\"YYYY/MM/DD HH:mm\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:v => this.functionsUtil.formatMoney(v,v<1 ? 3 :0),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            tickValues: 'every day',\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:true,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            if (typeof point === 'object' && typeof point.data === 'object'){\n              return (\n                <CustomTooltip\n                  point={point}\n                >\n                  <CustomTooltipRow\n                    label={point.serieId}\n                    color={point.serieColor}\n                    value={point.data.yFormatted}\n                  />\n                  {\n                    point.data.allocations && typeof point.data.allocations === 'object' &&\n                      Object.keys(point.data.allocations).map(protocolName => {\n                        const protocolInfo = globalConfigs.stats.protocols[protocolName];\n                        const protocolColor = 'hsl('+protocolInfo.color.hsl.join(',')+')';\n                        const protocolAllocation = point.data.allocations[protocolName];\n                        const protocolAllocationFormatted = this.functionsUtil.formatMoney(protocolAllocation,protocolAllocation<1 ? 3 : 0);\n                        const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                        return (\n                          <CustomTooltipRow\n                            color={protocolColor}\n                            label={protocolInfo.label}\n                            key={`${point.id}_${protocolName}`}\n                            value={`${protocolAllocationFormatted} (${protocolAllocationPerc})`}\n                          />\n                        );\n                      })\n                  }\n                </CustomTooltip>\n              );\n              /*\n              return (\n                <div\n                    key={point.id}\n                    style={{\n                      background: 'white',\n                      color: 'inherit',\n                      fontSize: 'inherit',\n                      borderRadius: '2px',\n                      boxShadow: 'rgba(0, 0, 0, 0.25) 0px 1px 2px',\n                      padding: '5px 9px'\n                    }}\n                >\n                  <div>\n                    <table style={{width:'100%',borderCollapse:'collapse'}}>\n                      <tbody>\n                        <tr>\n                          <td style={{padding:'3px 5px'}}>\n                            <span style={{display:'block', width: '12px', height: '12px', background: point.serieColor}}></span>\n                          </td>\n                          <td style={{padding:'3px 5px'}}>{point.serieId}</td>\n                          <td style={{padding:'3px 5px'}}><strong>{point.data.yFormatted}</strong></td>\n                        </tr>\n                        {\n                          point.data.allocations && typeof point.data.allocations === 'object' &&\n                            Object.keys(point.data.allocations).map(protocolName => {\n                              const protocolColor = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n                              const protocolAllocation = this.functionsUtil.formatMoney(point.data.allocations[protocolName],0);\n                              const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                              return (\n                                <tr key={`${point.id}_${protocolName}`}>\n                                  <td style={{padding:'3px 5px'}}>\n                                    <span style={{display:'block', width: '12px', height: '12px', background: protocolColor}}></span>\n                                  </td>\n                                  <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{protocolName}</td>\n                                  <td style={{padding:'3px 5px'}}><strong>{protocolAllocation}</strong> ({protocolAllocationPerc})</td>\n                                </tr>\n                              );\n                            })\n                        }\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              );\n              */\n            }\n\n            return null;\n          }\n        };\n      break;\n      case 'ALL':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\");\n\n          let row = {\n            date\n          };\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const foundProtocol = this.props.tokenConfig.protocols.find((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() });\n            if (foundProtocol){\n              const protocolInfo = globalConfigs.stats.protocols[foundProtocol.name];\n              if (!protocolPaused){\n                let allocation = parseFloat(this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals));\n                keys[protocolInfo.label] = 1;\n                row[protocolInfo.label] = allocation;\n                row[`${protocolInfo.label}Color`] = 'hsl('+protocolInfo.color.hsl.join(',')+')';\n                // console.log(protocolInfo.label,this.functionsUtil.BNify(protocolData.allocation).toString(),this.props.tokenConfig.decimals,allocation);\n                maxChartValue = Math.max(maxChartValue,allocation);\n              } else {\n                row[protocolInfo.label] = 0;\n              }\n            }\n          });\n\n\n          tempData[date] = row;\n        });\n\n        const dates = Object.keys(tempData);\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 12;\n        daysCount = moment(dates[dates.length-1],\"YYYY/MM/DD\").diff(moment(dates[0],\"YYYY/MM/DD\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n            orient: 'left',\n            tickSize: 0,\n            tickPadding: 10,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            tickValues:gridYValues,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickSize: 0,\n            tickPadding: 10,\n            legendOffset: 36,\n            orient: 'bottom-left',\n            tickValues: 'every day',\n            legendPosition: 'middle'\n          },\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            tooltip: {\n              container:{\n                padding:'0',\n                boxShadow:'none',\n                background:'transparent',\n              },\n              tableCell:{\n                padding:'0'\n              }\n            },\n            axis: {\n              ticks: {\n                text: {\n                  fontSize:this.props.isMobile ? 12 : 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize:this.props.isMobile ? 12 : 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 60 },\n          tooltip:({ id, value, color }) => {\n            const allocation = this.functionsUtil.formatMoney(value,0);\n            return (\n              <DashboardCard\n                cardProps={{\n                  py:1,\n                  px:2,\n                  width:1,\n                }}\n              >\n                <table\n                  style={{width:'100%',borderCollapse:'collapse'}}\n                >\n                  <tbody>\n                    <tr>\n                      <td style={{padding:'3px 5px'}}>\n                        <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                      </td>\n                      <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                      <td style={{padding:'3px 5px'}}><strong>{allocation} {this.props.selectedToken}</strong></td>\n                    </tr>\n                  </tbody>\n                </table>\n              </DashboardCard>\n            )\n          }\n        }\n      break;\n      case 'ALL_PERC':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\")\n          let row = {\n            date:moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\")\n          };\n          if (tempData[date]){\n            row = tempData[date];\n          }\n\n          const totalAllocation = d.protocolsData.reduce((accumulator,protocolAllocation) => {\n            const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n            return this.functionsUtil.BNify(accumulator).plus(allocation);\n          },0);\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const protocolName = this.props.tokenConfig.protocols.filter((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() })[0].name;\n            if (!protocolPaused){\n              const allocation = this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals);\n              const allocationPerc = parseFloat(allocation.div(totalAllocation).times(100));\n              keys[protocolName] = 1;\n              row[protocolName] = allocationPerc;\n              row[`${protocolName}Color`] = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n            } else if (typeof row[protocolName] !== undefined) {\n              row[protocolName] = 0;\n            } \n          });\n          \n          tempData[date] = row;\n        });\n\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          data: chartData,\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 40, bottom: 40, left: 60 },\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => parseInt(v)+'%'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            orient: 'bottom',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days'\n          },\n          tooltip:({ id, value, color }) => {\n            const allocation = parseInt(value)===100 ? this.functionsUtil.formatMoney(value,0) : this.functionsUtil.formatMoney(value,2);\n            return (\n              <table style={{width:'100%',borderCollapse:'collapse'}}>\n                <tbody>\n                  <tr>\n                    <td style={{padding:'3px 5px'}}>\n                      <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                    </td>\n                    <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                    <td style={{padding:'3px 5px'}}><strong>{allocation}%</strong></td>\n                  </tr>\n                </tbody>\n              </table>\n            )\n          }\n        }\n      break;\n      case 'APR':\n\n        maxChartValue = 0;\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo && additionalProtocol.enabledTokens.includes(this.props.selectedToken)){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        protocols.forEach((p,j) => {\n          const protocolInfo = {...globalConfigs.stats.protocols[p.name]};\n          if (!protocolInfo.enabled){\n            return;\n          }\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n          \n          chartData.push({\n            id:protocolInfo.label,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                // let protocolRate = this.functionsUtil.BNify(protocolAllocation.rate);\n\n                let protocolRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n                  if (protocolAllocation[field]){\n                    return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(protocolAllocation[field]));\n                  }\n                  return this.functionsUtil.BNify(acc);\n                },0) : this.functionsUtil.BNify(protocolAllocation[rateField]);\n\n                const protocolPaused = protocolRate.eq(0);\n                if (!protocolPaused){\n\n                  // Aave V1 wrong rate FIX\n                  if (protocolRate.lt(0) && protocolAllocation.aaveAdditionalAPR && this.functionsUtil.BNify(protocolAllocation.aaveAdditionalAPR).gt(0)){\n                    protocolRate = protocolRate.plus(this.functionsUtil.BNify(protocolAllocation.aaveAdditionalAPR));\n                  }\n\n                  protocolRate = this.functionsUtil.fixTokenDecimals(protocolRate,18);\n\n                  const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                  const y = parseFloat(protocolRate);\n\n                  maxChartValue = Math.max(maxChartValue,y);\n\n                  return { x, y };\n                }\n                return undefined;\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color:'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data:apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(this.functionsUtil.fixTokenDecimals(d.idleRate,18));\n            maxChartValue = Math.max(maxChartValue,y);\n            return { x, y };\n          })\n        });\n\n        /*\n        const csv = {};\n        chartData.forEach( protocolData => {\n          protocolData.data.forEach( d => {\n            if (!csv[d.x]){\n              csv[d.x] = {};\n            }\n            csv[d.x][protocolData.id] = d.y;\n          });\n        });\n\n        const csv_ordered = Object.keys(csv).sort().reduce(\n          (obj, key) => { \n            obj[key] = csv[key]; \n            return obj;\n          }, \n          {}\n        );\n\n        const csv_array = [];\n        const csv_header = [];\n        csv_header.push('Date');\n        chartData.forEach( pData => csv_header.push(pData.id) );\n        csv_array.push(csv_header.join(','));\n\n        Object.keys(csv_ordered).forEach( date => {\n          const csv_row = [date];\n          chartData.forEach( cData => {\n            if (csv_ordered[date][cData.id]){\n              csv_row.push(parseFloat(csv_ordered[date][cData.id]).toFixed(4));\n            } else {\n              csv_row.push('0.0000');\n            }\n          });\n          csv_array.push(csv_row.join(','));\n        });\n\n        console.log('-------DEBUG-------');\n        console.log(csv_ordered);\n        console.log('-------START-------');\n        console.log(csv_array.join('\\n'));\n        console.log('-------END-------');\n        */\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 6;\n        const chartValues = chartData[chartData.length-1].data.sort((a,b) => (moment(a.x,\"YYYY/MM/DD HH:mm\").isBefore(moment(b.x,\"YYYY/MM/DD HH:mm\")) ? -1 : 1));\n        daysCount = moment(chartValues[chartValues.length-1].x,\"YYYY/MM/DD HH:mm\").diff(moment(chartValues[0].x,\"YYYY/MM/DD HH:mm\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        // console.log('APR',chartValues,chartValues[0].x,chartValues[chartValues.length-1].x,daysCount,daysFrequency);\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(2)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            tickPadding: 15,\n            legendOffset: 0,\n            orient: 'bottom',\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickValues: 'every day',\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    // const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'SCORE':\n\n        let prevValue = 0;\n        maxChartValue = 0;\n\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n          if (!protocolInfo.enabled){\n            return;\n          }\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n          chartData.push({\n            id:protocolInfo.label,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(protocolAllocation.defiScore);\n\n                y = isNaN(y) || !y ? prevValue : y;\n                prevValue = y;\n                maxChartValue = Math.max(maxChartValue,y);\n\n                return { x, y };\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            let y = parseFloat(d.idleScore);\n            y = isNaN(y) || !y ? prevValue : y;\n            prevValue = y;\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x, y };\n          })\n        });\n\n        // debugger;\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 6;\n        daysCount = moment(chartData[0].data[chartData[0].data.length-1].x,\"YYYY/MM/DD\").diff(moment(chartData[0].data[0].x,\"YYYY/MM/DD\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(1),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            tickValues: 'every day',\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE_V4':\n\n        itemIndex = 0;\n        maxChartValue = 0;\n        // let prevApy = null;\n        let prevApr = null;\n        let prevData = null;\n        let avgApy = this.functionsUtil.BNify(0);\n        let startBalance = this.functionsUtil.BNify(1);\n        let currentBalance = this.functionsUtil.BNify(1);\n\n        idleChartData = [];\n        const aaveProtocolInfo = protocols.find( p => p.name === 'aavev2' );\n\n        apiResults.forEach((d,i) => {\n\n          let idleRate = this.functionsUtil.BNify(d.idleRate);\n          let y = 0;\n          let apy = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n\n          // Aave V1 wrong rate FIX\n          if (this.props.selectedToken === 'WETH' && moment(x).isSameOrBefore(moment('2021-05-19 12:20','YYYY-MM-DD HH:mm'))){\n            const aaveProtocolData = aaveProtocolInfo ? d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === aaveProtocolInfo.address.toLowerCase()\n            }) : null;\n            if (aaveProtocolData.aaveAdditionalAPR && this.functionsUtil.BNify(aaveProtocolData.aaveAdditionalAPR).gt(0)){\n              idleRate = idleRate.plus(this.functionsUtil.BNify(aaveProtocolData.aaveAdditionalAPR));\n            }\n          }\n\n          const apr = this.functionsUtil.fixTokenDecimals(idleRate,18).div(100);\n          // const apy = this.functionsUtil.apr2apy(apr);\n          \n          avgApy = avgApy.plus(apr.times(100));\n\n          if (prevApr){\n            const days = (d.timestamp-prevData.timestamp)/86400;\n            // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n            const earnings = currentBalance.times(prevApr.times(days).div(365));\n            currentBalance = currentBalance.plus(earnings);\n\n            const earning = currentBalance.div(startBalance).minus(1).times(100);\n            y = parseFloat(earning);\n\n            // apy = earning.times(365).div(totDays).toFixed(2);\n            const daysSinceBeginning = idleChartData.length>0 ? Math.max(1,moment(d.timestamp*1000).diff(moment(idleChartData[0].x,\"YYYY/MM/DD HH:mm\"),'days')) : 1;\n            apy = parseFloat(y*365/daysSinceBeginning).toFixed(2);\n          }\n\n          prevData = d;\n          // prevApy = apy;\n          prevApr = apr;\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          if (apy>0){\n            idleChartData.push({ x, y, apy, blocknumber, itemPos });\n          }\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo && additionalProtocol.enabledTokens.includes(this.props.selectedToken)){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        protocols.forEach( p => {\n\n          const protocolInfo = {...globalConfigs.stats.protocols[p.name]};\n\n          // Add custom protocol info\n          if (protocolInfo.tokensProps && protocolInfo.tokensProps[this.props.selectedToken]){\n            const tokenProps = protocolInfo.tokensProps[this.props.selectedToken];\n            Object.keys(tokenProps).forEach(p => {\n              protocolInfo[p] = tokenProps[p];\n            });\n          }\n\n          if (!protocolInfo.enabled || (protocolInfo.startTimestamp && this.functionsUtil.strToMoment(protocolInfo.startTimestamp).isAfter(Date.now()))){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          // prevApy = null;\n          prevApr = null;\n          prevData = null;\n          let baseProfit = 0;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n          avgApy = this.functionsUtil.BNify(0);\n          startBalance = this.functionsUtil.BNify(1);\n          currentBalance = this.functionsUtil.BNify(1);\n          const apiResults_filtered = apiResults.filter( d => (!protocolInfo.startTimestamp || moment(protocolInfo.startTimestamp).isSameOrBefore(moment(d.timestamp*1000))) );\n\n          apiResults_filtered.forEach( (d,i) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              let protocolRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n                if (protocolData[field]){\n                  return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(protocolData[field]));\n                }\n                return this.functionsUtil.BNify(acc);\n              },0) : this.functionsUtil.BNify(protocolData[rateField]);\n\n              // Aave V1 wrong rate FIX\n              if (protocolRate.lt(0) && protocolData.aaveAdditionalAPR && this.functionsUtil.BNify(protocolData.aaveAdditionalAPR).gt(0)){\n                protocolRate = protocolRate.plus(this.functionsUtil.BNify(protocolData.aaveAdditionalAPR));\n              }\n\n              const protocolPaused = protocolRate.eq(0);\n              if (!protocolPaused){\n\n                let rowData = {};\n\n                let y = 0;\n                let apy = 0;\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                const apr = this.functionsUtil.fixTokenDecimals(protocolRate,18).div(100);\n\n                avgApy = avgApy.plus(apr.times(100));\n                // const apy = this.functionsUtil.apr2apy(apr);\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null) {\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => (d1.blocknumber>=firstProtocolBlock) );\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                      y = baseProfit;\n                      apy = avgApy.toFixed(2);\n                    }\n                  }\n                }\n\n                itemIndex++;\n\n                if (prevData) {\n                  const days = (d.timestamp-prevData.timestamp)/86400;\n                  // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n                  const earnings = currentBalance.times(prevApr.times(days).div(365));\n                  currentBalance = currentBalance.plus(earnings);\n\n                  const earning = currentBalance.div(startBalance).minus(1).times(100);\n                  y = parseFloat(earning)+baseProfit;\n\n                  const daysSinceBeginning = Math.max(1,moment(d.timestamp*1000).diff(moment(idleChartData[0].x,\"YYYY/MM/DD HH:mm\"),'days'));\n                  apy = parseFloat(y*365/daysSinceBeginning).toFixed(2);\n                  // debugger;\n\n                  // apy = avgApy.div(itemIndex+1).toFixed(2);\n                  const itemPos = Math.floor(itemIndex/totalItems*100);\n                  rowData = {\n                    x,\n                    y,\n                    apy,\n                    itemPos\n                  };\n\n                  itemIndex++;\n                  chartRow.data.push(rowData);\n                }\n\n                prevData = d;\n                prevApr = apr;\n\n                if (firstIdleBlock === null){\n                  firstIdleBlock = parseInt(d.blocknumber);\n                }\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                // const blocknumber = d.blocknumber;\n\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          data: idleChartData,\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')'\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 12;\n        daysCount = moment(idleChartData[idleChartData.length-1].x,\"YYYY/MM/DD HH:mm\").diff(moment(idleChartData[0].x,\"YYYY/MM/DD HH:mm\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            tickValues:`every day`,\n            legendPosition: 'middle',\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              itemWidth: this.props.isMobile ? 70 : 160,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE':\n        // let prevTokenPrice = null;\n        maxChartValue = 0;\n        let firstTokenPrice = null;\n\n        idleChartData = apiResults.map((d,i) => {\n\n          let y = 0;\n          let apy = 0;\n          let days = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n          const tokenPrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n\n          if (!firstTokenPrice){\n            firstTokenPrice = tokenPrice;\n          } else {\n            y = parseFloat(tokenPrice.div(firstTokenPrice).minus(1).times(100));\n\n            days = (d.timestamp-apiResults[0].timestamp)/86400;\n            const earning = tokenPrice.div(firstTokenPrice).minus(1).times(100);\n            apy = earning.times(365).div(days).toFixed(2);\n\n            // console.log(firstTokenPrice.toString(),tokenPrice.toString(),earning.toString(),days,y,apy);\n          }\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          return { x, y, apy, blocknumber, itemPos };\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo && additionalProtocol.enabledTokens.includes(this.props.selectedToken)){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        await this.functionsUtil.asyncForEach(protocols,async (p) => {\n\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n\n          if (!protocolInfo.enabled){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          let baseProfit = 0;\n          firstTokenPrice = null;\n          let lastRowData = null;\n          let lastTokenPrice = null;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n\n          await this.functionsUtil.asyncForEach(apiResults,async (d) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData && protocolData[rateField]){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              const protocolPaused = this.functionsUtil.BNify(protocolData[rateField]).eq(0);\n              if (!protocolPaused){\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null){\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => {\n                      return d1.blocknumber>=firstProtocolBlock;\n                    });\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                    }\n                  }\n                }\n\n                let rowData = {};\n                let tokenExchangeRate = protocolData.price;\n                let tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n\n                // Take data from\n                if (protocolInfo && protocolInfo.data && protocolInfo.data[p.address.toLowerCase()] && protocolInfo.data[p.address.toLowerCase()][d.blocknumber]){\n                  tokenExchangeRate = this.functionsUtil.BNify(globalConfigs.stats.protocols[p.name].data[p.address.toLowerCase()][d.blocknumber]);\n                  tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                }/* else if (p.name === 'aave'){\n                  // Token holders (aDAI = 0xc025c03e10f656d3ee76685d53d236824d8ef3da , aUSDC = 0xd2c734fbd8f5d1c809185e014016dd4097e94711)\n                  let aaveTokenBalance = await this.functionsUtil.genericContractCall(p.token,'balanceOf',['0xd2c734fbd8f5d1c809185e014016dd4097e94711'],{},d.blocknumber);\n                  if (aaveTokenBalance){\n                    if (!Object.values(aave_data).length){\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(1,p.decimals);\n                      aave_data[d.blocknumber] = aaveTokenBalance.toString();\n                    } else {\n                      const firstBalance = Object.values(aave_data)[0];\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(this.functionsUtil.BNify(aaveTokenBalance).div(this.functionsUtil.BNify(firstBalance)).toFixed(p.decimals),p.decimals);\n                      aave_data[d.blocknumber] = tokenExchangeRate.toString();\n                    }\n                  }\n                }\n                */\n\n                let y = baseProfit;\n                let apy = 0;\n\n                if (!firstTokenPrice){\n                  firstTokenPrice = tokenPriceFixed;\n                } else {\n                  if (tokenPriceFixed.lt(lastTokenPrice)){\n                    firstTokenPrice = tokenPriceFixed;\n                    const lastYDiff = chartRow.data[chartRow.data.length-1].y-chartRow.data[chartRow.data.length-2].y;\n                    y = lastRowData.y+lastYDiff;\n                    baseProfit = y;\n                  } else {\n                    y += parseFloat(tokenPriceFixed.div(firstTokenPrice).minus(1).times(100));\n                  }\n\n                  const days = (d.timestamp-apiResults[0].timestamp)/86400;\n                  const earning = tokenPriceFixed.div(firstTokenPrice).minus(1).times(100);\n                  apy = earning.times(365).div(days).toFixed(2);\n                }\n\n                y = Math.max(0,y);\n                maxChartValue = Math.max(maxChartValue,y);\n\n                const itemPos = Math.floor(itemIndex/totalItems*100);\n\n                rowData = {\n                  x,\n                  y,\n                  apy,\n                  itemPos\n                };\n\n                itemIndex++;\n                lastRowData = rowData;\n                chartRow.data.push(rowData);\n                lastTokenPrice = tokenPriceFixed;\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: idleChartData\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              itemWidth: this.props.isMobile ? 70 : 100,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      chartType,\n      chartProps,\n      chartData\n    });\n  }\n\n  render() {\n    return(\n      <GenericChart\n        showLoader={true}\n        {...this.state.chartProps}\n        height={this.props.height}\n        type={this.state.chartType}\n        data={this.state.chartData}\n        width={this.state.chartWidth}\n        isMobile={this.props.isMobile}\n        parentId={this.props.parentId}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default StatsChart;","import { Flex, Text } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\n\nclass Rebalance extends Component {\n\n  state = {\n    loading:true,\n    processing:{\n      rebalance:{\n        txHash:null,\n        loading:false\n      },\n    },\n    shouldRebalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n  componentUnmounted = false;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillUnmount(){\n    this.componentUnmounted = true;\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.checkRebalance();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged || accountChanged){\n      this.checkRebalance();\n    }\n  }\n\n  async setStateSafe(newState,callback=null) {\n    if (!this.componentUnmounted){\n      return this.setState(newState,callback);\n    }\n    return null;\n  }\n\n  checkRebalance = async () => {\n    this.setStateSafe({\n      loading:true,\n    });\n\n    const shouldRebalance = await this.functionsUtil.checkRebalance(this.props.tokenConfig);\n\n    this.setStateSafe({\n      loading:false,\n      shouldRebalance\n    });\n  }\n\n  rebalance = async (e) => {\n    e.preventDefault();\n\n    const callback = (tx,error) => {\n\n      if (tx){\n        // Send Google Analytics event\n        const eventData = {\n          eventLabel: tx.status,\n          eventCategory: 'Rebalance',\n          eventAction: this.props.selectedToken,\n        };\n\n        let txDenied = false;\n\n        if (error){\n          eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n        }\n\n        // Send Google Analytics event\n        if (error || eventData.status !== 'error'){\n          this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n        }\n\n        if (tx.status === 'success'){\n          // Toast message\n          window.toastProvider.addMessage(`Rebalance completed`, {\n            secondaryMessage: `Now the pool is balanced!`,\n            colorTheme: 'light',\n            actionHref: \"\",\n            actionText: \"\",\n            variant: \"success\",\n          });\n        } else if (!txDenied){\n          window.toastProvider.addMessage(`Rebalance error`, {\n            secondaryMessage: `The rebalance has failed, try again...`,\n            colorTheme: 'light',\n            actionHref: \"\",\n            actionText: \"\",\n            variant: \"failure\",\n          });\n        }\n      }\n\n      this.setStateSafe((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          rebalance:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n\n      this.checkRebalance();\n    }\n\n    const callback_receipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setStateSafe((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            rebalance:{\n              ...prevState.processing.rebalance,\n              txHash\n            }\n          }\n        })\n      );\n    };\n\n    await this.setStateSafe({\n      processing:{\n        rebalance:{\n          txHash:null,\n          loading:true\n        }\n      }\n    });\n\n    this.props.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'rebalance', [], null , callback, callback_receipt);\n  }\n\n  render() {\n    return (\n      <Flex\n        px={3}\n        width={1}\n        minHeight={'100px'}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n      {\n        this.state.loading ? (\n          <FlexLoader\n            flexProps={{\n              flexDirection:'row'\n            }}\n            loaderProps={{\n              size:'30px'\n            }}\n            textProps={{\n              ml:2\n            }}\n            text={'Checking rebalance...'}\n          />\n        ) : (\n          this.state.processing.rebalance.loading ? (\n            <TxProgressBar {...this.props} waitText={`Rebalance estimated in`} endMessage={`Finalizing rebalance request...`} hash={this.state.processing.rebalance.txHash} />\n          ) : (\n            <Flex\n              width={1}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                mt={0}\n                mb={3}\n                textAlign={'center'}\n              >\n                {this.state.shouldRebalance ? 'Rebalance the entire pool. All users will bless you.' : 'The pool is already balanced.'}\n              </Text>\n              <RoundButton\n                buttonProps={{\n                  width:'auto',\n                  disabled:!this.state.shouldRebalance\n                }}\n                handleClick={e => this.rebalance(e)}\n              >\n                Rebalance\n              </RoundButton>\n            </Flex>\n          )\n        )\n      }\n      </Flex>\n    )\n  }\n}\n\nexport default Rebalance;","import React from \"react\";\nimport {\n  Modal,\n  Button,\n  Flex,\n  Field,\n  Select\n} from \"rimble-ui\";\nimport moment from 'moment';\nimport './DateRangeModal.css';\nimport ModalCard from './ModalCard';\nimport 'react-date-range/dist/styles.css';\nimport { DateRange } from 'react-date-range';\nimport 'react-date-range/dist/theme/default.css';\n\nclass DateRangeModal extends React.Component {\n\n  state = {\n    quickSelection:'',\n    ranges:{\n      startDate: this.props.startDate ? this.props.startDate : new Date(),\n      endDate: this.props.endDate ? this.props.endDate : new Date(),\n      key: 'selection'\n    },\n    options:Object.keys(this.props.quickSelections).map( value => ({ value,label:this.props.quickSelections[value].label }) )\n  }\n\n  handleSelect(ranges){\n    this.setState({\n      quickSelection:'',\n      ranges:ranges.selection\n    });\n  }\n\n  handleQuickSelect(e){\n    let startDate = null;\n    let endDate = moment(new Date());\n    const quickSelection = e.target.value;\n\n    if (quickSelection && this.props.quickSelections[quickSelection]){\n      const quickSelectionParams = this.props.quickSelections[quickSelection];\n      startDate = endDate.clone().subtract(quickSelectionParams.value,quickSelectionParams.type);\n    } else {\n      startDate = null;\n      endDate = null;\n    }\n\n    if (startDate && endDate){\n      startDate = startDate._d;\n      endDate = endDate._d;\n\n      const ranges = {\n        startDate,\n        endDate,\n        key:'selection'\n      };\n\n      this.setState({\n        ranges,\n        quickSelection\n      }, () => {\n        this.closeModal();\n      });\n    }\n  }\n\n  componentDidUpdate = (prevProps) => {\n    if (prevProps.startDate !== this.props.startDate || prevProps.endDate !== this.props.endDate){\n      this.setState({\n        ranges:{\n          startDate: this.props.startDate ? this.props.startDate : new Date(),\n          endDate: this.props.endDate ? this.props.endDate : new Date(),\n          key: 'selection'\n        }\n      });\n    }\n  }\n\n  closeModal(){\n    const newState = this.props.handleSelect(this.state.ranges,this.state.quickSelection);\n    const ranges = {\n      startDate:newState.startTimestampObj ? newState.startTimestampObj._d : new Date(),\n      endDate:newState.endTimestampObj ? newState.endTimestampObj._d : new Date(),\n      key: 'selection'\n    };\n    this.setState({\n      ranges\n    });\n    this.props.closeModal();\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        <ModalCard closeFunc={this.props.closeModal}>\n          <ModalCard.Header title={'Select Date Range'}>\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex width={1} flexDirection={'column'} alignItems={'center'}>\n              <Field label=\"Quick Date Selection\" style={{display:'flex',width:'100%',alignItems:'stretch',justifyContent:'center'}}>\n                <Select\n                  style={{\n                    fontSize:'14px',\n                    height:'2.5em',\n                    boxShadow:'none',\n                    color:this.props.theme.colors.counter,\n                    backgroundColor:this.props.theme.colors.cardBg\n                  }}\n                  width={'100%'}\n                  required={true}\n                  options={this.state.options}\n                  value={this.state.quickSelection}\n                  onChange={this.handleQuickSelect.bind(this)}\n                />\n              </Field>\n              <DateRange\n                ranges={[this.state.ranges]}\n                minDate={this.props.minDate}\n                maxDate={this.props.maxDate}\n                className={this.props.themeMode}\n                onChange={this.handleSelect.bind(this)}\n              />\n            </Flex>\n          </ModalCard.Body>\n          <ModalCard.Footer>\n            <Flex px={[2,0]} flexDirection={['column', 'row']} width={1} justifyContent={'center'}>\n              <Button\n                my={2}\n                mx={[0, 2]}\n                borderRadius={4}\n                mainColor={'blue'}\n                onClick={ e => this.closeModal(e) }\n                size={this.props.isMobile ? 'small' : 'medium'}\n              >\n              APPLY\n              </Button>\n            </Flex>\n          </ModalCard.Footer>\n        </ModalCard>\n      </Modal>\n    );\n  }\n\n}\n\nexport default DateRangeModal;","import moment from 'moment';\nimport Title from '../Title/Title';\nimport StatsChart from './StatsChart';\nimport React, { Component } from 'react';\nimport Rebalance from '../Rebalance/Rebalance';\nimport StatsCard from '../StatsCard/StatsCard';\nimport AssetsList from '../AssetsList/AssetsList';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport GenericSelector from '../GenericSelector/GenericSelector';\nimport RoundIconButton from '../RoundIconButton/RoundIconButton';\nimport VariationNumber from '../VariationNumber/VariationNumber';\nimport AllocationChart from '../AllocationChart/AllocationChart';\nimport DateRangeModal from '../utilities/components/DateRangeModal';\nimport { Flex, Text, Heading, Box, Icon, Button, Link } from 'rimble-ui';\nimport ExecuteTransaction from '../ExecuteTransaction/ExecuteTransaction';\nimport AssetsUnderManagement from '../AssetsUnderManagement/AssetsUnderManagement';\n\nclass Stats extends Component {\n  state = {\n    aum:null,\n    apr:null,\n    days:'-',\n    delta:null,\n    earning:null,\n    minDate:null,\n    maxDate:null,\n    carouselMax:1,\n    rebalances:'-',\n    buttonGroups:[],\n    apiResults:null,\n    carouselIndex:0,\n    idleVersion:null,\n    statsVersions:{},\n    minStartTime:null,\n    endTimestamp:null,\n    showAdvanced:true,\n    govTokensPool:null,\n    unlentBalance:null,\n    quickSelection:null,\n    startTimestamp:null,\n    endTimestampObj:null,\n    shouldRebalance:null,\n    carouselOffsetLeft:0,\n    startTimestampObj:null,\n    showRefreshIdleSpeed:false,\n    apiResults_unfiltered:null,\n    dateRangeModalOpened:false\n  };\n\n  quickSelections = {\n    day:{\n      value:1,\n      type:'day',\n      label:'Last day',\n    },\n    week:{\n      value:1,\n      type:'week',\n      label:'Last week',\n    },\n    weeks:{\n      value:2,\n      type:'week',\n      label:'Last 2 weeks',\n    },\n    month:{\n      value:1,\n      type:'month',\n      label:'Last month',\n    },\n    ytd:{\n      type:'day',\n      label:'Year to date',\n      value:moment().diff(moment('01/01/YYYY','DD/MM/YYYY'),'days'),\n    },\n  };\n\n  // Utils\n  functionsUtil = null;\n  componentUnmounted = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount() {\n    this.loadUtils();\n    await this.loadParams();\n  }\n\n  componentWillUnmount(){\n    this.componentUnmounted = true;\n  }\n\n  async setStateSafe(newState,callback=null) {\n    if (!this.componentUnmounted){\n      return this.setState(newState,callback);\n    }\n    return null;\n  }\n\n  showRefreshIdleSpeed(){\n    this.setState({\n      showRefreshIdleSpeed:true\n    });\n  }\n\n  getLatestAvailableVersion(){\n    const statsVersions = globalConfigs.stats.versions;\n    let latestVersion = null;\n    Object.keys(statsVersions).forEach( version => {\n      const versionInfo = statsVersions[version];\n      if (versionInfo.enabledStrategies.includes(this.props.selectedStrategy)){\n        latestVersion = version;\n      }\n    });\n\n    return latestVersion;\n  }\n\n  getVersionInfo(version){\n    if (!version){\n      version = this.state.idleVersion;\n    }\n\n    if (!globalConfigs.stats.versions[version]){\n      return null;\n    }\n\n    const versionInfo = Object.assign({},globalConfigs.stats.versions[version]);\n\n    if (versionInfo.strategiesParams && versionInfo.strategiesParams[this.props.selectedStrategy]){\n      const versionInfoExtra = versionInfo.strategiesParams[this.props.selectedStrategy];\n      Object.keys(versionInfoExtra).forEach( param => {\n        versionInfo[param] = versionInfoExtra[param];\n      });\n    }\n\n    return versionInfo;\n  }\n\n  async loadParams() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    const newState = {};\n    const { match: { params } } = this.props;\n\n    const currentNetworkAvailableTokens = Object.keys(this.props.availableTokens);\n\n    if (!!params.customToken && currentNetworkAvailableTokens.indexOf(params.customToken.toUpperCase()) !== -1 ){\n      newState.selectedToken = params.customToken.toUpperCase();\n    } else {\n      newState.selectedToken = this.props.selectedToken.toUpperCase();\n    }\n\n    newState.tokenConfig = this.props.availableTokens[newState.selectedToken];\n    newState.minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp,'YYYY-MM-DD');\n    newState.maxEndDate = moment();\n\n    newState.endTimestampObj = moment(moment().format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    newState.latestVersion = this.getLatestAvailableVersion();\n    newState.idleVersion = this.state.idleVersion === null ? newState.latestVersion : this.state.idleVersion;\n\n    const versionInfo = this.getVersionInfo(newState.idleVersion);\n\n    // console.log('loadParams',newState.latestVersion,newState.idleVersion,versionInfo);\n\n    if (newState.idleVersion && versionInfo.endTimestamp){\n      const newEndTimestampObj = moment(moment(versionInfo.endTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.endTimestampObj.isAfter(newEndTimestampObj)){\n        newState.endTimestampObj = newEndTimestampObj;\n        newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n      }\n\n      if (!newState.maxEndDate || newState.maxEndDate.isAfter(newEndTimestampObj)){\n        newState.maxEndDate = newEndTimestampObj;\n      }\n    }\n\n    newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n\n    // Set start date\n    newState.startTimestampObj = newState.endTimestampObj.clone().subtract(1,'month');\n    newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n\n    if (newState.idleVersion && versionInfo.startTimestamp){\n      const newStartTimestampObj = moment(moment(versionInfo.startTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.startTimestampObj.isBefore(newStartTimestampObj)){\n        newState.startTimestampObj = newStartTimestampObj;\n        newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n      }\n\n      if (newState.minStartTime.isBefore(newStartTimestampObj)){\n        newState.minStartTime = newStartTimestampObj;\n      }\n    }\n\n    newState.minDate = newState.minStartTime._d;\n    newState.maxDate = newState.maxEndDate._d;\n\n    if (newState !== this.state){\n      await this.setStateSafe(newState);\n    }\n  }\n\n  setDateRange = (ranges,quickSelection=null) => {\n\n    const minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp);\n\n    let startTimestampObj = moment(ranges.startDate).isSameOrAfter(minStartTime) ? moment(ranges.startDate) : minStartTime;\n    let endTimestampObj = moment(ranges.endDate);\n\n    if (startTimestampObj.isSame(endTimestampObj)){\n      endTimestampObj.add(1,'day');\n    }\n\n    endTimestampObj = moment(endTimestampObj.format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    if (startTimestampObj.isBefore(this.state.minStartTime)){\n      startTimestampObj = this.state.minStartTime;\n    }\n\n    if (endTimestampObj.isAfter(this.state.maxEndDate)){\n      endTimestampObj = this.state.maxEndDate;\n    }\n\n    const startTimestamp = parseInt(startTimestampObj._d.getTime()/1000);\n    const endTimestamp = parseInt(endTimestampObj._d.getTime()/1000);\n\n    const newState = {\n      minStartTime,\n      endTimestamp,\n      quickSelection,\n      startTimestamp,\n      endTimestampObj,\n      startTimestampObj\n    };\n\n    this.setStateSafe(newState);\n\n    return newState;\n  }\n\n  toggleAdvancedCharts = (e) => {\n    e.preventDefault();\n    this.setStateSafe({\n      showAdvanced:!this.state.showAdvanced\n    });\n  }\n\n  setDateRangeModal = (dateRangeModalOpened) => {\n    if (dateRangeModalOpened !== this.state.dateRangeModalOpened){\n      this.setStateSafe({\n        dateRangeModalOpened\n      });\n    }\n  }\n\n  async componentDidMount() {\n\n    if (!this.props.web3){\n      this.props.initWeb3();\n      return false;\n    }\n\n    /*\n    const style = document.createElement('style');\n    style.id = 'crisp-custom-style';\n    style.type = 'text/css';\n    style.innerHTML = `\n    .crisp-client{\n      display:none !important;\n    }`;\n    document.body.appendChild(style);\n    */\n\n    this.loadUtils();\n    await this.loadParams();\n    this.loadApiData();\n    this.loadCarousel();\n  }\n\n  loadCarousel(){\n    const carouselMax = this.props.isMobile ? 3 : 2;\n    this.setStateSafe({\n      carouselMax\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const strategyChanged = prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    const dateChanged = prevState.startTimestamp !== this.state.startTimestamp || prevState.endTimestamp !== this.state.endTimestamp;\n    const versionChanged = prevState.idleVersion !== this.state.idleVersion;\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n\n    if (mobileChanged){\n      this.loadCarousel();\n    }\n\n    if (contractsInitialized || tokenChanged || strategyChanged || versionChanged){\n      // console.log('componentDidUpdate',this.props.selectedStrategy,this.props.selectedToken);\n      await this.componentDidMount();\n    } else if (dateChanged){\n      this.loadApiData();\n    }\n  }\n\n  filterTokenData = (apiResults) => {\n    return apiResults.filter((r,i) => {\n      return (!this.state.startTimestamp || r.timestamp >= this.state.startTimestamp) && (!this.state.endTimestamp || r.timestamp <= this.state.endTimestamp);\n    });\n  }\n\n  setIdleVersion = idleVersion => {\n    this.setStateSafe({\n      idleVersion\n    });\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    // Get COMP APR\n    // const compAPR = await this.functionsUtil.getCompAPR(this.props.tokenConfig);\n    // console.log('compAPR',compAPR.toString());\n\n    const startTimestamp = this.state.minDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.minDate).format('DD/MM/YYYY 00:00:00'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n    const endTimestamp = this.state.maxDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.maxDate).format('DD/MM/YYYY 23:59:59'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n\n    const isRisk = ['v3','v4'].includes(this.state.idleVersion) && this.props.selectedStrategy === 'risk';\n    let apiResults_unfiltered = await this.functionsUtil.getTokenApiData(this.props.tokenConfig.address,isRisk,startTimestamp,endTimestamp,true,7200);\n\n    const apiResults = this.filterTokenData(apiResults_unfiltered);\n\n    // console.log('loadApiData',startTimestamp,endTimestamp,new Date(startTimestamp*1000),new Date(endTimestamp*1000),apiResults,apiResults_unfiltered);\n\n    if (!apiResults || !apiResults_unfiltered || !apiResults.length || !apiResults_unfiltered.length){\n      return false;\n    }\n\n    const firstResult = apiResults[0];\n    const lastResult = Object.values(apiResults).pop();\n\n    window.moment = moment;\n\n    let days = (lastResult.timestamp-firstResult.timestamp)/86400;\n    if (days === 0){\n      days = 1;\n    }\n\n    let apr = null;\n    let delta = 'N/A';\n\n    const idleTokens = this.functionsUtil.fixTokenDecimals(lastResult.idleSupply,18);\n    const firstIdlePrice = this.functionsUtil.fixTokenDecimals(firstResult.idlePrice,this.props.tokenConfig.decimals);\n    const lastIdlePrice = this.functionsUtil.fixTokenDecimals(lastResult.idlePrice,this.props.tokenConfig.decimals);\n\n    // Calculate AUM\n    let aum = idleTokens.times(lastIdlePrice);\n\n    // Convert Token balance\n    aum = await this.functionsUtil.convertTokenBalance(aum,this.props.selectedToken,this.props.tokenConfig,isRisk);\n\n    const compoundInfo = this.props.tokenConfig.protocols.filter((p) => { return p.name === 'compound' })[0];\n    const firstCompoundData = compoundInfo ? firstResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n    const lastCompoundData = compoundInfo ? lastResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n\n    if (this.state.idleVersion === 'v4') {\n\n      apr = apiResults.reduce( (sum,r) => {\n        const idleRate = this.functionsUtil.fixTokenDecimals(r.idleRate,18);\n        return this.functionsUtil.BNify(sum).plus(idleRate);\n      },0);\n\n      // Calculate average\n      apr = apr.div(apiResults.length);\n\n      if (compoundInfo){\n        const compoundWithCOMPInfo = globalConfigs.stats.protocols.compoundWithCOMP;\n        const rateField = compoundWithCOMPInfo.rateField ? compoundWithCOMPInfo.rateField : 'rate';\n\n        let compoundAvgApr = apiResults.reduce( (sum,r) => {\n\n          const compoundData = r.protocolsData.find((pData,x) => {\n            return pData.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase()\n          });\n\n          let compoundRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n            if (compoundData && compoundData[field]){\n              return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(compoundData[field]));\n            }\n            return this.functionsUtil.BNify(acc);\n          },0) : this.functionsUtil.BNify(compoundData[rateField]);\n\n          compoundRate = this.functionsUtil.fixTokenDecimals(compoundRate,18);\n\n          return this.functionsUtil.BNify(sum).plus(compoundRate);\n        },0);\n\n        // Calculate average\n        compoundAvgApr = compoundAvgApr.div(apiResults.length);\n\n        // compoundAvgApr = this.functionsUtil.apr2apy(compoundAvgApr.div(100)).times(100);\n        // apr = this.functionsUtil.apr2apy(apr.div(100)).times(100);\n\n        delta = apr.minus(compoundAvgApr);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n\n      apr = apr.toFixed(2);\n\n    } else {\n      const earning = lastIdlePrice.div(firstIdlePrice).minus(1).times(100);\n      apr = earning.times(365).div(days).toFixed(2);\n\n      if (firstCompoundData && lastCompoundData){\n        const firstCompoundPrice = this.functionsUtil.fixTokenDecimals(firstCompoundData.price,this.props.tokenConfig.decimals);\n        const lastCompoundPrice = this.functionsUtil.fixTokenDecimals(lastCompoundData.price,this.props.tokenConfig.decimals);\n        const compoundApr = lastCompoundPrice.div(firstCompoundPrice).minus(1).times(100);\n        delta = earning.minus(compoundApr).times(365).div(days);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n    }\n\n    // Count rebalances\n    let rebalances = 0;\n    apiResults.forEach((row,index) => {\n      if (index){\n        const prevRow = apiResults[index-1];\n\n        const totalAllocation = row.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        const prevTotalAllocation = prevRow.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        let hasRebalanced = false;\n        row.protocolsData.forEach( p => {\n          if (hasRebalanced){\n            return;\n          }\n          const prevP = prevRow.protocolsData.find( prevP => (prevP.protocolAddr.toLowerCase() === p.protocolAddr.toLowerCase()) );\n          const allocation = this.functionsUtil.fixTokenDecimals(p.allocation,this.props.tokenConfig.decimals);\n          const prevAllocation = prevP ? this.functionsUtil.fixTokenDecimals(prevP.allocation,this.props.tokenConfig.decimals) : this.functionsUtil.BNify(0);\n          const allocationPerc = parseInt(parseFloat(allocation.div(totalAllocation).times(100)));\n          const prevAllocationPerc = parseInt(parseFloat(prevAllocation.div(prevTotalAllocation).times(100)));\n          if (allocationPerc!==prevAllocationPerc){\n            rebalances++;\n            hasRebalanced = true;\n          }\n        });\n      }\n    });\n\n    // Add gov tokens balance to AUM\n    const availableTokens = {};\n    availableTokens[this.props.selectedToken] = this.props.tokenConfig;\n    const govTokensPool = await this.functionsUtil.getGovTokenPool(null,availableTokens,'DAI');\n    if (govTokensPool){\n      aum = aum.plus(govTokensPool);\n    }\n\n    // Format AUM\n    /*\n    aum = this.functionsUtil.formatMoney(parseFloat(aum));\n\n    const conversionRateField = this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'conversionRateField']);\n    if (conversionRateField){\n      aum += ' $';\n    }\n    */\n\n    let unlentBalance = await this.functionsUtil.getUnlentBalance(this.props.tokenConfig);\n    if (unlentBalance){\n      unlentBalance = this.functionsUtil.formatMoney(parseFloat(unlentBalance));\n    }\n\n    this.setStateSafe({\n      aum,\n      apr,\n      days,\n      delta,\n      apiResults,\n      rebalances,\n      govTokensPool,\n      unlentBalance,\n      apiResults_unfiltered\n    });\n  }\n\n  selectToken = async (strategy,token) => {\n    await this.props.setStrategyToken(strategy,token);\n    this.props.changeToken(token);\n  }\n\n  handleCarousel = action => {\n    let carouselIndex = this.state.carouselIndex;\n    if (action==='next' && carouselIndex<this.state.carouselMax){\n      carouselIndex++;\n    } else if (action==='back' && carouselIndex>0){\n      carouselIndex--;\n    }\n\n    const $element = window.jQuery(`#carousel-cursor > div:eq(${carouselIndex})`);\n    const carouselOffsetLeft = -parseFloat($element.position().left)+'px';\n\n    this.setStateSafe({\n      carouselIndex,\n      carouselOffsetLeft\n    });\n  }\n\n  render() {\n\n    const valueProps = {\n      lineHeight:1,\n      fontSize:[4,5],\n      fontWeight:[3,4],\n      color:'statValue'\n    };\n\n    const unitProps = {\n      ml:2,\n      lineHeight:1,\n      fontWeight:[2,3],\n      color:'statValue',\n      fontSize:[3,'23px'],\n    };\n\n    const networkId = this.functionsUtil.getRequiredNetworkId();\n    const idleTokenAvailableNetworks = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','availableNetworks']);\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']) && idleTokenAvailableNetworks.includes(networkId);\n    const refreshIdleSpeedConfig = this.functionsUtil.getGlobalConfig(['contract','methods','refreshIdleSpeed']);\n    const refreshIdleSpeedEnabled = refreshIdleSpeedConfig.enabled && refreshIdleSpeedConfig.availableNetworks.includes(networkId);\n\n    const apyLong = this.functionsUtil.getGlobalConfig(['messages','apyLong']);\n\n    if (!this.props.availableStrategies){\n      return (\n        <FlexLoader\n          textProps={{\n            textSize:4,\n            fontWeight:2\n          }}\n          loaderProps={{\n            mb:3,\n            size:'40px'\n          }}\n          flexProps={{\n            minHeight:'50vh',\n            flexDirection:'column'\n          }}\n          text={'Loading assets...'}\n        />\n      );\n    }\n\n    const statsTokens = this.functionsUtil.getGlobalConfig(['stats','tokens']);\n\n    if (!this.props.selectedToken){\n      const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n      const enabledTokens = [];\n      const statsProtocols = this.functionsUtil.getGlobalConfig(['stats','protocols']);\n\n      Object.keys(statsTokens).forEach(token => {\n        const tokenInfo = statsTokens[token];\n        if (tokenInfo.enabled){\n          enabledTokens.push(token);\n        }\n      });\n      return (\n        <Flex\n          mb={3}\n          width={1}\n          flexDirection={'column'}\n        >\n          <AssetsUnderManagement\n            {...this.props}\n            loaderAlign={'flex-end'}\n          />\n          {\n            Object.keys(strategies).map(strategy => {\n              const strategyInfo = strategies[strategy];\n              const availableTokens = this.props.availableStrategies[strategy];\n\n              if (!availableTokens || !Object.keys(availableTokens).length){\n                return false;\n              }\n              \n              // Get available protocols name\n              const availableProtocolsKeys = [];\n              Object.keys(availableTokens).forEach( token => {\n                availableTokens[token].protocols.forEach( protocolInfo => {\n                  if (availableProtocolsKeys.indexOf(protocolInfo.name)<0){\n                    availableProtocolsKeys.push(protocolInfo.name);\n                  }\n                });\n              });\n\n              const availableProtocols = availableProtocolsKeys.map( protocolName => {\n                return statsProtocols[protocolName];\n              },{});\n\n              return (\n                <Box\n                  mb={2}\n                  width={1}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                  key={`strategy-container-${strategy}`}\n                >\n                  <Title\n                    mt={3}\n                    mb={[3,4]}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'baseline'}\n                      justifyContent={'center'}\n                    >\n                      {strategyInfo.title}\n                      {\n                        strategyInfo.titlePostfix &&\n                          <Text\n                            ml={2}\n                            fontWeight={3}\n                            fontSize={[2,4]}\n                            color={'dark-gray'}\n                          >\n                            {strategyInfo.titlePostfix}\n                          </Text>\n                      }\n                    </Flex>\n                  </Title>\n                  <AssetsList\n                    enabledTokens={enabledTokens}\n                    handleClick={(props) => this.selectToken(strategy,props.token)}\n                    cols={[\n                      {\n                        title:'CURRENCY',\n                        props:{\n                          width:[0.26,0.15]\n                        },\n                        fields:[\n                          {\n                            name:'icon',\n                            props:{\n                              mr:2,\n                              height:['1.4em','2.3em']\n                            }\n                          },\n                          {\n                            name:'tokenName'\n                          }\n                        ]\n                      },\n                      {\n                        title:'POOL',\n                        props:{\n                          width:[0.22,0.15],\n                        },\n                        fields:[\n                          {\n                            name:'allocationChart',\n                            mobile:false,\n                            parentProps:{\n                              width:0.3\n                            },\n                            style:{\n                              overflow:'visible'\n                            },\n                            showLoader:false,\n                          },\n                          {\n                            name:'pool',\n                            props:{\n                              ml:1\n                            },\n                            parentProps:{\n                              width:[1,0.7]\n                            }\n                          }\n                        ]\n                      },\n                      {\n                        title:'APY',\n                        desc:apyLong,\n                        props:{\n                          width: [0.29,0.15],\n                        },\n                        parentProps:{\n                          flexDirection:'column',\n                          alignItems:'flex-start',\n                        },\n                        fields:[\n                          {\n                            name:'apy',\n                            showTooltip:true\n                          },\n                          {\n                            name:'idleDistribution',\n                            showLoader:false,\n                            props:{\n                              decimals:this.props.isMobile ? 1 : 2,\n                              fontSize:this.props.isMobile ? '9px' : 0\n                            }\n                          },\n                        ]\n                      },\n                      {\n                        title:'FARMING',\n                        desc:this.functionsUtil.getGlobalConfig(['messages','yieldFarming']),\n                        mobile:false,\n                        props:{\n                          width:[0.27,0.14],\n                        },\n                        fields:[\n                          {\n                            name:'govTokens'\n                          }\n                        ]\n                      },\n                      {\n                        title:'APR LAST WEEK',\n                        mobile:false,\n                        props:{\n                          width: 0.25,\n                        },\n                        parentProps:{\n                          width:1,\n                          pr:[2,4]\n                        },\n                        fields:[\n                          {\n                            name:'aprChart',\n                            style:{\n                              overflow:'visible',\n                            },\n                          }\n                        ]\n                      },\n                      {\n                        title:'',\n                        props:{\n                          width:[0.23,0.16],\n                        },\n                        parentProps:{\n                          width:1\n                        },\n                        fields:[\n                          {\n                            name:'button',\n                            label:this.props.isMobile ? 'View' : 'View stats',\n                            props:{\n                              width:1,\n                              fontSize:3,\n                              fontWeight:3,\n                              height:'45px',\n                              borderRadius:4,\n                              boxShadow:null,\n                              mainColor:'redeem',\n                              size: this.props.isMobile ? 'small' : 'medium',\n                              handleClick:(props) => this.selectToken(strategy,props.token)\n                            }\n                          }\n                        ]\n                      }\n                    ]}\n                    {...this.props}\n                    selectedStrategy={strategy}\n                    availableTokens={availableTokens}\n                  />\n                  {\n                    !this.props.isMobile &&\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'flex-end'}\n                      >\n                        {\n                          availableProtocols.filter( p => p.legend ).map( (p,index) => (\n                            <Flex\n                              mr={3}\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              key={`legend_${index}`}\n                            >\n                              <Box\n                                mr={1}\n                                width={'10px'}\n                                height={'10px'}\n                                borderRadius={'50%'}\n                                backgroundColor={`rgb(${p.color.rgb.join(',')})`}\n                              >\n                              </Box>\n                              <Text.span\n                                fontSize={1}\n                                color={'cellText'}\n                              >\n                                {p.label}\n                              </Text.span>\n                            </Flex>\n                          ))\n                        }\n                      </Flex>\n                  }\n                </Box>\n              );\n            })\n          }\n          {\n            idleTokenEnabled && refreshIdleSpeedEnabled && !this.state.showRefreshIdleSpeed ? (\n              <Flex\n                mb={4}\n                width={1}\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <Link\n                  hoverColor={'primary'}\n                  onClick={this.showRefreshIdleSpeed.bind(this)}\n                >\n                  Refresh Idle Speed\n                </Link>\n              </Flex>\n            ) : idleTokenEnabled && refreshIdleSpeedEnabled && this.state.showRefreshIdleSpeed &&\n              <DashboardCard\n                cardProps={{\n                  p:2,\n                  mb:4,\n                  width:1,\n                  mt:[2,3],\n                }}\n                isActive={true}\n                isInteractive={false}\n              >\n                <Flex\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                >\n                  <Text\n                    fontWeight={500}\n                    color={'flashColor'}\n                    textAlign={'center'}\n                    fontSize={[1,'15px']}\n                  >\n                    By executing this transaction you can adjust the IDLE distribution speed among the pools.\n                  </Text>\n                  <ExecuteTransaction\n                    action={'Refresh'}\n                    Component={Button}\n                    parentProps={{\n                      mt:1\n                    }}\n                    componentProps={{\n                      size:'small',\n                      mainColor:'blue',\n                      value:'REFRESH IDLE SPEED'\n                    }}\n                    params={[]}\n                    contractName={'IdleController'}\n                    methodName={'refreshIdleSpeeds'}\n                    {...this.props}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'center'}\n                      justifyContent={'center'}\n                    >\n                      <Icon\n                        mr={1}\n                        name={'Done'}\n                        size={'1.4em'}\n                        color={this.props.theme.colors.transactions.status.completed}\n                      />\n                      <Text\n                        fontWeight={500}\n                        fontSize={'15px'}\n                        color={'copyColor'}\n                        textAlign={'center'}\n                      >\n                        Idle Speed Refreshed\n                      </Text>\n                    </Flex>\n                  </ExecuteTransaction>\n                </Flex>\n              </DashboardCard>\n          }\n        </Flex>\n      );\n    } else {\n\n      const tokenConfig = statsTokens[this.props.selectedToken];\n\n      const versionsOptions = Object.keys(globalConfigs.stats.versions).filter( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return versionInfo.enabledTokens.includes(this.props.selectedToken) && versionInfo.enabledStrategies.includes(this.props.selectedStrategy);\n      }).map( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return {\n          value:version,\n          label:versionInfo.label\n        }\n      });\n\n      // const disabledCharts = tokenConfig.disabledCharts || [];\n\n      const versionInfo = this.getVersionInfo(this.state.idleVersion);\n\n      let performanceTooltip = null;\n      if (this.state.idleVersion && versionInfo){\n        const showPerformanceTooltip = this.functionsUtil.getGlobalConfig(['stats','versions',this.state.idleVersion,'showPerformanceTooltip']);\n        performanceTooltip = showPerformanceTooltip ? this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'performanceTooltip']) : null;\n      }\n\n      const versionDefaultValue = versionsOptions.find( v => (v.value === this.state.idleVersion) );\n\n      return (\n        <Flex\n          p={0}\n          width={1}\n          flexDirection={'column'}\n        >\n          {\n          /*\n          }\n          <Flex position={['absolute','relative']} left={0} px={[3,0]} zIndex={10} width={1} flexDirection={'row'} mb={[0,3]}>\n            <Flex alignItems={'center'} width={[2/3,1/2]}>\n              <RouterLink to=\"/\">\n                <Image src=\"images/logo-gradient.svg\"\n                  height={['35px','48px']}\n                  position={'relative'} />\n              </RouterLink>\n              <Heading.h3 color={'dark-gray'} textAlign={'left'} fontWeight={3} lineHeight={'initial'} fontSize={[4,5]} ml={[1,2]}>\n                <Text.span fontSize={'80%'}>|</Text.span> Stats\n              </Heading.h3>\n            </Flex>\n            <Flex flexDirection={'row'} width={[1/3,1/2]} justifyContent={'flex-end'} alignItems={'center'}>\n              {\n                this.state.buttonGroups && \n                  this.props.isMobile ? (\n                    <ButtonGroup\n                      isMobile={this.props.isMobile}\n                      components={ this.state.buttonGroups.reduce((components,array) => components.concat(array),[]) }\n                      theme={'light'}\n                    />\n                  ) :\n                  this.state.buttonGroups.map((buttonGroup,i) => (\n                    <ButtonGroup\n                      key={`buttonGroup_${i}`}\n                      isMobile={this.props.isMobile}\n                      components={buttonGroup}\n                      theme={'light'}\n                    />\n                  ))\n              }\n            </Flex>\n          </Flex>\n          */\n          }\n          <Box\n            mb={[3,4]}\n          >\n            <Flex\n              flexDirection={['column','row']}\n            >\n              <Flex\n                width={[1,0.4]}\n              >\n                <Breadcrumb\n                  {...this.props}\n                  showPathMobile={true}\n                  text={'ASSETS OVERVIEW'}\n                  isMobile={this.props.isMobile}\n                  handleClick={ e => this.props.goToSection('stats') }\n                  path={[this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])]}\n                />\n              </Flex>\n              <Flex\n                mt={[3,0]}\n                width={[1,0.6]}\n                flexDirection={['column','row']}\n                justifyContent={['center','space-between']}\n              >\n                <Flex\n                  width={[1,0.26]}\n                  flexDirection={'column'}\n                >\n                  <GenericSelector\n                    innerProps={{\n                      p:1,\n                      height:['100%','46px'],\n                    }}\n                    name={'idle-version'}\n                    options={versionsOptions}\n                    defaultValue={versionDefaultValue}\n                    onChange={ v => this.setIdleVersion(v) }\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.3]}\n                  flexDirection={'column'}\n                >\n                  <AssetSelector\n                    innerProps={{\n                      p:1\n                    }}\n                    {...this.props}\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.39]}\n                  flexDirection={'column'}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:1,\n                      display:'flex',\n                      alignItems:'center',\n                      height:['46px','100%'],\n                      justifyContent:'center'\n                    }}\n                    isInteractive={true}\n                    handleClick={ e => this.setDateRangeModal(true) }\n                  >\n                    <Text\n                      fontWeight={3}\n                      color={'copyColor'}\n                    >\n                    {\n                      this.state.quickSelection\n                      ?\n                        this.quickSelections[this.state.quickSelection].label\n                      : this.state.startTimestampObj && this.state.endTimestampObj &&\n                        `${this.state.startTimestampObj.format('DD/MM/YY')} - ${this.state.endTimestampObj.format('DD/MM/YY')}`\n                    }\n                    </Text>\n                  </DashboardCard>\n                </Flex>\n              </Flex>\n            </Flex>\n          </Box>\n          {\n            !tokenConfig.enabled ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'DoNotDisturb'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Stats for {this.props.selectedToken} are not available!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : this.state.idleVersion && this.functionsUtil.strToMoment(versionInfo.startTimestamp).isAfter(Date.now()) ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'AccessTime'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Idle Stats {this.state.idleVersion} will be available shortly!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : this.functionsUtil.strToMoment(tokenConfig.startTimestamp).isAfter(Date.now()) ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'AccessTime'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Stats for {this.props.selectedToken} will be available shortly!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : (\n              <Box\n                width={1}\n              >\n                <Box\n                  mt={[3,0]}\n                  mb={[3,4]}\n                >\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    justifyContent={'center'}\n                    flexDirection={['column','row']}\n                  >\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Asset Under Management'}\n                        label={ this.state.unlentBalance ? `Unlent funds: ${this.state.unlentBalance} ${this.props.selectedToken}` : this.props.selectedToken }\n                        labelTooltip={ this.state.unlentBalance ? this.functionsUtil.getGlobalConfig(['messages','cheapRedeem']) : null}\n                      >\n                        <SmartNumber\n                          precision={2}\n                          type={'money'}\n                          {...valueProps}\n                          unitProps={unitProps}\n                          number={this.state.aum}\n                          flexProps={{\n                            alignItems:'baseline',\n                            justifyContent:'flex-start'\n                          }}\n                          unit={this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'conversionRateField']) ? '$' : null}\n                        />\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Avg APY'}\n                        label={'Annualized'}\n                      >\n                        <Flex\n                          width={1}\n                          alignItems={'center'}\n                          flexDirection={['column','row']}\n                        >\n                          <VariationNumber\n                            direction={'up'}\n                            iconPos={'right'}\n                            iconSize={'1.8em'}\n                            justifyContent={'flex-start'}\n                            width={1}\n                            >\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                              fontSize={[4,5]}\n                            >\n                              {this.state.apr}\n                              <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                            </Text>\n                          </VariationNumber>\n                        </Flex>\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Overperformance on Compound'}\n                        label={'Annualized'}\n                      >\n                        {\n                          this.state.delta && !isNaN(this.state.delta) ? (\n                            <VariationNumber\n                              direction={'up'}\n                              iconPos={'right'}\n                              iconSize={'1.8em'}\n                              justifyContent={'flex-start'}\n                              >\n                              <Text\n                                lineHeight={1}\n                                fontSize={[4,5]}\n                                fontWeight={[3,4]}\n                                color={'statValue'}\n                              >\n                                {this.state.delta}\n                                <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                              </Text>\n                            </VariationNumber>\n                          ) : (\n                            <Text\n                              lineHeight={1}\n                              fontSize={[4,5]}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                            >\n                              {this.state.delta}\n                            </Text>\n                          )\n                        }\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        label={' '}\n                        title={'Rebalances'}\n                        value={this.state.rebalances.toString()}\n                      />\n                    </Flex>\n                    {\n                    /*\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Current APR</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.currApr}\n                            <Text.span color={'copyColor'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Days Live</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.days}\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    */\n                    }\n                  </Flex>\n                </Box>\n\n                <DashboardCard\n                  title={'Historical Performance'}\n                  description={performanceTooltip}\n                  cardProps={{\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex id='chart-PRICE' width={1} mb={3}>\n                    <StatsChart\n                      height={ 350 }\n                      {...this.state}\n                      parentId={'chart-PRICE'}\n                      theme={this.props.theme}\n                      isMobile={this.props.isMobile}\n                      contracts={this.props.contracts}\n                      themeMode={this.props.themeMode}\n                      apiResults={this.state.apiResults}\n                      idleVersion={this.state.idleVersion}\n                      selectedToken={this.props.selectedToken}\n                      apiResults_unfiltered={this.state.apiResults_unfiltered}\n                      chartMode={this.state.idleVersion === this.state.latestVersion ? 'PRICE_V4' : 'PRICE'}\n                    />\n                  </Flex>\n                </DashboardCard>\n\n                <DashboardCard\n                  cardProps={{\n                    pb:3,\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex\n                    flexDirection={['column','row']}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      this.state.idleVersion === this.state.latestVersion && \n                      <Flex\n                        pt={2}\n                        width={[1,1/3]}\n                        id={'allocation-chart'}\n                        flexDirection={'column'}\n                        alignItems={'flex-start'}\n                        justifyContent={'flex-start'}\n                      >\n                        <AllocationChart\n                          height={310}\n                          {...this.props}\n                          parentId={'allocation-chart'}\n                        />\n                        <Rebalance\n                          {...this.props}\n                        />\n                      </Flex>\n                    }\n                    <Flex\n                      mb={[0,3]}\n                      id={'chart-ALL'}\n                      pl={[0,this.state.idleVersion === this.state.latestVersion ? 0 : 3]}\n                      width={[1, this.state.idleVersion === this.state.latestVersion ? 2/3 : 1]}\n                    >\n                      <Flex alignItems={'flex-start'} justifyContent={'flex-start'} flexDirection={'column'} width={1}>\n                        <Heading.h4\n                          mb={2}\n                          ml={3}\n                          mt={[3,4]}\n                          fontWeight={4}\n                          fontSize={[2,3]}\n                          textAlign={'left'}\n                          color={'dark-gray'}\n                          lineHeight={'initial'}\n                        >\n                          Allocations over time\n                        </Heading.h4>\n                        <StatsChart\n                          height={350}\n                          {...this.state}\n                          chartMode={'ALL'}\n                          parentId={'chart-ALL'}\n                          theme={this.props.theme}\n                          isMobile={this.props.isMobile}\n                          themeMode={this.props.themeMode}\n                          contracts={this.props.contracts}\n                          apiResults={this.state.apiResults}\n                          idleVersion={this.state.idleVersion}\n                          apiResults_unfiltered={this.state.apiResults_unfiltered}\n                        />\n                      </Flex>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n\n                <Flex\n                  position={'relative'}\n                >\n                  <Flex\n                    width={1}\n                    id={'carousel-container'}\n                    justifyContent={'flex-end'}\n                  >\n                    <RoundIconButton\n                      buttonProps={{\n                        mr:3\n                      }}\n                      iconName={'ArrowBack'}\n                      disabled={this.state.carouselIndex === 0}\n                      handleClick={ e => this.handleCarousel('back') }\n                    />\n                    <RoundIconButton\n                      iconName={'ArrowForward'}\n                      handleClick={ e => this.handleCarousel('next') }\n                      disabled={this.state.carouselIndex === this.state.carouselMax}\n                    />\n                  </Flex>\n                  <Flex\n                    mt={5}\n                    height={'400px'}\n                    position={'absolute'}\n                    id={'carousel-cursor'}\n                    width={['444%','200%']}\n                    justifyContent={'flex-start'}\n                    left={this.state.carouselOffsetLeft}\n                    style={{\n                      transition:'left 0.3s ease-in-out'\n                    }}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        id='chart-AUM'\n                      >\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            ml={3}\n                            mt={3}\n                            mb={2}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Asset Under Management\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'AUM'}\n                            parentId={'chart-AUM'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-APR' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            APRs\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'APR'}\n                            parentId={'chart-APR'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    {\n                      /*\n                      !disabledCharts.includes('score') &&\n                        <DashboardCard\n                          cardProps={{\n                            mr:4,\n                            height:'fit-content',\n                            style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                          }}\n                          title={'Risk Score'}\n                          description={'Idle Risk Score is a weighted average of the underlying protocols risks assessed by DeFi Score'}\n                          titleParentProps={{\n                            ml:16,\n                            mt:16\n                          }}\n                        >\n                          <Flex id='chart-SCORE' width={1}>\n                            <Flex\n                              mb={3}\n                              width={1}\n                              flexDirection={'column'}\n                              alignItems={'flex-start'}\n                              justifyContent={'center'}\n                            >\n                              <StatsChart\n                                height={300}\n                                {...this.state}\n                                chartMode={'SCORE'}\n                                parentId={'chart-SCORE'}\n                                theme={this.props.theme}\n                                isMobile={this.props.isMobile}\n                                themeMode={this.props.themeMode}\n                                contracts={this.props.contracts}\n                                apiResults={this.state.apiResults}\n                                idleVersion={this.state.idleVersion}\n                                apiResults_unfiltered={this.state.apiResults_unfiltered}\n                              />\n                            </Flex>\n                          </Flex>\n                        </DashboardCard>\n                        */\n                    }\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-VOL' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Volume\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'VOL'}\n                            parentId={'chart-VOL'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                </Flex>\n              </Box>\n            )\n          }\n          <DateRangeModal\n            {...this.props}\n            minDate={this.state.minDate}\n            maxDate={this.state.maxDate}\n            handleSelect={this.setDateRange}\n            quickSelections={this.quickSelections}\n            isOpen={this.state.dateRangeModalOpened}\n            closeModal={e => this.setDateRangeModal(false)}\n            startDate={this.state.startTimestampObj ? this.state.startTimestampObj._d : null}\n            endDate={this.state.endTimestampObj ? this.state.endTimestampObj._d : null}\n          />\n        </Flex>\n      );\n    }\n  }\n}\n\nexport default Stats;","import Title from '../Title/Title';\nimport IconBox from '../IconBox/IconBox';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport { Flex, Icon, Text, Box, Image } from \"rimble-ui\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass Utils extends Component {\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    const SubComponent = this.props.selectedSubsection && this.props.selectedSubsection.subComponent ? this.props.selectedSubsection.subComponent : null;\n    const viewOnly = this.props.connectorName === 'custom';\n    const showBreadCrumb = typeof this.props.showBreadCrumb !== 'undefined' ? this.props.showBreadCrumb : true;\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.props.selectedSubsection ? (\n            <Box\n              width={1}\n            >\n              {\n                showBreadCrumb && (\n                  <Flex\n                    width={1}\n                  >\n                    <Breadcrumb\n                      {...this.props}\n                      showPathMobile={true}\n                      isMobile={this.props.isMobile}\n                      path={[this.props.selectedSubsection.label]}\n                      text={this.props.selectedSection.label.toUpperCase()}\n                      handleClick={ e => this.props.goToSection(this.props.selectedSection.route) }\n                    />\n                  </Flex>\n                )\n              }\n              <Flex\n                my={[2,3]}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <Title\n                  mb={2}\n                >\n                  {this.props.selectedSubsection.label}\n                </Title>\n                <Text\n                  textAlign={'center'}\n                  dangerouslySetInnerHTML={{\n                    __html:this.props.selectedSubsection.desc\n                  }}\n                >\n                </Text>\n              </Flex>\n              <SubComponent\n                {...this.props}\n                {...this.props.selectedSubsection.directProps}\n                toolProps={this.props.selectedSubsection.props}\n              />\n            </Box>\n          ) : (\n            <Flex\n              my={[2,3]}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Title\n                mb={3}\n              >\n                Tools\n              </Title>\n              <Flex\n                width={1}\n                style={{\n                  flexWrap:'wrap'\n                }}\n                justifyContent={viewOnly ? 'center' : 'flex-start'}\n              >\n              {\n                viewOnly ? (\n                  <IconBox\n                    cardProps={{\n                      maxWidth:[1,'35em']\n                    }}\n                    icon={'Visibility'}\n                    text={'You are using Idle in \"Read-Only\" mode.<br />Logout and connect with your wallet to interact.'}\n                  />\n                ) : this.props.selectedSection.submenu.map( (tool,toolIndex) => (\n                  <DashboardCard\n                    isInteractive={true}\n                    key={`tool_${toolIndex}`}\n                    cardProps={{\n                      p:[3,4],\n                      mb:[3,3],\n                      mr:[0,'2%'],\n                      style:{\n                        flex: this.props.isMobile ? '1 1 100%' : '0 0 31%'\n                      },\n                      alignItems:'center',\n                      flexDirection:'column',\n                      justifyContent:'center'\n                    }}\n                    handleClick={ e => this.props.goToSection(this.props.selectedSection.route+'/'+tool.route) }\n                  >\n                    <Text\n                      fontSize={[3,4]}\n                      textAlign={'center'}\n                    >\n                      {tool.label}\n                    </Text>\n                    <Flex\n                      justifyContent={'center'}\n                    >\n                      {\n                        tool.image ? (\n                          <Image\n                            my={[0,2]}\n                            height={'2.2em'}\n                            src={tool.image}\n                          />\n                        ) : tool.icon && (\n                          <Icon\n                            my={[0,2]}\n                            size={'3em'}\n                            name={tool.icon}\n                          />\n                        )\n                      }\n                    </Flex>\n                    <Text\n                      fontSize={[2,2]}\n                      textAlign={'center'}\n                      dangerouslySetInnerHTML={{\n                        __html:tool.desc\n                      }}\n                    >\n                    </Text>\n                  </DashboardCard>\n                ) )\n              }\n              </Flex>\n            </Flex>\n          )\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default Utils;\n","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Heading, Text, Tooltip, Icon } from \"rimble-ui\";\nimport PortfolioEquity from '../PortfolioEquity/PortfolioEquity';\n\nclass FundsOverview extends Component {\n\n  state = {\n    // govTokensAprs:null,\n    aggregatedValues:[],\n    govTokensTotalApr:null,\n    govTokensUserBalance:null,\n    govTokensDistribution:null,\n    govTokensTotalBalance:null,\n    govTokensTotalAprTooltip:null,\n    idleTokenUserDistribution:null,\n    govTokensDistributionTooltip:null,\n    govTokensTotalBalanceTooltip:null\n  };\n\n  // Utils\n  functionsUtil = null;\n  idleGovToken = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    this.idleGovToken = this.functionsUtil.getIdleGovToken();\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const isRisk = this.props.selectedStrategy === 'risk';\n\n    const [\n      // govTokensAprs,\n      idleTokenUserDistribution,\n      govTokensUserBalance,\n      apy,\n      depositTimestamp,\n      days\n    ] = await Promise.all([\n      // this.functionsUtil.getGovTokensAprs(this.props.selectedToken,this.props.tokenConfig),\n      this.idleGovToken.getUserDistribution(this.props.account,govTokenAvailableTokens,true),\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,null),\n      this.functionsUtil.loadAssetField('apy',this.props.selectedToken,this.props.tokenConfig,this.props.account,false),\n      this.functionsUtil.loadAssetField('depositTimestamp',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    let avgAPY = await this.functionsUtil.getAvgAPYStats(this.props.tokenConfig.address,isRisk,depositTimestamp);\n\n    if (!avgAPY || this.functionsUtil.BNify(avgAPY).lte(0)){\n      avgAPY = apy;\n    }\n\n    const govTokensTotalBalance = govTokensUserBalance ? Object.values(govTokensUserBalance).reduce( (totBalance,govTokenBalance) => {\n      return totBalance.plus(this.functionsUtil.BNify(govTokenBalance));\n    },this.functionsUtil.BNify(0)) : null;\n\n    const govTokensTotalBalanceTooltip = govTokensUserBalance ? Object.keys(govTokensUserBalance).map( govToken => {\n      const balance = govTokensUserBalance[govToken];\n      if (balance.gt(0)){\n        return `+${balance.toFixed(2)} ${govToken}`;\n      } else {\n        return null;\n      }\n    }).filter(v => (v !== null)) : null;\n\n    // console.log(govTokensTotalBalance,govTokensUserBalance,govTokensTotalBalanceTooltip);\n\n    // const govTokensTotalApr = govTokensAprs ? Object.values(govTokensAprs).reduce( (totApr,govTokenApr) => {\n    //   return totApr.plus(this.functionsUtil.BNify(govTokenApr));\n    // },this.functionsUtil.BNify(0)) : null;\n\n    // const govTokensTotalAprTooltip = govTokensAprs ? Object.keys(govTokensAprs).map( govToken => {\n    //   const apr = govTokensAprs[govToken];\n    //   if (apr.gt(0)){\n    //     return `${govToken}: ${apr.toFixed(2)}%`;\n    //   }\n    //   return null;\n    // }).filter(v => (v !== null)) : null;\n\n    /*\n    const govTokensDistributionTooltip = govTokensUserDistribution ? Object.keys(govTokensUserDistribution).map( govToken => {\n      const speed = govTokensUserDistribution[govToken];\n      if (speed.gt(0)){\n        const distributionFrequency = this.functionsUtil.getGlobalConfig(['govTokens',govToken,'distributionFrequency']);\n        return `+${speed.toFixed(4)} ${govToken}/${distributionFrequency}`;\n      }\n      return null;\n    }).filter(v => (v !== null)) : null;\n    */\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          desc:this.functionsUtil.getGlobalConfig(['messages','apyLong']),\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '0.00%') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    this.setState({\n      // govTokensAprs,\n      aggregatedValues,\n      // govTokensTotalApr,\n      govTokensUserBalance,\n      govTokensTotalBalance,\n      // govTokensTotalAprTooltip,\n      idleTokenUserDistribution,\n      govTokensTotalBalanceTooltip\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Flex\n                          mt={2}\n                          width={1}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <Text\n                            fontWeight={2}\n                            fontSize={[1,2]}\n                            color={'cellText'}\n                          >\n                            {v.props.title}\n                          </Text>\n                          {\n                            v.props.desc && \n                              <Tooltip\n                                placement={'bottom'}\n                                message={v.props.desc}\n                              >\n                                <Icon\n                                  ml={2}\n                                  name={\"Info\"}\n                                  size={'1em'}\n                                  color={'cellTitle'}\n                                />\n                              </Tooltip>\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquity\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              chartToken={this.props.selectedToken}\n              enabledTokens={[this.props.selectedToken]}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLent',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:this.props.theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPerc',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.govTokensTotalBalanceTooltip && this.state.govTokensTotalBalanceTooltip.length>0 && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      this.state.govTokensTotalBalanceTooltip.map((govTokenBalance,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          mt={govTokenIndex ? 1 : 0}\n                          key={`govToken_${govTokenIndex}`}\n                        >\n                          {govTokenBalance}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                )/* : this.state.govTokensUserBalance && Object.keys(this.state.govTokensUserBalance).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + ${this.state.govTokensTotalBalance.toFixed(4)}\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalBalanceTooltip.join(' / ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Fees\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'feesCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'apy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.idleTokenUserDistribution && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      mt={1}\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      {this.state.idleTokenUserDistribution.toFixed(4)} {this.idleGovToken.tokenName}/{this.idleGovToken.tokenConfig.distributionFrequency}\n                    </Text>\n                  </Flex>\n                )\n                /*\n                this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length===1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      Object.keys(this.state.govTokensAprs).map((govToken,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          ml={govTokenIndex ? 2 : 0}\n                          key={`govToken_${govToken}`}\n                        >\n                          {this.state.govTokensAprs[govToken].toFixed(2)}% {govToken}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                ) : this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + {this.state.govTokensTotalApr.toFixed(2)}%\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalAprTooltip.join('; ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            {\n              /*\n              <Flex\n                mb={[2,0]}\n                width={[1,1/5]}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'flex-start'}\n              >\n                <Title\n                  mb={2}\n                  fontSize={[3,4]}\n                  component={Heading.h3}\n                >\n                  Risk Score\n                </Title>\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'score',\n                    props:{\n                      decimals:1,\n                      fontWeight:300,\n                      fontSize:['1.8em','1.9em'],\n                      color:this.props.theme.colors.counter,\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n              */\n            }\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverview;","import React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Icon, Checkbox, Box, Link, Input, Tooltip } from \"rimble-ui\";\n\nclass CurveRedeem extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    tokenConfig:null,\n    unevenAmounts:null,\n    selectedToken:null,\n    availableTokens:null,\n    buttonDisabled:false,\n    showMaxSlippage:false,\n    redeemUnderlying:true,\n    curveTokenConfig:null,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    curveTokensAmounts:null,\n    fastBalanceSelector:null,\n    redeemUnevenAmounts:false,\n    curveRedeemableIdleTokens:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.initToken();\n  }\n\n  showMaxSlippage(){\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  async calculateSlippage(max_slippage=null){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (!inputValue || inputValue.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    let withdrawSlippage = null;\n    let curveTokensAmounts = null;\n    let curveIdleTokensAmounts = null;\n    if (this.state.redeemUnevenAmounts){\n      [\n        curveTokensAmounts,\n        curveIdleTokensAmounts\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokensAmounts(this.props.account,normalizedAmount,true),\n        this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,normalizedAmount)\n      ]);\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false,curveIdleTokensAmounts);\n    } else {\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false);\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const redeemableBalance = inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.times(100).plus(this.state.maxSlippage || this.functionsUtil.BNify(0)).div(100)));\n      curveTokensAmounts = {};\n      curveTokensAmounts[this.state.selectedToken] = redeemableBalance;\n    }\n\n    if (withdrawSlippage){\n      withdrawSlippage = withdrawSlippage.times(100);\n    }\n\n    this.setState({\n      withdrawSlippage,\n      curveTokensAmounts,\n      curveIdleTokensAmounts\n    });\n\n    // Add max slippage but don't save in state\n    if (withdrawSlippage && max_slippage){\n      withdrawSlippage = withdrawSlippage.plus(max_slippage);\n    }\n\n    return withdrawSlippage;\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.tokenConfig.idle.token !== this.props.tokenConfig.idle.token;\n    if (tokenChanged){\n      await this.initToken();\n    }\n\n    const redeemUnevenAmountsChanged = prevState.redeemUnevenAmounts !== this.state.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    const inputChanged = prevState.inputValue !== this.state.inputValue;\n    const maxSlippageChanged = parseFloat(prevState.maxSlippage) !== parseFloat(this.state.maxSlippage);\n    const tokenConfigChanged = JSON.stringify(prevState.tokenConfig) !== JSON.stringify(this.state.tokenConfig);\n    if (inputChanged || tokenConfigChanged || maxSlippageChanged){\n      this.calculateSlippage();\n    }\n\n    const selectedTokenChanged = prevState.selectedToken !== this.state.selectedToken;\n    if (selectedTokenChanged){\n      this.loadSelectedTokenConfig();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    let buttonDisabled = false;\n\n    // if (this.state.redeemUnevenAmounts){\n      buttonDisabled = !amount || amount.gt(this.state.curveTokenBalance);\n    // } else {\n      // buttonDisabled = !amount || amount.gt(this.state.redeemableBalance);\n    // }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    let inputValue = null;\n\n    // if (this.state.redeemUnevenAmounts){\n    inputValue = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n    // } else {\n      // inputValue = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n    // }\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  selectDestinationToken(selectedToken){\n    this.setState({\n      selectedToken\n    });\n  }\n\n  async loadSelectedTokenConfig(){\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const tokenConfig = this.state.availableTokens[this.state.selectedToken];\n    const curveTokenConfig = curveConfig.availableTokens[tokenConfig.idle.token];\n    this.setState({\n      tokenConfig,\n      curveTokenConfig\n    });\n  }\n\n  async initToken(){\n    const [curvePoolContract,curveSwapContract] = await Promise.all([\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract()\n    ]);\n\n    const [\n      curveTokenPrice,\n      curveTokenBalance,\n      curveRedeemableIdleTokens,\n    ] = await Promise.all([\n      this.functionsUtil.getCurveTokenPrice(),\n      this.functionsUtil.getCurveTokenBalance(this.props.account),\n      this.functionsUtil.getCurveRedeemableIdleTokens(this.props.account)\n    ]);\n\n    const unevenAmounts = [];\n    const redeemableBalance = curveTokenBalance ? curveTokenBalance.times(curveTokenPrice) : this.functionsUtil.BNify(0);\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();;\n    const selectedToken = Object.keys(availableTokens)[0];\n\n    this.setState({\n      selectedToken,\n      unevenAmounts,\n      curveTokenPrice,\n      availableTokens,\n      curvePoolContract,\n      curveSwapContract,\n      curveTokenBalance,\n      redeemableBalance,\n      curveRedeemableIdleTokens\n    });\n  }\n\n  async redeem(){\n\n    if (!this.state.curveTokenBalance){\n      return false;\n    }\n\n    const callbackRedeem = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveRedeem`,\n        eventAction: this.props.selectedToken,\n        eventValue: this.state.curveTokenBalance.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackRedeem === 'function' && txSucceeded){\n        this.props.callbackRedeem(tx);\n      }\n    };\n\n    const callbackReceiptRedeem = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.curveSwapContract.name;\n    const withdrawSlippage = await this.calculateSlippage(this.state.maxSlippage);\n    const max_slippage = this.functionsUtil.BNify(this.state.maxSlippage).div(100);\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    // const curveTokenBalance = this.functionsUtil.normalizeTokenAmount(this.state.curveTokenBalance,this.state.curvePoolContract.decimals);\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    if (this.state.redeemUnevenAmounts){\n      const min_amounts = this.state.redeemUnderlying ? await this.functionsUtil.getCurveTokensAmounts(this.props.account,_amount,false,true) : await this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,_amount,max_slippage);\n      console.log('remove_liquidity',_amount.toString(),min_amounts);\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    } else {\n      const coin_index = this.state.curveTokenConfig.migrationParams.coinIndex;\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.div(100))),this.state.tokenConfig.decimals);\n      // const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.minus(inputValue.times(withdrawSlippage.div(100))),this.state.curveTokenConfig.decimals);\n      // let _token_amount = await this.functionsUtil.getCurveTokenAmount(amounts,false);\n      // _token_amount = this.functionsUtil.BNify(_token_amount).isGreaterThan(curveTokenBalance) ? curveTokenBalance : this.functionsUtil.BNify(_token_amount);\n\n      console.log('remove_liquidity_one_coin',_amount, coin_index, min_amount);\n\n      // debugger;\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_one_coin', [_amount, coin_index, min_amount, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    }\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  getFastBalanceSelector(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n\n  render() {\n\n    const showSlippage = !this.state.buttonDisabled && this.state.withdrawSlippage;\n    const curveTokenName = this.functionsUtil.getGlobalConfig(['curve','poolContract','token']);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          {\n            !this.state.curveTokenBalance ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3,\n                  minHeight:'195px',\n                  style:{\n                    display:'flex',\n                    alignItems:'center',\n                    justifyContent:'center'\n                  }\n                }}\n              >\n                <FlexLoader\n                  flexProps={{\n                    flexDirection:'row'\n                  }}\n                  loaderProps={{\n                    size:'30px'\n                  }}\n                  textProps={{\n                    ml:2\n                  }}\n                  text={'Checking Curve Pool...'}\n                />\n              </DashboardCard>\n            ) : this.state.processing.loading ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3\n                }}\n              >\n                <Flex\n                  flexDirection={'column'}\n                >\n                  <TxProgressBar\n                    web3={this.props.web3}\n                    hash={this.state.processing.txHash}\n                    endMessage={`Finalizing redeem request...`}\n                    cancelTransaction={this.cancelTransaction.bind(this)}\n                    waitText={ this.props.waitText ? this.props.waitText : 'Redeem estimated in'}\n                  />\n                </Flex>\n              </DashboardCard>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    mb:2\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'1.8em'}\n                      color={'cellText'}\n                      name={'FileUpload'}\n                    />\n                    <Text\n                      mt={1}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Withdraw from the Curve Pool in a specific token or in uneven amounts of tokens (with no slippage).\n                    </Text>\n                    <Flex\n                      mt={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                    >\n                      <Checkbox\n                        required={false}\n                        label={`Redeem with no slippage`}\n                        checked={this.state.redeemUnevenAmounts}\n                        onChange={ e => this.toggleUnevenAmounts(e.target.checked) }\n                      />\n                      <Tooltip\n                        placement={'top'}\n                        message={`You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.`}\n                      >\n                        <Icon\n                          size={'1em'}\n                          color={'cellTitle'}\n                          name={\"InfoOutline\"}\n                        />\n                      </Tooltip>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n                {\n                  !this.state.redeemUnevenAmounts/* && (!this.props.selectedToken || (this.state.showMaxSlippage && showSlippage))*/ && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      {\n                        this.state.tokenConfig && \n                          <Box\n                            width={1}\n                          >\n                            <Text\n                              mb={1}\n                            >\n                              Select destination token:\n                            </Text>\n                            <AssetSelector\n                              {...this.props}\n                              id={'token-from'}\n                              showBalance={false}\n                              tokenConfig={this.state.tokenConfig}\n                              selectedToken={this.state.selectedToken}\n                              availableTokens={this.state.availableTokens}\n                              onChange={this.selectDestinationToken.bind(this)}\n                            />\n                          </Box>\n                      }\n                    </Box>\n                  )\n                }\n                {\n                  this.state.curveTokensAmounts && !this.state.buttonDisabled && (\n                    <DashboardCard\n                      cardProps={{\n                        mt:1,\n                        mb:2,\n                        py:2,\n                        px:1\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Text\n                          mt={1}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          You will receive:\n                        </Text>\n                        <Flex\n                          mt={2}\n                          width={1}\n                          boxShadow={0}\n                          style={{\n                            flexWrap:'wrap'\n                          }}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                          >\n                            {\n                              Object.keys(this.state.curveTokensAmounts).map( token => {\n                                const balance = this.state.curveTokensAmounts[token];\n                                return (\n                                  <Flex\n                                    mb={1}\n                                    mx={1}\n                                    width={'auto'}\n                                    flexDirection={'row'}\n                                    key={`tokenBalance_${token}`}\n                                    justifyContent={'flex-start'}\n                                  >\n                                    <AssetField\n                                      token={token}\n                                      tokenConfig={{\n                                        token:token\n                                      }}\n                                      fieldInfo={{\n                                        name:'icon',\n                                        props:{\n                                          mr:1,\n                                          width:['1.4em','1.6em'],\n                                          height:['1.4em','1.6em']\n                                        }\n                                      }}\n                                    />\n                                    <SmartNumber\n                                      ml={1}\n                                      fontSize={[0,1]}\n                                      fontWeight={500}\n                                      maxPrecision={4}\n                                      color={'cellText'}\n                                      number={balance.toString()}\n                                    />\n                                  </Flex>\n                                );\n                            })\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n                {\n                  this.state.showMaxSlippage && showSlippage && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Text>\n                          Choose max slippage:\n                        </Text>\n                        <Tooltip\n                          placement={'top'}\n                          message={`Max additional slippage on top of the one shown below`}\n                        >\n                          <Icon\n                            ml={1}\n                            size={'1em'}\n                            color={'cellTitle'}\n                            name={\"InfoOutline\"}\n                          />\n                        </Tooltip>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        {\n                          [0.2,0.5,1,5].map( slippage => (\n                            <FastBalanceSelector\n                              cardProps={{\n                                p:1\n                              }}\n                              textProps={{\n                                fontSize:1\n                              }}\n                              percentage={slippage}\n                              key={`selector_${slippage}`}\n                              onMouseDown={()=>this.setMaxSlippage(slippage)}\n                              isActive={this.state.maxSlippage === parseFloat(slippage)}\n                            />\n                          ))\n                        }\n                      </Flex>\n                    </Box>\n                  )\n                }\n                <Flex\n                  mb={3}\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  <Flex\n                    mb={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'flex-end'}\n                  >\n                    {\n                      showSlippage && (\n                        <Flex\n                          width={1}\n                          maxWidth={'40%'}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            textAlign={'right'}\n                            style={{\n                              whiteSpace:'nowrap'\n                            }}\n                            color={ parseFloat(this.state.withdrawSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                          >\n                            {\n                              parseFloat(this.state.withdrawSlippage.toFixed(3)) === 0 ?\n                                'No Slippage'\n                              : `${ this.state.withdrawSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.withdrawSlippage.abs().toFixed(3)}%`\n                            }\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={ this.state.redeemUnevenAmounts ? `You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.` : this.state.withdrawSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                          {\n                            !this.state.redeemUnevenAmounts &&\n                              <Link\n                                ml={1}\n                                color={'copyColor'}\n                                hoverColor={'primary'}\n                                onClick={this.showMaxSlippage.bind(this)}\n                              >\n                                change\n                              </Link>\n                          }\n                        </Flex>\n                      )\n                    }\n                    <Flex\n                      width={1}\n                      maxWidth={'60%'}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      justifyContent={'flex-end'}\n                    >\n                      <Link\n                        fontSize={1}\n                        fontWeight={3}\n                        color={'dark-gray'}\n                        textAlign={'right'}\n                        hoverColor={'copyColor'}\n                        onClick={ (e) => this.setFastBalanceSelector(100) }\n                        style={{\n                          maxWidth:'100%',\n                          overflow:'hidden',\n                          whiteSpace:'nowrap',\n                          textOverflow:'ellipsis'\n                        }}\n                      >\n                        {this.state.curveTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {curveTokenName}\n                      </Link>\n                    </Flex>\n                  </Flex>\n                  <Input\n                    min={0}\n                    type={\"number\"}\n                    required={true}\n                    height={'3.4em'}\n                    borderRadius={2}\n                    fontWeight={500}\n                    boxShadow={'none !important'}\n                    placeholder={`Insert amount`}\n                    onChange={this.changeInputValue.bind(this)}\n                    border={`1px solid ${this.props.theme.colors.divider}`}\n                    value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                  />\n                  <Flex\n                    mt={2}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      [25,50,75,100].map( percentage => (\n                        <FastBalanceSelector\n                          percentage={percentage}\n                          key={`selector_${percentage}`}\n                          onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                          isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                        />\n                      ))\n                    }\n                  </Flex>\n                </Flex>\n                <Flex\n                  justifyContent={'center'}\n                >\n                  <RoundButton\n                    buttonProps={{\n                      mt:2,\n                      width:[1,1/2],\n                      disabled:this.state.buttonDisabled\n                    }}\n                    handleClick={this.redeem.bind(this)}\n                  >\n                    Redeem\n                  </RoundButton>\n                </Flex>\n              </Flex>\n            )\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveRedeem;","import Migrate from '../Migrate/Migrate';\nimport IconBox from '../IconBox/IconBox';\nimport React, { Component } from 'react';\n// import ExtLink from '../ExtLink/ExtLink';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport ConnectBox from '../ConnectBox/ConnectBox';\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport RoundButton from '../RoundButton/RoundButton';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport ShareModal from '../utilities/components/ShareModal';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport TransactionField from '../TransactionField/TransactionField';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Input, Box, Icon, Link, Checkbox, Tooltip, Image } from \"rimble-ui\";\n\nclass DepositRedeem extends Component {\n\n  state = {\n    txError: {},\n    tokenAPY: '-',\n    inputValue: {},\n    processing: {},\n    curveAPY: null,\n    totalAUM: null,\n    canRedeem: false,\n    maxSlippage: 0.2,\n    canDeposit: false,\n    action: 'deposit',\n    directMint: false,\n    activeModal: null,\n    tokenGovTokens: {},\n    showBuyFlow: false,\n    maxUnlentPerc: null,\n    unlentBalance: null,\n    tokenApproved: false,\n    skipMigration: false,\n    redeemSkipGov: false,\n    showRedeemFlow: false,\n    contractPaused: false,\n    buttonDisabled: false,\n    canRedeemCurve: false,\n    erc20ForwarderTx: null,\n    signedParameters: null,\n    minAmountForMint: null,\n    showMaxSlippage: false,\n    redeemGovTokens: false,\n    canDepositCurve: false,\n    redeemSkipGovTokens: [],\n    fastBalanceSelector: {},\n    actionProxyContract: {},\n    migrationEnabled: false,\n    componentMounted: false,\n    curveTokenBalance: null,\n    agreeSkipGovTokens: false,\n    redeemCurveEnabled: false,\n    depositCurveBalance: null,\n    depositCurveEnabled: true,\n    showAdvancedOptions: false,\n    skipGovTokensGasSave: null,\n    depositCurveSlippage: null,\n    erc20ForwarderContract: {},\n    erc20ForwarderEnabled: false,\n    showETHWrapperEnabled: false,\n    skipGovTokensGasSaveUSD: null,\n    metaTransactionsEnabled: true,\n    skippedGovTokensBalance: null,\n    minAmountForMintReached: false,\n    loadingErc20ForwarderTx: false\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils() {\n    if (this.functionsUtil) {\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount() {\n    this.loadUtils();\n    await this.loadProxyContracts();\n  }\n\n  async componentDidMount() {\n    this.loadTokenInfo();\n  }\n\n  setShowRedeemFlow = (showRedeemFlow) => {\n    this.setState({\n      showRedeemFlow\n    });\n  }\n\n  setShowBuyFlow = (showBuyFlow) => {\n    this.setState({\n      showBuyFlow\n    });\n  }\n\n  toggleShowAdvancedOptions = showAdvancedOptions => {\n    this.setState((prevState) => ({\n      showAdvancedOptions: !prevState.showAdvancedOptions\n    }));\n  }\n\n  toggleSkipMigration = skipMigration => {\n    this.setState({\n      skipMigration\n    });\n  }\n\n  toggleRedeemCurve = redeemCurveEnabled => {\n    this.setState({\n      redeemCurveEnabled\n    });\n  }\n\n  toggleDepositCurve = depositCurveEnabled => {\n    this.setState({\n      depositCurveEnabled\n    });\n  }\n\n  toggleShowETHWrapper = showETHWrapperEnabled => {\n    this.setState({\n      showETHWrapperEnabled\n    });\n  }\n\n  toggleAgreeSkipGovTokens = agreeSkipGovTokens => {\n    this.setState({\n      agreeSkipGovTokens\n    });\n  }\n\n  toggleSkipMint = (directMint) => {\n    this.setState({\n      directMint\n    });\n  }\n\n  toggleRedeemGovTokens = (redeemGovTokens) => {\n    this.setState({\n      redeemGovTokens,\n      redeemSkipGovTokens: [],\n      agreeSkipGovTokens: false,\n      skippedGovTokensBalance: this.functionsUtil.BNify(0),\n      redeemSkipGov: redeemGovTokens ? false : this.state.redeemSkipGov\n    });\n  }\n\n  toggleRedeemSkipGov = (redeemSkipGov) => {\n    this.setState({\n      redeemSkipGov,\n      redeemSkipGovTokens: [],\n      agreeSkipGovTokens: false,\n      skippedGovTokensBalance: this.functionsUtil.BNify(0),\n      redeemGovTokens: redeemSkipGov ? false : this.state.redeemGovTokens\n    });\n  }\n\n  getSkippedGovTokensFlags = async () => {\n    const govTokensIndexes = await this.functionsUtil.getGovTokensIndexes(this.props.account, this.props.tokenConfig);\n    const govTokensFlags = Object.keys(govTokensIndexes).map(token => {\n      return this.state.redeemSkipGovTokens.includes(token);\n    });\n    // console.log('getSkippedGovTokensFlags',govTokensIndexes,govTokensFlags);\n    return govTokensFlags;\n  }\n\n  calculateSkippedGovTokens = async () => {\n    let skippedGovTokensBalance = this.functionsUtil.BNify(0);\n    const DAITokenConfig = this.functionsUtil.getGlobalConfig(['stats', 'tokens', 'DAI']);\n\n    await this.functionsUtil.asyncForEach(this.state.redeemSkipGovTokens, async (govToken) => {\n      const govTokenConfig = this.functionsUtil.getGlobalConfig(['govTokens', govToken]);\n      const govTokenPrice = await this.functionsUtil.getUniswapConversionRate(DAITokenConfig, govTokenConfig);\n      const skippedAmount = this.props.govTokensUserBalances[govToken].times(govTokenPrice);\n      skippedGovTokensBalance = skippedGovTokensBalance.plus(skippedAmount);\n    });\n\n    const _skipGovTokenRedeem = await this.getSkippedGovTokensFlags();\n    const WETHTokenConfig = this.functionsUtil.getGlobalConfig(['stats', 'tokens', 'WETH']);\n\n    const [\n      wethPrice,\n      redeemGasUsage,\n      skipGovRedeemGasUsage\n    ] = await Promise.all([\n      this.functionsUtil.getUniswapConversionRate(DAITokenConfig, WETHTokenConfig),\n      this.functionsUtil.estimateMethodGasUsage(this.props.tokenConfig.idle.token, 'redeemIdleToken', [this.functionsUtil.normalizeTokenAmount(this.props.idleTokenBalance, this.props.tokenConfig.decimals)], this.props.account),\n      this.functionsUtil.estimateMethodGasUsage(this.props.tokenConfig.idle.token, 'redeemIdleTokenSkipGov', [this.functionsUtil.normalizeTokenAmount(this.props.idleTokenBalance, this.props.tokenConfig.decimals), _skipGovTokenRedeem], this.props.account)\n    ]);\n\n    const skipGovTokensGasSave = redeemGasUsage && skipGovRedeemGasUsage ? redeemGasUsage.minus(skipGovRedeemGasUsage) : this.functionsUtil.BNify(0);\n    const skipGovTokensGasSaveUSD = skipGovTokensGasSave ? skipGovTokensGasSave.times(wethPrice) : this.functionsUtil.BNify(0);\n\n    this.setState({\n      skipGovTokensGasSave,\n      skipGovTokensGasSaveUSD,\n      skippedGovTokensBalance\n    });\n    return skippedGovTokensBalance;\n  }\n\n  setRedeemSkipGovTokens = (token, checked) => {\n    this.setState((prevState) => {\n      const redeemSkipGovTokens = Object.assign([], prevState.redeemSkipGovTokens);\n      if (!checked && redeemSkipGovTokens.includes(token)) {\n        redeemSkipGovTokens.splice(redeemSkipGovTokens.indexOf(token), 1);\n      } else if (checked && !redeemSkipGovTokens.includes(token)) {\n        redeemSkipGovTokens.push(token);\n      }\n      return {\n        redeemSkipGovTokens\n      };\n    }, () => {\n      this.calculateSkippedGovTokens();\n    });\n  }\n\n  toggleErc20ForwarderEnabled = (erc20ForwarderEnabled) => {\n    const newState = {\n      erc20ForwarderEnabled\n    };\n\n    this.setState(newState, () => {\n      this.cancelTransaction();\n    });\n  }\n\n  toggleMetaTransactionsEnabled = (metaTransactionsEnabled) => {\n    this.setState({\n      metaTransactionsEnabled\n    });\n  }\n\n  async loadProxyContracts() {\n\n    if (!this.props.contractsInitialized){\n      return false;\n    }\n\n    const actions = ['deposit', 'redeem'];\n    const newState = {\n      actionProxyContract: {},\n      erc20ForwarderContract: {}\n    };\n\n    await this.functionsUtil.asyncForEach(actions, async (action) => {\n      let mintProxyContractInfo = null;\n      const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', action, 'erc20ForwarderEnabled']);\n\n      if (depositErc20ForwarderEnabled) {\n        mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract', 'methods', action, 'erc20ForwarderProxyContract', 'forwarder']);\n\n        await this.props.initContract(mintProxyContractInfo.name, mintProxyContractInfo.address, mintProxyContractInfo.abi);\n\n        // Init contract for erc20 forwarder\n        const erc20ForwarderContractInfo = this.functionsUtil.getGlobalConfig(['contract', 'methods', action, 'erc20ForwarderProxyContract', 'tokens', this.props.selectedToken]);\n        if (erc20ForwarderContractInfo) {\n          mintProxyContractInfo = erc20ForwarderContractInfo;\n          const erc20ForwarderContract = await this.props.initContract(erc20ForwarderContractInfo.name, erc20ForwarderContractInfo.address, erc20ForwarderContractInfo.abi);\n          if (erc20ForwarderContract){\n            newState.erc20ForwarderContract[action] = erc20ForwarderContractInfo;\n            newState.erc20ForwarderContract[action].contract = erc20ForwarderContract.contract;\n          }\n        }\n      }\n\n      if (!mintProxyContractInfo) {\n        mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract', 'methods', action, 'proxyContract']);\n      }\n\n      const hasProxyContract = mintProxyContractInfo && mintProxyContractInfo.enabled;\n      newState.actionProxyContract[action] = hasProxyContract ? mintProxyContractInfo : null;\n      if (hasProxyContract) {\n        const proxyContract = await this.props.initContract(mintProxyContractInfo.name, mintProxyContractInfo.address, mintProxyContractInfo.abi);\n        if (proxyContract){\n          newState.actionProxyContract[action].contract = proxyContract.contract;\n          newState.actionProxyContract[action].approved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken, mintProxyContractInfo.address, this.props.account);\n        }\n      }\n    });\n\n    // console.log('loadProxyContracts',newState);\n\n    return await this.setState(newState);\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadAPY() {\n    const tokenAprs = await this.functionsUtil.getTokenAprs(this.props.tokenConfig);\n    if (tokenAprs && tokenAprs.avgApy !== null) {\n      const tokenAPY = this.functionsUtil.BNify(tokenAprs.avgApy).toFixed(2);\n\n      let curveAPY = null;\n      if (this.state.canDepositCurve) {\n        curveAPY = await this.functionsUtil.getCurveAPY();\n        // console.log('curveAPY',curveAPY);\n        if (curveAPY) {\n          curveAPY = curveAPY.plus(tokenAPY);\n        }\n      }\n      this.setState({\n        tokenAPY,\n        curveAPY\n      });\n    }\n  }\n\n  getReferralAddress() {\n    let _referral = this.functionsUtil.getQueryStringParameterByName('_referral');\n    if (!this.functionsUtil.checkAddress(_referral)) {\n      _referral = null;\n    }\n    return _referral;\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n\n    // console.log('componentDidUpdate',this.props.tokenBalance);\n\n    if (this.props.tokenBalance === null) {\n      return false;\n    }\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const erc20ForwarderEnabledChanged = prevState.erc20ForwarderEnabled !== this.state.erc20ForwarderEnabled;\n    const tokenBalanceChanged = prevProps.tokenBalance !== this.props.tokenBalance && this.props.tokenBalance !== null;\n\n    if (accountChanged || tokenChanged || tokenBalanceChanged || erc20ForwarderEnabledChanged || contractsInitialized) {\n      await this.loadProxyContracts();\n      this.loadTokenInfo();\n      return false;\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n\n    if (actionChanged || fastBalanceSelectorChanged) {\n      this.setInputValue();\n    }\n\n    const inputValueChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputValueChanged) {\n      // this.checkMinAmountForMint();\n    }\n\n    const redeemSkipGovChanged = prevState.redeemSkipGov !== this.state.redeemSkipGov;\n    const redeemGovTokensChanged = prevState.redeemGovTokens !== this.state.redeemGovTokens;\n    const agreeSkipGovTokensChanged = prevState.agreeSkipGovTokens !== this.state.agreeSkipGovTokens;\n    const redeemSkipGovTokensChanged = JSON.stringify(prevState.redeemSkipGovTokens) !== JSON.stringify(this.state.redeemSkipGovTokens);\n\n    if (redeemGovTokensChanged || actionChanged || redeemSkipGovTokensChanged || redeemSkipGovChanged || agreeSkipGovTokensChanged) {\n      this.checkButtonDisabled();\n    }\n\n    const depositCurveChanged = prevState.depositCurveEnabled !== this.state.depositCurveEnabled;\n    const metaTransactionsChanged = prevState.metaTransactionsEnabled !== this.state.metaTransactionsEnabled;\n    if (metaTransactionsChanged || depositCurveChanged) {\n      const tokenApproved = await this.checkTokenApproved();\n      this.setState({\n        tokenApproved\n      });\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged) {\n      this.calculateCurveSlippage();\n    }\n  }\n\n  async checkMinAmountForMint() {\n    let showPoolPerc = false;\n    let totalAUM = this.state.totalAUM;\n    let maxUnlentPerc = this.state.maxUnlentPerc;\n    const isRisk = this.props.selectedStrategy === 'risk';\n    const inputValue = this.functionsUtil.BNify(this.state.inputValue[this.state.action]);\n\n    if (inputValue.gt(this.props.tokenBalance)) {\n      return false;\n    }\n\n    const convertedAmount = await this.functionsUtil.convertTokenBalance(inputValue, this.props.selectedToken, this.props.tokenConfig, isRisk);\n    let minAmountForMint = this.functionsUtil.BNify(this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'minAmountForMint']));\n    let minAmountForMintReached = convertedAmount.gte(minAmountForMint);\n\n    // Check token minAmountForMint\n    if (minAmountForMintReached) {\n      if (this.props.tokenConfig.deposit && this.props.tokenConfig.deposit.minAmountForMint && convertedAmount.lt(this.props.tokenConfig.deposit.minAmountForMint)) {\n        minAmountForMintReached = false;\n      } else {\n        [\n          maxUnlentPerc,\n          totalAUM\n        ] = await Promise.all([\n          maxUnlentPerc || this.functionsUtil.genericContractCall(this.props.tokenConfig.idle.token, 'maxUnlentPerc'),\n          totalAUM || this.functionsUtil.loadAssetField('pool', this.props.selectedToken, this.props.tokenConfig, this.props.account)\n        ]);\n\n        if (maxUnlentPerc && totalAUM) {\n          const depositPerc = inputValue.div(totalAUM).times(100);\n          maxUnlentPerc = this.functionsUtil.BNify(maxUnlentPerc);\n          const maxUnlentPercFormatted = maxUnlentPerc.div(1e3).times(2);\n          if (depositPerc.lt(maxUnlentPercFormatted)) {\n            minAmountForMintReached = false;\n          } else if (totalAUM.times(maxUnlentPercFormatted.div(100)).gt(minAmountForMint)) {\n            showPoolPerc = true;\n            minAmountForMint = totalAUM.times(maxUnlentPercFormatted.div(100));\n          }\n        }\n      }\n    }\n\n    this.setState({\n      totalAUM,\n      showPoolPerc,\n      maxUnlentPerc,\n      minAmountForMint,\n      minAmountForMintReached\n    });\n  }\n\n  async calculateCurveSlippage() {\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)) {\n      return false;\n    }\n\n    const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve', 'poolContract']);\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount, curvePoolContractInfo.decimals);\n    const newState = {};\n\n    switch (this.state.action) {\n      case 'deposit':\n        newState.depositCurveBalance = amount;\n        newState.depositCurveSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token, normalizedAmount, true);\n        break;\n      case 'redeem':\n        // newState.redeemBalance = amount;\n        // newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n        break;\n      default:\n        break;\n    }\n    // console.log('calculateCurveSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  checkUseProxyContract = () => {\n    const proxyContract = this.state.actionProxyContract[this.state.action];\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'metaTransactionsEnabled']) && this.state.metaTransactionsEnabled;\n    return ((depositErc20ForwarderEnabled || depositMetaTransactionsEnabled) && proxyContract && this.props.biconomy);\n  }\n\n  approveContract = async (callbackApprove, callbackReceiptApprove) => {\n    if (this.state.depositCurveEnabled) {\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve', 'depositContract']);\n      this.functionsUtil.enableERC20(this.props.selectedToken, curveDepositContract.address, callbackApprove, callbackReceiptApprove);\n    } else {\n      // Check Proxy Contract Approved for Deposit with Biconomy\n      const useProxyContract = this.checkUseProxyContract();\n      if (useProxyContract) {\n        const proxyContract = this.state.actionProxyContract[this.state.action];\n        this.functionsUtil.enableERC20(this.props.selectedToken, proxyContract.address, callbackApprove, callbackReceiptApprove);\n      } else {\n        this.functionsUtil.enableERC20(this.props.selectedToken, this.props.tokenConfig.idle.address, callbackApprove, callbackReceiptApprove);\n      }\n    }\n  }\n\n  checkTokenApproved = async () => {\n    let tokenApproved = false;\n    if (this.state.depositCurveEnabled) {\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve', 'depositContract']);\n      tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken, curveDepositContract.address, this.props.account);\n    } else {\n      // Check Proxy Contract Approved for Deposit with Biconomy\n      const useProxyContract = this.checkUseProxyContract();\n      if (useProxyContract) {\n        // Check for Permit Deposit\n        const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n        if (depositErc20ForwarderEnabled) {\n          const permitEnabled = this.functionsUtil.getGlobalConfig(['permit', this.props.selectedToken]);\n          if (permitEnabled) {\n            return true;\n          }\n        }\n        // Check proxy contract approved\n        const proxyContract = this.state.actionProxyContract[this.state.action];\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken, proxyContract.address, this.props.account);\n        // console.log('tokenApproved 1',tokenApproved);\n      } else {\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken, this.props.tokenConfig.idle.address, this.props.account);\n        // console.log('tokenApproved 2',tokenApproved);\n      }\n    }\n\n    return tokenApproved;\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = await this.checkTokenApproved();\n\n    if (tokenApproved) {\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve: {\n            txHash: null,\n            loading: false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx, error) => {\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.props.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error) {\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error') {\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve: {\n            txHash: null,\n            loading: false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve: {\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.approveContract(callbackApprove, callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve: {\n          txHash: null,\n          loading: true\n        }\n      }\n    }));\n  }\n\n  loadTokenInfo = async () => {\n\n    if (this.state.componentMounted) {\n      this.setState({\n        componentMounted: false\n      });\n    }\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve', 'availableTokens', this.props.tokenConfig.idle.token]);\n    const curveTokenEnabled = curveConfig.enabled && curveTokenConfig && curveTokenConfig.enabled;\n\n    const [\n      tokenApproved,\n      contractPaused,\n      curveSwapContract,\n      curveDepositContract,\n      unlentBalance,\n      { migrationEnabled },\n      curveTokenBalance,\n    ] = await Promise.all([\n      this.checkTokenApproved(),\n      this.functionsUtil.checkContractPaused(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract(),\n      this.functionsUtil.getUnlentBalance(this.props.tokenConfig),\n      this.functionsUtil.checkMigration(this.props.tokenConfig, this.props.account),\n      curveTokenEnabled ? this.functionsUtil.getCurveTokenBalance(this.props.account) : null\n    ]);\n\n    const canDeposit = this.props.tokenBalance && this.functionsUtil.BNify(this.props.tokenBalance).gt(0);\n    const canRedeem = this.props.idleTokenBalance && this.functionsUtil.BNify(this.props.idleTokenBalance).gt(0);\n\n    const canDepositCurve = curveTokenEnabled && canDeposit;\n    const depositCurveEnabled = canDepositCurve;\n\n    const showETHWrapperEnabled = this.props.selectedToken === 'WETH' && (this.state.showETHWrapperEnabled || !canDeposit);\n\n    const canRedeemCurve = curveTokenEnabled && curveTokenBalance && curveTokenBalance.gt(0);\n    const redeemCurveEnabled = canRedeemCurve;\n\n    const tokenGovTokens = this.functionsUtil.getTokenGovTokens(this.props.tokenConfig);\n\n    const newState = { ...this.state };\n\n    // Check curve deposit enabled\n    if (newState.depositCurveEnabled && !curveTokenEnabled) {\n      newState.depositCurveEnabled = false;\n    }\n\n\n    newState.canRedeem = canRedeem;\n    newState.canDeposit = canDeposit;\n    newState.unlentBalance = unlentBalance;\n    newState.tokenApproved = tokenApproved;\n    newState.tokenGovTokens = tokenGovTokens;\n    newState.contractPaused = contractPaused;\n    newState.canRedeemCurve = canRedeemCurve;\n    newState.canDepositCurve = canDepositCurve;\n    newState.migrationEnabled = migrationEnabled;\n    newState.curveTokenBalance = curveTokenBalance;\n    newState.curveSwapContract = curveSwapContract;\n    newState.redeemCurveEnabled = redeemCurveEnabled;\n    newState.depositCurveEnabled = depositCurveEnabled;\n    newState.curveDepositContract = curveDepositContract;\n    newState.showETHWrapperEnabled = showETHWrapperEnabled;\n\n    newState.txError = {\n      redeem: false,\n      deposit: false\n    };\n    newState.processing = {\n      redeem: {\n        txHash: null,\n        loading: false\n      },\n      deposit: {\n        txHash: null,\n        loading: false\n      },\n      approve: {\n        txHash: null,\n        loading: false\n      },\n      boost: {\n        txHash: null,\n        loading: false\n      }\n    };\n    newState.inputValue = {\n      boost: null,\n      redeem: null,\n      deposit: null\n    };\n    newState.fastBalanceSelector = {\n      boost: null,\n      redeem: null,\n      deposit: null\n    };\n\n    newState.componentMounted = true;\n\n    this.setState(newState, () => {\n      this.checkAction();\n      this.loadAPY();\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      erc20ForwarderTx: null,\n      loadingErc20ForwarderTx: false,\n      processing: {\n        ...prevState.processing,\n        approve: {\n          txHash: null,\n          loading: false\n        },\n        [this.state.action]: {\n          txHash: null,\n          loading: false\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const redeemGovTokens = this.state.redeemGovTokens;\n    const selectedPercentage = this.getFastBalanceSelector();\n    const inputValue = this.state.inputValue[this.state.action];\n    const redeemSkipGov = this.state.redeemSkipGov && this.state.redeemSkipGovTokens.length > 0 && this.state.agreeSkipGovTokens;\n\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'metaTransactionsEnabled']) && this.state.metaTransactionsEnabled;\n\n    let loading = true;\n\n    switch (this.state.action) {\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)) {\n          return false;\n        }\n\n        if (!this.state.tokenApproved) {\n          return this.approveToken();\n        }\n\n        if (localStorage) {\n          this.functionsUtil.setLocalStorage('redirectToFundsAfterLogged', 0);\n        }\n\n        this.setState({\n          lendingProcessing: this.props.account,\n          lendAmount: '',\n          genericError: '',\n        });\n\n        const callbackDeposit = (tx, error) => {\n\n          if (!tx && error) {\n            tx = {\n              status: 'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.props.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error) {\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error') {\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]: {\n                txHash: null,\n                loading: false\n              }\n            }\n          }));\n\n          if (txSucceeded) {\n            this.setState((prevState) => ({\n              activeModal: 'share',\n              inputValue: {\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if ((this.state.metaTransactionsEnabled || this.state.erc20ForwarderEnabled) && txError) {\n            this.setState({\n              erc20ForwarderTx: null,\n              loadingErc20ForwarderTx: false,\n              txError: {\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          // console.log('callbackReceiptDeposit',tx);\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]: {\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n        const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve', 'availableTokens', this.props.tokenConfig.idle.token, 'enabled']);\n\n        // Curve Deposit\n        if (curveTokenEnabled && this.state.depositCurveEnabled) {\n\n          const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve', 'poolContract']);\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue, curvePoolContractInfo.decimals);\n\n          const amounts = await this.functionsUtil.getCurveAmounts(this.props.tokenConfig.idle.token, tokensToDeposit);\n          let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n          if (this.state.maxSlippage) {\n            minMintAmount = this.functionsUtil.BNify(minMintAmount);\n            minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n            minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n          }\n\n          const depositParams = [amounts, minMintAmount];\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, callbackDeposit, callbackReceiptDeposit);\n          // Normal Deposit\n        } else {\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue, this.props.tokenConfig.decimals);\n\n          // const gasLimitDeposit = this.functionsUtil.BNify(1000000);\n          let depositParams = [];\n\n          // Use Proxy Contract if enabled\n          const useProxyContract = this.checkUseProxyContract();\n          if (useProxyContract) {\n            const mintProxyContractInfo = this.state.actionProxyContract[this.state.action];\n            const mintProxyContract = mintProxyContractInfo.contract;\n\n            // Use Meta-Transactions\n            if (depositMetaTransactionsEnabled) {\n              depositParams = [tokensToDeposit, this.props.tokenConfig.idle.address];\n              const functionCall = mintProxyContract.methods[mintProxyContractInfo.function](...depositParams);\n              const functionSignature = functionCall.encodeABI();\n              // console.log('mintProxyContract',mintProxyContractInfo.function,depositParams);\n              // if (this.state.metaTransactionsEnabled){\n              contractSendResult = await this.functionsUtil.sendBiconomyTxWithPersonalSign(mintProxyContractInfo.name, functionSignature, callbackDeposit, callbackReceiptDeposit);\n              // } else {\n              //   contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n              // }\n              // Use Erc20 Forwarder\n            } else if (depositErc20ForwarderEnabled) {\n\n              // Check if the deposit method require the nonce\n              const methodAbi = mintProxyContractInfo.contract._jsonInterface.find(f => f.name === mintProxyContractInfo.function);\n              const useNonce = methodAbi ? methodAbi.inputs.find(i => i.name === 'nonce') : true;\n\n              // Build ERC20 Forwarder Tx\n              if (!this.state.erc20ForwarderTx) {\n                this.setState({\n                  txError: {\n                    [this.state.action]: false\n                  },\n                  loadingErc20ForwarderTx: true\n                }, async () => {\n                  const erc20ForwarderContract = this.state.erc20ForwarderContract[this.state.action];\n                  const signedParameters = await this.functionsUtil.signPermit(this.props.selectedToken, this.props.account, erc20ForwarderContract.name, 0, tokensToDeposit);\n\n                  // console.log('signedParameters_1',signedParameters);\n\n                  if (signedParameters) {\n\n                    const { expiry, nonce, r, s, v } = signedParameters;\n\n                    if (useNonce) {\n                      depositParams = [tokensToDeposit, parseInt(nonce), expiry, v, r, s];\n                    } else {\n                      depositParams = [tokensToDeposit, expiry, v, r, s];\n                    }\n\n                    if (mintProxyContractInfo.function === 'foo') {\n                      depositParams = [];\n                    }\n\n                    // console.log('permitAndDeposit',mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams);\n\n                    // contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n\n                    const permitType = erc20ForwarderContract.permitType;\n                    const functionCall = erc20ForwarderContract.contract.methods[erc20ForwarderContract.function](...depositParams);\n                    const functionSignature = functionCall.encodeABI();\n\n                    // console.log('functionSignature',permitType, erc20ForwarderContract.function, depositParams);\n\n                    let gasLimit = null;\n                    try {\n                      gasLimit = await functionCall.estimateGas({ from: this.props.account }); // 5000000;\n                      if (gasLimit) {\n                        gasLimit = this.functionsUtil.BNify(gasLimit).times(1.2);\n                      } else {\n                        gasLimit = this.functionsUtil.BNify(1000000);\n                      }\n                    } catch (error) {\n                      // console.log('Gas Estimate - Error: ',error);\n                    }\n\n                    if (!gasLimit) {\n                      gasLimit = this.functionsUtil.BNify(1000000);\n                    }\n\n                    // console.log('gasEstimate',mintProxyContractInfo.name, depositParams, parseFloat(gasLimit));\n\n                    // debugger;\n\n                    const erc20ForwarderTx = await this.functionsUtil.buildBiconomyErc20ForwarderTx(erc20ForwarderContract.name, this.props.tokenConfig.address, permitType, functionSignature, gasLimit);\n                    // console.log('erc20ForwarderTx',erc20ForwarderTx);\n                    return this.setState({\n                      erc20ForwarderTx,\n                      loadingErc20ForwarderTx: false\n                    });\n                  } else {\n                    return this.setState((prevState) => ({\n                      processing: {\n                        ...prevState.processing,\n                        [this.state.action]: {\n                          txHash: null,\n                          loading: false\n                        }\n                      },\n                      signedParameters: null,\n                      erc20ForwarderTx: null,\n                      loadingErc20ForwarderTx: false\n                    }));\n                  }\n                });\n                // Send ERC20 Forwarder Tx\n              } else {\n                this.setState({\n                  txError: {\n                    [this.state.action]: false\n                  },\n                  loadingErc20ForwarderTx: true\n                }, async () => {\n                  const metaInfo = {};\n                  const permitOptions = {};\n                  const erc20ForwarderContract = this.state.erc20ForwarderContract[this.state.action];\n                  const erc20ForwarderBaseContract = this.functionsUtil.getGlobalConfig(['contract', 'methods', this.state.action, 'erc20ForwarderProxyContract', 'forwarder']);\n\n                  const permitValue = `${tokensToDeposit}00`;\n                  const incrementNonce = 1; // useNonce ? 1 : 0;\n                  const signedParameters = await this.functionsUtil.signPermit(this.props.selectedToken, this.props.account, erc20ForwarderBaseContract.name, incrementNonce, permitValue);\n\n                  // console.log('signedParameters_2',signedParameters);\n\n                  if (signedParameters) {\n\n                    this.setState({\n                      signedParameters\n                    });\n\n                    const permitConfig = this.functionsUtil.getGlobalConfig(['permit', this.props.selectedToken]);\n                    const setValue = permitConfig.type.find(t => t.name === 'value');\n\n                    const { expiry, nonce, r, s, v } = signedParameters;\n                    permitOptions.v = v;\n                    permitOptions.r = r;\n                    permitOptions.s = s;\n                    permitOptions.allowed = true;\n                    permitOptions.expiry = parseInt(expiry);\n                    permitOptions.holder = this.props.account;\n                    permitOptions.value = setValue ? permitValue : 0;\n                    permitOptions.nonce = parseInt(nonce.toString());\n                    permitOptions.spender = erc20ForwarderBaseContract.address;\n\n                    metaInfo.permitData = permitOptions;\n                    metaInfo.permitType = erc20ForwarderContract.permitType;\n\n                    // console.log('sendBiconomyTxWithErc20Forwarder',permitOptions,metaInfo);\n\n                    await this.functionsUtil.asyncTimeout(200);\n\n                    contractSendResult = await this.functionsUtil.sendBiconomyTxWithErc20Forwarder(this.state.erc20ForwarderTx.request, metaInfo, callbackDeposit, callbackReceiptDeposit);\n\n                    this.setState({\n                      erc20ForwarderTx: null,\n                      loadingErc20ForwarderTx: false\n                    });\n                  } else {\n                    return this.setState((prevState) => ({\n                      processing: {\n                        ...prevState.processing,\n                        [this.state.action]: {\n                          txHash: null,\n                          loading: false\n                        }\n                      },\n                      signedParameters: null,\n                      erc20ForwarderTx: null,\n                      loadingErc20ForwarderTx: false\n                    }));\n                  }\n                });\n              }\n            }\n            // Use main contract if no proxy contract exists\n          } else {\n            /*\n            let _skipMint = !this.state.directMint && this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMint']);\n            _skipMint = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : _skipMint;\n\n            // Check if deposited amount is greated that general lower limit for direct mint\n            if (_skipMint && this.state.minAmountForMintReached){\n              _skipMint = false;\n            }\n            */\n            // Always skip mint\n            let _skipMint = true;\n\n            const _referral = this.getReferralAddress() || '0x0000000000000000000000000000000000000000';\n            depositParams = [tokensToDeposit, _skipMint, _referral];\n            // console.log('depositParams',depositParams);\n            contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'mintIdleToken', depositParams, callbackDeposit, callbackReceiptDeposit);\n          }\n        }\n        break;\n      case 'redeem':\n\n        if (redeemGovTokens) {\n          const callbackRedeem = (tx, error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_gov`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: 0\n            };\n\n            if (error) {\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error') {\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]: {\n                  txHash: null,\n                  loading: false\n                }\n              }\n            }));\n\n            if (txSucceeded) {\n              this.setState((prevState) => ({\n                inputValue: {\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]: {\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'redeemIdleToken', [0], callbackRedeem, callbackReceiptRedeem);\n\n        } else {\n\n          if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)) {\n            return false;\n          }\n\n          const txData = {\n            value: this.functionsUtil.BNify(inputValue)\n          };\n\n          let idleTokenToRedeem = null;\n          if (selectedPercentage) {\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage);\n          } else {\n            const idleTokenPriceWithFee = await this.functionsUtil.getIdleTokenPriceWithFee(this.props.tokenConfig, this.props.account)\n            idleTokenToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue, this.props.tokenConfig.decimals)).div(idleTokenPriceWithFee);\n          }\n\n          // Check if idleTokens to redeem > idleToken balance\n          if (idleTokenToRedeem.gt(this.functionsUtil.BNify(this.props.idleTokenBalance))) {\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance);\n          }\n\n          // Normalize number\n          idleTokenToRedeem = this.functionsUtil.normalizeTokenAmount(idleTokenToRedeem, 18);\n\n          if (!idleTokenToRedeem) {\n            return false;\n          }\n\n          const callbackRedeem = (tx, error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_partial`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: parseInt(inputValue)\n            };\n\n            if (error) {\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error') {\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]: {\n                  txHash: null,\n                  loading: false\n                }\n              }\n            }));\n\n            if (txSucceeded) {\n              this.setState((prevState) => ({\n                inputValue: {\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]: {\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          let redeemMethod = 'redeemIdleToken';\n          let redeemParams = [idleTokenToRedeem];\n\n          if (redeemSkipGov) {\n            redeemMethod = 'redeemIdleTokenSkipGov';\n            const _skipGovTokenRedeem = await this.getSkippedGovTokensFlags();\n            redeemParams.push(_skipGovTokenRedeem);\n          }\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, redeemMethod, redeemParams, callbackRedeem, callbackReceiptRedeem, txData);\n        }\n        break;\n      default: // Reset loading if not handled action\n        loading = false;\n        break;\n    }\n\n    if (contractSendResult !== false || loading !== this.state.processing[this.state.action].loading) {\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]: {\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  showMaxSlippage = () => {\n    this.setState({\n      showMaxSlippage: true\n    });\n  }\n\n  checkAction = () => {\n    let action = this.state.action;\n\n    switch (action) {\n      case 'redeem':\n        if (!this.state.canRedeem) {\n          action = 'deposit';\n        }\n        break;\n      default:\n        break;\n    }\n\n    if (action !== this.state.action) {\n      this.setState({\n        action\n      }, () => {\n        this.checkButtonDisabled();\n      });\n    } else {\n      this.checkButtonDisabled();\n    }\n  }\n\n  checkButtonDisabled = (amount = null) => {\n\n    if (!this.state.action) {\n      return false;\n    }\n\n    if (!amount) {\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action) {\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && (amount.lte(0) || amount.gt(this.props.tokenBalance)));\n        break;\n      case 'redeem':\n        buttonDisabled = !this.state.canRedeemCurve && !this.state.redeemGovTokens && (buttonDisabled || (!amount || amount.lte(0) || amount.gt(this.props.redeemableBalance)));\n\n        if (!buttonDisabled && this.state.redeemSkipGov && this.state.redeemSkipGovTokens.length > 0 && !this.state.agreeSkipGovTokens) {\n          buttonDisabled = true;\n        }\n        // console.log('checkButtonDisabled',this.state.redeemSkipGov,this.state.redeemSkipGovTokens.length,this.state.agreeSkipGovTokens,buttonDisabled);\n        break;\n      default:\n        break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null) {\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch (this.state.action) {\n      case 'deposit':\n        amount = this.props.tokenBalance ? this.functionsUtil.BNify(this.props.tokenBalance).times(selectedPercentage) : null;\n        break;\n      case 'redeem':\n        amount = this.props.redeemableBalance ? this.functionsUtil.BNify(this.props.redeemableBalance).times(selectedPercentage) : null;\n        break;\n      default:\n        break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue: {\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null) {\n      return false;\n    }\n\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action) {\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector: {\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  changeInputValue = async (e) => {\n    if (!this.state.action) {\n      return false;\n    }\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector: {\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue: {\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()) {\n      case 'deposit':\n\n        break;\n      case 'redeem':\n        if (!this.state.canRedeem && !this.state.canRedeemCurve) {\n          action = null;\n        }\n        break;\n      default:\n        action = null;\n        break;\n    }\n\n    if (action !== null) {\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig) {\n      return null;\n    }\n\n\n    const viewOnly = this.props.connectorName === 'custom';\n    const currentNetwork = this.functionsUtil.getCurrentNetwork();\n\n    const isDepositDisabled = this.props.tokenConfig.canDeposit && !this.props.tokenConfig.canDeposit.enabled;\n    // const depositDisabledMessage1 = isDepositDisabled && this.props.tokenConfig.canDeposit.disabledMessageDepositKey ? this.functionsUtil.getGlobalConfig(['messages', this.props.tokenConfig.canDeposit.disabledMessageDepositKey]) : null;\n    // const depositDisabledMessage2 = this.state.canRedeem ? this.functionsUtil.getGlobalConfig(['messages', this.props.tokenConfig.canDeposit.disabledMessageRedeemKey]) : \"\";\n    const depositDisabledMessage = isDepositDisabled ? (this.state.canRedeem && this.props.tokenConfig.canDeposit.disabledMessageRedeemKey ? this.functionsUtil.getGlobalConfig(['messages', this.props.tokenConfig.canDeposit.disabledMessageRedeemKey]) : (this.props.tokenConfig.canDeposit.disabledMessageDepositKey ? this.functionsUtil.getGlobalConfig(['messages', this.props.tokenConfig.canDeposit.disabledMessageDepositKey]) : null) ) : null;\n\n    const govTokensDisabled = this.props.tokenConfig.govTokensDisabled;\n    const govTokensEnabled = !govTokensDisabled && this.functionsUtil.getGlobalConfig(['strategies', this.props.selectedStrategy, 'govTokensEnabled']) && Object.keys(this.state.tokenGovTokens).length > 0;\n    const skipMintForDepositEnabled = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : true;\n    const skipMintCheckboxEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'skipMintCheckboxEnabled']) && skipMintForDepositEnabled;\n\n    const showRedeemFlow = this.state.canRedeem && (!this.state.redeemCurveEnabled || this.state.showRedeemFlow) && this.state.action === 'redeem';\n\n    const redeemGovTokenEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'redeemGovTokens', 'enabled']) && govTokensEnabled && showRedeemFlow;// && this.props.govTokensBalance.gt(0);\n    const redeemGovTokens = redeemGovTokenEnabled && this.state.redeemGovTokens;\n\n    const redeemSkipGovConfig = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'redeemSkipGov']);\n    const redeemSkipGovEnabled = redeemSkipGovConfig && !redeemSkipGovConfig.disabledTokens.includes(this.props.tokenConfig.idle.token) && govTokensEnabled && showRedeemFlow;\n    const redeemSkipGov = redeemSkipGovEnabled && this.state.redeemSkipGov && Object.keys(this.props.govTokensUserBalances).length > 0 && this.props.govTokensBalance.gt(0);\n    const redeemSkipGovNoTokens = redeemSkipGovEnabled && this.state.redeemSkipGov && (!Object.keys(this.props.govTokensUserBalances).length || this.props.govTokensBalance.lte(0));\n\n\n    const showAdvancedRedeemOptions = redeemGovTokenEnabled || redeemSkipGovEnabled;\n    // console.log('showAdvancedRedeemOptions',showAdvancedRedeemOptions,redeemGovTokenEnabled,redeemSkipGovEnabled,govTokensEnabled,showRedeemFlow);\n\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'erc20ForwarderEnabled']);\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'metaTransactionsEnabled']);\n    const depositErc20ForwarderEnabledTokens = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'erc20ForwarderProxyContract', 'tokens']);\n\n    // Biconomy Start\n    const metaTransactionsAvailable = depositMetaTransactionsEnabled && this.props.biconomy && this.state.actionProxyContract[this.state.action];\n    const useMetaTx = metaTransactionsAvailable && this.state.metaTransactionsEnabled;\n\n    const erc20ForwarderEnabled = depositErc20ForwarderEnabled && Object.keys(depositErc20ForwarderEnabledTokens).includes(this.props.selectedToken) && depositErc20ForwarderEnabledTokens[this.props.selectedToken].enabled && this.props.biconomy && this.props.erc20ForwarderClient && this.state.actionProxyContract[this.state.action] && !isDepositDisabled;\n\n    // console.log(erc20ForwarderEnabled,depositErc20ForwarderEnabled,this.props.biconomy,this.props.erc20ForwarderClient,this.state.actionProxyContract[this.state.action]);\n    // Biconomy End\n\n    const totalBalance = this.state.action === 'deposit' ? this.props.tokenBalance : this.props.redeemableBalance;\n    const migrateText = this.state.migrationEnabled && this.props.tokenConfig.migration.message !== undefined ? this.props.tokenConfig.migration.message : null;\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve', 'availableTokens', this.props.tokenConfig.idle.token, 'enabled']);\n\n    const depositCurve = curveTokenEnabled && this.state.depositCurveEnabled && this.state.action === 'deposit';\n\n    const showDepositOptions = this.state.action === 'deposit' && !this.state.contractPaused && (curveTokenEnabled || this.state.tokenApproved);\n\n    const showDepositCurve = showDepositOptions && curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canDepositCurve && this.state.action === 'deposit';\n    const showRedeemCurve = curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canRedeemCurve && this.state.action === 'redeem';\n\n    const showCurveSlippage = depositCurve && this.state.depositCurveSlippage && this.state.depositCurveBalance && !this.state.buttonDisabled;\n\n    const showRebalanceOption = false && this.state.canDeposit && skipMintCheckboxEnabled && this.state.action === 'deposit';\n    const showAdvancedDepositOptions = showDepositCurve || showRebalanceOption;\n\n    const batchDepositInfo = this.functionsUtil.getGlobalConfig(['tools','batchDeposit']);\n\n    const batchDepositEnabled = batchDepositInfo.enabled && typeof batchDepositInfo.props.availableTokens[this.props.tokenConfig.idle.token] !== 'undefined' && batchDepositInfo.availableNetworks.includes(currentNetwork.id);\n    \n    const batchDepositDepositEnabled = batchDepositInfo.depositEnabled;\n\n    const showBatchDeposit = !useMetaTx && batchDepositEnabled && batchDepositDepositEnabled && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    const ethWrapperInfo = this.functionsUtil.getGlobalConfig(['tools', 'ethWrapper']);\n    const ETHWrapperComponent = ethWrapperInfo.subComponent;\n    const showETHWrapper = this.props.selectedToken === 'WETH' && ethWrapperInfo.enabled && ethWrapperInfo.availableNetworks.includes(currentNetwork.id) && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    const polygonBridgeInfo = this.functionsUtil.getGlobalConfig(['tools','polygonBridge']);\n    // const PolygonBridgeComponent = polygonBridgeInfo.subComponent;\n    const polygonNetworkId = this.functionsUtil.getGlobalConfig(['network','providers','polygon','networkPairs',currentNetwork.id]);\n    // const polygonNetwork = this.functionsUtil.getGlobalConfig(['network','availableNetworks',polygonNetworkId]);\n\n    const canPerformAction = /*!depositCurve && !this.state.redeemCurveEnabled && */((this.state.action === 'deposit' && this.state.canDeposit && !isDepositDisabled) || (this.state.action === 'redeem' && this.state.canRedeem) || redeemGovTokens) && (!this.state.showETHWrapperEnabled || this.state.action === 'redeem') && (!this.state.showPolygonBridgeEnabled || this.state.action === 'redeem');\n    const showActionFlow = !redeemGovTokens && canPerformAction;\n\n    const showBuyFlow = this.state.componentMounted && currentNetwork.provider === 'infura' && (!showDepositCurve || this.state.showBuyFlow) && !this.state.depositCurveEnabled && this.state.tokenApproved && !this.state.contractPaused && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.action === 'deposit' && !isDepositDisabled && !this.state.canDeposit && !this.state.showETHWrapperEnabled;\n    const showPolygonBridge = this.state.componentMounted && this.state.action === 'deposit' && !this.state.canDeposit && currentNetwork.provider === 'polygon';\n    const showPolygonBridgeBanner = !showPolygonBridge && currentNetwork.provider === 'polygon' && polygonNetworkId && polygonBridgeInfo.enabled && this.state.action === 'deposit';\n\n    const buyToken = this.functionsUtil.BNify(this.props.accountBalance).gt(0) ? this.props.selectedToken : this.functionsUtil.getBaseToken();\n\n    const _referral = this.getReferralAddress();\n    const showReferral = _referral && this.state.action === 'deposit' && showActionFlow && !showBuyFlow;\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1, 0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          <Box\n            width={1}\n          >\n            <Text mb={1}>\n              Select your asset:\n            </Text>\n            <AssetSelector\n              {...this.props}\n            />\n          </Box>\n          {\n            viewOnly ? (\n              <IconBox\n                cardProps={{\n                  mt: 3\n                }}\n                icon={'Visibility'}\n                text={'You are using Idle in \"Read-Only\" mode.<br />Logout and connect with your wallet to interact.'}\n              />\n            ) : (\n                <Migrate\n                  {...this.props}\n                  migrateTextBefore={migrateText}\n                  migrateText={migrateText !== null ? '' : null}\n                  toggleSkipMigration={this.toggleSkipMigration.bind(this)}\n                >\n                  {\n                    !this.props.account ? (\n                      <ConnectBox\n                        {...this.props}\n                      />\n                    ) : this.state.componentMounted ? (\n                      this.state.action && (\n                        <Box\n                          width={1}\n                        >\n                          <Flex\n                            mt={2}\n                            flexDirection={'column'}\n                          >\n                            <Text mb={2}>\n                              Choose the action:\n                          </Text>\n\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              justifyContent={'space-between'}\n                            >\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  width: 0.48,\n                                  onMouseDown: () => {\n                                    this.setAction('deposit');\n                                  }\n                                }}\n                                isInteractive={true}\n                                isActive={this.state.action === 'deposit'}\n\n                              >\n                                <Flex\n                                  my={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <TransactionField\n                                    transaction={{\n                                      action: 'deposit'\n                                    }}\n                                    fieldInfo={{\n                                      name: 'icon',\n                                      props: {\n                                        mr: 3\n                                      }\n                                    }}\n                                  />\n                                  <Text\n                                    fontSize={3}\n                                    fontWeight={3}\n                                  >\n                                    Deposit\n                                </Text>\n                                </Flex>\n                              </DashboardCard>\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  width: 0.48,\n                                  onMouseDown: () => {\n                                    this.setAction('redeem');\n                                  }\n                                }}\n                                isInteractive={true}\n                                isActive={this.state.action === 'redeem'}\n                                isDisabled={!this.state.canRedeem && !this.state.canRedeemCurve}\n                              >\n                                <Flex\n                                  my={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <TransactionField\n                                    transaction={{\n                                      action: 'redeem'\n                                    }}\n                                    fieldInfo={{\n                                      name: 'icon',\n                                      props: {\n                                        mr: 3\n                                      }\n                                    }}\n                                  />\n                                  <Text\n                                    fontSize={3}\n                                    fontWeight={3}\n                                  >\n                                    Redeem\n                                </Text>\n                                </Flex>\n                              </DashboardCard>\n                            </Flex>\n                            {\n                              isDepositDisabled && (\n                                <IconBox\n                                  cardProps={{\n                                    mt: 3\n                                  }}\n                                  iconProps={{\n                                    color:'#ffe000'\n                                  }}\n                                  icon={'Warning'}\n                                  text={depositDisabledMessage}\n                                >\n                                  {\n                                    this.state.action === 'deposit' && this.state.canRedeem && (\n                                      <RoundButton\n                                        buttonProps={{\n                                          mt:3,\n                                          width:[1,1/2]\n                                        }}\n                                        handleClick={e => this.setAction('redeem')}\n                                      >\n                                        Redeem\n                                      </RoundButton>\n                                    )\n                                  }\n                                </IconBox>\n                              )\n                            }\n                          </Flex>\n                          {\n                            (showRedeemFlow && this.state.unlentBalance) &&\n                            <DashboardCard\n                              cardProps={{\n                                py: 2,\n                                px: 2,\n                                mt: 3,\n                                display: 'flex',\n                                alignItems: 'center',\n                                flexDirection: 'column',\n                                justifyContent: 'center',\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={'LocalGasStation'}\n                                />\n                                <Text\n                                  px={2}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Available balance for Cheap Redeem\n                                </Text>\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'center'}\n                                    hoverColor={'copyColor'}\n                                  >\n                                    {this.state.unlentBalance.toFixed(4)} {this.props.selectedToken}\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.functionsUtil.getGlobalConfig(['messages', 'cheapRedeem'])}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              </Flex>\n                            </DashboardCard>\n                          }\n                          {\n                            showAdvancedRedeemOptions ? (\n                              <DashboardCard\n                                cardProps={{\n                                  pt: 2,\n                                  px: 2,\n                                  mt: 3,\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                  flexDirection: 'column',\n                                  justifyContent: 'center',\n                                  pb: this.state.showAdvancedOptions ? 3 : 2,\n                                }}\n                              >\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <Link\n                                    ml={1}\n                                    mainColor={'primary'}\n                                    hoverColor={'primary'}\n                                    onClick={this.toggleShowAdvancedOptions}\n                                  >\n                                    {this.state.showAdvancedOptions ? 'Hide' : 'Show'} advanced options\n                                </Link>\n                                  <Icon\n                                    size={'1.8em'}\n                                    color={'cellText'}\n                                    name={this.state.showAdvancedOptions ? 'ArrowDropUp' : 'ArrowDropDown'}\n                                  />\n                                </Flex>\n                                {\n                                  this.state.showAdvancedOptions &&\n                                  <Flex\n                                    mt={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      redeemGovTokenEnabled &&\n                                      <Flex\n                                        alignItems={'center'}\n                                        justifyContent={'row'}\n                                      >\n                                        <Checkbox\n                                          required={false}\n                                          checked={this.state.redeemGovTokens}\n                                          label={`Redeem governance tokens only`}\n                                          onChange={e => this.toggleRedeemGovTokens(e.target.checked)}\n                                        />\n                                        <Link\n                                          color={'link'}\n                                          hoverColor={'link'}\n                                          onClick={e => this.props.openTooltipModal('Redeem governance tokens', `This feature allows you to redeem just the amount of governance tokens accrued${this.props.govTokensBalance && this.props.govTokensBalance.gt(0) ? ` (~${this.props.govTokensBalance.toFixed(2)}$)` : null} without redeeming the underlying token.`)}\n                                        >\n                                          (read more)\n                                          </Link>\n                                      </Flex>\n                                    }\n                                    {\n                                      redeemSkipGovEnabled &&\n                                      <Flex\n                                        alignItems={'center'}\n                                        flexDirection={'row'}\n                                      >\n                                        <Checkbox\n                                          required={false}\n                                          checked={this.state.redeemSkipGov}\n                                          label={`Redeem without governance tokens`}\n                                          onChange={e => this.toggleRedeemSkipGov(e.target.checked)}\n                                        />\n                                        <Icon\n                                          mr={1}\n                                          size={'1.2em'}\n                                          name={'Warning'}\n                                          color={'#ffe000'}\n                                        />\n                                        <Link\n                                          color={'link'}\n                                          hoverColor={'link'}\n                                          onClick={e => this.props.openTooltipModal('Redeem without governance tokens', this.functionsUtil.getGlobalConfig(['messages', 'redeemSkipGov']))}\n                                        >\n                                          (read more)\n                                          </Link>\n                                      </Flex>\n                                    }\n                                  </Flex>\n                                }\n                              </DashboardCard>\n                            ) : showAdvancedDepositOptions ? (\n                              <DashboardCard\n                                cardProps={{\n                                  pt: 2,\n                                  px: 2,\n                                  mt: 3,\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                  flexDirection: 'column',\n                                  justifyContent: 'center',\n                                  pb: this.state.showAdvancedOptions ? 3 : 2,\n                                }}\n                              >\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <Link\n                                    ml={1}\n                                    mainColor={'primary'}\n                                    hoverColor={'primary'}\n                                    onClick={this.toggleShowAdvancedOptions}\n                                  >\n                                    {this.state.showAdvancedOptions ? 'Hide' : 'Show'} advanced options\n                                </Link>\n                                  <Icon\n                                    size={'1.8em'}\n                                    color={'cellText'}\n                                    name={this.state.showAdvancedOptions ? 'ArrowDropUp' : 'ArrowDropDown'}\n                                  />\n                                </Flex>\n                                {\n                                  this.state.showAdvancedOptions &&\n                                  <Flex\n                                    mt={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      showDepositCurve &&\n                                      <Flex\n                                        alignItems={'center'}\n                                        justifyContent={'row'}\n                                      >\n                                        <Checkbox\n                                          required={false}\n                                          disabled={this.state.directMint}\n                                          label={`Deposit in the Curve Pool`}\n                                          checked={this.state.depositCurveEnabled}\n                                          onChange={e => this.toggleDepositCurve(e.target.checked)}\n                                        />\n                                        <Link\n                                          mainColor={'primary'}\n                                          hoverColor={'primary'}\n                                          onClick={e => this.props.openTooltipModal('How Curve works', this.functionsUtil.getGlobalConfig(['messages', 'curveInstructions']))}\n                                        >\n                                          (read more)\n                                          </Link>\n                                      </Flex>\n                                    }\n                                    {\n                                      showRebalanceOption &&\n                                      <Flex\n                                        alignItems={'center'}\n                                        justifyContent={'row'}\n                                      >\n                                        <Checkbox\n                                          required={false}\n                                          label={`Rebalance the pool`}\n                                          checked={this.state.directMint}\n                                          disabled={this.state.depositCurveEnabled}\n                                          onChange={e => this.toggleSkipMint(e.target.checked)}\n                                        />\n                                        <Tooltip\n                                          placement={'bottom'}\n                                          message={this.functionsUtil.getGlobalConfig(['messages', 'directMint'])}\n                                        >\n                                          <Icon\n                                            size={'1em'}\n                                            color={'cellTitle'}\n                                            name={\"InfoOutline\"}\n                                          />\n                                        </Tooltip>\n                                      </Flex>\n                                    }\n                                  </Flex>\n                                }\n                              </DashboardCard>\n                            ) : (\n                                  <Flex\n                                    width={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      showDepositCurve && (\n                                        <Flex\n                                          width={1}\n                                          flexDirection={'column'}\n                                          justifyContent={'center'}\n                                        >\n                                          <DashboardCard\n                                            isRainbow={true}\n                                            cardProps={{\n                                              py: 3,\n                                              px: 2,\n                                              mt: 3,\n                                              display: 'flex',\n                                              alignItems: 'center',\n                                              flexDirection: 'column',\n                                              justifyContent: 'center',\n                                            }}\n                                          >\n                                            <Flex\n                                              width={1}\n                                              alignItems={'center'}\n                                              flexDirection={'column'}\n                                              justifyContent={'center'}\n                                            >\n                                              <Image\n                                                height={'1.8em'}\n                                                src={curveConfig.params.image}\n                                              />\n                                              <Text\n                                                mt={2}\n                                                px={2}\n                                                fontSize={1}\n                                                color={'dark-gray'}\n                                                textAlign={'center'}\n                                              >\n                                                Deposit your tokens in the Curve Pool and boost your APY up to {this.state.curveAPY ? this.state.curveAPY.toFixed(2) : '-'}%.\n                                          <Link\n                                                  ml={1}\n                                                  mainColor={'primary'}\n                                                  hoverColor={'primary'}\n                                                  onClick={e => this.props.openTooltipModal('How Curve works', this.functionsUtil.getGlobalConfig(['messages', 'curveInstructions']))}\n                                                >\n                                                  Read More\n                                          </Link>\n                                              </Text>\n                                              <Checkbox\n                                                mt={2}\n                                                required={false}\n                                                label={`Deposit in Curve`}\n                                                checked={this.state.depositCurveEnabled}\n                                                onChange={e => this.toggleDepositCurve(e.target.checked)}\n                                              />\n                                            </Flex>\n                                          </DashboardCard>\n                                          {\n                                            (!this.state.showBuyFlow && !this.state.depositCurveEnabled && !this.state.canDeposit) &&\n                                            <Link\n                                              textAlign={'center'}\n                                              hoverColor={'primary'}\n                                              onClick={e => this.setShowBuyFlow(true)}\n                                            >\n                                              I just want to deposit more {this.props.selectedToken}\n                                            </Link>\n                                          }\n                                        </Flex>\n                                      )\n                                    }\n                                    {\n                                      showRebalanceOption && (\n                                        <DashboardCard\n                                          cardProps={{\n                                            py: 3,\n                                            px: 2,\n                                            mt: 3,\n                                            display: 'flex',\n                                            alignItems: 'center',\n                                            flexDirection: 'column',\n                                            justifyContent: 'center',\n                                          }}\n                                        >\n                                          <Flex\n                                            width={1}\n                                            alignItems={'center'}\n                                            flexDirection={'column'}\n                                            justifyContent={'center'}\n                                          >\n                                            <Icon\n                                              size={'1.8em'}\n                                              color={'cellText'}\n                                              name={'InfoOutline'}\n                                            />\n                                            <Text\n                                              mt={1}\n                                              px={2}\n                                              fontSize={1}\n                                              color={'cellText'}\n                                              textAlign={'center'}\n                                            >\n                                              By checking this flag you can rebalance the pool and help all users gain an additional APR\n                                      </Text>\n                                          </Flex>\n                                          <Checkbox\n                                            mt={2}\n                                            required={false}\n                                            label={`Rebalance the pool`}\n                                            checked={this.state.directMint}\n                                            onChange={e => this.toggleSkipMint(e.target.checked)}\n                                          />\n                                        </DashboardCard>\n                                      )\n                                    }\n                                    {\n                                      redeemGovTokenEnabled && (\n                                        <DashboardCard\n                                          cardProps={{\n                                            py: 3,\n                                            px: 2,\n                                            mt: 3,\n                                            display: 'flex',\n                                            alignItems: 'center',\n                                            flexDirection: 'column',\n                                            justifyContent: 'center',\n                                          }}\n                                        >\n                                          <Flex\n                                            width={1}\n                                            alignItems={'center'}\n                                            flexDirection={'column'}\n                                            justifyContent={'center'}\n                                          >\n                                            <Icon\n                                              size={'1.8em'}\n                                              color={'cellText'}\n                                              name={'InfoOutline'}\n                                            />\n                                            <Text\n                                              mt={1}\n                                              px={2}\n                                              fontSize={1}\n                                              color={'cellText'}\n                                              textAlign={'center'}\n                                            >\n                                              By redeeming your {this.props.selectedToken} you will automatically get also the proportional amount of governance tokens accrued{this.props.govTokensBalance && this.props.govTokensBalance.gt(0) ? ` (~ $${this.props.govTokensBalance.toFixed(2)})` : null}.\n                                      </Text>\n                                          </Flex>\n                                          <Checkbox\n                                            mt={2}\n                                            required={false}\n                                            checked={this.state.redeemGovTokens}\n                                            label={`Redeem governance tokens only`}\n                                            onChange={e => this.toggleRedeemGovTokens(e.target.checked)}\n                                          />\n                                        </DashboardCard>\n                                      )\n                                    }\n                                  </Flex>\n                                )\n                          }\n                          {\n                            redeemSkipGov ? (\n                              <DashboardCard\n                                cardProps={{\n                                  mt: 2,\n                                  mb: 2,\n                                  py: 2,\n                                  px: 1\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                >\n                                  <Text\n                                    mt={1}\n                                    fontSize={2}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    Select the gov tokens you want to give away:\n                                </Text>\n                                  <Flex\n                                    mt={2}\n                                    width={1}\n                                    boxShadow={0}\n                                    style={{\n                                      flexWrap: 'wrap'\n                                    }}\n                                    alignItems={'center'}\n                                    justifyContent={'center'}\n                                  >\n                                    {\n                                      Object.keys(this.props.govTokensUserBalances).map(token => {\n                                        const balance = this.props.govTokensUserBalances[token];\n                                        const isActive = this.state.redeemSkipGovTokens.includes(token);\n                                        const tokenConfig = this.functionsUtil.getGlobalConfig(['govTokens', token]);\n                                        return (\n                                          <Flex\n                                            p={2}\n                                            mb={1}\n                                            mx={1}\n                                            width={'auto'}\n                                            style={{\n                                              cursor: 'pointer'\n                                            }}\n                                            borderRadius={2}\n                                            flexDirection={'row'}\n                                            key={`skipGovToken_${token}`}\n                                            justifyContent={'flex-start'}\n                                            backgroundColor={isActive ? '#2a4b78' : 'cardBgHover'}\n                                            onClick={e => this.setRedeemSkipGovTokens(token, !this.state.redeemSkipGovTokens.includes(token))}\n                                          >\n                                            <Checkbox\n                                              m={0}\n                                              required={false}\n                                              checked={isActive}\n                                              onChange={e => this.setRedeemSkipGovTokens(token, e.target.checked)}\n                                            />\n                                            <AssetField\n                                              token={token}\n                                              tokenConfig={tokenConfig}\n                                              fieldInfo={{\n                                                name: 'icon',\n                                                props: {\n                                                  mr: 1,\n                                                  width: ['1.4em', '1.6em'],\n                                                  height: ['1.4em', '1.6em']\n                                                }\n                                              }}\n                                            />\n                                            <SmartNumber\n                                              ml={1}\n                                              fontSize={[0, 2]}\n                                              fontWeight={500}\n                                              maxPrecision={4}\n                                              color={'cellText'}\n                                              number={balance.toString()}\n                                            />\n                                          </Flex>\n                                        );\n                                      })\n                                    }\n                                  </Flex>\n                                </Flex>\n                              </DashboardCard>\n                            ) : redeemSkipGovNoTokens && (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 2,\n                                  my: 2\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    name={'MoneyOff'}\n                                    color={'cellText'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    You don't have any gov tokens to give away.\n                                </Text>\n                                </Flex>\n                              </DashboardCard>\n                            )\n                          }\n                          {\n                            redeemSkipGov && this.functionsUtil.BNify(this.state.skippedGovTokensBalance).gt(0) ? (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 2,\n                                  my: 2\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    name={'Warning'}\n                                    color={'#ffe000'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    fontSize={1}\n                                    color={'red'}\n                                    textAlign={'center'}\n                                  >\n                                    You are giving away {this.functionsUtil.formatMoney(this.state.skippedGovTokensBalance)}$ worth of governance tokens!\n                                </Text>\n                                  {\n                                    this.state.skipGovTokensGasSave && this.state.skipGovTokensGasSave.gte(0.0001) && (\n                                      <Text\n                                        mt={1}\n                                        fontSize={1}\n                                        color={'#00b84a'}\n                                        textAlign={'center'}\n                                      >\n                                        This will save you {this.state.skipGovTokensGasSave.toFixed(4)} ETH of gas (~{this.state.skipGovTokensGasSaveUSD.toFixed(2)}$)\n                                    </Text>\n                                    )\n                                  }\n                                  <Text\n                                    mt={1}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    To proceed with the redeem please give your authorization by checking the following flag:\n                                </Text>\n                                  <Checkbox\n                                    my={1}\n                                    required={false}\n                                    checked={this.state.agreeSkipGovTokens}\n                                    label={`I agree to give away my governance tokens`}\n                                    onChange={e => this.toggleAgreeSkipGovTokens(e.target.checked)}\n                                  />\n                                </Flex>\n                              </DashboardCard>\n                            ) : redeemSkipGov && this.state.redeemSkipGovTokens.length > 0 && (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  my: 2\n                                }}\n                              >\n                                <FlexLoader\n                                  flexProps={{\n                                    flexDirection: 'row'\n                                  }}\n                                  loaderProps={{\n                                    size: '25px',\n                                  }}\n                                  textProps={{\n                                    ml: 2\n                                  }}\n                                  text={'Loading estimated gas usage...'}\n                                />\n                              </DashboardCard>\n                            )\n                          }\n                          {\n                            showReferral && (\n                              <DashboardCard\n                                cardProps={{\n                                  py: 3,\n                                  px: 2,\n                                  mt: 3,\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                  flexDirection: 'column',\n                                  justifyContent: 'center',\n                                }}\n                              >\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    name={'Share'}\n                                    color={'cellText'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    px={2}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    You are depositing with the following referral address:\n                                </Text>\n                                  <Text\n                                    mt={1}\n                                    px={2}\n                                    fontSize={1}\n                                    fontWeight={500}\n                                    textAlign={'center'}\n                                    color={this.props.theme.colors.transactions.status.completed}\n                                  >\n                                    {_referral}\n                                  </Text>\n                                </Flex>\n                              </DashboardCard>\n                            )\n                          }\n                          {\n                            (metaTransactionsAvailable && !showBuyFlow && !this.state.contractPaused) ? (\n                              <DashboardCard\n                                cardProps={{\n                                  py: 3,\n                                  px: 2,\n                                  my: 3,\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                  flexDirection: 'column',\n                                  justifyContent: 'center',\n                                }}\n                              >\n                                {\n                                  this.state.metaTransactionsEnabled && this.state.txError[this.state.action] && this.state.actionProxyContract[this.state.action].approved ? (\n                                    <Flex\n                                      width={1}\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        name={'Warning'}\n                                        color={'cellText'}\n                                      />\n                                      <Text\n                                        mt={1}\n                                        fontSize={1}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        Seems like you are having some trouble with Meta-Transactions... Disable them by unchecking the box below and try again!\n                                    </Text>\n                                    </Flex>\n                                  ) : this.functionsUtil.getWalletProvider() === 'WalletConnect' && this.state.metaTransactionsEnabled ? (\n                                    <Flex\n                                      width={1}\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        name={'Warning'}\n                                        color={'cellText'}\n                                      />\n                                      <Text\n                                        mt={1}\n                                        fontSize={1}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        Please disable Meta-Transactions if you are using Argent Wallet to avoid failed transactions!\n                                    </Text>\n                                    </Flex>\n                                  ) : (\n                                        <Text\n                                          mt={1}\n                                          fontSize={1}\n                                          color={'cellText'}\n                                          textAlign={'center'}\n                                        >\n                                          Meta-Transactions are {this.state.metaTransactionsEnabled ? 'enabled' : 'disabled'} for {this.state.action}s!<br />\n                                          {\n                                            this.state.metaTransactionsEnabled && !this.state.actionProxyContract[this.state.action].approved && `Please either enable the Smart-Contract to enjoy gas-less ${this.state.action} or just disable meta-tx.`\n                                          }\n                                        </Text>\n                                      )\n                                }\n                                <Checkbox\n                                  mt={2}\n                                  required={false}\n                                  checked={this.state.metaTransactionsEnabled}\n                                  onChange={e => this.toggleMetaTransactionsEnabled(e.target.checked)}\n                                  label={`${this.functionsUtil.capitalize(this.state.action)} with Meta-Transaction`}\n                                />\n                              </DashboardCard>\n                            ) : (erc20ForwarderEnabled && !showBuyFlow && !this.state.contractPaused) && (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  my: 3,\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                  flexDirection: 'column',\n                                  justifyContent: 'center',\n                                }}\n                              >\n                                <Text\n                                  mb={2}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  How do you prefer to pay gas fees for this {this.state.action}?\n                                </Text>\n                                <Flex\n                                  width={[1, 0.7]}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'space-between'}\n                                >\n                                  <CardIconButton\n                                    {...this.props}\n                                    cardProps={{\n                                      py: 2,\n                                      px: [2, 3],\n                                      width: 0.48\n                                    }}\n                                    textProps={{\n                                      ml: [1, 2],\n                                    }}\n                                    text={this.props.selectedToken}\n                                    isActive={this.state.erc20ForwarderEnabled}\n                                    imageProps={{\n                                      height: this.props.isMobile ? '1.4em' : '1.8em',\n                                      width: this.props.isMobile ? '1.4em' : '1.8em'\n                                    }}\n                                    image={`/images/tokens/${this.props.selectedToken}.svg`}\n                                    handleClick={e => this.toggleErc20ForwarderEnabled(true)}\n                                  />\n                                  <CardIconButton\n                                    {...this.props}\n                                    cardProps={{\n                                      py: 2,\n                                      px: [2, 3],\n                                      width: 0.48\n                                    }}\n                                    textProps={{\n                                      ml: [1, 2],\n                                    }}\n                                    text={'ETH'}\n                                    isActive={!this.state.erc20ForwarderEnabled}\n                                    imageProps={{\n                                      height: this.props.isMobile ? '1.4em' : '1.8em',\n                                      width: this.props.isMobile ? '1.4em' : '1.8em'\n                                    }}\n                                    image={`/images/tokens/ETH.svg`}\n                                    handleClick={e => this.toggleErc20ForwarderEnabled(false)}\n                                  />\n                                </Flex>\n                                {\n                                  this.state.erc20ForwarderEnabled && this.state.txError[this.state.action] && (\n                                    <Text\n                                      mt={2}\n                                      fontSize={1}\n                                      color={'red'}\n                                      textAlign={'center'}\n                                    >\n                                      The meta-transaction cannot be executed due to insufficient funds, fund your wallet or select ETH and try again.\n                                  </Text>\n                                  )\n                                }\n                                {\n                                  /*\n                                  <Text\n                                    mt={2}\n                                    fontSize={'11px'}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    Powered by <ExtLink fontSize={'11px'} href={'https://biconomy.io'}>Biconomy</ExtLink>\n                                  </Text>\n                                  */\n                                }\n                              </DashboardCard>\n                            )\n                          }\n                          {\n                            (this.state.minAmountForMintReached && this.state.action === 'deposit') && (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  mt: 3\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    color={'cellText'}\n                                    name={'InfoOutline'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    fontSize={2}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    By depositing more than {this.functionsUtil.formatMoney(this.state.minAmountForMint)}$ {this.state.showPoolPerc ? `(${this.state.minAmountForMint.div(this.state.totalAUM).times(100).toFixed(0)}% of the pool)` : null} the pool will be automatically rebalanced, gas cost may be higher.\n                                </Text>\n                                </Flex>\n                              </DashboardCard>\n                            )\n                          }\n                          {\n                            showBatchDeposit ? (\n                              <Flex\n                                p={2}\n                                mt={3}\n                                width={1}\n                                borderRadius={2}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                                backgroundColor={'DashboardCard'}\n                                border={`1px solid ${this.props.theme.colors.primary}`}\n                              >\n                                <Link\n                                  textAlign={'center'}\n                                  hoverColor={'primary'}\n                                  href={`/#/dashboard/tools/${batchDepositInfo.route}/${this.props.tokenConfig.idle.token}`}\n                                >\n                                  Gas fees too high? Save gas with our Batch Deposit!\n                                </Link>\n                                <Icon\n                                  ml={1}\n                                  size={'1em'}\n                                  color={'primary'}\n                                  name={'LocalGasStation'}\n                                />\n                              </Flex>\n                            ) : showETHWrapper ? (\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <DashboardCard\n                                  cardProps={{\n                                    py: 3,\n                                    px: 2,\n                                    mt: 3,\n                                    display: 'flex',\n                                    alignItems: 'center',\n                                    flexDirection: 'column',\n                                    justifyContent: 'center',\n                                    pb: this.state.showAdvancedOptions ? 3 : 2,\n                                  }}\n                                >\n                                  <Flex\n                                    alignItems={'center'}\n                                    justifyContent={'row'}\n                                  >\n                                    <Checkbox\n                                      required={false}\n                                      checked={this.state.showETHWrapperEnabled}\n                                      label={`Convert your ETH to WETH`}\n                                      onChange={e => this.toggleShowETHWrapper(e.target.checked)}\n                                    />\n                                  </Flex>\n                                </DashboardCard>\n                                {\n                                  this.state.showETHWrapperEnabled &&\n                                  <ETHWrapperComponent\n                                    {...this.props}\n                                    action={'wrap'}\n                                    fullWidth={true}\n                                    toolProps={ethWrapperInfo.props}\n                                  />\n                                }\n                              </Flex>\n                            ) : showPolygonBridgeBanner && (\n                              <Flex\n                                p={2}\n                                mt={3}\n                                width={1}\n                                borderRadius={2}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                                backgroundColor={'DashboardCard'}\n                                border={`1px solid ${this.props.theme.colors.primary}`}\n                              >\n                                <Image\n                                  height={'1.2em'}\n                                  src={polygonBridgeInfo.image}\n                                />\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <Link\n                                    textAlign={'center'}\n                                    hoverColor={'primary'}\n                                    href={`/#/dashboard/tools/${polygonBridgeInfo.route}/${this.props.selectedToken}`}\n                                  >\n                                    Use the {polygonBridgeInfo.label} to deposit your {this.props.selectedToken}\n                                  </Link>\n                                  <Icon\n                                    ml={1}\n                                    size={'1em'}\n                                    color={'primary'}\n                                    name={'ArrowForward'}\n                                  />\n                                </Flex>\n                              </Flex>\n                            )\n                          }\n                          {\n                            showRedeemCurve && this.state.canRedeem && (\n                              <Flex\n                                width={1}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <DashboardCard\n                                  isRainbow={true}\n                                  cardProps={{\n                                    py: 3,\n                                    px: 2,\n                                    mt: 3,\n                                    display: 'flex',\n                                    alignItems: 'center',\n                                    flexDirection: 'column',\n                                    justifyContent: 'center',\n                                  }}\n                                >\n                                  <Flex\n                                    width={1}\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <Image\n                                      height={'1.8em'}\n                                      src={curveConfig.params.image}\n                                    />\n                                    <Text\n                                      mt={2}\n                                      px={2}\n                                      fontSize={1}\n                                      color={'dark-gray'}\n                                      textAlign={'center'}\n                                    >\n                                      Redeem your tokens from the Curve Pool.\n                                    <Link\n                                        ml={1}\n                                        mainColor={'primary'}\n                                        hoverColor={'primary'}\n                                        onClick={e => this.props.openTooltipModal('How Curve works', this.functionsUtil.getGlobalConfig(['messages', 'curveInstructions']))}\n                                      >\n                                        Read More\n                                    </Link>\n                                    </Text>\n                                    {\n                                      this.state.canRedeem &&\n                                      <Checkbox\n                                        mt={2}\n                                        required={false}\n                                        label={`Redeem from Curve`}\n                                        checked={this.state.redeemCurveEnabled}\n                                        onChange={e => this.toggleRedeemCurve(e.target.checked)}\n                                      />\n                                    }\n                                  </Flex>\n                                </DashboardCard>\n                                {\n                                  this.canRedeem &&\n                                  <Link\n                                    textAlign={'center'}\n                                    hoverColor={'primary'}\n                                    onClick={e => this.setShowRedeemFlow(true)}\n                                  >\n                                    I just want to redeem my {this.props.selectedToken}\n                                  </Link>\n                                }\n                              </Flex>\n                            )\n                          }\n                          {\n                            (this.state.contractPaused && this.state.action === 'deposit') ? (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  mt: 3\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    name={'Warning'}\n                                    color={'cellText'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    fontSize={2}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    Deposits for {this.props.selectedToken} are temporarily unavailable due to Smart-Contract maintenance. Redeems are always available.\n                                </Text>\n                                </Flex>\n                              </DashboardCard>\n                            ) : (!this.state.tokenApproved && this.state.action === 'deposit' && !this.state.showETHWrapperEnabled && !isDepositDisabled) ? (\n                              <DashboardCard\n                                isDisabled={isDepositDisabled}\n                                cardProps={{\n                                  p: 3,\n                                  mt: 3\n                                }}\n                              >\n                                {\n                                  this.state.processing['approve'] && this.state.processing['approve'].loading ? (\n                                    <Flex\n                                      flexDirection={'column'}\n                                    >\n                                      <TxProgressBar\n                                        {...this.props}\n                                        waitText={`Approve estimated in`}\n                                        endMessage={`Finalizing approve request...`}\n                                        hash={this.state.processing['approve'].txHash}\n                                        cancelTransaction={this.cancelTransaction.bind(this)}\n                                      />\n                                    </Flex>\n                                  ) : (\n                                    <Flex\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        name={'LockOpen'}\n                                        color={'cellText'}\n                                      />\n                                      <Text\n                                        mt={3}\n                                        fontSize={2}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        {\n                                          this.state.depositCurveEnabled ?\n                                            `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.`\n                                            : useMetaTx ?\n                                              `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle using Meta-Transaction you need to approve our Smart-Contract first.`\n                                              :\n                                              `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle you need to approve our Smart-Contract first.`\n                                        }\n                                      </Text>\n                                      <RoundButton\n                                        buttonProps={{\n                                          mt: 3,\n                                          width: [1, 1 / 2]\n                                        }}\n                                        handleClick={this.approveToken.bind(this)}\n                                      >\n                                        Approve\n                                      </RoundButton>\n                                    </Flex>\n                                  )\n                                }\n                              </DashboardCard>\n                            ) : (!showBuyFlow && canPerformAction) && (\n                              !this.state.processing[this.state.action].loading ? (\n                                <Flex\n                                  mt={2}\n                                  flexDirection={'column'}\n                                >\n                                  {\n                                    showActionFlow && (\n                                      <Flex\n                                        mb={3}\n                                        width={1}\n                                        flexDirection={'column'}\n                                      >\n                                        {\n                                          (totalBalance || this.props.tokenFeesPercentage) && (\n                                            <Box\n                                              mb={1}\n                                              width={1}\n                                            >\n                                              {\n                                                this.state.showMaxSlippage && showCurveSlippage && (\n                                                  <Box\n                                                    mb={2}\n                                                    width={1}\n                                                  >\n                                                    <Flex\n                                                      alignItems={'center'}\n                                                      flexDirection={'row'}\n                                                    >\n                                                      <Text>\n                                                        Choose max slippage:\n                                                    </Text>\n                                                      <Tooltip\n                                                        placement={'top'}\n                                                        message={`Max additional slippage on top of the one shown below`}\n                                                      >\n                                                        <Icon\n                                                          ml={1}\n                                                          size={'1em'}\n                                                          color={'cellTitle'}\n                                                          name={\"InfoOutline\"}\n                                                        />\n                                                      </Tooltip>\n                                                    </Flex>\n                                                    <Flex\n                                                      mt={2}\n                                                      alignItems={'center'}\n                                                      flexDirection={'row'}\n                                                      justifyContent={'space-between'}\n                                                    >\n                                                      {\n                                                        [0.2, 0.5, 1, 5].map(slippage => (\n                                                          <FastBalanceSelector\n                                                            cardProps={{\n                                                              p: 1\n                                                            }}\n                                                            textProps={{\n                                                              fontSize: 1\n                                                            }}\n                                                            percentage={slippage}\n                                                            key={`selector_${slippage}`}\n                                                            onMouseDown={() => this.setMaxSlippage(slippage)}\n                                                            isActive={this.state.maxSlippage === parseFloat(slippage)}\n                                                          />\n                                                        ))\n                                                      }\n                                                    </Flex>\n                                                  </Box>\n                                                )\n                                              }\n                                              <Flex\n                                                width={1}\n                                                alignItems={'center'}\n                                                flexDirection={'row'}\n                                                justifyContent={'space-between'}\n                                              >\n                                                {\n                                                  showCurveSlippage ? (\n                                                    <Flex\n                                                      width={1}\n                                                      maxWidth={'50%'}\n                                                      alignItems={'center'}\n                                                      flexDirection={'row'}\n                                                    >\n                                                      <Text\n                                                        fontSize={1}\n                                                        fontWeight={3}\n                                                        textAlign={'right'}\n                                                        style={{\n                                                          whiteSpace: 'nowrap'\n                                                        }}\n                                                        color={this.state.depositCurveSlippage.gt(0) ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed}\n                                                      >\n                                                        {\n                                                          parseFloat(this.state.depositCurveSlippage.times(100).toFixed(2)) === 0 ?\n                                                            'No Slippage'\n                                                            : `${this.state.depositCurveSlippage.gt(0) ? 'Slippage: ' : 'Bonus: '} ${this.state.depositCurveSlippage.times(100).abs().toFixed(2)}%`\n                                                        }\n                                                      </Text>\n                                                      <Tooltip\n                                                        placement={'top'}\n                                                        message={this.functionsUtil.getGlobalConfig(['messages', 'curveBonusSlippage'])}\n                                                      >\n                                                        <Icon\n                                                          ml={1}\n                                                          size={'1em'}\n                                                          color={'cellTitle'}\n                                                          name={\"InfoOutline\"}\n                                                        />\n                                                      </Tooltip>\n                                                      <Link\n                                                        ml={1}\n                                                        color={'copyColor'}\n                                                        hoverColor={'primary'}\n                                                        onClick={this.showMaxSlippage}\n                                                      >\n                                                        change\n                                                    </Link>\n                                                    </Flex>\n                                                  ) : this.props.tokenFeesPercentage && (\n                                                    <Flex\n                                                      alignItems={'center'}\n                                                      flexDirection={'row'}\n                                                    >\n                                                      <Text\n                                                        fontSize={1}\n                                                        fontWeight={3}\n                                                        color={'dark-gray'}\n                                                        textAlign={'right'}\n                                                        hoverColor={'copyColor'}\n                                                      >\n                                                        Performance fee: {this.props.tokenFeesPercentage.times(100).toFixed(2)}%\n                                                    </Text>\n                                                      <Tooltip\n                                                        placement={'top'}\n                                                        message={this.functionsUtil.getGlobalConfig(['messages', 'performanceFee'])}\n                                                      >\n                                                        <Icon\n                                                          ml={1}\n                                                          size={'1em'}\n                                                          color={'cellTitle'}\n                                                          name={\"InfoOutline\"}\n                                                        />\n                                                      </Tooltip>\n                                                    </Flex>\n                                                  )\n                                                }\n                                                {\n                                                  totalBalance && (\n                                                    <Link\n                                                      fontSize={1}\n                                                      fontWeight={3}\n                                                      color={'dark-gray'}\n                                                      textAlign={'right'}\n                                                      hoverColor={'copyColor'}\n                                                      onClick={(e) => this.setFastBalanceSelector(100)}\n                                                    >\n                                                      {totalBalance.toFixed(6)} {this.props.selectedToken}\n                                                    </Link>\n                                                  )\n                                                }\n                                              </Flex>\n                                            </Box>\n                                          )\n                                        }\n                                        <Input\n                                          min={0}\n                                          type={\"number\"}\n                                          required={true}\n                                          height={'3.4em'}\n                                          borderRadius={2}\n                                          fontWeight={500}\n                                          borderColor={'cardBorder'}\n                                          backgroundColor={'cardBg'}\n                                          boxShadow={'none !important'}\n                                          placeholder={`Insert amount`}\n                                          onChange={this.changeInputValue.bind(this)}\n                                          border={`1px solid ${this.props.theme.colors.divider}`}\n                                          value={this.state.inputValue[this.state.action] !== null ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]).toFixed() : ''}\n                                        />\n                                        <Flex\n                                          mt={2}\n                                          alignItems={'center'}\n                                          flexDirection={'row'}\n                                          justifyContent={'space-between'}\n                                        >\n                                          {\n                                            [25, 50, 75, 100].map(percentage => (\n                                              <FastBalanceSelector\n                                                percentage={percentage}\n                                                key={`selector_${percentage}`}\n                                                onMouseDown={() => this.setFastBalanceSelector(percentage)}\n                                                isActive={this.state.fastBalanceSelector[this.state.action] === parseInt(percentage)}\n                                              />\n                                            ))\n                                          }\n                                        </Flex>\n                                      </Flex>\n                                    )\n                                  }\n                                  {\n                                    canPerformAction && (\n                                      <Flex\n                                        justifyContent={'center'}\n                                        mt={redeemGovTokens ? 2 : 0}\n                                      >\n                                        <RoundButton\n                                          buttonProps={{\n                                            width: 'auto',\n                                            minWidth: [1, 1 / 2],\n                                            style: {\n                                              textTransform: 'capitalize'\n                                            },\n                                            disabled: this.state.buttonDisabled\n                                          }}\n                                          handleClick={this.state.buttonDisabled ? null : this.executeAction.bind(this)}\n                                        >\n                                          {this.state.action}{redeemGovTokens ? ' Gov Tokens' : '' /*(depositCurve ? ' in Curve' : '')*/}\n                                        </RoundButton>\n                                      </Flex>\n                                    )\n                                  }\n                                </Flex>\n                              ) : this.state.loadingErc20ForwarderTx ? (\n                                <Flex\n                                  mt={3}\n                                  flexDirection={'column'}\n                                >\n                                  <FlexLoader\n                                    flexProps={{\n                                      flexDirection: 'row'\n                                    }}\n                                    loaderProps={{\n                                      size: '25px',\n                                    }}\n                                    textProps={{\n                                      ml: 2\n                                    }}\n                                    text={this.state.erc20ForwarderTx ? (this.state.signedParameters ? 'Please Sign the Transaction...' : 'Please Sign the Permit...') : 'Calculating transaction fees...'}\n                                  />\n                                </Flex>\n                              ) : this.state.erc20ForwarderTx ? (\n                                <DashboardCard\n                                  cardProps={{\n                                    p: 3,\n                                    mt: 3,\n                                    display: 'flex',\n                                    alignItems: 'center',\n                                    flexDirection: 'column',\n                                    justifyContent: 'center',\n                                  }}\n                                >\n                                  <Text\n                                    mb={2}\n                                    fontSize={2}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    The required gas fee to perform the {this.state.action} is <strong>{this.state.erc20ForwarderTx.cost} {this.props.selectedToken}</strong>\n                                  </Text>\n                                  <Flex\n                                    width={1}\n                                    alignItems={'center'}\n                                    flexDirection={'row'}\n                                    justifyContent={'center'}\n                                  >\n                                    <DashboardCard\n                                      cardProps={{\n                                        mx: 2,\n                                        py: 2,\n                                        px: [2, 3],\n                                        width: 0.40,\n                                        onMouseDown: () => {\n                                          this.executeAction()\n                                        }\n                                      }}\n                                      isInteractive={true}\n                                    >\n                                      <Flex\n                                        my={1}\n                                        alignItems={'center'}\n                                        flexDirection={'row'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Flex\n                                          mr={2}\n                                          alignItems={'center'}\n                                          justifyContent={'center'}\n                                        >\n                                          <Icon\n                                            align={'center'}\n                                            color={'#00b84a'}\n                                            name={'CheckCircle'}\n                                            size={this.props.isMobile ? '1em' : '1.8em'}\n                                          />\n                                        </Flex>\n                                        <Text\n                                          fontWeight={3}\n                                          fontSize={[2, 3]}\n                                        >\n                                          Confirm\n                                      </Text>\n                                      </Flex>\n                                    </DashboardCard>\n                                    <DashboardCard\n                                      cardProps={{\n                                        mx: 2,\n                                        py: 2,\n                                        px: [2, 3],\n                                        width: 0.40,\n                                        onMouseDown: () => {\n                                          this.cancelTransaction();\n                                        }\n                                      }}\n                                      isInteractive={true}\n                                    >\n                                      <Flex\n                                        my={1}\n                                        alignItems={'center'}\n                                        flexDirection={'row'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Flex\n                                          mr={2}\n                                          alignItems={'center'}\n                                          justifyContent={'center'}\n                                        >\n                                          <Icon\n                                            name={'Cancel'}\n                                            align={'center'}\n                                            color={'#e13636'}\n                                            size={this.props.isMobile ? '1em' : '1.8em'}\n                                          />\n                                        </Flex>\n                                        <Text\n                                          fontWeight={3}\n                                          fontSize={[2, 3]}\n                                        >\n                                          Decline\n                                      </Text>\n                                      </Flex>\n                                    </DashboardCard>\n                                  </Flex>\n                                </DashboardCard>\n                              ) : (\n                                      <Flex\n                                        mt={3}\n                                        alignItems={'center'}\n                                        flexDirection={'column'}\n                                        justifyContent={'center'}\n                                      >\n                                        <TxProgressBar\n                                          {...this.props}\n                                          cancelTransaction={this.cancelTransaction.bind(this)}\n                                          hash={this.state.processing[this.state.action].txHash}\n                                          endMessage={`Finalizing ${this.state.action} request...`}\n                                          waitText={`${this.functionsUtil.capitalize(this.state.action)} estimated in`}\n                                        />\n                                      </Flex>\n                                    )\n                            )\n                          }\n                        </Box>\n                      )\n                    ) : (\n                      <Flex\n                        mt={4}\n                        flexDirection={'column'}\n                      >\n                        <FlexLoader\n                          flexProps={{\n                            flexDirection: 'row'\n                          }}\n                          loaderProps={{\n                            size: '30px'\n                          }}\n                          textProps={{\n                            ml: 2\n                          }}\n                          text={'Loading asset info...'}\n                        />\n                      </Flex>\n                    )\n                  }\n                </Migrate>\n              )\n          }\n        </Flex>\n        {\n          /*\n          showDepositCurve && this.state.depositCurveEnabled ? (\n            <CurveDeposit\n              {...this.props}\n            />\n          ) :\n          */\n          showRedeemCurve && this.state.redeemCurveEnabled && (\n            <Box\n              mt={3}\n              width={1}\n            >\n              <CurveRedeem\n                {...this.props}\n              />\n            </Box>\n          )\n        }\n        {\n          showBuyFlow ? (\n            <Flex\n              mt={3}\n              width={[1,0.5]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <BuyModal\n                {...this.props}\n                showInline={true}\n                availableMethods={[]}\n                buyToken={this.props.selectedToken}\n              />\n            </Flex>\n          ) : showPolygonBridge && (\n            <Flex\n              mt={3}\n              width={[1,0.36]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <DashboardCard\n                cardProps={{\n                  p:3\n                }}\n              >\n                <Flex\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                >\n                  <Image\n                    height={'2em'}\n                    src={polygonBridgeInfo.image}\n                  />\n                  <Text\n                    mt={1}\n                    fontSize={2}\n                    color={'cellText'}\n                    textAlign={'center'}\n                  >\n                    <strong>You don't have enough {buyToken} in your wallet!</strong><br />Use the {polygonBridgeInfo.label} to transfer your {buyToken} in Polygon.\n                  </Text>\n                  <RoundButton\n                    buttonProps={{\n                      mt:2,\n                      width:[1,1/2]\n                    }}\n                    handleClick={ e => this.props.goToSection(`tools/${polygonBridgeInfo.route}/${buyToken}`)}\n                  >\n                    Deposit {buyToken}\n                  </RoundButton>\n                </Flex>\n              </DashboardCard>\n            </Flex>\n          )\n        }\n        <ShareModal\n          confettiEnabled={true}\n          icon={`images/medal.svg`}\n          title={`Congratulations!`}\n          account={this.props.account}\n          closeModal={this.resetModal}\n          tokenName={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'share'}\n          text={`You have successfully deposited in Idle!<br />Enjoy <strong>${this.state.tokenAPY}% APY</strong> on your <strong>${this.props.selectedToken}</strong>!`}\n          tweet={`I'm earning ${this.state.tokenAPY}% APY on my ${this.props.selectedToken} with @idlefinance! Go to ${this.functionsUtil.getGlobalConfig(['baseURL'])} and start earning now from your idle tokens!`}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default DepositRedeem;\n","import theme from '../theme';\nimport { Bar } from '@nivo/bar';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Text, Input, Icon, Tooltip } from \"rimble-ui\";\n\nclass EstimatedEarnings extends Component {\n\n  state = {\n    chartData:null,\n    chartProps:null,\n    inputValue:1000,\n    maxInputValue:999999999999999\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    this.loadChart();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged){\n      this.loadChart();\n    }\n  }\n\n  async loadChart(){\n\n    const tokenApy = await this.functionsUtil.getTokenApy(this.props.tokenConfig);\n\n    if (!tokenApy){\n      return false;\n    }\n\n    const amount = this.functionsUtil.BNify(this.state.inputValue);\n    const earningsYear = amount.times(this.props.tokenApy.div(100));\n\n    const amountMonth = parseFloat(earningsYear.div(12));\n    const amount3Months = parseFloat(earningsYear.div(4));\n    const amount6Months = parseFloat(earningsYear.div(2));\n    const amountYear = parseFloat(earningsYear.div(1));\n\n    const chartData = [\n      {\n        perc:1/12,\n        label:'MONTH',\n        value:amountMonth,\n        month:amountMonth,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        monthColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:3/12,\n        label:'3 MONTHS',\n        value:amount3Months,\n        month3:amount3Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month3Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:6/12,\n        label:'6 MONTHS',\n        value:amount6Months,\n        month6:amount6Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month6Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:1,\n        label:'YEAR',\n        year:amountYear,\n        value:amountYear,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        yearColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      }\n    ];\n\n    let labelTextColorModifiers = this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'chart','labelTextColorModifiers']);\n\n    const maxGridLines = 4;\n    const gridYStep = amountYear/maxGridLines;\n    const gridYValues = [0];\n    for (let i=1;i<=maxGridLines;i++){\n      const gridYValue = i*gridYStep;\n      gridYValues.push(gridYValue);\n    }\n\n    const chartProps = {\n      padding: 0.2,\n      animate: false,\n      indexBy: 'label',\n      // enableLabel: false,\n      labelSkipWidth: 16,\n      labelSkipHeight: 16,\n      keys: ['month','month3','month6','year'],\n      colors: ({ id, data }) => data[`${id}Color`],\n      label: d => this.functionsUtil.abbreviateNumber(d.value,2,4)+' '+this.props.selectedToken,\n      labelTextColor: labelTextColorModifiers ? { from: 'color', modifiers: [ labelTextColorModifiers ] } : null,\n      isInteractive:false,\n      minValue:0,\n      gridYValues,\n      // maxValue:amountYear,\n      axisLeft:{\n        format: v => this.functionsUtil.abbreviateNumber(v,1,3),\n        tickValues:gridYValues,\n        orient: 'left',\n        tickSize: 0,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendPosition: 'middle'\n      },\n      axisBottom:{\n        legend: '',\n        tickSize:0,\n        tickPadding: 15,\n        orient: 'bottom',\n      },\n      theme:{\n        labels:{\n          text:{\n            fontSize:15,\n            fontWeight:600,\n            fill:theme.colors.counter,\n            fontFamily: theme.fonts.sansSerif\n          }\n        },\n        axis: {\n          ticks: {\n            text: {\n              fontSize:14,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '9 5'\n          }\n        },\n      },\n      margin: this.props.isMobile ? { top: 0, right: 0, bottom: 30, left: 0 } : { top: 10, right: 0, bottom: 50, left: 65 }\n    }\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  changeInputValue(e){\n    let inputValue = e.target.value.length && !isNaN(e.target.value) ? Math.min(this.state.maxInputValue,parseFloat(e.target.value)) : 0;\n    inputValue = this.functionsUtil.BNify(inputValue);\n    this.setState({\n      inputValue\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const showAPYDisclaimer = idleTokenEnabled && this.functionsUtil.getGlobalConfig(['govTokens','IDLE','showAPR']);\n\n    return (\n      <DashboardCard\n        cardProps={{\n          p:[3,4]\n        }}\n      >\n        <Flex\n          width={1}\n          flexDirection={['column','row']}\n        >\n          <Flex\n            width={[1,0.3]}\n            flexDirection={'column'}\n            justifyContent={'flex-start'}\n          >\n            <Flex\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <AssetField\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n                fieldInfo={{\n                  name:'icon',\n                  props:{\n                    mb:2,\n                    height:'2.5em'\n                  }\n                }}\n              />\n              <Text\n                fontSize={2}\n                color={'cellText'}\n                textAlign={'center'}\n              >\n                Set the amount and see your estimated earnings on time based on the current APY: { this.props.tokenApy ? `${this.props.tokenApy.toFixed(2)}%` : null}\n                {\n                  showAPYDisclaimer && \n                    <Flex\n                      style={{\n                        display:'inline-flex',\n                        verticalAlign:'middle'\n                      }}\n                    >\n                      <Tooltip\n                        placement={'top'}\n                        message={this.functionsUtil.getGlobalConfig(['messages','apyLong'])}\n                      >\n                        <Icon\n                          ml={1}\n                          name={\"Info\"}\n                          size={'1em'}\n                          color={'cellTitle'}\n                        />\n                      </Tooltip>\n                    </Flex>\n                }\n              </Text>\n            </Flex>\n            <Flex\n              mt={3}\n              flexDirection={'column'}\n            >\n              <Input\n                min={0}\n                type={\"number\"}\n                required={true}\n                borderRadius={2}\n                fontWeight={500}\n                textAlign={'center'}\n                height={['3em','3.4em']}\n                borderColor={'cardBorder'}\n                boxShadow={'none !important'}\n                max={this.state.maxInputValue}\n                backgroundColor={'cardBgHover'}\n                onChange={this.changeInputValue.bind(this)}\n                border={`1px solid ${theme.colors.divider}`}\n                placeholder={`Insert ${this.props.selectedToken.toUpperCase()} amount`}\n                value={this.state.inputValue && !isNaN(this.state.inputValue) ? this.state.inputValue : ''}\n              />\n            </Flex>\n            <Flex\n              mt={3}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                buttonProps={{\n                  width:[1,1/2],\n                }}\n                handleClick={this.loadChart.bind(this)}\n              >\n                CALCULATE\n              </RoundButton>\n            </Flex>\n          </Flex>\n          <Flex\n            mt={[3,0]}\n            width={[1,0.7]}\n            id={'estimated-earnings-chart'}\n          >\n            {\n              this.props.isMobile ? (\n                <Flex\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  {\n                    this.state.chartData !== null && this.state.chartData.map((v,index) => (\n                      <Flex\n                        py={2}\n                        my={2}\n                        width={1}\n                        flexDirection={'row'}\n                        key={`earnings_${index}`}\n                      >\n                        <Flex\n                          width={0.35}\n                          alignItems={'center'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            color={'legend'}\n                          >\n                            {v.label}\n                          </Text>\n                        </Flex>\n                        <Flex\n                          width={0.65}\n                          position={'relative'}\n                          alignItems={'center'}\n                          minHeight={['20px','35px']}\n                          justifyContent={'center'}\n                        >\n                          <Flex\n                            zIndex={1}\n                            position={'relative'}\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Text\n                              fontSize={1}\n                              fontWeight={3}\n                              color={'counter'}\n                            >\n                              {this.functionsUtil.abbreviateNumber(v.value,2,4)} {this.props.selectedToken}\n                            </Text>\n                          </Flex>\n                          <Flex\n                            right={0}\n                            width={v.perc}\n                            position={'absolute'}\n                            height={['20px','35px']}\n                            borderRadius={['20px 0 0 20px','35px 0 0 35px']}\n                            style={{background:`linear-gradient(-90deg, rgba(${v.color},0) 0%, rgba(${v.color},1) 100%)`}}\n                          ></Flex>\n                        </Flex>\n                      </Flex>\n                    ))\n                  }\n                </Flex>\n              ) : (\n                <GenericChart\n                  type={Bar}\n                  height={250}\n                  showLoader={true}\n                  {...this.state.chartProps}\n                  data={this.state.chartData}\n                  parentId={'estimated-earnings-chart'}\n                />\n              )\n            }\n          </Flex>\n        </Flex>\n      </DashboardCard>\n    );\n  }\n}\n\nexport default EstimatedEarnings;","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport { Box, Flex, Icon, Text } from \"rimble-ui\";\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport AssetsList from '../AssetsList/AssetsList';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport FundsOverview from '../FundsOverview/FundsOverview';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport DepositRedeem from '../DepositRedeem/DepositRedeem';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport ActiveCoverages from '../ActiveCoverages/ActiveCoverages';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport EstimatedEarnings from '../EstimatedEarnings/EstimatedEarnings';\n\nclass AssetPage extends Component {\n\n  state = {\n    tokenApy:{},\n    tokenFees:{},\n    tokenBalance:{},\n    tokenApproved:{},\n    activeModal:null,\n    idleTokenPrice:{},\n    userHasFunds:false,\n    govTokensBalance:{},\n    idleTokenBalance:{},\n    redeemableBalance:{},\n    govTokensDisabled:{},\n    availableGovTokens:{},\n    tokenFeesPercentage:{},\n    componentMounted:false,\n    govTokensUserBalances:{}\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadTokensInfo(){\n\n    if (!this.props.account || !this.props.contractsInitialized){\n      return this.setState({\n        userHasFunds:false\n      });\n    }\n\n    const newState = {...this.state};\n    // await this.functionsUtil.asyncForEach(Object.keys(this.props.availableTokens),async (token) => {\n    const token = this.props.selectedToken;\n    const tokenConfig = this.props.availableTokens[token];\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[token] = tokenConfig;\n\n    const [\n      tokenFeesPercentage,\n      idleTokenPrice,\n      tokenApy,\n      tokenBalance,\n      tokenFees,\n      idleTokenBalance,\n      tokenApproved,\n      govTokensUserBalances,\n      govTokensBalance\n    ] = await Promise.all([\n      this.functionsUtil.getTokenFees(tokenConfig),\n      this.functionsUtil.getIdleTokenPrice(tokenConfig),\n      this.functionsUtil.getTokenApy(this.props.tokenConfig),\n      this.functionsUtil.getTokenBalance(token,this.props.account),\n      this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n      this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n      this.functionsUtil.checkTokenApproved(token,tokenConfig.idle.address,this.props.account),\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,null,null),\n      this.functionsUtil.getGovTokensUserTotalBalance(this.props.account,govTokenAvailableTokens,'DAI',false)\n    ]);\n\n    newState.tokenFees[token] = tokenFees;\n    newState.tokenBalance[token] = tokenBalance;\n    newState.tokenApproved[token] = tokenApproved;\n    newState.idleTokenPrice[token] = idleTokenPrice;\n    newState.idleTokenBalance[token] = idleTokenBalance;\n    newState.govTokensBalance[token] = govTokensBalance;\n    newState.tokenFeesPercentage[token] = tokenFeesPercentage;\n    newState.govTokensUserBalances[token] = govTokensUserBalances;\n    newState.govTokensDisabled[token] = tokenConfig.govTokensDisabled;\n    newState.tokenApy[token] = tokenApy && !tokenApy.isNaN() ? tokenApy : null;\n    newState.redeemableBalance[token] = idleTokenBalance && idleTokenPrice ? idleTokenBalance.times(idleTokenPrice) : this.functionsUtil.BNify(0);\n    // });\n\n    newState.availableGovTokens = this.functionsUtil.getTokenGovTokens(this.props.tokenConfig);\n\n    // console.log('govTokensBalance',newState.govTokensBalance);\n    // console.log('availableGovTokens',newState.availableGovTokens);\n    // console.log('govTokensUserBalances',newState.govTokensUserBalances);\n\n    newState.componentMounted = true;\n    newState.userHasFunds = this.props.account && newState.idleTokenBalance[token] && this.functionsUtil.BNify(newState.idleTokenBalance[token]).gt(0);\n\n    // console.log('loadTokensInfo',this.props.account,this.props.contractsInitialized,newState);\n\n    this.setState(newState);\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n    window.loadTokensInfo = this.loadTokensInfo.bind(this);\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    const selectedTokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    const availableTokensChanged = JSON.stringify(prevProps.availableTokens) !== JSON.stringify(this.props.availableTokens);\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n    if (accountChanged || transactionsChanged || availableTokensChanged || selectedTokenChanged){\n      // console.log('AssetPage - availableTokensChanged',availableTokensChanged);\n      this.loadTokensInfo();\n    }\n  }\n\n  render() {\n\n    // const currentNetwork = this.functionsUtil.getRequiredNetwork();\n    const nexusMutualConfig = this.functionsUtil.getGlobalConfig(['tools','nexusMutual']);\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            <Breadcrumb\n              {...this.props}\n              isMobile={this.props.isMobile}\n              path={[this.props.selectedToken]}\n              handleClick={ e => this.props.goToSection(this.props.selectedStrategy) }\n              text={this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])}\n            />\n          </Flex>\n          <Flex\n            width={0.5}\n            justifyContent={'flex-end'}\n          >\n            <CardIconButton\n              icon={'Add'}\n              {...this.props}\n              text={'Add funds'}\n              handleClick={ e => this.setActiveModal('buy') }\n            />\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Deposit / Redeem\n        </Title>\n        {\n          /*\n          currentNetwork.id === 137 ? (\n            <Flex\n              width={1}\n              minHeight={'45vh'}\n              alignItems={'center'}\n              flexDirection={'row'}\n              justifyContent={'center'}\n            >\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  width:[1,0.5],\n                }}\n              >\n                <Flex\n                  aligItems={'center'}\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                >\n                  <Icon\n                    size={'2.3em'}\n                    color={'cellText'}\n                    name={'AccessTime'}\n                  />\n                  <Text\n                    mt={2}\n                    fontSize={2}\n                    color={'cellText'}\n                    textAlign={'center'}\n                  >\n                    Hang on, please!<br />The {this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])} strategy has not yet been activated in Polygon.\n                  </Text>\n                  <RoundButton\n                    buttonProps={{\n                      mt:3,\n                      width:[1,1/2]\n                    }}\n                    handleClick={e => this.props.goToSection(`stake`)}\n                  >\n                    Go to Staking\n                  </RoundButton>\n                </Flex>\n              </DashboardCard>\n            </Flex>\n          ) :\n          */\n          (\n            <>\n              <Flex\n                width={1}\n              >\n                <DepositRedeem\n                  {...this.props}\n                  tokenFees={this.state.tokenFees[this.props.selectedToken]}\n                  tokenBalance={this.state.tokenBalance[this.props.selectedToken]}\n                  tokenApproved={this.state.tokenApproved[this.props.selectedToken]}\n                  govTokensBalance={this.state.govTokensBalance[this.props.selectedToken]}\n                  idleTokenBalance={this.state.idleTokenBalance[this.props.selectedToken]}\n                  redeemableBalance={this.state.redeemableBalance[this.props.selectedToken]}\n                  tokenFeesPercentage={this.state.tokenFeesPercentage[this.props.selectedToken]}\n                  govTokensUserBalances={this.state.govTokensUserBalances[this.props.selectedToken]}\n                />\n              </Flex>\n              {\n                this.state.userHasFunds && nexusMutualConfig.enabled && Object.keys(nexusMutualConfig.props.availableTokens).includes(this.props.tokenConfig.idle.token) && (\n                  <Flex\n                    width={1}\n                    id={'active-coverages'}\n                    flexDirection={'column'}\n                  >\n                    <ActiveCoverages\n                      {...this.props}\n                      titleProps={{\n                        mb:3,\n                        mt:[3,4],\n                      }}\n                      title={'Coverage'}\n                      availableTokens={[this.props.tokenConfig.idle.token]}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        id={'no-active-cover'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        <DashboardCard\n                          cardProps={{\n                            py:3,\n                            px:[3,4],\n                            width:[1,'auto'],\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Icon\n                              my={[0,2]}\n                              size={'3em'}\n                              name={nexusMutualConfig.icon}\n                            />\n                            <Text\n                              mb={1}\n                              fontSize={[2,3]}\n                              fontWeight={500}\n                              textAlign={'center'}\n                            >\n                              You don't have an active coverage\n                            </Text>\n                            <Text\n                              mb={2}\n                              color={'link'}\n                              fontSize={[1,2]}\n                              fontWeight={500}\n                              textAlign={'center'}\n                            >\n                              {nexusMutualConfig.desc}\n                            </Text>\n                            <RoundButton\n                              buttonProps={{\n                                mt:1,\n                                width:'auto',\n                                minHeight:'40px',\n                                mainColor:'redeem',\n                                size:this.props.isMobile ? 'small' : 'medium'\n                              }}\n                              handleClick={ e => this.props.goToSection(`tools/${nexusMutualConfig.route}/deposit/${this.props.tokenConfig.idle.token}`) }\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <Text\n                                  color={'white'}\n                                  fontSize={[1,2]}\n                                  fontWeight={500}\n                                >\n                                  Get Covered\n                                </Text>\n                                <Icon\n                                  ml={1}\n                                  size={'1.3em'}\n                                  name={'KeyboardArrowRight'}\n                                />\n                              </Flex>\n                            </RoundButton>\n                          </Flex>\n                        </DashboardCard>\n                      </Flex>\n                    </ActiveCoverages>\n                  </Flex>\n                )\n              }\n              {\n                this.state.userHasFunds && this.props.account && (\n                  <Flex\n                    mb={[0,4]}\n                    width={1}\n                    flexDirection={'column'}\n                    id={'funds-overview-container'}\n                  >\n                    <Title my={[3,4]}>Funds Overview</Title>\n                    <FundsOverview\n                      {...this.props}\n                      tokenFees={this.state.tokenFees[this.props.selectedToken]}\n                    />\n                  </Flex>\n                )\n              }\n              {\n                this.state.userHasFunds && this.props.account && !this.state.govTokensDisabled[this.props.selectedToken] && Object.keys(this.state.availableGovTokens).length>0 && \n                  <Flex\n                    width={1}\n                    id={\"yield-farming\"}\n                    flexDirection={'column'}\n                  >\n                    <Title my={[3,4]}>Yield Farming</Title>\n                    <AssetsList\n                      enabledTokens={Object.keys(this.state.availableGovTokens)}\n                      cols={[\n                        {\n                          title:'TOKEN',\n                          props:{\n                            width:[0.30,0.15]\n                          },\n                          fields:[\n                            {\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:['1.4em','2.3em']\n                              }\n                            },\n                            {\n                              name:'tokenName'\n                            }\n                          ]\n                        },\n                        {\n                          mobile:false,\n                          title:'BALANCE',\n                          props:{\n                            width:[0.33, 0.25],\n                          },\n                          fields:[\n                            {\n                              name:'tokenBalance',\n                              props:{\n                                decimals: this.props.isMobile ? 6 : 8\n                              }\n                            }\n                          ]\n                        },\n                        {\n                          title:'REDEEMABLE',\n                          desc:this.functionsUtil.getGlobalConfig(['messages','govTokenRedeemableBalance']),\n                          props:{\n                            width:[0.35,0.30],\n                            justifyContent:['center','flex-start']\n                          },\n                          fields:[\n                            {\n                              name:'redeemableBalance',\n                              props:{\n                                decimals: this.props.isMobile ? 6 : 8\n                              }\n                            },\n                          ]\n                        },\n                        {\n                          title:'DISTRIBUTION',\n                          desc:this.functionsUtil.getGlobalConfig(['messages','userDistributionSpeed']),\n                          props:{\n                            width:[0.35,0.30],\n                          },\n                          fields:[\n                            {\n                              name:'userDistributionSpeed',\n                              props:{\n                                decimals:6\n                              }\n                            }\n                          ]\n                        },\n                        /*\n                        {\n                          title:'APR',\n                          desc:this.functionsUtil.getGlobalConfig(['messages','govTokenApr']),\n                          props:{\n                            width:[0.2,0.17],\n                          },\n                          fields:[\n                            {\n                              name:'apr',\n                            }\n                          ]\n                        },\n                        {\n                          title:'TOKEN PRICE',\n                          desc:this.functionsUtil.getGlobalConfig(['messages','tokenPrice']),\n                          mobile:false,\n                          props:{\n                            width: 0.17,\n                          },\n                          parentProps:{\n                            width:1,\n                            pr:[2,4]\n                          },\n                          fields:[\n                            {\n                              name:'tokenPrice',\n                              props:{\n                                unit:'$',\n                                unitPos:'left',\n                                unitProps:{\n                                  mr:1,\n                                  fontWeight:3,\n                                  fontSize:[0,2],\n                                  color:'cellText'\n                                }\n                              }\n                            }\n                          ]\n                        },\n                        */\n                      ]}\n                      {...this.props}\n                      availableTokens={this.state.availableGovTokens}\n                    />\n                  </Flex>\n              }\n              {\n              this.props.account && this.state.tokenApy[this.props.selectedToken] && \n                <Flex\n                  mb={[3,4]}\n                  width={1}\n                  flexDirection={'column'}\n                  id={'estimated-earnings-container'}\n                >\n                  <Title my={[3,4]}>Estimated earnings</Title>\n                  <EstimatedEarnings\n                    {...this.props}\n                    tokenApy={this.state.tokenApy[this.props.selectedToken]}\n                  />\n                </Flex>\n              }\n              {\n              this.props.account && \n                <Flex\n                  mb={[3,4]}\n                  width={1}\n                  flexDirection={'column'}\n                  id={'transactions-container'}\n                >\n                  <Title my={[3,4]}>Transactions</Title>\n                  <TransactionsList\n                    {...this.props}\n                    enabledTokens={[this.props.selectedToken]}\n                    cols={[\n                      {\n                        title: this.props.isMobile ? '' : 'HASH',\n                        props:{\n                          width:[0.15,0.24]\n                        },\n                        fields:[\n                          {\n                            name:'icon',\n                            props:{\n                              mr:[0,2]\n                            }\n                          },\n                          {\n                            name:'hash',\n                            mobile:false\n                          }\n                        ]\n                      },\n                      {\n                        title:'ACTION',\n                        mobile:false,\n                        props:{\n                          width:0.15,\n                        },\n                        fields:[\n                          {\n                            name:'action'\n                          }\n                        ]\n                      },\n                      {\n                        title:'DATE',\n                        props:{\n                          width:[0.32,0.23],\n                        },\n                        fields:[\n                          {\n                            name:'date'\n                          }\n                        ]\n                      },\n                      {\n                        title:'STATUS',\n                        props:{\n                          width:[0.18,0.22],\n                          justifyContent:['center','flex-start']\n                        },\n                        fields:[\n                          {\n                            name:'statusIcon',\n                            props:{\n                              mr:[0,2]\n                            }\n                          },\n                          {\n                            mobile:false,\n                            name:'status'\n                          }\n                        ]\n                      },\n                      {\n                        title:'AMOUNT',\n                        props:{\n                          width:0.19,\n                        },\n                        fields:[\n                          {\n                            name:'amount'\n                          },\n                        ]\n                      },\n                      {\n                        title:'ASSET',\n                        props:{\n                          width:[0.15,0.20],\n                          justifyContent:['center','flex-start']\n                        },\n                        fields:[\n                          {\n                            name:'tokenIcon',\n                            props:{\n                              mr:[0,2],\n                              height:['1.4em','1.6em']\n                            }\n                          },\n                          {\n                            mobile:false,\n                            name:'tokenName'\n                          },\n                        ]\n                      },\n                    ]}\n                  />\n                </Flex>\n              }\n            </>\n          )\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport { Text, Modal, Flex, Link } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass BetaModal extends React.Component {\n\n  state = {};\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    this.functionsUtil.setLocalStorage('betaApproved',true);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','650px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            pt={3}\n            iconHeight={'40px'}\n            title={'Beta Version'}\n            icon={'images/warning.svg'}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                fontSize={2}\n                textAlign={'left'}\n                color={'dark-gray'}\n              >\n                You're about to enter Idle Finance Beta Dashboard – this is the place where several un-audited and risky features are being tested!<br />Please use at your own risk, or visit the official website at <Link fontSize={2} mainColor={'primary'} hoverColor={'primary'} href={this.functionsUtil.getGlobalConfig(['baseURL'])}>{this.functionsUtil.getGlobalConfig(['baseURL'])}</Link>.\n              </Text>\n            </Flex>\n            <Flex\n              my={3}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                handleClick={this.closeModal}\n                buttonProps={{\n                  width:['100%','40%']\n                }}\n              >\n                Continue Anyway\n              </RoundButton>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default BetaModal;","import React, { Component } from 'react';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Box, Text, Icon, Tooltip, Link, Input } from \"rimble-ui\";\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\n\nclass CurveDeposit extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    depositSlippage:null,\n    redeemableBalance:null,\n    migrationContract:null,\n    curveTokensBalance:null,\n    migrationSucceeded:false,\n    fastBalanceSelector:null,\n    migrationContractApproved:false,\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    await this.initToken();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const idleTokenBalanceChanged = prevProps.idleTokenBalance !== this.props.idleTokenBalance;\n    if (accountChanged || idleTokenBalanceChanged){\n      await this.initToken();\n    }\n    \n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const inputValueChanged = this.state.inputValue !== prevState.inputValue;\n    if (inputValueChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  setInputValue = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    const inputValue = this.props.idleTokenBalance ? this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage) : null;\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    const buttonDisabled = !amount || amount.gt(this.state.idleTokenBalance);\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  approve = async () => {\n    const migrationContract = this.state.migrationContract;\n    if (migrationContract){\n\n      // Check if the migration contract is approved\n      const migrationContractApproved = await this.checkMigrationContractApproved();\n\n      if (!migrationContractApproved){\n\n        const callbackApprove = (tx,error) => {\n          // Send Google Analytics event\n          const eventData = {\n            eventAction: 'approve',\n            eventCategory: 'CurveDeposit',\n            eventLabel: tx ? tx.status : null\n          };\n\n          const txSucceeded = tx && tx.status === 'success';\n\n          // console.log('callbackApprove',tx,error);\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            migrationContractApproved: txSucceeded, // True\n            processing: {\n              ...prevState.processing,\n              txHash:null,\n              loading:false\n            }\n          }));\n\n          if (typeof this.props.callbackApprove === 'function' && txSucceeded){\n            this.props.callbackApprove(tx);\n          }\n\n          this.checkMigration();\n        };\n\n        const callbackReceiptApprove = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              txHash\n            }\n          }));\n        };\n\n        this.functionsUtil.enableERC20(this.props.selectedToken,migrationContract.address,callbackApprove,callbackReceiptApprove);\n\n        this.setState((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            txHash:null,\n            loading:true\n          },\n          migrationContractApproved:false\n        }));\n      } else {\n        this.setState({\n          migrationContractApproved:true\n        });\n      }\n    }\n  }\n\n  deposit = async () => {\n\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    if (!inputValue){\n      return false;\n    }\n\n    const callbackDeposit = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveDeposit`,\n        eventAction: this.props.selectedToken,\n        eventValue: inputValue.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackDeposit === 'function' && txSucceeded){\n        this.props.callbackDeposit(tx);\n      }\n    };\n\n    const callbackReceiptDeposit = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.migrationContract.name;\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n    const depositParams = await this.getMigrationParams(_amount);\n\n    this.props.contractMethodSendWrapper(contractName, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  cancelTransaction = async () => {\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  async getMigrationParams(toMigrate){\n    const migrationParams = [];\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.selectedToken]);\n\n    if (!curveTokenConfig){\n      return false;\n    }\n    \n    const migrationContractParams = curveTokenConfig.migrationParams;\n    if (migrationContractParams.n_coins){\n      const amounts = await this.functionsUtil.getCurveAmounts(this.props.selectedToken,toMigrate,true);\n      let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n\n      if (this.state.maxSlippage){\n        minMintAmount = this.functionsUtil.BNify(minMintAmount);\n        minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n        minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n      }\n\n      migrationParams.push(amounts);\n      migrationParams.push(minMintAmount);\n    }\n\n    return migrationParams;\n  }\n\n  async calculateSlippage(){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (inputValue){\n      let underlyingBalanceToDeposit = inputValue;\n      if (underlyingBalanceToDeposit){\n        const idleTokenPrice = await this.functionsUtil.getIdleTokenPrice(this.props.tokenConfig);\n        if (idleTokenPrice){\n          underlyingBalanceToDeposit = underlyingBalanceToDeposit.times(idleTokenPrice);\n        }\n      } else {\n        underlyingBalanceToDeposit = this.functionsUtil.BNify(0);\n      }\n\n      const normalizeIdleTokenBalance = this.functionsUtil.normalizeTokenAmount(underlyingBalanceToDeposit,this.props.tokenConfig.decimals);\n      let depositSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizeIdleTokenBalance);\n      if (depositSlippage){\n        depositSlippage = depositSlippage.times(100);\n      }\n\n      this.setState({\n        depositSlippage\n      });\n    }\n  }\n\n  async checkMigrationContractApproved(){\n    const migrationContract = this.state.migrationContract || await this.functionsUtil.getCurveSwapContract();\n    if (migrationContract){\n      return await this.functionsUtil.checkTokenApproved(this.props.tokenConfig.idle.token,migrationContract.address,this.props.account);\n    }\n    return false;\n  }\n\n  async initToken(){\n\n    // Init and check migration contract\n    const migrationContract = await this.functionsUtil.getCurveSwapContract();\n    const migrationContractApproved = await this.checkMigrationContractApproved();\n\n    this.setState({\n      migrationContract,\n      migrationContractApproved\n    });\n  }\n\n  approveCallback = () => {\n    this.initToken();\n  }\n\n  migrationCallback = () => {\n    this.setState({\n      migrationSucceeded:true\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken){\n      return null;\n    }\n\n    // const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const hasCurveTokens = this.state.curveTokensBalance && this.state.curveTokensBalance.gt(0);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n            {\n              this.props.idleTokenBalance && this.props.idleTokenBalance.gt(0) && (\n                <Box\n                  width={1}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:3,\n                      px:[2,4]\n                    }}\n                  >\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    > \n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ this.state.migrationContractApproved ? 'CheckBox' : 'LooksOne'}\n                          color={ this.state.migrationContractApproved ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Approve the Curve contract\n                        </Text>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ hasCurveTokens ? 'CheckBox' : 'LooksTwo'}\n                          color={ hasCurveTokens ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Deposit your {this.props.tokenConfig.idle.token}\n                        </Text>\n                      </Flex>\n                    </Flex>\n                  </DashboardCard>\n                  {\n                    !this.state.migrationContractApproved ?\n                      this.state.processing.loading ? (\n                        <Flex\n                          mt={3}\n                          flexDirection={'column'}\n                        >\n                          <TxProgressBar\n                            web3={this.props.web3}\n                            waitText={`Approve estimated in`}\n                            hash={this.state.processing.txHash}\n                            endMessage={`Finalizing approve request...`}\n                            cancelTransaction={this.cancelTransaction.bind(this)}\n                          />\n                        </Flex>\n                      ) : (\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            mt:3,\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                          >\n                            <Icon\n                              size={'2.3em'}\n                              name={'LockOpen'}\n                              color={'cellText'}\n                            />\n                            <Text\n                              mt={1}\n                              fontSize={2}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              To deposit your {this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.\n                            </Text>\n                            <RoundButton\n                              buttonProps={{\n                                mt:3,\n                                width:[1,1/2]\n                              }}\n                              handleClick={this.approve.bind(this)}\n                            >\n                              Approve\n                            </RoundButton>\n                          </Flex>\n                        </DashboardCard>\n                      )\n                    : this.state.processing.loading ? (\n                      <Flex\n                        mt={3}\n                        flexDirection={'column'}\n                      >\n                        <TxProgressBar\n                          web3={this.props.web3}\n                          waitText={`Deposit estimated in`}\n                          hash={this.state.processing.txHash}\n                          endMessage={`Finalizing deposit request...`}\n                          cancelTransaction={this.cancelTransaction.bind(this)}\n                        />\n                      </Flex>\n                    ) : (\n                      <Box\n                        mt={2}\n                        width={1}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text>\n                            Choose max slippage:\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={`Max additional slippage on top of the one shown below`}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                          justifyContent={'space-between'}\n                        >\n                          {\n                            [0.2,0.5,1,5].map( slippage => (\n                              <FastBalanceSelector\n                                cardProps={{\n                                  p:1\n                                }}\n                                textProps={{\n                                  fontSize:1\n                                }}\n                                percentage={slippage}\n                                key={`selector_${slippage}`}\n                                onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                isActive={this.state.maxSlippage === parseFloat(slippage)}\n                              />\n                            ))\n                          }\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                        >\n                          <Flex\n                            mb={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={this.state.depositSlippage ? 'space-between' : 'flex-end'}\n                          >\n                            {\n                              this.state.depositSlippage && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    textAlign={'right'}\n                                    style={{\n                                      whiteSpace:'nowrap'\n                                    }}\n                                    color={ parseFloat(this.state.depositSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                  >\n                                    {\n                                      parseFloat(this.state.depositSlippage.toFixed(3)) === 0 ?\n                                        'No Slippage'\n                                      : `${ this.state.depositSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositSlippage.abs().toFixed(3)}%`\n                                    }\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.state.depositSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              )\n                            }\n                            {\n                              this.props.idleTokenBalance && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'flex-end'}\n                                >\n                                  <Link\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'right'}\n                                    hoverColor={'copyColor'}\n                                    onClick={ (e) => this.setFastBalanceSelector(100) }\n                                    style={{\n                                      maxWidth:'100%',\n                                      overflow:'hidden',\n                                      whiteSpace:'nowrap',\n                                      textOverflow:'ellipsis'\n                                    }}\n                                  >\n                                    {this.props.idleTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {this.props.selectedToken}\n                                  </Link>\n                                </Flex>\n                              )\n                            }\n                          </Flex>\n                          <Input\n                            min={0}\n                            type={\"number\"}\n                            required={true}\n                            height={'3.4em'}\n                            borderRadius={2}\n                            fontWeight={500}\n                            boxShadow={'none !important'}\n                            placeholder={`Insert amount`}\n                            onChange={this.changeInputValue.bind(this)}\n                            border={`1px solid ${this.props.theme.colors.divider}`}\n                            value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                          />\n                          <Flex\n                            mt={2}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'space-between'}\n                          >\n                            {\n                              [25,50,75,100].map( percentage => (\n                                <FastBalanceSelector\n                                  percentage={percentage}\n                                  key={`selector_${percentage}`}\n                                  onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                  isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                                />\n                              ))\n                            }\n                          </Flex>\n                          <Flex\n                            mt={2}\n                            justifyContent={'center'}\n                          >\n                            <RoundButton\n                              buttonProps={{\n                                mt:2,\n                                width:[1,1/2],\n                                disabled:this.state.buttonDisabled\n                              }}\n                              handleClick={this.deposit.bind(this)}\n                            >\n                              Deposit\n                            </RoundButton>\n                          </Flex>\n                        </Flex>\n                      </Box>\n                    )\n                  }\n                </Box>\n              )\n            }\n          {\n            /*\n            this.state.tokenConfig && this.state.redeemableBalance ? (\n              <Box width={1}>\n                <Migrate\n                  {...this.props}\n                  showActions={false}\n                  getTokenPrice={false}\n                  migrationTextProps={{\n                    fontWeight:500\n                  }}\n                  isMigrationTool={true}\n                  migrationImage={{\n                    mb:1,\n                    height:'1.8em',\n                    src:curveConfig.params.image\n                  }}\n                  showBalanceSelector={true}\n                  waitText={'Deposit estimated in'}\n                  tokenConfig={this.state.tokenConfig}\n                  callbackApprove={this.approveCallback.bind(this)}\n                  migrationParams={this.getMigrationParams.bind(this)}\n                  migrationCallback={this.migrationCallback.bind(this)}\n                  approveText={`To deposit your ${this.props.tokenConfig.idle.token} you need to approve Curve smart-contract first.`}\n                  migrationText={`You can deposit ${this.state.redeemableBalance.toFixed(4)} ${this.props.tokenConfig.idle.token} in the Curve Pool${ this.state.depositSlippage ? (this.state.depositSlippage.gte(0) ? ` with <span style=\"color:${this.props.theme.colors.transactions.status.failed}\">${this.state.depositSlippage.times(100).toFixed(2)}% of slippage</span>` : ` with <span style=\"color:${this.props.theme.colors.transactions.status.completed}\">${Math.abs(parseFloat(this.state.depositSlippage.times(100).toFixed(2)))}% of bonus</span>`) : '' }.`}\n                >\n                  {\n                    !this.props.account ? (\n                      <DashboardCard\n                        cardProps={{\n                          p:3,\n                          mt:3\n                        }}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                        >\n                          <Icon\n                            size={'2.3em'}\n                            name={'Input'}\n                            color={'cellText'}\n                          />\n                          <Text\n                            mt={2}\n                            fontSize={2}\n                            color={'cellText'}\n                            textAlign={'center'}\n                          >\n                            Please connect with your wallet interact with Idle.\n                          </Text>\n                          <RoundButton\n                            buttonProps={{\n                              mt:2,\n                              width:[1,1/2]\n                            }}\n                            handleClick={this.props.connectAndValidateAccount}\n                          >\n                            Connect\n                          </RoundButton>\n                        </Flex>\n                      </DashboardCard>\n                    ) : (\n                      <DashboardCard\n                        cardProps={{\n                          p:3\n                        }}\n                      >\n                        {\n                          this.state.migrationSucceeded ? (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'DoneAll'}\n                                color={this.props.theme.colors.transactions.status.completed}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You have successfully deposited your {this.props.tokenConfig.idle.token} in the Curve Pool!\n                              </Text>\n                            </Flex>\n                          ) : (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'MoneyOff'}\n                                color={'cellText'}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You don't have any {this.props.tokenConfig.idle.token} in your wallet.\n                              </Text>\n                            </Flex>\n                          )\n                        }\n                      </DashboardCard>\n                    )\n                  }\n                </Migrate>\n              </Box>\n            ) : null\n            */\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveDeposit;","import theme from '../theme';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\n// import { linearGradientDef } from '@nivo/core'\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport ChartCustomTooltip from '../ChartCustomTooltip/ChartCustomTooltip';\nimport ChartCustomTooltipRow from '../ChartCustomTooltipRow/ChartCustomTooltipRow';\n\nclass PortfolioEquityCurve extends Component {\n  state = {\n    startDate:null,\n    chartData:null,\n    chartProps:null,\n    chartwidth:null,\n    chartHeight:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentDidMount(){\n    this.loadUtils();\n    this.loadChartData();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n\n    const quickDateSelectionChanged = prevProps.quickDateSelection !== this.props.quickDateSelection;\n    const tokenChanged = JSON.stringify(prevProps.enabledTokens) !== JSON.stringify(this.props.enabledTokens);\n    if (tokenChanged || quickDateSelectionChanged){\n      this.setState({\n        chartData:null\n      },() => {\n        this.componentDidMount();\n      });\n    }\n\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n    if (mobileChanged){\n      this.loadChartData();\n    }\n  }\n\n  async loadChartData() {\n\n    let enabledTokens = this.props.enabledTokens;\n    if (!enabledTokens || !enabledTokens.length){\n      enabledTokens = Object.keys(this.props.availableTokens);\n    }\n\n    const curveTxs = await this.functionsUtil.getCurveTxs(this.props.account,0,'latest',enabledTokens);\n\n    const chartData = [];\n    let tokensBalance = [];\n    const processedTxs = {};\n    let firstTxTimestamp = null;\n    let totalBalance = this.functionsUtil.BNify(0);\n    const curvePoolContract = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    if (curveTxs && curveTxs.length){\n\n      curveTxs.forEach((tx,index) => {\n\n        if (!processedTxs[tx.hash]){\n          processedTxs[tx.hash] = [];\n        }\n\n        if (processedTxs[tx.hash].includes(tx.action)){\n          return;\n        }\n        \n        firstTxTimestamp = firstTxTimestamp ? Math.min(firstTxTimestamp,parseInt(tx.timeStamp)) : parseInt(tx.timeStamp);\n\n        const curveTokens = this.functionsUtil.BNify(tx.curveTokens);\n\n        switch (tx.action){\n          case 'CurveIn':\n          case 'CurveZapIn':\n          case 'CurveDepositIn':\n          case 'CurveTransferIn':\n            totalBalance = totalBalance.plus(curveTokens);\n          break;\n          case 'CurveOut':\n          case 'CurveZapOut':\n          case 'CurveDepositOut':\n          case 'CurveTransferOut':\n            totalBalance = totalBalance.minus(curveTokens);\n          break;\n          default:\n          break;\n        }\n\n        // Reset totalBalance if below zero\n        if (totalBalance.lt(0)){\n          totalBalance = this.functionsUtil.BNify(0);\n        }\n\n        const action = tx.action;\n        const balance = totalBalance;\n        const timeStamp = parseInt(tx.timeStamp);\n        const curveTokenPrice = this.functionsUtil.fixTokenDecimals(tx.curveTokenPrice,curvePoolContract.decimals);\n\n        // console.log(this.functionsUtil.strToMoment(timeStamp*1000).format('YYYY/MM/DD HH:mm'),tx.hash,tx.action,curveTokens.toString(),totalBalance.toString());\n\n        if (!curveTokenPrice.isNaN() && !curveTokenPrice.isNaN()){\n          tokensBalance.push({\n            action,\n            balance,\n            timeStamp,\n            curveTokens,\n            curveTokenPrice\n          });\n\n          processedTxs[tx.hash].push(action);\n        }\n      });\n    }\n\n    // Calculate Start Date\n    let startDate = null;\n    const currentDate = this.functionsUtil.strToMoment(new Date());\n\n    switch (this.props.quickDateSelection){\n      case 'week':\n        startDate = currentDate.clone().subtract(1,'week');\n      break;\n      case 'month':\n        startDate = currentDate.clone().subtract(1,'month');\n      break;\n      case 'month3':\n        startDate = currentDate.clone().subtract(3,'month');\n      break;\n      case 'month6':\n        startDate = currentDate.clone().subtract(6,'month');\n      break;\n      default:\n        startDate = null;\n      break;\n    }\n\n    const days = {};\n    let prevBalances = {};\n    let prevTimestamp = null;\n    let minChartValue = null;\n    let maxChartValue = null;\n    const aggregatedBalancesKeys = {};\n    const tokensBalancesPerDate = {};\n    let aggregatedBalance = this.functionsUtil.BNify(0);\n    // let curveTokenBalance = this.functionsUtil.BNify(0);\n    const currTimestamp = parseInt(new Date().getTime()/1000)+86400;\n\n    const tokensData = await this.functionsUtil.getTokenApiData(Object.values(this.props.availableTokens)[0].address,false,firstTxTimestamp,null,false,3600);\n\n    for (let timeStamp=firstTxTimestamp;timeStamp<=currTimestamp;timeStamp+=this.props.frequencySeconds){\n\n      let foundBalances = {};\n      let tokensBalances = {};\n      timeStamp = Math.min(currTimestamp,timeStamp);\n      let momentDate = this.functionsUtil.strToMoment(timeStamp*1000);\n\n      // eslint-disable-next-line\n      const filteredTokenData = tokensData.filter(tx => (tx.timestamp>=prevTimestamp && tx.timestamp<=timeStamp));\n\n      // eslint-disable-next-line\n      let filteredBalances = tokensBalance.filter(tx => (tx.timeStamp<=timeStamp && (!prevTimestamp || tx.timeStamp>prevTimestamp)));\n      \n      if (!filteredBalances.length){\n        if (prevBalances){\n          filteredBalances = prevBalances;\n          const lastFilteredTx = Object.values(filteredBalances).pop();\n          const currentBalance = parseFloat(lastFilteredTx.balance);\n\n          const lastTokenData = Object.values(filteredTokenData).pop();\n          let curveTokenPrice = null;\n          if (lastTokenData){\n            curveTokenPrice = await this.functionsUtil.getCurveTokenPrice(lastTokenData.blocknumber);\n          }\n\n          // Take idleToken price from API and calculate new balance\n          if (currentBalance>0 && timeStamp>firstTxTimestamp && curveTokenPrice){\n            // Set new curveTokenPrice\n            lastFilteredTx.curveTokenPrice = curveTokenPrice;\n            filteredBalances = [lastFilteredTx];\n          }\n        } else {\n          filteredBalances = [{\n            balance:this.functionsUtil.BNify(0),\n            curveTokenPrice:this.functionsUtil.BNify(0)\n          }];\n        }\n      }\n\n      const lastTx = Object.assign([],filteredBalances).pop();\n      let lastTxBalance = this.functionsUtil.BNify(lastTx.balance).times(lastTx.curveTokenPrice);\n\n      tokensBalances[curvePoolContract.token] = this.functionsUtil.BNify(lastTx.balance);\n      aggregatedBalance = lastTxBalance;\n\n      foundBalances = filteredBalances;\n\n      // console.log(momentDate.format('YYYY/MM/DD 00:00'),lastTx.balance.toString(),lastTx.curveTokenPrice.toString(),lastTxBalance.toString());\n\n      if (startDate === null || momentDate.isSameOrAfter(startDate)){\n        \n        if (momentDate.isAfter(new Date(),'day')){\n          momentDate = this.functionsUtil.strToMoment(new Date());\n        }\n\n        // Force date to midnight\n        const formattedDate = momentDate.format('YYYY/MM/DD 00:00');\n\n        // Save days for axisBottom format\n        days[momentDate.format('YYYY/MM/DD')] = 1;\n\n        const aggregatedBalanceParsed = parseFloat(parseFloat(aggregatedBalance.toFixed(6)));\n\n        aggregatedBalancesKeys[formattedDate] = aggregatedBalanceParsed;\n        tokensBalancesPerDate[formattedDate] = tokensBalances;\n\n        // console.log(formattedDate,tokensBalances);\n\n        minChartValue = minChartValue === null ? aggregatedBalanceParsed : Math.min(minChartValue,aggregatedBalanceParsed);\n        maxChartValue = maxChartValue === null ? aggregatedBalanceParsed : Math.max(maxChartValue,aggregatedBalanceParsed);\n      }\n\n      prevTimestamp = timeStamp;\n      prevBalances = foundBalances;\n    }\n\n    const aggregatedBalances = Object.keys(aggregatedBalancesKeys).map(date => ({\n      x:date,\n      y:aggregatedBalancesKeys[date],\n      balances:tokensBalancesPerDate[date]\n    }));\n\n    let itemIndex = 0;\n    aggregatedBalances.forEach( (item,index) => {\n      const itemPos = Math.floor(itemIndex/aggregatedBalances.length*100);\n      aggregatedBalances[index].itemPos = itemPos;\n      itemIndex++;\n    });\n\n    /*\n    aggregatedBalances.push({\n      x:momentDate.format('YYYY/MM/DD HH:mm'),\n      y:aggregatedBalance\n    });\n    */\n\n    // Add day before to start with zero balance\n    /*\n    const firstTxMomentDate = this.functionsUtil.strToMoment(firstTxTimestamp*1000);\n    if ((startDate === null || startDate.isSameOrBefore(firstTxMomentDate)) && aggregatedBalances.length){\n      const firstItem = aggregatedBalances[0];\n      const firstDate = this.functionsUtil.strToMoment(firstItem.x,'YYYY/MM/DD HH:mm');\n      firstDate.subtract(1,'day');\n      aggregatedBalances.unshift({\n        x:firstDate.format('YYYY/MM/DD HH:mm'),\n        y:0\n      });\n    }\n    */\n\n    // Add token Data\n    chartData.push({\n      id:'USD',\n      color: 'hsl('+ this.functionsUtil.getGlobalConfig(['stats','tokens','USD','color','hsl']).join(',')+')',\n      data:aggregatedBalances\n    });\n\n    let yFormatDecimals = 2;\n    if (maxChartValue-minChartValue<1){\n      yFormatDecimals = 4;\n    }\n\n    if (maxChartValue === minChartValue){\n      minChartValue = Math.max(0,maxChartValue-1);\n    }\n\n    const maxGridLines = 5;\n    const gridYStep = (maxChartValue-minChartValue)/maxGridLines;\n    const gridYValues = [];\n    for (let i=0;i<=maxGridLines;i++){\n      const gridYValue = parseFloat(parseFloat(minChartValue+(i*gridYStep)).toFixed(6));\n      gridYValues.push(gridYValue);\n    }\n    \n    const axisBottomMaxValues = 10;\n    const daysCount = Object.values(days).length;    \n    const daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n    const chartProps = {\n      xScale:{\n        type: 'time',\n        format: '%Y/%m/%d %H:%M',\n      },\n      yScale:{\n        type: 'linear',\n        stacked: false,\n        min: minChartValue,\n        max: maxChartValue\n      },\n      xFormat:'time:%b %d %Y',\n      yFormat:value => this.functionsUtil.formatMoney(value,yFormatDecimals),\n      axisBottom: this.props.isMobile ? null : {\n        legend: '',\n        tickSize:0,\n        format: '%b %d',\n        tickPadding: 15,\n        orient: 'bottom',\n        legendOffset: 36,\n        legendPosition: 'middle',\n        tickValues:'every '+daysFrequency+' days'\n      },\n      gridYValues,\n      pointSize:0,\n      useMesh:true,\n      axisLeft: this.props.isMobile ? null : {\n        legend: '',\n        tickSize: 0,\n        orient: 'left',\n        tickPadding: 10,\n        tickRotation: 0,\n        legendOffset: -70,\n        tickValues:gridYValues,\n        legendPosition: 'middle',\n        format: v => this.functionsUtil.abbreviateNumber(v,2),\n      },\n      animate:true,\n      pointLabel:'y',\n      areaOpacity:0.1,\n      enableArea:true,\n      enableSlices:'x',\n      enableGridY:true,\n      curve:'monotoneX',\n      enableGridX:false,\n      pointBorderWidth:1,\n      colors:d => d.color,\n      pointLabelYOffset:-12,\n      areaBaselineValue:minChartValue,\n      pointColor:{ from: 'color', modifiers: []},\n      theme:{\n        axis: {\n          ticks: {\n            text: {\n              fontSize:12,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '8 4'\n          }\n        },\n      },\n      /*\n      defs:[\n        linearGradientDef('gradientA', [\n          { offset: 0, color: 'inherit' },\n          { offset: 100, color: 'inherit', opacity: 0 },\n        ]),\n      ],\n      fill:[{ match: '*', id: 'gradientA' }],\n      */\n      margin: this.props.isMobile ? { top: 20, right: 25, bottom: 25, left: 20 } : { top: 30, right: 50, bottom: 45, left: 50 },\n      sliceTooltip:(slideData) => {\n        const { slice } = slideData;\n        const point = slice.points[0];\n        return (\n          <ChartCustomTooltip\n            point={point}\n          >\n            <ChartCustomTooltipRow\n              color={point.color}\n              label={point.serieId}\n              value={`$ ${point.data.yFormatted}`}\n            />\n            {\n            typeof point.data.balances === 'object' && Object.keys(point.data.balances).length>0 &&\n              Object.keys(point.data.balances).map(token => {\n                if (token === point.serieId){\n                  return null;\n                }\n                const tokenInfo = this.functionsUtil.getGlobalConfig(['stats','tokens',token]);\n                if (tokenInfo){\n                  const tokenName = tokenInfo.name ? tokenInfo.name : token;\n                  const color = tokenInfo.color.hex;\n                  const balance = point.data.balances[token];\n                  let formattedBalance = this.functionsUtil.formatMoney(balance,2);\n                  if (parseFloat(balance)>=0.01){\n                    return (\n                      <ChartCustomTooltipRow\n                        label={tokenName}\n                        color={color}\n                        key={`row_${token}`}\n                        value={`${formattedBalance}`}\n                      />\n                    );\n                  }\n                }\n                return null;\n              })\n            }\n          </ChartCustomTooltip>\n        );\n      }\n    };\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  render() {\n    return (\n      <GenericChart\n        type={Line}\n        showLoader={true}\n        {...this.state.chartProps}\n        data={this.state.chartData}\n        parentId={this.props.parentId}\n        height={this.props.chartHeight}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default PortfolioEquityCurve;","import theme from '../theme';\nimport Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport { Flex, Heading, Text } from \"rimble-ui\";\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport PortfolioEquityCurve from '../PortfolioEquityCurve/PortfolioEquityCurve';\n\nclass FundsOverviewCurve extends Component {\n\n  state = {\n    compAPR:null,\n    aggregatedValues:[],\n    govTokensUserBalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    await this.functionsUtil.getCurveAvgBuyPrice();\n\n    // debugger;\n\n    await this.functionsUtil.getCurveAvgSlippage();\n\n    // debugger;\n    /*\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const [govTokensUserBalance,avgAPY,days] = await Promise.all([\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,'DAI'),\n      this.functionsUtil.loadAssetField('avgAPY',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '-') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    let [tokenAllocation,compAPR] = await Promise.all([\n      this.functionsUtil.getTokenAllocation(this.props.tokenConfig,false,false),\n      this.functionsUtil.getCompAPR(this.props.selectedToken,this.props.tokenConfig)\n    ]);\n\n    if (tokenAllocation){\n      const compoundInfo = this.props.tokenConfig.protocols.find( p => (p.name === 'compound') );\n      if (compoundInfo){\n        if (tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()]){\n          const compoundAllocationPerc = tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()];\n          compAPR = compAPR.times(compoundAllocationPerc);\n        }\n      }\n    }\n\n    this.setState({\n      compAPR,\n      aggregatedValues,\n      govTokensUserBalance\n    });\n    */\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Text\n                          mt={2}\n                          fontWeight={2}\n                          fontSize={[1,2]}\n                          color={'cellText'}\n                        >\n                          {v.props.title}\n                        </Text>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquityCurve\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLentCurve',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPercCurve',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            {\n              /*\n              <Flex\n                mb={[2,0]}\n                width={[1,1/5]}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'flex-start'}\n              >\n                <Title\n                  mb={2}\n                  fontSize={[3,4]}\n                  component={Heading.h3}\n                >\n                  Fees\n                </Title>\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'feesCounter',\n                    props:{\n                      decimals:7,\n                      maxPrecision:8,\n                      style:{\n                        fontWeight:300,\n                        fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                        color:theme.colors.counter\n                      },\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n              */\n            }\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveApy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Avg Slippage\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveAvgSlippage',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverviewCurve;","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport { Box, Flex, Text, Icon } from \"rimble-ui\";\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport CurveDeposit from '../CurveDeposit/CurveDeposit';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport TransactionField from '../TransactionField/TransactionField';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport FundsOverviewCurve from '../FundsOverviewCurve/FundsOverviewCurve';\n\nclass AssetPage extends Component {\n\n  state = {\n    inputValue:{},\n    processing:{},\n    tokenFees:null,\n    canRedeem:null,\n    canDeposit:null,\n    action:'deposit',\n    activeModal:null,\n    tokenConfig:null,\n    tokenBalance:null,\n    tokenApproved:null,\n    selectedToken:null,\n    availableTokens:{},\n    redeemBalance:null,\n    depositBalance:null,\n    buttonDisabled:false,\n    curveTokenPrice:null,\n    depositSlippage:null,\n    idleTokenBalance:null,\n    withdrawSlippage:null,\n    govTokensBalance:null,\n    curveZapContract:null,\n    curveTokenConfig:null,\n    curveTokensAmounts:{},\n    govTokensDisabled:null,\n    componentMounted:false,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    redeemableBalance:null,\n    fastBalanceSelector:{},\n    curveAvailableTokens:{},\n    tokenFeesPercentage:null,\n    redeemUnevenAmounts:false,\n    curveDepositContract:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  changeFromToken = (selectedToken) => {\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    this.props.goToSection(`${curveConfig.params.route}/${selectedToken}`);\n  }\n\n  getSelectedToken(){\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    return this.props.urlParams.param1 && curveAvailableTokens[this.props.urlParams.param1] ? this.props.urlParams.param1 : Object.keys(curveAvailableTokens)[0];\n  }\n\n  setSelectedToken = async (selectedToken) => {\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n    this.setState({\n      tokenConfig,\n      selectedToken,\n      availableTokens,\n      curveTokenConfig\n    });\n  }\n\n  loadTokensInfo = async () => {\n\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    this.setState({\n      curveAvailableTokens\n    });\n\n    const selectedToken = this.getSelectedToken();\n    // Check if token is set the query params\n    if (selectedToken && selectedToken !== this.props.urlParams.param1){\n      this.changeFromToken(selectedToken);\n      return await this.setSelectedToken(selectedToken);\n    } else if (selectedToken !== this.state.selectedToken){\n      await this.setSelectedToken(selectedToken);\n    }\n\n    const newState = {...this.state};\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n\n    if (newState.selectedToken !== selectedToken){\n      newState.selectedToken = selectedToken;\n    }\n\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n\n    const [\n      curveZapContract,\n      curvePoolContract,\n      curveSwapContract,\n      curveDepositContract\n    ] = await Promise.all([\n      this.functionsUtil.getCurveZapContract(),\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract()\n    ]);\n\n    newState.curveZapContract = curveZapContract;\n    newState.curvePoolContract = curvePoolContract;\n    newState.curveSwapContract = curveSwapContract;\n    newState.curveDepositContract = curveDepositContract;\n\n    newState.availableTokens = availableTokens;\n\n\n    // console.log('curveTokenPrice',newState.curveTokenPrice.toFixed(6),'curveTokenBalance',newState.curveTokenBalance.toFixed(6),'redeemableBalance',newState.redeemableBalance.toFixed(20),'tokenBalance',newState.tokenBalance.toFixed(20));\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[selectedToken] = tokenConfig;\n\n    newState.tokenConfig = tokenConfig;\n    newState.curveTokenConfig = curveTokenConfig;\n\n    if (this.props.account){\n      [\n        newState.curveTokenPrice,\n        newState.curveTokenBalance,\n        newState.tokenFeesPercentage,\n        newState.tokenFees,\n        newState.tokenBalance,\n        newState.idleTokenBalance,\n        newState.tokenApproved,\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokenPrice(),\n        this.functionsUtil.getCurveTokenBalance(),\n        this.functionsUtil.getTokenFees(tokenConfig),\n        this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n        this.functionsUtil.getTokenBalance(selectedToken,this.props.account),\n        this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n        this.functionsUtil.checkTokenApproved(selectedToken,curveDepositContract.address,this.props.account),\n      ]);\n\n\n      newState.processing = {\n        redeem:{\n          txHash:null,\n          loading:false\n        },\n        deposit:{\n          txHash:null,\n          loading:false\n        },\n        approve:{\n          txHash:null,\n          loading:false\n        },\n      };\n      newState.inputValue = {\n        redeem:null,\n        deposit:null\n      };\n      newState.fastBalanceSelector = {\n        redeem:null,\n        deposit:null\n      };\n\n      newState.componentMounted = true;\n      newState.depositBalance = newState.tokenBalance;\n      newState.redeemBalance = newState.redeemableBalance;\n      newState.govTokensDisabled = tokenConfig.govTokensDisabled;\n      newState.canRedeem = newState.curveTokenBalance && newState.curveTokenBalance.gt(0);\n      newState.canDeposit = newState.idleTokenBalance && newState.idleTokenBalance.gt(0);\n      newState.redeemableBalance = newState.curveTokenBalance ? newState.curveTokenBalance.times(newState.curveTokenPrice) : this.functionsUtil.BNify(0);\n    }\n\n    this.setState(newState);\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async calculateSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,this.state.curvePoolContract.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositBalance = amount;\n        newState.depositSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      case 'redeem':\n        newState.redeemBalance = amount;\n        newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.urlParams.param1 !== this.props.urlParams.param1;\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n\n    if (accountChanged || transactionsChanged || tokenChanged){\n      await this.loadTokensInfo();\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const redeemUnevenAmountsChanged = this.state.redeemUnevenAmounts !== prevState.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n    if (actionChanged || fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    if (actionChanged){\n      this.updateAssetSelector();\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  updateAssetSelector = async () => {\n    const newState = {};\n    switch (this.state.action){\n      case 'deposit':\n        this.loadTokensInfo();\n      break;\n      case 'redeem':\n        // this.loadTokensInfo();\n        const tokenConfig = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n        newState.curveAvailableTokens = {};\n        newState.curveTokenConfig = tokenConfig;\n        newState.selectedToken = tokenConfig.token;\n        newState.curveAvailableTokens[tokenConfig.token] = tokenConfig;\n      break;\n      default:\n      break;\n    }\n\n    this.setState(newState);\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.state.tokenBalance ? this.functionsUtil.BNify(this.state.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          amount = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n        } else {\n          amount = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  changeInputValue = (e) => {\n    if (!this.state.action){\n      return false;\n    }\n\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && amount.gt(this.state.tokenBalance));\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.curveTokenBalance)) );\n        } else {\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.redeemableBalance)) );\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = this.state.tokenApproved;\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.state.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.functionsUtil.enableERC20(this.state.selectedToken,this.state.curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const inputValue = this.state.inputValue[this.state.action];\n    const selectedPercentage = this.getFastBalanceSelector();\n\n    let loading = true;\n\n    switch (this.state.action){\n      // Handle deposit in curve\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.state.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if (this.state.metaTransactionsEnabled && txError){\n            this.setState({\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,tokensToDeposit);\n        const minMintAmount = await this.functionsUtil.genericContractCall(this.state.curveSwapContract.name,'calc_token_amount',[amounts,true]);\n        const depositParams = [amounts,minMintAmount];\n\n        // No need for callback atm\n        contractSendResult = await this.props.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n      break;\n      case 'redeem':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        let curveTokensToRedeem = null;\n        if (selectedPercentage){\n          curveTokensToRedeem = this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage);\n        } else {\n          curveTokensToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals));\n          if (!this.state.redeemUnevenAmounts){\n            const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n            curveTokensToRedeem = curveTokensToRedeem.div(curveTokenPrice);\n          }\n        }\n\n        if (!curveTokensToRedeem){\n          return false;\n        }\n\n        const callbackRedeem = (tx,error) => {\n          const txSucceeded = tx.status === 'success';\n\n          // Send Google Analytics event\n          const eventData = {\n            eventLabel: tx.status,\n            eventCategory: `CurveRedeem`,\n            eventAction: this.state.selectedToken,\n            eventValue: curveTokensToRedeem.toFixed()\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          }\n        };\n\n        const callbackReceiptRedeem = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const _amount = this.functionsUtil.normalizeTokenAmount(curveTokensToRedeem,this.state.curvePoolContract.decimals).toString();\n        let min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,0);\n\n        const contractName = this.state.curveDepositContract.name;\n        if (this.state.redeemUnevenAmounts){\n          console.log('remove_liquidity_imbalance',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_imbalance', [min_amounts, _amount], null, callbackRedeem, callbackReceiptRedeem);\n        } else {\n          min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,_amount);\n          console.log('remove_liquidity',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts], null, callbackRedeem, callbackReceiptRedeem);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    // console.log('contractSendResult',contractSendResult);\n\n    if (contractSendResult !== false){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    const userHasFunds = this.props.account && this.state.curveTokenBalance && this.functionsUtil.BNify(this.state.curveTokenBalance).gt(0);\n    const canPerformAction = true;\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            {\n              <Breadcrumb\n                {...this.props}\n                isMobile={this.props.isMobile}\n                path={['Boost',this.state.selectedToken]}\n                handleClick={ e => this.props.goToSection('best') }\n                text={this.functionsUtil.getGlobalConfig(['strategies','best','title'])}\n              />\n            }\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Curve Pool\n        </Title>\n        <Flex\n          width={1}\n        >\n          <Flex\n            width={1}\n            alignItems={'center'}\n            flexDirection={'column'}\n            justifyContent={'center'}\n          >\n            <Flex\n              width={[1,0.36]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Box\n                width={1}\n              >\n                <Text\n                  mb={1}\n                >\n                  Select your asset:\n                </Text>\n                <AssetSelector\n                  {...this.props}\n                  id={'token-from'}\n                  onChange={this.changeFromToken}\n                  selectedToken={this.state.selectedToken}\n                  tokenConfig={this.state.curveTokenConfig}\n                  showBalance={this.state.action === 'deposit'}\n                  availableTokens={this.state.curveAvailableTokens}\n                />\n              </Box>\n              <Box\n                width={1}\n              >\n                {\n                  canPerformAction ? (\n                    <Flex\n                      mt={2}\n                      flexDirection={'column'}\n                    >\n                      <Text\n                        mb={2}\n                      >\n                        Choose the action:\n                      </Text>\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('deposit');\n                            }\n                          }}\n                          isInteractive={true}\n                          isActive={ this.state.action === 'deposit' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'deposit'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Deposit\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('redeem');\n                            }\n                          }}\n                          isInteractive={true}\n                          isDisabled={ !this.state.canRedeem }\n                          isActive={ this.state.action === 'redeem' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'redeem'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Redeem\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                      </Flex>\n                    </Flex>\n                  ) : (\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    >\n                      <Icon\n                        size={'2.3em'}\n                        name={'MoneyOff'}\n                        color={'cellText'}\n                      />\n                      <Text\n                        mt={2}\n                        fontSize={2}\n                        color={'cellText'}\n                        textAlign={'center'}\n                      >\n                        You don't have any {this.state.tokenConfig.idle.token} in your wallet.\n                      </Text>\n                    </Flex>\n                  )\n                }\n              </Box>\n            </Flex>\n            <Flex\n              width={1}\n              mt={ this.props.account ? 3 : 0 }\n            >\n            {\n              this.state.action === 'deposit' ? (\n                <CurveDeposit\n                  {...this.props}\n                  {...this.state}\n                />\n              ) : this.state.action === 'redeem' && (\n                <CurveRedeem\n                  {...this.props}\n                  {...this.state}\n                />\n              )\n            }\n            </Flex>\n          </Flex>\n        </Flex>\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverviewCurve\n                {...this.props}\n                tokenFees={this.state.tokenFees}\n                tokenConfig={this.state.tokenConfig}\n                selectedToken={this.state.selectedToken}\n                availableTokens={this.state.availableTokens}\n                enabledTokens={Object.keys(this.state.availableTokens)}\n              />\n            </Flex>\n        }\n        {\n          /*\n          this.props.account && !this.state.govTokensDisabled[this.state.selectedToken] && Object.keys(availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id=\"earnings-estimation\"\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(availableGovTokens)}\n                handleClick={(props) => {}}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.33,0.22]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.26],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    props:{\n                      width:[0.33,0.26],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                      {\n                        name:'tooltip',\n                        props:{\n                          placement:'bottom',\n                          message:'The shown balance may be lower than the real one.',\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    mobile:false,\n                    props:{\n                      width: 0.26,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                ]}\n                {...this.props}\n                availableTokens={availableGovTokens}\n              />\n            </Flex>\n          */\n        }\n        {\n          /*\n          this.props.account && \n            <Flex\n              mb={[3,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'estimated-earnings-container'}\n            >\n              <Title my={[3,4]}>Estimated earnings</Title>\n              <EstimatedEarnings\n                {...this.props}\n              />\n            </Flex>\n          */\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              availableTokens={this.state.availableTokens}\n              enabledTokens={Object.keys(this.state.availableTokens)}\n              enabledActions={['CurveIn','CurveOut','CurveZapIn','CurveZapOut','CurveTransferIn','CurveTransferOut','CurveDepositIn','CurveDepositOut']}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.state.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport ExtLink from '../../ExtLink/ExtLink.js';\nimport { Text, Modal, Flex, Link } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass PolygonModal extends React.Component {\n\n  state = {};\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    this.functionsUtil.setLocalStorage('polygonApproved',true);\n    this.props.closeModal();\n  }\n\n  render() {\n    const polygonBridgeInfo = this.functionsUtil.getGlobalConfig(['tools','polygonBridge']);\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','650px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            pt={3}\n            iconHeight={'2em'}\n            title={'Welcome to Idle <> Polygon'}\n            icon={'images/protocols/polygon.svg'}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                fontSize={2}\n                textAlign={'left'}\n                color={'dark-gray'}\n              >\n                You're about to enter Idle Finance in the Polygon Network, make sure to have some <ExtLink color={'link'} fontSize={2} href={this.functionsUtil.getEtherscanAddressUrl(this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.currentNetwork.baseToken,'address']))}>{this.props.currentNetwork.baseToken}</ExtLink> tokens in your wallet to send your transactions! Also you can use our <Link color={'link'} fontSize={2} mainColor={'link'} onClick={ e => this.props.goToSection(`tools/${polygonBridgeInfo.route}/${this.props.currentNetwork.baseToken}`)}>{polygonBridgeInfo.label}</Link> to transfer your tokens from Mainnet to Polygon.<br />If you are not confident with this just switch to Mainnet using your wallet provider.\n              </Text>\n            </Flex>\n            <Flex\n              my={3}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                handleClick={this.closeModal}\n                buttonProps={{\n                  width:['100%','40%']\n                }}\n              >\n                Let Me In\n              </RoundButton>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default PolygonModal;","import React from \"react\";\nimport {\n  Text,\n  Modal,\n  Button,\n  Form,\n  Icon,\n  Flex,\n  Link\n} from \"rimble-ui\";\nimport axios from 'axios';\nimport colors from '../../colors';\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\nimport globalConfigs from '../../configs/globalConfigs';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\n\nclass WelcomeModal extends React.Component {\n\n  state = {\n    email:null,\n    error:false,\n    subscribed:false,\n    sendingForm:false\n  };\n\n  functionsUtil = null;\n\n  constructor(props) {\n    super(props);\n    this.functionsUtil = new FunctionsUtil(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleValidation = this.handleValidation.bind(this);\n  }\n\n  componentDidUpdate = async () => {\n    this.functionsUtil.setProps(this.props);\n  }\n\n  sendUserInfo = (sendEmail=true) => {\n    const walletProvider = this.functionsUtil.getWalletProvider();\n    const userInfo = {\n      address: this.props.account,\n      provider: walletProvider\n    };\n\n    if (sendEmail && this.state.email !== null){\n      userInfo.email = this.state.email;\n    }\n\n    this.functionsUtil.simpleIDPassUserInfo(userInfo);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    if (!this.state.email){\n      return false;\n    }\n\n    const callback = () => {\n      this.setState({\n        sendingForm:false,\n        subscribed:true\n      });\n      window.setTimeout(this.props.closeModal,2500);\n    };\n\n    this.sendUserInfo();\n\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'send_email',\n      eventLabel: 'WelcomeModal'\n    });\n\n    axios.post(globalConfigs.newsletterSubscription.endpoint, {\n      'email': this.state.email\n    }).then(r => {\n      callback();\n    })\n    .catch(err => {\n      callback();\n    });\n\n    // Set signedUp in the localStorage\n    if (localStorage){\n      const walletAddress = this.props.account.toLowerCase();\n      let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : null;\n      if (lastLogin && lastLogin[walletAddress] && !lastLogin[walletAddress].signedUp){\n        lastLogin[walletAddress].signedUp = true;\n        this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n      }\n    }\n\n    this.setState({\n      sendingForm:true\n    })\n  };\n\n  closeModal = async () => {\n\n    const closeModal = () => {\n      this.props.closeModal();\n    };\n\n    try{\n      // Prevent sending email\n      this.sendUserInfo(false);\n\n      // Send Google Analytics event\n      if (globalConfigs.analytics.google.events.enabled){\n        this.functionsUtil.sendGoogleAnalyticsEvent({\n          eventCategory: 'UI',\n          eventAction: 'continue_without_email',\n          eventLabel: 'WelcomeModal'\n        },closeModal);\n\n        // Call callback after 1 second if stuck\n        setTimeout(closeModal,1000);\n      } else {\n        closeModal();\n      }\n    } catch (err) {\n      closeModal();\n    }\n  }\n\n  handleValidation(e) {\n    if (e && e.target) {\n      this.setState({ email: e.target.value });\n      e.target.parentNode.classList.add(\"was-validated\");\n    }\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        {\n          this.state.subscribed ? (\n            <ModalCard\n              closeFunc={this.closeModal}\n            >\n              <ModalCard.Header title={'All done'} icon={`images/done.svg`}></ModalCard.Header>\n              <ModalCard.Body>\n                <Flex width={1} flexDirection={'column'} mb={3}>\n                  <Text color={'dark-gray'} textAlign={'center'} fontSize={3} my={0}>\n                    Thanks for subscribing!\n                  </Text>\n                  <Button\n                    my={3}\n                    width={'100%'}\n                    borderRadius={4}\n                    onClick={this.closeModal}\n                  >\n                    CLOSE\n                  </Button>\n                </Flex>\n              </ModalCard.Body>\n            </ModalCard>\n          ) : (\n            <ModalCard closeFunc={this.closeModal}>\n              <ModalCard.Header title={'Stay up-to-date!'} icon={`images/notification.svg`}>\n              </ModalCard.Header>\n              <ModalCard.Body>\n                <Form onSubmit={this.handleSubmit}>\n                  <Flex width={1} flexDirection={'column'} mb={3}>\n                    <Text color={'mid-gray'} textAlign={'left'} fontSize={3} my={0}>\n                      Add your e-mail to receive updates about:\n                    </Text>\n                  </Flex>\n                  <Flex width={1} flexDirection={'column'} mt={2}>\n                    <Flex my={2} flexDirection={'row'} alignItems={'center'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Performance reports\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        New Protocols & Tokens\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Latest updates\n                      </Text>\n                    </Flex>\n                    <Form.Field width={1} label={''}>\n                      <Form.Input\n                        px={3}\n                        py={4}\n                        required\n                        width={1}\n                        border={0}\n                        fontSize={3}\n                        type={\"email\"}\n                        name={\"EMAIL\"}\n                        outline={'none'}\n                        borderColor={'cardBorder'}\n                        backgroundColor={'cardBg'}\n                        textAlign={['center','left']}\n                        className={header_styles.input}\n                        placeholder={'Enter your e-mail'}\n                        onChange={this.handleValidation}\n                      />\n                    </Form.Field>\n                    <Flex mb={3} flexDirection={'column'} alignItems={'center'} justifyContent={'center'}>\n                      <ButtonLoader\n                        buttonText={'SUBMIT'}\n                        isLoading={this.state.sendingForm}\n                        buttonProps={{className:header_styles.gradientButton,width:'100%',type:'submit'}}\n                      >\n                      </ButtonLoader>\n                      <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without e-mail</Link>\n                    </Flex>\n                  </Flex>\n                </Form>\n              </ModalCard.Body>\n            </ModalCard>\n          )\n        }\n      </Modal>\n    );\n  }\n}\n\nexport default WelcomeModal;\n","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\n\nclass MigrateModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'continue_without_migrate',\n        eventLabel: 'MigrateModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowMigrateModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowMigrateModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = () => {\n    const tokenMigrationRoute = this.functionsUtil.getGlobalConfig(['tools','tokenMigration','route']);\n    this.props.goToSection('tools/'+tokenMigrationRoute);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            iconHeight={'40px'}\n            title={'Migrate to Idle'}\n            icon={`images/migrate.svg`}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={3}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                You can migrate your funds from Compound, Aave, Fulcrum, Yearn and Idle V2 with just one transaction.\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                my={2}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.protocolsTokensBalances && Object.keys(this.props.protocolsTokensBalances).map( token => (\n                    <Flex\n                      mb={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      key={`token_${token}`}\n                      justifyContent={'space-between'}\n                    >\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'icon',\n                          props:{\n                            mr:2,\n                            height:'2.3em'\n                          }\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                      <SmartNumber\n                        mr={2}\n                        {...fieldProps}\n                        minPrecision={5}\n                        number={this.props.protocolsTokensBalances[token].balance} \n                      />\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'tokenName',\n                          props:fieldProps\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                    </Flex>\n                  ) )\n                }\n                <Text\n                  mb={0}\n                  fontSize={1}\n                  color={'red'}\n                  fontWeight={500}\n                  textAlign={'center'}\n                >\n                  Please be aware that by migrating your tokens from other protocols, your open positions might be liquidated if collateralized with migrated tokens.\n                </Text>\n              </Flex>\n              <Flex\n                mb={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <ButtonLoader\n                  buttonText={'MIGRATE'}\n                  handleClick={this.migrate}\n                  isLoading={this.state.sendingForm}\n                  buttonProps={{\n                    width:['100%','50%'],\n                    className:header_styles.gradientButton\n                  }}\n                >\n                </ButtonLoader>\n                {\n                /*\n                <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without migrate</Link>\n                */\n                }\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default MigrateModal;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass UpgradeModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'close_upgrade_modal',\n        eventLabel: 'UpgradeModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowUpgradeModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowUpgradeModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = async (token,strategy=null) => {\n\n    if (!strategy){\n      strategy = this.props.selectedStrategy;\n    }\n\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  convert = async (token) => {\n    const convertTool = this.functionsUtil.getGlobalConfig(['tools','tokenMigration']);\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n\n    if (!this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            icon={`images/migrate.svg`}\n            title={'Upgrade Available'}\n            iconHeight={['35px','40px']}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={[2,3]}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                Idle now supports yield farming and governance tokens distribution, migrate now your portfolio with just one click!\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n              >\n                <Flex\n                  fontSize={[2,3]}\n                  width={[0.5,0.28]}\n                  fontWeight={[4,5]}\n                  color={'copyColor'}\n                >\n                  {\n                    this.props.isMobile ? 'ASSET' : 'ASSET TO MIGRATE'\n                  }\n                </Flex>\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      BALANCE\n                    </Flex>\n                  )\n                }\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      OLD APY\n                    </Flex>\n                  )\n                }\n                <Flex\n                  fontSize={[2,3]}\n                  fontWeight={[4,5]}\n                  width={[0.25,0.19]}\n                  color={'copyColor'}\n                  justifyContent={'center'}\n                >\n                  {\n                    this.props.isMobile ? 'APY' : 'NEW APY'\n                  }\n                </Flex>\n                <Flex\n                  width={[0.25,0.15]}\n                >\n                  \n                </Flex>\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.tokensToMigrate && Object.keys(this.props.tokensToMigrate).map( tokenKey => {\n                    const token = this.props.tokensToMigrate[tokenKey].token;\n                    const strategy = this.props.tokensToMigrate[tokenKey].strategy;\n                    const tokenConfig = this.props.tokensToMigrate[tokenKey].tokenConfig;\n                    const balance = this.props.tokensToMigrate[tokenKey].oldContractBalanceFormatted;\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${tokenKey}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={[0.5,0.28]}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:['1.8em','2.3em']\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                        </Flex>\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <SmartNumber\n                                {...fieldProps}\n                                minPrecision={5}\n                                number={balance}\n                                flexProps={{\n                                  justifyContent:'center'\n                                }}\n                              />\n                            </Flex>\n                          )\n                        }\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <AssetField\n                                {...this.props}\n                                fieldInfo={{\n                                  name:'oldApy',\n                                  props:fieldProps\n                                }}\n                                token={token}\n                                tokenConfig={tokenConfig}\n                              />\n                            </Flex>\n                          )\n                        }\n                        <Flex\n                          width={[0.25,0.19]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={token}\n                            tokenConfig={tokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={[0.25,0.15]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.migrate(token,strategy) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.oldIdleTokensToMigrate && Object.keys(this.props.oldIdleTokensToMigrate).map( token => {\n                    const tokenConfig = this.props.oldIdleTokensToMigrate[token].tokenConfig;\n\n                    if (!tokenConfig){\n                      return null;\n                    }\n\n                    const balance = this.props.oldIdleTokensToMigrate[token].balance;\n                    let newTokenConfig = null;\n\n                    if (tokenConfig.availableStrategies && !this.props.availableTokens[tokenConfig.baseToken]){\n                      newTokenConfig = this.props.availableStrategies[tokenConfig.availableStrategies[0]][tokenConfig.baseToken];\n                    } else {\n                      newTokenConfig = this.props.availableTokens[tokenConfig.baseToken];\n                    }\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${token}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={0.28}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:'2.3em'\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <SmartNumber\n                            {...fieldProps}\n                            minPrecision={5}\n                            number={balance}\n                            flexProps={{\n                              justifyContent:'center'\n                            }}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'oldApy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.15}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.convert(token) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                my={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <RoundButton\n                  handleClick={this.closeModal}\n                  buttonProps={{\n                    fontSize:[2,3],\n                    width:['100%','40%'],\n                  }}\n                >\n                  MIGRATE LATER\n                </RoundButton>\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default UpgradeModal;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport { Text, Modal, Flex } from \"rimble-ui\";\nimport ExtLink from '../../ExtLink/ExtLink.js';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass RiskAdjustedModal extends React.Component {\n\n  state = {};\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    this.props.closeModal();\n  }\n\n  render() {\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','650px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            pt={3}\n            iconHeight={'40px'}\n            icon={'images/warning.svg'}\n            title={'Risk Adjusted Dismissed'}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                fontSize={2}\n                textAlign={'left'}\n                color={'dark-gray'}\n              >\n                The Risk Adjusted strategy has been dismissed after the execution of <ExtLink fontSize={2} href={this.functionsUtil.getAppUrl('#/governance/proposals/14')}>IIP-14</ExtLink> on the 13th October 2021. An incentive program has been released to let users migrate their funds in the <ExtLink fontSize={2} href={'https://beta.idle.finance/#/dashboard/tranches/senior/idle'}>Senior Tranche</ExtLink> in order to keep a similar risk profile as the Risk-Adjusted strategy. Read the <ExtLink fontSize={2} href={'https://gov.idle.finance/t/risk-adjusted-removal-for-tranches-migration/673'}>Governance Forum Post</ExtLink> for further information about the migration program.\n              </Text>\n            </Flex>\n            <Flex\n              my={3}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                handleClick={this.closeModal}\n                buttonProps={{\n                  width:['100%','40%']\n                }}\n              >\n                Got it\n              </RoundButton>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default RiskAdjustedModal;","import React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport { Flex, Card, Icon, Text, Image } from 'rimble-ui';\nimport DashboardMenu from '../DashboardMenu/DashboardMenu';\n\n// Import page components\nimport Stats from '../Stats/Stats';\nimport Utils from '../Utils/Utils';\nimport AssetPage from '../AssetPage/AssetPage';\nimport RoundButton from '../RoundButton/RoundButton';\nimport Swipeable from '../utilities/components/Swipeable';\nimport BetaModal from \"../utilities/components/BetaModal\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CurveStrategy from '../CurveStrategy/CurveStrategy';\nimport PolygonModal from \"../utilities/components/PolygonModal\";\nimport WelcomeModal from \"../utilities/components/WelcomeModal\";\nimport TooltipModal from \"../utilities/components/TooltipModal\";\nimport MigrateModal from \"../utilities/components/MigrateModal\";\nimport UpgradeModal from \"../utilities/components/UpgradeModal\";\nimport DashboardHeader from '../DashboardHeader/DashboardHeader';\nimport RiskAdjustedModal from \"../utilities/components/RiskAdjustedModal\";\n\nclass Dashboard extends Component {\n  state = {\n    menu:[],\n    baseRoute:null,\n    clickEvent:null,\n    activeModal:null,\n    menuOpened:false,\n    currentRoute:null,\n    pageComponent:null,\n    currentSection:null,\n    currentNetwork:null,\n    selectedSection:null,\n    tokensToMigrate:null,\n    showResetButton:false,\n    selectedSubsection:null,\n    pageComponentProps:null,\n    oldIdleTokensToMigrate:null,\n    protocolsTokensBalances:null,\n  };\n\n  timeoutId = null;\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    window.functionsUtil = this.functionsUtil;\n  }\n\n  async loadMenu() {\n    const extraicons=this.functionsUtil.getGlobalConfig(['extraicons']);\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n\n    const menu = [];\n    const currentNetwork = this.functionsUtil.getRequiredNetwork();\n\n    // Add Stake Polygon\n    const stakePolygonConfig = this.functionsUtil.getGlobalConfig(['tools','stakePolygon']);\n    if (stakePolygonConfig.enabled && (!stakePolygonConfig.availableNetworks || stakePolygonConfig.availableNetworks.includes(currentNetwork.id))){\n      menu.push(\n        {\n          submenu:[],\n          label:'Stake',\n          selected:false,\n          color:'dark-gray',\n          route:'/dashboard/stake',\n          image:extraicons['stake'].icon,\n          imageDark:extraicons['stake'].iconDark,\n          bgColor:this.props.theme.colors.primary,\n          imageInactive:extraicons['stake'].iconInactive,\n          imageInactiveDark:extraicons['stake'].iconInactiveDark,\n          component:Utils,\n          componentProps:{\n            showBreadCrumb:false,\n            toolProps:stakePolygonConfig.props,\n            selectedSubsection:stakePolygonConfig\n          },\n        }\n      );\n    }\n\n    const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n    Object.keys(strategies).filter( s => ( !strategies[s].comingSoon && (!strategies[s].availableNetworks || strategies[s].availableNetworks.includes(currentNetwork.id)) && (!strategies[s].enabledEnvs.length || strategies[s].enabledEnvs.includes(this.props.currentEnv)) ) ).forEach(strategy => {\n      const strategyInfo = strategies[strategy];\n      const imageInfo=extraicons[strategy];\n      menu.push({\n        submenu:[],\n        color:'#fff',\n        selected:false,\n        image:imageInfo.icon,\n        label:strategyInfo.title,\n        bgColor:strategyInfo.color,\n        route:baseRoute+'/'+strategy,\n        visible:strategyInfo.visible,\n        imageDark:imageInfo.iconDark,\n        component:strategyInfo.component,\n        imageInactive:imageInfo.iconInactive,\n        imageInactiveDark:imageInfo.iconInactiveDark\n      });\n    });\n    \n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n\n    // Add Curve\n    if (curveConfig.enabled){\n      const curveParams = Object.assign({\n        submenu:[],\n        selected:false,\n        component:CurveStrategy,\n      },curveConfig.params);\n\n      menu.push(curveParams);\n    }\n\n    // Add Stake\n    const stakeConfig = this.functionsUtil.getGlobalConfig(['tools','stake']);\n    if (stakeConfig.enabled && (!stakeConfig.availableNetworks || stakeConfig.availableNetworks.includes(currentNetwork.id))){\n      menu.push(\n        {\n          submenu:[],\n          label:'Stake',\n          selected:false,\n          color:'dark-gray',\n          route:'/dashboard/stake',\n          image:extraicons['stake'].icon,\n          imageDark:extraicons['stake'].iconDark,\n          bgColor:this.props.theme.colors.primary,\n          imageInactive:extraicons['stake'].iconInactive,\n          imageInactiveDark:extraicons['stake'].iconInactiveDark,\n          component:Utils,\n          componentProps:{\n            showBreadCrumb:false,\n            toolProps:stakeConfig.props,\n            selectedSubsection:stakeConfig\n          },\n        }\n      );\n    }\n\n    const statsInfo = this.functionsUtil.getGlobalConfig(['stats']);\n    if (!statsInfo.availableNetworks || statsInfo.availableNetworks.includes(currentNetwork.id)){\n      menu.push(\n        {\n          submenu:[],\n          label:'Stats',\n          selected:false,\n          component:Stats,\n          bgColor:'#21f36b',\n          color:'dark-gray',\n          route:'/dashboard/stats',\n          image:extraicons['stats'].icon,\n          imageDark:extraicons['stats'].iconDark,\n          imageInactive:extraicons['stats'].iconInactive,\n          imageInactiveDark:extraicons['stats'].iconInactiveDark,\n        }\n      );\n    }\n    \n    // Add tools\n    menu.push(\n      {\n        label:'Tools',\n        selected:false,\n        component:Utils,\n        color:'dark-gray',\n        route:'/dashboard/tools',\n        image:extraicons['tools'].icon,\n        imageDark:extraicons['tools'].iconDark,\n        bgColor:this.props.theme.colors.primary,\n        imageInactive:extraicons['tools'].iconInactive,\n        imageInactiveDark:extraicons['tools'].iconInactiveDark,\n        submenu:Object.values(this.functionsUtil.getGlobalConfig(['tools'])).filter( tool => (tool.enabled && (!tool.availableNetworks || tool.availableNetworks.includes(currentNetwork.id))) )\n      }\n    );\n\n    // Add Forum\n    menu.push(\n      {\n        submenu:[],\n        mobile:false,\n        label:'Forum',\n        selected:false,\n        component:null,\n        color:'dark-gray',\n        bgColor:'#ff0000',\n        isExternalLink:true,\n        image:extraicons['forum'].icon,\n        imageDark:extraicons['forum'].iconDark,\n        imageInactive:extraicons['forum'].iconInactive,\n        imageInactiveDark:extraicons['forum'].iconInactiveDark,\n        route:this.functionsUtil.getGlobalConfig(['forumURL'])\n      }\n    );\n\n    await this.setState({\n      menu,\n      currentNetwork\n    });\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  openTooltipModal = (modalTitle,modalContent) => {\n\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: modalTitle,\n      eventLabel: 'TooltipModal'\n    });\n\n    this.setState({\n      modalTitle,\n      modalContent\n    },() => {\n      this.setActiveModal('tooltip');\n    })\n  }\n\n  setActiveModal = (activeModal) => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadParams() {\n\n    if (!this.props.networkInitialized){\n      return;\n    }\n\n    const { match: { params } } = this.props;\n\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n    let currentRoute = baseRoute;\n\n    let pageComponent = null;\n    let selectedToken = null;\n    let currentSection = null;\n    let selectedStrategy = null;\n    let pageComponentProps = null;\n\n    // Set strategy\n    if (params.section){\n      currentSection = params.section;\n      const param1 = params.param1;\n      const param2 = params.param2;\n\n      const section_is_strategy = Object.keys(this.props.availableStrategies).includes(currentSection.toLowerCase());\n      const param1_is_strategy = param1 && Object.keys(this.props.availableStrategies).includes(param1.toLowerCase());\n\n      if (section_is_strategy || param1_is_strategy){\n\n        if (!section_is_strategy){\n          currentRoute += '/'+currentSection;\n        }\n\n        selectedStrategy = section_is_strategy ? currentSection : param1;\n        currentRoute += '/'+selectedStrategy;\n\n        // Set token\n        const param1_is_token = param1 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param1.toUpperCase());\n        const param2_is_token = param2 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param2.toUpperCase());\n        if (param1_is_token || param2_is_token){\n          selectedToken = param1_is_token ? param1.toUpperCase() : param2.toUpperCase();\n          currentRoute += '/'+selectedToken;\n\n          if (section_is_strategy){\n            pageComponent = AssetPage;\n          }\n        }\n      } else {\n        currentRoute += '/'+params.section;\n\n        if (params.param1 && params.param1.length){\n          currentRoute += '/'+params.param1;\n        }\n\n        // if (params.param2 && params.param2.length){\n        //   currentRoute += '/'+params.param2;\n        // }\n      }\n    }\n\n    const menu = this.state.menu;\n\n    let selectedSection = null;\n    let selectedSubsection = null;\n\n    menu.forEach(m => {\n      m.selected = false;\n      const sectionRoute = baseRoute+'/'+params.section;\n      if (currentRoute.toLowerCase() === m.route.toLowerCase() || ( !m.submenu.length && m.route.toLowerCase() === sectionRoute.toLowerCase() )){\n        m.selected = true;\n        if (pageComponent === null){\n          pageComponent = m.component;\n          pageComponentProps = m.componentProps;\n        }\n      } else if (m.submenu.length) {\n        m.submenu.forEach(subm => {\n          subm.selected = false;\n          const submRoute = m.route+'/'+subm.route;\n          if (submRoute.toLowerCase() === currentRoute.toLowerCase()){\n            m.selected = true;\n            subm.selected = true;\n\n            // Set component, if null use parent\n            if (pageComponent === null){\n              if (subm.component){\n                pageComponent = subm.component;\n                pageComponentProps = m.componentProps;\n              } else {\n                pageComponent = m.component;\n                pageComponentProps = m.componentProps;\n              }\n            }\n          }\n\n          // Set selected subsection\n          if (subm.selected){\n            selectedSubsection = subm;\n          }\n\n        });\n      }\n\n      // Set selected section\n      if (m.selected){\n        selectedSection = m;\n      }\n    });\n\n    // console.log('pageComponent',params,pageComponent);\n\n    // Exit if no strategy and token selected\n    if (!pageComponent){\n      // const firstAvailableStrategy = Object.keys(this.props.availableStrategies)[0];\n      return this.goToSection('',false);\n    }\n\n    // console.log('loadParams',selectedStrategy,selectedToken);\n    await this.props.setStrategyToken(selectedStrategy,selectedToken);\n    \n    // Send GA pageview\n    this.functionsUtil.sendGoogleAnalyticsPageview(currentRoute);\n\n    const newState = {\n      menu,\n      params,\n      baseRoute,\n      currentRoute,\n      pageComponent,\n      currentSection,\n      selectedSection,\n      pageComponentProps,\n      selectedSubsection\n    };\n\n    await this.setState(newState);\n\n    return newState;\n  }\n\n  componentWillUnmount(){\n    if (this.timeoutId){\n      window.clearTimeout(this.timeoutId);\n    }\n  }\n\n  async componentWillMount() {\n\n    this.props.setCurrentSection('dashboard');\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n  }\n\n  async componentDidMount() {\n\n    this.timeoutId = window.setTimeout(() => {\n      if (!this.props.accountInizialized || !this.props.contractsInitialized){\n        this.setState({\n          showResetButton:true\n        });\n      }\n    },60000);\n\n    if (!this.props.web3){\n      return this.props.initWeb3();\n    } else if (!this.props.accountInizialized){\n      return this.props.initAccount();\n    } else if (!this.props.contractsInitialized){\n      return this.props.initializeContracts();\n    }\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n\n    const viewOnly = this.props.connectorName === 'custom';\n    if (!viewOnly){\n      this.checkModals();\n    }\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n\n    this.loadUtils();\n\n    const prevParams = prevProps.match.params;\n    const params = this.props.match.params;\n\n    const isMobileChanged = prevProps.isMobile !== this.props.isMobile;\n    if (isMobileChanged){\n      this.setState({\n        menuOpened:false\n      });\n    }\n\n    if (JSON.stringify(prevParams) !== JSON.stringify(params)){\n      await this.setState({\n        pageComponent:null\n      }, () => {\n        this.loadParams();\n      });\n    }\n\n    const requiredNetworkChanged = JSON.stringify(prevProps.network.required) !== JSON.stringify(this.props.network.required);\n    const networkChanged = (!prevProps.networkInitialized && this.props.networkInitialized) || requiredNetworkChanged;\n    if (networkChanged){\n      await this.loadMenu();\n      this.loadParams();\n    }\n\n    const viewOnly = this.props.connectorName === 'custom';\n    const accountChanged = prevProps.account !== this.props.account;\n    const strategyChanged = this.props.selectedStrategy && prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const availableTokensChanged = JSON.stringify(prevProps.availableTokens) !== JSON.stringify(this.props.availableTokens);\n    const accountInizialized = this.props.accountInizialized && prevProps.accountInizialized !== this.props.accountInizialized;\n    const contractsInitialized = this.props.contractsInitialized && prevProps.contractsInitialized !== this.props.contractsInitialized;\n\n    if (!viewOnly && (networkChanged || accountChanged || accountInizialized || contractsInitialized || strategyChanged || availableTokensChanged)){\n      this.checkModals();\n    }\n  }\n\n  async checkModals(){\n\n    if (this.props.selectedToken || !this.props.accountInizialized || !this.props.contractsInitialized || !this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    await this.checkRiskAdjusted();\n    await this.checkPolygonModal();\n    await this.checkBetaApproval();\n    await this.checkTokensToMigrate();\n    await this.checkWelcomeModal();\n    await this.checkProtocolsTokensBalances();\n  }\n\n  async checkRiskAdjusted(){\n    const isRiskAdjusted = this.props.selectedStrategy === 'risk';\n    if (isRiskAdjusted){\n      const activeModal = 'risk';\n      if (activeModal !== this.state.activeModal){\n        await this.setState({\n          activeModal\n        });\n        return activeModal;\n      }\n    }\n  }\n\n  async checkPolygonModal(){\n    const isPolygon = this.state.currentNetwork.provider === 'polygon';\n    const isPolygonApproved = this.functionsUtil.getStoredItem('polygonApproved',false,false);\n\n    // console.log('checkPolygonModal',this.state.currentNetwork,isPolygon);\n\n    // Show Beta Warning modal\n    if (isPolygon && !isPolygonApproved){\n      const activeModal = 'polygon';\n      if (activeModal !== this.state.activeModal){\n        await this.setState({\n          activeModal\n        });\n        return activeModal;\n      }\n    }\n  }\n\n  async checkBetaApproval(){\n    const isOriginUrl = this.functionsUtil.checkUrlOrigin();\n    const isPolygon = this.state.currentNetwork.provider === 'polygon';\n    const isBetaApproved = this.functionsUtil.getStoredItem('betaApproved',false,false);\n\n    // Show Beta Warning modal\n    if (!isOriginUrl && !isBetaApproved && !isPolygon && this.state.activeModal === null){\n      const activeModal = 'beta';\n      if (activeModal !== this.state.activeModal){\n        await this.setState({\n          activeModal\n        });\n        return activeModal;\n      }\n    }\n  }\n\n  async checkTokensToMigrate(){\n\n    const showUpgradeModal = this.functionsUtil.getStoredItem('dontShowUpgradeModal',false,null) !== null ? false : true;\n    if (this.props.selectedToken || !showUpgradeModal || !this.props.availableTokens || this.state.activeModal !== null){\n      return null;\n    }\n\n    const tokensToMigrate = await this.functionsUtil.getTokensToMigrate();\n    const oldIdleTokensToMigrate = await this.functionsUtil.getProtocolsTokensBalances('idle');\n\n    // console.log('tokensToMigrate',tokensToMigrate);\n    \n    if ((tokensToMigrate && Object.keys(tokensToMigrate).length>0) || (oldIdleTokensToMigrate && Object.keys(oldIdleTokensToMigrate).length>0)){\n      const activeModal = 'upgrade';\n      if (activeModal !== this.state.activeModal){\n        await this.setState({\n          activeModal,\n          tokensToMigrate,\n          oldIdleTokensToMigrate\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkWelcomeModal(){\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show welcome modal\n    if (this.props.account && this.state.activeModal === null){\n      let welcomeIsOpen = false;\n\n      const welcomeModalProps = this.functionsUtil.getGlobalConfig(['modals','welcome']);\n\n      if (welcomeModalProps.enabled && localStorage){\n\n        // Check the last login of the wallet\n        const currTime = new Date().getTime();\n        const walletAddress = this.props.account.toLowerCase();\n        let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : {};\n\n        // First login\n        if (!lastLogin[walletAddress]){\n          lastLogin[walletAddress] = {\n            'signedUp':false,\n            'lastTime':currTime\n          };\n          welcomeIsOpen = true;\n        // User didn't sign up\n        } else if (!lastLogin[walletAddress].signedUp) {\n          const lastTime = parseInt(lastLogin[walletAddress].lastTime);\n          const timeFromLastLogin = (currTime-lastTime)/1000;\n          welcomeIsOpen = timeFromLastLogin>=welcomeModalProps.frequency; // 1 day since last login\n        }\n\n        if (welcomeIsOpen){\n          lastLogin[walletAddress].lastTime = currTime;\n          this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n        }\n      }\n\n      const activeModal = welcomeIsOpen ? 'welcome' : this.state.activeModal;\n      if (this.state.activeModal !== activeModal){\n        await this.setState({\n          activeModal\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkProtocolsTokensBalances() {\n\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show migration modal if no other modals are opened\n    const migrateModalConfig = this.functionsUtil.getGlobalConfig(['modals','migrate']);\n    const migrateModalEnabled = migrateModalConfig.enabled && migrateModalConfig.availableNetworks.includes(this.state.currentNetwork.id);\n\n    const showMigrateModal = this.functionsUtil.getStoredItem('dontShowMigrateModal',false,null) !== null ? false : true;\n\n    if (this.state.activeModal === null && migrateModalEnabled && showMigrateModal && !this.state.protocolsTokensBalances){\n      const protocolsTokensBalances = await this.functionsUtil.getProtocolsTokensBalances();\n      const activeModal = protocolsTokensBalances && Object.keys(protocolsTokensBalances).length>0 ? 'migrate' : null;\n      const newState = {\n        activeModal,\n        protocolsTokensBalances\n      };\n      await this.setState(newState);\n      return activeModal;\n    }\n\n    return null;\n  }\n\n  goToSection(section,isDashboard=true){\n\n    // Remove dashboard route\n    if (isDashboard){\n      section = section.replace(this.state.baseRoute +'/','');\n    }\n\n    const newRoute = isDashboard ? this.state.baseRoute +'/' + section : section;\n    window.location.hash=newRoute;\n\n    // Send GA event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'goToSection',\n      eventLabel: newRoute\n    });\n\n    window.scrollTo(0, 0);\n  }\n\n  logout = async () => {\n    this.props.setConnector('Infura','Infura');\n    await this.props.initWeb3('Infura');\n  }\n\n  changeToken(selectedToken){\n    selectedToken = selectedToken.toUpperCase();\n    if (Object.keys(this.props.availableTokens).includes(selectedToken)){\n      const routeParts = [];\n\n      // Add section\n      if (this.state.currentSection.toLowerCase() !== this.props.selectedStrategy.toLowerCase()){\n        routeParts.push(this.state.currentSection);\n      }\n\n      // Add strategy\n      routeParts.push(this.props.selectedStrategy); \n\n      // Add token\n      routeParts.push(selectedToken);\n\n      this.goToSection(routeParts.join('/'));\n    }\n  }\n\n  propagateClickEvent(clickEvent){\n    this.setState({\n      clickEvent:clickEvent.target\n    });\n  }\n\n  setMenu(menuOpened){\n    this.setState({\n      menuOpened\n    });\n  }\n\n  toggleMenu(){\n    const menuOpened = !this.state.menuOpened;\n    this.setMenu(menuOpened);\n  }\n\n  swipeCallback(eventData){\n    // console.log('swipeCallback',eventData);\n    if (eventData.dir === 'Right'){\n      this.setMenu(true);\n    } else if (eventData.dir === 'Left'){\n      this.setMenu(false);\n    }\n  }\n\n  render() {\n\n    const PageComponent = this.state.pageComponent ? this.state.pageComponent : null;\n    const networkInitialized = this.props.networkInitialized && this.props.network.current.id && this.props.network.required.id;\n    const networkCorrect = this.props.network.isCorrectNetwork;\n    const networkSupported = this.props.network.isSupportedNetwork;\n\n    if (!this.props.availableStrategies){\n      return (\n        <Flex\n          width={1}\n          minHeight={'100vh'}\n          alignItems={'center'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n          backgroundColor={'selectBg'}\n        >\n          <FlexLoader\n            textProps={{\n              textSize: 4,\n              fontWeight: 2\n            }}\n            loaderProps={{\n              mb: 3,\n              size: '80px',\n              color: 'primary'\n            }}\n            flexProps={{\n              my: 3,\n              flexDirection: 'column'\n            }}\n            text={''}\n          />\n        </Flex>\n      );\n    }\n\n    // console.log('networkInitialized',this.props.networkInitialized,networkInitialized);\n\n    return (\n      <Swipeable\n        callback={this.swipeCallback.bind(this)}\n      >\n        <Flex\n          height={'100vh'}\n          position={'fixed'}\n          flexDirection={'row'}\n          className={this.props.themeMode}\n          backgroundColor={['dashboardBg','white']}\n          width={this.props.isMobile && this.state.menuOpened ? '180vw' : '100vw'}\n          /*onClick={ e => this.propagateClickEvent(e) }*/\n        >\n          {\n            (!this.props.isMobile || this.state.menuOpened) && (\n              <Flex\n                bottom={0}\n                zIndex={99999}\n                width={['80vw',1/6]}\n                position={'relative'}\n                flexDirection={'column'}\n              >\n                <Card\n                  p={3}\n                  border={0}\n                  width={'auto'}\n                  height={'100vh'}\n                  backgroundColor={'menuBg'}\n                  borderColor={this.props.theme.colors.menuRightBorder}\n                  borderRight={`1px solid ${this.props.theme.colors.menuRightBorder}`}\n                  >\n                  <DashboardMenu\n                    {...this.props}\n                    menu={this.state.menu}\n                    closeMenu={e => this.setMenu(false)}\n                  />\n                </Card>\n              </Flex>\n            )\n          }\n          <Flex\n            py={3}\n            mb={0}\n            px={[3,5]}\n            width={['100vw',5/6]}\n            style={{\n              overflowY:'scroll',\n              overflowX:'hidden'\n            }}\n            height={['100vh','auto']}\n            flexDirection={'column'}\n            backgroundColor={'dashboardBg'}\n          >\n            <DashboardHeader\n              menuOpened={this.state.menuOpened}\n              clickEvent={this.state.clickEvent}\n              toggleMenu={this.toggleMenu.bind(this)}\n              goToSection={this.goToSection.bind(this)}\n              {...this.props}\n            />\n            {\n              !networkInitialized || !this.props.accountInizialized || !this.props.contractsInitialized || !PageComponent || !networkCorrect || !networkSupported ? (\n                <Flex\n                  width={1}\n                  minHeight={'50vh'}\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                >\n                  {\n                    networkInitialized && !networkCorrect ? (\n                      <DashboardCard\n                        cardProps={{\n                          p:3,\n                          mt:3,\n                          width:[1,0.35]\n                        }}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                        >\n                          <Icon\n                            size={'2.3em'}\n                            name={'Warning'}\n                            color={'cellText'}\n                          />\n                          <Text\n                            mt={2}\n                            fontSize={2}\n                            color={'cellText'}\n                            textAlign={'center'}\n                          >\n                            You should be on the <strong>{this.functionsUtil.capitalize(this.props.network.required.name)} network</strong>. You are currently connected to the <strong>{this.functionsUtil.capitalize(this.props.network.current.name)} network</strong>, please switch to the correct network.\n                          </Text>\n                          {\n                            parseInt(this.props.network.required.id)!==1 ? (\n                              <RoundButton\n                                buttonProps={{\n                                  mt:3,\n                                  width:[1,1/2]\n                                }}\n                                handleClick={e => this.functionsUtil.addEthereumChain(this.props.network.required.id)}\n                              >\n                                Switch Network\n                              </RoundButton>\n                            ) : (\n                              <Flex\n                                alignItems={'center'}\n                                justifyContent={'center'}\n                                flexDirection={'column'}\n                              >\n                                <Text\n                                  my={2}\n                                  fontSize={1}\n                                  color={'alert'}\n                                  textAlign={'center'}\n                                >\n                                  To switch to {this.functionsUtil.capitalize(this.props.network.required.name)} you need to manually change the network through your Wallet Provider (eg. Metamask):\n                                </Text>\n                                <Image\n                                  mt={1}\n                                  width={[1,'80%']}\n                                  src={'images/metamask-mainnet.png'}\n                                />\n                              </Flex>\n                            )\n                          }\n                        </Flex>\n                      </DashboardCard>\n                    ) : networkInitialized && !networkSupported ? (\n                      <DashboardCard\n                        cardProps={{\n                          p:3,\n                          mt:3,\n                          width:[1,0.35]\n                        }}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                        >\n                          <Icon\n                            size={'2.3em'}\n                            name={'Warning'}\n                            color={'cellText'}\n                          />\n                          <Text\n                            mt={2}\n                            fontSize={2}\n                            color={'cellText'}\n                            textAlign={'center'}\n                          >\n                            The <strong>{this.functionsUtil.capitalize(this.props.network.current.name)} Network</strong> is not supported, please switch to the correct network.\n                          </Text>\n                        </Flex>\n                      </DashboardCard>\n                    ) : !this.state.showResetButton ? (\n                      <FlexLoader\n                        textProps={{\n                          textSize:4,\n                          fontWeight:2\n                        }}\n                        loaderProps={{\n                          mb:3,\n                          size:'40px'\n                        }}\n                        flexProps={{\n                          my:3,\n                          flexDirection:'column'\n                        }}\n                        text={ !this.props.networkInitialized ? 'Loading network...' : (!this.props.accountInizialized ? 'Loading account...' : ( !this.props.contractsInitialized ? 'Loading contracts...' : 'Loading assets...' ))}\n                      />\n                    ) : (\n                      <DashboardCard\n                        cardProps={{\n                          p:3,\n                          mt:3,\n                          width:[1,0.35]\n                        }}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                        >\n                          <Icon\n                            size={'2.3em'}\n                            name={'Warning'}\n                            color={'cellText'}\n                          />\n                          <Text\n                            mt={2}\n                            fontSize={2}\n                            color={'cellText'}\n                            textAlign={'center'}\n                          >\n                            Idle can't connect to your wallet!<br />Make sure that your wallet is unlocked and try again.\n                          </Text>\n                          <RoundButton\n                            buttonProps={{\n                              mt:3,\n                              width:[1,1/2]\n                            }}\n                            handleClick={this.logout.bind(this)}\n                          >\n                            Logout\n                          </RoundButton>\n                        </Flex>\n                      </DashboardCard>\n                    )\n                  }\n                </Flex>\n              ) : (\n                <Flex\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  {\n                    PageComponent &&\n                      <PageComponent\n                        {...this.props}\n                        match={{ params:{} }}\n                        urlParams={this.state.params}\n                        changeToken={this.changeToken.bind(this)}\n                        goToSection={this.goToSection.bind(this)}\n                        selectedSection={this.state.selectedSection}\n                        selectedSubsection={this.state.selectedSubsection}\n                        openTooltipModal={this.openTooltipModal.bind(this)}\n                        {...this.state.pageComponentProps}\n                        />\n                  }\n                </Flex>\n              )\n            }\n          </Flex>\n          {\n            this.state.currentNetwork && \n              <PolygonModal\n                closeModal={this.resetModal}\n                goToSection={this.goToSection.bind(this)}\n                currentNetwork={this.state.currentNetwork}\n                isOpen={this.state.activeModal === 'polygon'}\n              />\n          }\n          <BetaModal\n            closeModal={this.resetModal}\n            isOpen={this.state.activeModal === 'beta'}\n          />\n          <RiskAdjustedModal\n            closeModal={this.resetModal}\n            isOpen={this.state.activeModal === 'risk'}\n          />\n          <UpgradeModal\n            {...this.props}\n            closeModal={this.resetModal}\n            goToSection={this.goToSection.bind(this)}\n            tokensToMigrate={this.state.tokensToMigrate}\n            isOpen={this.state.activeModal === 'upgrade'}\n            oldIdleTokensToMigrate={this.state.oldIdleTokensToMigrate}\n          />\n          <MigrateModal\n            {...this.props}\n            closeModal={this.resetModal}\n            goToSection={this.goToSection.bind(this)}\n            isOpen={this.state.activeModal === 'migrate'}\n            protocolsTokensBalances={this.state.protocolsTokensBalances}\n          />\n          <TooltipModal\n            closeModal={this.resetModal}\n            title={this.state.modalTitle}\n            content={this.state.modalContent}\n            isOpen={this.state.activeModal === 'tooltip'}\n          />\n          <WelcomeModal\n            closeModal={this.resetModal}\n            account={this.props.account}\n            simpleID={this.props.simpleID}\n            network={this.props.network.current}\n            tokenName={this.props.selectedToken}\n            initSimpleID={this.props.initSimpleID}\n            baseTokenName={this.props.selectedToken}\n            isOpen={this.state.activeModal === 'welcome'}\n          />\n        </Flex>\n      </Swipeable>\n    );\n  }\n}\n\nexport default Dashboard;"],"sourceRoot":""}