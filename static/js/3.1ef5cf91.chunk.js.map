{"version":3,"sources":["AssetsUnderManagement/AssetsUnderManagement.js","TwitterShareButton/TwitterShareButton.module.scss","Stats/StatsChart.js","Rebalance/Rebalance.js","utilities/components/DateRangeModal.js","Stats/Stats.js","Utils/Utils.js","FundsOverview/FundsOverview.js","CurveRedeem/CurveRedeem.js","TwitterShareButton/TwitterShareButton.js","utilities/components/ShareModal.js","DepositRedeem/DepositRedeem.js","EstimatedEarnings/EstimatedEarnings.js","AssetPage/AssetPage.js","utilities/components/Swipeable.js","utilities/components/BetaModal.js","CurveDeposit/CurveDeposit.js","PortfolioEquityCurve/PortfolioEquityCurve.js","FundsOverviewCurve/FundsOverviewCurve.js","CurveStrategy/CurveStrategy.js","utilities/components/WelcomeModal.js","utilities/components/MigrateModal.js","utilities/components/UpgradeModal.js","Dashboard/Dashboard.js"],"names":["AssetsUnderManagement","state","totalAUM","totalAUMEndOfYear","functionsUtil","this","setProps","props","FunctionsUtil","loadUtils","loadTotalAUM","prevProps","prevState","contractsInitialized","availableStrategies","JSON","stringify","getAggregatedStats","avgAPY","plus","times","div","setState","_this2","react__WEBPACK_IMPORTED_MODULE_9___default","a","createElement","rimble_ui__WEBPACK_IMPORTED_MODULE_10__","width","react_countup__WEBPACK_IMPORTED_MODULE_8___default","delay","decimals","decimal","separator","useEasing","duration","start","parseFloat","end","formattingFn","n","formatMoney","_ref2","countUpRef","style","counterStyle","display","color","whiteSpace","fontFamily","theme","fonts","counter","fontWeight","fontWeights","textAlign","isMobile","fontSize","fontSizes","ref","subtitle","_Title_Title__WEBPACK_IMPORTED_MODULE_7__","Object","assign","subtitleProps","span","alignItems","justifyContent","loaderAlign","size","Component","module","exports","twitterIcon","StatsChart","chartProps","chartType","chartData","chartWidth","parseAum","value","parseInt","toFixed","_this","selectedToken","loadApiData","_callee3","maxGridLines","apiResults","apiResults_unfiltered","totalItems","protocols","versionInfo","keys","tempData","gridYStep","itemIndex","daysCount","gridYValues","maxChartValue","axisBottomIndex","daysFrequency","idleChartData","firstIdleBlock","axisBottomMaxValues","divergingData","startTimestamp","endTimestamp","timestamp","date","lastRow","maxRange","i","_i","dates","_i2","_i3","chartValues","prevValue","_i4","prevApr","prevData","avgApy","startBalance","currentBalance","aaveProtocolInfo","_i5","firstTokenPrice","_i6","regenerator_default","wrap","_context3","prev","next","tokenConfig","chartMode","abrupt","length","globalConfigs","stats","versions","idleVersion","Line","t0","moment","_d","getTime","format","deposits","redeems","forEach","row","idleTokens","fixTokenDecimals","idleSupply","idleTokensPrev","eq","diff","minus","gte","Math","max","abs","values","filter","v","sort","b","Bar","push","ceil","indexBy","enableLabel","minValue","maxValue","label","d","axisBottom","tickSize","legend","tickPadding","orient","legendOffset","tickValues","legendPosition","axisLeft","axisRight","tickRotation","abbreviateNumber","markers","axis","lineStyle","strokeOpacity","textStyle","fill","colors","transactions","action","deposit","legendOrientation","legendOffsetX","stroke","strokeDasharray","redeem","padding","labelTextColor","labelSkipWidth","labelSkipHeight","pointSize","useMesh","animate","pointLabel","curve","enableArea","enableSlices","enableGridX","enableGridY","pointBorderWidth","pointLabelYOffset","legends","dataFrom","itemWidth","itemHeight","translateX","translateY","symbolSize","itemsSpacing","direction","anchor","symbolShape","itemTextColor","effects","on","themeMode","ticks","text","sansSerif","grid","line","lineChartStroke","textTransform","tooltip","container","boxShadow","background","pointColor","from","modifiers","margin","top","right","bottom","left","data","xFormatted","strToMoment","point","id","depositFormatted","redeemFormatted","react_default","CustomTooltip","CustomTooltipRow","tokens","hsl","join","map","idlePrice","aum","x","y","toString","p","j","protocolsData","protocolAllocation","protocolAddr","toLowerCase","address","z","BNify","rate","allocation","foundItem","item","pos","indexOf","allocations","name","undefined","xScale","type","xFormat","yFormat","yScale","stacked","sliceTooltip","slideData","slice","points","serieId","serieColor","yFormatted","protocolName","protocolInfo","protocolColor","protocolAllocationFormatted","protocolAllocationPerc","key","concat","protocolData","protocolPaused","foundProtocol","find","tableCell","_ref3","DashboardCard","cardProps","py","px","borderCollapse","height","totalAllocation","reduce","accumulator","allocationPerc","_ref4","_ref5","additionalProtocols","additionalProtocol","protocol","enabledTokens","includes","enabled","unshift","objectSpread","rateField","protocolRate","acc","field","lt","aaveAdditionalAPR","gt","idle","idleRate","isBefore","protocolEarning","defiScore","isNaN","idleScore","apy","isSameOrBefore","aaveProtocolData","pData","apr","days","earnings","earning","daysSinceBeginning","blocknumber","itemPos","floor","tokensProps","tokenProps","isAfter","Date","now","chartRow","baseProfit","firstProtocolData","firstProtocolBlock","rowData","idlePerformance","d1","protocolApy","tokenPrice","asyncForEach","_ref6","asyncToGenerator","mark","_callee2","lastRowData","lastTokenPrice","_context2","_ref7","_callee","tokenExchangeRate","tokenPriceFixed","lastYDiff","_context","price","stop","_x2","apply","arguments","_x","showAdvanced","showAdvancedChanged","apiResultsChanged","tokenChanged","componentDidMount","GenericChart","showLoader","parentId","parentIdHeight","Rebalance","loading","processing","rebalance","txHash","shouldRebalance","componentUnmounted","checkRebalance","setStateSafe","sent","e","callback","callback_receipt","preventDefault","tx","error","eventData","eventLabel","status","eventCategory","eventAction","getTransactionError","sendGoogleAnalyticsEvent","window","toastProvider","addMessage","secondaryMessage","colorTheme","actionHref","actionText","variant","transactionHash","contractMethodSendWrapper","token","accountChanged","account","newState","index_es","minHeight","flexDirection","FlexLoader","flexProps","loaderProps","textProps","ml","TxProgressBar","waitText","endMessage","hash","mt","mb","RoundButton","buttonProps","disabled","handleClick","DateRangeModal","quickSelection","ranges","startDate","endDate","options","quickSelections","componentDidUpdate","selection","target","quickSelectionParams","clone","subtract","closeModal","handleSelect","startTimestampObj","endTimestampObj","_this3","isOpen","ModalCard","closeFunc","Header","title","Body","backgroundColor","cardBg","required","onChange","handleQuickSelect","bind","dist","minDate","maxDate","className","Footer","my","mx","borderRadius","mainColor","onClick","React","Stats","delta","carouselMax","rebalances","buttonGroups","carouselIndex","statsVersions","minStartTime","govTokensPool","unlentBalance","carouselOffsetLeft","showRefreshIdleSpeed","dateRangeModalOpened","day","week","weeks","month","ytd","setDateRange","isSameOrAfter","isSame","add","maxEndDate","toggleAdvancedCharts","setDateRangeModal","filterTokenData","r","setIdleVersion","isRisk","firstResult","lastResult","firstIdlePrice","lastIdlePrice","compoundInfo","firstCompoundData","lastCompoundData","compoundWithCOMPInfo","compoundAvgApr","firstCompoundPrice","lastCompoundPrice","compoundApr","availableTokens","selectedStrategy","getTokenApiData","pop","convertTokenBalance","sum","compoundWithCOMP","compoundData","compoundRate","index","prevRow","prevTotalAllocation","hasRebalanced","prevP","prevAllocation","getGovTokenPool","getUnlentBalance","selectToken","strategy","setStrategyToken","changeToken","handleCarousel","$element","jQuery","position","loadParams","latestVersion","version","enabledStrategies","strategiesParams","versionInfoExtra","param","params","match","currentNetworkAvailableTokens","customToken","toUpperCase","getLatestAvailableVersion","getVersionInfo","newEndTimestampObj","newStartTimestampObj","web3","initWeb3","loadCarousel","strategyChanged","dateChanged","versionChanged","idleTokenEnabled","getGlobalConfig","apyLong","textSize","statsTokens","versionsOptions","disabledCharts","performanceTooltip","versionDefaultValue","Breadcrumb","showPathMobile","goToSection","path","GenericSelector","innerProps","defaultValue","AssetSelector","isInteractive","pr","StatsCard","labelTooltip","SmartNumber","precision","lineHeight","unitProps","number","unit","VariationNumber","iconPos","iconSize","description","Stats_StatsChart","contracts","pb","pt","AllocationChart","src_Rebalance_Rebalance","pl","h4","RoundIconButton","mr","iconName","transition","titleParentProps","utilities_components_DateRangeModal","strategies","statsProtocols","strategyInfo","availableProtocolsKeys","availableProtocols","Title","titlePostfix","AssetsList","cols","fields","mobile","parentProps","overflow","desc","showTooltip","rgb","hoverColor","isActive","ExecuteTransaction","Button","componentProps","contractName","methodName","completed","Utils","SubComponent","selectedSubsection","subComponent","viewOnly","connectorName","showBreadCrumb","selectedSection","route","dangerouslySetInnerHTML","__html","directProps","toolProps","flexWrap","IconBox","maxWidth","icon","submenu","tool","toolIndex","flex","image","src","FundsOverview","aggregatedValues","govTokensTotalApr","govTokensUserBalance","govTokensDistribution","govTokensTotalBalance","govTokensTotalAprTooltip","idleTokenUserDistribution","govTokensDistributionTooltip","govTokensTotalBalanceTooltip","idleGovToken","getIdleGovToken","govTokenAvailableTokens","Promise","all","getUserDistribution","getGovTokensUserBalances","loadAssetField","depositTimestamp","getAvgAPYStats","lte","totBalance","govTokenBalance","govToken","balance","children","AssetField","fieldInfo","placement","message","PortfolioEquity","chartHeight","chartToken","frequencySeconds","getFrequencySeconds","component","Heading","h3","maxPrecision","govTokenIndex","tokenName","distributionFrequency","CurveRedeem","inputValue","maxSlippage","unevenAmounts","buttonDisabled","showMaxSlippage","redeemUnderlying","curveTokenConfig","curvePoolContract","curveSwapContract","curveTokenBalance","curveTokensAmounts","fastBalanceSelector","redeemUnevenAmounts","curveRedeemableIdleTokens","toggleUnevenAmounts","checkButtonDisabled","amount","changeInputValue","setFastBalanceSelector","setMaxSlippage","initToken","max_slippage","normalizedAmount","normalizeTokenAmount","withdrawSlippage","curveIdleTokensAmounts","getCurveTokensAmounts","getCurveIdleTokensAmounts","getCurveSlippage","getCurveTokenPrice","curveTokenPrice","redeemableBalance","redeemUnevenAmountsChanged","setInputValue","inputChanged","maxSlippageChanged","tokenConfigChanged","calculateSlippage","loadSelectedTokenConfig","selectedPercentage","curveConfig","getCurvePoolContract","getCurveSwapContract","getCurveTokenBalance","getCurveRedeemableIdleTokens","getCurveAvailableTokens","callbackRedeem","txSucceeded","eventValue","callbackReceiptRedeem","_amount","min_amounts","console","log","coin_index","migrationParams","coinIndex","min_amount","showSlippage","curveTokenName","cancelTransaction","checked","showBalance","selectDestinationToken","slippage","FastBalanceSelector","percentage","onMouseDown","failed","textOverflow","min","placeholder","border","divider","TwitterShareButton","share","parent","w","innerWidth","open","tweet","contrastColor","styles","ShareModal","getGlobalConfigs","analytics","google","events","escape","customText","confettiEnabled","react_confetti_default","zIndex","run","recycle","innerHeight","src_TwitterShareButton_TwitterShareButton","DepositRedeem","txError","tokenAPY","curveAPY","canRedeem","canDeposit","directMint","activeModal","tokenGovTokens","showBuyFlow","maxUnlentPerc","tokenApproved","skipMigration","redeemSkipGov","showRedeemFlow","contractPaused","canRedeemCurve","erc20ForwarderTx","signedParameters","minAmountForMint","redeemGovTokens","canDepositCurve","redeemSkipGovTokens","actionProxyContract","migrationEnabled","componentMounted","agreeSkipGovTokens","redeemCurveEnabled","depositCurveBalance","depositCurveEnabled","showAdvancedOptions","skipGovTokensGasSave","depositCurveSlippage","erc20ForwarderContract","erc20ForwarderEnabled","showETHWrapperEnabled","skipGovTokensGasSaveUSD","metaTransactionsEnabled","skippedGovTokensBalance","minAmountForMintReached","loadingErc20ForwarderTx","setShowRedeemFlow","setShowBuyFlow","toggleShowAdvancedOptions","toggleSkipMigration","toggleRedeemCurve","toggleDepositCurve","toggleShowETHWrapper","toggleAgreeSkipGovTokens","toggleSkipMint","toggleRedeemGovTokens","toggleRedeemSkipGov","getSkippedGovTokensFlags","govTokensIndexes","govTokensFlags","getGovTokensIndexes","calculateSkippedGovTokens","DAITokenConfig","_skipGovTokenRedeem","WETHTokenConfig","wethPrice","redeemGasUsage","skipGovRedeemGasUsage","govTokenConfig","govTokenPrice","skippedAmount","getUniswapConversionRate","govTokensUserBalances","estimateMethodGasUsage","idleTokenBalance","slicedToArray","setRedeemSkipGovTokens","splice","toggleErc20ForwarderEnabled","toggleMetaTransactionsEnabled","resetModal","setActiveModal","checkUseProxyContract","proxyContract","depositErc20ForwarderEnabled","depositMetaTransactionsEnabled","biconomy","approveContract","_callee4","callbackApprove","callbackReceiptApprove","curveDepositContract","_context4","enableERC20","checkTokenApproved","_callee5","_context5","approveToken","_callee6","_context6","approve","loadTokenInfo","_callee7","curveTokenEnabled","_ref10","_ref11","_context7","checkContractPaused","getCurveDepositContract","checkMigration","tokenBalance","getTokenGovTokens","boost","checkAction","loadAPY","_callee8","_context8","defineProperty","executeAction","_callee11","contractSendResult","callbackDeposit","callbackReceiptDeposit","curvePoolContractInfo","tokensToDeposit","amounts","minMintAmount","depositParams","_tokensToDeposit","_depositParams","mintProxyContractInfo","mintProxyContract","_mintProxyContract$me","functionCall","functionSignature","methodAbi","useNonce","_referral","txData","idleTokenToRedeem","idleTokenPriceWithFee","_callbackRedeem","_callbackReceiptRedeem","redeemMethod","redeemParams","_context11","getFastBalanceSelector","localStorage","setLocalStorage","lendingProcessing","lendAmount","genericError","getCurveAmounts","getCurveTokenAmount","integerValue","contract","methods","function","toConsumableArray","encodeABI","sendBiconomyTxWithPersonalSign","_jsonInterface","f","inputs","_callee10","metaInfo","permitOptions","erc20ForwarderBaseContract","permitValue","permitConfig","setValue","expiry","nonce","s","_context10","signPermit","t","allowed","holder","spender","permitData","permitType","asyncTimeout","sendBiconomyTxWithErc20Forwarder","request","_callee9","_erc20ForwarderContra","_functionCall","_functionSignature","gasLimit","_context9","estimateGas","buildBiconomyErc20ForwarderTx","getReferralAddress","getIdleTokenPriceWithFee","_callee12","_context12","setAction","loadProxyContracts","actions","_ref17","_callee15","erc20ForwarderContractInfo","hasProxyContract","_context15","initContract","abi","approved","_x5","getTokenAprs","tokenAprs","getCurveAPY","getQueryStringParameterByName","checkAddress","erc20ForwarderEnabledChanged","tokenBalanceChanged","actionChanged","fastBalanceSelectorChanged","redeemSkipGovChanged","redeemGovTokensChanged","agreeSkipGovTokensChanged","redeemSkipGovTokensChanged","depositCurveChanged","calculateCurveSlippage","showPoolPerc","convertedAmount","genericContractCall","depositPerc","maxUnlentPercFormatted","govTokensEnabled","govTokensDisabled","skipMintForDepositEnabled","skipMintForDeposit","redeemGovTokenEnabled","redeemSkipGovConfig","redeemSkipGovEnabled","disabledTokens","govTokensBalance","redeemSkipGovNoTokens","showAdvancedRedeemOptions","depositErc20ForwarderEnabledTokens","metaTransactionsAvailable","useMetaTx","erc20ForwarderClient","totalBalance","migrateText","migration","depositCurve","showDepositCurve","showRedeemCurve","showCurveSlippage","showAdvancedDepositOptions","batchDepositInfo","batchDepositEnabled","batchDepositDepositEnabled","depositEnabled","showBatchDeposit","isMigrationTool","ethWrapperInfo","ETHWrapperComponent","showETHWrapper","canPerformAction","showActionFlow","showReferral","Migrate","migrateTextBefore","TransactionField","transaction","isDisabled","openTooltipModal","isRainbow","cursor","m","CardIconButton","imageProps","ExtLink","href","getWalletProvider","capitalize","primary","fullWidth","cost","align","tokenFeesPercentage","borderColor","minWidth","ConnectBox","src_CurveRedeem_CurveRedeem","BuyModal","showInline","availableMethods","buyToken","components_ShareModal","EstimatedEarnings","maxInputValue","loadChart","getTokenApy","earningsYear","tokenApy","amountMonth","amount3Months","amount6Months","amountYear","perc","monthColor","month3","month3Color","month6","month6Color","year","yearColor","labelTextColorModifiers","gridYValue","_ref","labels","showAPYDisclaimer","verticalAlign","AssetPage","tokenFees","idleTokenPrice","availableGovTokens","getTokenFees","getIdleTokenPrice","getTokenBalance","getUserTokenFees","getGovTokensUserTotalBalance","loadTokensInfo","selectedTokenChanged","availableTokensChanged","transactionsChanged","nexusMutualConfig","userHasFunds","src_DepositRedeem_DepositRedeem","ActiveCoverages","titleProps","src_FundsOverview_FundsOverview","src_EstimatedEarnings_EstimatedEarnings","TransactionsList","Swipeable","handlers","useSwipeable","onSwiped","preventDefaultTouchmoveEvent","trackTouch","trackMouse","rotationAngle","touchAction","BetaModal","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","iconHeight","CurveDeposit","depositSlippage","migrationContract","curveTokensBalance","migrationSucceeded","migrationContractApproved","checkMigrationContractApproved","getMigrationParams","approveCallback","migrationCallback","idleTokenBalanceChanged","toMigrate","n_coins","underlyingBalanceToDeposit","normalizeIdleTokenBalance","hasCurveTokens","PortfolioEquityCurve","chartwidth","loadChartData","quickDateSelectionChanged","quickDateSelection","getCurveTxs","curveTxs","tokensBalance","processedTxs","firstTxTimestamp","timeStamp","curveTokens","currentDate","prevBalances","prevTimestamp","minChartValue","aggregatedBalancesKeys","tokensBalancesPerDate","aggregatedBalance","currTimestamp","tokensData","foundBalances","tokensBalances","momentDate","filteredTokenData","filteredBalances","lastFilteredTx","lastTokenData","lastTx","lastTxBalance","formattedDate","aggregatedBalanceParsed","aggregatedBalances","balances","yFormatDecimals","areaOpacity","areaBaselineValue","ChartCustomTooltip","ChartCustomTooltipRow","tokenInfo","hex","formattedBalance","FundsOverviewCurve","compAPR","getCurveAvgBuyPrice","getCurveAvgSlippage","src_PortfolioEquityCurve_PortfolioEquityCurve","redeemBalance","depositBalance","curveZapContract","curveAvailableTokens","changeFromToken","setSelectedToken","baseToken","getSelectedToken","urlParams","param1","getCurveZapContract","updateAssetSelector","curveTokensToRedeem","src_CurveDeposit_CurveDeposit","src_FundsOverviewCurve_FundsOverviewCurve","enabledActions","WelcomeModal","email","subscribed","sendingForm","sendUserInfo","sendEmail","walletProvider","userInfo","provider","simpleIDPassUserInfo","setTimeout","err","handleSubmit","assertThisInitialized","handleValidation","axios","post","newsletterSubscription","endpoint","then","catch","walletAddress","lastLogin","getItem","parse","signedUp","parentNode","classList","onSubmit","green","Field","Input","outline","header_styles","input","ButtonLoader","buttonText","isLoading","gradientButton","MigrateModal","dontShowAgain","toggleDontShowAgain","removeStoredItem","migrate","tokenMigrationRoute","fieldProps","protocolsTokensBalances","minPrecision","UpgradeModal","_args3","convert","convertTool","tokensToMigrate","tokenKey","oldContractBalanceFormatted","oldIdleTokensToMigrate","newTokenConfig","Dashboard","menu","baseRoute","clickEvent","menuOpened","currentRoute","pageComponent","currentSection","showResetButton","pageComponentProps","timeoutId","modalTitle","modalContent","logout","setConnector","comingSoon","selected","bgColor","visible","imageInactive","iconInactive","imageInactiveDark","iconInactiveDark","curveParams","CurveStrategy","stakeConfig","u","isExternalLink","section","param2","section_is_strategy","param1_is_strategy","param1_is_token","param2_is_token","sectionRoute","subm","sendGoogleAnalyticsPageview","clearTimeout","setCurrentSection","loadMenu","accountInizialized","initAccount","initializeContracts","checkModals","prevParams","checkBetaApproval","checkTokensToMigrate","checkWelcomeModal","checkProtocolsTokensBalances","isOriginUrl","checkUrlOrigin","isBetaApproved","getStoredItem","showUpgradeModal","getTokensToMigrate","getProtocolsTokensBalances","welcomeIsOpen","welcomeModalProps","currTime","lastTime","frequency","migrateModalEnabled","showMigrateModal","isDashboard","replace","newRoute","location","scrollTo","routeParts","setMenu","dir","_this4","PageComponent","swipeCallback","menuRightBorder","borderRight","DashboardMenu","closeMenu","overflowY","overflowX","DashboardHeader","toggleMenu","network","isCorrectNetwork","current","components_BetaModal","components_UpgradeModal","components_MigrateModal","TooltipModal","content","components_WelcomeModal","simpleID","initSimpleID","baseTokenName"],"mappings":"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","file":"static/js/3.1ef5cf91.chunk.js","sourcesContent":["import Title from '../Title/Title';\nimport CountUp from 'react-countup';\nimport React, { Component } from 'react';\nimport { Box, Flex, Text, Loader } from \"rimble-ui\";\nimport FunctionsUtil from '../utilities/FunctionsUtil';\n\nclass AssetsUnderManagement extends Component {\n\n  state = {\n    totalAUM:null,\n    totalAUMEndOfYear:null\n  }\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.loadTotalAUM();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const availableStrategiesChanged = !prevProps.availableStrategies && JSON.stringify(prevProps.availableStrategies) !== JSON.stringify(this.props.availableStrategies);\n    if (availableStrategiesChanged || contractsInitialized){\n      this.loadTotalAUM();\n    }\n  }\n\n  async loadTotalAUM(){\n\n    if (!this.props.availableStrategies || !this.props.contractsInitialized){\n      return true;\n    }\n\n    const {\n      avgAPY,\n      totalAUM\n    } = await this.functionsUtil.getAggregatedStats();\n\n    const totalAUMEndOfYear = totalAUM.plus(totalAUM.times(avgAPY.div(100)));\n\n    this.setState({\n      totalAUM,\n      totalAUMEndOfYear\n    });\n  }\n\n  render() {\n    return this.state.totalAUM ? (\n      <Box\n        width={1}\n      >\n        <CountUp\n          delay={0}\n          decimals={4}\n          decimal={'.'}\n          separator={''}\n          useEasing={false}\n          duration={31536000}\n          start={parseFloat(this.state.totalAUM)}\n          end={parseFloat(this.state.totalAUMEndOfYear)}\n          formattingFn={ n => '$ '+this.functionsUtil.formatMoney(n,4) }\n        >\n          {({ countUpRef, start }) => (\n            <span\n              style={ this.props.counterStyle ? this.props.counterStyle : {\n                display:'block',\n                color:'dark-gray',\n                whiteSpace:'nowrap',\n                fontFamily:this.props.theme.fonts.counter,\n                fontWeight:this.props.theme.fontWeights[5],\n                textAlign: this.props.isMobile ? 'center' : 'right',\n                fontSize: this.props.isMobile ? '1.6em' : this.props.theme.fontSizes[6]\n              }}\n              ref={countUpRef}\n            />\n          )}\n        </CountUp>\n        {\n          (typeof this.props.subtitle === 'undefined' || this.props.subtitle) && (\n            <Title\n              fontWeight={3}\n              fontSize={[2,2]}\n              color={'cellTitle'}\n              textAlign={['center','right']}\n              {...this.props.subtitleProps}\n            >\n              {\n                this.props.subtitle ? this.props.subtitle : (\n                  <Text.span fontWeight={'inherit'} color={'inherit'} fontSize={'inherit'}>Assets Under Management <Text.span color={'cellTitle'} fontWeight={3} fontSize={'70%'}>(V3 + V4)</Text.span></Text.span>\n                )\n              }\n            </Title>\n          )\n        }\n      </Box>\n    ) : (\n      <Flex\n        alignItems={'center'}\n        justifyContent={this.props.loaderAlign || 'center'}\n      >\n        <Loader\n          size={\"30px\"}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default AssetsUnderManagement;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"twitterIcon\":\"TwitterShareButton_twitterIcon__2QCmn\"};","import moment from 'moment';\nimport { Bar } from '@nivo/bar';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CustomTooltip from '../CustomTooltip/CustomTooltip';\nimport CustomTooltipRow from '../CustomTooltip/CustomTooltipRow';\n\nclass StatsChart extends Component {\n  state = {\n    chartProps:{},\n    chartType:null,\n    chartData:null,\n    chartWidth:null\n  };\n\n  async componentDidMount() {\n    this.setState({\n      chartData:null,\n      chartType:null,\n      chartProps:null,\n    });\n    this.loadUtils();\n    this.loadApiData();\n  }\n\n  async componentDidUpdate(prevProps) {\n    const showAdvancedChanged = prevProps.showAdvanced !== this.props.showAdvanced;\n    const apiResultsChanged = prevProps.apiResults !== this.props.apiResults;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    if (apiResultsChanged || showAdvancedChanged || tokenChanged){\n      this.componentDidMount();\n    }\n  }\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  parseAum = value => {\n    return (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.tokenConfig || !this.props.selectedToken || !this.props.chartMode || !this.props.apiResults){\n      return false;\n    }\n\n    const maxGridLines = 4;\n    const apiResults = this.props.apiResults;\n    const apiResults_unfiltered = this.props.apiResults_unfiltered;\n    const totalItems = apiResults.length;\n    const protocols = Object.assign([],this.props.tokenConfig.protocols);\n    // const compoundProtocol = this.props.tokenConfig.protocols.find( p => (p.name === 'compound'));\n\n    const versionInfo = globalConfigs.stats.versions[this.props.idleVersion];\n\n    let keys = {};\n    let tempData = {};\n    let gridYStep = 0;\n    let itemIndex = 0;\n    let daysCount = 0;\n    let chartData = [];\n    let chartProps = {};\n    let chartType = Line;\n    let gridYValues = [];\n    let maxChartValue = 0;\n    let axisBottomIndex = 0;\n    let daysFrequency = null;\n    let idleChartData = null;\n    let firstIdleBlock = null;\n    let axisBottomMaxValues = 12;\n\n    switch (this.props.chartMode){\n      case 'VOL':\n        let divergingData = {};\n\n        const startTimestamp = parseInt(apiResults_unfiltered[0].timestamp);\n        const endTimestamp = parseInt(moment()._d.getTime()/1000);\n\n        for (let timestamp=startTimestamp;timestamp<=endTimestamp;timestamp+=86400){\n          const date = moment(timestamp*1000).format(\"YYYY/MM/DD\");\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n        }\n\n        let lastRow = null;\n        apiResults_unfiltered.forEach(row => {\n          const date = moment(row.timestamp*1000).format(\"YYYY/MM/DD\");\n          const idleTokens = this.functionsUtil.fixTokenDecimals(row.idleSupply,18);\n\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp:row.timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n\n          if (lastRow){\n            const idleTokensPrev = this.functionsUtil.fixTokenDecimals(lastRow.idleSupply,18);\n            const idleTokensDiff = !idleTokens.eq(idleTokensPrev);\n            if (idleTokensDiff){\n              const diff = idleTokens.minus(idleTokensPrev);\n              // Deposits\n              if (diff.gte(0)){\n                divergingData[date].deposits+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,divergingData[date].deposits);\n              } else {\n                divergingData[date].redeems+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,Math.abs(divergingData[date].deposits));\n              }\n            }\n\n          } else {\n            divergingData[date].deposits+=parseFloat(idleTokens);\n          }\n\n          lastRow = row;\n        });\n\n        chartData = Object.values(divergingData).filter(v => {\n          return (!this.props.startTimestamp || v.timestamp>=this.props.startTimestamp) && (!this.props.endTimestamp || v.timestamp<=this.props.endTimestamp);\n        }).sort((a,b) => (a.timestamp < b.timestamp ? -1 : 1));\n\n        let maxRange = 0;\n        chartData.forEach(v => {\n          maxRange = Math.max(maxRange,Math.abs(v.deposits),Math.abs(v.redeems));\n        });\n\n        chartType = Bar;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 6;\n        daysCount = moment(chartData[chartData.length-1].date,\"YYYY/MM/DD\").diff(moment(chartData[0].date,\"YYYY/MM/DD\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          indexBy: 'date',\n          enableLabel: false,\n          minValue:-maxRange,\n          maxValue:maxRange,\n          label: d => {\n            return Math.abs(d.value);\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            legend: '',\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            tickValues: 'every day',\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD').format('MMM DD')\n              }\n            },\n            legendPosition: 'middle',\n          },\n          axisLeft: null,\n          axisRight: {\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:8,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(Math.abs(v),0)\n          },\n          markers: [\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { strokeOpacity: 0 },\n              textStyle: { fill: this.props.theme.colors.transactions.action.deposit },\n              legend: 'deposits',\n              legendPosition: 'top-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { stroke: this.props.theme.colors['dark-gray'], strokeDasharray: '5 3' },\n              textStyle: { fill: this.props.theme.colors.transactions.action.redeem },\n              legend: 'redeems',\n              legendPosition: 'bottom-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n          ],\n          keys:['deposits','redeems'],\n          padding:0.4,\n          colors:[this.props.theme.colors.transactions.action.deposit, this.props.theme.colors.transactions.action.redeem],\n          labelTextColor: 'inherit:darker(1.4)',\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 80 : 100,\n              itemHeight: 18,\n              translateX: 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            },\n            tooltip:{\n              container:{\n                boxShadow:null,\n                background:null\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 50, bottom: 45, left: 50 } : { top: 20, right: 70, bottom: 70, left: 50 },\n          tooltip:(data) => {\n            const xFormatted = this.functionsUtil.strToMoment(data.data.timestamp*1000).format('MMM DD HH:ss');\n            const point = {\n              id:data.id,\n              data:{\n                xFormatted\n              }\n            };\n            const depositFormatted = this.functionsUtil.abbreviateNumber(data.data.deposits,2)+' '+this.props.selectedToken;\n            const redeemFormatted = this.functionsUtil.abbreviateNumber(data.data.redeems,2)+' '+this.props.selectedToken;\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                <CustomTooltipRow\n                  label={'Deposits'}\n                  color={this.props.theme.colors.deposit}\n                  value={depositFormatted}\n                />\n                <CustomTooltipRow\n                  label={'Redeem'}\n                  color={this.props.theme.colors.redeem}\n                  value={redeemFormatted}\n                />\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      /*\n      case 'AUM_ALL':\n        await this.functionsUtil.asyncForEach(Object.keys(availableTokens[globalConfigs.network.requiredNetwork]),async (tokenName,i) => {\n          const tokenConfig = availableTokens[globalConfigs.network.requiredNetwork][tokenName];\n          const tokenDataApi = await this.props.getTokenData(tokenConfig.address);\n          chartData.push({\n            id:tokenName,\n            color: tokenConfig.color,\n            data: tokenDataApi.map((d,i) => {\n              const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n              const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,tokenConfig.decimals);\n              const aum = idleTokens.times(idlePrice);\n              return {\n                x: moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\"),\n                y: parseInt(aum.toString())\n              };\n            })\n          });\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken,\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v),\n            orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            legendPosition: 'middle'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            format: '%b %d',\n            tickValues: this.props.isMobile ? 'every 4 days' : 'every 3 days',\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 36,\n            legendPosition: 'middle'\n          },\n          enableArea:false,\n          curve:\"linear\",\n          enableSlices:'x',\n          enableGridX:true,\n          enableGridY:false,\n          colors:d => d.color,\n          pointSize:0,\n          pointColor:{ from: 'color', modifiers: []},\n          pointBorderWidth:1,\n          pointLabel:\"y\",\n          pointLabelYOffset:-12,\n          useMesh:true,\n          animate:false,\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 60, bottom: 40, left: 60 },\n        };\n      break;\n      */\n      case 'AUM':\n\n        maxChartValue = 0;\n\n        chartData.push({\n          id:'AUM',\n          color: 'hsl('+globalConfigs.stats.tokens[this.props.selectedToken].color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n            const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n            const aum = idleTokens.times(idlePrice);\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(aum.toString());\n\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x,y };\n          })\n        });\n\n        // Add allocation\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          apiResults.map((d,i) => {\n            return d.protocolsData.filter((protocolAllocation,x) => {\n                return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            })\n            .map((protocolAllocation,z) => {\n              const protocolPaused = this.functionsUtil.BNify(protocolAllocation.rate).eq(0);\n              if (!protocolPaused){\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals));\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                let foundItem = chartData[0].data.filter(item => { return item.x === x });\n                if (foundItem){\n                  foundItem = foundItem[0];\n                  const pos = chartData[0].data.indexOf(foundItem);\n                  if (!foundItem.allocations){\n                    foundItem.allocations = {};\n                  }\n                  foundItem.allocations[p.name] = y;\n                  chartData[0].data[pos] = foundItem;\n                }\n              }\n              return undefined;\n            })[0]\n          }).filter((v) => { return v !== undefined; } )\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 6;\n        daysCount = moment(chartData[0].data[chartData[0].data.length-1].x,\"YYYY/MM/DD HH:mm\").diff(moment(chartData[0].data[0].x,\"YYYY/MM/DD HH:mm\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:v => this.functionsUtil.formatMoney(v,v<1 ? 3 :0),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            tickValues: 'every day',\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:true,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            if (typeof point === 'object' && typeof point.data === 'object'){\n              return (\n                <CustomTooltip\n                  point={point}\n                >\n                  <CustomTooltipRow\n                    label={point.serieId}\n                    color={point.serieColor}\n                    value={point.data.yFormatted}\n                  />\n                  {\n                    point.data.allocations && typeof point.data.allocations === 'object' &&\n                      Object.keys(point.data.allocations).map(protocolName => {\n                        const protocolInfo = globalConfigs.stats.protocols[protocolName];\n                        const protocolColor = 'hsl('+protocolInfo.color.hsl.join(',')+')';\n                        const protocolAllocation = point.data.allocations[protocolName];\n                        const protocolAllocationFormatted = this.functionsUtil.formatMoney(protocolAllocation,protocolAllocation<1 ? 3 : 0);\n                        const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                        return (\n                          <CustomTooltipRow\n                            color={protocolColor}\n                            label={protocolInfo.label}\n                            key={`${point.id}_${protocolName}`}\n                            value={`${protocolAllocationFormatted} (${protocolAllocationPerc})`}\n                          />\n                        );\n                      })\n                  }\n                </CustomTooltip>\n              );\n              /*\n              return (\n                <div\n                    key={point.id}\n                    style={{\n                      background: 'white',\n                      color: 'inherit',\n                      fontSize: 'inherit',\n                      borderRadius: '2px',\n                      boxShadow: 'rgba(0, 0, 0, 0.25) 0px 1px 2px',\n                      padding: '5px 9px'\n                    }}\n                >\n                  <div>\n                    <table style={{width:'100%',borderCollapse:'collapse'}}>\n                      <tbody>\n                        <tr>\n                          <td style={{padding:'3px 5px'}}>\n                            <span style={{display:'block', width: '12px', height: '12px', background: point.serieColor}}></span>\n                          </td>\n                          <td style={{padding:'3px 5px'}}>{point.serieId}</td>\n                          <td style={{padding:'3px 5px'}}><strong>{point.data.yFormatted}</strong></td>\n                        </tr>\n                        {\n                          point.data.allocations && typeof point.data.allocations === 'object' &&\n                            Object.keys(point.data.allocations).map(protocolName => {\n                              const protocolColor = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n                              const protocolAllocation = this.functionsUtil.formatMoney(point.data.allocations[protocolName],0);\n                              const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                              return (\n                                <tr key={`${point.id}_${protocolName}`}>\n                                  <td style={{padding:'3px 5px'}}>\n                                    <span style={{display:'block', width: '12px', height: '12px', background: protocolColor}}></span>\n                                  </td>\n                                  <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{protocolName}</td>\n                                  <td style={{padding:'3px 5px'}}><strong>{protocolAllocation}</strong> ({protocolAllocationPerc})</td>\n                                </tr>\n                              );\n                            })\n                        }\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              );\n              */\n            }\n\n            return null;\n          }\n        };\n      break;\n      case 'ALL':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\");\n\n          let row = {\n            date\n          };\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const foundProtocol = this.props.tokenConfig.protocols.find((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() });\n            if (foundProtocol){\n              const protocolInfo = globalConfigs.stats.protocols[foundProtocol.name];\n              if (!protocolPaused){\n                let allocation = parseFloat(this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals));\n                keys[protocolInfo.label] = 1;\n                row[protocolInfo.label] = allocation;\n                row[`${protocolInfo.label}Color`] = 'hsl('+protocolInfo.color.hsl.join(',')+')';\n                // console.log(protocolInfo.label,this.functionsUtil.BNify(protocolData.allocation).toString(),this.props.tokenConfig.decimals,allocation);\n                maxChartValue = Math.max(maxChartValue,allocation);\n              } else {\n                row[protocolInfo.label] = 0;\n              }\n            }\n          });\n\n\n          tempData[date] = row;\n        });\n\n        const dates = Object.keys(tempData);\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 12;\n        daysCount = moment(dates[dates.length-1],\"YYYY/MM/DD\").diff(moment(dates[0],\"YYYY/MM/DD\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n            orient: 'left',\n            tickSize: 0,\n            tickPadding: 10,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            tickValues:gridYValues,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickSize: 0,\n            tickPadding: 10,\n            legendOffset: 36,\n            orient: 'bottom-left',\n            tickValues: 'every day',\n            legendPosition: 'middle'\n          },\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            tooltip: {\n              container:{\n                padding:'0',\n                boxShadow:'none',\n                background:'transparent',\n              },\n              tableCell:{\n                padding:'0'\n              }\n            },\n            axis: {\n              ticks: {\n                text: {\n                  fontSize:this.props.isMobile ? 12 : 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize:this.props.isMobile ? 12 : 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 60 },\n          tooltip:({ id, value, color }) => {\n            const allocation = this.functionsUtil.formatMoney(value,0);\n            return (\n              <DashboardCard\n                cardProps={{\n                  py:1,\n                  px:2,\n                  width:1,\n                }}\n              >\n                <table\n                  style={{width:'100%',borderCollapse:'collapse'}}\n                >\n                  <tbody>\n                    <tr>\n                      <td style={{padding:'3px 5px'}}>\n                        <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                      </td>\n                      <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                      <td style={{padding:'3px 5px'}}><strong>{allocation} {this.props.selectedToken}</strong></td>\n                    </tr>\n                  </tbody>\n                </table>\n              </DashboardCard>\n            )\n          }\n        }\n      break;\n      case 'ALL_PERC':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\")\n          let row = {\n            date:moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\")\n          };\n          if (tempData[date]){\n            row = tempData[date];\n          }\n\n          const totalAllocation = d.protocolsData.reduce((accumulator,protocolAllocation) => {\n            const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n            return this.functionsUtil.BNify(accumulator).plus(allocation);\n          },0);\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const protocolName = this.props.tokenConfig.protocols.filter((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() })[0].name;\n            if (!protocolPaused){\n              const allocation = this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals);\n              const allocationPerc = parseFloat(allocation.div(totalAllocation).times(100));\n              keys[protocolName] = 1;\n              row[protocolName] = allocationPerc;\n              row[`${protocolName}Color`] = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n            } else if (typeof row[protocolName] !== undefined) {\n              row[protocolName] = 0;\n            } \n          });\n          \n          tempData[date] = row;\n        });\n\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          data: chartData,\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 40, bottom: 40, left: 60 },\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => parseInt(v)+'%'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            orient: 'bottom',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days'\n          },\n          tooltip:({ id, value, color }) => {\n            const allocation = parseInt(value)===100 ? this.functionsUtil.formatMoney(value,0) : this.functionsUtil.formatMoney(value,2);\n            return (\n              <table style={{width:'100%',borderCollapse:'collapse'}}>\n                <tbody>\n                  <tr>\n                    <td style={{padding:'3px 5px'}}>\n                      <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                    </td>\n                    <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                    <td style={{padding:'3px 5px'}}><strong>{allocation}%</strong></td>\n                  </tr>\n                </tbody>\n              </table>\n            )\n          }\n        }\n      break;\n      case 'APR':\n\n        maxChartValue = 0;\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo && additionalProtocol.enabledTokens.includes(this.props.selectedToken)){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        protocols.forEach((p,j) => {\n          const protocolInfo = {...globalConfigs.stats.protocols[p.name]};\n          if (!protocolInfo.enabled){\n            return;\n          }\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n          \n          chartData.push({\n            id:protocolInfo.label,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                // let protocolRate = this.functionsUtil.BNify(protocolAllocation.rate);\n\n                let protocolRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n                  if (protocolAllocation[field]){\n                    return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(protocolAllocation[field]));\n                  }\n                  return this.functionsUtil.BNify(acc);\n                },0) : this.functionsUtil.BNify(protocolAllocation[rateField]);\n\n                const protocolPaused = protocolRate.eq(0);\n                if (!protocolPaused){\n\n                  // Aave V1 wrong rate FIX\n                  if (protocolRate.lt(0) && protocolAllocation.aaveAdditionalAPR && this.functionsUtil.BNify(protocolAllocation.aaveAdditionalAPR).gt(0)){\n                    protocolRate = protocolRate.plus(this.functionsUtil.BNify(protocolAllocation.aaveAdditionalAPR));\n                  }\n\n                  protocolRate = this.functionsUtil.fixTokenDecimals(protocolRate,18);\n\n                  const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                  const y = parseFloat(protocolRate);\n\n                  maxChartValue = Math.max(maxChartValue,y);\n\n                  return { x, y };\n                }\n                return undefined;\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color:'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data:apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(this.functionsUtil.fixTokenDecimals(d.idleRate,18));\n            maxChartValue = Math.max(maxChartValue,y);\n            return { x, y };\n          })\n        });\n\n        /*\n        const csv = {};\n        chartData.forEach( protocolData => {\n          protocolData.data.forEach( d => {\n            if (!csv[d.x]){\n              csv[d.x] = {};\n            }\n            csv[d.x][protocolData.id] = d.y;\n          });\n        });\n\n        const csv_ordered = Object.keys(csv).sort().reduce(\n          (obj, key) => { \n            obj[key] = csv[key]; \n            return obj;\n          }, \n          {}\n        );\n\n        const csv_array = [];\n        const csv_header = [];\n        csv_header.push('Date');\n        chartData.forEach( pData => csv_header.push(pData.id) );\n        csv_array.push(csv_header.join(','));\n\n        Object.keys(csv_ordered).forEach( date => {\n          const csv_row = [date];\n          chartData.forEach( cData => {\n            if (csv_ordered[date][cData.id]){\n              csv_row.push(parseFloat(csv_ordered[date][cData.id]).toFixed(4));\n            } else {\n              csv_row.push('0.0000');\n            }\n          });\n          csv_array.push(csv_row.join(','));\n        });\n\n        console.log('-------DEBUG-------');\n        console.log(csv_ordered);\n        console.log('-------START-------');\n        console.log(csv_array.join('\\n'));\n        console.log('-------END-------');\n        */\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 6;\n        const chartValues = chartData[chartData.length-1].data.sort((a,b) => (moment(a.x,\"YYYY/MM/DD HH:mm\").isBefore(moment(b.x,\"YYYY/MM/DD HH:mm\")) ? -1 : 1));\n        daysCount = moment(chartValues[chartValues.length-1].x,\"YYYY/MM/DD HH:mm\").diff(moment(chartValues[0].x,\"YYYY/MM/DD HH:mm\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        // console.log('APR',chartValues,chartValues[0].x,chartValues[chartValues.length-1].x,daysCount,daysFrequency);\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(2)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            tickPadding: 15,\n            legendOffset: 0,\n            orient: 'bottom',\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickValues: 'every day',\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    // const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'SCORE':\n\n        let prevValue = 0;\n        maxChartValue = 0;\n\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n          if (!protocolInfo.enabled){\n            return;\n          }\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n          chartData.push({\n            id:protocolInfo.label,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(protocolAllocation.defiScore);\n\n                y = isNaN(y) || !y ? prevValue : y;\n                prevValue = y;\n                maxChartValue = Math.max(maxChartValue,y);\n\n                return { x, y };\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            let y = parseFloat(d.idleScore);\n            y = isNaN(y) || !y ? prevValue : y;\n            prevValue = y;\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x, y };\n          })\n        });\n\n        // debugger;\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 6;\n        daysCount = moment(chartData[0].data[chartData[0].data.length-1].x,\"YYYY/MM/DD\").diff(moment(chartData[0].data[0].x,\"YYYY/MM/DD\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(1),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            tickValues: 'every day',\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE_V4':\n\n        itemIndex = 0;\n        maxChartValue = 0;\n        // let prevApy = null;\n        let prevApr = null;\n        let prevData = null;\n        let avgApy = this.functionsUtil.BNify(0);\n        let startBalance = this.functionsUtil.BNify(1);\n        let currentBalance = this.functionsUtil.BNify(1);\n\n        idleChartData = [];\n        const aaveProtocolInfo = protocols.find( p => p.name === 'aavev2' );\n\n        apiResults.forEach((d,i) => {\n\n          let idleRate = this.functionsUtil.BNify(d.idleRate);\n          let y = 0;\n          let apy = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n\n          // Aave V1 wrong rate FIX\n          if (this.props.selectedToken === 'WETH' && moment(x).isSameOrBefore(moment('2021-05-19 12:20','YYYY-MM-DD HH:mm'))){\n            const aaveProtocolData = aaveProtocolInfo ? d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === aaveProtocolInfo.address.toLowerCase()\n            }) : null;\n            if (aaveProtocolData.aaveAdditionalAPR && this.functionsUtil.BNify(aaveProtocolData.aaveAdditionalAPR).gt(0)){\n              idleRate = idleRate.plus(this.functionsUtil.BNify(aaveProtocolData.aaveAdditionalAPR));\n            }\n          }\n\n          const apr = this.functionsUtil.fixTokenDecimals(idleRate,18).div(100);\n          // const apy = this.functionsUtil.apr2apy(apr);\n          \n          avgApy = avgApy.plus(apr.times(100));\n\n          if (prevApr){\n            const days = (d.timestamp-prevData.timestamp)/86400;\n            // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n            const earnings = currentBalance.times(prevApr.times(days).div(365));\n            currentBalance = currentBalance.plus(earnings);\n\n            const earning = currentBalance.div(startBalance).minus(1).times(100);\n            y = parseFloat(earning);\n\n            // apy = earning.times(365).div(totDays).toFixed(2);\n            const daysSinceBeginning = idleChartData.length>0 ? Math.max(1,moment(d.timestamp*1000).diff(moment(idleChartData[0].x,\"YYYY/MM/DD HH:mm\"),'days')) : 1;\n            apy = parseFloat(y*365/daysSinceBeginning).toFixed(2);\n          }\n\n          prevData = d;\n          // prevApy = apy;\n          prevApr = apr;\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          if (apy>0){\n            idleChartData.push({ x, y, apy, blocknumber, itemPos });\n          }\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo && additionalProtocol.enabledTokens.includes(this.props.selectedToken)){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        protocols.forEach( p => {\n\n          const protocolInfo = {...globalConfigs.stats.protocols[p.name]};\n\n          // Add custom protocol info\n          if (protocolInfo.tokensProps && protocolInfo.tokensProps[this.props.selectedToken]){\n            const tokenProps = protocolInfo.tokensProps[this.props.selectedToken];\n            Object.keys(tokenProps).forEach(p => {\n              protocolInfo[p] = tokenProps[p];\n            });\n          }\n\n          if (!protocolInfo.enabled || (protocolInfo.startTimestamp && this.functionsUtil.strToMoment(protocolInfo.startTimestamp).isAfter(Date.now()))){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          // prevApy = null;\n          prevApr = null;\n          prevData = null;\n          let baseProfit = 0;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n          avgApy = this.functionsUtil.BNify(0);\n          startBalance = this.functionsUtil.BNify(1);\n          currentBalance = this.functionsUtil.BNify(1);\n          const apiResults_filtered = apiResults.filter( d => (!protocolInfo.startTimestamp || moment(protocolInfo.startTimestamp).isSameOrBefore(moment(d.timestamp*1000))) );\n\n          apiResults_filtered.forEach( (d,i) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              let protocolRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n                if (protocolData[field]){\n                  return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(protocolData[field]));\n                }\n                return this.functionsUtil.BNify(acc);\n              },0) : this.functionsUtil.BNify(protocolData[rateField]);\n\n              // Aave V1 wrong rate FIX\n              if (protocolRate.lt(0) && protocolData.aaveAdditionalAPR && this.functionsUtil.BNify(protocolData.aaveAdditionalAPR).gt(0)){\n                protocolRate = protocolRate.plus(this.functionsUtil.BNify(protocolData.aaveAdditionalAPR));\n              }\n\n              const protocolPaused = protocolRate.eq(0);\n              if (!protocolPaused){\n\n                let rowData = {};\n\n                let y = 0;\n                let apy = 0;\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                const apr = this.functionsUtil.fixTokenDecimals(protocolRate,18).div(100);\n\n                avgApy = avgApy.plus(apr.times(100));\n                // const apy = this.functionsUtil.apr2apy(apr);\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null) {\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => (d1.blocknumber>=firstProtocolBlock) );\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                      y = baseProfit;\n                      apy = avgApy.toFixed(2);\n                    }\n                  }\n                }\n\n                itemIndex++;\n\n                if (prevData) {\n                  const days = (d.timestamp-prevData.timestamp)/86400;\n                  // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n                  const earnings = currentBalance.times(prevApr.times(days).div(365));\n                  currentBalance = currentBalance.plus(earnings);\n\n                  const earning = currentBalance.div(startBalance).minus(1).times(100);\n                  y = parseFloat(earning)+baseProfit;\n\n                  const daysSinceBeginning = Math.max(1,moment(d.timestamp*1000).diff(moment(idleChartData[0].x,\"YYYY/MM/DD HH:mm\"),'days'));\n                  apy = parseFloat(y*365/daysSinceBeginning).toFixed(2);\n                  // debugger;\n\n                  // apy = avgApy.div(itemIndex+1).toFixed(2);\n                  const itemPos = Math.floor(itemIndex/totalItems*100);\n                  rowData = {\n                    x,\n                    y,\n                    apy,\n                    itemPos\n                  };\n\n                  itemIndex++;\n                  chartRow.data.push(rowData);\n                }\n\n                prevData = d;\n                prevApr = apr;\n\n                if (firstIdleBlock === null){\n                  firstIdleBlock = parseInt(d.blocknumber);\n                }\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                // const blocknumber = d.blocknumber;\n\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          data: idleChartData,\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')'\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 12;\n        daysCount = moment(idleChartData[idleChartData.length-1].x,\"YYYY/MM/DD HH:mm\").diff(moment(idleChartData[0].x,\"YYYY/MM/DD HH:mm\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            tickValues:`every day`,\n            legendPosition: 'middle',\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              itemWidth: this.props.isMobile ? 70 : 160,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE':\n        // let prevTokenPrice = null;\n        maxChartValue = 0;\n        let firstTokenPrice = null;\n\n        idleChartData = apiResults.map((d,i) => {\n\n          let y = 0;\n          let apy = 0;\n          let days = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n          const tokenPrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n\n          if (!firstTokenPrice){\n            firstTokenPrice = tokenPrice;\n          } else {\n            y = parseFloat(tokenPrice.div(firstTokenPrice).minus(1).times(100));\n\n            days = (d.timestamp-apiResults[0].timestamp)/86400;\n            const earning = tokenPrice.div(firstTokenPrice).minus(1).times(100);\n            apy = earning.times(365).div(days).toFixed(2);\n\n            // console.log(firstTokenPrice.toString(),tokenPrice.toString(),earning.toString(),days,y,apy);\n          }\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          return { x, y, apy, blocknumber, itemPos };\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo && additionalProtocol.enabledTokens.includes(this.props.selectedToken)){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        await this.functionsUtil.asyncForEach(protocols,async (p) => {\n\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n\n          if (!protocolInfo.enabled){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          let baseProfit = 0;\n          firstTokenPrice = null;\n          let lastRowData = null;\n          let lastTokenPrice = null;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n\n          await this.functionsUtil.asyncForEach(apiResults,async (d) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData && protocolData[rateField]){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              const protocolPaused = this.functionsUtil.BNify(protocolData[rateField]).eq(0);\n              if (!protocolPaused){\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null){\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => {\n                      return d1.blocknumber>=firstProtocolBlock;\n                    });\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                    }\n                  }\n                }\n\n                let rowData = {};\n                let tokenExchangeRate = protocolData.price;\n                let tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n\n                // Take data from\n                if (protocolInfo && protocolInfo.data && protocolInfo.data[p.address.toLowerCase()] && protocolInfo.data[p.address.toLowerCase()][d.blocknumber]){\n                  tokenExchangeRate = this.functionsUtil.BNify(globalConfigs.stats.protocols[p.name].data[p.address.toLowerCase()][d.blocknumber]);\n                  tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                }/* else if (p.name === 'aave'){\n                  // Token holders (aDAI = 0xc025c03e10f656d3ee76685d53d236824d8ef3da , aUSDC = 0xd2c734fbd8f5d1c809185e014016dd4097e94711)\n                  let aaveTokenBalance = await this.functionsUtil.genericContractCall(p.token,'balanceOf',['0xd2c734fbd8f5d1c809185e014016dd4097e94711'],{},d.blocknumber);\n                  if (aaveTokenBalance){\n                    if (!Object.values(aave_data).length){\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(1,p.decimals);\n                      aave_data[d.blocknumber] = aaveTokenBalance.toString();\n                    } else {\n                      const firstBalance = Object.values(aave_data)[0];\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(this.functionsUtil.BNify(aaveTokenBalance).div(this.functionsUtil.BNify(firstBalance)).toFixed(p.decimals),p.decimals);\n                      aave_data[d.blocknumber] = tokenExchangeRate.toString();\n                    }\n                  }\n                }\n                */\n\n                let y = baseProfit;\n                let apy = 0;\n\n                if (!firstTokenPrice){\n                  firstTokenPrice = tokenPriceFixed;\n                } else {\n                  if (tokenPriceFixed.lt(lastTokenPrice)){\n                    firstTokenPrice = tokenPriceFixed;\n                    const lastYDiff = chartRow.data[chartRow.data.length-1].y-chartRow.data[chartRow.data.length-2].y;\n                    y = lastRowData.y+lastYDiff;\n                    baseProfit = y;\n                  } else {\n                    y += parseFloat(tokenPriceFixed.div(firstTokenPrice).minus(1).times(100));\n                  }\n\n                  const days = (d.timestamp-apiResults[0].timestamp)/86400;\n                  const earning = tokenPriceFixed.div(firstTokenPrice).minus(1).times(100);\n                  apy = earning.times(365).div(days).toFixed(2);\n                }\n\n                y = Math.max(0,y);\n                maxChartValue = Math.max(maxChartValue,y);\n\n                const itemPos = Math.floor(itemIndex/totalItems*100);\n\n                rowData = {\n                  x,\n                  y,\n                  apy,\n                  itemPos\n                };\n\n                itemIndex++;\n                lastRowData = rowData;\n                chartRow.data.push(rowData);\n                lastTokenPrice = tokenPriceFixed;\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: idleChartData\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              itemWidth: this.props.isMobile ? 70 : 100,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      chartType,\n      chartProps,\n      chartData\n    });\n  }\n\n  render() {\n    return(\n      <GenericChart\n        showLoader={true}\n        {...this.state.chartProps}\n        height={this.props.height}\n        type={this.state.chartType}\n        data={this.state.chartData}\n        width={this.state.chartWidth}\n        isMobile={this.props.isMobile}\n        parentId={this.props.parentId}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default StatsChart;","import { Flex, Text } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\n\nclass Rebalance extends Component {\n\n  state = {\n    loading:true,\n    processing:{\n      rebalance:{\n        txHash:null,\n        loading:false\n      },\n    },\n    shouldRebalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n  componentUnmounted = false;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillUnmount(){\n    this.componentUnmounted = true;\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.checkRebalance();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged || accountChanged){\n      this.checkRebalance();\n    }\n  }\n\n  async setStateSafe(newState,callback=null) {\n    if (!this.componentUnmounted){\n      return this.setState(newState,callback);\n    }\n    return null;\n  }\n\n  checkRebalance = async () => {\n    this.setStateSafe({\n      loading:true,\n    });\n\n    const shouldRebalance = await this.functionsUtil.checkRebalance(this.props.tokenConfig);\n\n    this.setStateSafe({\n      loading:false,\n      shouldRebalance\n    });\n  }\n\n  rebalance = async (e) => {\n    e.preventDefault();\n\n    const callback = (tx,error) => {\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: 'Rebalance',\n        eventAction: this.props.selectedToken,\n      };\n\n      let txDenied = false;\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      if (tx.status === 'success'){\n        // Toast message\n        window.toastProvider.addMessage(`Rebalance completed`, {\n          secondaryMessage: `Now the pool is balanced!`,\n          colorTheme: 'light',\n          actionHref: \"\",\n          actionText: \"\",\n          variant: \"success\",\n        });\n\n      } else if (!txDenied){\n        window.toastProvider.addMessage(`Rebalance error`, {\n          secondaryMessage: `The rebalance has failed, try again...`,\n          colorTheme: 'light',\n          actionHref: \"\",\n          actionText: \"\",\n          variant: \"failure\",\n        });\n      }\n\n      this.setStateSafe((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          rebalance:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n\n      this.checkRebalance();\n    }\n\n    const callback_receipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setStateSafe((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            rebalance:{\n              ...prevState.processing.rebalance,\n              txHash\n            }\n          }\n        })\n      );\n    };\n\n    this.props.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'rebalance', [], null , callback, callback_receipt);\n\n    this.setStateSafe({\n      processing:{\n        rebalance:{\n          txHash:null,\n          loading:true\n        }\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Flex\n        px={3}\n        width={1}\n        minHeight={'100px'}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n      {\n        this.state.loading ? (\n          <FlexLoader\n            flexProps={{\n              flexDirection:'row'\n            }}\n            loaderProps={{\n              size:'30px'\n            }}\n            textProps={{\n              ml:2\n            }}\n            text={'Checking rebalance...'}\n          />\n        ) : (\n          this.state.processing.rebalance.loading ? (\n            <TxProgressBar {...this.props} waitText={`Rebalance estimated in`} endMessage={`Finalizing rebalance request...`} hash={this.state.processing.rebalance.txHash} />\n          ) : (\n            <Flex\n              width={1}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                mt={0}\n                mb={3}\n                textAlign={'center'}\n              >\n                {this.state.shouldRebalance ? 'Rebalance the entire pool. All users will bless you.' : 'The pool is already balanced.'}\n              </Text>\n              <RoundButton\n                buttonProps={{\n                  width:'auto',\n                  disabled:!this.state.shouldRebalance\n                }}\n                handleClick={e => this.rebalance(e)}\n              >\n                Rebalance\n              </RoundButton>\n            </Flex>\n          )\n        )\n      }\n      </Flex>\n    )\n  }\n}\n\nexport default Rebalance;","import React from \"react\";\nimport {\n  Modal,\n  Button,\n  Flex,\n  Field,\n  Select\n} from \"rimble-ui\";\nimport moment from 'moment';\nimport './DateRangeModal.css';\nimport ModalCard from './ModalCard';\nimport 'react-date-range/dist/styles.css';\nimport { DateRange } from 'react-date-range';\nimport 'react-date-range/dist/theme/default.css';\n\nclass DateRangeModal extends React.Component {\n\n  state = {\n    quickSelection:'',\n    ranges:{\n      startDate: this.props.startDate ? this.props.startDate : new Date(),\n      endDate: this.props.endDate ? this.props.endDate : new Date(),\n      key: 'selection'\n    },\n    options:Object.keys(this.props.quickSelections).map( value => ({ value,label:this.props.quickSelections[value].label }) )\n  }\n\n  handleSelect(ranges){\n    this.setState({\n      quickSelection:'',\n      ranges:ranges.selection\n    });\n  }\n\n  handleQuickSelect(e){\n    let startDate = null;\n    let endDate = moment(new Date());\n    const quickSelection = e.target.value;\n\n    if (quickSelection && this.props.quickSelections[quickSelection]){\n      const quickSelectionParams = this.props.quickSelections[quickSelection];\n      startDate = endDate.clone().subtract(quickSelectionParams.value,quickSelectionParams.type);\n    } else {\n      startDate = null;\n      endDate = null;\n    }\n\n    if (startDate && endDate){\n      startDate = startDate._d;\n      endDate = endDate._d;\n\n      const ranges = {\n        startDate,\n        endDate,\n        key:'selection'\n      };\n\n      this.setState({\n        ranges,\n        quickSelection\n      }, () => {\n        this.closeModal();\n      });\n    }\n  }\n\n  componentDidUpdate = (prevProps) => {\n    if (prevProps.startDate !== this.props.startDate || prevProps.endDate !== this.props.endDate){\n      this.setState({\n        ranges:{\n          startDate: this.props.startDate ? this.props.startDate : new Date(),\n          endDate: this.props.endDate ? this.props.endDate : new Date(),\n          key: 'selection'\n        }\n      });\n    }\n  }\n\n  closeModal(){\n    const newState = this.props.handleSelect(this.state.ranges,this.state.quickSelection);\n    const ranges = {\n      startDate:newState.startTimestampObj ? newState.startTimestampObj._d : new Date(),\n      endDate:newState.endTimestampObj ? newState.endTimestampObj._d : new Date(),\n      key: 'selection'\n    };\n    this.setState({\n      ranges\n    });\n    this.props.closeModal();\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        <ModalCard closeFunc={this.props.closeModal}>\n          <ModalCard.Header title={'Select Date Range'}>\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex width={1} flexDirection={'column'} alignItems={'center'}>\n              <Field label=\"Quick Date Selection\" style={{display:'flex',width:'100%',alignItems:'stretch',justifyContent:'center'}}>\n                <Select\n                  style={{\n                    fontSize:'14px',\n                    height:'2.5em',\n                    boxShadow:'none',\n                    color:this.props.theme.colors.counter,\n                    backgroundColor:this.props.theme.colors.cardBg\n                  }}\n                  width={'100%'}\n                  required={true}\n                  options={this.state.options}\n                  value={this.state.quickSelection}\n                  onChange={this.handleQuickSelect.bind(this)}\n                />\n              </Field>\n              <DateRange\n                ranges={[this.state.ranges]}\n                minDate={this.props.minDate}\n                maxDate={this.props.maxDate}\n                className={this.props.themeMode}\n                onChange={this.handleSelect.bind(this)}\n              />\n            </Flex>\n          </ModalCard.Body>\n          <ModalCard.Footer>\n            <Flex px={[2,0]} flexDirection={['column', 'row']} width={1} justifyContent={'center'}>\n              <Button\n                my={2}\n                mx={[0, 2]}\n                borderRadius={4}\n                mainColor={'blue'}\n                onClick={ e => this.closeModal(e) }\n                size={this.props.isMobile ? 'small' : 'medium'}\n              >\n              APPLY\n              </Button>\n            </Flex>\n          </ModalCard.Footer>\n        </ModalCard>\n      </Modal>\n    );\n  }\n\n}\n\nexport default DateRangeModal;","import moment from 'moment';\nimport Title from '../Title/Title';\nimport StatsChart from './StatsChart';\nimport React, { Component } from 'react';\nimport Rebalance from '../Rebalance/Rebalance';\nimport StatsCard from '../StatsCard/StatsCard';\nimport AssetsList from '../AssetsList/AssetsList';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport GenericSelector from '../GenericSelector/GenericSelector';\nimport RoundIconButton from '../RoundIconButton/RoundIconButton';\nimport VariationNumber from '../VariationNumber/VariationNumber';\nimport AllocationChart from '../AllocationChart/AllocationChart';\nimport DateRangeModal from '../utilities/components/DateRangeModal';\nimport { Flex, Text, Heading, Box, Icon, Button, Link } from 'rimble-ui';\nimport ExecuteTransaction from '../ExecuteTransaction/ExecuteTransaction';\nimport AssetsUnderManagement from '../AssetsUnderManagement/AssetsUnderManagement';\n\nclass Stats extends Component {\n  state = {\n    aum:null,\n    apr:null,\n    days:'-',\n    delta:null,\n    earning:null,\n    minDate:null,\n    maxDate:null,\n    carouselMax:1,\n    rebalances:'-',\n    buttonGroups:[],\n    apiResults:null,\n    carouselIndex:0,\n    idleVersion:null,\n    statsVersions:{},\n    minStartTime:null,\n    endTimestamp:null,\n    showAdvanced:true,\n    govTokensPool:null,\n    unlentBalance:null,\n    quickSelection:null,\n    startTimestamp:null,\n    endTimestampObj:null,\n    shouldRebalance:null,\n    carouselOffsetLeft:0,\n    startTimestampObj:null,\n    showRefreshIdleSpeed:false,\n    apiResults_unfiltered:null,\n    dateRangeModalOpened:false\n  };\n\n  quickSelections = {\n    day:{\n      value:1,\n      type:'day',\n      label:'Last day',\n    },\n    week:{\n      value:1,\n      type:'week',\n      label:'Last week',\n    },\n    weeks:{\n      value:2,\n      type:'week',\n      label:'Last 2 weeks',\n    },\n    month:{\n      value:1,\n      type:'month',\n      label:'Last month',\n    },\n    ytd:{\n      type:'day',\n      label:'Year to date',\n      value:moment().diff(moment('01/01/YYYY','DD/MM/YYYY'),'days'),\n    },\n  };\n\n  // Utils\n  functionsUtil = null;\n  componentUnmounted = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount() {\n    this.loadUtils();\n    await this.loadParams();\n  }\n\n  componentWillUnmount(){\n    this.componentUnmounted = true;\n  }\n\n  async setStateSafe(newState,callback=null) {\n    if (!this.componentUnmounted){\n      return this.setState(newState,callback);\n    }\n    return null;\n  }\n\n  showRefreshIdleSpeed(){\n    this.setState({\n      showRefreshIdleSpeed:true\n    });\n  }\n\n  getLatestAvailableVersion(){\n    const statsVersions = globalConfigs.stats.versions;\n    let latestVersion = null;\n    Object.keys(statsVersions).forEach( version => {\n      const versionInfo = statsVersions[version];\n      if (versionInfo.enabledStrategies.includes(this.props.selectedStrategy)){\n        latestVersion = version;\n      }\n    });\n\n    return latestVersion;\n  }\n\n  getVersionInfo(version){\n    if (!version){\n      version = this.state.idleVersion;\n    }\n\n    if (!globalConfigs.stats.versions[version]){\n      return null;\n    }\n\n    const versionInfo = Object.assign({},globalConfigs.stats.versions[version]);\n\n    if (versionInfo.strategiesParams && versionInfo.strategiesParams[this.props.selectedStrategy]){\n      const versionInfoExtra = versionInfo.strategiesParams[this.props.selectedStrategy];\n      Object.keys(versionInfoExtra).forEach( param => {\n        versionInfo[param] = versionInfoExtra[param];\n      });\n    }\n\n    return versionInfo;\n  }\n\n  async loadParams() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    const newState = {};\n    const { match: { params } } = this.props;\n\n    const currentNetworkAvailableTokens = Object.keys(this.props.availableTokens);\n\n    if (!!params.customToken && currentNetworkAvailableTokens.indexOf(params.customToken.toUpperCase()) !== -1 ){\n      newState.selectedToken = params.customToken.toUpperCase();\n    } else {\n      newState.selectedToken = this.props.selectedToken.toUpperCase();\n    }\n\n    newState.tokenConfig = this.props.availableTokens[newState.selectedToken];\n    newState.minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp,'YYYY-MM-DD');\n    newState.maxEndDate = moment();\n\n    newState.endTimestampObj = moment(moment().format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    newState.latestVersion = this.getLatestAvailableVersion();\n    newState.idleVersion = this.state.idleVersion === null ? newState.latestVersion : this.state.idleVersion;\n\n    const versionInfo = this.getVersionInfo(newState.idleVersion);\n\n    // console.log('loadParams',newState.latestVersion,newState.idleVersion,versionInfo);\n\n    if (newState.idleVersion && versionInfo.endTimestamp){\n      const newEndTimestampObj = moment(moment(versionInfo.endTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.endTimestampObj.isAfter(newEndTimestampObj)){\n        newState.endTimestampObj = newEndTimestampObj;\n        newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n      }\n\n      if (!newState.maxEndDate || newState.maxEndDate.isAfter(newEndTimestampObj)){\n        newState.maxEndDate = newEndTimestampObj;\n      }\n    }\n\n    newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n\n    // Set start date\n    newState.startTimestampObj = newState.endTimestampObj.clone().subtract(1,'month');\n    newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n\n    if (newState.idleVersion && versionInfo.startTimestamp){\n      const newStartTimestampObj = moment(moment(versionInfo.startTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.startTimestampObj.isBefore(newStartTimestampObj)){\n        newState.startTimestampObj = newStartTimestampObj;\n        newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n      }\n\n      if (newState.minStartTime.isBefore(newStartTimestampObj)){\n        newState.minStartTime = newStartTimestampObj;\n      }\n    }\n\n    newState.minDate = newState.minStartTime._d;\n    newState.maxDate = newState.maxEndDate._d;\n\n    if (newState !== this.state){\n      await this.setStateSafe(newState);\n    }\n  }\n\n  setDateRange = (ranges,quickSelection=null) => {\n\n    const minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp);\n\n    let startTimestampObj = moment(ranges.startDate).isSameOrAfter(minStartTime) ? moment(ranges.startDate) : minStartTime;\n    let endTimestampObj = moment(ranges.endDate);\n\n    if (startTimestampObj.isSame(endTimestampObj)){\n      endTimestampObj.add(1,'day');\n    }\n\n    endTimestampObj = moment(endTimestampObj.format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    if (startTimestampObj.isBefore(this.state.minStartTime)){\n      startTimestampObj = this.state.minStartTime;\n    }\n\n    if (endTimestampObj.isAfter(this.state.maxEndDate)){\n      endTimestampObj = this.state.maxEndDate;\n    }\n\n    const startTimestamp = parseInt(startTimestampObj._d.getTime()/1000);\n    const endTimestamp = parseInt(endTimestampObj._d.getTime()/1000);\n\n    const newState = {\n      minStartTime,\n      endTimestamp,\n      quickSelection,\n      startTimestamp,\n      endTimestampObj,\n      startTimestampObj\n    };\n\n    this.setStateSafe(newState);\n\n    return newState;\n  }\n\n  toggleAdvancedCharts = (e) => {\n    e.preventDefault();\n    this.setStateSafe({\n      showAdvanced:!this.state.showAdvanced\n    });\n  }\n\n  setDateRangeModal = (dateRangeModalOpened) => {\n    if (dateRangeModalOpened !== this.state.dateRangeModalOpened){\n      this.setStateSafe({\n        dateRangeModalOpened\n      });\n    }\n  }\n\n  async componentDidMount() {\n\n    if (!this.props.web3){\n      this.props.initWeb3();\n      return false;\n    }\n\n    /*\n    const style = document.createElement('style');\n    style.id = 'crisp-custom-style';\n    style.type = 'text/css';\n    style.innerHTML = `\n    .crisp-client{\n      display:none !important;\n    }`;\n    document.body.appendChild(style);\n    */\n\n    this.loadUtils();\n    await this.loadParams();\n    this.loadApiData();\n    this.loadCarousel();\n  }\n\n  loadCarousel(){\n    const carouselMax = this.props.isMobile ? 3 : 2;\n    this.setStateSafe({\n      carouselMax\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const strategyChanged = prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    const dateChanged = prevState.startTimestamp !== this.state.startTimestamp || prevState.endTimestamp !== this.state.endTimestamp;\n    const versionChanged = prevState.idleVersion !== this.state.idleVersion;\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n\n    if (mobileChanged){\n      this.loadCarousel();\n    }\n\n    if (contractsInitialized || tokenChanged || strategyChanged || versionChanged){\n      // console.log('componentDidUpdate',this.props.selectedStrategy,this.props.selectedToken);\n      await this.componentDidMount();\n    } else if (dateChanged){\n      this.loadApiData();\n    }\n  }\n\n  filterTokenData = (apiResults) => {\n    return apiResults.filter((r,i) => {\n      return (!this.state.startTimestamp || r.timestamp >= this.state.startTimestamp) && (!this.state.endTimestamp || r.timestamp <= this.state.endTimestamp);\n    });\n  }\n\n  setIdleVersion = idleVersion => {\n    this.setStateSafe({\n      idleVersion\n    });\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    // Get COMP APR\n    // const compAPR = await this.functionsUtil.getCompAPR(this.props.tokenConfig);\n    // console.log('compAPR',compAPR.toString());\n\n    const startTimestamp = this.state.minDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.minDate).format('DD/MM/YYYY 00:00:00'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n    const endTimestamp = this.state.maxDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.maxDate).format('DD/MM/YYYY 23:59:59'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n\n    const isRisk = ['v3','v4'].includes(this.state.idleVersion) && this.props.selectedStrategy === 'risk';\n    let apiResults_unfiltered = await this.functionsUtil.getTokenApiData(this.props.tokenConfig.address,isRisk,startTimestamp,endTimestamp,true,7200);\n\n    const apiResults = this.filterTokenData(apiResults_unfiltered);\n\n    // console.log('loadApiData',startTimestamp,endTimestamp,new Date(startTimestamp*1000),new Date(endTimestamp*1000),apiResults,apiResults_unfiltered);\n\n    if (!apiResults || !apiResults_unfiltered || !apiResults.length || !apiResults_unfiltered.length){\n      return false;\n    }\n\n    const firstResult = apiResults[0];\n    const lastResult = Object.values(apiResults).pop();\n\n    window.moment = moment;\n\n    let days = (lastResult.timestamp-firstResult.timestamp)/86400;\n    if (days === 0){\n      days = 1;\n    }\n\n    let apr = null;\n    let delta = 'N/A';\n\n    const idleTokens = this.functionsUtil.fixTokenDecimals(lastResult.idleSupply,18);\n    const firstIdlePrice = this.functionsUtil.fixTokenDecimals(firstResult.idlePrice,this.props.tokenConfig.decimals);\n    const lastIdlePrice = this.functionsUtil.fixTokenDecimals(lastResult.idlePrice,this.props.tokenConfig.decimals);\n\n    // Calculate AUM\n    let aum = idleTokens.times(lastIdlePrice);\n\n    // Convert Token balance\n    aum = await this.functionsUtil.convertTokenBalance(aum,this.props.selectedToken,this.props.tokenConfig,isRisk);\n\n    const compoundInfo = this.props.tokenConfig.protocols.filter((p) => { return p.name === 'compound' })[0];\n    const firstCompoundData = compoundInfo ? firstResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n    const lastCompoundData = compoundInfo ? lastResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n\n    if (this.state.idleVersion === 'v4') {\n\n      apr = apiResults.reduce( (sum,r) => {\n        const idleRate = this.functionsUtil.fixTokenDecimals(r.idleRate,18);\n        return this.functionsUtil.BNify(sum).plus(idleRate);\n      },0);\n\n      // Calculate average\n      apr = apr.div(apiResults.length);\n\n      if (compoundInfo){\n        const compoundWithCOMPInfo = globalConfigs.stats.protocols.compoundWithCOMP;\n        const rateField = compoundWithCOMPInfo.rateField ? compoundWithCOMPInfo.rateField : 'rate';\n\n        let compoundAvgApr = apiResults.reduce( (sum,r) => {\n\n          const compoundData = r.protocolsData.find((pData,x) => {\n            return pData.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase()\n          });\n\n          let compoundRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n            if (compoundData && compoundData[field]){\n              return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(compoundData[field]));\n            }\n            return this.functionsUtil.BNify(acc);\n          },0) : this.functionsUtil.BNify(compoundData[rateField]);\n\n          compoundRate = this.functionsUtil.fixTokenDecimals(compoundRate,18);\n\n          return this.functionsUtil.BNify(sum).plus(compoundRate);\n        },0);\n\n        // Calculate average\n        compoundAvgApr = compoundAvgApr.div(apiResults.length);\n\n        // compoundAvgApr = this.functionsUtil.apr2apy(compoundAvgApr.div(100)).times(100);\n        // apr = this.functionsUtil.apr2apy(apr.div(100)).times(100);\n\n        delta = apr.minus(compoundAvgApr);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n\n      apr = apr.toFixed(2);\n\n    } else {\n      const earning = lastIdlePrice.div(firstIdlePrice).minus(1).times(100);\n      apr = earning.times(365).div(days).toFixed(2);\n\n      if (firstCompoundData && lastCompoundData){\n        const firstCompoundPrice = this.functionsUtil.fixTokenDecimals(firstCompoundData.price,this.props.tokenConfig.decimals);\n        const lastCompoundPrice = this.functionsUtil.fixTokenDecimals(lastCompoundData.price,this.props.tokenConfig.decimals);\n        const compoundApr = lastCompoundPrice.div(firstCompoundPrice).minus(1).times(100);\n        delta = earning.minus(compoundApr).times(365).div(days);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n    }\n\n    // Count rebalances\n    let rebalances = 0;\n    apiResults.forEach((row,index) => {\n      if (index){\n        const prevRow = apiResults[index-1];\n\n        const totalAllocation = row.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        const prevTotalAllocation = prevRow.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        let hasRebalanced = false;\n        row.protocolsData.forEach( p => {\n          if (hasRebalanced){\n            return;\n          }\n          const prevP = prevRow.protocolsData.find( prevP => (prevP.protocolAddr.toLowerCase() === p.protocolAddr.toLowerCase()) );\n          const allocation = this.functionsUtil.fixTokenDecimals(p.allocation,this.props.tokenConfig.decimals);\n          const prevAllocation = prevP ? this.functionsUtil.fixTokenDecimals(prevP.allocation,this.props.tokenConfig.decimals) : this.functionsUtil.BNify(0);\n          const allocationPerc = parseInt(parseFloat(allocation.div(totalAllocation).times(100)));\n          const prevAllocationPerc = parseInt(parseFloat(prevAllocation.div(prevTotalAllocation).times(100)));\n          if (allocationPerc!==prevAllocationPerc){\n            rebalances++;\n            hasRebalanced = true;\n          }\n        });\n      }\n    });\n\n    // Add gov tokens balance to AUM\n    const availableTokens = {};\n    availableTokens[this.props.selectedToken] = this.props.tokenConfig;\n    const govTokensPool = await this.functionsUtil.getGovTokenPool(null,availableTokens,'DAI');\n    if (govTokensPool){\n      aum = aum.plus(govTokensPool);\n    }\n\n    // Format AUM\n    /*\n    aum = this.functionsUtil.formatMoney(parseFloat(aum));\n\n    const conversionRateField = this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'conversionRateField']);\n    if (conversionRateField){\n      aum += ' $';\n    }\n    */\n\n    let unlentBalance = await this.functionsUtil.getUnlentBalance(this.props.tokenConfig);\n    if (unlentBalance){\n      unlentBalance = this.functionsUtil.formatMoney(parseFloat(unlentBalance));\n    }\n\n    this.setStateSafe({\n      aum,\n      apr,\n      days,\n      delta,\n      apiResults,\n      rebalances,\n      govTokensPool,\n      unlentBalance,\n      apiResults_unfiltered\n    });\n  }\n\n  selectToken = async (strategy,token) => {\n    await this.props.setStrategyToken(strategy,token);\n    this.props.changeToken(token);\n  }\n\n  handleCarousel = action => {\n    let carouselIndex = this.state.carouselIndex;\n    if (action==='next' && carouselIndex<this.state.carouselMax){\n      carouselIndex++;\n    } else if (action==='back' && carouselIndex>0){\n      carouselIndex--;\n    }\n\n    const $element = window.jQuery(`#carousel-cursor > div:eq(${carouselIndex})`);\n    const carouselOffsetLeft = -parseFloat($element.position().left)+'px';\n\n    this.setStateSafe({\n      carouselIndex,\n      carouselOffsetLeft\n    });\n  }\n\n  render() {\n\n    const valueProps = {\n      lineHeight:1,\n      fontSize:[4,5],\n      fontWeight:[3,4],\n      color:'statValue'\n    };\n\n    const unitProps = {\n      ml:2,\n      lineHeight:1,\n      fontWeight:[2,3],\n      color:'statValue',\n      fontSize:[3,'23px'],\n    };\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const apyLong = this.functionsUtil.getGlobalConfig(['messages','apyLong']);\n\n    if (!this.props.availableStrategies){\n      return (\n        <FlexLoader\n          textProps={{\n            textSize:4,\n            fontWeight:2\n          }}\n          loaderProps={{\n            mb:3,\n            size:'40px'\n          }}\n          flexProps={{\n            minHeight:'50vh',\n            flexDirection:'column'\n          }}\n          text={'Loading assets...'}\n        />\n      );\n    }\n\n    const statsTokens = this.functionsUtil.getGlobalConfig(['stats','tokens']);\n\n    if (!this.props.selectedToken){\n      const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n      const enabledTokens = [];\n      const statsProtocols = this.functionsUtil.getGlobalConfig(['stats','protocols']);\n\n      Object.keys(statsTokens).forEach(token => {\n        const tokenInfo = statsTokens[token];\n        if (tokenInfo.enabled){\n          enabledTokens.push(token);\n        }\n      });\n      return (\n        <Flex\n          mb={3}\n          width={1}\n          flexDirection={'column'}\n        >\n          <AssetsUnderManagement\n            {...this.props}\n            loaderAlign={'flex-end'}\n          />\n          {\n            Object.keys(strategies).map(strategy => {\n              const strategyInfo = strategies[strategy];\n              const availableTokens = this.props.availableStrategies[strategy];\n\n              if (!availableTokens){\n                return false;\n              }\n              \n              // Get available protocols name\n              const availableProtocolsKeys = [];\n              Object.keys(availableTokens).forEach( token => {\n                availableTokens[token].protocols.forEach( protocolInfo => {\n                  if (availableProtocolsKeys.indexOf(protocolInfo.name)<0){\n                    availableProtocolsKeys.push(protocolInfo.name);\n                  }\n                });\n              });\n\n              const availableProtocols = availableProtocolsKeys.map( protocolName => {\n                return statsProtocols[protocolName];\n              },{});\n\n              return (\n                <Box\n                  mb={2}\n                  width={1}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                  key={`strategy-container-${strategy}`}\n                >\n                  <Title\n                    mt={3}\n                    mb={[3,4]}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'baseline'}\n                      justifyContent={'center'}\n                    >\n                      {strategyInfo.title}\n                      {\n                        strategyInfo.titlePostfix &&\n                          <Text\n                            ml={2}\n                            fontWeight={3}\n                            fontSize={[2,4]}\n                            color={'dark-gray'}\n                          >\n                            {strategyInfo.titlePostfix}\n                          </Text>\n                      }\n                    </Flex>\n                  </Title>\n                  <AssetsList\n                    enabledTokens={enabledTokens}\n                    handleClick={(props) => this.selectToken(strategy,props.token)}\n                    cols={[\n                      {\n                        title:'CURRENCY',\n                        props:{\n                          width:[0.26,0.15]\n                        },\n                        fields:[\n                          {\n                            name:'icon',\n                            props:{\n                              mr:2,\n                              height:['1.4em','2.3em']\n                            }\n                          },\n                          {\n                            name:'tokenName'\n                          }\n                        ]\n                      },\n                      {\n                        title:'POOL',\n                        props:{\n                          width:[0.22,0.14],\n                        },\n                        fields:[\n                          {\n                            name:'allocationChart',\n                            mobile:false,\n                            parentProps:{\n                              width:0.3\n                            },\n                            style:{\n                              overflow:'visible'\n                            },\n                            showLoader:false,\n                          },\n                          {\n                            name:'pool',\n                            props:{\n                              ml:1\n                            },\n                            parentProps:{\n                              width:[1,0.7]\n                            }\n                          }\n                        ]\n                      },\n                      {\n                        title:'APY',\n                        desc:apyLong,\n                        props:{\n                          width: [0.29,0.14],\n                        },\n                        parentProps:{\n                          flexDirection:'column',\n                          alignItems:'flex-start',\n                        },\n                        fields:[\n                          {\n                            name:'apy',\n                            showTooltip:true\n                          },\n                          {\n                            name:'idleDistribution',\n                            showLoader:false,\n                            props:{\n                              decimals:this.props.isMobile ? 1 : 2,\n                              fontSize:this.props.isMobile ? '9px' : 0\n                            }\n                          },\n                        ]\n                      },\n                      {\n                        title:'RISK SCORE',\n                        desc:this.functionsUtil.getGlobalConfig(['messages','riskScore']),\n                        mobile:false,\n                        props:{\n                          width:[0.27,0.16],\n                        },\n                        fields:[\n                          {\n                            name:'score'\n                          }\n                        ]\n                      },\n                      {\n                        title:'APR LAST WEEK',\n                        mobile:false,\n                        props:{\n                          width: 0.25,\n                        },\n                        parentProps:{\n                          width:1,\n                          pr:[2,4]\n                        },\n                        fields:[\n                          {\n                            name:'aprChart',\n                            style:{\n                              overflow:'visible',\n                            },\n                          }\n                        ]\n                      },\n                      {\n                        title:'',\n                        props:{\n                          width:[0.23,0.16],\n                        },\n                        parentProps:{\n                          width:1\n                        },\n                        fields:[\n                          {\n                            name:'button',\n                            label:this.props.isMobile ? 'View' : 'View stats',\n                            props:{\n                              width:1,\n                              fontSize:3,\n                              fontWeight:3,\n                              height:'45px',\n                              borderRadius:4,\n                              boxShadow:null,\n                              mainColor:'redeem',\n                              size: this.props.isMobile ? 'small' : 'medium',\n                              handleClick:(props) => this.selectToken(strategy,props.token)\n                            }\n                          }\n                        ]\n                      }\n                    ]}\n                    {...this.props}\n                    selectedStrategy={strategy}\n                    availableTokens={availableTokens}\n                  />\n                  {\n                    !this.props.isMobile &&\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'flex-end'}\n                      >\n                        {\n                          availableProtocols.filter( p => p.legend ).map( (p,index) => (\n                            <Flex\n                              mr={3}\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              key={`legend_${index}`}\n                            >\n                              <Box\n                                mr={1}\n                                width={'10px'}\n                                height={'10px'}\n                                borderRadius={'50%'}\n                                backgroundColor={`rgb(${p.color.rgb.join(',')})`}\n                              >\n                              </Box>\n                              <Text.span\n                                fontSize={1}\n                                color={'cellText'}\n                              >\n                                {p.label}\n                              </Text.span>\n                            </Flex>\n                          ))\n                        }\n                      </Flex>\n                  }\n                </Box>\n              );\n            })\n          }\n          {\n            idleTokenEnabled && !this.state.showRefreshIdleSpeed ? (\n              <Flex\n                mb={4}\n                width={1}\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <Link\n                  hoverColor={'primary'}\n                  onClick={this.showRefreshIdleSpeed.bind(this)}\n                >\n                  Refresh Idle Speed\n                </Link>\n              </Flex>\n            ) : idleTokenEnabled && this.state.showRefreshIdleSpeed &&\n              <DashboardCard\n                cardProps={{\n                  p:2,\n                  mb:4,\n                  width:1,\n                  mt:[2,3],\n                }}\n                isActive={true}\n                isInteractive={false}\n              >\n                <Flex\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                >\n                  <Text\n                    fontWeight={500}\n                    color={'flashColor'}\n                    textAlign={'center'}\n                    fontSize={[1,'15px']}\n                  >\n                    By executing this transaction you can adjust the IDLE distribution speed among the pools.\n                  </Text>\n                  <ExecuteTransaction\n                    action={'Refresh'}\n                    Component={Button}\n                    parentProps={{\n                      mt:1\n                    }}\n                    componentProps={{\n                      size:'small',\n                      mainColor:'blue',\n                      value:'REFRESH IDLE SPEED'\n                    }}\n                    params={[]}\n                    contractName={'IdleController'}\n                    methodName={'refreshIdleSpeeds'}\n                    {...this.props}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'center'}\n                      justifyContent={'center'}\n                    >\n                      <Icon\n                        mr={1}\n                        name={'Done'}\n                        size={'1.4em'}\n                        color={this.props.theme.colors.transactions.status.completed}\n                      />\n                      <Text\n                        fontWeight={500}\n                        fontSize={'15px'}\n                        color={'copyColor'}\n                        textAlign={'center'}\n                      >\n                        Idle Speed Refreshed\n                      </Text>\n                    </Flex>\n                  </ExecuteTransaction>\n                </Flex>\n              </DashboardCard>\n          }\n        </Flex>\n      );\n    } else {\n\n      const tokenConfig = statsTokens[this.props.selectedToken];\n\n      const versionsOptions = Object.keys(globalConfigs.stats.versions).filter( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return versionInfo.enabledTokens.includes(this.props.selectedToken) && versionInfo.enabledStrategies.includes(this.props.selectedStrategy);\n      }).map( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return {\n          value:version,\n          label:versionInfo.label\n        }\n      });\n\n      const disabledCharts = tokenConfig.disabledCharts || [];\n\n      const versionInfo = this.getVersionInfo(this.state.idleVersion);\n\n      let performanceTooltip = null;\n      if (this.state.idleVersion && versionInfo){\n        const showPerformanceTooltip = this.functionsUtil.getGlobalConfig(['stats','versions',this.state.idleVersion,'showPerformanceTooltip']);\n        performanceTooltip = showPerformanceTooltip ? this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'performanceTooltip']) : null;\n      }\n\n      const versionDefaultValue = versionsOptions.find( v => (v.value === this.state.idleVersion) );\n\n      return (\n        <Flex\n          p={0}\n          width={1}\n          flexDirection={'column'}\n        >\n          {\n          /*\n          }\n          <Flex position={['absolute','relative']} left={0} px={[3,0]} zIndex={10} width={1} flexDirection={'row'} mb={[0,3]}>\n            <Flex alignItems={'center'} width={[2/3,1/2]}>\n              <RouterLink to=\"/\">\n                <Image src=\"images/logo-gradient.svg\"\n                  height={['35px','48px']}\n                  position={'relative'} />\n              </RouterLink>\n              <Heading.h3 color={'dark-gray'} textAlign={'left'} fontWeight={3} lineHeight={'initial'} fontSize={[4,5]} ml={[1,2]}>\n                <Text.span fontSize={'80%'}>|</Text.span> Stats\n              </Heading.h3>\n            </Flex>\n            <Flex flexDirection={'row'} width={[1/3,1/2]} justifyContent={'flex-end'} alignItems={'center'}>\n              {\n                this.state.buttonGroups && \n                  this.props.isMobile ? (\n                    <ButtonGroup\n                      isMobile={this.props.isMobile}\n                      components={ this.state.buttonGroups.reduce((components,array) => components.concat(array),[]) }\n                      theme={'light'}\n                    />\n                  ) :\n                  this.state.buttonGroups.map((buttonGroup,i) => (\n                    <ButtonGroup\n                      key={`buttonGroup_${i}`}\n                      isMobile={this.props.isMobile}\n                      components={buttonGroup}\n                      theme={'light'}\n                    />\n                  ))\n              }\n            </Flex>\n          </Flex>\n          */\n          }\n          <Box\n            mb={[3,4]}\n          >\n            <Flex\n              flexDirection={['column','row']}\n            >\n              <Flex\n                width={[1,0.4]}\n              >\n                <Breadcrumb\n                  {...this.props}\n                  showPathMobile={true}\n                  text={'ASSETS OVERVIEW'}\n                  isMobile={this.props.isMobile}\n                  handleClick={ e => this.props.goToSection('stats') }\n                  path={[this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])]}\n                />\n              </Flex>\n              <Flex\n                mt={[3,0]}\n                width={[1,0.6]}\n                flexDirection={['column','row']}\n                justifyContent={['center','space-between']}\n              >\n                <Flex\n                  width={[1,0.26]}\n                  flexDirection={'column'}\n                >\n                  <GenericSelector\n                    innerProps={{\n                      p:1,\n                      height:['100%','46px'],\n                    }}\n                    name={'idle-version'}\n                    options={versionsOptions}\n                    defaultValue={versionDefaultValue}\n                    onChange={ v => this.setIdleVersion(v) }\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.3]}\n                  flexDirection={'column'}\n                >\n                  <AssetSelector\n                    innerProps={{\n                      p:1\n                    }}\n                    {...this.props}\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.39]}\n                  flexDirection={'column'}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:1,\n                      display:'flex',\n                      alignItems:'center',\n                      height:['46px','100%'],\n                      justifyContent:'center'\n                    }}\n                    isInteractive={true}\n                    handleClick={ e => this.setDateRangeModal(true) }\n                  >\n                    <Text\n                      fontWeight={3}\n                      color={'copyColor'}\n                    >\n                    {\n                      this.state.quickSelection\n                      ?\n                        this.quickSelections[this.state.quickSelection].label\n                      : this.state.startTimestampObj && this.state.endTimestampObj &&\n                        `${this.state.startTimestampObj.format('DD/MM/YY')} - ${this.state.endTimestampObj.format('DD/MM/YY')}`\n                    }\n                    </Text>\n                  </DashboardCard>\n                </Flex>\n              </Flex>\n            </Flex>\n          </Box>\n          {\n            !tokenConfig.enabled ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'DoNotDisturb'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Stats for {this.props.selectedToken} are not available!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : this.state.idleVersion && this.functionsUtil.strToMoment(versionInfo.startTimestamp).isAfter(Date.now()) ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'AccessTime'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Idle Stats {this.state.idleVersion} will be available shortly!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : this.functionsUtil.strToMoment(tokenConfig.startTimestamp).isAfter(Date.now()) ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'AccessTime'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Stats for {this.props.selectedToken} will be available shortly!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : (\n              <Box\n                width={1}\n              >\n                <Box\n                  mt={[3,0]}\n                  mb={[3,4]}\n                >\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    justifyContent={'center'}\n                    flexDirection={['column','row']}\n                  >\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Asset Under Management'}\n                        label={ this.state.unlentBalance ? `Unlent funds: ${this.state.unlentBalance} ${this.props.selectedToken}` : this.props.selectedToken }\n                        labelTooltip={ this.state.unlentBalance ? this.functionsUtil.getGlobalConfig(['messages','cheapRedeem']) : null}\n                      >\n                        <SmartNumber\n                          precision={2}\n                          type={'money'}\n                          {...valueProps}\n                          unitProps={unitProps}\n                          number={this.state.aum}\n                          flexProps={{\n                            alignItems:'baseline',\n                            justifyContent:'flex-start'\n                          }}\n                          unit={this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'conversionRateField']) ? '$' : null}\n                        />\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Avg APY'}\n                        label={'Annualized'}\n                      >\n                        <Flex\n                          width={1}\n                          alignItems={'center'}\n                          flexDirection={['column','row']}\n                        >\n                          <VariationNumber\n                            direction={'up'}\n                            iconPos={'right'}\n                            iconSize={'1.8em'}\n                            justifyContent={'flex-start'}\n                            width={1}\n                            >\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                              fontSize={[4,5]}\n                            >\n                              {this.state.apr}\n                              <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                            </Text>\n                          </VariationNumber>\n                        </Flex>\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Overperformance on Compound'}\n                        label={'Annualized'}\n                      >\n                        {\n                          this.state.delta && !isNaN(this.state.delta) ? (\n                            <VariationNumber\n                              direction={'up'}\n                              iconPos={'right'}\n                              iconSize={'1.8em'}\n                              justifyContent={'flex-start'}\n                              >\n                              <Text\n                                lineHeight={1}\n                                fontSize={[4,5]}\n                                fontWeight={[3,4]}\n                                color={'statValue'}\n                              >\n                                {this.state.delta}\n                                <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                              </Text>\n                            </VariationNumber>\n                          ) : (\n                            <Text\n                              lineHeight={1}\n                              fontSize={[4,5]}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                            >\n                              {this.state.delta}\n                            </Text>\n                          )\n                        }\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        label={' '}\n                        title={'Rebalances'}\n                        value={this.state.rebalances.toString()}\n                      />\n                    </Flex>\n                    {\n                    /*\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Current APR</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.currApr}\n                            <Text.span color={'copyColor'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Days Live</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.days}\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    */\n                    }\n                  </Flex>\n                </Box>\n\n                <DashboardCard\n                  title={'Historical Performance'}\n                  description={performanceTooltip}\n                  cardProps={{\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex id='chart-PRICE' width={1} mb={3}>\n                    <StatsChart\n                      height={ 350 }\n                      {...this.state}\n                      parentId={'chart-PRICE'}\n                      theme={this.props.theme}\n                      isMobile={this.props.isMobile}\n                      contracts={this.props.contracts}\n                      themeMode={this.props.themeMode}\n                      apiResults={this.state.apiResults}\n                      idleVersion={this.state.idleVersion}\n                      selectedToken={this.props.selectedToken}\n                      apiResults_unfiltered={this.state.apiResults_unfiltered}\n                      chartMode={this.state.idleVersion === this.state.latestVersion ? 'PRICE_V4' : 'PRICE'}\n                    />\n                  </Flex>\n                </DashboardCard>\n\n                <DashboardCard\n                  cardProps={{\n                    pb:3,\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex\n                    flexDirection={['column','row']}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      this.state.idleVersion === this.state.latestVersion && \n                      <Flex\n                        pt={2}\n                        width={[1,1/3]}\n                        id={'allocation-chart'}\n                        flexDirection={'column'}\n                        alignItems={'flex-start'}\n                        justifyContent={'flex-start'}\n                      >\n                        <AllocationChart\n                          height={310}\n                          {...this.props}\n                          parentId={'allocation-chart'}\n                        />\n                        <Rebalance\n                          {...this.props}\n                        />\n                      </Flex>\n                    }\n                    <Flex\n                      mb={[0,3]}\n                      id={'chart-ALL'}\n                      pl={[0,this.state.idleVersion === this.state.latestVersion ? 0 : 3]}\n                      width={[1, this.state.idleVersion === this.state.latestVersion ? 2/3 : 1]}\n                    >\n                      <Flex alignItems={'flex-start'} justifyContent={'flex-start'} flexDirection={'column'} width={1}>\n                        <Heading.h4\n                          mb={2}\n                          ml={3}\n                          mt={[3,4]}\n                          fontWeight={4}\n                          fontSize={[2,3]}\n                          textAlign={'left'}\n                          color={'dark-gray'}\n                          lineHeight={'initial'}\n                        >\n                          Allocations over time\n                        </Heading.h4>\n                        <StatsChart\n                          height={350}\n                          {...this.state}\n                          chartMode={'ALL'}\n                          parentId={'chart-ALL'}\n                          theme={this.props.theme}\n                          isMobile={this.props.isMobile}\n                          themeMode={this.props.themeMode}\n                          contracts={this.props.contracts}\n                          apiResults={this.state.apiResults}\n                          idleVersion={this.state.idleVersion}\n                          apiResults_unfiltered={this.state.apiResults_unfiltered}\n                        />\n                      </Flex>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n\n                <Flex\n                  position={'relative'}\n                >\n                  <Flex\n                    width={1}\n                    id={'carousel-container'}\n                    justifyContent={'flex-end'}\n                  >\n                    <RoundIconButton\n                      buttonProps={{\n                        mr:3\n                      }}\n                      iconName={'ArrowBack'}\n                      disabled={this.state.carouselIndex === 0}\n                      handleClick={ e => this.handleCarousel('back') }\n                    />\n                    <RoundIconButton\n                      iconName={'ArrowForward'}\n                      handleClick={ e => this.handleCarousel('next') }\n                      disabled={this.state.carouselIndex === this.state.carouselMax}\n                    />\n                  </Flex>\n                  <Flex\n                    mt={5}\n                    height={'400px'}\n                    position={'absolute'}\n                    id={'carousel-cursor'}\n                    width={['444%','200%']}\n                    justifyContent={'flex-start'}\n                    left={this.state.carouselOffsetLeft}\n                    style={{\n                      transition:'left 0.3s ease-in-out'\n                    }}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        id='chart-AUM'\n                      >\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            ml={3}\n                            mt={3}\n                            mb={2}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Asset Under Management\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'AUM'}\n                            parentId={'chart-AUM'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-APR' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            APRs\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'APR'}\n                            parentId={'chart-APR'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    {\n                      !disabledCharts.includes('score') &&\n                        <DashboardCard\n                          cardProps={{\n                            mr:4,\n                            height:'fit-content',\n                            style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                          }}\n                          title={'Risk Score'}\n                          description={'Idle Risk Score is a weighted average of the underlying protocols risks assessed by DeFi Score'}\n                          titleParentProps={{\n                            ml:16,\n                            mt:16\n                          }}\n                        >\n                          <Flex id='chart-SCORE' width={1}>\n                            <Flex\n                              mb={3}\n                              width={1}\n                              flexDirection={'column'}\n                              alignItems={'flex-start'}\n                              justifyContent={'center'}\n                            >\n                              <StatsChart\n                                height={300}\n                                {...this.state}\n                                chartMode={'SCORE'}\n                                parentId={'chart-SCORE'}\n                                theme={this.props.theme}\n                                isMobile={this.props.isMobile}\n                                themeMode={this.props.themeMode}\n                                contracts={this.props.contracts}\n                                apiResults={this.state.apiResults}\n                                idleVersion={this.state.idleVersion}\n                                apiResults_unfiltered={this.state.apiResults_unfiltered}\n                              />\n                            </Flex>\n                          </Flex>\n                        </DashboardCard>\n                    }\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-VOL' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Volume\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'VOL'}\n                            parentId={'chart-VOL'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                </Flex>\n              </Box>\n            )\n          }\n          <DateRangeModal\n            {...this.props}\n            minDate={this.state.minDate}\n            maxDate={this.state.maxDate}\n            handleSelect={this.setDateRange}\n            quickSelections={this.quickSelections}\n            isOpen={this.state.dateRangeModalOpened}\n            closeModal={e => this.setDateRangeModal(false)}\n            startDate={this.state.startTimestampObj ? this.state.startTimestampObj._d : null}\n            endDate={this.state.endTimestampObj ? this.state.endTimestampObj._d : null}\n          />\n        </Flex>\n      );\n    }\n  }\n}\n\nexport default Stats;","import Title from '../Title/Title';\nimport IconBox from '../IconBox/IconBox';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport { Flex, Icon, Text, Box, Image } from \"rimble-ui\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass Utils extends Component {\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    const SubComponent = this.props.selectedSubsection && this.props.selectedSubsection.subComponent ? this.props.selectedSubsection.subComponent : null;\n    const viewOnly = this.props.connectorName === 'custom';\n    const showBreadCrumb = typeof this.props.showBreadCrumb !== 'undefined' ? this.props.showBreadCrumb : true;\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.props.selectedSubsection ? (\n            <Box\n              width={1}\n            >\n              {\n                showBreadCrumb && (\n                  <Flex\n                    width={1}\n                  >\n                    <Breadcrumb\n                      {...this.props}\n                      showPathMobile={true}\n                      isMobile={this.props.isMobile}\n                      path={[this.props.selectedSubsection.label]}\n                      text={this.props.selectedSection.label.toUpperCase()}\n                      handleClick={ e => this.props.goToSection(this.props.selectedSection.route) }\n                    />\n                  </Flex>\n                )\n              }\n              <Flex\n                my={[2,3]}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <Title\n                  mb={2}\n                >\n                  {this.props.selectedSubsection.label}\n                </Title>\n                <Text\n                  textAlign={'center'}\n                  dangerouslySetInnerHTML={{\n                    __html:this.props.selectedSubsection.desc\n                  }}\n                >\n                </Text>\n              </Flex>\n              <SubComponent\n                {...this.props}\n                {...this.props.selectedSubsection.directProps}\n                toolProps={this.props.selectedSubsection.props}\n              />\n            </Box>\n          ) : (\n            <Flex\n              my={[2,3]}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Title\n                mb={3}\n              >\n                Tools\n              </Title>\n              <Flex\n                width={1}\n                style={{\n                  flexWrap:'wrap'\n                }}\n                justifyContent={viewOnly ? 'center' : 'flex-start'}\n              >\n              {\n                viewOnly ? (\n                  <IconBox\n                    cardProps={{\n                      maxWidth:[1,'35em']\n                    }}\n                    icon={'Visibility'}\n                    text={'You are using Idle in \"Read-Only\" mode.<br />Logout and connect with your wallet to interact.'}\n                  />\n                ) : this.props.selectedSection.submenu.map( (tool,toolIndex) => (\n                  <DashboardCard\n                    isInteractive={true}\n                    key={`tool_${toolIndex}`}\n                    cardProps={{\n                      p:[3,4],\n                      mb:[3,3],\n                      mr:[0,'2%'],\n                      style:{\n                        flex: this.props.isMobile ? '1 1 100%' : '0 0 31%'\n                      },\n                      alignItems:'center',\n                      flexDirection:'column',\n                      justifyContent:'center'\n                    }}\n                    handleClick={ e => this.props.goToSection(this.props.selectedSection.route+'/'+tool.route) }\n                  >\n                    <Text\n                      fontSize={[3,4]}\n                      textAlign={'center'}\n                    >\n                      {tool.label}\n                    </Text>\n                    <Flex\n                      justifyContent={'center'}\n                    >\n                      {\n                        tool.image ? (\n                          <Image\n                            my={[0,2]}\n                            height={'2.2em'}\n                            src={tool.image}\n                          />\n                        ) : tool.icon && (\n                          <Icon\n                            my={[0,2]}\n                            size={'3em'}\n                            name={tool.icon}\n                          />\n                        )\n                      }\n                    </Flex>\n                    <Text\n                      fontSize={[2,2]}\n                      textAlign={'center'}\n                      dangerouslySetInnerHTML={{\n                        __html:tool.desc\n                      }}\n                    >\n                    </Text>\n                  </DashboardCard>\n                ) )\n              }\n              </Flex>\n            </Flex>\n          )\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default Utils;\n","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Heading, Text, Tooltip, Icon } from \"rimble-ui\";\nimport PortfolioEquity from '../PortfolioEquity/PortfolioEquity';\n\nclass FundsOverview extends Component {\n\n  state = {\n    // govTokensAprs:null,\n    aggregatedValues:[],\n    govTokensTotalApr:null,\n    govTokensUserBalance:null,\n    govTokensDistribution:null,\n    govTokensTotalBalance:null,\n    govTokensTotalAprTooltip:null,\n    idleTokenUserDistribution:null,\n    govTokensDistributionTooltip:null,\n    govTokensTotalBalanceTooltip:null\n  };\n\n  // Utils\n  functionsUtil = null;\n  idleGovToken = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    this.idleGovToken = this.functionsUtil.getIdleGovToken();\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const isRisk = this.props.selectedStrategy === 'risk';\n\n    const [\n      // govTokensAprs,\n      idleTokenUserDistribution,\n      govTokensUserBalance,\n      apy,\n      depositTimestamp,\n      days\n    ] = await Promise.all([\n      // this.functionsUtil.getGovTokensAprs(this.props.selectedToken,this.props.tokenConfig),\n      this.idleGovToken.getUserDistribution(this.props.account,govTokenAvailableTokens,true),\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,null),\n      this.functionsUtil.loadAssetField('apy',this.props.selectedToken,this.props.tokenConfig,this.props.account,false),\n      this.functionsUtil.loadAssetField('depositTimestamp',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    let avgAPY = await this.functionsUtil.getAvgAPYStats(this.props.tokenConfig.address,isRisk,depositTimestamp);\n\n    if (!avgAPY || this.functionsUtil.BNify(avgAPY).lte(0)){\n      avgAPY = apy;\n    }\n\n    const govTokensTotalBalance = govTokensUserBalance ? Object.values(govTokensUserBalance).reduce( (totBalance,govTokenBalance) => {\n      return totBalance.plus(this.functionsUtil.BNify(govTokenBalance));\n    },this.functionsUtil.BNify(0)) : null;\n\n    const govTokensTotalBalanceTooltip = govTokensUserBalance ? Object.keys(govTokensUserBalance).map( govToken => {\n      const balance = govTokensUserBalance[govToken];\n      if (balance.gt(0)){\n        return `+${balance.toFixed(2)} ${govToken}`;\n      } else {\n        return null;\n      }\n    }).filter(v => (v !== null)) : null;\n\n    // console.log(govTokensTotalBalance,govTokensUserBalance,govTokensTotalBalanceTooltip);\n\n    // const govTokensTotalApr = govTokensAprs ? Object.values(govTokensAprs).reduce( (totApr,govTokenApr) => {\n    //   return totApr.plus(this.functionsUtil.BNify(govTokenApr));\n    // },this.functionsUtil.BNify(0)) : null;\n\n    // const govTokensTotalAprTooltip = govTokensAprs ? Object.keys(govTokensAprs).map( govToken => {\n    //   const apr = govTokensAprs[govToken];\n    //   if (apr.gt(0)){\n    //     return `${govToken}: ${apr.toFixed(2)}%`;\n    //   }\n    //   return null;\n    // }).filter(v => (v !== null)) : null;\n\n    /*\n    const govTokensDistributionTooltip = govTokensUserDistribution ? Object.keys(govTokensUserDistribution).map( govToken => {\n      const speed = govTokensUserDistribution[govToken];\n      if (speed.gt(0)){\n        const distributionFrequency = this.functionsUtil.getGlobalConfig(['govTokens',govToken,'distributionFrequency']);\n        return `+${speed.toFixed(4)} ${govToken}/${distributionFrequency}`;\n      }\n      return null;\n    }).filter(v => (v !== null)) : null;\n    */\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          desc:this.functionsUtil.getGlobalConfig(['messages','apyLong']),\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '0.00%') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    this.setState({\n      // govTokensAprs,\n      aggregatedValues,\n      // govTokensTotalApr,\n      govTokensUserBalance,\n      govTokensTotalBalance,\n      // govTokensTotalAprTooltip,\n      idleTokenUserDistribution,\n      govTokensTotalBalanceTooltip\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Flex\n                          mt={2}\n                          width={1}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <Text\n                            fontWeight={2}\n                            fontSize={[1,2]}\n                            color={'cellText'}\n                          >\n                            {v.props.title}\n                          </Text>\n                          {\n                            v.props.desc && \n                              <Tooltip\n                                placement={'bottom'}\n                                message={v.props.desc}\n                              >\n                                <Icon\n                                  ml={2}\n                                  name={\"Info\"}\n                                  size={'1em'}\n                                  color={'cellTitle'}\n                                />\n                              </Tooltip>\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquity\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              chartToken={this.props.selectedToken}\n              enabledTokens={[this.props.selectedToken]}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLent',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:this.props.theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPerc',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.govTokensTotalBalanceTooltip && this.state.govTokensTotalBalanceTooltip.length>0 && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      this.state.govTokensTotalBalanceTooltip.map((govTokenBalance,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          mt={govTokenIndex ? 1 : 0}\n                          key={`govToken_${govTokenIndex}`}\n                        >\n                          {govTokenBalance}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                )/* : this.state.govTokensUserBalance && Object.keys(this.state.govTokensUserBalance).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + ${this.state.govTokensTotalBalance.toFixed(4)}\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalBalanceTooltip.join(' / ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Fees\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'feesCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'apy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.idleTokenUserDistribution && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      mt={1}\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      {this.state.idleTokenUserDistribution.toFixed(4)} {this.idleGovToken.tokenName}/{this.idleGovToken.tokenConfig.distributionFrequency}\n                    </Text>\n                  </Flex>\n                )\n                /*\n                this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length===1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      Object.keys(this.state.govTokensAprs).map((govToken,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          ml={govTokenIndex ? 2 : 0}\n                          key={`govToken_${govToken}`}\n                        >\n                          {this.state.govTokensAprs[govToken].toFixed(2)}% {govToken}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                ) : this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + {this.state.govTokensTotalApr.toFixed(2)}%\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalAprTooltip.join('; ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Risk Score\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'score',\n                  props:{\n                    decimals:1,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverview;","import React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Icon, Checkbox, Box, Link, Input, Tooltip } from \"rimble-ui\";\n\nclass CurveRedeem extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    tokenConfig:null,\n    unevenAmounts:null,\n    selectedToken:null,\n    availableTokens:null,\n    buttonDisabled:false,\n    showMaxSlippage:false,\n    redeemUnderlying:true,\n    curveTokenConfig:null,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    curveTokensAmounts:null,\n    fastBalanceSelector:null,\n    redeemUnevenAmounts:false,\n    curveRedeemableIdleTokens:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.initToken();\n  }\n\n  showMaxSlippage(){\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  async calculateSlippage(max_slippage=null){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (!inputValue || inputValue.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    let withdrawSlippage = null;\n    let curveTokensAmounts = null;\n    let curveIdleTokensAmounts = null;\n    if (this.state.redeemUnevenAmounts){\n      [\n        curveTokensAmounts,\n        curveIdleTokensAmounts\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokensAmounts(this.props.account,normalizedAmount,true),\n        this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,normalizedAmount)\n      ]);\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false,curveIdleTokensAmounts);\n    } else {\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false);\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const redeemableBalance = inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.times(100).plus(this.state.maxSlippage || this.functionsUtil.BNify(0)).div(100)));\n      curveTokensAmounts = {};\n      curveTokensAmounts[this.state.selectedToken] = redeemableBalance;\n    }\n\n    if (withdrawSlippage){\n      withdrawSlippage = withdrawSlippage.times(100);\n    }\n\n    this.setState({\n      withdrawSlippage,\n      curveTokensAmounts,\n      curveIdleTokensAmounts\n    });\n\n    // Add max slippage but don't save in state\n    if (withdrawSlippage && max_slippage){\n      withdrawSlippage = withdrawSlippage.plus(max_slippage);\n    }\n\n    return withdrawSlippage;\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.tokenConfig.idle.token !== this.props.tokenConfig.idle.token;\n    if (tokenChanged){\n      await this.initToken();\n    }\n\n    const redeemUnevenAmountsChanged = prevState.redeemUnevenAmounts !== this.state.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    const inputChanged = prevState.inputValue !== this.state.inputValue;\n    const maxSlippageChanged = parseFloat(prevState.maxSlippage) !== parseFloat(this.state.maxSlippage);\n    const tokenConfigChanged = JSON.stringify(prevState.tokenConfig) !== JSON.stringify(this.state.tokenConfig);\n    if (inputChanged || tokenConfigChanged || maxSlippageChanged){\n      this.calculateSlippage();\n    }\n\n    const selectedTokenChanged = prevState.selectedToken !== this.state.selectedToken;\n    if (selectedTokenChanged){\n      this.loadSelectedTokenConfig();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    let buttonDisabled = false;\n\n    // if (this.state.redeemUnevenAmounts){\n      buttonDisabled = !amount || amount.gt(this.state.curveTokenBalance);\n    // } else {\n      // buttonDisabled = !amount || amount.gt(this.state.redeemableBalance);\n    // }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    let inputValue = null;\n\n    // if (this.state.redeemUnevenAmounts){\n    inputValue = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n    // } else {\n      // inputValue = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n    // }\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  selectDestinationToken(selectedToken){\n    this.setState({\n      selectedToken\n    });\n  }\n\n  async loadSelectedTokenConfig(){\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const tokenConfig = this.state.availableTokens[this.state.selectedToken];\n    const curveTokenConfig = curveConfig.availableTokens[tokenConfig.idle.token];\n    this.setState({\n      tokenConfig,\n      curveTokenConfig\n    });\n  }\n\n  async initToken(){\n    const [curvePoolContract,curveSwapContract] = await Promise.all([\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract()\n    ]);\n\n    const [\n      curveTokenPrice,\n      curveTokenBalance,\n      curveRedeemableIdleTokens,\n    ] = await Promise.all([\n      this.functionsUtil.getCurveTokenPrice(),\n      this.functionsUtil.getCurveTokenBalance(this.props.account),\n      this.functionsUtil.getCurveRedeemableIdleTokens(this.props.account)\n    ]);\n\n    const unevenAmounts = [];\n    const redeemableBalance = curveTokenBalance ? curveTokenBalance.times(curveTokenPrice) : this.functionsUtil.BNify(0);\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();;\n    const selectedToken = Object.keys(availableTokens)[0];\n\n    this.setState({\n      selectedToken,\n      unevenAmounts,\n      curveTokenPrice,\n      availableTokens,\n      curvePoolContract,\n      curveSwapContract,\n      curveTokenBalance,\n      redeemableBalance,\n      curveRedeemableIdleTokens\n    });\n  }\n\n  async redeem(){\n\n    if (!this.state.curveTokenBalance){\n      return false;\n    }\n\n    const callbackRedeem = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveRedeem`,\n        eventAction: this.props.selectedToken,\n        eventValue: this.state.curveTokenBalance.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackRedeem === 'function' && txSucceeded){\n        this.props.callbackRedeem(tx);\n      }\n    };\n\n    const callbackReceiptRedeem = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.curveSwapContract.name;\n    const withdrawSlippage = await this.calculateSlippage(this.state.maxSlippage);\n    const max_slippage = this.functionsUtil.BNify(this.state.maxSlippage).div(100);\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    // const curveTokenBalance = this.functionsUtil.normalizeTokenAmount(this.state.curveTokenBalance,this.state.curvePoolContract.decimals);\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    if (this.state.redeemUnevenAmounts){\n      const min_amounts = this.state.redeemUnderlying ? await this.functionsUtil.getCurveTokensAmounts(this.props.account,_amount,false,true) : await this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,_amount,max_slippage);\n      console.log('remove_liquidity',_amount.toString(),min_amounts);\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    } else {\n      const coin_index = this.state.curveTokenConfig.migrationParams.coinIndex;\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.div(100))),this.state.tokenConfig.decimals);\n      // const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.minus(inputValue.times(withdrawSlippage.div(100))),this.state.curveTokenConfig.decimals);\n      // let _token_amount = await this.functionsUtil.getCurveTokenAmount(amounts,false);\n      // _token_amount = this.functionsUtil.BNify(_token_amount).isGreaterThan(curveTokenBalance) ? curveTokenBalance : this.functionsUtil.BNify(_token_amount);\n\n      console.log('remove_liquidity_one_coin',_amount, coin_index, min_amount);\n\n      // debugger;\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_one_coin', [_amount, coin_index, min_amount, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    }\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  getFastBalanceSelector(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n\n  render() {\n\n    const showSlippage = !this.state.buttonDisabled && this.state.withdrawSlippage;\n    const curveTokenName = this.functionsUtil.getGlobalConfig(['curve','poolContract','token']);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          {\n            !this.state.curveTokenBalance ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3,\n                  minHeight:'195px',\n                  style:{\n                    display:'flex',\n                    alignItems:'center',\n                    justifyContent:'center'\n                  }\n                }}\n              >\n                <FlexLoader\n                  flexProps={{\n                    flexDirection:'row'\n                  }}\n                  loaderProps={{\n                    size:'30px'\n                  }}\n                  textProps={{\n                    ml:2\n                  }}\n                  text={'Checking Curve Pool...'}\n                />\n              </DashboardCard>\n            ) : this.state.processing.loading ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3\n                }}\n              >\n                <Flex\n                  flexDirection={'column'}\n                >\n                  <TxProgressBar\n                    web3={this.props.web3}\n                    hash={this.state.processing.txHash}\n                    endMessage={`Finalizing redeem request...`}\n                    cancelTransaction={this.cancelTransaction.bind(this)}\n                    waitText={ this.props.waitText ? this.props.waitText : 'Redeem estimated in'}\n                  />\n                </Flex>\n              </DashboardCard>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    mb:2\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'1.8em'}\n                      color={'cellText'}\n                      name={'FileUpload'}\n                    />\n                    <Text\n                      mt={1}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Withdraw from the Curve Pool in a specific token or in uneven amounts of tokens (with no slippage).\n                    </Text>\n                    <Flex\n                      mt={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                    >\n                      <Checkbox\n                        required={false}\n                        label={`Redeem with no slippage`}\n                        checked={this.state.redeemUnevenAmounts}\n                        onChange={ e => this.toggleUnevenAmounts(e.target.checked) }\n                      />\n                      <Tooltip\n                        placement={'top'}\n                        message={`You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.`}\n                      >\n                        <Icon\n                          size={'1em'}\n                          color={'cellTitle'}\n                          name={\"InfoOutline\"}\n                        />\n                      </Tooltip>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n                {\n                  !this.state.redeemUnevenAmounts/* && (!this.props.selectedToken || (this.state.showMaxSlippage && showSlippage))*/ && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      {\n                        this.state.tokenConfig && \n                          <Box\n                            width={1}\n                          >\n                            <Text\n                              mb={1}\n                            >\n                              Select destination token:\n                            </Text>\n                            <AssetSelector\n                              {...this.props}\n                              id={'token-from'}\n                              showBalance={false}\n                              tokenConfig={this.state.tokenConfig}\n                              selectedToken={this.state.selectedToken}\n                              availableTokens={this.state.availableTokens}\n                              onChange={this.selectDestinationToken.bind(this)}\n                            />\n                          </Box>\n                      }\n                    </Box>\n                  )\n                }\n                {\n                  this.state.curveTokensAmounts && !this.state.buttonDisabled && (\n                    <DashboardCard\n                      cardProps={{\n                        mt:1,\n                        mb:2,\n                        py:2,\n                        px:1\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Text\n                          mt={1}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          You will receive:\n                        </Text>\n                        <Flex\n                          mt={2}\n                          width={1}\n                          boxShadow={0}\n                          style={{\n                            flexWrap:'wrap'\n                          }}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                          >\n                            {\n                              Object.keys(this.state.curveTokensAmounts).map( token => {\n                                const balance = this.state.curveTokensAmounts[token];\n                                return (\n                                  <Flex\n                                    mb={1}\n                                    mx={1}\n                                    width={'auto'}\n                                    flexDirection={'row'}\n                                    key={`tokenBalance_${token}`}\n                                    justifyContent={'flex-start'}\n                                  >\n                                    <AssetField\n                                      token={token}\n                                      tokenConfig={{\n                                        token:token\n                                      }}\n                                      fieldInfo={{\n                                        name:'icon',\n                                        props:{\n                                          mr:1,\n                                          width:['1.4em','1.6em'],\n                                          height:['1.4em','1.6em']\n                                        }\n                                      }}\n                                    />\n                                    <SmartNumber\n                                      ml={1}\n                                      fontSize={[0,1]}\n                                      fontWeight={500}\n                                      maxPrecision={4}\n                                      color={'cellText'}\n                                      number={balance.toString()}\n                                    />\n                                  </Flex>\n                                );\n                            })\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n                {\n                  this.state.showMaxSlippage && showSlippage && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Text>\n                          Choose max slippage:\n                        </Text>\n                        <Tooltip\n                          placement={'top'}\n                          message={`Max additional slippage on top of the one shown below`}\n                        >\n                          <Icon\n                            ml={1}\n                            size={'1em'}\n                            color={'cellTitle'}\n                            name={\"InfoOutline\"}\n                          />\n                        </Tooltip>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        {\n                          [0.2,0.5,1,5].map( slippage => (\n                            <FastBalanceSelector\n                              cardProps={{\n                                p:1\n                              }}\n                              textProps={{\n                                fontSize:1\n                              }}\n                              percentage={slippage}\n                              key={`selector_${slippage}`}\n                              onMouseDown={()=>this.setMaxSlippage(slippage)}\n                              isActive={this.state.maxSlippage === parseFloat(slippage)}\n                            />\n                          ))\n                        }\n                      </Flex>\n                    </Box>\n                  )\n                }\n                <Flex\n                  mb={3}\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  <Flex\n                    mb={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'flex-end'}\n                  >\n                    {\n                      showSlippage && (\n                        <Flex\n                          width={1}\n                          maxWidth={'40%'}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            textAlign={'right'}\n                            style={{\n                              whiteSpace:'nowrap'\n                            }}\n                            color={ parseFloat(this.state.withdrawSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                          >\n                            {\n                              parseFloat(this.state.withdrawSlippage.toFixed(3)) === 0 ?\n                                'No Slippage'\n                              : `${ this.state.withdrawSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.withdrawSlippage.abs().toFixed(3)}%`\n                            }\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={ this.state.redeemUnevenAmounts ? `You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.` : this.state.withdrawSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                          {\n                            !this.state.redeemUnevenAmounts &&\n                              <Link\n                                ml={1}\n                                color={'copyColor'}\n                                hoverColor={'primary'}\n                                onClick={this.showMaxSlippage.bind(this)}\n                              >\n                                change\n                              </Link>\n                          }\n                        </Flex>\n                      )\n                    }\n                    <Flex\n                      width={1}\n                      maxWidth={'60%'}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      justifyContent={'flex-end'}\n                    >\n                      <Link\n                        fontSize={1}\n                        fontWeight={3}\n                        color={'dark-gray'}\n                        textAlign={'right'}\n                        hoverColor={'copyColor'}\n                        onClick={ (e) => this.setFastBalanceSelector(100) }\n                        style={{\n                          maxWidth:'100%',\n                          overflow:'hidden',\n                          whiteSpace:'nowrap',\n                          textOverflow:'ellipsis'\n                        }}\n                      >\n                        {this.state.curveTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {curveTokenName}\n                      </Link>\n                    </Flex>\n                  </Flex>\n                  <Input\n                    min={0}\n                    type={\"number\"}\n                    required={true}\n                    height={'3.4em'}\n                    borderRadius={2}\n                    fontWeight={500}\n                    boxShadow={'none !important'}\n                    placeholder={`Insert amount`}\n                    onChange={this.changeInputValue.bind(this)}\n                    border={`1px solid ${this.props.theme.colors.divider}`}\n                    value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                  />\n                  <Flex\n                    mt={2}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      [25,50,75,100].map( percentage => (\n                        <FastBalanceSelector\n                          percentage={percentage}\n                          key={`selector_${percentage}`}\n                          onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                          isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                        />\n                      ))\n                    }\n                  </Flex>\n                </Flex>\n                <Flex\n                  justifyContent={'center'}\n                >\n                  <RoundButton\n                    buttonProps={{\n                      mt:2,\n                      width:[1,1/2],\n                      disabled:this.state.buttonDisabled\n                    }}\n                    handleClick={this.redeem.bind(this)}\n                  >\n                    Redeem\n                  </RoundButton>\n                </Flex>\n              </Flex>\n            )\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveRedeem;","import React, { Component } from 'react';\nimport {\n  Button,\n  Flex,\n  Box,\n  Text\n} from \"rimble-ui\";\nimport styles from './TwitterShareButton.module.scss';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\n\nclass TwitterShareButton extends Component {\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  componentWillMount() {\n    this.loadUtils();\n  }\n\n  componentDidMount() {\n    this.loadUtils();\n  }\n\n  componentDidUpdate() {\n    this.loadUtils();\n  }\n\n  share = () => {\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'Share',\n      eventAction: 'twitter',\n      eventLabel: this.props.parent\n    });\n\n    const w = Math.min(window.innerWidth,600);\n    const h = 350;\n    const x = (window.innerWidth-w)/2;\n    const y = 150;\n    window.open(`https://twitter.com/intent/tweet?text=${this.props.tweet}`,\"_blank\",`toolbar=yes,scrollbars=no,resizable=no,top=${y},left=${x},width=${w},height=${h}`);\n  }\n\n  render() {\n    return (\n        <Button\n          borderRadius={1}\n          mainColor={'#2aa6f2'}\n          contrastColor={'white'}\n          onClick={ e => { this.share() } }\n        >\n          <Flex flexDirection={'row'} alignItems={'center'} justifyContent={'center'}>\n            <Box className={styles.twitterIcon} />\n            <Text color={'white'} fontWeight={3} ml={2}>{ this.props.text ? this.props.text : 'Tweet' }</Text>\n          </Flex>\n        </Button>\n    );\n  }\n}\n\nexport default TwitterShareButton;\n","import React from \"react\";\nimport {\n  Text,\n  Modal,\n  Link,\n  Flex\n} from \"rimble-ui\";\nimport ModalCard from './ModalCard';\nimport TwitterShareButton from '../../TwitterShareButton/TwitterShareButton.js';\nimport Confetti from 'react-confetti/dist/react-confetti';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\n\nclass ShareModal extends React.Component {\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  componentWillMount() {\n    this.loadUtils();\n  }\n\n  componentDidMount() {\n    this.loadUtils();\n  }\n\n  componentDidUpdate() {\n    this.loadUtils();\n  }\n\n  closeModal = async (action) => {\n    const globalConfigs = this.functionsUtil.getGlobalConfigs();\n    // Send Google Analytics event\n    if (globalConfigs.analytics.google.events.enabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'Share',\n        eventAction: action,\n        eventLabel: 'ShareModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n    const tweet = window.escape(this.props.tweet);\n    const customText = {__html: this.props.text};\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        <ModalCard closeFunc={this.props.closeModal}>\n          {\n            this.props.confettiEnabled &&\n            <Confetti\n              style={{ position: 'fixed','zIndex':9999 }}\n              run={true}\n              recycle={true}\n              width={window.innerWidth}\n              height={window.innerHeight}\n            />\n          }\n          <ModalCard.Header title={this.props.title} icon={this.props.icon}></ModalCard.Header>\n          <ModalCard.Body>\n            <Flex my={3} width={1} flexDirection={'column'} mx={'auto'}>\n              <Text color={'dark-gray'} textAlign={'center'} fontSize={3} mb={2} dangerouslySetInnerHTML={customText}></Text>\n            </Flex>\n            <Flex mb={3} flexDirection={'column'} alignItems={'center'} justifyContent={'center'}>\n              <TwitterShareButton tweet={tweet} text={'Share now'} parent={'ShareModal'} />\n              <Link mt={2} onClick={ e => this.closeModal('continue_without_sharing') } hoverColor={'blue'}>continue without sharing</Link>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default ShareModal;","import Migrate from '../Migrate/Migrate';\nimport IconBox from '../IconBox/IconBox';\nimport React, { Component } from 'react';\nimport ExtLink from '../ExtLink/ExtLink';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport ConnectBox from '../ConnectBox/ConnectBox';\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport RoundButton from '../RoundButton/RoundButton';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport ShareModal from '../utilities/components/ShareModal';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport TransactionField from '../TransactionField/TransactionField';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Input, Box, Icon, Link, Checkbox, Tooltip, Image } from \"rimble-ui\";\n\nclass DepositRedeem extends Component {\n\n  state = {\n    txError:{},\n    tokenAPY:'-',\n    inputValue:{},\n    processing:{},\n    curveAPY:null,\n    totalAUM:null,\n    canRedeem:false,\n    maxSlippage:0.2,\n    canDeposit:false,\n    action:'deposit',\n    directMint:false,\n    activeModal:null,\n    tokenGovTokens:{},\n    showBuyFlow:false,\n    maxUnlentPerc:null,\n    unlentBalance:null,\n    tokenApproved:false,\n    skipMigration:false,\n    redeemSkipGov:false,\n    showRedeemFlow:false,\n    contractPaused:false,\n    buttonDisabled:false,\n    canRedeemCurve:false,\n    erc20ForwarderTx:null,\n    signedParameters:null,\n    minAmountForMint:null,\n    showMaxSlippage:false,\n    redeemGovTokens:false,\n    canDepositCurve:false,\n    redeemSkipGovTokens:[],\n    fastBalanceSelector:{},\n    actionProxyContract:{},\n    migrationEnabled:false,\n    componentMounted:false,\n    curveTokenBalance:null,\n    agreeSkipGovTokens:false,\n    redeemCurveEnabled:false,\n    depositCurveBalance:null,\n    depositCurveEnabled:true,\n    showAdvancedOptions:false,\n    skipGovTokensGasSave:null,\n    depositCurveSlippage:null,\n    erc20ForwarderContract:{},\n    erc20ForwarderEnabled:false,\n    showETHWrapperEnabled:false,\n    skipGovTokensGasSaveUSD:null,\n    metaTransactionsEnabled:true,\n    skippedGovTokensBalance:null,\n    minAmountForMintReached:false,\n    loadingErc20ForwarderTx:false\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadProxyContracts();\n  }\n\n  async componentDidMount(){\n\n  }\n\n  setShowRedeemFlow = (showRedeemFlow) => {\n    this.setState({\n      showRedeemFlow\n    });\n  }\n\n  setShowBuyFlow = (showBuyFlow) => {\n    this.setState({\n      showBuyFlow\n    });\n  }\n\n  toggleShowAdvancedOptions = showAdvancedOptions => {\n    this.setState((prevState) => ({\n      showAdvancedOptions:!prevState.showAdvancedOptions\n    }));\n  }\n\n  toggleSkipMigration = skipMigration => {\n    this.setState({\n      skipMigration\n    });\n  }\n\n  toggleRedeemCurve = redeemCurveEnabled => {\n    this.setState({\n      redeemCurveEnabled\n    });\n  }\n\n  toggleDepositCurve = depositCurveEnabled => {\n    this.setState({\n      depositCurveEnabled\n    });\n  }\n\n  toggleShowETHWrapper = showETHWrapperEnabled => {\n    this.setState({\n      showETHWrapperEnabled\n    });\n  }\n\n  toggleAgreeSkipGovTokens = agreeSkipGovTokens => {\n    this.setState({\n      agreeSkipGovTokens\n    });\n  }\n\n  toggleSkipMint = (directMint) => {\n    this.setState({\n      directMint\n    });\n  }\n\n  toggleRedeemGovTokens = (redeemGovTokens) => {\n    this.setState({\n      redeemGovTokens,\n      redeemSkipGovTokens:[],\n      agreeSkipGovTokens:false,\n      skippedGovTokensBalance:this.functionsUtil.BNify(0),\n      redeemSkipGov:redeemGovTokens?false:this.state.redeemSkipGov\n    });\n  }\n\n  toggleRedeemSkipGov = (redeemSkipGov) => {\n    this.setState({\n      redeemSkipGov,\n      redeemSkipGovTokens:[],\n      agreeSkipGovTokens:false,\n      skippedGovTokensBalance:this.functionsUtil.BNify(0),\n      redeemGovTokens:redeemSkipGov?false:this.state.redeemGovTokens\n    });\n  }\n\n  getSkippedGovTokensFlags = async () => {\n    const govTokensIndexes = await this.functionsUtil.getGovTokensIndexes(this.props.account,this.props.tokenConfig);\n    const govTokensFlags = Object.keys(govTokensIndexes).map( token => {\n      return this.state.redeemSkipGovTokens.includes(token);\n    });\n    // console.log('getSkippedGovTokensFlags',govTokensIndexes,govTokensFlags);\n    return govTokensFlags;\n  }\n\n  calculateSkippedGovTokens = async () => {\n    let skippedGovTokensBalance = this.functionsUtil.BNify(0);\n    const DAITokenConfig = this.functionsUtil.getGlobalConfig(['stats','tokens','DAI']);\n\n    await this.functionsUtil.asyncForEach(this.state.redeemSkipGovTokens, async (govToken) => {\n      const govTokenConfig = this.functionsUtil.getGlobalConfig(['govTokens',govToken]);\n      const govTokenPrice = await this.functionsUtil.getUniswapConversionRate(DAITokenConfig,govTokenConfig);\n      const skippedAmount = this.props.govTokensUserBalances[govToken].times(govTokenPrice);\n      skippedGovTokensBalance = skippedGovTokensBalance.plus(skippedAmount);\n    });\n\n    const _skipGovTokenRedeem = await this.getSkippedGovTokensFlags();\n    const WETHTokenConfig = this.functionsUtil.getGlobalConfig(['stats','tokens','WETH']);\n\n    const [\n      wethPrice,\n      redeemGasUsage,\n      skipGovRedeemGasUsage\n    ] = await Promise.all([\n      this.functionsUtil.getUniswapConversionRate(DAITokenConfig,WETHTokenConfig),\n      this.functionsUtil.estimateMethodGasUsage(this.props.tokenConfig.idle.token, 'redeemIdleToken', [this.functionsUtil.normalizeTokenAmount(this.props.idleTokenBalance,this.props.tokenConfig.decimals)], this.props.account),\n      this.functionsUtil.estimateMethodGasUsage(this.props.tokenConfig.idle.token, 'redeemIdleTokenSkipGov', [this.functionsUtil.normalizeTokenAmount(this.props.idleTokenBalance,this.props.tokenConfig.decimals),_skipGovTokenRedeem], this.props.account)\n    ]);\n\n    const skipGovTokensGasSave = redeemGasUsage && skipGovRedeemGasUsage ? redeemGasUsage.minus(skipGovRedeemGasUsage) : this.functionsUtil.BNify(0);\n    const skipGovTokensGasSaveUSD = skipGovTokensGasSave ? skipGovTokensGasSave.times(wethPrice) : this.functionsUtil.BNify(0);\n\n    this.setState({\n      skipGovTokensGasSave,\n      skipGovTokensGasSaveUSD,\n      skippedGovTokensBalance\n    });\n    return skippedGovTokensBalance;\n  }\n\n  setRedeemSkipGovTokens = (token,checked) => {\n    this.setState((prevState) => {\n      const redeemSkipGovTokens = Object.assign([],prevState.redeemSkipGovTokens);\n      if (!checked && redeemSkipGovTokens.includes(token)){\n        redeemSkipGovTokens.splice(redeemSkipGovTokens.indexOf(token),1);\n      } else if (checked && !redeemSkipGovTokens.includes(token)) {\n        redeemSkipGovTokens.push(token);\n      }\n      return {\n        redeemSkipGovTokens\n      };\n    },() => {\n      this.calculateSkippedGovTokens();\n    });\n  }\n\n  toggleErc20ForwarderEnabled = (erc20ForwarderEnabled) => {\n    const newState = {\n      erc20ForwarderEnabled\n    };\n\n    this.setState(newState, () => {\n      this.cancelTransaction();\n    });\n  }\n\n  toggleMetaTransactionsEnabled = (metaTransactionsEnabled) => {\n    this.setState({\n      metaTransactionsEnabled\n    });\n  }\n\n  async loadProxyContracts(){\n    const actions = ['deposit','redeem'];\n    const newState = {\n      actionProxyContract:{},\n      erc20ForwarderContract:{}\n    };\n\n    await this.functionsUtil.asyncForEach(actions,async (action) => {\n      let mintProxyContractInfo = null;\n      const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods',action,'erc20ForwarderEnabled']);\n\n      if (depositErc20ForwarderEnabled){\n        mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract','methods',action,'erc20ForwarderProxyContract','forwarder']);\n\n        await this.props.initContract(mintProxyContractInfo.name,mintProxyContractInfo.address,mintProxyContractInfo.abi);\n\n        // Init contract for erc20 forwarder\n        const erc20ForwarderContractInfo = this.functionsUtil.getGlobalConfig(['contract','methods',action,'erc20ForwarderProxyContract','tokens',this.props.selectedToken]);\n        if (erc20ForwarderContractInfo){\n          mintProxyContractInfo = erc20ForwarderContractInfo;\n          const erc20ForwarderContract = await this.props.initContract(erc20ForwarderContractInfo.name,erc20ForwarderContractInfo.address,erc20ForwarderContractInfo.abi);\n          newState.erc20ForwarderContract[action] = erc20ForwarderContractInfo;\n          newState.erc20ForwarderContract[action].contract = erc20ForwarderContract.contract;\n        }\n      }\n\n      if (!mintProxyContractInfo){\n        mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract','methods',action,'proxyContract']);\n      }\n\n      const hasProxyContract = mintProxyContractInfo && mintProxyContractInfo.enabled;\n      newState.actionProxyContract[action] = hasProxyContract ? mintProxyContractInfo : null;\n      if (hasProxyContract){\n        const proxyContract = await this.props.initContract(mintProxyContractInfo.name,mintProxyContractInfo.address,mintProxyContractInfo.abi);\n        newState.actionProxyContract[action].contract = proxyContract.contract;\n        newState.actionProxyContract[action].approved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,mintProxyContractInfo.address,this.props.account);\n      }\n    });\n\n    this.setState(newState);\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadAPY(){\n    const tokenAprs = await this.functionsUtil.getTokenAprs(this.props.tokenConfig);\n    if (tokenAprs && tokenAprs.avgApy !== null){\n      const tokenAPY = this.functionsUtil.BNify(tokenAprs.avgApy).toFixed(2);\n\n      let curveAPY = null;\n      if (this.state.canDepositCurve){\n        curveAPY = await this.functionsUtil.getCurveAPY();\n        // console.log('curveAPY',curveAPY);\n        if (curveAPY){\n          curveAPY = curveAPY.plus(tokenAPY);\n        }\n      }\n      this.setState({\n        tokenAPY,\n        curveAPY\n      });\n    }\n  }\n\n  getReferralAddress(){\n    let _referral = this.functionsUtil.getQueryStringParameterByName('_referral');\n    if (!this.functionsUtil.checkAddress(_referral)){\n      _referral = null;\n    }\n    return _referral;\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    // console.log('componentDidUpdate',this.props.tokenBalance);\n\n    if (this.props.tokenBalance === null){\n      return false;\n    }\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    const erc20ForwarderEnabledChanged = prevState.erc20ForwarderEnabled !==  this.state.erc20ForwarderEnabled;\n    const tokenBalanceChanged = prevProps.tokenBalance !== this.props.tokenBalance && this.props.tokenBalance !== null;\n\n    if (tokenChanged || tokenBalanceChanged || erc20ForwarderEnabledChanged){\n      await this.loadProxyContracts();\n      this.loadTokenInfo();\n      return false;\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n\n    if (actionChanged || fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const inputValueChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputValueChanged){\n      // this.checkMinAmountForMint();\n    }\n\n    const redeemSkipGovChanged = prevState.redeemSkipGov !== this.state.redeemSkipGov;\n    const redeemGovTokensChanged = prevState.redeemGovTokens !== this.state.redeemGovTokens;\n    const agreeSkipGovTokensChanged = prevState.agreeSkipGovTokens !== this.state.agreeSkipGovTokens;\n    const redeemSkipGovTokensChanged = JSON.stringify(prevState.redeemSkipGovTokens) !== JSON.stringify(this.state.redeemSkipGovTokens);\n\n    if (redeemGovTokensChanged || actionChanged || redeemSkipGovTokensChanged || redeemSkipGovChanged || agreeSkipGovTokensChanged){\n      this.checkButtonDisabled();\n    }\n\n    const depositCurveChanged = prevState.depositCurveEnabled !== this.state.depositCurveEnabled;\n    const metaTransactionsChanged = prevState.metaTransactionsEnabled !== this.state.metaTransactionsEnabled;\n    if (metaTransactionsChanged || depositCurveChanged){\n      const tokenApproved = await this.checkTokenApproved();\n      this.setState({\n        tokenApproved\n      });\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateCurveSlippage();\n    }\n  }\n\n  async checkMinAmountForMint(){\n    let showPoolPerc = false;\n    let totalAUM = this.state.totalAUM;\n    let maxUnlentPerc = this.state.maxUnlentPerc;\n    const isRisk = this.props.selectedStrategy === 'risk';\n    const inputValue = this.functionsUtil.BNify(this.state.inputValue[this.state.action]);\n\n    if (inputValue.gt(this.props.tokenBalance)){\n      return false;\n    }\n\n    const convertedAmount = await this.functionsUtil.convertTokenBalance(inputValue,this.props.selectedToken,this.props.tokenConfig,isRisk);\n    let minAmountForMint = this.functionsUtil.BNify(this.functionsUtil.getGlobalConfig(['contract','methods','deposit','minAmountForMint']));\n    let minAmountForMintReached = convertedAmount.gte(minAmountForMint);\n\n    // Check token minAmountForMint\n    if (minAmountForMintReached){\n      if (this.props.tokenConfig.deposit && this.props.tokenConfig.deposit.minAmountForMint && convertedAmount.lt(this.props.tokenConfig.deposit.minAmountForMint)){\n        minAmountForMintReached = false;\n      } else {\n        [\n          maxUnlentPerc,\n          totalAUM\n        ] = await Promise.all([\n          maxUnlentPerc || this.functionsUtil.genericContractCall(this.props.tokenConfig.idle.token, 'maxUnlentPerc'),\n          totalAUM ||this.functionsUtil.loadAssetField('pool',this.props.selectedToken,this.props.tokenConfig,this.props.account)\n        ]);\n\n        if (maxUnlentPerc && totalAUM){\n          const depositPerc = inputValue.div(totalAUM).times(100);\n          maxUnlentPerc = this.functionsUtil.BNify(maxUnlentPerc);\n          const maxUnlentPercFormatted = maxUnlentPerc.div(1e3).times(2);\n          if (depositPerc.lt(maxUnlentPercFormatted)){\n            minAmountForMintReached = false;\n          } else if (totalAUM.times(maxUnlentPercFormatted.div(100)).gt(minAmountForMint)) {\n            showPoolPerc = true;\n            minAmountForMint = totalAUM.times(maxUnlentPercFormatted.div(100));\n          }\n        }\n      }\n    }\n\n    this.setState({\n      totalAUM,\n      showPoolPerc,\n      maxUnlentPerc,\n      minAmountForMint,\n      minAmountForMintReached\n    });\n  }\n\n  async calculateCurveSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,curvePoolContractInfo.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositCurveBalance = amount;\n        newState.depositCurveSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n      break;  \n      case 'redeem':\n        // newState.redeemBalance = amount;\n        // newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateCurveSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  checkUseProxyContract = () => {\n    const proxyContract = this.state.actionProxyContract[this.state.action];\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','metaTransactionsEnabled']) && this.state.metaTransactionsEnabled;\n    return ((depositErc20ForwarderEnabled || depositMetaTransactionsEnabled) && proxyContract && this.props.biconomy);\n  }\n\n  approveContract = async (callbackApprove,callbackReceiptApprove) => {\n    if (this.state.depositCurveEnabled){\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve','depositContract']);\n      this.functionsUtil.enableERC20(this.props.selectedToken,curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n    } else {\n      // Check Proxy Contract Approved for Deposit with Biconomy\n      const useProxyContract = this.checkUseProxyContract();\n      if (useProxyContract){\n        const proxyContract = this.state.actionProxyContract[this.state.action];\n        this.functionsUtil.enableERC20(this.props.selectedToken,proxyContract.address,callbackApprove,callbackReceiptApprove);\n      } else {\n        this.functionsUtil.enableERC20(this.props.selectedToken,this.props.tokenConfig.idle.address,callbackApprove,callbackReceiptApprove);\n      }\n    }\n  }\n\n  checkTokenApproved = async () => {\n    let tokenApproved = false;\n    if (this.state.depositCurveEnabled){\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve','depositContract']);\n      tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,curveDepositContract.address,this.props.account);\n    } else {\n      // Check Proxy Contract Approved for Deposit with Biconomy\n      const useProxyContract = this.checkUseProxyContract();\n      if (useProxyContract){\n        // Check for Permit Deposit\n        const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n        if (depositErc20ForwarderEnabled){\n          const permitEnabled = this.functionsUtil.getGlobalConfig(['permit',this.props.selectedToken]);\n          if (permitEnabled){\n            return true;\n          }\n        }\n        // Check proxy contract approved\n        const proxyContract = this.state.actionProxyContract[this.state.action];\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,proxyContract.address,this.props.account);\n        // console.log('tokenApproved 1',tokenApproved);\n      } else {\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,this.props.tokenConfig.idle.address,this.props.account);\n        // console.log('tokenApproved 2',tokenApproved);\n      }\n    }\n\n    return tokenApproved;\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = await this.checkTokenApproved();\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.props.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.approveContract(callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  loadTokenInfo = async () => {\n\n    if (this.state.componentMounted){\n      this.setState({\n        componentMounted:false\n      });\n    }\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token]);\n    const curveTokenEnabled = curveConfig.enabled && curveTokenConfig && curveTokenConfig.enabled;\n\n    const [\n      tokenApproved,\n      contractPaused,\n      curveSwapContract,\n      curveDepositContract,\n      unlentBalance,\n      {migrationEnabled},\n      curveTokenBalance,\n    ] = await Promise.all([\n      this.checkTokenApproved(),\n      this.functionsUtil.checkContractPaused(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract(),\n      this.functionsUtil.getUnlentBalance(this.props.tokenConfig),\n      this.functionsUtil.checkMigration(this.props.tokenConfig,this.props.account),\n      curveTokenEnabled ? this.functionsUtil.getCurveTokenBalance(this.props.account) : null\n    ]);\n\n    const canDeposit = this.props.tokenBalance && this.functionsUtil.BNify(this.props.tokenBalance).gt(0);\n    const canRedeem = this.props.idleTokenBalance && this.functionsUtil.BNify(this.props.idleTokenBalance).gt(0);\n\n    const canDepositCurve = curveTokenEnabled && canDeposit;\n    const depositCurveEnabled = canDepositCurve;\n\n    const showETHWrapperEnabled = this.props.selectedToken === 'WETH' && (this.state.showETHWrapperEnabled || !canDeposit);\n\n    const canRedeemCurve = curveTokenEnabled && curveTokenBalance && curveTokenBalance.gt(0);\n    const redeemCurveEnabled = canRedeemCurve;\n\n    const tokenGovTokens = this.functionsUtil.getTokenGovTokens(this.props.tokenConfig);\n\n    const newState = {...this.state};\n\n    // Check curve deposit enabled\n    if (newState.depositCurveEnabled && !curveTokenEnabled){\n      newState.depositCurveEnabled = false;\n    }\n    \n\n    newState.canRedeem = canRedeem;\n    newState.canDeposit = canDeposit;\n    newState.unlentBalance = unlentBalance;\n    newState.tokenApproved = tokenApproved;\n    newState.tokenGovTokens = tokenGovTokens;\n    newState.contractPaused = contractPaused;\n    newState.canRedeemCurve = canRedeemCurve;\n    newState.canDepositCurve = canDepositCurve;\n    newState.migrationEnabled = migrationEnabled;\n    newState.curveTokenBalance = curveTokenBalance;\n    newState.curveSwapContract = curveSwapContract;\n    newState.redeemCurveEnabled = redeemCurveEnabled;\n    newState.depositCurveEnabled = depositCurveEnabled;\n    newState.curveDepositContract = curveDepositContract;\n    newState.showETHWrapperEnabled = showETHWrapperEnabled;\n\n    newState.txError = {\n      redeem:false,\n      deposit:false\n    };\n    newState.processing = {\n      redeem:{\n        txHash:null,\n        loading:false\n      },\n      deposit:{\n        txHash:null,\n        loading:false\n      },\n      approve:{\n        txHash:null,\n        loading:false\n      },\n      boost:{\n        txHash:null,\n        loading:false\n      }\n    };\n    newState.inputValue = {\n      boost:null,\n      redeem:null,\n      deposit:null\n    };\n    newState.fastBalanceSelector = {\n      boost:null,\n      redeem:null,\n      deposit:null\n    };\n\n    newState.componentMounted = true;\n\n    // console.log('loadTokenInfo',newState);\n\n    this.setState(newState,() => {\n      this.checkAction();\n      this.loadAPY();\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      erc20ForwarderTx:null,\n      loadingErc20ForwarderTx:false,\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const redeemGovTokens = this.state.redeemGovTokens;\n    const selectedPercentage = this.getFastBalanceSelector();\n    const inputValue = this.state.inputValue[this.state.action];\n    const redeemSkipGov = this.state.redeemSkipGov && this.state.redeemSkipGovTokens.length>0 && this.state.agreeSkipGovTokens;\n\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','metaTransactionsEnabled']) && this.state.metaTransactionsEnabled;\n\n    let loading = true;\n\n    switch (this.state.action){\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        if (!this.state.tokenApproved){\n          return this.approveToken();\n        }\n\n        if (localStorage){\n          this.functionsUtil.setLocalStorage('redirectToFundsAfterLogged',0);\n        }\n\n        this.setState({\n          lendingProcessing: this.props.account,\n          lendAmount: '',\n          genericError: '',\n        });\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.props.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if ((this.state.metaTransactionsEnabled || this.state.erc20ForwarderEnabled) && txError){\n            this.setState({\n              erc20ForwarderTx:null,\n              loadingErc20ForwarderTx:false,\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          // console.log('callbackReceiptDeposit',tx);\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n        const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token,'enabled']);\n\n        // Curve Deposit\n        if (curveTokenEnabled && this.state.depositCurveEnabled){\n\n          const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,curvePoolContractInfo.decimals);\n\n          const amounts = await this.functionsUtil.getCurveAmounts(this.props.tokenConfig.idle.token,tokensToDeposit);\n          let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n          if (this.state.maxSlippage){\n            minMintAmount = this.functionsUtil.BNify(minMintAmount);\n            minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n            minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n          }\n          \n          const depositParams = [amounts,minMintAmount];\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, callbackDeposit, callbackReceiptDeposit);\n        // Normal Deposit\n        } else {\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n\n          // const gasLimitDeposit = this.functionsUtil.BNify(1000000);\n          let depositParams = [];\n\n          // Use Proxy Contract if enabled\n          const useProxyContract = this.checkUseProxyContract();\n          if (useProxyContract){\n            const mintProxyContractInfo = this.state.actionProxyContract[this.state.action];\n            const mintProxyContract = mintProxyContractInfo.contract;\n\n            // Use Meta-Transactions\n            if (depositMetaTransactionsEnabled){\n              depositParams = [tokensToDeposit, this.props.tokenConfig.idle.address];\n              const functionCall = mintProxyContract.methods[mintProxyContractInfo.function](...depositParams);\n              const functionSignature = functionCall.encodeABI();\n              // console.log('mintProxyContract',mintProxyContractInfo.function,depositParams);\n              // if (this.state.metaTransactionsEnabled){\n              contractSendResult = await this.functionsUtil.sendBiconomyTxWithPersonalSign(mintProxyContractInfo.name, functionSignature, callbackDeposit, callbackReceiptDeposit);\n              // } else {\n              //   contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n              // }\n            // Use Erc20 Forwarder\n            } else if (depositErc20ForwarderEnabled){\n\n              // Check if the deposit method require the nonce\n              const methodAbi = mintProxyContractInfo.contract._jsonInterface.find( f => f.name === mintProxyContractInfo.function );\n              const useNonce = methodAbi ? methodAbi.inputs.find( i => i.name === 'nonce' ) : true;\n\n              // Build ERC20 Forwarder Tx\n              if (!this.state.erc20ForwarderTx){\n                this.setState({\n                  txError:{\n                    [this.state.action]:false\n                  },\n                  loadingErc20ForwarderTx:true\n                }, async () => {\n                  const erc20ForwarderContract = this.state.erc20ForwarderContract[this.state.action];\n                  const signedParameters = await this.functionsUtil.signPermit(this.props.selectedToken, this.props.account, erc20ForwarderContract.name, 0, tokensToDeposit);\n                  \n                  // console.log('signedParameters_1',signedParameters);\n\n                  if (signedParameters){\n\n                    const { expiry, nonce, r, s, v } = signedParameters;\n\n                    if (useNonce){\n                      depositParams = [tokensToDeposit, parseInt(nonce), expiry, v, r, s];\n                    } else {\n                      depositParams = [tokensToDeposit, expiry, v, r, s];\n                    }\n\n                    if (mintProxyContractInfo.function === 'foo'){\n                      depositParams = [];\n                    }\n\n                    // console.log('permitAndDeposit',mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams);\n\n                    // contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n\n                    const permitType = erc20ForwarderContract.permitType;\n                    const functionCall = erc20ForwarderContract.contract.methods[erc20ForwarderContract.function](...depositParams);\n                    const functionSignature = functionCall.encodeABI();\n\n                    // console.log('functionSignature',permitType, erc20ForwarderContract.function, depositParams);\n\n                    let gasLimit = null;\n                    try {\n                      gasLimit = await functionCall.estimateGas({from: this.props.account}); // 5000000;\n                      if (gasLimit){\n                        gasLimit = this.functionsUtil.BNify(gasLimit).times(1.2);\n                      } else {\n                        gasLimit = this.functionsUtil.BNify(1000000);\n                      }\n                    } catch (error) {\n                      // console.log('Gas Estimate - Error: ',error);\n                    }\n                    \n                    if (!gasLimit){\n                      gasLimit = this.functionsUtil.BNify(1000000);\n                    }\n\n                    // console.log('gasEstimate',mintProxyContractInfo.name, depositParams, parseFloat(gasLimit));\n\n                    // debugger;\n\n                    const erc20ForwarderTx = await this.functionsUtil.buildBiconomyErc20ForwarderTx(erc20ForwarderContract.name, this.props.tokenConfig.address, permitType, functionSignature, gasLimit);\n                    // console.log('erc20ForwarderTx',erc20ForwarderTx);\n                    return this.setState({\n                      erc20ForwarderTx,\n                      loadingErc20ForwarderTx:false\n                    });\n                  } else {\n                    return this.setState((prevState) => ({\n                      processing: {\n                        ...prevState.processing,\n                        [this.state.action]:{\n                          txHash:null,\n                          loading:false\n                        }\n                      },\n                      signedParameters:null,\n                      erc20ForwarderTx:null,\n                      loadingErc20ForwarderTx:false\n                    }));\n                  }\n                });\n              // Send ERC20 Forwarder Tx\n              } else {\n                this.setState({\n                  txError:{\n                    [this.state.action]:false\n                  },\n                  loadingErc20ForwarderTx:true\n                }, async () => {\n                  const metaInfo = {};\n                  const permitOptions = {};\n                  const erc20ForwarderContract = this.state.erc20ForwarderContract[this.state.action];\n                  const erc20ForwarderBaseContract = this.functionsUtil.getGlobalConfig(['contract','methods',this.state.action,'erc20ForwarderProxyContract','forwarder']);\n\n                  const permitValue = `${tokensToDeposit}00`;\n                  const incrementNonce = 1; // useNonce ? 1 : 0;\n                  const signedParameters = await this.functionsUtil.signPermit(this.props.selectedToken, this.props.account, erc20ForwarderBaseContract.name, incrementNonce, permitValue);\n\n                  // console.log('signedParameters_2',signedParameters);\n\n                  if (signedParameters){\n\n                    this.setState({\n                      signedParameters\n                    });\n\n                    const permitConfig = this.functionsUtil.getGlobalConfig(['permit',this.props.selectedToken]);\n                    const setValue = permitConfig.type.find( t => t.name==='value' );\n\n                    const { expiry, nonce, r, s, v } = signedParameters;\n                    permitOptions.v = v;\n                    permitOptions.r = r;\n                    permitOptions.s = s;\n                    permitOptions.allowed = true;\n                    permitOptions.expiry = parseInt(expiry);\n                    permitOptions.holder = this.props.account;\n                    permitOptions.value = setValue ? permitValue : 0;\n                    permitOptions.nonce = parseInt(nonce.toString());\n                    permitOptions.spender = erc20ForwarderBaseContract.address;\n\n                    metaInfo.permitData = permitOptions;\n                    metaInfo.permitType = erc20ForwarderContract.permitType;\n\n                    // console.log('sendBiconomyTxWithErc20Forwarder',permitOptions,metaInfo);\n\n                    await this.functionsUtil.asyncTimeout(200);\n\n                    contractSendResult = await this.functionsUtil.sendBiconomyTxWithErc20Forwarder(this.state.erc20ForwarderTx.request, metaInfo, callbackDeposit, callbackReceiptDeposit);\n\n                    this.setState({\n                      erc20ForwarderTx:null,\n                      loadingErc20ForwarderTx:false\n                    });\n                  } else {\n                    return this.setState((prevState) => ({\n                      processing: {\n                        ...prevState.processing,\n                        [this.state.action]:{\n                          txHash:null,\n                          loading:false\n                        }\n                      },\n                      signedParameters:null,\n                      erc20ForwarderTx:null,\n                      loadingErc20ForwarderTx:false\n                    }));\n                  }\n                });\n              }\n            }\n          // Use main contract if no proxy contract exists\n          } else {\n            /*\n            let _skipMint = !this.state.directMint && this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMint']);\n            _skipMint = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : _skipMint;\n\n            // Check if deposited amount is greated that general lower limit for direct mint\n            if (_skipMint && this.state.minAmountForMintReached){\n              _skipMint = false;\n            }\n            */\n            // Always skip mint\n            let _skipMint = true;\n\n            const _referral = this.getReferralAddress() || '0x0000000000000000000000000000000000000000';\n            depositParams = [tokensToDeposit, _skipMint, _referral];\n            // console.log('depositParams',depositParams);\n            contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'mintIdleToken', depositParams, callbackDeposit, callbackReceiptDeposit);\n          }\n        }\n      break;\n      case 'redeem':\n\n        if (redeemGovTokens){\n          const callbackRedeem = (tx,error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_gov`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: 0\n            };\n\n            if (error){\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error'){\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  txHash:null,\n                  loading:false\n                }\n              }\n            }));\n\n            if (txSucceeded){\n              this.setState((prevState) => ({\n                inputValue:{\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'redeemIdleToken', [0], callbackRedeem, callbackReceiptRedeem);\n          \n        } else {\n\n          if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n            return false;\n          }\n\n          const txData = {\n            value:this.functionsUtil.BNify(inputValue)\n          };\n\n          let idleTokenToRedeem = null;\n          if (selectedPercentage){\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage);\n          } else {\n            const idleTokenPriceWithFee = await this.functionsUtil.getIdleTokenPriceWithFee(this.props.tokenConfig,this.props.account)\n            idleTokenToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals)).div(idleTokenPriceWithFee);\n          }\n\n          // Check if idleTokens to redeem > idleToken balance\n          if (idleTokenToRedeem.gt(this.functionsUtil.BNify(this.props.idleTokenBalance))){\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance);\n          }\n\n          // Normalize number\n          idleTokenToRedeem = this.functionsUtil.normalizeTokenAmount(idleTokenToRedeem,18);\n\n          if (!idleTokenToRedeem){\n            return false;\n          }\n\n          const callbackRedeem = (tx,error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_partial`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: parseInt(inputValue)\n            };\n\n            if (error){\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error'){\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  txHash:null,\n                  loading:false\n                }\n              }\n            }));\n\n            if (txSucceeded){\n              this.setState((prevState) => ({\n                inputValue:{\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          let redeemMethod = 'redeemIdleToken';\n          let redeemParams = [idleTokenToRedeem];\n\n          if (redeemSkipGov){\n            redeemMethod = 'redeemIdleTokenSkipGov';\n            const _skipGovTokenRedeem = await this.getSkippedGovTokensFlags();\n            redeemParams.push(_skipGovTokenRedeem);\n          }\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, redeemMethod, redeemParams, callbackRedeem, callbackReceiptRedeem, txData);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    if (contractSendResult !== false || loading !== this.state.processing[this.state.action].loading){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  showMaxSlippage = () => {\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  checkAction = () => {\n    let action = this.state.action;\n\n    switch(action){\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = 'deposit';\n        }\n      break;\n      default:\n      break;\n    }\n\n    if (action !== this.state.action){\n      this.setState({\n        action\n      },() => {\n        this.checkButtonDisabled();\n      });\n    } else {\n      this.checkButtonDisabled();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && (amount.lte(0) || amount.gt(this.props.tokenBalance)));\n      break;\n      case 'redeem':\n        buttonDisabled = !this.state.canRedeemCurve && !this.state.redeemGovTokens && (buttonDisabled || ( !amount || amount.lte(0) || amount.gt(this.props.redeemableBalance) ));\n\n        if (!buttonDisabled && this.state.redeemSkipGov && this.state.redeemSkipGovTokens.length>0 && !this.state.agreeSkipGovTokens){\n          buttonDisabled = true;\n        }\n        // console.log('checkButtonDisabled',this.state.redeemSkipGov,this.state.redeemSkipGovTokens.length,this.state.agreeSkipGovTokens,buttonDisabled);\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.props.tokenBalance ? this.functionsUtil.BNify(this.props.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        amount = this.props.redeemableBalance ? this.functionsUtil.BNify(this.props.redeemableBalance).times(selectedPercentage) : null;\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  changeInputValue = async (e) => {\n    if (!this.state.action){\n      return false;\n    }\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem && !this.state.canRedeemCurve){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const viewOnly = this.props.connectorName === 'custom';\n\n    const govTokensDisabled = this.props.tokenConfig.govTokensDisabled;\n    const govTokensEnabled = !govTokensDisabled && this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'govTokensEnabled']) && Object.keys(this.state.tokenGovTokens).length>0;\n    const skipMintForDepositEnabled = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : true;\n    const skipMintCheckboxEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMintCheckboxEnabled']) && skipMintForDepositEnabled;\n\n    const showRedeemFlow = this.state.canRedeem && (!this.state.redeemCurveEnabled || this.state.showRedeemFlow) && this.state.action==='redeem';\n\n    const redeemGovTokenEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','redeemGovTokens','enabled']) && govTokensEnabled && showRedeemFlow;// && this.props.govTokensBalance.gt(0);\n    const redeemGovTokens = redeemGovTokenEnabled && this.state.redeemGovTokens;\n\n    const redeemSkipGovConfig = this.functionsUtil.getGlobalConfig(['contract','methods','redeemSkipGov']);\n    const redeemSkipGovEnabled = redeemSkipGovConfig && !redeemSkipGovConfig.disabledTokens.includes(this.props.tokenConfig.idle.token) && govTokensEnabled && showRedeemFlow;\n    const redeemSkipGov = redeemSkipGovEnabled && this.state.redeemSkipGov && Object.keys(this.props.govTokensUserBalances).length>0 && this.props.govTokensBalance.gt(0);\n    const redeemSkipGovNoTokens = redeemSkipGovEnabled && this.state.redeemSkipGov && (!Object.keys(this.props.govTokensUserBalances).length || this.props.govTokensBalance.lte(0));\n\n\n    const showAdvancedRedeemOptions = redeemGovTokenEnabled || redeemSkipGovEnabled;\n    // console.log('showAdvancedRedeemOptions',showAdvancedRedeemOptions,redeemGovTokenEnabled,redeemSkipGovEnabled,govTokensEnabled,showRedeemFlow);\n\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderEnabled']);\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','metaTransactionsEnabled']);\n    const depositErc20ForwarderEnabledTokens = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderProxyContract','tokens']);\n\n    // Biconomy Start\n    const metaTransactionsAvailable = depositMetaTransactionsEnabled && this.props.biconomy && this.state.actionProxyContract[this.state.action];\n    const useMetaTx = metaTransactionsAvailable && this.state.metaTransactionsEnabled;\n\n    const erc20ForwarderEnabled = depositErc20ForwarderEnabled && Object.keys(depositErc20ForwarderEnabledTokens).includes(this.props.selectedToken) && depositErc20ForwarderEnabledTokens[this.props.selectedToken].enabled && this.props.biconomy && this.props.erc20ForwarderClient && this.state.actionProxyContract[this.state.action];\n\n    // console.log(erc20ForwarderEnabled,depositErc20ForwarderEnabled,this.props.biconomy,this.props.erc20ForwarderClient,this.state.actionProxyContract[this.state.action]);\n    // Biconomy End\n\n    const totalBalance = this.state.action === 'deposit' ? this.props.tokenBalance : this.props.redeemableBalance;\n    const migrateText = this.state.migrationEnabled && this.props.tokenConfig.migration.message !== undefined ? this.props.tokenConfig.migration.message : null;\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token,'enabled']);\n\n    const depositCurve = curveTokenEnabled && this.state.depositCurveEnabled && this.state.action === 'deposit';\n\n    const showDepositOptions = this.state.action === 'deposit' && !this.state.contractPaused && (curveTokenEnabled || this.state.tokenApproved);\n\n    const showDepositCurve = showDepositOptions && curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canDepositCurve && this.state.action === 'deposit';\n    const showRedeemCurve = curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canRedeemCurve && this.state.action === 'redeem';\n\n    const showCurveSlippage = depositCurve && this.state.depositCurveSlippage && this.state.depositCurveBalance && !this.state.buttonDisabled;\n\n    const showRebalanceOption = false && this.state.canDeposit && skipMintCheckboxEnabled && this.state.action === 'deposit';\n    const showAdvancedDepositOptions = showDepositCurve || showRebalanceOption;\n\n    const batchDepositInfo = this.functionsUtil.getGlobalConfig(['tools','batchDeposit']);\n    const batchDepositEnabled = batchDepositInfo.enabled && typeof batchDepositInfo.props.availableTokens[this.props.tokenConfig.idle.token] !== 'undefined';\n    const batchDepositDepositEnabled = batchDepositInfo.depositEnabled;\n\n    const showBatchDeposit = !useMetaTx && batchDepositEnabled && batchDepositDepositEnabled && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    const ethWrapperInfo = this.functionsUtil.getGlobalConfig(['tools','ethWrapper']);\n    const ETHWrapperComponent = ethWrapperInfo.subComponent;\n    const showETHWrapper = this.props.selectedToken === 'WETH' && ethWrapperInfo.enabled && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    const canPerformAction = /*!depositCurve && !this.state.redeemCurveEnabled && */((this.state.action === 'deposit' && this.state.canDeposit) || (this.state.action === 'redeem' && this.state.canRedeem) || redeemGovTokens) && (!this.state.showETHWrapperEnabled || this.state.action === 'redeem');\n    const showActionFlow = !redeemGovTokens && canPerformAction;\n\n    const showBuyFlow = this.state.componentMounted && (!showDepositCurve || this.state.showBuyFlow) && !this.state.depositCurveEnabled && this.state.tokenApproved && !this.state.contractPaused && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.action === 'deposit' && !this.state.canDeposit && !this.state.showETHWrapperEnabled;\n\n    const _referral = this.getReferralAddress();\n    const showReferral = _referral && this.state.action === 'deposit' && showActionFlow && !showBuyFlow;\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          <Box\n            width={1}\n          >\n            <Text mb={1}>\n              Select your asset:\n            </Text>\n            <AssetSelector\n              {...this.props}\n            />\n          </Box>\n          {\n            viewOnly ? (\n              <IconBox\n                cardProps={{\n                  mt:3\n                }}\n                icon={'Visibility'}\n                text={'You are using Idle in \"Read-Only\" mode.<br />Logout and connect with your wallet to interact.'}\n              />\n            ) : (\n              <Migrate\n                {...this.props}\n                migrateTextBefore={migrateText}\n                migrateText={migrateText !== null ? '' : null}\n                toggleSkipMigration={this.toggleSkipMigration.bind(this)}\n              >\n                {\n                  !this.props.account ? (\n                    <ConnectBox\n                      {...this.props}\n                    />\n                  ) : this.state.componentMounted ? (\n                    this.state.action && (\n                      <Box\n                        width={1}\n                      >\n                        <Flex\n                          mt={2}\n                          flexDirection={'column'}\n                        >\n                          <Text mb={2}>\n                            Choose the action:\n                          </Text>\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'space-between'}\n                          >\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                width:0.48,\n                                onMouseDown:() => {\n                                  this.setAction('deposit');\n                                }\n                              }}\n                              isInteractive={true}\n                              isActive={ this.state.action === 'deposit' }\n                            >\n                              <Flex\n                                my={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <TransactionField\n                                  transaction={{\n                                    action:'deposit'\n                                  }}\n                                  fieldInfo={{\n                                    name:'icon',\n                                    props:{\n                                      mr:3\n                                    }\n                                  }}\n                                />\n                                <Text\n                                  fontSize={3}\n                                  fontWeight={3}\n                                >\n                                  Deposit\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                width:0.48,\n                                onMouseDown:() => {\n                                  this.setAction('redeem');\n                                }\n                              }}\n                              isInteractive={true}\n                              isActive={ this.state.action === 'redeem' }\n                              isDisabled={ !this.state.canRedeem && !this.state.canRedeemCurve }\n                            >\n                              <Flex\n                                my={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <TransactionField\n                                  transaction={{\n                                    action:'redeem'\n                                  }}\n                                  fieldInfo={{\n                                    name:'icon',\n                                    props:{\n                                      mr:3\n                                    }\n                                  }}\n                                />\n                                <Text\n                                  fontSize={3}\n                                  fontWeight={3}\n                                >\n                                  Redeem\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          </Flex>\n                        </Flex>\n                        {\n                          (showRedeemFlow && this.state.unlentBalance) &&\n                            <DashboardCard\n                              cardProps={{\n                                py:2,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={'LocalGasStation'}\n                                />\n                                <Text\n                                  px={2}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Available balance for Cheap Redeem\n                                </Text>\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'center'}\n                                    hoverColor={'copyColor'}\n                                  >\n                                    {this.state.unlentBalance.toFixed(4)} {this.props.selectedToken}\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.functionsUtil.getGlobalConfig(['messages','cheapRedeem'])}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              </Flex>\n                            </DashboardCard>\n                        }\n                        {\n                          showAdvancedRedeemOptions ? (\n                            <DashboardCard\n                              cardProps={{\n                                pt:2,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                                pb:this.state.showAdvancedOptions ? 3 : 2,\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <Link\n                                  ml={1}\n                                  mainColor={'primary'}\n                                  hoverColor={'primary'}\n                                  onClick={this.toggleShowAdvancedOptions}\n                                >\n                                  { this.state.showAdvancedOptions ? 'Hide' : 'Show' } advanced options\n                                </Link>\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={this.state.showAdvancedOptions ? 'ArrowDropUp' : 'ArrowDropDown'}\n                                />\n                              </Flex>\n                              {\n                                this.state.showAdvancedOptions &&\n                                  <Flex\n                                    mt={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      redeemGovTokenEnabled && \n                                        <Flex\n                                          alignItems={'center'}\n                                          justifyContent={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            checked={this.state.redeemGovTokens}\n                                            label={`Redeem governance tokens only`}\n                                            onChange={ e => this.toggleRedeemGovTokens(e.target.checked) }\n                                          />\n                                          <Link\n                                            color={'link'}\n                                            hoverColor={'link'}\n                                            onClick={ e => this.props.openTooltipModal('Redeem governance tokens',`This feature allows you to redeem just the amount of governance tokens accrued${ this.props.govTokensBalance && this.props.govTokensBalance.gt(0) ? ` (~${this.props.govTokensBalance.toFixed(2)}$)` : null } without redeeming the underlying token.`) }\n                                          >\n                                            (read more)\n                                          </Link>\n                                        </Flex>\n                                    }\n                                    {\n                                      redeemSkipGovEnabled && \n                                        <Flex\n                                          alignItems={'center'}\n                                          flexDirection={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            checked={this.state.redeemSkipGov}\n                                            label={`Redeem without governance tokens`}\n                                            onChange={ e => this.toggleRedeemSkipGov(e.target.checked) }\n                                          />\n                                          <Icon\n                                            mr={1}\n                                            size={'1.2em'}\n                                            name={'Warning'}\n                                            color={'#ffe000'}\n                                          />\n                                          <Link\n                                            color={'link'}\n                                            hoverColor={'link'}\n                                            onClick={ e => this.props.openTooltipModal('Redeem without governance tokens',this.functionsUtil.getGlobalConfig(['messages','redeemSkipGov'])) }\n                                          >\n                                            (read more)\n                                          </Link>\n                                        </Flex>\n                                    }\n                                  </Flex>\n                              }\n                            </DashboardCard>\n                          ) :  showAdvancedDepositOptions ? (\n                            <DashboardCard\n                              cardProps={{\n                                pt:2,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                                pb:this.state.showAdvancedOptions ? 3 : 2,\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <Link\n                                  ml={1}\n                                  mainColor={'primary'}\n                                  hoverColor={'primary'}\n                                  onClick={this.toggleShowAdvancedOptions}\n                                >\n                                  { this.state.showAdvancedOptions ? 'Hide' : 'Show' } advanced options\n                                </Link>\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={this.state.showAdvancedOptions ? 'ArrowDropUp' : 'ArrowDropDown'}\n                                />\n                              </Flex>\n                              {\n                                this.state.showAdvancedOptions &&\n                                  <Flex\n                                    mt={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      showDepositCurve && \n                                        <Flex\n                                          alignItems={'center'}\n                                          justifyContent={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            disabled={this.state.directMint}\n                                            label={`Deposit in the Curve Pool`}\n                                            checked={this.state.depositCurveEnabled}\n                                            onChange={ e => this.toggleDepositCurve(e.target.checked) }\n                                          />\n                                          <Link\n                                            mainColor={'primary'}\n                                            hoverColor={'primary'}\n                                            onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                          >\n                                            (read more)\n                                          </Link>\n                                        </Flex>\n                                    }\n                                    {\n                                      showRebalanceOption && \n                                        <Flex\n                                          alignItems={'center'}\n                                          justifyContent={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            label={`Rebalance the pool`}\n                                            checked={this.state.directMint}\n                                            disabled={this.state.depositCurveEnabled}\n                                            onChange={ e => this.toggleSkipMint(e.target.checked) }\n                                          />\n                                          <Tooltip\n                                            placement={'bottom'}\n                                            message={this.functionsUtil.getGlobalConfig(['messages','directMint'])}\n                                          >\n                                            <Icon\n                                              size={'1em'}\n                                              color={'cellTitle'}\n                                              name={\"InfoOutline\"}\n                                            />\n                                          </Tooltip>\n                                        </Flex>\n                                    }\n                                  </Flex>\n                              }\n                            </DashboardCard>\n                          ) : (\n                            <Flex\n                              width={1}\n                              flexDirection={'column'}\n                            >\n                              {\n                                showDepositCurve && (\n                                  <Flex\n                                    width={1}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <DashboardCard\n                                      isRainbow={true}\n                                      cardProps={{\n                                        py:3,\n                                        px:2,\n                                        mt:3,\n                                        display:'flex',\n                                        alignItems:'center',\n                                        flexDirection:'column',\n                                        justifyContent:'center',\n                                      }}\n                                    >\n                                      <Flex\n                                        width={1}\n                                        alignItems={'center'}\n                                        flexDirection={'column'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Image\n                                          height={'1.8em'}\n                                          src={curveConfig.params.image}\n                                        />\n                                        <Text\n                                          mt={2}\n                                          px={2}\n                                          fontSize={1}\n                                          color={'dark-gray'}\n                                          textAlign={'center'}\n                                        >\n                                          Deposit your tokens in the Curve Pool and boost your APY up to {this.state.curveAPY ? this.state.curveAPY.toFixed(2) : '-'}%.\n                                          <Link\n                                            ml={1}\n                                            mainColor={'primary'}\n                                            hoverColor={'primary'}\n                                            onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                          >\n                                            Read More\n                                          </Link>\n                                        </Text>\n                                        <Checkbox\n                                          mt={2}\n                                          required={false}\n                                          label={`Deposit in Curve`}\n                                          checked={this.state.depositCurveEnabled}\n                                          onChange={ e => this.toggleDepositCurve(e.target.checked) }\n                                        />\n                                      </Flex>\n                                    </DashboardCard>\n                                    {\n                                      (!this.state.showBuyFlow && !this.state.depositCurveEnabled && !this.state.canDeposit) &&\n                                        <Link\n                                          textAlign={'center'}\n                                          hoverColor={'primary'}\n                                          onClick={ e => this.setShowBuyFlow(true) }\n                                        >\n                                          I just want to deposit more {this.props.selectedToken}\n                                        </Link>\n                                    }\n                                  </Flex>\n                                )\n                              }\n                              {\n                                showRebalanceOption && (\n                                  <DashboardCard\n                                    cardProps={{\n                                      py:3,\n                                      px:2,\n                                      mt:3,\n                                      display:'flex',\n                                      alignItems:'center',\n                                      flexDirection:'column',\n                                      justifyContent:'center',\n                                    }}\n                                  >\n                                    <Flex\n                                      width={1}\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        color={'cellText'}\n                                        name={'InfoOutline'}\n                                      />\n                                      <Text\n                                        mt={1}\n                                        px={2}\n                                        fontSize={1}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        By checking this flag you can rebalance the pool and help all users gain an additional APR\n                                      </Text>\n                                    </Flex>\n                                    <Checkbox\n                                      mt={2}\n                                      required={false}\n                                      label={`Rebalance the pool`}\n                                      checked={this.state.directMint}\n                                      onChange={ e => this.toggleSkipMint(e.target.checked) }\n                                    />\n                                  </DashboardCard>\n                                )\n                              }\n                              {\n                                redeemGovTokenEnabled && (\n                                  <DashboardCard\n                                    cardProps={{\n                                      py:3,\n                                      px:2,\n                                      mt:3,\n                                      display:'flex',\n                                      alignItems:'center',\n                                      flexDirection:'column',\n                                      justifyContent:'center',\n                                    }}\n                                  >\n                                    <Flex\n                                      width={1}\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        color={'cellText'}\n                                        name={'InfoOutline'}\n                                      />\n                                      <Text\n                                        mt={1}\n                                        px={2}\n                                        fontSize={1}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        By redeeming your {this.props.selectedToken} you will automatically get also the proportional amount of governance tokens accrued{ this.props.govTokensBalance && this.props.govTokensBalance.gt(0) ? ` (~ $${this.props.govTokensBalance.toFixed(2)})` : null }.\n                                      </Text>\n                                    </Flex>\n                                    <Checkbox\n                                      mt={2}\n                                      required={false}\n                                      checked={this.state.redeemGovTokens}\n                                      label={`Redeem governance tokens only`}\n                                      onChange={ e => this.toggleRedeemGovTokens(e.target.checked) }\n                                    />\n                                  </DashboardCard>\n                                )\n                              }\n                            </Flex>\n                          )\n                        }\n                        {\n                          redeemSkipGov ? (\n                            <DashboardCard\n                              cardProps={{\n                                mt:2,\n                                mb:2,\n                                py:2,\n                                px:1\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                              >\n                                <Text\n                                  mt={1}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Select the gov tokens you want to give away:\n                                </Text>\n                                <Flex\n                                  mt={2}\n                                  width={1}\n                                  boxShadow={0}\n                                  style={{\n                                    flexWrap:'wrap'\n                                  }}\n                                  alignItems={'center'}\n                                  justifyContent={'center'}\n                                  >\n                                    {\n                                      Object.keys(this.props.govTokensUserBalances).map( token => {\n                                        const balance = this.props.govTokensUserBalances[token];\n                                        const isActive = this.state.redeemSkipGovTokens.includes(token);\n                                        const tokenConfig = this.functionsUtil.getGlobalConfig(['govTokens',token]);\n                                        return (\n                                          <Flex\n                                            p={2}\n                                            mb={1}\n                                            mx={1}\n                                            width={'auto'}\n                                            style={{\n                                              cursor:'pointer'\n                                            }}\n                                            borderRadius={2}\n                                            flexDirection={'row'}\n                                            key={`skipGovToken_${token}`}\n                                            justifyContent={'flex-start'}\n                                            backgroundColor={isActive ? '#2a4b78' : 'cardBgHover'}\n                                            onClick={ e => this.setRedeemSkipGovTokens(token,!this.state.redeemSkipGovTokens.includes(token)) }\n                                          >\n                                            <Checkbox\n                                              m={0}\n                                              required={false}\n                                              checked={isActive}\n                                              onChange={ e => this.setRedeemSkipGovTokens(token,e.target.checked) }\n                                            />\n                                            <AssetField\n                                              token={token}\n                                              tokenConfig={tokenConfig}\n                                              fieldInfo={{\n                                                name:'icon',\n                                                props:{\n                                                  mr:1,\n                                                  width:['1.4em','1.6em'],\n                                                  height:['1.4em','1.6em']\n                                                }\n                                              }}\n                                            />\n                                            <SmartNumber\n                                              ml={1}\n                                              fontSize={[0,2]}\n                                              fontWeight={500}\n                                              maxPrecision={4}\n                                              color={'cellText'}\n                                              number={balance.toString()}\n                                            />\n                                          </Flex>\n                                        );\n                                    })\n                                  }\n                                </Flex>\n                              </Flex>\n                            </DashboardCard>\n                          ) : redeemSkipGovNoTokens && (\n                            <DashboardCard\n                              cardProps={{\n                                p:2,\n                                my:2\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'MoneyOff'}\n                                  color={'cellText'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  You don't have any gov tokens to give away.\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          redeemSkipGov && this.functionsUtil.BNify(this.state.skippedGovTokensBalance).gt(0) ? (\n                            <DashboardCard\n                              cardProps={{\n                                p:2,\n                                my:2\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'Warning'}\n                                  color={'#ffe000'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={1}\n                                  color={'red'}\n                                  textAlign={'center'}\n                                >\n                                  You are giving away {this.functionsUtil.formatMoney(this.state.skippedGovTokensBalance)}$ worth of governance tokens!\n                                </Text>\n                                {\n                                  this.state.skipGovTokensGasSave && this.state.skipGovTokensGasSave.gte(0.0001) && (\n                                    <Text\n                                      mt={1}\n                                      fontSize={1}\n                                      color={'#00b84a'}\n                                      textAlign={'center'}\n                                    >\n                                      This will save you {this.state.skipGovTokensGasSave.toFixed(4)} ETH of gas (~{this.state.skipGovTokensGasSaveUSD.toFixed(2)}$)\n                                    </Text>\n                                  )\n                                }\n                                <Text\n                                  mt={1}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  To proceed with the redeem please give your authorization by checking the following flag:\n                                </Text>\n                                <Checkbox\n                                  my={1}\n                                  required={false}\n                                  checked={this.state.agreeSkipGovTokens}\n                                  label={`I agree to give away my governance tokens`}\n                                  onChange={ e => this.toggleAgreeSkipGovTokens(e.target.checked) }\n                                />\n                              </Flex>\n                            </DashboardCard>\n                          ) : redeemSkipGov && this.state.redeemSkipGovTokens.length>0 && (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                my:2\n                              }}\n                            >\n                              <FlexLoader\n                                flexProps={{\n                                  flexDirection:'row'\n                                }}\n                                loaderProps={{\n                                  size:'25px',\n                                }}\n                                textProps={{\n                                  ml:2\n                                }}\n                                text={'Loading estimated gas usage...'}\n                              />\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          showReferral && (\n                            <DashboardCard\n                              cardProps={{\n                                py:3,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'Share'}\n                                  color={'cellText'}\n                                />\n                                <Text\n                                  mt={1}\n                                  px={2}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  You are depositing with the following referral address:\n                                </Text>\n                                <Text\n                                  mt={1}\n                                  px={2}\n                                  fontSize={1}\n                                  fontWeight={500}\n                                  textAlign={'center'}\n                                  color={this.props.theme.colors.transactions.status.completed}\n                                >\n                                  {_referral}\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          (metaTransactionsAvailable && !showBuyFlow && !this.state.contractPaused) ? (\n                            <DashboardCard\n                              cardProps={{\n                                py:3,\n                                px:2,\n                                my:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              {\n                                this.state.metaTransactionsEnabled && this.state.txError[this.state.action] && this.state.actionProxyContract[this.state.action].approved ? (\n                                  <Flex\n                                    width={1}\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <Icon\n                                      size={'1.8em'}\n                                      name={'Warning'}\n                                      color={'cellText'}\n                                    />\n                                    <Text\n                                      mt={1}\n                                      fontSize={1}\n                                      color={'cellText'}\n                                      textAlign={'center'}\n                                    >\n                                      Seems like you are having some trouble with Meta-Transactions... Disable them by unchecking the box below and try again!\n                                    </Text>\n                                  </Flex>\n                                ) : this.functionsUtil.getWalletProvider() === 'WalletConnect' && this.state.metaTransactionsEnabled ? (\n                                  <Flex\n                                    width={1}\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <Icon\n                                      size={'1.8em'}\n                                      name={'Warning'}\n                                      color={'cellText'}\n                                    />\n                                    <Text\n                                      mt={1}\n                                      fontSize={1}\n                                      color={'cellText'}\n                                      textAlign={'center'}\n                                    >\n                                      Please disable Meta-Transactions if you are using Argent Wallet to avoid failed transactions!\n                                    </Text>\n                                  </Flex>\n                                ) : (\n                                  <Text\n                                    mt={1}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    Meta-Transactions are {this.state.metaTransactionsEnabled ? 'enabled' : 'disabled'} for {this.state.action}s!<br />\n                                    {\n                                      this.state.metaTransactionsEnabled && !this.state.actionProxyContract[this.state.action].approved && `Please either enable the Smart-Contract to enjoy gas-less ${this.state.action} or just disable meta-tx.`\n                                    }\n                                  </Text>\n                                )\n                              }\n                              <Checkbox\n                                mt={2}\n                                required={false}\n                                checked={this.state.metaTransactionsEnabled}\n                                onChange={ e => this.toggleMetaTransactionsEnabled(e.target.checked) }\n                                label={`${this.functionsUtil.capitalize(this.state.action)} with Meta-Transaction`}\n                              />\n                            </DashboardCard>\n                          ) : (erc20ForwarderEnabled && !showBuyFlow && !this.state.contractPaused) && (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                my:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              <Text\n                                mb={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                How do you prefer to pay gas fees for this {this.state.action}?\n                              </Text>\n                              <Flex\n                                width={[1,0.7]}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'space-between'}\n                              >\n                                <CardIconButton\n                                  {...this.props}\n                                  cardProps={{\n                                    py:2,\n                                    px:[2,3],\n                                    width:0.48\n                                  }}\n                                  textProps={{\n                                    ml:[1,2],\n                                  }}\n                                  text={this.props.selectedToken}\n                                  isActive={this.state.erc20ForwarderEnabled}\n                                  imageProps={{\n                                    height:this.props.isMobile ? '1.4em' : '1.8em',\n                                    width:this.props.isMobile ? '1.4em' : '1.8em'\n                                  }}\n                                  image={`/images/tokens/${this.props.selectedToken}.svg`}\n                                  handleClick={e => this.toggleErc20ForwarderEnabled(true)}\n                                />\n                                <CardIconButton\n                                  {...this.props}\n                                  cardProps={{\n                                    py:2,\n                                    px:[2,3],\n                                    width:0.48\n                                  }}\n                                  textProps={{\n                                    ml:[1,2],\n                                  }}\n                                  text={'ETH'}\n                                  isActive={!this.state.erc20ForwarderEnabled}\n                                  imageProps={{\n                                    height:this.props.isMobile ? '1.4em' : '1.8em',\n                                    width:this.props.isMobile ? '1.4em' : '1.8em'\n                                  }}\n                                  image={`/images/tokens/ETH.svg`}\n                                  handleClick={e => this.toggleErc20ForwarderEnabled(false)}\n                                />\n                              </Flex>\n                              {\n                                this.state.erc20ForwarderEnabled && this.state.txError[this.state.action] && (\n                                  <Text\n                                    mt={2}\n                                    fontSize={1}\n                                    color={'red'}\n                                    textAlign={'center'}\n                                  >\n                                    The meta-transaction cannot be executed due to insufficient funds, fund your wallet or select ETH and try again.\n                                  </Text>\n                                )\n                              }\n                              <Text\n                                mt={2}\n                                fontSize={'11px'}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                Powered by <ExtLink fontSize={'11px'} href={'https://biconomy.io'}>Biconomy</ExtLink>\n                              </Text>\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          (this.state.minAmountForMintReached && this.state.action === 'deposit') && (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                mt:3\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={'InfoOutline'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  By depositing more than {this.functionsUtil.formatMoney(this.state.minAmountForMint)}$ { this.state.showPoolPerc ? `(${this.state.minAmountForMint.div(this.state.totalAUM).times(100).toFixed(0)}% of the pool)` : null } the pool will be automatically rebalanced, gas cost may be higher.\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          showBatchDeposit ? (\n                            <Flex\n                              p={2}\n                              mt={3}\n                              width={1}\n                              borderRadius={2}\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              justifyContent={'center'}\n                              backgroundColor={'DashboardCard'}\n                              border={`1px solid ${this.props.theme.colors.primary}`}\n                            >\n                              <Link\n                                textAlign={'center'}\n                                hoverColor={'primary'}\n                                href={`/#/dashboard/tools/${batchDepositInfo.route}/${this.props.tokenConfig.idle.token}`}\n                              >\n                                Gas fees too high? Save gas with our Batch Deposit!\n                              </Link>\n                              <Icon\n                                ml={1}\n                                size={'1em'}\n                                color={'primary'}\n                                name={'LocalGasStation'}\n                              />\n                            </Flex>\n                          ) : showETHWrapper && (\n                            <Flex\n                              width={1}\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <DashboardCard\n                                cardProps={{\n                                  py:3,\n                                  px:2,\n                                  mt:3,\n                                  display:'flex',\n                                  alignItems:'center',\n                                  flexDirection:'column',\n                                  justifyContent:'center',\n                                  pb:this.state.showAdvancedOptions ? 3 : 2,\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  justifyContent={'row'}\n                                >\n                                  <Checkbox\n                                    required={false}\n                                    checked={this.state.showETHWrapperEnabled}\n                                    label={`Convert your ETH to WETH`}\n                                    onChange={ e => this.toggleShowETHWrapper(e.target.checked) }\n                                  />\n                                </Flex>\n                              </DashboardCard>\n                              {\n                                this.state.showETHWrapperEnabled && \n                                  <ETHWrapperComponent\n                                    {...this.props}\n                                    action={'wrap'}\n                                    fullWidth={true}\n                                    toolProps={ethWrapperInfo.props}\n                                  />\n                              }\n                            </Flex>\n                          )\n                        }\n                        {\n                          showRedeemCurve && this.state.canRedeem && (\n                            <Flex\n                              width={1}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <DashboardCard\n                                isRainbow={true}\n                                cardProps={{\n                                  py:3,\n                                  px:2,\n                                  mt:3,\n                                  display:'flex',\n                                  alignItems:'center',\n                                  flexDirection:'column',\n                                  justifyContent:'center',\n                                }}\n                              >\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Image\n                                    height={'1.8em'}\n                                    src={curveConfig.params.image}\n                                  />\n                                  <Text\n                                    mt={2}\n                                    px={2}\n                                    fontSize={1}\n                                    color={'dark-gray'}\n                                    textAlign={'center'}\n                                  >\n                                    Redeem your tokens from the Curve Pool.\n                                    <Link\n                                      ml={1}\n                                      mainColor={'primary'}\n                                      hoverColor={'primary'}\n                                      onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                    >\n                                      Read More\n                                    </Link>\n                                  </Text>\n                                  {\n                                    this.state.canRedeem &&\n                                      <Checkbox\n                                        mt={2}\n                                        required={false}\n                                        label={`Redeem from Curve`}\n                                        checked={this.state.redeemCurveEnabled}\n                                        onChange={ e => this.toggleRedeemCurve(e.target.checked) }\n                                      />\n                                  }\n                                </Flex>\n                              </DashboardCard>\n                              {\n                                this.canRedeem &&\n                                  <Link\n                                    textAlign={'center'}\n                                    hoverColor={'primary'}\n                                    onClick={ e => this.setShowRedeemFlow(true) }\n                                  >\n                                    I just want to redeem my {this.props.selectedToken}\n                                  </Link>\n                              }\n                            </Flex>\n                          )\n                        }\n                        {\n                          (this.state.contractPaused && this.state.action === 'deposit') ? (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                mt:3\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'Warning'}\n                                  color={'cellText'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Deposits for {this.props.selectedToken} are temporarily unavailable due to Smart-Contract maintenance. Redeems are always available.\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          ) : (!this.state.tokenApproved && this.state.action === 'deposit' && !this.state.showETHWrapperEnabled) ? (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                mt:3\n                              }}\n                            >\n                              {\n                                this.state.processing['approve'] && this.state.processing['approve'].loading ? (\n                                  <Flex\n                                    flexDirection={'column'}\n                                  >\n                                    <TxProgressBar\n                                      {...this.props}\n                                      waitText={`Approve estimated in`}\n                                      endMessage={`Finalizing approve request...`}\n                                      hash={this.state.processing['approve'].txHash}\n                                      cancelTransaction={this.cancelTransaction.bind(this)}\n                                    />\n                                  </Flex>\n                                ) : (\n                                  <Flex\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                  >\n                                    <Icon\n                                      size={'1.8em'}\n                                      name={'LockOpen'}\n                                      color={'cellText'}\n                                    />\n                                    <Text\n                                      mt={3}\n                                      fontSize={2}\n                                      color={'cellText'}\n                                      textAlign={'center'}\n                                    >\n                                      {\n                                        this.state.depositCurveEnabled ? \n                                          `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.`\n                                        : useMetaTx ?\n                                          `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle using Meta-Transaction you need to approve our Smart-Contract first.`\n                                        :\n                                          `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle you need to approve our Smart-Contract first.`\n                                      }\n                                    </Text>\n                                    <RoundButton\n                                      buttonProps={{\n                                        mt:3,\n                                        width:[1,1/2]\n                                      }}\n                                      handleClick={this.approveToken.bind(this)}\n                                    >\n                                      Approve\n                                    </RoundButton>\n                                  </Flex>\n                                )\n                              }\n                            </DashboardCard>\n                          ) : (!showBuyFlow && canPerformAction) && (\n                            !this.state.processing[this.state.action].loading ? (\n                              <Flex\n                                mt={2}\n                                flexDirection={'column'}\n                              >\n                                {\n                                  showActionFlow && (\n                                    <Flex\n                                      mb={3}\n                                      width={1}\n                                      flexDirection={'column'}\n                                    >\n                                      {\n                                        (totalBalance || this.props.tokenFeesPercentage) && (\n                                          <Box\n                                            mb={1}\n                                            width={1}\n                                          >\n                                            {\n                                              this.state.showMaxSlippage && showCurveSlippage && (\n                                                <Box\n                                                  mb={2}\n                                                  width={1}\n                                                >\n                                                  <Flex\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                  >\n                                                    <Text>\n                                                      Choose max slippage:\n                                                    </Text>\n                                                    <Tooltip\n                                                      placement={'top'}\n                                                      message={`Max additional slippage on top of the one shown below`}\n                                                    >\n                                                      <Icon\n                                                        ml={1}\n                                                        size={'1em'}\n                                                        color={'cellTitle'}\n                                                        name={\"InfoOutline\"}\n                                                      />\n                                                    </Tooltip>\n                                                  </Flex>\n                                                  <Flex\n                                                    mt={2}\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                    justifyContent={'space-between'}\n                                                  >\n                                                    {\n                                                      [0.2,0.5,1,5].map( slippage => (\n                                                        <FastBalanceSelector\n                                                          cardProps={{\n                                                            p:1\n                                                          }}\n                                                          textProps={{\n                                                            fontSize:1\n                                                          }}\n                                                          percentage={slippage}\n                                                          key={`selector_${slippage}`}\n                                                          onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                                          isActive={this.state.maxSlippage === parseFloat(slippage)}\n                                                        />\n                                                      ))\n                                                    }\n                                                  </Flex>\n                                                </Box>\n                                              )\n                                            }\n                                            <Flex\n                                              width={1}\n                                              alignItems={'center'}\n                                              flexDirection={'row'}\n                                              justifyContent={'space-between'}\n                                            >\n                                              {\n                                                showCurveSlippage ? (\n                                                  <Flex\n                                                    width={1}\n                                                    maxWidth={'50%'}\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                  >\n                                                    <Text\n                                                      fontSize={1}\n                                                      fontWeight={3}\n                                                      textAlign={'right'}\n                                                      style={{\n                                                        whiteSpace:'nowrap'\n                                                      }}\n                                                      color={ this.state.depositCurveSlippage.gt(0) ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                                    >\n                                                      {\n                                                        parseFloat(this.state.depositCurveSlippage.times(100).toFixed(2)) === 0 ?\n                                                          'No Slippage'\n                                                        : `${ this.state.depositCurveSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositCurveSlippage.times(100).abs().toFixed(2)}%`\n                                                      }\n                                                    </Text>\n                                                    <Tooltip\n                                                      placement={'top'}\n                                                      message={this.functionsUtil.getGlobalConfig(['messages','curveBonusSlippage'])}\n                                                    >\n                                                      <Icon\n                                                        ml={1}\n                                                        size={'1em'}\n                                                        color={'cellTitle'}\n                                                        name={\"InfoOutline\"}\n                                                      />\n                                                    </Tooltip>\n                                                    <Link\n                                                      ml={1}\n                                                      color={'copyColor'}\n                                                      hoverColor={'primary'}\n                                                      onClick={this.showMaxSlippage}\n                                                    >\n                                                      change\n                                                    </Link>\n                                                  </Flex>\n                                                ) : this.props.tokenFeesPercentage && (\n                                                  <Flex\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                  >\n                                                    <Text\n                                                      fontSize={1}\n                                                      fontWeight={3}\n                                                      color={'dark-gray'}\n                                                      textAlign={'right'}\n                                                      hoverColor={'copyColor'}\n                                                    >\n                                                      Performance fee: {this.props.tokenFeesPercentage.times(100).toFixed(2)}%\n                                                    </Text>\n                                                    <Tooltip\n                                                      placement={'top'}\n                                                      message={this.functionsUtil.getGlobalConfig(['messages','performanceFee'])}\n                                                    >\n                                                      <Icon\n                                                        ml={1}\n                                                        size={'1em'}\n                                                        color={'cellTitle'}\n                                                        name={\"InfoOutline\"}\n                                                      />\n                                                    </Tooltip>\n                                                  </Flex>\n                                                )\n                                              }\n                                              {\n                                                totalBalance && (\n                                                  <Link\n                                                    fontSize={1}\n                                                    fontWeight={3}\n                                                    color={'dark-gray'}\n                                                    textAlign={'right'}\n                                                    hoverColor={'copyColor'}\n                                                    onClick={ (e) => this.setFastBalanceSelector(100) }\n                                                  >\n                                                    {totalBalance.toFixed(6)} {this.props.selectedToken}\n                                                  </Link>\n                                                )\n                                              }\n                                            </Flex>\n                                          </Box>\n                                        )\n                                      }\n                                      <Input\n                                        min={0}\n                                        type={\"number\"}\n                                        required={true}\n                                        height={'3.4em'}\n                                        borderRadius={2}\n                                        fontWeight={500}\n                                        borderColor={'cardBorder'}\n                                        backgroundColor={'cardBg'}\n                                        boxShadow={'none !important'}\n                                        placeholder={`Insert amount`}\n                                        onChange={this.changeInputValue.bind(this)}\n                                        border={`1px solid ${this.props.theme.colors.divider}`}\n                                        value={this.state.inputValue[this.state.action] !== null ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]).toFixed() : ''}\n                                      />\n                                      <Flex\n                                        mt={2}\n                                        alignItems={'center'}\n                                        flexDirection={'row'}\n                                        justifyContent={'space-between'}\n                                      >\n                                        {\n                                          [25,50,75,100].map( percentage => (\n                                            <FastBalanceSelector\n                                              percentage={percentage}\n                                              key={`selector_${percentage}`}\n                                              onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                              isActive={this.state.fastBalanceSelector[this.state.action] === parseInt(percentage)}\n                                            />\n                                          ))\n                                        }\n                                      </Flex>\n                                    </Flex>\n                                  )\n                                }\n                                {\n                                  canPerformAction && (\n                                    <Flex\n                                      justifyContent={'center'}\n                                      mt={ redeemGovTokens ? 2 : 0 }\n                                    >\n                                      <RoundButton\n                                        buttonProps={{\n                                          width:'auto',\n                                          minWidth:[1,1/2],\n                                          style:{\n                                            textTransform:'capitalize'\n                                          },\n                                          disabled:this.state.buttonDisabled\n                                        }}\n                                        handleClick={this.state.buttonDisabled ? null : this.executeAction.bind(this) }\n                                      >\n                                        {this.state.action}{ redeemGovTokens ? ' Gov Tokens' : '' /*(depositCurve ? ' in Curve' : '')*/ }\n                                      </RoundButton>\n                                    </Flex>\n                                  )\n                                }\n                              </Flex>\n                            ) : this.state.loadingErc20ForwarderTx ? (\n                              <Flex\n                                mt={3}\n                                flexDirection={'column'}\n                              >\n                                <FlexLoader\n                                  flexProps={{\n                                    flexDirection:'row'\n                                  }}\n                                  loaderProps={{\n                                    size:'25px',\n                                  }}\n                                  textProps={{\n                                    ml:2\n                                  }}\n                                  text={ this.state.erc20ForwarderTx ? ( this.state.signedParameters ? 'Please Sign the Transaction...' : 'Please Sign the Permit...' ) : 'Calculating transaction fees...'}\n                                />\n                              </Flex>\n                            ) : this.state.erc20ForwarderTx ? (\n                              <DashboardCard\n                                cardProps={{\n                                  p:3,\n                                  mt:3,\n                                  display:'flex',\n                                  alignItems:'center',\n                                  flexDirection:'column',\n                                  justifyContent:'center',\n                                }}\n                              >\n                                <Text\n                                  mb={2}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  The required gas fee to perform the {this.state.action} is <strong>{this.state.erc20ForwarderTx.cost} {this.props.selectedToken}</strong>\n                                </Text>\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <DashboardCard\n                                    cardProps={{\n                                      mx:2,\n                                      py:2,\n                                      px:[2,3],\n                                      width:0.40,\n                                      onMouseDown:() => {\n                                        this.executeAction()\n                                      }\n                                    }}\n                                    isInteractive={true}\n                                  >\n                                    <Flex\n                                      my={1}\n                                      alignItems={'center'}\n                                      flexDirection={'row'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Flex\n                                        mr={2}\n                                        alignItems={'center'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Icon\n                                          align={'center'}\n                                          color={'#00b84a'}\n                                          name={'CheckCircle'}\n                                          size={this.props.isMobile ? '1em' : '1.8em'}\n                                        />\n                                      </Flex>\n                                      <Text\n                                        fontWeight={3}\n                                        fontSize={[2,3]}\n                                      >\n                                        Confirm\n                                      </Text>\n                                    </Flex>\n                                  </DashboardCard>\n                                  <DashboardCard\n                                    cardProps={{\n                                      mx:2,\n                                      py:2,\n                                      px:[2,3],\n                                      width:0.40,\n                                      onMouseDown:() => {\n                                        this.cancelTransaction();\n                                      }\n                                    }}\n                                    isInteractive={true}\n                                  >\n                                    <Flex\n                                      my={1}\n                                      alignItems={'center'}\n                                      flexDirection={'row'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Flex\n                                        mr={2}\n                                        alignItems={'center'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Icon\n                                          name={'Cancel'}\n                                          align={'center'}\n                                          color={'#e13636'}\n                                          size={this.props.isMobile ? '1em' : '1.8em'}\n                                        />\n                                      </Flex>\n                                      <Text\n                                        fontWeight={3}\n                                        fontSize={[2,3]}\n                                      >\n                                        Decline\n                                      </Text>\n                                    </Flex>\n                                  </DashboardCard>\n                                </Flex>\n                              </DashboardCard>\n                            ) : (\n                              <Flex\n                                mt={3}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <TxProgressBar\n                                  {...this.props}\n                                  cancelTransaction={this.cancelTransaction.bind(this)}\n                                  hash={this.state.processing[this.state.action].txHash}\n                                  endMessage={`Finalizing ${this.state.action} request...`}\n                                  waitText={`${this.functionsUtil.capitalize(this.state.action)} estimated in`}\n                                />\n                              </Flex>\n                            )\n                          )\n                        }\n                      </Box>\n                    )\n                  ) : (\n                    <Flex\n                      mt={4}\n                      flexDirection={'column'}\n                    >\n                      <FlexLoader\n                        flexProps={{\n                          flexDirection:'row'\n                        }}\n                        loaderProps={{\n                          size:'30px'\n                        }}\n                        textProps={{\n                          ml:2\n                        }}\n                        text={'Loading asset info...'}\n                      />\n                    </Flex>\n                  )\n                }\n              </Migrate>\n            )\n          }\n        </Flex>\n        {\n          /*\n          showDepositCurve && this.state.depositCurveEnabled ? (\n            <CurveDeposit\n              {...this.props}\n            />\n          ) :\n          */\n          showRedeemCurve && this.state.redeemCurveEnabled && (\n            <Box\n              mt={3}\n              width={1}\n            >\n              <CurveRedeem\n                {...this.props}\n              />\n            </Box>\n          )\n        }\n        {\n          showBuyFlow &&\n            <Flex\n              mt={3}\n              width={[1,0.5]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <BuyModal\n                {...this.props}\n                showInline={true}\n                availableMethods={[]}\n                buyToken={this.props.selectedToken}\n              />\n            </Flex>\n        }\n\n        <ShareModal\n          confettiEnabled={true}\n          icon={`images/medal.svg`}\n          title={`Congratulations!`}\n          account={this.props.account}\n          closeModal={this.resetModal}\n          tokenName={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'share'}\n          text={`You have successfully deposited in Idle!<br />Enjoy <strong>${this.state.tokenAPY}% APY</strong> on your <strong>${this.props.selectedToken}</strong>!`}\n          tweet={`I'm earning ${this.state.tokenAPY}% APY on my ${this.props.selectedToken} with @idlefinance! Go to ${this.functionsUtil.getGlobalConfig(['baseURL'])} and start earning now from your idle tokens!`}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default DepositRedeem;\n","import theme from '../theme';\nimport { Bar } from '@nivo/bar';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Text, Input, Icon, Tooltip } from \"rimble-ui\";\n\nclass EstimatedEarnings extends Component {\n\n  state = {\n    chartData:null,\n    chartProps:null,\n    inputValue:1000,\n    maxInputValue:999999999999999\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    this.loadChart();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged){\n      this.loadChart();\n    }\n  }\n\n  async loadChart(){\n\n    const tokenApy = await this.functionsUtil.getTokenApy(this.props.tokenConfig);\n\n    if (!tokenApy){\n      return false;\n    }\n\n    const amount = this.functionsUtil.BNify(this.state.inputValue);\n    const earningsYear = amount.times(this.props.tokenApy.div(100));\n\n    const amountMonth = parseFloat(earningsYear.div(12));\n    const amount3Months = parseFloat(earningsYear.div(4));\n    const amount6Months = parseFloat(earningsYear.div(2));\n    const amountYear = parseFloat(earningsYear.div(1));\n\n    const chartData = [\n      {\n        perc:1/12,\n        label:'MONTH',\n        value:amountMonth,\n        month:amountMonth,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        monthColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:3/12,\n        label:'3 MONTHS',\n        value:amount3Months,\n        month3:amount3Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month3Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:6/12,\n        label:'6 MONTHS',\n        value:amount6Months,\n        month6:amount6Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month6Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:1,\n        label:'YEAR',\n        year:amountYear,\n        value:amountYear,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        yearColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      }\n    ];\n\n    let labelTextColorModifiers = this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'chart','labelTextColorModifiers']);\n\n    const maxGridLines = 4;\n    const gridYStep = amountYear/maxGridLines;\n    const gridYValues = [0];\n    for (let i=1;i<=maxGridLines;i++){\n      const gridYValue = i*gridYStep;\n      gridYValues.push(gridYValue);\n    }\n\n    const chartProps = {\n      padding: 0.2,\n      animate: false,\n      indexBy: 'label',\n      // enableLabel: false,\n      labelSkipWidth: 16,\n      labelSkipHeight: 16,\n      keys: ['month','month3','month6','year'],\n      colors: ({ id, data }) => data[`${id}Color`],\n      label: d => this.functionsUtil.abbreviateNumber(d.value,2,4)+' '+this.props.selectedToken,\n      labelTextColor: labelTextColorModifiers ? { from: 'color', modifiers: [ labelTextColorModifiers ] } : null,\n      isInteractive:false,\n      minValue:0,\n      gridYValues,\n      // maxValue:amountYear,\n      axisLeft:{\n        format: v => this.functionsUtil.abbreviateNumber(v,1,3),\n        tickValues:gridYValues,\n        orient: 'left',\n        tickSize: 0,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendPosition: 'middle'\n      },\n      axisBottom:{\n        legend: '',\n        tickSize:0,\n        tickPadding: 15,\n        orient: 'bottom',\n      },\n      theme:{\n        labels:{\n          text:{\n            fontSize:15,\n            fontWeight:600,\n            fill:theme.colors.counter,\n            fontFamily: theme.fonts.sansSerif\n          }\n        },\n        axis: {\n          ticks: {\n            text: {\n              fontSize:14,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '9 5'\n          }\n        },\n      },\n      margin: this.props.isMobile ? { top: 0, right: 0, bottom: 30, left: 0 } : { top: 10, right: 0, bottom: 50, left: 65 }\n    }\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  changeInputValue(e){\n    let inputValue = e.target.value.length && !isNaN(e.target.value) ? Math.min(this.state.maxInputValue,parseFloat(e.target.value)) : 0;\n    inputValue = this.functionsUtil.BNify(inputValue);\n    this.setState({\n      inputValue\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const showAPYDisclaimer = idleTokenEnabled && this.functionsUtil.getGlobalConfig(['govTokens','IDLE','showAPR']);\n\n    return (\n      <DashboardCard\n        cardProps={{\n          p:[3,4]\n        }}\n      >\n        <Flex\n          width={1}\n          flexDirection={['column','row']}\n        >\n          <Flex\n            width={[1,0.3]}\n            flexDirection={'column'}\n            justifyContent={'flex-start'}\n          >\n            <Flex\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <AssetField\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n                fieldInfo={{\n                  name:'icon',\n                  props:{\n                    mb:2,\n                    height:'2.5em'\n                  }\n                }}\n              />\n              <Text\n                fontSize={2}\n                color={'cellText'}\n                textAlign={'center'}\n              >\n                Set the amount and see your estimated earnings on time based on the current APY: { this.props.tokenApy ? `${this.props.tokenApy.toFixed(2)}%` : null}\n                {\n                  showAPYDisclaimer && \n                    <Flex\n                      style={{\n                        display:'inline-flex',\n                        verticalAlign:'middle'\n                      }}\n                    >\n                      <Tooltip\n                        placement={'top'}\n                        message={this.functionsUtil.getGlobalConfig(['messages','apyLong'])}\n                      >\n                        <Icon\n                          ml={1}\n                          name={\"Info\"}\n                          size={'1em'}\n                          color={'cellTitle'}\n                        />\n                      </Tooltip>\n                    </Flex>\n                }\n              </Text>\n            </Flex>\n            <Flex\n              mt={3}\n              flexDirection={'column'}\n            >\n              <Input\n                min={0}\n                type={\"number\"}\n                required={true}\n                borderRadius={2}\n                fontWeight={500}\n                textAlign={'center'}\n                height={['3em','3.4em']}\n                borderColor={'cardBorder'}\n                boxShadow={'none !important'}\n                max={this.state.maxInputValue}\n                backgroundColor={'cardBgHover'}\n                onChange={this.changeInputValue.bind(this)}\n                border={`1px solid ${theme.colors.divider}`}\n                placeholder={`Insert ${this.props.selectedToken.toUpperCase()} amount`}\n                value={this.state.inputValue && !isNaN(this.state.inputValue) ? this.state.inputValue : ''}\n              />\n            </Flex>\n            <Flex\n              mt={3}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                buttonProps={{\n                  width:[1,1/2],\n                }}\n                handleClick={this.loadChart.bind(this)}\n              >\n                CALCULATE\n              </RoundButton>\n            </Flex>\n          </Flex>\n          <Flex\n            mt={[3,0]}\n            width={[1,0.7]}\n            id={'estimated-earnings-chart'}\n          >\n            {\n              this.props.isMobile ? (\n                <Flex\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  {\n                    this.state.chartData !== null && this.state.chartData.map((v,index) => (\n                      <Flex\n                        py={2}\n                        my={2}\n                        width={1}\n                        flexDirection={'row'}\n                        key={`earnings_${index}`}\n                      >\n                        <Flex\n                          width={0.35}\n                          alignItems={'center'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            color={'legend'}\n                          >\n                            {v.label}\n                          </Text>\n                        </Flex>\n                        <Flex\n                          width={0.65}\n                          position={'relative'}\n                          alignItems={'center'}\n                          minHeight={['20px','35px']}\n                          justifyContent={'center'}\n                        >\n                          <Flex\n                            zIndex={1}\n                            position={'relative'}\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Text\n                              fontSize={1}\n                              fontWeight={3}\n                              color={'counter'}\n                            >\n                              {this.functionsUtil.abbreviateNumber(v.value,2,4)} {this.props.selectedToken}\n                            </Text>\n                          </Flex>\n                          <Flex\n                            right={0}\n                            width={v.perc}\n                            position={'absolute'}\n                            height={['20px','35px']}\n                            borderRadius={['20px 0 0 20px','35px 0 0 35px']}\n                            style={{background:`linear-gradient(-90deg, rgba(${v.color},0) 0%, rgba(${v.color},1) 100%)`}}\n                          ></Flex>\n                        </Flex>\n                      </Flex>\n                    ))\n                  }\n                </Flex>\n              ) : (\n                <GenericChart\n                  type={Bar}\n                  height={250}\n                  showLoader={true}\n                  {...this.state.chartProps}\n                  data={this.state.chartData}\n                  parentId={'estimated-earnings-chart'}\n                />\n              )\n            }\n          </Flex>\n        </Flex>\n      </DashboardCard>\n    );\n  }\n}\n\nexport default EstimatedEarnings;","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport { Box, Flex, Icon, Text } from \"rimble-ui\";\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport AssetsList from '../AssetsList/AssetsList';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport FundsOverview from '../FundsOverview/FundsOverview';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport DepositRedeem from '../DepositRedeem/DepositRedeem';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport ActiveCoverages from '../ActiveCoverages/ActiveCoverages';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport EstimatedEarnings from '../EstimatedEarnings/EstimatedEarnings';\n\nclass AssetPage extends Component {\n\n  state = {\n    tokenApy:{},\n    tokenFees:{},\n    tokenBalance:{},\n    tokenApproved:{},\n    activeModal:null,\n    idleTokenPrice:{},\n    govTokensBalance:{},\n    idleTokenBalance:{},\n    redeemableBalance:{},\n    govTokensDisabled:{},\n    availableGovTokens:{},\n    tokenFeesPercentage:{},\n    componentMounted:false,\n    govTokensUserBalances:{}\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadTokensInfo(){\n    if (this.props.account){\n      const newState = {...this.state};\n      // await this.functionsUtil.asyncForEach(Object.keys(this.props.availableTokens),async (token) => {\n      const token = this.props.selectedToken;\n      const tokenConfig = this.props.availableTokens[token];\n      const govTokenAvailableTokens = {};\n      govTokenAvailableTokens[token] = tokenConfig;\n\n      const [\n        tokenFeesPercentage,\n        idleTokenPrice,\n        tokenApy,\n        tokenBalance,\n        tokenFees,\n        idleTokenBalance,\n        tokenApproved,\n        govTokensUserBalances,\n        govTokensBalance\n      ] = await Promise.all([\n        this.functionsUtil.getTokenFees(tokenConfig),\n        this.functionsUtil.getIdleTokenPrice(tokenConfig),\n        this.functionsUtil.getTokenApy(this.props.tokenConfig),\n        this.functionsUtil.getTokenBalance(token,this.props.account),\n        this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n        this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n        this.functionsUtil.checkTokenApproved(token,tokenConfig.idle.address,this.props.account),\n        this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,null,null),\n        this.functionsUtil.getGovTokensUserTotalBalance(this.props.account,govTokenAvailableTokens,'DAI',false)\n      ]);\n\n      newState.tokenFees[token] = tokenFees;\n      newState.tokenBalance[token] = tokenBalance;\n      newState.tokenApproved[token] = tokenApproved;\n      newState.idleTokenPrice[token] = idleTokenPrice;\n      newState.idleTokenBalance[token] = idleTokenBalance;\n      newState.govTokensBalance[token] = govTokensBalance;\n      newState.tokenFeesPercentage[token] = tokenFeesPercentage;\n      newState.govTokensUserBalances[token] = govTokensUserBalances;\n      newState.govTokensDisabled[token] = tokenConfig.govTokensDisabled;\n      newState.tokenApy[token] = tokenApy && !tokenApy.isNaN() ? tokenApy : null;\n      newState.redeemableBalance[token] = idleTokenBalance && idleTokenPrice ? idleTokenBalance.times(idleTokenPrice) : this.functionsUtil.BNify(0);\n      // });\n\n      newState.availableGovTokens = this.functionsUtil.getTokenGovTokens(this.props.tokenConfig);\n\n      // console.log('govTokensBalance',newState.govTokensBalance);\n      // console.log('availableGovTokens',newState.availableGovTokens);\n      // console.log('govTokensUserBalances',newState.govTokensUserBalances);\n\n      newState.componentMounted = true;\n\n      this.setState(newState);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    const selectedTokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    const availableTokensChanged = JSON.stringify(prevProps.availableTokens) !== JSON.stringify(this.props.availableTokens);\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n    if (accountChanged || transactionsChanged || availableTokensChanged || selectedTokenChanged){\n      // console.log('AssetPage - availableTokensChanged',availableTokensChanged);\n      this.loadTokensInfo();\n    }\n  }\n\n  render() {\n\n    const nexusMutualConfig = this.functionsUtil.getGlobalConfig(['tools','nexusMutual']);\n    const userHasFunds = this.props.account && this.state.idleTokenBalance[this.props.selectedToken] && this.functionsUtil.BNify(this.state.idleTokenBalance[this.props.selectedToken]).gt(0);\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            <Breadcrumb\n              {...this.props}\n              isMobile={this.props.isMobile}\n              path={[this.props.selectedToken]}\n              handleClick={ e => this.props.goToSection(this.props.selectedStrategy) }\n              text={this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])}\n            />\n          </Flex>\n          <Flex\n            width={0.5}\n            justifyContent={'flex-end'}\n          >\n            <CardIconButton\n              icon={'Add'}\n              {...this.props}\n              text={'Add funds'}\n              handleClick={ e => this.setActiveModal('buy') }\n            />\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Deposit / Redeem\n        </Title>\n        <Flex\n          width={1}\n        >\n          <DepositRedeem\n            {...this.props}\n            tokenFees={this.state.tokenFees[this.props.selectedToken]}\n            tokenBalance={this.state.tokenBalance[this.props.selectedToken]}\n            tokenApproved={this.state.tokenApproved[this.props.selectedToken]}\n            govTokensBalance={this.state.govTokensBalance[this.props.selectedToken]}\n            idleTokenBalance={this.state.idleTokenBalance[this.props.selectedToken]}\n            redeemableBalance={this.state.redeemableBalance[this.props.selectedToken]}\n            tokenFeesPercentage={this.state.tokenFeesPercentage[this.props.selectedToken]}\n            govTokensUserBalances={this.state.govTokensUserBalances[this.props.selectedToken]}\n          />\n        </Flex>\n        {\n          userHasFunds && nexusMutualConfig.enabled && Object.keys(nexusMutualConfig.props.availableTokens).includes(this.props.tokenConfig.idle.token) &&\n            <Flex\n              width={1}\n              id={'active-coverages'}\n              flexDirection={'column'}\n            >\n              <ActiveCoverages\n                {...this.props}\n                titleProps={{\n                  mb:3,\n                  mt:[3,4],\n                }}\n                title={'Coverage'}\n                availableTokens={[this.props.tokenConfig.idle.token]}\n              >\n                <Flex\n                  width={1}\n                  alignItems={'center'}\n                  id={'no-active-cover'}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      py:3,\n                      px:[3,4],\n                      width:[1,'auto'],\n                    }}\n                  >\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                      justifyContent={'center'}\n                    >\n                      <Icon\n                        my={[0,2]}\n                        size={'3em'}\n                        name={nexusMutualConfig.icon}\n                      />\n                      <Text\n                        mb={1}\n                        fontSize={[2,3]}\n                        fontWeight={500}\n                        textAlign={'center'}\n                      >\n                        You don't have an active coverage\n                      </Text>\n                      <Text\n                        mb={2}\n                        color={'link'}\n                        fontSize={[1,2]}\n                        fontWeight={500}\n                        textAlign={'center'}\n                      >\n                        {nexusMutualConfig.desc}\n                      </Text>\n                      <RoundButton\n                        buttonProps={{\n                          mt:1,\n                          width:'auto',\n                          minHeight:'40px',\n                          mainColor:'redeem',\n                          size:this.props.isMobile ? 'small' : 'medium'\n                        }}\n                        handleClick={ e => this.props.goToSection(`tools/${nexusMutualConfig.route}/deposit/${this.props.tokenConfig.idle.token}`) }\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                          justifyContent={'center'}\n                        >\n                          <Text\n                            color={'white'}\n                            fontSize={[1,2]}\n                            fontWeight={500}\n                          >\n                            Get Covered\n                          </Text>\n                          <Icon\n                            ml={1}\n                            size={'1.3em'}\n                            name={'KeyboardArrowRight'}\n                          />\n                        </Flex>\n                      </RoundButton>\n                    </Flex>\n                  </DashboardCard>\n                </Flex>\n              </ActiveCoverages>\n            </Flex>\n        }\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverview\n                {...this.props}\n                tokenFees={this.state.tokenFees[this.props.selectedToken]}\n              />\n            </Flex>\n        }\n        {\n          userHasFunds && this.props.account && !this.state.govTokensDisabled[this.props.selectedToken] && Object.keys(this.state.availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id={\"yield-farming\"}\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(this.state.availableGovTokens)}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.30,0.15]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    mobile:false,\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.25],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','govTokenRedeemableBalance']),\n                    props:{\n                      width:[0.35,0.30],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                    ]\n                  },\n                  {\n                    title:'DISTRIBUTION',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','userDistributionSpeed']),\n                    props:{\n                      width:[0.35,0.30],\n                    },\n                    fields:[\n                      {\n                        name:'userDistributionSpeed',\n                        props:{\n                          decimals:6\n                        }\n                      }\n                    ]\n                  },\n                  /*\n                  {\n                    title:'APR',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','govTokenApr']),\n                    props:{\n                      width:[0.2,0.17],\n                    },\n                    fields:[\n                      {\n                        name:'apr',\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','tokenPrice']),\n                    mobile:false,\n                    props:{\n                      width: 0.17,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                  */\n                ]}\n                {...this.props}\n                availableTokens={this.state.availableGovTokens}\n              />\n            </Flex>\n        }\n        {\n        this.props.account && this.state.tokenApy[this.props.selectedToken] && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'estimated-earnings-container'}\n          >\n            <Title my={[3,4]}>Estimated earnings</Title>\n            <EstimatedEarnings\n              {...this.props}\n              tokenApy={this.state.tokenApy[this.props.selectedToken]}\n            />\n          </Flex>\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              enabledTokens={[this.props.selectedToken]}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport { useSwipeable } from 'react-swipeable';\n\nexport default function Swipeable(){\n\n  const params = arguments[0];\n\n  const handlers = useSwipeable({\n    onSwiped: (eventData) => params.callback(eventData),\n    delta: 10,                            // min distance(px) before a swipe starts\n    preventDefaultTouchmoveEvent: false,  // call e.preventDefault *See Details*\n    trackTouch: true,                     // track touch input\n    trackMouse: false,                    // track mouse input\n    rotationAngle: 0,                     // set a rotation angle\n  });\n\n  return (\n  \t<div {...handlers} style={{ touchAction: 'pan-x' }}>\n  \t\t{params.children}\n  \t</div>\n  );\n}","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport { Text, Modal, Flex, Link } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass BetaModal extends React.Component {\n\n  state = {};\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    this.functionsUtil.setLocalStorage('betaApproved',true);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','650px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            pt={3}\n            iconHeight={'40px'}\n            title={'Beta Version'}\n            icon={'images/warning.svg'}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                fontSize={2}\n                textAlign={'left'}\n                color={'dark-gray'}\n              >\n                You're about to enter Idle Finance Beta Dashboard – this is the place where several un-audited and risky features are being tested!<br />Please use at your own risk, or visit the official website at <Link fontSize={2} mainColor={'primary'} hoverColor={'primary'} href={this.functionsUtil.getGlobalConfig(['baseURL'])}>{this.functionsUtil.getGlobalConfig(['baseURL'])}</Link>.\n              </Text>\n            </Flex>\n            <Flex\n              my={3}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                handleClick={this.closeModal}\n                buttonProps={{\n                  width:['100%','40%']\n                }}\n              >\n                Continue Anyway\n              </RoundButton>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default BetaModal;","import React, { Component } from 'react';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Box, Text, Icon, Tooltip, Link, Input } from \"rimble-ui\";\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\n\nclass CurveDeposit extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    depositSlippage:null,\n    redeemableBalance:null,\n    migrationContract:null,\n    curveTokensBalance:null,\n    migrationSucceeded:false,\n    fastBalanceSelector:null,\n    migrationContractApproved:false,\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    await this.initToken();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const idleTokenBalanceChanged = prevProps.idleTokenBalance !== this.props.idleTokenBalance;\n    if (accountChanged || idleTokenBalanceChanged){\n      await this.initToken();\n    }\n    \n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const inputValueChanged = this.state.inputValue !== prevState.inputValue;\n    if (inputValueChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  setInputValue = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    const inputValue = this.props.idleTokenBalance ? this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage) : null;\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    const buttonDisabled = !amount || amount.gt(this.state.idleTokenBalance);\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  approve = async () => {\n    const migrationContract = this.state.migrationContract;\n    if (migrationContract){\n\n      // Check if the migration contract is approved\n      const migrationContractApproved = await this.checkMigrationContractApproved();\n\n      if (!migrationContractApproved){\n\n        const callbackApprove = (tx,error) => {\n          // Send Google Analytics event\n          const eventData = {\n            eventAction: 'approve',\n            eventCategory: 'CurveDeposit',\n            eventLabel: tx ? tx.status : null\n          };\n\n          const txSucceeded = tx && tx.status === 'success';\n\n          // console.log('callbackApprove',tx,error);\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            migrationContractApproved: txSucceeded, // True\n            processing: {\n              ...prevState.processing,\n              txHash:null,\n              loading:false\n            }\n          }));\n\n          if (typeof this.props.callbackApprove === 'function' && txSucceeded){\n            this.props.callbackApprove(tx);\n          }\n\n          this.checkMigration();\n        };\n\n        const callbackReceiptApprove = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              txHash\n            }\n          }));\n        };\n\n        this.functionsUtil.enableERC20(this.props.selectedToken,migrationContract.address,callbackApprove,callbackReceiptApprove);\n\n        this.setState((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            txHash:null,\n            loading:true\n          },\n          migrationContractApproved:false\n        }));\n      } else {\n        this.setState({\n          migrationContractApproved:true\n        });\n      }\n    }\n  }\n\n  deposit = async () => {\n\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    if (!inputValue){\n      return false;\n    }\n\n    const callbackDeposit = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveDeposit`,\n        eventAction: this.props.selectedToken,\n        eventValue: inputValue.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackDeposit === 'function' && txSucceeded){\n        this.props.callbackDeposit(tx);\n      }\n    };\n\n    const callbackReceiptDeposit = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.migrationContract.name;\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n    const depositParams = await this.getMigrationParams(_amount);\n\n    this.props.contractMethodSendWrapper(contractName, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  cancelTransaction = async () => {\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  async getMigrationParams(toMigrate){\n    const migrationParams = [];\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.selectedToken]);\n\n    if (!curveTokenConfig){\n      return false;\n    }\n    \n    const migrationContractParams = curveTokenConfig.migrationParams;\n    if (migrationContractParams.n_coins){\n      const amounts = await this.functionsUtil.getCurveAmounts(this.props.selectedToken,toMigrate,true);\n      let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n\n      if (this.state.maxSlippage){\n        minMintAmount = this.functionsUtil.BNify(minMintAmount);\n        minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n        minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n      }\n\n      migrationParams.push(amounts);\n      migrationParams.push(minMintAmount);\n    }\n\n    return migrationParams;\n  }\n\n  async calculateSlippage(){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (inputValue){\n      let underlyingBalanceToDeposit = inputValue;\n      if (underlyingBalanceToDeposit){\n        const idleTokenPrice = await this.functionsUtil.getIdleTokenPrice(this.props.tokenConfig);\n        if (idleTokenPrice){\n          underlyingBalanceToDeposit = underlyingBalanceToDeposit.times(idleTokenPrice);\n        }\n      } else {\n        underlyingBalanceToDeposit = this.functionsUtil.BNify(0);\n      }\n\n      const normalizeIdleTokenBalance = this.functionsUtil.normalizeTokenAmount(underlyingBalanceToDeposit,this.props.tokenConfig.decimals);\n      let depositSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizeIdleTokenBalance);\n      if (depositSlippage){\n        depositSlippage = depositSlippage.times(100);\n      }\n\n      this.setState({\n        depositSlippage\n      });\n    }\n  }\n\n  async checkMigrationContractApproved(){\n    const migrationContract = this.state.migrationContract || await this.functionsUtil.getCurveSwapContract();\n    if (migrationContract){\n      return await this.functionsUtil.checkTokenApproved(this.props.tokenConfig.idle.token,migrationContract.address,this.props.account);\n    }\n    return false;\n  }\n\n  async initToken(){\n\n    // Init and check migration contract\n    const migrationContract = await this.functionsUtil.getCurveSwapContract();\n    const migrationContractApproved = await this.checkMigrationContractApproved();\n\n    this.setState({\n      migrationContract,\n      migrationContractApproved\n    });\n  }\n\n  approveCallback = () => {\n    this.initToken();\n  }\n\n  migrationCallback = () => {\n    this.setState({\n      migrationSucceeded:true\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken){\n      return null;\n    }\n\n    // const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const hasCurveTokens = this.state.curveTokensBalance && this.state.curveTokensBalance.gt(0);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n            {\n              this.props.idleTokenBalance && this.props.idleTokenBalance.gt(0) && (\n                <Box\n                  width={1}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:3,\n                      px:[2,4]\n                    }}\n                  >\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    > \n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ this.state.migrationContractApproved ? 'CheckBox' : 'LooksOne'}\n                          color={ this.state.migrationContractApproved ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Approve the Curve contract\n                        </Text>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ hasCurveTokens ? 'CheckBox' : 'LooksTwo'}\n                          color={ hasCurveTokens ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Deposit your {this.props.tokenConfig.idle.token}\n                        </Text>\n                      </Flex>\n                    </Flex>\n                  </DashboardCard>\n                  {\n                    !this.state.migrationContractApproved ?\n                      this.state.processing.loading ? (\n                        <Flex\n                          mt={3}\n                          flexDirection={'column'}\n                        >\n                          <TxProgressBar\n                            web3={this.props.web3}\n                            waitText={`Approve estimated in`}\n                            hash={this.state.processing.txHash}\n                            endMessage={`Finalizing approve request...`}\n                            cancelTransaction={this.cancelTransaction.bind(this)}\n                          />\n                        </Flex>\n                      ) : (\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            mt:3,\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                          >\n                            <Icon\n                              size={'2.3em'}\n                              name={'LockOpen'}\n                              color={'cellText'}\n                            />\n                            <Text\n                              mt={1}\n                              fontSize={2}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              To deposit your {this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.\n                            </Text>\n                            <RoundButton\n                              buttonProps={{\n                                mt:3,\n                                width:[1,1/2]\n                              }}\n                              handleClick={this.approve.bind(this)}\n                            >\n                              Approve\n                            </RoundButton>\n                          </Flex>\n                        </DashboardCard>\n                      )\n                    : this.state.processing.loading ? (\n                      <Flex\n                        mt={3}\n                        flexDirection={'column'}\n                      >\n                        <TxProgressBar\n                          web3={this.props.web3}\n                          waitText={`Deposit estimated in`}\n                          hash={this.state.processing.txHash}\n                          endMessage={`Finalizing deposit request...`}\n                          cancelTransaction={this.cancelTransaction.bind(this)}\n                        />\n                      </Flex>\n                    ) : (\n                      <Box\n                        mt={2}\n                        width={1}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text>\n                            Choose max slippage:\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={`Max additional slippage on top of the one shown below`}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                          justifyContent={'space-between'}\n                        >\n                          {\n                            [0.2,0.5,1,5].map( slippage => (\n                              <FastBalanceSelector\n                                cardProps={{\n                                  p:1\n                                }}\n                                textProps={{\n                                  fontSize:1\n                                }}\n                                percentage={slippage}\n                                key={`selector_${slippage}`}\n                                onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                isActive={this.state.maxSlippage === parseFloat(slippage)}\n                              />\n                            ))\n                          }\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                        >\n                          <Flex\n                            mb={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={this.state.depositSlippage ? 'space-between' : 'flex-end'}\n                          >\n                            {\n                              this.state.depositSlippage && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    textAlign={'right'}\n                                    style={{\n                                      whiteSpace:'nowrap'\n                                    }}\n                                    color={ parseFloat(this.state.depositSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                  >\n                                    {\n                                      parseFloat(this.state.depositSlippage.toFixed(3)) === 0 ?\n                                        'No Slippage'\n                                      : `${ this.state.depositSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositSlippage.abs().toFixed(3)}%`\n                                    }\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.state.depositSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              )\n                            }\n                            {\n                              this.props.idleTokenBalance && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'flex-end'}\n                                >\n                                  <Link\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'right'}\n                                    hoverColor={'copyColor'}\n                                    onClick={ (e) => this.setFastBalanceSelector(100) }\n                                    style={{\n                                      maxWidth:'100%',\n                                      overflow:'hidden',\n                                      whiteSpace:'nowrap',\n                                      textOverflow:'ellipsis'\n                                    }}\n                                  >\n                                    {this.props.idleTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {this.props.selectedToken}\n                                  </Link>\n                                </Flex>\n                              )\n                            }\n                          </Flex>\n                          <Input\n                            min={0}\n                            type={\"number\"}\n                            required={true}\n                            height={'3.4em'}\n                            borderRadius={2}\n                            fontWeight={500}\n                            boxShadow={'none !important'}\n                            placeholder={`Insert amount`}\n                            onChange={this.changeInputValue.bind(this)}\n                            border={`1px solid ${this.props.theme.colors.divider}`}\n                            value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                          />\n                          <Flex\n                            mt={2}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'space-between'}\n                          >\n                            {\n                              [25,50,75,100].map( percentage => (\n                                <FastBalanceSelector\n                                  percentage={percentage}\n                                  key={`selector_${percentage}`}\n                                  onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                  isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                                />\n                              ))\n                            }\n                          </Flex>\n                          <Flex\n                            mt={2}\n                            justifyContent={'center'}\n                          >\n                            <RoundButton\n                              buttonProps={{\n                                mt:2,\n                                width:[1,1/2],\n                                disabled:this.state.buttonDisabled\n                              }}\n                              handleClick={this.deposit.bind(this)}\n                            >\n                              Deposit\n                            </RoundButton>\n                          </Flex>\n                        </Flex>\n                      </Box>\n                    )\n                  }\n                </Box>\n              )\n            }\n          {\n            /*\n            this.state.tokenConfig && this.state.redeemableBalance ? (\n              <Box width={1}>\n                <Migrate\n                  {...this.props}\n                  showActions={false}\n                  getTokenPrice={false}\n                  migrationTextProps={{\n                    fontWeight:500\n                  }}\n                  isMigrationTool={true}\n                  migrationImage={{\n                    mb:1,\n                    height:'1.8em',\n                    src:curveConfig.params.image\n                  }}\n                  showBalanceSelector={true}\n                  waitText={'Deposit estimated in'}\n                  tokenConfig={this.state.tokenConfig}\n                  callbackApprove={this.approveCallback.bind(this)}\n                  migrationParams={this.getMigrationParams.bind(this)}\n                  migrationCallback={this.migrationCallback.bind(this)}\n                  approveText={`To deposit your ${this.props.tokenConfig.idle.token} you need to approve Curve smart-contract first.`}\n                  migrationText={`You can deposit ${this.state.redeemableBalance.toFixed(4)} ${this.props.tokenConfig.idle.token} in the Curve Pool${ this.state.depositSlippage ? (this.state.depositSlippage.gte(0) ? ` with <span style=\"color:${this.props.theme.colors.transactions.status.failed}\">${this.state.depositSlippage.times(100).toFixed(2)}% of slippage</span>` : ` with <span style=\"color:${this.props.theme.colors.transactions.status.completed}\">${Math.abs(parseFloat(this.state.depositSlippage.times(100).toFixed(2)))}% of bonus</span>`) : '' }.`}\n                >\n                  {\n                    !this.props.account ? (\n                      <DashboardCard\n                        cardProps={{\n                          p:3,\n                          mt:3\n                        }}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                        >\n                          <Icon\n                            size={'2.3em'}\n                            name={'Input'}\n                            color={'cellText'}\n                          />\n                          <Text\n                            mt={2}\n                            fontSize={2}\n                            color={'cellText'}\n                            textAlign={'center'}\n                          >\n                            Please connect with your wallet interact with Idle.\n                          </Text>\n                          <RoundButton\n                            buttonProps={{\n                              mt:2,\n                              width:[1,1/2]\n                            }}\n                            handleClick={this.props.connectAndValidateAccount}\n                          >\n                            Connect\n                          </RoundButton>\n                        </Flex>\n                      </DashboardCard>\n                    ) : (\n                      <DashboardCard\n                        cardProps={{\n                          p:3\n                        }}\n                      >\n                        {\n                          this.state.migrationSucceeded ? (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'DoneAll'}\n                                color={this.props.theme.colors.transactions.status.completed}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You have successfully deposited your {this.props.tokenConfig.idle.token} in the Curve Pool!\n                              </Text>\n                            </Flex>\n                          ) : (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'MoneyOff'}\n                                color={'cellText'}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You don't have any {this.props.tokenConfig.idle.token} in your wallet.\n                              </Text>\n                            </Flex>\n                          )\n                        }\n                      </DashboardCard>\n                    )\n                  }\n                </Migrate>\n              </Box>\n            ) : null\n            */\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveDeposit;","import theme from '../theme';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\n// import { linearGradientDef } from '@nivo/core'\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport ChartCustomTooltip from '../ChartCustomTooltip/ChartCustomTooltip';\nimport ChartCustomTooltipRow from '../ChartCustomTooltipRow/ChartCustomTooltipRow';\n\nclass PortfolioEquityCurve extends Component {\n  state = {\n    startDate:null,\n    chartData:null,\n    chartProps:null,\n    chartwidth:null,\n    chartHeight:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentDidMount(){\n    this.loadUtils();\n    this.loadChartData();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n\n    const quickDateSelectionChanged = prevProps.quickDateSelection !== this.props.quickDateSelection;\n    const tokenChanged = JSON.stringify(prevProps.enabledTokens) !== JSON.stringify(this.props.enabledTokens);\n    if (tokenChanged || quickDateSelectionChanged){\n      this.setState({\n        chartData:null\n      },() => {\n        this.componentDidMount();\n      });\n    }\n\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n    if (mobileChanged){\n      this.loadChartData();\n    }\n  }\n\n  async loadChartData() {\n\n    let enabledTokens = this.props.enabledTokens;\n    if (!enabledTokens || !enabledTokens.length){\n      enabledTokens = Object.keys(this.props.availableTokens);\n    }\n\n    const curveTxs = await this.functionsUtil.getCurveTxs(this.props.account,0,'latest',enabledTokens);\n\n    const chartData = [];\n    let tokensBalance = [];\n    const processedTxs = {};\n    let firstTxTimestamp = null;\n    let totalBalance = this.functionsUtil.BNify(0);\n    const curvePoolContract = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    if (curveTxs && curveTxs.length){\n\n      curveTxs.forEach((tx,index) => {\n\n        if (!processedTxs[tx.hash]){\n          processedTxs[tx.hash] = [];\n        }\n\n        if (processedTxs[tx.hash].includes(tx.action)){\n          return;\n        }\n        \n        firstTxTimestamp = firstTxTimestamp ? Math.min(firstTxTimestamp,parseInt(tx.timeStamp)) : parseInt(tx.timeStamp);\n\n        const curveTokens = this.functionsUtil.BNify(tx.curveTokens);\n\n        switch (tx.action){\n          case 'CurveIn':\n          case 'CurveZapIn':\n          case 'CurveDepositIn':\n          case 'CurveTransferIn':\n            totalBalance = totalBalance.plus(curveTokens);\n          break;\n          case 'CurveOut':\n          case 'CurveZapOut':\n          case 'CurveDepositOut':\n          case 'CurveTransferOut':\n            totalBalance = totalBalance.minus(curveTokens);\n          break;\n          default:\n          break;\n        }\n\n        // Reset totalBalance if below zero\n        if (totalBalance.lt(0)){\n          totalBalance = this.functionsUtil.BNify(0);\n        }\n\n        const action = tx.action;\n        const balance = totalBalance;\n        const timeStamp = parseInt(tx.timeStamp);\n        const curveTokenPrice = this.functionsUtil.fixTokenDecimals(tx.curveTokenPrice,curvePoolContract.decimals);\n\n        // console.log(this.functionsUtil.strToMoment(timeStamp*1000).format('YYYY/MM/DD HH:mm'),tx.hash,tx.action,curveTokens.toString(),totalBalance.toString());\n\n        if (!curveTokenPrice.isNaN() && !curveTokenPrice.isNaN()){\n          tokensBalance.push({\n            action,\n            balance,\n            timeStamp,\n            curveTokens,\n            curveTokenPrice\n          });\n\n          processedTxs[tx.hash].push(action);\n        }\n      });\n    }\n\n    // Calculate Start Date\n    let startDate = null;\n    const currentDate = this.functionsUtil.strToMoment(new Date());\n\n    switch (this.props.quickDateSelection){\n      case 'week':\n        startDate = currentDate.clone().subtract(1,'week');\n      break;\n      case 'month':\n        startDate = currentDate.clone().subtract(1,'month');\n      break;\n      case 'month3':\n        startDate = currentDate.clone().subtract(3,'month');\n      break;\n      case 'month6':\n        startDate = currentDate.clone().subtract(6,'month');\n      break;\n      default:\n        startDate = null;\n      break;\n    }\n\n    const days = {};\n    let prevBalances = {};\n    let prevTimestamp = null;\n    let minChartValue = null;\n    let maxChartValue = null;\n    const aggregatedBalancesKeys = {};\n    const tokensBalancesPerDate = {};\n    let aggregatedBalance = this.functionsUtil.BNify(0);\n    // let curveTokenBalance = this.functionsUtil.BNify(0);\n    const currTimestamp = parseInt(new Date().getTime()/1000)+86400;\n\n    const tokensData = await this.functionsUtil.getTokenApiData(Object.values(this.props.availableTokens)[0].address,false,firstTxTimestamp,null,false,3600);\n\n    for (let timeStamp=firstTxTimestamp;timeStamp<=currTimestamp;timeStamp+=this.props.frequencySeconds){\n\n      let foundBalances = {};\n      let tokensBalances = {};\n      timeStamp = Math.min(currTimestamp,timeStamp);\n      let momentDate = this.functionsUtil.strToMoment(timeStamp*1000);\n\n      // eslint-disable-next-line\n      const filteredTokenData = tokensData.filter(tx => (tx.timestamp>=prevTimestamp && tx.timestamp<=timeStamp));\n\n      // eslint-disable-next-line\n      let filteredBalances = tokensBalance.filter(tx => (tx.timeStamp<=timeStamp && (!prevTimestamp || tx.timeStamp>prevTimestamp)));\n      \n      if (!filteredBalances.length){\n        if (prevBalances){\n          filteredBalances = prevBalances;\n          const lastFilteredTx = Object.values(filteredBalances).pop();\n          const currentBalance = parseFloat(lastFilteredTx.balance);\n\n          const lastTokenData = Object.values(filteredTokenData).pop();\n          let curveTokenPrice = null;\n          if (lastTokenData){\n            curveTokenPrice = await this.functionsUtil.getCurveTokenPrice(lastTokenData.blocknumber);\n          }\n\n          // Take idleToken price from API and calculate new balance\n          if (currentBalance>0 && timeStamp>firstTxTimestamp && curveTokenPrice){\n            // Set new curveTokenPrice\n            lastFilteredTx.curveTokenPrice = curveTokenPrice;\n            filteredBalances = [lastFilteredTx];\n          }\n        } else {\n          filteredBalances = [{\n            balance:this.functionsUtil.BNify(0),\n            curveTokenPrice:this.functionsUtil.BNify(0)\n          }];\n        }\n      }\n\n      const lastTx = Object.assign([],filteredBalances).pop();\n      let lastTxBalance = this.functionsUtil.BNify(lastTx.balance).times(lastTx.curveTokenPrice);\n\n      tokensBalances[curvePoolContract.token] = this.functionsUtil.BNify(lastTx.balance);\n      aggregatedBalance = lastTxBalance;\n\n      foundBalances = filteredBalances;\n\n      // console.log(momentDate.format('YYYY/MM/DD 00:00'),lastTx.balance.toString(),lastTx.curveTokenPrice.toString(),lastTxBalance.toString());\n\n      if (startDate === null || momentDate.isSameOrAfter(startDate)){\n        \n        if (momentDate.isAfter(new Date(),'day')){\n          momentDate = this.functionsUtil.strToMoment(new Date());\n        }\n\n        // Force date to midnight\n        const formattedDate = momentDate.format('YYYY/MM/DD 00:00');\n\n        // Save days for axisBottom format\n        days[momentDate.format('YYYY/MM/DD')] = 1;\n\n        const aggregatedBalanceParsed = parseFloat(parseFloat(aggregatedBalance.toFixed(6)));\n\n        aggregatedBalancesKeys[formattedDate] = aggregatedBalanceParsed;\n        tokensBalancesPerDate[formattedDate] = tokensBalances;\n\n        // console.log(formattedDate,tokensBalances);\n\n        minChartValue = minChartValue === null ? aggregatedBalanceParsed : Math.min(minChartValue,aggregatedBalanceParsed);\n        maxChartValue = maxChartValue === null ? aggregatedBalanceParsed : Math.max(maxChartValue,aggregatedBalanceParsed);\n      }\n\n      prevTimestamp = timeStamp;\n      prevBalances = foundBalances;\n    }\n\n    const aggregatedBalances = Object.keys(aggregatedBalancesKeys).map(date => ({\n      x:date,\n      y:aggregatedBalancesKeys[date],\n      balances:tokensBalancesPerDate[date]\n    }));\n\n    let itemIndex = 0;\n    aggregatedBalances.forEach( (item,index) => {\n      const itemPos = Math.floor(itemIndex/aggregatedBalances.length*100);\n      aggregatedBalances[index].itemPos = itemPos;\n      itemIndex++;\n    });\n\n    /*\n    aggregatedBalances.push({\n      x:momentDate.format('YYYY/MM/DD HH:mm'),\n      y:aggregatedBalance\n    });\n    */\n\n    // Add day before to start with zero balance\n    /*\n    const firstTxMomentDate = this.functionsUtil.strToMoment(firstTxTimestamp*1000);\n    if ((startDate === null || startDate.isSameOrBefore(firstTxMomentDate)) && aggregatedBalances.length){\n      const firstItem = aggregatedBalances[0];\n      const firstDate = this.functionsUtil.strToMoment(firstItem.x,'YYYY/MM/DD HH:mm');\n      firstDate.subtract(1,'day');\n      aggregatedBalances.unshift({\n        x:firstDate.format('YYYY/MM/DD HH:mm'),\n        y:0\n      });\n    }\n    */\n\n    // Add token Data\n    chartData.push({\n      id:'USD',\n      color: 'hsl('+ this.functionsUtil.getGlobalConfig(['stats','tokens','USD','color','hsl']).join(',')+')',\n      data:aggregatedBalances\n    });\n\n    let yFormatDecimals = 2;\n    if (maxChartValue-minChartValue<1){\n      yFormatDecimals = 4;\n    }\n\n    if (maxChartValue === minChartValue){\n      minChartValue = Math.max(0,maxChartValue-1);\n    }\n\n    const maxGridLines = 5;\n    const gridYStep = (maxChartValue-minChartValue)/maxGridLines;\n    const gridYValues = [];\n    for (let i=0;i<=maxGridLines;i++){\n      const gridYValue = parseFloat(parseFloat(minChartValue+(i*gridYStep)).toFixed(6));\n      gridYValues.push(gridYValue);\n    }\n    \n    const axisBottomMaxValues = 10;\n    const daysCount = Object.values(days).length;    \n    const daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n    const chartProps = {\n      xScale:{\n        type: 'time',\n        format: '%Y/%m/%d %H:%M',\n      },\n      yScale:{\n        type: 'linear',\n        stacked: false,\n        min: minChartValue,\n        max: maxChartValue\n      },\n      xFormat:'time:%b %d %Y',\n      yFormat:value => this.functionsUtil.formatMoney(value,yFormatDecimals),\n      axisBottom: this.props.isMobile ? null : {\n        legend: '',\n        tickSize:0,\n        format: '%b %d',\n        tickPadding: 15,\n        orient: 'bottom',\n        legendOffset: 36,\n        legendPosition: 'middle',\n        tickValues:'every '+daysFrequency+' days'\n      },\n      gridYValues,\n      pointSize:0,\n      useMesh:true,\n      axisLeft: this.props.isMobile ? null : {\n        legend: '',\n        tickSize: 0,\n        orient: 'left',\n        tickPadding: 10,\n        tickRotation: 0,\n        legendOffset: -70,\n        tickValues:gridYValues,\n        legendPosition: 'middle',\n        format: v => this.functionsUtil.abbreviateNumber(v,2),\n      },\n      animate:true,\n      pointLabel:'y',\n      areaOpacity:0.1,\n      enableArea:true,\n      enableSlices:'x',\n      enableGridY:true,\n      curve:'monotoneX',\n      enableGridX:false,\n      pointBorderWidth:1,\n      colors:d => d.color,\n      pointLabelYOffset:-12,\n      areaBaselineValue:minChartValue,\n      pointColor:{ from: 'color', modifiers: []},\n      theme:{\n        axis: {\n          ticks: {\n            text: {\n              fontSize:12,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '8 4'\n          }\n        },\n      },\n      /*\n      defs:[\n        linearGradientDef('gradientA', [\n          { offset: 0, color: 'inherit' },\n          { offset: 100, color: 'inherit', opacity: 0 },\n        ]),\n      ],\n      fill:[{ match: '*', id: 'gradientA' }],\n      */\n      margin: this.props.isMobile ? { top: 20, right: 25, bottom: 25, left: 20 } : { top: 30, right: 50, bottom: 45, left: 50 },\n      sliceTooltip:(slideData) => {\n        const { slice } = slideData;\n        const point = slice.points[0];\n        return (\n          <ChartCustomTooltip\n            point={point}\n          >\n            <ChartCustomTooltipRow\n              color={point.color}\n              label={point.serieId}\n              value={`$ ${point.data.yFormatted}`}\n            />\n            {\n            typeof point.data.balances === 'object' && Object.keys(point.data.balances).length>0 &&\n              Object.keys(point.data.balances).map(token => {\n                if (token === point.serieId){\n                  return null;\n                }\n                const tokenInfo = this.functionsUtil.getGlobalConfig(['stats','tokens',token]);\n                if (tokenInfo){\n                  const tokenName = tokenInfo.name ? tokenInfo.name : token;\n                  const color = tokenInfo.color.hex;\n                  const balance = point.data.balances[token];\n                  let formattedBalance = this.functionsUtil.formatMoney(balance,2);\n                  if (parseFloat(balance)>=0.01){\n                    return (\n                      <ChartCustomTooltipRow\n                        label={tokenName}\n                        color={color}\n                        key={`row_${token}`}\n                        value={`${formattedBalance}`}\n                      />\n                    );\n                  }\n                }\n                return null;\n              })\n            }\n          </ChartCustomTooltip>\n        );\n      }\n    };\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  render() {\n    return (\n      <GenericChart\n        type={Line}\n        showLoader={true}\n        {...this.state.chartProps}\n        data={this.state.chartData}\n        parentId={this.props.parentId}\n        height={this.props.chartHeight}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default PortfolioEquityCurve;","import theme from '../theme';\nimport Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport { Flex, Heading, Text } from \"rimble-ui\";\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport PortfolioEquityCurve from '../PortfolioEquityCurve/PortfolioEquityCurve';\n\nclass FundsOverviewCurve extends Component {\n\n  state = {\n    compAPR:null,\n    aggregatedValues:[],\n    govTokensUserBalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    await this.functionsUtil.getCurveAvgBuyPrice();\n\n    // debugger;\n\n    await this.functionsUtil.getCurveAvgSlippage();\n\n    // debugger;\n    /*\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const [govTokensUserBalance,avgAPY,days] = await Promise.all([\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,'DAI'),\n      this.functionsUtil.loadAssetField('avgAPY',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '-') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    let [tokenAllocation,compAPR] = await Promise.all([\n      this.functionsUtil.getTokenAllocation(this.props.tokenConfig,false,false),\n      this.functionsUtil.getCompAPR(this.props.selectedToken,this.props.tokenConfig)\n    ]);\n\n    if (tokenAllocation){\n      const compoundInfo = this.props.tokenConfig.protocols.find( p => (p.name === 'compound') );\n      if (compoundInfo){\n        if (tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()]){\n          const compoundAllocationPerc = tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()];\n          compAPR = compAPR.times(compoundAllocationPerc);\n        }\n      }\n    }\n\n    this.setState({\n      compAPR,\n      aggregatedValues,\n      govTokensUserBalance\n    });\n    */\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Text\n                          mt={2}\n                          fontWeight={2}\n                          fontSize={[1,2]}\n                          color={'cellText'}\n                        >\n                          {v.props.title}\n                        </Text>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquityCurve\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLentCurve',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPercCurve',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            {\n              /*\n              <Flex\n                mb={[2,0]}\n                width={[1,1/5]}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'flex-start'}\n              >\n                <Title\n                  mb={2}\n                  fontSize={[3,4]}\n                  component={Heading.h3}\n                >\n                  Fees\n                </Title>\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'feesCounter',\n                    props:{\n                      decimals:7,\n                      maxPrecision:8,\n                      style:{\n                        fontWeight:300,\n                        fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                        color:theme.colors.counter\n                      },\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n              */\n            }\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveApy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Avg Slippage\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveAvgSlippage',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverviewCurve;","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport { Box, Flex, Text, Icon } from \"rimble-ui\";\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport CurveDeposit from '../CurveDeposit/CurveDeposit';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport TransactionField from '../TransactionField/TransactionField';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport FundsOverviewCurve from '../FundsOverviewCurve/FundsOverviewCurve';\n\nclass AssetPage extends Component {\n\n  state = {\n    inputValue:{},\n    processing:{},\n    tokenFees:null,\n    canRedeem:null,\n    canDeposit:null,\n    action:'deposit',\n    activeModal:null,\n    tokenConfig:null,\n    tokenBalance:null,\n    tokenApproved:null,\n    selectedToken:null,\n    availableTokens:{},\n    redeemBalance:null,\n    depositBalance:null,\n    buttonDisabled:false,\n    curveTokenPrice:null,\n    depositSlippage:null,\n    idleTokenBalance:null,\n    withdrawSlippage:null,\n    govTokensBalance:null,\n    curveZapContract:null,\n    curveTokenConfig:null,\n    curveTokensAmounts:{},\n    govTokensDisabled:null,\n    componentMounted:false,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    redeemableBalance:null,\n    fastBalanceSelector:{},\n    curveAvailableTokens:{},\n    tokenFeesPercentage:null,\n    redeemUnevenAmounts:false,\n    curveDepositContract:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  changeFromToken = (selectedToken) => {\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    this.props.goToSection(`${curveConfig.params.route}/${selectedToken}`);\n  }\n\n  getSelectedToken(){\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    return this.props.urlParams.param1 && curveAvailableTokens[this.props.urlParams.param1] ? this.props.urlParams.param1 : Object.keys(curveAvailableTokens)[0];\n  }\n\n  setSelectedToken = async (selectedToken) => {\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n    this.setState({\n      tokenConfig,\n      selectedToken,\n      availableTokens,\n      curveTokenConfig\n    });\n  }\n\n  loadTokensInfo = async () => {\n\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    this.setState({\n      curveAvailableTokens\n    });\n\n    const selectedToken = this.getSelectedToken();\n    // Check if token is set the query params\n    if (selectedToken && selectedToken !== this.props.urlParams.param1){\n      this.changeFromToken(selectedToken);\n      return await this.setSelectedToken(selectedToken);\n    } else if (selectedToken !== this.state.selectedToken){\n      await this.setSelectedToken(selectedToken);\n    }\n\n    const newState = {...this.state};\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n\n    if (newState.selectedToken !== selectedToken){\n      newState.selectedToken = selectedToken;\n    }\n\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n\n    const [\n      curveZapContract,\n      curvePoolContract,\n      curveSwapContract,\n      curveDepositContract\n    ] = await Promise.all([\n      this.functionsUtil.getCurveZapContract(),\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract()\n    ]);\n\n    newState.curveZapContract = curveZapContract;\n    newState.curvePoolContract = curvePoolContract;\n    newState.curveSwapContract = curveSwapContract;\n    newState.curveDepositContract = curveDepositContract;\n\n    newState.availableTokens = availableTokens;\n\n\n    // console.log('curveTokenPrice',newState.curveTokenPrice.toFixed(6),'curveTokenBalance',newState.curveTokenBalance.toFixed(6),'redeemableBalance',newState.redeemableBalance.toFixed(20),'tokenBalance',newState.tokenBalance.toFixed(20));\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[selectedToken] = tokenConfig;\n\n    newState.tokenConfig = tokenConfig;\n    newState.curveTokenConfig = curveTokenConfig;\n\n    if (this.props.account){\n      [\n        newState.curveTokenPrice,\n        newState.curveTokenBalance,\n        newState.tokenFeesPercentage,\n        newState.tokenFees,\n        newState.tokenBalance,\n        newState.idleTokenBalance,\n        newState.tokenApproved,\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokenPrice(),\n        this.functionsUtil.getCurveTokenBalance(),\n        this.functionsUtil.getTokenFees(tokenConfig),\n        this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n        this.functionsUtil.getTokenBalance(selectedToken,this.props.account),\n        this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n        this.functionsUtil.checkTokenApproved(selectedToken,curveDepositContract.address,this.props.account),\n      ]);\n\n\n      newState.processing = {\n        redeem:{\n          txHash:null,\n          loading:false\n        },\n        deposit:{\n          txHash:null,\n          loading:false\n        },\n        approve:{\n          txHash:null,\n          loading:false\n        },\n      };\n      newState.inputValue = {\n        redeem:null,\n        deposit:null\n      };\n      newState.fastBalanceSelector = {\n        redeem:null,\n        deposit:null\n      };\n\n      newState.componentMounted = true;\n      newState.depositBalance = newState.tokenBalance;\n      newState.redeemBalance = newState.redeemableBalance;\n      newState.govTokensDisabled = tokenConfig.govTokensDisabled;\n      newState.canRedeem = newState.curveTokenBalance && newState.curveTokenBalance.gt(0);\n      newState.canDeposit = newState.idleTokenBalance && newState.idleTokenBalance.gt(0);\n      newState.redeemableBalance = newState.curveTokenBalance ? newState.curveTokenBalance.times(newState.curveTokenPrice) : this.functionsUtil.BNify(0);\n    }\n\n    this.setState(newState);\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async calculateSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,this.state.curvePoolContract.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositBalance = amount;\n        newState.depositSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      case 'redeem':\n        newState.redeemBalance = amount;\n        newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.urlParams.param1 !== this.props.urlParams.param1;\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n\n    if (accountChanged || transactionsChanged || tokenChanged){\n      await this.loadTokensInfo();\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const redeemUnevenAmountsChanged = this.state.redeemUnevenAmounts !== prevState.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n    if (actionChanged || fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    if (actionChanged){\n      this.updateAssetSelector();\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  updateAssetSelector = async () => {\n    const newState = {};\n    switch (this.state.action){\n      case 'deposit':\n        this.loadTokensInfo();\n      break;\n      case 'redeem':\n        // this.loadTokensInfo();\n        const tokenConfig = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n        newState.curveAvailableTokens = {};\n        newState.curveTokenConfig = tokenConfig;\n        newState.selectedToken = tokenConfig.token;\n        newState.curveAvailableTokens[tokenConfig.token] = tokenConfig;\n      break;\n      default:\n      break;\n    }\n\n    this.setState(newState);\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.state.tokenBalance ? this.functionsUtil.BNify(this.state.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          amount = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n        } else {\n          amount = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  changeInputValue = (e) => {\n    if (!this.state.action){\n      return false;\n    }\n\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && amount.gt(this.state.tokenBalance));\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.curveTokenBalance)) );\n        } else {\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.redeemableBalance)) );\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = this.state.tokenApproved;\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.state.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.functionsUtil.enableERC20(this.state.selectedToken,this.state.curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const inputValue = this.state.inputValue[this.state.action];\n    const selectedPercentage = this.getFastBalanceSelector();\n\n    let loading = true;\n\n    switch (this.state.action){\n      // Handle deposit in curve\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.state.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if (this.state.metaTransactionsEnabled && txError){\n            this.setState({\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,tokensToDeposit);\n        const minMintAmount = await this.functionsUtil.genericContractCall(this.state.curveSwapContract.name,'calc_token_amount',[amounts,true]);\n        const depositParams = [amounts,minMintAmount];\n\n        // No need for callback atm\n        contractSendResult = await this.props.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n      break;\n      case 'redeem':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        let curveTokensToRedeem = null;\n        if (selectedPercentage){\n          curveTokensToRedeem = this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage);\n        } else {\n          curveTokensToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals));\n          if (!this.state.redeemUnevenAmounts){\n            const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n            curveTokensToRedeem = curveTokensToRedeem.div(curveTokenPrice);\n          }\n        }\n\n        if (!curveTokensToRedeem){\n          return false;\n        }\n\n        const callbackRedeem = (tx,error) => {\n          const txSucceeded = tx.status === 'success';\n\n          // Send Google Analytics event\n          const eventData = {\n            eventLabel: tx.status,\n            eventCategory: `CurveRedeem`,\n            eventAction: this.state.selectedToken,\n            eventValue: curveTokensToRedeem.toFixed()\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          }\n        };\n\n        const callbackReceiptRedeem = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const _amount = this.functionsUtil.normalizeTokenAmount(curveTokensToRedeem,this.state.curvePoolContract.decimals).toString();\n        let min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,0);\n\n        const contractName = this.state.curveDepositContract.name;\n        if (this.state.redeemUnevenAmounts){\n          console.log('remove_liquidity_imbalance',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_imbalance', [min_amounts, _amount], null, callbackRedeem, callbackReceiptRedeem);\n        } else {\n          min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,_amount);\n          console.log('remove_liquidity',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts], null, callbackRedeem, callbackReceiptRedeem);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    // console.log('contractSendResult',contractSendResult);\n\n    if (contractSendResult !== false){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    const userHasFunds = this.props.account && this.state.curveTokenBalance && this.functionsUtil.BNify(this.state.curveTokenBalance).gt(0);\n    const canPerformAction = true;\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            {\n              <Breadcrumb\n                {...this.props}\n                isMobile={this.props.isMobile}\n                path={['Boost',this.state.selectedToken]}\n                handleClick={ e => this.props.goToSection('best') }\n                text={this.functionsUtil.getGlobalConfig(['strategies','best','title'])}\n              />\n            }\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Curve Pool\n        </Title>\n        <Flex\n          width={1}\n        >\n          <Flex\n            width={1}\n            alignItems={'center'}\n            flexDirection={'column'}\n            justifyContent={'center'}\n          >\n            <Flex\n              width={[1,0.36]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Box\n                width={1}\n              >\n                <Text\n                  mb={1}\n                >\n                  Select your asset:\n                </Text>\n                <AssetSelector\n                  {...this.props}\n                  id={'token-from'}\n                  onChange={this.changeFromToken}\n                  selectedToken={this.state.selectedToken}\n                  tokenConfig={this.state.curveTokenConfig}\n                  showBalance={this.state.action === 'deposit'}\n                  availableTokens={this.state.curveAvailableTokens}\n                />\n              </Box>\n              <Box\n                width={1}\n              >\n                {\n                  canPerformAction ? (\n                    <Flex\n                      mt={2}\n                      flexDirection={'column'}\n                    >\n                      <Text\n                        mb={2}\n                      >\n                        Choose the action:\n                      </Text>\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('deposit');\n                            }\n                          }}\n                          isInteractive={true}\n                          isActive={ this.state.action === 'deposit' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'deposit'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Deposit\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('redeem');\n                            }\n                          }}\n                          isInteractive={true}\n                          isDisabled={ !this.state.canRedeem }\n                          isActive={ this.state.action === 'redeem' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'redeem'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Redeem\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                      </Flex>\n                    </Flex>\n                  ) : (\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    >\n                      <Icon\n                        size={'2.3em'}\n                        name={'MoneyOff'}\n                        color={'cellText'}\n                      />\n                      <Text\n                        mt={2}\n                        fontSize={2}\n                        color={'cellText'}\n                        textAlign={'center'}\n                      >\n                        You don't have any {this.state.tokenConfig.idle.token} in your wallet.\n                      </Text>\n                    </Flex>\n                  )\n                }\n              </Box>\n            </Flex>\n            <Flex\n              width={1}\n              mt={ this.props.account ? 3 : 0 }\n            >\n            {\n              this.state.action === 'deposit' ? (\n                <CurveDeposit\n                  {...this.props}\n                  {...this.state}\n                />\n              ) : this.state.action === 'redeem' && (\n                <CurveRedeem\n                  {...this.props}\n                  {...this.state}\n                />\n              )\n            }\n            </Flex>\n          </Flex>\n        </Flex>\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverviewCurve\n                {...this.props}\n                tokenFees={this.state.tokenFees}\n                tokenConfig={this.state.tokenConfig}\n                selectedToken={this.state.selectedToken}\n                availableTokens={this.state.availableTokens}\n                enabledTokens={Object.keys(this.state.availableTokens)}\n              />\n            </Flex>\n        }\n        {\n          /*\n          this.props.account && !this.state.govTokensDisabled[this.state.selectedToken] && Object.keys(availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id=\"earnings-estimation\"\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(availableGovTokens)}\n                handleClick={(props) => {}}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.33,0.22]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.26],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    props:{\n                      width:[0.33,0.26],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                      {\n                        name:'tooltip',\n                        props:{\n                          placement:'bottom',\n                          message:'The shown balance may be lower than the real one.',\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    mobile:false,\n                    props:{\n                      width: 0.26,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                ]}\n                {...this.props}\n                availableTokens={availableGovTokens}\n              />\n            </Flex>\n          */\n        }\n        {\n          /*\n          this.props.account && \n            <Flex\n              mb={[3,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'estimated-earnings-container'}\n            >\n              <Title my={[3,4]}>Estimated earnings</Title>\n              <EstimatedEarnings\n                {...this.props}\n              />\n            </Flex>\n          */\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              availableTokens={this.state.availableTokens}\n              enabledTokens={Object.keys(this.state.availableTokens)}\n              enabledActions={['CurveIn','CurveOut','CurveZapIn','CurveZapOut','CurveTransferIn','CurveTransferOut','CurveDepositIn','CurveDepositOut']}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.state.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport {\n  Text,\n  Modal,\n  Button,\n  Form,\n  Icon,\n  Flex,\n  Link\n} from \"rimble-ui\";\nimport axios from 'axios';\nimport colors from '../../colors';\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\nimport globalConfigs from '../../configs/globalConfigs';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\n\nclass WelcomeModal extends React.Component {\n\n  state = {\n    email:null,\n    error:false,\n    subscribed:false,\n    sendingForm:false\n  };\n\n  functionsUtil = null;\n\n  constructor(props) {\n    super(props);\n    this.functionsUtil = new FunctionsUtil(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleValidation = this.handleValidation.bind(this);\n  }\n\n  componentDidUpdate = async () => {\n    this.functionsUtil.setProps(this.props);\n  }\n\n  sendUserInfo = (sendEmail=true) => {\n    const walletProvider = this.functionsUtil.getWalletProvider();\n    const userInfo = {\n      address: this.props.account,\n      provider: walletProvider\n    };\n\n    if (sendEmail && this.state.email !== null){\n      userInfo.email = this.state.email;\n    }\n\n    this.functionsUtil.simpleIDPassUserInfo(userInfo);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    if (!this.state.email){\n      return false;\n    }\n\n    const callback = () => {\n      this.setState({\n        sendingForm:false,\n        subscribed:true\n      });\n      window.setTimeout(this.props.closeModal,2500);\n    };\n\n    this.sendUserInfo();\n\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'send_email',\n      eventLabel: 'WelcomeModal'\n    });\n\n    axios.post(globalConfigs.newsletterSubscription.endpoint, {\n      'email': this.state.email\n    }).then(r => {\n      callback();\n    })\n    .catch(err => {\n      callback();\n    });\n\n    // Set signedUp in the localStorage\n    if (localStorage){\n      const walletAddress = this.props.account.toLowerCase();\n      let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : null;\n      if (lastLogin && lastLogin[walletAddress] && !lastLogin[walletAddress].signedUp){\n        lastLogin[walletAddress].signedUp = true;\n        this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n      }\n    }\n\n    this.setState({\n      sendingForm:true\n    })\n  };\n\n  closeModal = async () => {\n\n    const closeModal = () => {\n      this.props.closeModal();\n    };\n\n    try{\n      // Prevent sending email\n      this.sendUserInfo(false);\n\n      // Send Google Analytics event\n      if (globalConfigs.analytics.google.events.enabled){\n        this.functionsUtil.sendGoogleAnalyticsEvent({\n          eventCategory: 'UI',\n          eventAction: 'continue_without_email',\n          eventLabel: 'WelcomeModal'\n        },closeModal);\n\n        // Call callback after 1 second if stuck\n        setTimeout(closeModal,1000);\n      } else {\n        closeModal();\n      }\n    } catch (err) {\n      closeModal();\n    }\n  }\n\n  handleValidation(e) {\n    if (e && e.target) {\n      this.setState({ email: e.target.value });\n      e.target.parentNode.classList.add(\"was-validated\");\n    }\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        {\n          this.state.subscribed ? (\n            <ModalCard\n              closeFunc={this.closeModal}\n            >\n              <ModalCard.Header title={'All done'} icon={`images/done.svg`}></ModalCard.Header>\n              <ModalCard.Body>\n                <Flex width={1} flexDirection={'column'} mb={3}>\n                  <Text color={'dark-gray'} textAlign={'center'} fontSize={3} my={0}>\n                    Thanks for subscribing!\n                  </Text>\n                  <Button\n                    my={3}\n                    width={'100%'}\n                    borderRadius={4}\n                    onClick={this.closeModal}\n                  >\n                    CLOSE\n                  </Button>\n                </Flex>\n              </ModalCard.Body>\n            </ModalCard>\n          ) : (\n            <ModalCard closeFunc={this.closeModal}>\n              <ModalCard.Header title={'Stay up-to-date!'} icon={`images/notification.svg`}>\n              </ModalCard.Header>\n              <ModalCard.Body>\n                <Form onSubmit={this.handleSubmit}>\n                  <Flex width={1} flexDirection={'column'} mb={3}>\n                    <Text color={'mid-gray'} textAlign={'left'} fontSize={3} my={0}>\n                      Add your e-mail to receive updates about:\n                    </Text>\n                  </Flex>\n                  <Flex width={1} flexDirection={'column'} mt={2}>\n                    <Flex my={2} flexDirection={'row'} alignItems={'center'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Performance reports\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        New Protocols & Tokens\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Latest updates\n                      </Text>\n                    </Flex>\n                    <Form.Field width={1} label={''}>\n                      <Form.Input\n                        px={3}\n                        py={4}\n                        required\n                        width={1}\n                        border={0}\n                        fontSize={3}\n                        type={\"email\"}\n                        name={\"EMAIL\"}\n                        outline={'none'}\n                        borderColor={'cardBorder'}\n                        backgroundColor={'cardBg'}\n                        textAlign={['center','left']}\n                        className={header_styles.input}\n                        placeholder={'Enter your e-mail'}\n                        onChange={this.handleValidation}\n                      />\n                    </Form.Field>\n                    <Flex mb={3} flexDirection={'column'} alignItems={'center'} justifyContent={'center'}>\n                      <ButtonLoader\n                        buttonText={'SUBMIT'}\n                        isLoading={this.state.sendingForm}\n                        buttonProps={{className:header_styles.gradientButton,width:'100%',type:'submit'}}\n                      >\n                      </ButtonLoader>\n                      <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without e-mail</Link>\n                    </Flex>\n                  </Flex>\n                </Form>\n              </ModalCard.Body>\n            </ModalCard>\n          )\n        }\n      </Modal>\n    );\n  }\n}\n\nexport default WelcomeModal;\n","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\n\nclass MigrateModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'continue_without_migrate',\n        eventLabel: 'MigrateModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowMigrateModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowMigrateModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = () => {\n    const tokenMigrationRoute = this.functionsUtil.getGlobalConfig(['tools','tokenMigration','route']);\n    this.props.goToSection('tools/'+tokenMigrationRoute);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            iconHeight={'40px'}\n            title={'Migrate to Idle'}\n            icon={`images/migrate.svg`}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={3}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                You can migrate your funds from Compound, Aave, Fulcrum, Yearn and Idle V2 with just one transaction.\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                my={2}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.protocolsTokensBalances && Object.keys(this.props.protocolsTokensBalances).map( token => (\n                    <Flex\n                      mb={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      key={`token_${token}`}\n                      justifyContent={'space-between'}\n                    >\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'icon',\n                          props:{\n                            mr:2,\n                            height:'2.3em'\n                          }\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                      <SmartNumber\n                        mr={2}\n                        {...fieldProps}\n                        minPrecision={5}\n                        number={this.props.protocolsTokensBalances[token].balance} \n                      />\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'tokenName',\n                          props:fieldProps\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                    </Flex>\n                  ) )\n                }\n                <Text\n                  mb={0}\n                  fontSize={1}\n                  color={'red'}\n                  fontWeight={500}\n                  textAlign={'center'}\n                >\n                  Please be aware that by migrating your tokens from other protocols, your open positions might be liquidated if collateralized with migrated tokens.\n                </Text>\n              </Flex>\n              <Flex\n                mb={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <ButtonLoader\n                  buttonText={'MIGRATE'}\n                  handleClick={this.migrate}\n                  isLoading={this.state.sendingForm}\n                  buttonProps={{\n                    width:['100%','50%'],\n                    className:header_styles.gradientButton\n                  }}\n                >\n                </ButtonLoader>\n                {\n                /*\n                <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without migrate</Link>\n                */\n                }\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default MigrateModal;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass UpgradeModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'close_upgrade_modal',\n        eventLabel: 'UpgradeModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowUpgradeModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowUpgradeModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = async (token,strategy=null) => {\n\n    if (!strategy){\n      strategy = this.props.selectedStrategy;\n    }\n\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  convert = async (token) => {\n    const convertTool = this.functionsUtil.getGlobalConfig(['tools','tokenMigration']);\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n\n    if (!this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            icon={`images/migrate.svg`}\n            title={'Upgrade Available'}\n            iconHeight={['35px','40px']}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={[2,3]}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                Idle now supports yield farming and governance tokens distribution, migrate now your portfolio with just one click!\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n              >\n                <Flex\n                  fontSize={[2,3]}\n                  width={[0.5,0.28]}\n                  fontWeight={[4,5]}\n                  color={'copyColor'}\n                >\n                  {\n                    this.props.isMobile ? 'ASSET' : 'ASSET TO MIGRATE'\n                  }\n                </Flex>\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      BALANCE\n                    </Flex>\n                  )\n                }\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      OLD APY\n                    </Flex>\n                  )\n                }\n                <Flex\n                  fontSize={[2,3]}\n                  fontWeight={[4,5]}\n                  width={[0.25,0.19]}\n                  color={'copyColor'}\n                  justifyContent={'center'}\n                >\n                  {\n                    this.props.isMobile ? 'APY' : 'NEW APY'\n                  }\n                </Flex>\n                <Flex\n                  width={[0.25,0.15]}\n                >\n                  \n                </Flex>\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.tokensToMigrate && Object.keys(this.props.tokensToMigrate).map( tokenKey => {\n                    const token = this.props.tokensToMigrate[tokenKey].token;\n                    const strategy = this.props.tokensToMigrate[tokenKey].strategy;\n                    const tokenConfig = this.props.tokensToMigrate[tokenKey].tokenConfig;\n                    const balance = this.props.tokensToMigrate[tokenKey].oldContractBalanceFormatted;\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${tokenKey}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={[0.5,0.28]}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:['1.8em','2.3em']\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                        </Flex>\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <SmartNumber\n                                {...fieldProps}\n                                minPrecision={5}\n                                number={balance}\n                                flexProps={{\n                                  justifyContent:'center'\n                                }}\n                              />\n                            </Flex>\n                          )\n                        }\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <AssetField\n                                {...this.props}\n                                fieldInfo={{\n                                  name:'oldApy',\n                                  props:fieldProps\n                                }}\n                                token={token}\n                                tokenConfig={tokenConfig}\n                              />\n                            </Flex>\n                          )\n                        }\n                        <Flex\n                          width={[0.25,0.19]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={token}\n                            tokenConfig={tokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={[0.25,0.15]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.migrate(token,strategy) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.oldIdleTokensToMigrate && Object.keys(this.props.oldIdleTokensToMigrate).map( token => {\n                    const tokenConfig = this.props.oldIdleTokensToMigrate[token].tokenConfig;\n\n                    if (!tokenConfig){\n                      return null;\n                    }\n\n                    const balance = this.props.oldIdleTokensToMigrate[token].balance;\n                    let newTokenConfig = null;\n\n                    if (tokenConfig.availableStrategies && !this.props.availableTokens[tokenConfig.baseToken]){\n                      newTokenConfig = this.props.availableStrategies[tokenConfig.availableStrategies[0]][tokenConfig.baseToken];\n                    } else {\n                      newTokenConfig = this.props.availableTokens[tokenConfig.baseToken];\n                    }\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${token}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={0.28}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:'2.3em'\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <SmartNumber\n                            {...fieldProps}\n                            minPrecision={5}\n                            number={balance}\n                            flexProps={{\n                              justifyContent:'center'\n                            }}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'oldApy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.15}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.convert(token) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                my={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <RoundButton\n                  handleClick={this.closeModal}\n                  buttonProps={{\n                    fontSize:[2,3],\n                    width:['100%','40%'],\n                  }}\n                >\n                  MIGRATE LATER\n                </RoundButton>\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default UpgradeModal;","import React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport { Flex, Card, Icon, Text } from 'rimble-ui';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardMenu from '../DashboardMenu/DashboardMenu';\n\n// Import page components\nimport Stats from '../Stats/Stats';\nimport Utils from '../Utils/Utils';\nimport AssetPage from '../AssetPage/AssetPage';\nimport RoundButton from '../RoundButton/RoundButton';\nimport Swipeable from '../utilities/components/Swipeable';\nimport BetaModal from \"../utilities/components/BetaModal\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CurveStrategy from '../CurveStrategy/CurveStrategy';\nimport WelcomeModal from \"../utilities/components/WelcomeModal\";\nimport TooltipModal from \"../utilities/components/TooltipModal\";\nimport MigrateModal from \"../utilities/components/MigrateModal\";\nimport UpgradeModal from \"../utilities/components/UpgradeModal\";\nimport DashboardHeader from '../DashboardHeader/DashboardHeader';\n\nclass Dashboard extends Component {\n  state = {\n    menu:[],\n    baseRoute:null,\n    clickEvent:null,\n    activeModal:null,\n    menuOpened:false,\n    currentRoute:null,\n    pageComponent:null,\n    currentSection:null,\n    selectedSection:null,\n    tokensToMigrate:null,\n    showResetButton:false,\n    selectedSubsection:null,\n    pageComponentProps:null,\n    oldIdleTokensToMigrate:null,\n    protocolsTokensBalances:null,\n  };\n\n  timeoutId = null;\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    window.functionsUtil = this.functionsUtil;\n  }\n\n  async loadMenu() {\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n\n    const menu = [];\n\n    const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n    Object.keys(strategies).filter( s => ( !strategies[s].comingSoon ) ).forEach(strategy => {\n      const strategyInfo = strategies[strategy];\n      menu.push({\n        submenu:[],\n        color:'#fff',\n        selected:false,\n        image:strategyInfo.icon,\n        label:strategyInfo.title,\n        bgColor:strategyInfo.color,\n        route:baseRoute+'/'+strategy,\n        visible:strategyInfo.visible,\n        component:strategyInfo.component,\n        imageInactive:strategyInfo.iconInactive,\n        imageInactiveDark:strategyInfo.iconInactiveDark\n      });\n    });\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n\n    // Add Curve\n    if (curveConfig.enabled){\n      const curveParams = Object.assign({\n        submenu:[],\n        selected:false,\n        component:CurveStrategy,\n      },curveConfig.params);\n\n      menu.push(curveParams);\n    }\n\n    // Add Stake\n    const stakeConfig = this.functionsUtil.getGlobalConfig(['tools','stake']);\n    if (stakeConfig.enabled){\n      menu.push(\n        {\n          submenu:[],\n          label:'Stake',\n          selected:false,\n          color:'dark-gray',\n          icon:stakeConfig.icon,\n          route:'/dashboard/stake',\n          component:Utils,\n          componentProps:{\n            showBreadCrumb:false,\n            toolProps:stakeConfig.props,\n            selectedSubsection:stakeConfig\n          },\n          bgColor:this.props.theme.colors.primary,\n        }\n      );\n    }\n\n    // Add tools\n    menu.push(\n      {\n        icon:'Build',\n        label:'Tools',\n        color:'dark-gray',\n        component:Utils,\n        selected:false,\n        route:'/dashboard/tools',\n        bgColor:this.props.theme.colors.primary,\n        submenu:Object.values(this.functionsUtil.getGlobalConfig(['tools'])).filter( u => (u.enabled) )\n      }\n    );\n\n    // Add Stats\n    menu.push(\n      {\n        icon:'Equalizer',\n        label:'Stats',\n        bgColor:'#21f36b',\n        color:'dark-gray',\n        component:Stats,\n        selected:false,\n        route:'/dashboard/stats',\n        submenu:[]\n      }\n    );\n\n    // Add Forum\n    menu.push(\n      {\n        submenu:[],\n        icon:'Forum',\n        mobile:false,\n        label:'Forum',\n        selected:false,\n        component:null,\n        color:'dark-gray',\n        bgColor:'#ff0000',\n        isExternalLink:true,\n        route:this.functionsUtil.getGlobalConfig(['forumURL'])\n      }\n    );\n\n    await this.setState({\n      menu\n    });\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  openTooltipModal = (modalTitle,modalContent) => {\n\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: modalTitle,\n      eventLabel: 'TooltipModal'\n    });\n\n    this.setState({\n      modalTitle,\n      modalContent\n    },() => {\n      this.setActiveModal('tooltip');\n    })\n  }\n\n  setActiveModal = (activeModal) => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadParams() {\n    const { match: { params } } = this.props;\n\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n    let currentRoute = baseRoute;\n\n    let pageComponent = null;\n    let selectedToken = null;\n    let currentSection = null;\n    let selectedStrategy = null;\n    let pageComponentProps = null;\n\n    // Set strategy\n    if (params.section){\n      currentSection = params.section;\n      const param1 = params.param1;\n      const param2 = params.param2;\n\n      const section_is_strategy = Object.keys(this.props.availableStrategies).includes(currentSection.toLowerCase());\n      const param1_is_strategy = param1 && Object.keys(this.props.availableStrategies).includes(param1.toLowerCase());\n\n      if (section_is_strategy || param1_is_strategy){\n\n        if (!section_is_strategy){\n          currentRoute += '/'+currentSection;\n        }\n\n        selectedStrategy = section_is_strategy ? currentSection : param1;\n        currentRoute += '/'+selectedStrategy;\n\n        // Set token\n        const param1_is_token = param1 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param1.toUpperCase());\n        const param2_is_token = param2 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param2.toUpperCase());\n        if (param1_is_token || param2_is_token){\n          selectedToken = param1_is_token ? param1.toUpperCase() : param2.toUpperCase();\n          currentRoute += '/'+selectedToken;\n\n          if (section_is_strategy){\n            pageComponent = AssetPage;\n          }\n        }\n      } else {\n        currentRoute += '/'+params.section;\n\n        if (params.param1 && params.param1.length){\n          currentRoute += '/'+params.param1;\n        }\n\n        // if (params.param2 && params.param2.length){\n        //   currentRoute += '/'+params.param2;\n        // }\n      }\n    }\n\n    const menu = this.state.menu;\n\n    let selectedSection = null;\n    let selectedSubsection = null;\n\n    menu.forEach(m => {\n      m.selected = false;\n      const sectionRoute = baseRoute+'/'+params.section;\n      if (currentRoute.toLowerCase() === m.route.toLowerCase() || ( !m.submenu.length && m.route.toLowerCase() === sectionRoute.toLowerCase() )){\n        m.selected = true;\n        if (pageComponent === null){\n          pageComponent = m.component;\n          pageComponentProps = m.componentProps;\n        }\n      } else if (m.submenu.length) {\n        m.submenu.forEach(subm => {\n          subm.selected = false;\n          const submRoute = m.route+'/'+subm.route;\n          if (submRoute.toLowerCase() === currentRoute.toLowerCase()){\n            m.selected = true;\n            subm.selected = true;\n\n            // Set component, if null use parent\n            if (pageComponent === null){\n              if (subm.component){\n                pageComponent = subm.component;\n                pageComponentProps = m.componentProps;\n              } else {\n                pageComponent = m.component;\n                pageComponentProps = m.componentProps;\n              }\n            }\n          }\n\n          // Set selected subsection\n          if (subm.selected){\n            selectedSubsection = subm;\n          }\n\n        });\n      }\n\n      // Set selected section\n      if (m.selected){\n        selectedSection = m;\n      }\n    });\n\n    // console.log('pageComponent',params,pageComponent);\n\n    // Exit if no strategy and token selected\n    if (!pageComponent){\n      return this.goToSection('/',false);\n    }\n\n    // console.log('loadParams',selectedStrategy,selectedToken);\n    await this.props.setStrategyToken(selectedStrategy,selectedToken);\n    \n    // Send GA pageview\n    this.functionsUtil.sendGoogleAnalyticsPageview(currentRoute);\n\n    await this.setState({\n      menu,\n      params,\n      baseRoute,\n      currentRoute,\n      pageComponent,\n      currentSection,\n      selectedSection,\n      pageComponentProps,\n      selectedSubsection\n    });\n  }\n\n  componentWillUnmount(){\n    if (this.timeoutId){\n      window.clearTimeout(this.timeoutId);\n    }\n  }\n\n  async componentWillMount() {\n\n    this.props.setCurrentSection('dashboard');\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n  }\n\n  async componentDidMount() {\n\n    this.timeoutId = window.setTimeout(() => {\n      if (!this.props.accountInizialized || !this.props.contractsInitialized){\n        this.setState({\n          showResetButton:true\n        });\n      }\n    },20000);\n\n    if (!this.props.web3){\n      return this.props.initWeb3();\n    } else if (!this.props.accountInizialized){\n      return this.props.initAccount();\n    } else if (!this.props.contractsInitialized){\n      return this.props.initializeContracts();\n    }\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n\n    const viewOnly = this.props.connectorName === 'custom';\n    if (!viewOnly){\n      this.checkModals();\n    }\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n\n    this.loadUtils();\n\n    const prevParams = prevProps.match.params;\n    const params = this.props.match.params;\n\n    const isMobileChanged = prevProps.isMobile !== this.props.isMobile;\n    if (isMobileChanged){\n      this.setState({\n        menuOpened:false\n      });\n    }\n\n    if (JSON.stringify(prevParams) !== JSON.stringify(params)){\n      await this.setState({\n        pageComponent:null\n      }, () => {\n        this.loadParams();\n      });\n    }\n\n    const viewOnly = this.props.connectorName === 'custom';\n    const accountChanged = prevProps.account !== this.props.account;\n    const strategyChanged = this.props.selectedStrategy && prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const availableTokensChanged = JSON.stringify(prevProps.availableTokens) !== JSON.stringify(this.props.availableTokens);\n    const accountInizialized = this.props.accountInizialized && prevProps.accountInizialized !== this.props.accountInizialized;\n    const contractsInitialized = this.props.contractsInitialized && prevProps.contractsInitialized !== this.props.contractsInitialized;\n\n    if (!viewOnly && (accountChanged || accountInizialized || contractsInitialized || strategyChanged || availableTokensChanged)){\n      this.checkModals();\n    }\n  }\n\n  async checkModals(){\n\n    if (this.props.selectedToken || !this.props.accountInizialized || !this.props.contractsInitialized || !this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    await this.checkBetaApproval();\n    await this.checkTokensToMigrate();\n    await this.checkWelcomeModal();\n    await this.checkProtocolsTokensBalances();\n  }\n\n  async checkBetaApproval(){\n    const isOriginUrl = this.functionsUtil.checkUrlOrigin();\n    const isBetaApproved = this.functionsUtil.getStoredItem('betaApproved',false,false);\n\n    // Show Beta Warning modal\n    if (!isOriginUrl && !isBetaApproved){\n      const activeModal = 'beta';\n      if (activeModal !== this.state.activeModal){\n        await this.setState({\n          activeModal,\n        });\n\n        return activeModal;\n      }\n    }\n  }\n\n  async checkTokensToMigrate(){\n\n    const showUpgradeModal = this.functionsUtil.getStoredItem('dontShowUpgradeModal',false,null) !== null ? false : true;\n    if (this.props.selectedToken || !showUpgradeModal || !this.props.availableTokens || this.state.activeModal !== null){\n      return null;\n    }\n\n    const tokensToMigrate = await this.functionsUtil.getTokensToMigrate();\n    const oldIdleTokensToMigrate = await this.functionsUtil.getProtocolsTokensBalances('idle');\n\n    // console.log('tokensToMigrate',tokensToMigrate);\n    \n    if ((tokensToMigrate && Object.keys(tokensToMigrate).length>0) || (oldIdleTokensToMigrate && Object.keys(oldIdleTokensToMigrate).length>0)){\n      const activeModal = 'upgrade';\n      if (activeModal !== this.state.activeModal){\n        await this.setState({\n          activeModal,\n          tokensToMigrate,\n          oldIdleTokensToMigrate\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkWelcomeModal(){\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show welcome modal\n    if (this.props.account && this.state.activeModal === null){\n      let welcomeIsOpen = false;\n\n      const welcomeModalProps = this.functionsUtil.getGlobalConfig(['modals','welcome']);\n\n      if (welcomeModalProps.enabled && localStorage){\n\n        // Check the last login of the wallet\n        const currTime = new Date().getTime();\n        const walletAddress = this.props.account.toLowerCase();\n        let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : {};\n\n        // First login\n        if (!lastLogin[walletAddress]){\n          lastLogin[walletAddress] = {\n            'signedUp':false,\n            'lastTime':currTime\n          };\n          welcomeIsOpen = true;\n        // User didn't sign up\n        } else if (!lastLogin[walletAddress].signedUp) {\n          const lastTime = parseInt(lastLogin[walletAddress].lastTime);\n          const timeFromLastLogin = (currTime-lastTime)/1000;\n          welcomeIsOpen = timeFromLastLogin>=welcomeModalProps.frequency; // 1 day since last login\n        }\n\n        if (welcomeIsOpen){\n          lastLogin[walletAddress].lastTime = currTime;\n          this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n        }\n      }\n\n      const activeModal = welcomeIsOpen ? 'welcome' : this.state.activeModal;\n      if (this.state.activeModal !== activeModal){\n        await this.setState({\n          activeModal\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkProtocolsTokensBalances() {\n\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show migration modal if no other modals are opened\n    const migrateModalEnabled = this.functionsUtil.getGlobalConfig(['modals','migrate','enabled']);\n    const showMigrateModal = this.functionsUtil.getStoredItem('dontShowMigrateModal',false,null) !== null ? false : true;\n\n    if (this.state.activeModal === null && migrateModalEnabled && showMigrateModal && !this.state.protocolsTokensBalances){\n      const protocolsTokensBalances = await this.functionsUtil.getProtocolsTokensBalances();\n      const activeModal = protocolsTokensBalances && Object.keys(protocolsTokensBalances).length>0 ? 'migrate' : null;\n      const newState = {\n        activeModal,\n        protocolsTokensBalances\n      };\n      await this.setState(newState);\n      return activeModal;\n    }\n\n    return null;\n  }\n\n  goToSection(section,isDashboard=true){\n\n    // Remove dashboard route\n    if (isDashboard){\n      section = section.replace(this.state.baseRoute +'/','');\n    }\n\n    const newRoute = isDashboard ? this.state.baseRoute +'/' + section : section;\n    window.location.hash=newRoute;\n\n    // Send GA event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'goToSection',\n      eventLabel: newRoute\n    });\n\n    window.scrollTo(0, 0);\n  }\n\n  logout = async () => {\n    this.props.setConnector('Infura','Infura');\n    await this.props.initWeb3('Infura');\n  }\n\n  changeToken(selectedToken){\n    selectedToken = selectedToken.toUpperCase();\n    if (Object.keys(this.props.availableTokens).includes(selectedToken)){\n      const routeParts = [];\n\n      // Add section\n      if (this.state.currentSection.toLowerCase() !== this.props.selectedStrategy.toLowerCase()){\n        routeParts.push(this.state.currentSection);\n      }\n\n      // Add strategy\n      routeParts.push(this.props.selectedStrategy); \n\n      // Add token\n      routeParts.push(selectedToken);\n\n      this.goToSection(routeParts.join('/'));\n    }\n  }\n\n  propagateClickEvent(clickEvent){\n    this.setState({\n      clickEvent:clickEvent.target\n    });\n  }\n\n  setMenu(menuOpened){\n    this.setState({\n      menuOpened\n    });\n  }\n\n  toggleMenu(){\n    const menuOpened = !this.state.menuOpened;\n    this.setMenu(menuOpened);\n  }\n\n  swipeCallback(eventData){\n    // console.log('swipeCallback',eventData);\n    if (eventData.dir === 'Right'){\n      this.setMenu(true);\n    } else if (eventData.dir === 'Left'){\n      this.setMenu(false);\n    }\n  }\n\n  render() {\n\n    const PageComponent = this.state.pageComponent ? this.state.pageComponent : null;\n    return (\n      <Swipeable\n        callback={this.swipeCallback.bind(this)}\n      >\n        <Flex\n          height={'100vh'}\n          position={'fixed'}\n          flexDirection={'row'}\n          className={this.props.themeMode}\n          backgroundColor={['dashboardBg','white']}\n          width={this.props.isMobile && this.state.menuOpened ? '180vw' : '100vw'}\n          /*onClick={ e => this.propagateClickEvent(e) }*/\n        >\n          {\n            (!this.props.isMobile || this.state.menuOpened) && (\n              <Flex\n                bottom={0}\n                zIndex={99999}\n                width={['80vw',1/6]}\n                position={'relative'}\n                flexDirection={'column'}\n              >\n                <Card\n                  p={3}\n                  border={0}\n                  width={'auto'}\n                  height={'100vh'}\n                  backgroundColor={'menuBg'}\n                  borderColor={this.props.theme.colors.menuRightBorder}\n                  borderRight={`1px solid ${this.props.theme.colors.menuRightBorder}`}\n                  >\n                  <DashboardMenu\n                    {...this.props}\n                    menu={this.state.menu}\n                    closeMenu={e => this.setMenu(false)}\n                  />\n                </Card>\n              </Flex>\n            )\n          }\n          <Flex\n            py={3}\n            mb={0}\n            px={[3,5]}\n            width={['100vw',5/6]}\n            style={{\n              overflowY:'scroll',\n              overflowX:'hidden'\n            }}\n            height={['100vh','auto']}\n            flexDirection={'columns'}\n            backgroundColor={'dashboardBg'}\n          >\n            {\n              !this.props.accountInizialized || !this.props.contractsInitialized || !PageComponent ? (\n                <Flex\n                  width={1}\n                  minHeight={'50vg'}\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                >\n                  {\n                    !this.props.network.isCorrectNetwork ? (\n                      <DashboardCard\n                        cardProps={{\n                          p:3,\n                          mt:3,\n                          width:[1,0.35]\n                        }}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                        >\n                          <Icon\n                            size={'2.3em'}\n                            name={'Warning'}\n                            color={'cellText'}\n                          />\n                          <Text\n                            mt={2}\n                            fontSize={2}\n                            color={'cellText'}\n                            textAlign={'center'}\n                          >\n                            The <strong>{this.functionsUtil.capitalize(this.props.network.current.name)} Network</strong> is not supported, please switch to the correct network.\n                          </Text>\n                        </Flex>\n                      </DashboardCard>\n                    ) : !this.state.showResetButton ? (\n                      <FlexLoader\n                        textProps={{\n                          textSize:4,\n                          fontWeight:2\n                        }}\n                        loaderProps={{\n                          mb:3,\n                          size:'40px'\n                        }}\n                        flexProps={{\n                          my:3,\n                          flexDirection:'column'\n                        }}\n                        text={ !this.props.accountInizialized ? 'Loading account...' : ( !this.props.contractsInitialized ? 'Loading contracts...' : 'Loading assets...' )}\n                      />\n                    ) : (\n                      <DashboardCard\n                        cardProps={{\n                          p:3,\n                          mt:3,\n                          width:[1,0.35]\n                        }}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                        >\n                          <Icon\n                            size={'2.3em'}\n                            name={'Warning'}\n                            color={'cellText'}\n                          />\n                          <Text\n                            mt={2}\n                            fontSize={2}\n                            color={'cellText'}\n                            textAlign={'center'}\n                          >\n                            Idle can't connect to your wallet!<br />Make sure that your wallet is unlocked and try again.\n                          </Text>\n                          <RoundButton\n                            buttonProps={{\n                              mt:3,\n                              width:[1,1/2]\n                            }}\n                            handleClick={this.logout.bind(this)}\n                          >\n                            Logout\n                          </RoundButton>\n                        </Flex>\n                      </DashboardCard>\n                    )\n                  }\n                </Flex>\n              ) : (\n                <Flex\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  <DashboardHeader\n                    menuOpened={this.state.menuOpened}\n                    clickEvent={this.state.clickEvent}\n                    toggleMenu={this.toggleMenu.bind(this)}\n                    goToSection={this.goToSection.bind(this)}\n                    {...this.props}\n                  />\n                  {\n                    PageComponent &&\n                      <PageComponent\n                        {...this.props}\n                        match={{ params:{} }}\n                        urlParams={this.state.params}\n                        changeToken={this.changeToken.bind(this)}\n                        goToSection={this.goToSection.bind(this)}\n                        selectedSection={this.state.selectedSection}\n                        selectedSubsection={this.state.selectedSubsection}\n                        openTooltipModal={this.openTooltipModal.bind(this)}\n                        {...this.state.pageComponentProps}\n                        />\n                  }\n                </Flex>\n              )\n            }\n          </Flex>\n          <BetaModal\n            closeModal={this.resetModal}\n            isOpen={this.state.activeModal === 'beta'}\n          />\n          <UpgradeModal\n            {...this.props}\n            closeModal={this.resetModal}\n            goToSection={this.goToSection.bind(this)}\n            tokensToMigrate={this.state.tokensToMigrate}\n            isOpen={this.state.activeModal === 'upgrade'}\n            oldIdleTokensToMigrate={this.state.oldIdleTokensToMigrate}\n          />\n          <MigrateModal\n            {...this.props}\n            closeModal={this.resetModal}\n            goToSection={this.goToSection.bind(this)}\n            isOpen={this.state.activeModal === 'migrate'}\n            protocolsTokensBalances={this.state.protocolsTokensBalances}\n          />\n          <TooltipModal\n            closeModal={this.resetModal}\n            title={this.state.modalTitle}\n            content={this.state.modalContent}\n            isOpen={this.state.activeModal === 'tooltip'}\n          />\n          <WelcomeModal\n            closeModal={this.resetModal}\n            account={this.props.account}\n            simpleID={this.props.simpleID}\n            network={this.props.network.current}\n            tokenName={this.props.selectedToken}\n            initSimpleID={this.props.initSimpleID}\n            baseTokenName={this.props.selectedToken}\n            isOpen={this.state.activeModal === 'welcome'}\n          />\n        </Flex>\n      </Swipeable>\n    );\n  }\n}\n\nexport default Dashboard;"],"sourceRoot":""}