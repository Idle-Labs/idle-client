{"version":3,"sources":["FlashNews/FlashNews.js","Stats/StatsChart.js","Rebalance/Rebalance.js","utilities/components/DateRangeModal.js","StatsAsset/StatsAsset.js","TrancheSelector/TrancheSelector.js","StatsTranche/StatsTranche.js","Stats/Stats.js","Utils/Utils.js","FundsOverview/FundsOverview.js","CurveRedeem/CurveRedeem.js","DepositRedeem/DepositRedeem.js","EstimatedEarnings/EstimatedEarnings.js","AssetPage/AssetPage.js","utilities/components/BetaModal.js","CurveDeposit/CurveDeposit.js","PortfolioEquityCurve/PortfolioEquityCurve.js","FundsOverviewCurve/FundsOverviewCurve.js","CurveStrategy/CurveStrategy.js","utilities/components/PolygonModal.js","utilities/components/WelcomeModal.js","utilities/components/MigrateModal.js","utilities/components/UpgradeModal.js","utilities/components/RiskAdjustedModal.js","Dashboard/Dashboard.js"],"names":["FlashNews","state","activeNews","functionsUtil","this","setProps","props","FunctionsUtil","loadUtils","stakingConfig","getGlobalConfig","nexusMutualConfig","flashNews","1","name","icon","text","link","url","label","getDashboardSectionUrl","concat","route","137","currentNetworkId","getRequiredNetworkId","activeFlashNews","length","Math","floor","random","setState","prevProps","prevState","_this2","react_default","a","createElement","DashboardCard","cardProps","p","mb","width","isActive","isInteractive","index_es","alignItems","justifyContent","flexDirection","mr","size","color","fontWeight","fontSize","textAlign","ExtLink","ml","hoverColor","href","onClick","e","sendGoogleAnalyticsEvent","eventCategory","eventAction","eventLabel","Component","StatsChart","chartProps","chartType","chartData","chartWidth","parseAum","value","parseInt","parseFloat","toFixed","_this","selectedToken","loadApiData","_callee3","maxGridLines","apiResults","apiResults_aa","apiResults_bb","apiResults_unfiltered","protocols","totalItems","tranchesConfig","versionInfo","keys","tempData","gridYStep","itemIndex","daysCount","gridYValues","maxChartValue","axisBottomIndex","daysFrequency","idleChartData","firstIdleBlock","axisBottomMaxValues","seniorTrancheName","juniorTrancheName","i","Values","firstPriceAA","firstPriceBB","chartDataAA","chartDataBB","firstBlock","_i","divergingData","startTimestampA","endTimestampA","timestamp","date","lastRow","maxRange","_i2","startTimestamp","endTimestamp","_timestamp","_date","_i3","_i4","_i5","_i6","dates","_i7","_i8","chartValues","prevValue","_i9","prevApr","prevData","avgApy","startBalance","currentBalance","aaveProtocolInfo","_i10","firstTokenPrice","_i11","regenerator_default","wrap","_context3","prev","next","tokenConfig","chartMode","abrupt","Object","assign","globalConfigs","stats","versions","idleVersion","Line","capitalize","AA","baseName","BB","t0","push","id","hex","data","map","d","x","moment","timeStamp","format","y","fixTokenDecimals","apr","max","sort","b","isBefore","diff","ceil","xScale","type","xFormat","yFormat","yScale","stacked","axisLeft","legend","tickSize","orient","tickPadding","tickRotation","legendOffset","tickValues","legendPosition","axisBottom","isMobile","pointSize","useMesh","animate","pointLabel","curve","enableArea","enableSlices","enableGridX","enableGridY","pointBorderWidth","colors","pointLabelYOffset","legends","itemWidth","itemHeight","translateX","translateY","symbolSize","itemsSpacing","direction","anchor","symbolShape","itemTextColor","theme","effects","on","style","themeMode","axis","ticks","fill","fontFamily","fonts","sansSerif","grid","line","stroke","lineChartStroke","strokeDasharray","textTransform","pointColor","from","modifiers","margin","top","right","bottom","left","sliceTooltip","slideData","slice","point","points","CustomTooltip","protocolName","serieId","protocolEarning","yFormatted","CustomTooltipRow","key","apy","days","tokenPrice","virtualPrice","decimals","div","minus","times","blockNumber","itemPos","blocknumber","splice","protocolApy","_d","getTime","deposits","redeems","forEach","row","idleTokens","totalSupply","idleTokensPrev","eq","gte","abs","values","filter","v","Bar","indexBy","enableLabel","minValue","maxValue","axisRight","abbreviateNumber","markers","lineStyle","strokeOpacity","textStyle","transactions","action","deposit","legendOrientation","legendOffsetX","redeem","padding","labelTextColor","labelSkipWidth","labelSkipHeight","dataFrom","tooltip","container","boxShadow","background","xFormatted","strToMoment","depositFormatted","redeemFormatted","idleSupply","aum_aa","contractValue","toString","aum_bb","formatMoney","BNify","ratio","tokens","hsl","join","idlePrice","aum","j","protocolsData","protocolAllocation","protocolAddr","toLowerCase","address","z","rate","allocation","foundItem","item","pos","indexOf","allocations","undefined","serieColor","protocolInfo","protocolColor","protocolAllocationFormatted","protocolAllocationPerc","protocolData","protocolPaused","foundProtocol","find","_ref2","tableCell","_ref3","py","px","borderCollapse","display","height","totalAllocation","reduce","accumulator","plus","allocationPerc","_ref4","_ref5","additionalProtocols","additionalProtocol","protocol","enabledTokens","includes","enabled","unshift","objectSpread","rateField","protocolRate","acc","field","lt","aaveAdditionalAPR","gt","idle","idleRate","defiScore","isNaN","idleScore","isSameOrBefore","aaveProtocolData","pData","earnings","earning","daysSinceBeginning","tokensProps","tokenProps","isAfter","Date","now","chartRow","baseProfit","firstProtocolData","firstProtocolBlock","rowData","idlePerformance","d1","asyncForEach","_ref6","asyncToGenerator","mark","_callee2","lastRowData","lastTokenPrice","_context2","_ref7","_callee","tokenExchangeRate","tokenPriceFixed","lastYDiff","_context","price","stop","_x2","apply","arguments","_x","showAdvanced","showAdvancedChanged","apiResults_aa_Changed","apiResults_bb_Changed","apiResultsChanged","tokenChanged","JSON","stringify","componentDidMount","GenericChart","showLoader","parentId","parentIdHeight","Rebalance","loading","processing","rebalance","txHash","shouldRebalance","componentUnmounted","checkRebalance","setStateSafe","sent","callback","callback_receipt","preventDefault","tx","error","eventData","status","getTransactionError","window","toastProvider","addMessage","secondaryMessage","colorTheme","actionHref","actionText","variant","transactionHash","contractMethodSendWrapper","token","accountChanged","account","newState","minHeight","FlexLoader","flexProps","loaderProps","textProps","TxProgressBar","waitText","endMessage","hash","mt","RoundButton","buttonProps","disabled","handleClick","DateRangeModal","quickSelection","ranges","startDate","endDate","options","quickSelections","componentDidUpdate","selection","target","quickSelectionParams","clone","subtract","closeModal","handleSelect","startTimestampObj","endTimestampObj","_this3","isOpen","ModalCard","closeFunc","Header","title","Body","counter","backgroundColor","cardBg","required","onChange","handleQuickSelect","bind","dist","minDate","maxDate","className","Footer","my","mx","borderRadius","mainColor","React","StatsAsset","delta","carouselMax","rebalances","buttonGroups","carouselIndex","statsVersions","minStartTime","govTokensPool","unlentBalance","carouselOffsetLeft","dateRangeModalOpened","day","week","weeks","month","ytd","setDateRange","isSameOrAfter","isSame","add","maxEndDate","setDateRangeModal","filterTokenData","r","setIdleVersion","isRisk","firstResult","lastResult","firstIdlePrice","lastIdlePrice","compoundInfo","firstCompoundData","lastCompoundData","compoundWithCOMPInfo","compoundAvgApr","firstCompoundPrice","lastCompoundPrice","compoundApr","availableTokens","selectedStrategy","getTokenApiData","pop","convertTokenBalance","sum","compoundWithCOMP","compoundData","compoundRate","index","prevRow","prevTotalAllocation","hasRebalanced","prevP","prevAllocation","getGovTokenPool","getUnlentBalance","selectToken","strategy","setStrategyToken","changeToken","handleCarousel","$element","jQuery","position","loadParams","latestVersion","version","enabledStrategies","strategiesParams","versionInfoExtra","param","params","match","currentNetworkAvailableTokens","customToken","toUpperCase","getLatestAvailableVersion","getVersionInfo","newEndTimestampObj","newStartTimestampObj","web3","initWeb3","loadCarousel","contractsInitialized","strategyChanged","dateChanged","versionChanged","versionsOptions","performanceTooltip","versionDefaultValue","Breadcrumb","showPathMobile","goToSection","path","GenericSelector","innerProps","defaultValue","AssetSelector","pr","StatsCard","labelTooltip","SmartNumber","precision","lineHeight","unitProps","number","unit","VariationNumber","iconPos","iconSize","span","description","Stats_StatsChart","contracts","pb","pt","AllocationChart","src_Rebalance_Rebalance","pl","h4","RoundIconButton","iconName","transition","utilities_components_DateRangeModal","TrancheSelector","CustomOptionValue","CustomValueContainer","availableTranches","t","selectedProtocol","changeProtocolToken","opt","AssetField","fieldInfo","selectProps","flex","cursor","loadComponents","selectedTokenChanged","isSearchable","StatsTranche","seniorTrancheApy","juniorTrancheApy","seniorTrancheConverage","apiResults_unfiltered_aa","apiResults_unfiltered_bb","firstResult_aa","firstResult_bb","lastResult_aa","lastResult_bb","firstAAPrice","lastAAPrice","firstBBPrice","lastBBPrice","getSubgraphTrancheInfo","convertTrancheTokenBalance","min","trancheType","trancheDetails","selectTrancheType","protocolChanged","src_TrancheSelector_TrancheSelector","Stats","showRefreshIdleSpeed","toggleAdvancedCharts","selectTranche","networkId","idleTokenAvailableNetworks","idleTokenEnabled","tranchesEnabled","availableNetworks","refreshIdleSpeedConfig","refreshIdleSpeedEnabled","apyLong","availableStrategies","textSize","statsTokens","src_StatsAsset_StatsAsset","src_StatsTranche_StatsTranche","strategies","statsProtocols","AssetsUnderManagement","loaderAlign","strategyInfo","availableProtocolsKeys","availableProtocols","Title","titlePostfix","AssetsList","cols","fields","mobile","parentProps","overflow","desc","showTooltip","rgb","TranchesList","enabledProtocols","minPrecision","ExecuteTransaction","Button","componentProps","contractName","methodName","completed","Utils","SubComponent","selectedSubsection","subComponent","viewOnly","connectorName","showBreadCrumb","selectedSection","dangerouslySetInnerHTML","__html","directProps","toolProps","flexWrap","IconBox","maxWidth","submenu","tool","toolIndex","image","src","FundsOverview","aggregatedValues","govTokensTotalApr","govTokensUserBalance","govTokensDistribution","govTokensTotalBalance","govTokensTotalAprTooltip","idleTokenUserDistribution","govTokensDistributionTooltip","govTokensTotalBalanceTooltip","idleGovToken","getIdleGovToken","govTokenAvailableTokens","Promise","all","getUserDistribution","getGovTokensUserBalances","loadAssetField","depositTimestamp","getAvgAPYStats","avgAPY","lte","totBalance","govTokenBalance","govToken","balance","children","placement","message","PortfolioEquity","chartHeight","chartToken","frequencySeconds","getFrequencySeconds","component","Heading","h3","maxPrecision","govTokenIndex","tokenName","distributionFrequency","CurveRedeem","inputValue","maxSlippage","unevenAmounts","buttonDisabled","showMaxSlippage","redeemUnderlying","curveTokenConfig","curvePoolContract","curveSwapContract","curveTokenBalance","curveTokensAmounts","fastBalanceSelector","redeemUnevenAmounts","curveRedeemableIdleTokens","toggleUnevenAmounts","checkButtonDisabled","amount","changeInputValue","setFastBalanceSelector","setMaxSlippage","initToken","max_slippage","normalizedAmount","normalizeTokenAmount","withdrawSlippage","curveIdleTokensAmounts","getCurveTokensAmounts","getCurveIdleTokensAmounts","getCurveSlippage","getCurveTokenPrice","curveTokenPrice","redeemableBalance","redeemUnevenAmountsChanged","setInputValue","inputChanged","maxSlippageChanged","tokenConfigChanged","calculateSlippage","loadSelectedTokenConfig","selectedPercentage","curveConfig","getCurvePoolContract","getCurveSwapContract","getCurveTokenBalance","getCurveRedeemableIdleTokens","getCurveAvailableTokens","callbackRedeem","txSucceeded","eventValue","callbackReceiptRedeem","_amount","min_amounts","console","log","coin_index","migrationParams","coinIndex","min_amount","showSlippage","curveTokenName","cancelTransaction","checked","showBalance","selectDestinationToken","slippage","FastBalanceSelector","percentage","onMouseDown","whiteSpace","failed","textOverflow","placeholder","border","divider","DepositRedeem","txError","tokenAPY","curveAPY","totalAUM","canRedeem","canDeposit","directMint","activeModal","tokenGovTokens","showBuyFlow","maxUnlentPerc","tokenApproved","skipMigration","redeemSkipGov","showRedeemFlow","contractPaused","canRedeemCurve","erc20ForwarderTx","signedParameters","minAmountForMint","redeemGovTokens","canDepositCurve","redeemSkipGovTokens","actionProxyContract","migrationEnabled","componentMounted","agreeSkipGovTokens","redeemCurveEnabled","depositCurveBalance","depositCurveEnabled","showAdvancedOptions","skipGovTokensGasSave","depositCurveSlippage","erc20ForwarderContract","erc20ForwarderEnabled","showETHWrapperEnabled","skipGovTokensGasSaveUSD","metaTransactionsEnabled","skippedGovTokensBalance","minAmountForMintReached","loadingErc20ForwarderTx","setShowRedeemFlow","setShowBuyFlow","toggleShowAdvancedOptions","toggleSkipMigration","toggleRedeemCurve","toggleDepositCurve","toggleShowETHWrapper","toggleAgreeSkipGovTokens","toggleSkipMint","toggleRedeemGovTokens","toggleRedeemSkipGov","getSkippedGovTokensFlags","govTokensIndexes","govTokensFlags","getGovTokensIndexes","calculateSkippedGovTokens","DAITokenConfig","_skipGovTokenRedeem","WETHTokenConfig","wethPrice","redeemGasUsage","skipGovRedeemGasUsage","govTokenConfig","govTokenPrice","skippedAmount","getUniswapConversionRate","govTokensUserBalances","estimateMethodGasUsage","idleTokenBalance","slicedToArray","setRedeemSkipGovTokens","toggleErc20ForwarderEnabled","toggleMetaTransactionsEnabled","resetModal","setActiveModal","checkUseProxyContract","proxyContract","depositErc20ForwarderEnabled","depositMetaTransactionsEnabled","biconomy","approveContract","_callee4","callbackApprove","callbackReceiptApprove","curveDepositContract","_context4","enableERC20","checkTokenApproved","_callee5","_context5","approveToken","_callee6","_context6","approve","loadTokenInfo","_callee7","curveTokenEnabled","_ref10","_ref11","_context7","checkContractPaused","getCurveDepositContract","checkMigration","tokenBalance","getTokenGovTokens","boost","checkAction","loadAPY","_callee8","_context8","defineProperty","executeAction","_callee11","contractSendResult","callbackDeposit","callbackReceiptDeposit","curvePoolContractInfo","tokensToDeposit","amounts","minMintAmount","depositParams","_tokensToDeposit","_depositParams","mintProxyContractInfo","mintProxyContract","_mintProxyContract$me","functionCall","functionSignature","methodAbi","useNonce","_referral","txData","idleTokenToRedeem","idleTokenPriceWithFee","_callbackRedeem","_callbackReceiptRedeem","redeemMethod","redeemParams","_context11","getFastBalanceSelector","localStorage","setLocalStorage","lendingProcessing","lendAmount","genericError","getCurveAmounts","getCurveTokenAmount","integerValue","contract","methods","function","toConsumableArray","encodeABI","sendBiconomyTxWithPersonalSign","_jsonInterface","f","inputs","_callee10","metaInfo","permitOptions","erc20ForwarderBaseContract","permitValue","permitConfig","setValue","expiry","nonce","s","_context10","signPermit","allowed","holder","spender","permitData","permitType","asyncTimeout","sendBiconomyTxWithErc20Forwarder","request","_callee9","_erc20ForwarderContra","_functionCall","_functionSignature","gasLimit","_context9","estimateGas","buildBiconomyErc20ForwarderTx","getReferralAddress","getIdleTokenPriceWithFee","_callee12","_context12","setAction","loadProxyContracts","actions","_ref17","_callee15","erc20ForwarderContractInfo","hasProxyContract","_context15","initContract","abi","approved","_x5","getTokenAprs","tokenAprs","getCurveAPY","getQueryStringParameterByName","checkAddress","erc20ForwarderEnabledChanged","tokenBalanceChanged","actionChanged","fastBalanceSelectorChanged","redeemSkipGovChanged","redeemGovTokensChanged","agreeSkipGovTokensChanged","redeemSkipGovTokensChanged","depositCurveChanged","calculateCurveSlippage","showPoolPerc","convertedAmount","genericContractCall","depositPerc","maxUnlentPercFormatted","currentNetwork","getCurrentNetwork","isDepositDisabled","depositDisabledMessage","disabledMessageRedeemKey","disabledMessageDepositKey","govTokensEnabled","govTokensDisabled","skipMintForDepositEnabled","skipMintForDeposit","redeemGovTokenEnabled","redeemSkipGovConfig","redeemSkipGovEnabled","disabledTokens","govTokensBalance","redeemSkipGovNoTokens","showAdvancedRedeemOptions","depositErc20ForwarderEnabledTokens","metaTransactionsAvailable","useMetaTx","erc20ForwarderClient","totalBalance","migrateText","migration","depositCurve","showDepositCurve","showRedeemCurve","showCurveSlippage","showAdvancedDepositOptions","batchDepositInfo","batchDepositEnabled","batchDepositDepositEnabled","depositEnabled","showBatchDeposit","isMigrationTool","ethWrapperInfo","ETHWrapperComponent","showETHWrapper","polygonBridgeInfo","polygonNetworkId","canPerformAction","showPolygonBridgeEnabled","showActionFlow","provider","showPolygonBridge","showPolygonBridgeBanner","buyToken","accountBalance","getBaseToken","showReferral","Migrate","migrateTextBefore","TransactionField","transaction","isDisabled","iconProps","openTooltipModal","isRainbow","m","CardIconButton","imageProps","getWalletProvider","primary","fullWidth","cost","align","tokenFeesPercentage","borderColor","minWidth","ConnectBox","src_CurveRedeem_CurveRedeem","BuyModal","showInline","availableMethods","ShareModal","confettiEnabled","tweet","EstimatedEarnings","maxInputValue","loadChart","getTokenApy","earningsYear","tokenApy","amountMonth","amount3Months","amount6Months","amountYear","perc","monthColor","month3","month3Color","month6","month6Color","year","yearColor","labelTextColorModifiers","gridYValue","_ref","labels","showAPYDisclaimer","verticalAlign","zIndex","AssetPage","tokenFees","idleTokenPrice","userHasFunds","availableGovTokens","getTokenFees","getIdleTokenPrice","getTokenBalance","getUserTokenFees","getGovTokensUserTotalBalance","loadTokensInfo","availableTokensChanged","transactionsChanged","Fragment","src_DepositRedeem_DepositRedeem","ActiveCoverages","titleProps","src_FundsOverview_FundsOverview","src_EstimatedEarnings_EstimatedEarnings","TransactionsList","BetaModal","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","iconHeight","CurveDeposit","depositSlippage","migrationContract","curveTokensBalance","migrationSucceeded","migrationContractApproved","checkMigrationContractApproved","getMigrationParams","approveCallback","migrationCallback","idleTokenBalanceChanged","toMigrate","n_coins","underlyingBalanceToDeposit","normalizeIdleTokenBalance","hasCurveTokens","PortfolioEquityCurve","chartwidth","loadChartData","quickDateSelectionChanged","quickDateSelection","getCurveTxs","curveTxs","tokensBalance","processedTxs","firstTxTimestamp","curveTokens","currentDate","prevBalances","prevTimestamp","minChartValue","aggregatedBalancesKeys","tokensBalancesPerDate","aggregatedBalance","currTimestamp","tokensData","foundBalances","tokensBalances","momentDate","filteredTokenData","filteredBalances","lastFilteredTx","lastTokenData","lastTx","lastTxBalance","formattedDate","aggregatedBalanceParsed","aggregatedBalances","balances","yFormatDecimals","areaOpacity","areaBaselineValue","ChartCustomTooltip","ChartCustomTooltipRow","tokenInfo","formattedBalance","FundsOverviewCurve","compAPR","getCurveAvgBuyPrice","getCurveAvgSlippage","src_PortfolioEquityCurve_PortfolioEquityCurve","redeemBalance","depositBalance","curveZapContract","curveAvailableTokens","changeFromToken","setSelectedToken","baseToken","getSelectedToken","urlParams","param1","getCurveZapContract","updateAssetSelector","curveTokensToRedeem","src_CurveDeposit_CurveDeposit","src_FundsOverviewCurve_FundsOverviewCurve","enabledActions","PolygonModal","getEtherscanAddressUrl","WelcomeModal","email","subscribed","sendingForm","sendUserInfo","sendEmail","walletProvider","userInfo","simpleIDPassUserInfo","analytics","google","events","setTimeout","err","handleSubmit","assertThisInitialized","handleValidation","axios","post","newsletterSubscription","endpoint","then","catch","walletAddress","lastLogin","getItem","parse","signedUp","parentNode","classList","onSubmit","green","Field","Input","outline","header_styles","input","ButtonLoader","buttonText","isLoading","gradientButton","MigrateModal","dontShowAgain","toggleDontShowAgain","removeStoredItem","migrate","tokenMigrationRoute","fieldProps","protocolsTokensBalances","UpgradeModal","_args3","convert","convertTool","tokensToMigrate","tokenKey","oldContractBalanceFormatted","oldIdleTokensToMigrate","newTokenConfig","RiskAdjustedModal","getAppUrl","Dashboard","menu","baseRoute","clickEvent","menuOpened","currentRoute","pageComponent","currentSection","showResetButton","pageComponentProps","timeoutId","modalTitle","modalContent","logout","setConnector","extraicons","getRequiredNetwork","stakePolygonConfig","selected","imageDark","iconDark","bgColor","imageInactive","iconInactive","imageInactiveDark","iconInactiveDark","comingSoon","enabledEnvs","currentEnv","imageInfo","visible","curveParams","CurveStrategy","stakeConfig","statsInfo","isExternalLink","networkInitialized","section","param2","param3","section_is_strategy","param1_is_strategy","param1_is_token","param2_is_token","sectionRoute","subm","sendGoogleAnalyticsPageview","clearTimeout","setCurrentSection","loadMenu","accountInizialized","initAccount","initializeContracts","checkModals","prevParams","_this4","requiredNetworkChanged","network","networkChanged","checkRiskAdjusted","checkPolygonModal","checkBetaApproval","checkTokensToMigrate","checkWelcomeModal","checkProtocolsTokensBalances","isPolygon","isPolygonApproved","getStoredItem","isOriginUrl","checkUrlOrigin","isBetaApproved","showUpgradeModal","getTokensToMigrate","getProtocolsTokensBalances","welcomeIsOpen","welcomeModalProps","currTime","lastTime","frequency","migrateModalConfig","migrateModalEnabled","showMigrateModal","isDashboard","replace","newRoute","location","scrollTo","routeParts","setMenu","dir","_this5","networkCorrect","isCorrectNetwork","networkSupported","isSupportedNetwork","PageComponent","current","Swipeable","swipeCallback","menuRightBorder","borderRight","DashboardMenu","closeMenu","DashboardHeader","toggleMenu","overflowY","overflowX","justifyItems","src_FlashNews_FlashNews","addEthereumChain","components_PolygonModal","components_BetaModal","components_RiskAdjustedModal","components_UpgradeModal","components_MigrateModal","TooltipModal","content","components_WelcomeModal","simpleID","initSimpleID","baseTokenName"],"mappings":"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","file":"static/js/8.304bf263.chunk.js","sourcesContent":["import ExtLink from \"../ExtLink/ExtLink\";\nimport React, { Component } from 'react';\nimport { Flex, Icon, Text } from \"rimble-ui\";\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from \"../DashboardCard/DashboardCard\";\n\nclass FlashNews extends Component {\n\n  state = {\n    activeNews:null\n  }\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentDidMount(){\n    this.loadUtils();\n\n    const stakingConfig = this.functionsUtil.getGlobalConfig([\"tools\", \"stake\"]);\n    const nexusMutualConfig = this.functionsUtil.getGlobalConfig([\"tools\", \"nexusMutual\"]);\n    // const stakingPolygonConfig = this.functionsUtil.getGlobalConfig([\"tools\", \"stakePolygon\"]);\n\n    const flashNews = {\n      1: [\n        {\n          name: \"Governance Forum\",\n          icon: \"LightbulbOutline\",\n          text: `Do you have any idea to improve the Idle Protocol? Let's discuss it in our`,\n          link: {\n            text: `Governance Forum`,\n            url: this.functionsUtil.getGlobalConfig([\"forumURL\"])\n          }\n        },\n        {\n          icon: stakingConfig.icon,\n          name: stakingConfig.label,\n          text: `You can now stake your $IDLE token and take part of the fee-sharing for long-term holders.`,\n          link: {\n            text: `Stake Now`,\n            url: this.functionsUtil.getDashboardSectionUrl(`tools/${stakingConfig.route}`)\n          }\n        },\n        {\n          icon: nexusMutualConfig.icon,\n          name: nexusMutualConfig.label,\n          text: `Protect your funds against smart-contract attacks with Nexus Mutual.`,\n          link: {\n            text: `Get Covered`,\n            url: this.functionsUtil.getDashboardSectionUrl(`tools/${this.functionsUtil.getGlobalConfig([\"tools\", \"nexusMutual\", \"route\"])}`)\n          }\n        }\n      ],\n      137: [\n        /*\n        {\n          icon: stakingPolygonConfig.icon,\n          name: stakingPolygonConfig.label,\n          text: `SushiSwap LP Staking on Polygon is now available!`,\n          link: {\n            text: `Stake Now`,\n            url: this.functionsUtil.getDashboardSectionUrl(`tools/${stakingPolygonConfig.route}`)\n          }\n        }\n        */\n      ]\n    };\n\n    const currentNetworkId = this.functionsUtil.getRequiredNetworkId();\n    const activeFlashNews = flashNews[currentNetworkId];\n    const activeNews = activeFlashNews.length ? activeFlashNews[Math.floor(Math.random() * activeFlashNews.length)] : null;\n    this.setState({\n      activeNews\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    return this.state.activeNews ? (\n      <DashboardCard\n        cardProps={{\n          p: 2,\n          mb: 3,\n          width: 1\n        }}\n        isActive={true}\n        isInteractive={false}\n      >\n        <Flex\n          alignItems={\"center\"}\n          justifyContent={\"center\"}\n          flexDirection={[\"column\", \"row\"]}\n        >\n          <Icon\n            mr={1}\n            size={\"1.2em\"}\n            color={\"flashColor\"}\n            name={this.state.activeNews.icon}\n          />\n          <Text\n            fontWeight={500}\n            fontSize={\"15px\"}\n            color={\"flashColor\"}\n            textAlign={\"center\"}\n          >\n            {this.state.activeNews.text}\n          </Text>\n          <ExtLink\n            ml={1}\n            fontWeight={500}\n            color={\"primary\"}\n            fontSize={\"15px\"}\n            hoverColor={\"primary\"}\n            href={this.state.activeNews.link.url}\n            onClick={e =>\n              this.functionsUtil.sendGoogleAnalyticsEvent({\n                eventCategory: \"UI\",\n                eventAction: \"flashNews\",\n                eventLabel: this.state.activeNews.name\n              })\n            }\n          >\n            <Flex\n              alignItems={\"center\"}\n              flexDirection={\"row\"}\n              justifyContent={\"center\"}\n            >\n              {this.state.activeNews.link.text}\n              <Icon\n                ml={1}\n                size={\"0.9em\"}\n                color={\"primary\"}\n                name={\"OpenInNew\"}\n              />\n              .\n            </Flex>\n          </ExtLink>\n        </Flex>\n      </DashboardCard>\n    ) : null;\n  }\n}\n\nexport default FlashNews;\n","import moment from 'moment';\nimport { Bar } from '@nivo/bar';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CustomTooltip from '../CustomTooltip/CustomTooltip';\nimport CustomTooltipRow from '../CustomTooltip/CustomTooltipRow';\n\nclass StatsChart extends Component {\n  state = {\n    chartProps:{},\n    chartType:null,\n    chartData:null,\n    chartWidth:null\n  };\n\n  async componentDidMount() {\n    this.setState({\n      chartData:null,\n      chartType:null,\n      chartProps:null,\n    });\n    this.loadUtils();\n    this.loadApiData();\n  }\n\n  async componentDidUpdate(prevProps) {\n    const showAdvancedChanged = prevProps.showAdvanced !== this.props.showAdvanced;\n    const apiResults_aa_Changed = prevProps.apiResults_aa !== this.props.apiResults_aa;\n    const apiResults_bb_Changed = prevProps.apiResults_bb !== this.props.apiResults_bb;\n    const apiResultsChanged = prevProps.apiResults !== this.props.apiResults;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    if (apiResultsChanged || showAdvancedChanged || tokenChanged||apiResults_aa_Changed||apiResults_bb_Changed){\n      this.componentDidMount();\n    }\n  }\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  parseAum = value => {\n    return (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.tokenConfig || !this.props.selectedToken || !this.props.chartMode || (!this.props.apiResults&&!this.props.apiResults_aa)){\n      return false;\n    }\n    const maxGridLines = 4;\n    const apiResults = this.props.apiResults;\n    const apiResults_aa=this.props.apiResults_aa;\n    const apiResults_bb=this.props.apiResults_bb;\n    const apiResults_unfiltered = this.props.apiResults_unfiltered;\n    const protocols = Object.assign([],this.props.tokenConfig.protocols);\n    const totalItems = apiResults_aa ? apiResults_aa.length : apiResults.length;\n    const tranchesConfig = this.functionsUtil.getGlobalConfig(['tranches']);\n\n    const versionInfo = globalConfigs.stats.versions[this.props.idleVersion];\n\n    let keys = {};\n    let tempData = {};\n    let gridYStep = 0;\n    let itemIndex = 0;\n    let daysCount = 0;\n    let chartData = [];\n    let chartProps = {};\n    let chartType = Line;\n    let gridYValues = [];\n    let maxChartValue = 0;\n    let axisBottomIndex = 0;\n    let daysFrequency = null;\n    let idleChartData = null;\n    let firstIdleBlock = null;\n    let axisBottomMaxValues = 12;\n\n    const seniorTrancheName = this.functionsUtil.capitalize(tranchesConfig.AA.baseName);\n    const juniorTrancheName = this.functionsUtil.capitalize(tranchesConfig.BB.baseName);\n\n    switch (this.props.chartMode){\n\n      case 'APR_TRANCHE':\n\n        maxChartValue = 0;\n        chartData.push({\n          id:`APR ${seniorTrancheName}`,\n          color:tranchesConfig.AA.color.hex,\n          data:apiResults_aa.map((d,i) => {\n            const x = moment(d.timeStamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(this.functionsUtil.fixTokenDecimals(d.apr,18));\n            maxChartValue = Math.max(maxChartValue,y);\n            return { x, y };\n          })\n        });\n        chartData.push({\n          id:`APR ${juniorTrancheName}`,\n          color:tranchesConfig.BB.color.hex,\n          data:apiResults_bb.map((d,i) => {\n            const x = moment(d.timeStamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(this.functionsUtil.fixTokenDecimals(d.apr,18));\n            maxChartValue = Math.max(maxChartValue,y);\n            return { x, y };\n          })\n        });\n\n        /*\n        const csv = {};\n        chartData.forEach( protocolData => {\n          protocolData.data.forEach( d => {\n            if (!csv[d.x]){\n              csv[d.x] = {};\n            }\n            csv[d.x][protocolData.id] = d.y;\n          });\n        });\n\n        const csv_ordered = Object.keys(csv).sort().reduce(\n          (obj, key) => { \n            obj[key] = csv[key]; \n            return obj;\n          }, \n          {}\n        );\n\n        const csv_array = [];\n        const csv_header = [];\n        csv_header.push('Date');\n        chartData.forEach( pData => csv_header.push(pData.id) );\n        csv_array.push(csv_header.join(','));\n\n        Object.keys(csv_ordered).forEach( date => {\n          const csv_row = [date];\n          chartData.forEach( cData => {\n            if (csv_ordered[date][cData.id]){\n              csv_row.push(parseFloat(csv_ordered[date][cData.id]).toFixed(4));\n            } else {\n              csv_row.push('0.0000');\n            }\n          });\n          csv_array.push(csv_row.join(','));\n        });\n\n        console.log('-------DEBUG-------');\n        console.log(csv_ordered);\n        console.log('-------START-------');\n        console.log(csv_array.join('\\n'));\n        console.log('-------END-------');\n        */\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 6;\n        const Values = chartData[chartData.length-1].data.sort((a,b) => (moment(a.x,\"YYYY/MM/DD HH:mm\").isBefore(moment(b.x,\"YYYY/MM/DD HH:mm\")) ? -1 : 1));\n        daysCount = moment(Values[Values.length-1].x,\"YYYY/MM/DD HH:mm\").diff(moment(Values[0].x,\"YYYY/MM/DD HH:mm\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        // console.log('APR',chartValues,chartValues[0].x,chartValues[chartValues.length-1].x,daysCount,daysFrequency);\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(2)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            tickPadding: 15,\n            legendOffset: 0,\n            orient: 'bottom',\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickValues: 'every day',\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 110 : 120,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    // const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE_TRANCHE':\n        // let prevTokenPrice = null;\n        maxChartValue = 0;\n        let firstPriceAA = null;\n        let firstPriceBB = null;\n        let chartDataAA=null;\n        let chartDataBB=null;\n        let firstBlock=null;\n\n        chartDataAA = apiResults_aa.map((d,i) => {\n          let y = 0;\n          let apy = 0;\n          let days = 0;\n          const x = moment(d.timeStamp*1000).format(\"YYYY/MM/DD HH:mm\");\n          const tokenPrice = this.functionsUtil.fixTokenDecimals(d.virtualPrice,this.props.tokenConfig.decimals);\n\n          if (!firstPriceAA){\n            firstPriceAA = tokenPrice;\n          } else {\n            y = parseFloat(tokenPrice.div(firstPriceAA).minus(1).times(100));\n\n            days = (d.timeStamp-apiResults_aa[0].timeStamp)/86400;\n            const earning = tokenPrice.div(firstPriceAA).minus(1).times(100);\n            apy = earning.times(365).div(days).toFixed(2);\n            // console.log(firstTokenPrice.toString(),tokenPrice.toString(),earning.toString(),days,y,apy);\n          }\n\n          if (firstBlock === null){\n            firstBlock = parseInt(d.blockNumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = parseInt(d.blockNumber);\n          itemIndex++;\n\n          return { x, y, apy, blocknumber, itemPos };\n        });\n\n        chartDataBB = apiResults_bb.map((d,i) => {\n          let y = 0;\n          let apy = 0;\n          let days = 0;\n          const x = moment(d.timeStamp*1000).format(\"YYYY/MM/DD HH:mm\");\n          const tokenPrice = this.functionsUtil.fixTokenDecimals(d.virtualPrice,this.props.tokenConfig.decimals);\n\n          if (!firstPriceBB){\n            firstPriceBB = tokenPrice;\n          } else {\n            y = parseFloat(tokenPrice.div(firstPriceBB).minus(1).times(100));\n\n            days = (d.timeStamp-apiResults_bb[0].timeStamp)/86400;\n            const earning = tokenPrice.div(firstPriceBB).minus(1).times(100);\n            apy = earning.times(365).div(days).toFixed(2);\n\n            // console.log(firstTokenPrice.toString(),tokenPrice.toString(),earning.toString(),days,y,apy);\n          }\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blockNumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = parseInt(d.blockNumber);\n\n          itemIndex++;\n\n          return { x, y, apy, blocknumber, itemPos };\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n        chartDataAA.splice(0,1);\n\n        \n        chartData.push({\n          id:`Performance ${seniorTrancheName}`,\n          color: tranchesConfig.AA.color.hex,\n          data: chartDataAA\n        });\n\n        chartData.push({\n          id:`Performance ${juniorTrancheName}`,\n          color: tranchesConfig.BB.color.hex,\n          data: chartDataBB\n        });\n     \n\n        // Set chart type\n        chartType = Line;\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 12;\n        daysCount = moment(chartDataAA[chartDataAA.length-1].x,\"YYYY/MM/DD HH:mm\").diff(moment(chartDataAA[0].x,\"YYYY/MM/DD HH:mm\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            tickValues:`every day`,\n            legendPosition: 'middle',\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              itemWidth: this.props.isMobile ? 70 : 160,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'VOL_TRANCHE':\n        let divergingData = {};\n\n        const startTimestampA = parseInt(apiResults_unfiltered[0].timeStamp);\n        const endTimestampA = parseInt(moment()._d.getTime()/1000);\n\n        for (let timestamp=startTimestampA;timestamp<=endTimestampA;timestamp+=86400){\n          const date = moment(timestamp*1000).format(\"YYYY/MM/DD\");\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n        }\n\n        let lastRow = null;\n        apiResults_unfiltered.forEach(row => {\n          const date = moment(row.timeStamp*1000).format(\"YYYY/MM/DD\");\n          const idleTokens = this.functionsUtil.fixTokenDecimals(row.totalSupply,18);\n\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp:row.timeStamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n\n          if (lastRow){\n            const idleTokensPrev = this.functionsUtil.fixTokenDecimals(lastRow.totalSupply,18);\n            const idleTokensDiff = !idleTokens.eq(idleTokensPrev);\n            if (idleTokensDiff){\n              const diff = idleTokens.minus(idleTokensPrev);\n              // Deposits\n              if (diff.gte(0)){\n                divergingData[date].deposits+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,divergingData[date].deposits);\n              } else {\n                divergingData[date].redeems+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,Math.abs(divergingData[date].deposits));\n              }\n            }\n\n          } else {\n            divergingData[date].deposits+=parseFloat(idleTokens);\n          }\n\n          lastRow = row;\n        });\n\n        chartData = Object.values(divergingData).filter(v => {\n          return (!this.props.startTimestamp || v.timestamp>=this.props.startTimestamp) && (!this.props.endTimestamp || v.timestamp<=this.props.endTimestamp);\n        }).sort((a,b) => (a.timestamp < b.timestamp ? -1 : 1));\n\n        let maxRange = 0;\n        chartData.forEach(v => {\n          maxRange = Math.max(maxRange,Math.abs(v.deposits),Math.abs(v.redeems));\n        });\n\n        chartType = Bar;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 6;\n        daysCount = moment(chartData[chartData.length-1].date,\"YYYY/MM/DD\").diff(moment(chartData[0].date,\"YYYY/MM/DD\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          indexBy: 'date',\n          enableLabel: false,\n          minValue:-maxRange,\n          maxValue:maxRange,\n          label: d => {\n            return Math.abs(d.value);\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            legend: '',\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            tickValues: 'every day',\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD').format('MMM DD')\n              }\n            },\n            legendPosition: 'middle',\n          },\n          axisLeft: null,\n          axisRight: {\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:8,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(Math.abs(v),0)\n          },\n          markers: [\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { strokeOpacity: 0 },\n              textStyle: { fill: this.props.theme.colors.transactions.action.deposit },\n              legend: 'deposits',\n              legendPosition: 'top-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { stroke: this.props.theme.colors['dark-gray'], strokeDasharray: '5 3' },\n              textStyle: { fill: this.props.theme.colors.transactions.action.redeem },\n              legend: 'redeems',\n              legendPosition: 'bottom-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n          ],\n          keys:['deposits','redeems'],\n          padding:0.4,\n          colors:[this.props.theme.colors.transactions.action.deposit, this.props.theme.colors.transactions.action.redeem],\n          labelTextColor: 'inherit:darker(1.4)',\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 80 : 100,\n              itemHeight: 18,\n              translateX: 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            },\n            tooltip:{\n              container:{\n                boxShadow:null,\n                background:null\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 50, bottom: 45, left: 50 } : { top: 20, right: 70, bottom: 70, left: 50 },\n          tooltip:(data) => {\n            const xFormatted = this.functionsUtil.strToMoment(data.data.timestamp*1000).format('MMM DD HH:ss');\n            const point = {\n              id:data.id,\n              data:{\n                xFormatted\n              }\n            };\n            const depositFormatted = this.functionsUtil.abbreviateNumber(data.data.deposits,4)+' '+this.props.selectedToken;\n            const redeemFormatted = this.functionsUtil.abbreviateNumber(data.data.redeems,4)+' '+this.props.selectedToken;\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                <CustomTooltipRow\n                  label={'Deposits'}\n                  color={this.props.theme.colors.deposit}\n                  value={depositFormatted}\n                />\n                <CustomTooltipRow\n                  label={'Redeem'}\n                  color={this.props.theme.colors.redeem}\n                  value={redeemFormatted}\n                />\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'VOL':\n        divergingData = {};\n\n        const startTimestamp = parseInt(apiResults_unfiltered[0].timestamp);\n        const endTimestamp = parseInt(moment()._d.getTime()/1000);\n\n        for (let timestamp=startTimestamp;timestamp<=endTimestamp;timestamp+=86400){\n          const date = moment(timestamp*1000).format(\"YYYY/MM/DD\");\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n        }\n\n        lastRow = null;\n        apiResults_unfiltered.forEach(row => {\n          const date = moment(row.timestamp*1000).format(\"YYYY/MM/DD\");\n          const idleTokens = this.functionsUtil.fixTokenDecimals(row.idleSupply,18);\n\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp:row.timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n\n          if (lastRow){\n            const idleTokensPrev = this.functionsUtil.fixTokenDecimals(lastRow.idleSupply,18);\n            const idleTokensDiff = !idleTokens.eq(idleTokensPrev);\n            if (idleTokensDiff){\n              const diff = idleTokens.minus(idleTokensPrev);\n              // Deposits\n              if (diff.gte(0)){\n                divergingData[date].deposits+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,divergingData[date].deposits);\n              } else {\n                divergingData[date].redeems+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,Math.abs(divergingData[date].deposits));\n              }\n            }\n\n          } else {\n            divergingData[date].deposits+=parseFloat(idleTokens);\n          }\n\n          lastRow = row;\n        });\n\n        chartData = Object.values(divergingData).filter(v => {\n          return (!this.props.startTimestamp || v.timestamp>=this.props.startTimestamp) && (!this.props.endTimestamp || v.timestamp<=this.props.endTimestamp);\n        }).sort((a,b) => (a.timestamp < b.timestamp ? -1 : 1));\n\n        maxRange = 0;\n        chartData.forEach(v => {\n          maxRange = Math.max(maxRange,Math.abs(v.deposits),Math.abs(v.redeems));\n        });\n\n        chartType = Bar;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 6;\n        daysCount = moment(chartData[chartData.length-1].date,\"YYYY/MM/DD\").diff(moment(chartData[0].date,\"YYYY/MM/DD\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          indexBy: 'date',\n          enableLabel: false,\n          minValue:-maxRange,\n          maxValue:maxRange,\n          label: d => {\n            return Math.abs(d.value);\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            legend: '',\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            tickValues: 'every day',\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD').format('MMM DD')\n              }\n            },\n            legendPosition: 'middle',\n          },\n          axisLeft: null,\n          axisRight: {\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:8,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(Math.abs(v),0)\n          },\n          markers: [\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { strokeOpacity: 0 },\n              textStyle: { fill: this.props.theme.colors.transactions.action.deposit },\n              legend: 'deposits',\n              legendPosition: 'top-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { stroke: this.props.theme.colors['dark-gray'], strokeDasharray: '5 3' },\n              textStyle: { fill: this.props.theme.colors.transactions.action.redeem },\n              legend: 'redeems',\n              legendPosition: 'bottom-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n          ],\n          keys:['deposits','redeems'],\n          padding:0.4,\n          colors:[this.props.theme.colors.transactions.action.deposit, this.props.theme.colors.transactions.action.redeem],\n          labelTextColor: 'inherit:darker(1.4)',\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 80 : 100,\n              itemHeight: 18,\n              translateX: 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            },\n            tooltip:{\n              container:{\n                boxShadow:null,\n                background:null\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 50, bottom: 45, left: 50 } : { top: 20, right: 70, bottom: 70, left: 50 },\n          tooltip:(data) => {\n            const xFormatted = this.functionsUtil.strToMoment(data.data.timestamp*1000).format('MMM DD HH:ss');\n            const point = {\n              id:data.id,\n              data:{\n                xFormatted\n              }\n            };\n            const depositFormatted = this.functionsUtil.abbreviateNumber(data.data.deposits,2)+' '+this.props.selectedToken;\n            const redeemFormatted = this.functionsUtil.abbreviateNumber(data.data.redeems,2)+' '+this.props.selectedToken;\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                <CustomTooltipRow\n                  label={'Deposits'}\n                  color={this.props.theme.colors.deposit}\n                  value={depositFormatted}\n                />\n                <CustomTooltipRow\n                  label={'Redeem'}\n                  color={this.props.theme.colors.redeem}\n                  value={redeemFormatted}\n                />\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case'AUM_TRANCHE':\n\n        maxChartValue = 0;\n        chartData.push({\n          id:`AUM ${seniorTrancheName}`,\n          color: tranchesConfig.AA.color.hex,\n          data: apiResults_aa.map((d,i) => {\n\n            const aum_aa = this.functionsUtil.fixTokenDecimals(d.contractValue,18);\n            const x = moment(d.timeStamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(aum_aa.toString());\n\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x,y };\n          })\n        });\n        chartData.push({\n          id:`AUM ${juniorTrancheName}`,\n          color: tranchesConfig.BB.color.hex,\n          data: apiResults_bb.map((d,i) => {\n\n            const aum_bb = this.functionsUtil.fixTokenDecimals(d.contractValue,18);\n            const x = moment(d.timeStamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(aum_bb.toString());\n\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x,y };\n          })\n        });\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 6;\n        daysCount = moment(chartData[0].data[chartData[0].data.length-1].x,\"YYYY/MM/DD HH:mm\").diff(moment(chartData[0].data[0].x,\"YYYY/MM/DD HH:mm\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:v => this.functionsUtil.formatMoney(v,v<1 ? 3 :0),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            tickValues: 'every day',\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              itemWidth: this.props.isMobile ? 90 : 100,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                fontSize: this.props.isMobile ? 12: 14,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const contractValue = point.data.yFormatted;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={`${contractValue} ${this.props.selectedToken}`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n        break;\n        case'COVERAGE_TRANCHE':\n\n          maxChartValue = 0;\n          chartData.push({\n            id:'Coverage',\n            color: tranchesConfig.AA.color.hex,\n            data: apiResults_aa.map((d,i) => {\n              const aum_aa = this.functionsUtil.fixTokenDecimals(d.contractValue,18);\n              const x = moment(d.timeStamp*1000).format(\"YYYY/MM/DD HH:mm\");\n              const aum_bb=apiResults_bb[i]?(this.functionsUtil.fixTokenDecimals(apiResults_bb[i].contractValue,18)):this.functionsUtil.BNify(0);\n              const ratio=aum_aa>0?aum_bb.div(aum_aa):1;\n              const coverage=ratio>1?100:ratio*100\n              const y = parseFloat(coverage.toString());\n              maxChartValue = Math.max(maxChartValue,y);\n\n              return { x,y };\n            })\n          });\n\n          // Add allocation\n\n          // Set chart type\n          chartType = Line;\n\n          gridYStep = parseFloat(maxChartValue/maxGridLines);\n          gridYValues = [0];\n          for (let i=1;i<=5;i++){\n            gridYValues.push(i*gridYStep);\n          }\n\n          axisBottomIndex = 0;\n          axisBottomMaxValues = 6;\n          daysCount = moment(chartData[0].data[chartData[0].data.length-1].x,\"YYYY/MM/DD HH:mm\").diff(moment(chartData[0].data[0].x,\"YYYY/MM/DD HH:mm\"),'days');\n          daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n          chartProps = {\n            xScale:{\n              type: 'time',\n              format: '%Y/%m/%d %H:%M',\n              // precision: 'hour',\n            },\n            xFormat:'time:%b %d %H:%M',\n            yFormat:v => parseFloat(v).toFixed(3)+'%',\n            yScale:{\n              type: 'linear',\n              stacked: false\n            },\n            axisLeft:{\n              legend: '',\n              tickSize: 0,\n              orient: 'left',\n              tickPadding: 10,\n              tickRotation: 0,\n              legendOffset: -70,\n              tickValues:gridYValues,\n              legendPosition: 'middle',\n              format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n            },\n            axisBottom: this.props.isMobile ? null : {\n              legend: '',\n              tickSize: 0,\n              format: (value) => {\n                if (axisBottomIndex++ % daysFrequency === 0){\n                  return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n                }\n              },\n              tickPadding: 15,\n              orient: 'bottom',\n              legendOffset: 0,\n              tickValues: 'every day',\n              legendPosition: 'middle'\n            },\n            gridYValues,\n            pointSize:0,\n            useMesh:true,\n            animate:false,\n            pointLabel:\"y\",\n            curve:'linear',\n            enableArea:false,\n            enableSlices:'x',\n            enableGridX:false,\n            enableGridY:true,\n            pointBorderWidth:1,\n            colors:d => d.color,\n            pointLabelYOffset:-12,\n            legends:[\n              {\n                itemWidth: this.props.isMobile ? 70 : 80,\n                itemHeight: 18,\n                translateX: this.props.isMobile ? -35 : 0,\n                translateY: this.props.isMobile ? 40 : 65,\n                symbolSize: 10,\n                itemsSpacing: 5,\n                direction: 'row',\n                anchor: 'bottom-left',\n                symbolShape: 'circle',\n                itemTextColor: this.props.theme.colors.legend,\n                effects: [\n                  {\n                    on: 'hover',\n                    style: {\n                      itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                    }\n                  }\n                ]\n              }\n            ],\n            theme:{\n              axis: {\n                ticks: {\n                  text: {\n                    fontSize: this.props.isMobile ? 12: 14,\n                    fontWeight:600,\n                    fill:this.props.theme.colors.legend,\n                    fontFamily: this.props.theme.fonts.sansSerif\n                  }\n                }\n              },\n              grid: {\n                line: {\n                  stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n                }\n              },\n              legends:{\n                text:{\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fill:this.props.theme.colors.legend,\n                  fontWeight:500,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            pointColor:{ from: 'color', modifiers: []},\n            margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n            sliceTooltip:(slideData) => {\n              const { slice } = slideData;\n              const point = slice.points[0];\n              return (\n                <CustomTooltip\n                  point={point}\n                >\n                  {\n                  typeof slice.points === 'object' && slice.points.length &&\n                    slice.points.map(point => {\n                      const protocolName = point.serieId;\n                      const contractValue = point.data.yFormatted;\n                      return (\n                        <CustomTooltipRow\n                          key={point.id}\n                          label={protocolName}\n                          color={point.color}\n                          value={`${contractValue}`}\n                        />\n                      );\n                    })\n                  }\n                </CustomTooltip>\n              );\n            }\n          };\n        break;\n      /*\n      case 'AUM_ALL':\n        await this.functionsUtil.asyncForEach(Object.keys(availableTokens[globalConfigs.network.requiredNetwork]),async (tokenName,i) => {\n          const tokenConfig = availableTokens[globalConfigs.network.requiredNetwork][tokenName];\n          const tokenDataApi = await this.props.getTokenData(tokenConfig.address);\n          chartData.push({\n            id:tokenName,\n            color: tokenConfig.color,\n            data: tokenDataApi.map((d,i) => {\n              const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n              const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,tokenConfig.decimals);\n              const aum = idleTokens.times(idlePrice);\n              return {\n                x: moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\"),\n                y: parseInt(aum.toString())\n              };\n            })\n          });\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken,\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v),\n            orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            legendPosition: 'middle'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            format: '%b %d',\n            tickValues: this.props.isMobile ? 'every 4 days' : 'every 3 days',\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 36,\n            legendPosition: 'middle'\n          },\n          enableArea:false,\n          curve:\"linear\",\n          enableSlices:'x',\n          enableGridX:true,\n          enableGridY:false,\n          colors:d => d.color,\n          pointSize:0,\n          pointColor:{ from: 'color', modifiers: []},\n          pointBorderWidth:1,\n          pointLabel:\"y\",\n          pointLabelYOffset:-12,\n          useMesh:true,\n          animate:false,\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 60, bottom: 40, left: 60 },\n        };\n      break;\n      */\n      case 'AUM':\n\n        maxChartValue = 0;\n\n        chartData.push({\n          id:'AUM',\n          color: 'hsl('+globalConfigs.stats.tokens[this.props.selectedToken].color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n            const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n            const aum = idleTokens.times(idlePrice);\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(aum.toString());\n\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x,y };\n          })\n        });\n\n        // Add allocation\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          apiResults.map((d,i) => {\n            return d.protocolsData.filter((protocolAllocation,x) => {\n                return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            })\n            .map((protocolAllocation,z) => {\n              const protocolPaused = this.functionsUtil.BNify(protocolAllocation.rate).eq(0);\n              if (!protocolPaused){\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals));\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                let foundItem = chartData[0].data.filter(item => { return item.x === x });\n                if (foundItem){\n                  foundItem = foundItem[0];\n                  const pos = chartData[0].data.indexOf(foundItem);\n                  if (!foundItem.allocations){\n                    foundItem.allocations = {};\n                  }\n                  foundItem.allocations[p.name] = y;\n                  chartData[0].data[pos] = foundItem;\n                }\n              }\n              return undefined;\n            })[0]\n          }).filter((v) => { return v !== undefined; } )\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 6;\n        daysCount = moment(chartData[0].data[chartData[0].data.length-1].x,\"YYYY/MM/DD HH:mm\").diff(moment(chartData[0].data[0].x,\"YYYY/MM/DD HH:mm\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:v => this.functionsUtil.formatMoney(v,v<1 ? 3 :0),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            tickValues: 'every day',\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:true,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            if (typeof point === 'object' && typeof point.data === 'object'){\n              return (\n                <CustomTooltip\n                  point={point}\n                >\n                  <CustomTooltipRow\n                    label={point.serieId}\n                    color={point.serieColor}\n                    value={point.data.yFormatted}\n                  />\n                  {\n                    point.data.allocations && typeof point.data.allocations === 'object' &&\n                      Object.keys(point.data.allocations).map(protocolName => {\n                        const protocolInfo = globalConfigs.stats.protocols[protocolName];\n                        const protocolColor = 'hsl('+protocolInfo.color.hsl.join(',')+')';\n                        const protocolAllocation = point.data.allocations[protocolName];\n                        const protocolAllocationFormatted = this.functionsUtil.formatMoney(protocolAllocation,protocolAllocation<1 ? 3 : 0);\n                        const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                        return (\n                          <CustomTooltipRow\n                            color={protocolColor}\n                            label={protocolInfo.label}\n                            key={`${point.id}_${protocolName}`}\n                            value={`${protocolAllocationFormatted} (${protocolAllocationPerc})`}\n                          />\n                        );\n                      })\n                  }\n                </CustomTooltip>\n              );\n              /*\n              return (\n                <div\n                    key={point.id}\n                    style={{\n                      background: 'white',\n                      color: 'inherit',\n                      fontSize: 'inherit',\n                      borderRadius: '2px',\n                      boxShadow: 'rgba(0, 0, 0, 0.25) 0px 1px 2px',\n                      padding: '5px 9px'\n                    }}\n                >\n                  <div>\n                    <table style={{width:'100%',borderCollapse:'collapse'}}>\n                      <tbody>\n                        <tr>\n                          <td style={{padding:'3px 5px'}}>\n                            <span style={{display:'block', width: '12px', height: '12px', background: point.serieColor}}></span>\n                          </td>\n                          <td style={{padding:'3px 5px'}}>{point.serieId}</td>\n                          <td style={{padding:'3px 5px'}}><strong>{point.data.yFormatted}</strong></td>\n                        </tr>\n                        {\n                          point.data.allocations && typeof point.data.allocations === 'object' &&\n                            Object.keys(point.data.allocations).map(protocolName => {\n                              const protocolColor = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n                              const protocolAllocation = this.functionsUtil.formatMoney(point.data.allocations[protocolName],0);\n                              const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                              return (\n                                <tr key={`${point.id}_${protocolName}`}>\n                                  <td style={{padding:'3px 5px'}}>\n                                    <span style={{display:'block', width: '12px', height: '12px', background: protocolColor}}></span>\n                                  </td>\n                                  <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{protocolName}</td>\n                                  <td style={{padding:'3px 5px'}}><strong>{protocolAllocation}</strong> ({protocolAllocationPerc})</td>\n                                </tr>\n                              );\n                            })\n                        }\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              );\n              */\n            }\n\n            return null;\n          }\n        };\n      break;\n      case 'ALL':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\");\n\n          let row = {\n            date\n          };\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const foundProtocol = this.props.tokenConfig.protocols.find((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() });\n            if (foundProtocol){\n              const protocolInfo = globalConfigs.stats.protocols[foundProtocol.name];\n              if (!protocolPaused){\n                let allocation = parseFloat(this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals));\n                keys[protocolInfo.label] = 1;\n                row[protocolInfo.label] = allocation;\n                row[`${protocolInfo.label}Color`] = 'hsl('+protocolInfo.color.hsl.join(',')+')';\n                // console.log(protocolInfo.label,this.functionsUtil.BNify(protocolData.allocation).toString(),this.props.tokenConfig.decimals,allocation);\n                maxChartValue = Math.max(maxChartValue,allocation);\n              } else {\n                row[protocolInfo.label] = 0;\n              }\n            }\n          });\n\n\n          tempData[date] = row;\n        });\n\n        const dates = Object.keys(tempData);\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 12;\n        daysCount = moment(dates[dates.length-1],\"YYYY/MM/DD\").diff(moment(dates[0],\"YYYY/MM/DD\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n            orient: 'left',\n            tickSize: 0,\n            tickPadding: 10,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            tickValues:gridYValues,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickSize: 0,\n            tickPadding: 10,\n            legendOffset: 36,\n            orient: 'bottom-left',\n            tickValues: 'every day',\n            legendPosition: 'middle'\n          },\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            tooltip: {\n              container:{\n                padding:'0',\n                boxShadow:'none',\n                background:'transparent',\n              },\n              tableCell:{\n                padding:'0'\n              }\n            },\n            axis: {\n              ticks: {\n                text: {\n                  fontSize:this.props.isMobile ? 12 : 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize:this.props.isMobile ? 12 : 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 60 },\n          tooltip:({ id, value, color }) => {\n            const allocation = this.functionsUtil.formatMoney(value,0);\n            return (\n              <DashboardCard\n                cardProps={{\n                  py:1,\n                  px:2,\n                  width:1,\n                }}\n              >\n                <table\n                  style={{width:'100%',borderCollapse:'collapse'}}\n                >\n                  <tbody>\n                    <tr>\n                      <td style={{padding:'3px 5px'}}>\n                        <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                      </td>\n                      <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                      <td style={{padding:'3px 5px'}}><strong>{allocation} {this.props.selectedToken}</strong></td>\n                    </tr>\n                  </tbody>\n                </table>\n              </DashboardCard>\n            )\n          }\n        }\n      break;\n      case 'ALL_PERC':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\")\n          let row = {\n            date:moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\")\n          };\n          if (tempData[date]){\n            row = tempData[date];\n          }\n\n          const totalAllocation = d.protocolsData.reduce((accumulator,protocolAllocation) => {\n            const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n            return this.functionsUtil.BNify(accumulator).plus(allocation);\n          },0);\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const protocolName = this.props.tokenConfig.protocols.filter((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() })[0].name;\n            if (!protocolPaused){\n              const allocation = this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals);\n              const allocationPerc = parseFloat(allocation.div(totalAllocation).times(100));\n              keys[protocolName] = 1;\n              row[protocolName] = allocationPerc;\n              row[`${protocolName}Color`] = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n            } else if (typeof row[protocolName] !== undefined) {\n              row[protocolName] = 0;\n            } \n          });\n          \n          tempData[date] = row;\n        });\n\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          data: chartData,\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 40, bottom: 40, left: 60 },\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => parseInt(v)+'%'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            orient: 'bottom',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days'\n          },\n          tooltip:({ id, value, color }) => {\n            const allocation = parseInt(value)===100 ? this.functionsUtil.formatMoney(value,0) : this.functionsUtil.formatMoney(value,2);\n            return (\n              <table style={{width:'100%',borderCollapse:'collapse'}}>\n                <tbody>\n                  <tr>\n                    <td style={{padding:'3px 5px'}}>\n                      <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                    </td>\n                    <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                    <td style={{padding:'3px 5px'}}><strong>{allocation}%</strong></td>\n                  </tr>\n                </tbody>\n              </table>\n            )\n          }\n        }\n      break;\n      case 'APR':\n\n        maxChartValue = 0;\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo && additionalProtocol.enabledTokens.includes(this.props.selectedToken)){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        protocols.forEach((p,j) => {\n          const protocolInfo = {...globalConfigs.stats.protocols[p.name]};\n          if (!protocolInfo.enabled){\n            return;\n          }\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n          \n          chartData.push({\n            id:protocolInfo.label,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                // let protocolRate = this.functionsUtil.BNify(protocolAllocation.rate);\n\n                let protocolRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n                  if (protocolAllocation[field]){\n                    return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(protocolAllocation[field]));\n                  }\n                  return this.functionsUtil.BNify(acc);\n                },0) : this.functionsUtil.BNify(protocolAllocation[rateField]);\n\n                const protocolPaused = protocolRate.eq(0);\n                if (!protocolPaused){\n\n                  // Aave V1 wrong rate FIX\n                  if (protocolRate.lt(0) && protocolAllocation.aaveAdditionalAPR && this.functionsUtil.BNify(protocolAllocation.aaveAdditionalAPR).gt(0)){\n                    protocolRate = protocolRate.plus(this.functionsUtil.BNify(protocolAllocation.aaveAdditionalAPR));\n                  }\n\n                  protocolRate = this.functionsUtil.fixTokenDecimals(protocolRate,18);\n\n                  const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                  const y = parseFloat(protocolRate);\n\n                  maxChartValue = Math.max(maxChartValue,y);\n\n                  return { x, y };\n                }\n                return undefined;\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color:'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data:apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(this.functionsUtil.fixTokenDecimals(d.idleRate,18));\n            maxChartValue = Math.max(maxChartValue,y);\n            return { x, y };\n          })\n        });\n\n        /*\n        const csv = {};\n        chartData.forEach( protocolData => {\n          protocolData.data.forEach( d => {\n            if (!csv[d.x]){\n              csv[d.x] = {};\n            }\n            csv[d.x][protocolData.id] = d.y;\n          });\n        });\n\n        const csv_ordered = Object.keys(csv).sort().reduce(\n          (obj, key) => { \n            obj[key] = csv[key]; \n            return obj;\n          }, \n          {}\n        );\n\n        const csv_array = [];\n        const csv_header = [];\n        csv_header.push('Date');\n        chartData.forEach( pData => csv_header.push(pData.id) );\n        csv_array.push(csv_header.join(','));\n\n        Object.keys(csv_ordered).forEach( date => {\n          const csv_row = [date];\n          chartData.forEach( cData => {\n            if (csv_ordered[date][cData.id]){\n              csv_row.push(parseFloat(csv_ordered[date][cData.id]).toFixed(4));\n            } else {\n              csv_row.push('0.0000');\n            }\n          });\n          csv_array.push(csv_row.join(','));\n        });\n\n        console.log('-------DEBUG-------');\n        console.log(csv_ordered);\n        console.log('-------START-------');\n        console.log(csv_array.join('\\n'));\n        console.log('-------END-------');\n        */\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 6;\n        const chartValues = chartData[chartData.length-1].data.sort((a,b) => (moment(a.x,\"YYYY/MM/DD HH:mm\").isBefore(moment(b.x,\"YYYY/MM/DD HH:mm\")) ? -1 : 1));\n        daysCount = moment(chartValues[chartValues.length-1].x,\"YYYY/MM/DD HH:mm\").diff(moment(chartValues[0].x,\"YYYY/MM/DD HH:mm\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        // console.log('APR',chartValues,chartValues[0].x,chartValues[chartValues.length-1].x,daysCount,daysFrequency);\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(2)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            tickPadding: 15,\n            legendOffset: 0,\n            orient: 'bottom',\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickValues: 'every day',\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    // const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'SCORE':\n\n        let prevValue = 0;\n        maxChartValue = 0;\n\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n          if (!protocolInfo.enabled){\n            return;\n          }\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n          chartData.push({\n            id:protocolInfo.label,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(protocolAllocation.defiScore);\n\n                y = isNaN(y) || !y ? prevValue : y;\n                prevValue = y;\n                maxChartValue = Math.max(maxChartValue,y);\n\n                return { x, y };\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            let y = parseFloat(d.idleScore);\n            y = isNaN(y) || !y ? prevValue : y;\n            prevValue = y;\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x, y };\n          })\n        });\n\n        // debugger;\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 6;\n        daysCount = moment(chartData[0].data[chartData[0].data.length-1].x,\"YYYY/MM/DD\").diff(moment(chartData[0].data[0].x,\"YYYY/MM/DD\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(1),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            tickValues: 'every day',\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE_V4':\n\n        itemIndex = 0;\n        maxChartValue = 0;\n        // let prevApy = null;\n        let prevApr = null;\n        let prevData = null;\n        let avgApy = this.functionsUtil.BNify(0);\n        let startBalance = this.functionsUtil.BNify(1);\n        let currentBalance = this.functionsUtil.BNify(1);\n\n        idleChartData = [];\n        const aaveProtocolInfo = protocols.find( p => p.name === 'aavev2' );\n\n        apiResults.forEach((d,i) => {\n\n          let idleRate = this.functionsUtil.BNify(d.idleRate);\n          let y = 0;\n          let apy = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n\n          // Aave V1 wrong rate FIX\n          if (this.props.selectedToken === 'WETH' && moment(x).isSameOrBefore(moment('2021-05-19 12:20','YYYY-MM-DD HH:mm'))){\n            const aaveProtocolData = aaveProtocolInfo ? d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === aaveProtocolInfo.address.toLowerCase()\n            }) : null;\n            if (aaveProtocolData.aaveAdditionalAPR && this.functionsUtil.BNify(aaveProtocolData.aaveAdditionalAPR).gt(0)){\n              idleRate = idleRate.plus(this.functionsUtil.BNify(aaveProtocolData.aaveAdditionalAPR));\n            }\n          }\n\n          const apr = this.functionsUtil.fixTokenDecimals(idleRate,18).div(100);\n          // const apy = this.functionsUtil.apr2apy(apr);\n          \n          avgApy = avgApy.plus(apr.times(100));\n\n          if (prevApr){\n            const days = (d.timestamp-prevData.timestamp)/86400;\n            // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n            const earnings = currentBalance.times(prevApr.times(days).div(365));\n            currentBalance = currentBalance.plus(earnings);\n\n            const earning = currentBalance.div(startBalance).minus(1).times(100);\n            y = parseFloat(earning);\n\n            // apy = earning.times(365).div(totDays).toFixed(2);\n            const daysSinceBeginning = idleChartData.length>0 ? Math.max(1,moment(d.timestamp*1000).diff(moment(idleChartData[0].x,\"YYYY/MM/DD HH:mm\"),'days')) : 1;\n            apy = parseFloat(y*365/daysSinceBeginning).toFixed(2);\n          }\n\n          prevData = d;\n          // prevApy = apy;\n          prevApr = apr;\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          if (apy>0){\n            idleChartData.push({ x, y, apy, blocknumber, itemPos });\n          }\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo && additionalProtocol.enabledTokens.includes(this.props.selectedToken)){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        protocols.forEach( p => {\n\n          const protocolInfo = {...globalConfigs.stats.protocols[p.name]};\n\n          // Add custom protocol info\n          if (protocolInfo.tokensProps && protocolInfo.tokensProps[this.props.selectedToken]){\n            const tokenProps = protocolInfo.tokensProps[this.props.selectedToken];\n            Object.keys(tokenProps).forEach(p => {\n              protocolInfo[p] = tokenProps[p];\n            });\n          }\n\n          if (!protocolInfo.enabled || (protocolInfo.startTimestamp && this.functionsUtil.strToMoment(protocolInfo.startTimestamp).isAfter(Date.now()))){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          // prevApy = null;\n          prevApr = null;\n          prevData = null;\n          let baseProfit = 0;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n          avgApy = this.functionsUtil.BNify(0);\n          startBalance = this.functionsUtil.BNify(1);\n          currentBalance = this.functionsUtil.BNify(1);\n          const apiResults_filtered = apiResults.filter( d => (!protocolInfo.startTimestamp || moment(protocolInfo.startTimestamp).isSameOrBefore(moment(d.timestamp*1000))) );\n\n          apiResults_filtered.forEach( (d,i) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              let protocolRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n                if (protocolData[field]){\n                  return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(protocolData[field]));\n                }\n                return this.functionsUtil.BNify(acc);\n              },0) : this.functionsUtil.BNify(protocolData[rateField]);\n\n              // Aave V1 wrong rate FIX\n              if (protocolRate.lt(0) && protocolData.aaveAdditionalAPR && this.functionsUtil.BNify(protocolData.aaveAdditionalAPR).gt(0)){\n                protocolRate = protocolRate.plus(this.functionsUtil.BNify(protocolData.aaveAdditionalAPR));\n              }\n\n              const protocolPaused = protocolRate.eq(0);\n              if (!protocolPaused){\n\n                let rowData = {};\n\n                let y = 0;\n                let apy = 0;\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                const apr = this.functionsUtil.fixTokenDecimals(protocolRate,18).div(100);\n\n                avgApy = avgApy.plus(apr.times(100));\n                // const apy = this.functionsUtil.apr2apy(apr);\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null) {\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => (d1.blocknumber>=firstProtocolBlock) );\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                      y = baseProfit;\n                      apy = avgApy.toFixed(2);\n                    }\n                  }\n                }\n\n                itemIndex++;\n\n                if (prevData) {\n                  const days = (d.timestamp-prevData.timestamp)/86400;\n                  // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n                  const earnings = currentBalance.times(prevApr.times(days).div(365));\n                  currentBalance = currentBalance.plus(earnings);\n\n                  const earning = currentBalance.div(startBalance).minus(1).times(100);\n                  y = parseFloat(earning)+baseProfit;\n\n                  const daysSinceBeginning = Math.max(1,moment(d.timestamp*1000).diff(moment(idleChartData[0].x,\"YYYY/MM/DD HH:mm\"),'days'));\n                  apy = parseFloat(y*365/daysSinceBeginning).toFixed(2);\n                  // debugger;\n\n                  // apy = avgApy.div(itemIndex+1).toFixed(2);\n                  const itemPos = Math.floor(itemIndex/totalItems*100);\n                  rowData = {\n                    x,\n                    y,\n                    apy,\n                    itemPos\n                  };\n\n                  itemIndex++;\n                  chartRow.data.push(rowData);\n                }\n\n                prevData = d;\n                prevApr = apr;\n\n                if (firstIdleBlock === null){\n                  firstIdleBlock = parseInt(d.blocknumber);\n                }\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                // const blocknumber = d.blocknumber;\n\n              }\n            }\n          });\n          \n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n        chartData.push({\n          id:'Idle',\n          data: idleChartData,\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')'\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 12;\n        daysCount = moment(idleChartData[idleChartData.length-1].x,\"YYYY/MM/DD HH:mm\").diff(moment(idleChartData[0].x,\"YYYY/MM/DD HH:mm\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            tickValues:`every day`,\n            legendPosition: 'middle',\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              itemWidth: this.props.isMobile ? 70 : 160,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE':\n        // let prevTokenPrice = null;\n        maxChartValue = 0;\n        let firstTokenPrice = null;\n\n        idleChartData = apiResults.map((d,i) => {\n\n          let y = 0;\n          let apy = 0;\n          let days = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n          const tokenPrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n\n          if (!firstTokenPrice){\n            firstTokenPrice = tokenPrice;\n          } else {\n            y = parseFloat(tokenPrice.div(firstTokenPrice).minus(1).times(100));\n\n            days = (d.timestamp-apiResults[0].timestamp)/86400;\n            const earning = tokenPrice.div(firstTokenPrice).minus(1).times(100);\n            apy = earning.times(365).div(days).toFixed(2);\n\n            // console.log(firstTokenPrice.toString(),tokenPrice.toString(),earning.toString(),days,y,apy);\n          }\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          return { x, y, apy, blocknumber, itemPos };\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo && additionalProtocol.enabledTokens.includes(this.props.selectedToken)){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        await this.functionsUtil.asyncForEach(protocols,async (p) => {\n\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n\n          if (!protocolInfo.enabled){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          let baseProfit = 0;\n          firstTokenPrice = null;\n          let lastRowData = null;\n          let lastTokenPrice = null;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n\n          await this.functionsUtil.asyncForEach(apiResults,async (d) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData && protocolData[rateField]){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              const protocolPaused = this.functionsUtil.BNify(protocolData[rateField]).eq(0);\n              if (!protocolPaused){\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null){\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => {\n                      return d1.blocknumber>=firstProtocolBlock;\n                    });\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                    }\n                  }\n                }\n\n                let rowData = {};\n                let tokenExchangeRate = protocolData.price;\n                let tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n\n                // Take data from\n                if (protocolInfo && protocolInfo.data && protocolInfo.data[p.address.toLowerCase()] && protocolInfo.data[p.address.toLowerCase()][d.blocknumber]){\n                  tokenExchangeRate = this.functionsUtil.BNify(globalConfigs.stats.protocols[p.name].data[p.address.toLowerCase()][d.blocknumber]);\n                  tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                }/* else if (p.name === 'aave'){\n                  // Token holders (aDAI = 0xc025c03e10f656d3ee76685d53d236824d8ef3da , aUSDC = 0xd2c734fbd8f5d1c809185e014016dd4097e94711)\n                  let aaveTokenBalance = await this.functionsUtil.genericContractCall(p.token,'balanceOf',['0xd2c734fbd8f5d1c809185e014016dd4097e94711'],{},d.blocknumber);\n                  if (aaveTokenBalance){\n                    if (!Object.values(aave_data).length){\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(1,p.decimals);\n                      aave_data[d.blocknumber] = aaveTokenBalance.toString();\n                    } else {\n                      const firstBalance = Object.values(aave_data)[0];\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(this.functionsUtil.BNify(aaveTokenBalance).div(this.functionsUtil.BNify(firstBalance)).toFixed(p.decimals),p.decimals);\n                      aave_data[d.blocknumber] = tokenExchangeRate.toString();\n                    }\n                  }\n                }\n                */\n\n                let y = baseProfit;\n                let apy = 0;\n\n                if (!firstTokenPrice){\n                  firstTokenPrice = tokenPriceFixed;\n                } else {\n                  if (tokenPriceFixed.lt(lastTokenPrice)){\n                    firstTokenPrice = tokenPriceFixed;\n                    const lastYDiff = chartRow.data[chartRow.data.length-1].y-chartRow.data[chartRow.data.length-2].y;\n                    y = lastRowData.y+lastYDiff;\n                    baseProfit = y;\n                  } else {\n                    y += parseFloat(tokenPriceFixed.div(firstTokenPrice).minus(1).times(100));\n                  }\n\n                  const days = (d.timestamp-apiResults[0].timestamp)/86400;\n                  const earning = tokenPriceFixed.div(firstTokenPrice).minus(1).times(100);\n                  apy = earning.times(365).div(days).toFixed(2);\n                }\n\n                y = Math.max(0,y);\n                maxChartValue = Math.max(maxChartValue,y);\n\n                const itemPos = Math.floor(itemIndex/totalItems*100);\n\n                rowData = {\n                  x,\n                  y,\n                  apy,\n                  itemPos\n                };\n\n                itemIndex++;\n                lastRowData = rowData;\n                chartRow.data.push(rowData);\n                lastTokenPrice = tokenPriceFixed;\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: idleChartData\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              itemWidth: this.props.isMobile ? 70 : 100,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      default:\n      break;\n    }\n    this.setState({\n      chartType,\n      chartProps,\n      chartData\n    });\n  }\n\n  render() {\n    return(\n      <GenericChart\n        showLoader={true}\n        {...this.state.chartProps}\n        height={this.props.height}\n        type={this.state.chartType}\n        data={this.state.chartData}\n        width={this.state.chartWidth}\n        isMobile={this.props.isMobile}\n        parentId={this.props.parentId}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default StatsChart;","import { Flex, Text } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\n\nclass Rebalance extends Component {\n\n  state = {\n    loading:true,\n    processing:{\n      rebalance:{\n        txHash:null,\n        loading:false\n      },\n    },\n    shouldRebalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n  componentUnmounted = false;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillUnmount(){\n    this.componentUnmounted = true;\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.checkRebalance();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged || accountChanged){\n      this.checkRebalance();\n    }\n  }\n\n  async setStateSafe(newState,callback=null) {\n    if (!this.componentUnmounted){\n      return this.setState(newState,callback);\n    }\n    return null;\n  }\n\n  checkRebalance = async () => {\n    this.setStateSafe({\n      loading:true,\n    });\n\n    const shouldRebalance = await this.functionsUtil.checkRebalance(this.props.tokenConfig);\n\n    this.setStateSafe({\n      loading:false,\n      shouldRebalance\n    });\n  }\n\n  rebalance = async (e) => {\n    e.preventDefault();\n\n    const callback = (tx,error) => {\n\n      if (tx){\n        // Send Google Analytics event\n        const eventData = {\n          eventLabel: tx.status,\n          eventCategory: 'Rebalance',\n          eventAction: this.props.selectedToken,\n        };\n\n        let txDenied = false;\n\n        if (error){\n          eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n        }\n\n        // Send Google Analytics event\n        if (error || eventData.status !== 'error'){\n          this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n        }\n\n        if (tx.status === 'success'){\n          // Toast message\n          window.toastProvider.addMessage(`Rebalance completed`, {\n            secondaryMessage: `Now the pool is balanced!`,\n            colorTheme: 'light',\n            actionHref: \"\",\n            actionText: \"\",\n            variant: \"success\",\n          });\n        } else if (!txDenied){\n          window.toastProvider.addMessage(`Rebalance error`, {\n            secondaryMessage: `The rebalance has failed, try again...`,\n            colorTheme: 'light',\n            actionHref: \"\",\n            actionText: \"\",\n            variant: \"failure\",\n          });\n        }\n      }\n\n      this.setStateSafe((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          rebalance:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n\n      this.checkRebalance();\n    }\n\n    const callback_receipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setStateSafe((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            rebalance:{\n              ...prevState.processing.rebalance,\n              txHash\n            }\n          }\n        })\n      );\n    };\n\n    await this.setStateSafe({\n      processing:{\n        rebalance:{\n          txHash:null,\n          loading:true\n        }\n      }\n    });\n\n    this.props.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'rebalance', [], null , callback, callback_receipt);\n  }\n\n  render() {\n    return (\n      <Flex\n        px={3}\n        width={1}\n        minHeight={'100px'}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n      {\n        this.state.loading ? (\n          <FlexLoader\n            flexProps={{\n              flexDirection:'row'\n            }}\n            loaderProps={{\n              size:'30px'\n            }}\n            textProps={{\n              ml:2\n            }}\n            text={'Checking rebalance...'}\n          />\n        ) : (\n          this.state.processing.rebalance.loading ? (\n            <TxProgressBar {...this.props} waitText={`Rebalance estimated in`} endMessage={`Finalizing rebalance request...`} hash={this.state.processing.rebalance.txHash} />\n          ) : (\n            <Flex\n              width={1}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                mt={0}\n                mb={3}\n                textAlign={'center'}\n              >\n                {this.state.shouldRebalance ? 'Rebalance the entire pool. All users will bless you.' : 'The pool is already balanced.'}\n              </Text>\n              <RoundButton\n                buttonProps={{\n                  width:'auto',\n                  disabled:!this.state.shouldRebalance\n                }}\n                handleClick={e => this.rebalance(e)}\n              >\n                Rebalance\n              </RoundButton>\n            </Flex>\n          )\n        )\n      }\n      </Flex>\n    )\n  }\n}\n\nexport default Rebalance;","import React from \"react\";\nimport {\n  Modal,\n  Button,\n  Flex,\n  Field,\n  Select\n} from \"rimble-ui\";\nimport moment from 'moment';\nimport './DateRangeModal.css';\nimport ModalCard from './ModalCard';\nimport 'react-date-range/dist/styles.css';\nimport { DateRange } from 'react-date-range';\nimport 'react-date-range/dist/theme/default.css';\n\nclass DateRangeModal extends React.Component {\n\n  state = {\n    quickSelection:'',\n    ranges:{\n      startDate: this.props.startDate ? this.props.startDate : new Date(),\n      endDate: this.props.endDate ? this.props.endDate : new Date(),\n      key: 'selection'\n    },\n    options:Object.keys(this.props.quickSelections).map( value => ({ value,label:this.props.quickSelections[value].label }) )\n  }\n\n  handleSelect(ranges){\n    this.setState({\n      quickSelection:'',\n      ranges:ranges.selection\n    });\n  }\n\n  handleQuickSelect(e){\n    let startDate = null;\n    let endDate = moment(new Date());\n    const quickSelection = e.target.value;\n\n    if (quickSelection && this.props.quickSelections[quickSelection]){\n      const quickSelectionParams = this.props.quickSelections[quickSelection];\n      startDate = endDate.clone().subtract(quickSelectionParams.value,quickSelectionParams.type);\n    } else {\n      startDate = null;\n      endDate = null;\n    }\n\n    if (startDate && endDate){\n      startDate = startDate._d;\n      endDate = endDate._d;\n\n      const ranges = {\n        startDate,\n        endDate,\n        key:'selection'\n      };\n\n      this.setState({\n        ranges,\n        quickSelection\n      }, () => {\n        this.closeModal();\n      });\n    }\n  }\n\n  componentDidUpdate = (prevProps) => {\n    if (prevProps.startDate !== this.props.startDate || prevProps.endDate !== this.props.endDate){\n      this.setState({\n        ranges:{\n          startDate: this.props.startDate ? this.props.startDate : new Date(),\n          endDate: this.props.endDate ? this.props.endDate : new Date(),\n          key: 'selection'\n        }\n      });\n    }\n  }\n\n  closeModal(){\n    const newState = this.props.handleSelect(this.state.ranges,this.state.quickSelection);\n    const ranges = {\n      startDate:newState.startTimestampObj ? newState.startTimestampObj._d : new Date(),\n      endDate:newState.endTimestampObj ? newState.endTimestampObj._d : new Date(),\n      key: 'selection'\n    };\n    this.setState({\n      ranges\n    });\n    this.props.closeModal();\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        <ModalCard closeFunc={this.props.closeModal}>\n          <ModalCard.Header title={'Select Date Range'}>\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex width={1} flexDirection={'column'} alignItems={'center'}>\n              <Field label=\"Quick Date Selection\" style={{display:'flex',width:'100%',alignItems:'stretch',justifyContent:'center'}}>\n                <Select\n                  style={{\n                    fontSize:'14px',\n                    height:'2.5em',\n                    boxShadow:'none',\n                    color:this.props.theme.colors.counter,\n                    backgroundColor:this.props.theme.colors.cardBg\n                  }}\n                  width={'100%'}\n                  required={true}\n                  options={this.state.options}\n                  value={this.state.quickSelection}\n                  onChange={this.handleQuickSelect.bind(this)}\n                />\n              </Field>\n              <DateRange\n                ranges={[this.state.ranges]}\n                minDate={this.props.minDate}\n                maxDate={this.props.maxDate}\n                className={this.props.themeMode}\n                onChange={this.handleSelect.bind(this)}\n              />\n            </Flex>\n          </ModalCard.Body>\n          <ModalCard.Footer>\n            <Flex px={[2,0]} flexDirection={['column', 'row']} width={1} justifyContent={'center'}>\n              <Button\n                my={2}\n                mx={[0, 2]}\n                borderRadius={4}\n                mainColor={'blue'}\n                onClick={ e => this.closeModal(e) }\n                size={this.props.isMobile ? 'small' : 'medium'}\n              >\n              APPLY\n              </Button>\n            </Flex>\n          </ModalCard.Footer>\n        </ModalCard>\n      </Modal>\n    );\n  }\n\n}\n\nexport default DateRangeModal;","import moment from 'moment';\nimport StatsChart from '../Stats/StatsChart';\nimport React, { Component } from 'react';\nimport Rebalance from '../Rebalance/Rebalance';\nimport StatsCard from '../StatsCard/StatsCard';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport GenericSelector from '../GenericSelector/GenericSelector';\nimport RoundIconButton from '../RoundIconButton/RoundIconButton';\nimport VariationNumber from '../VariationNumber/VariationNumber';\nimport AllocationChart from '../AllocationChart/AllocationChart';\nimport DateRangeModal from '../utilities/components/DateRangeModal';\nimport { Flex, Text, Heading, Box, Icon } from 'rimble-ui';\nclass StatsAsset extends Component {\n\n    state = {\n        aum:null,\n        apr:null,\n        days:'-',\n        delta:null,\n        earning:null,\n        minDate:null,\n        maxDate:null,\n        carouselMax:1,\n        rebalances:'-',\n        buttonGroups:[],\n        apiResults:null,\n        carouselIndex:0,\n        idleVersion:null,\n        statsVersions:{},\n        minStartTime:null,\n        endTimestamp:null,\n        govTokensPool:null,\n        unlentBalance:null,\n        quickSelection:null,\n        startTimestamp:null,\n        endTimestampObj:null,\n        shouldRebalance:null,\n        carouselOffsetLeft:0,\n        startTimestampObj:null,\n        apiResults_unfiltered:null,\n        dateRangeModalOpened:false\n      };\n    \n      quickSelections = {\n        day:{\n          value:1,\n          type:'day',\n          label:'Last day',\n        },\n        week:{\n          value:1,\n          type:'week',\n          label:'Last week',\n        },\n        weeks:{\n          value:2,\n          type:'week',\n          label:'Last 2 weeks',\n        },\n        month:{\n          value:1,\n          type:'month',\n          label:'Last month',\n        },\n        ytd:{\n          type:'day',\n          label:'Year to date',\n          value:moment().diff(moment('01/01/YYYY','DD/MM/YYYY'),'days'),\n        },\n      };\n    \n      // Utils\n      functionsUtil = null;\n      componentUnmounted = null;\n      loadUtils(){\n        if (this.functionsUtil){\n          this.functionsUtil.setProps(this.props);\n        } else {\n          this.functionsUtil = new FunctionsUtil(this.props);\n        }\n      }\n    \n      async componentWillMount() {\n        this.loadUtils();\n        await this.loadParams();\n      }\n    \n      componentWillUnmount(){\n        this.componentUnmounted = true;\n      }\n    \n      async setStateSafe(newState,callback=null) {\n        if (!this.componentUnmounted){\n          return this.setState(newState,callback);\n        }\n        return null;\n      }\n    \n    \n      getLatestAvailableVersion(){\n        const statsVersions = globalConfigs.stats.versions;\n        let latestVersion = null;\n        Object.keys(statsVersions).forEach( version => {\n          const versionInfo = statsVersions[version];\n          if (versionInfo.enabledStrategies.includes(this.props.selectedStrategy)){\n            latestVersion = version;\n          }\n        });\n    \n        return latestVersion;\n      }\n    \n      getVersionInfo(version){\n        if (!version){\n          version = this.state.idleVersion;\n        }\n    \n        if (!globalConfigs.stats.versions[version]){\n          return null;\n        }\n    \n        const versionInfo = Object.assign({},globalConfigs.stats.versions[version]);\n    \n        if (versionInfo.strategiesParams && versionInfo.strategiesParams[this.props.selectedStrategy]){\n          const versionInfoExtra = versionInfo.strategiesParams[this.props.selectedStrategy];\n          Object.keys(versionInfoExtra).forEach( param => {\n            versionInfo[param] = versionInfoExtra[param];\n          });\n        }\n    \n        return versionInfo;\n      }\n    \n      async loadParams() {\n    \n        if (!this.props.selectedToken || !this.props.tokenConfig){\n          return false;\n        }\n    \n        const newState = {};\n        const { match: { params } } = this.props;\n    \n        const currentNetworkAvailableTokens = Object.keys(this.props.availableTokens);\n    \n        if (!!params.customToken && currentNetworkAvailableTokens.indexOf(params.customToken.toUpperCase()) !== -1 ){\n          newState.selectedToken = params.customToken.toUpperCase();\n        } else {\n          newState.selectedToken = this.props.selectedToken.toUpperCase();\n        }\n    \n        newState.tokenConfig = this.props.availableTokens[newState.selectedToken];\n        newState.minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp,'YYYY-MM-DD');\n        newState.maxEndDate = moment();\n    \n        newState.endTimestampObj = moment(moment().format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n    \n        newState.latestVersion = this.getLatestAvailableVersion();\n        newState.idleVersion = this.state.idleVersion === null ? newState.latestVersion : this.state.idleVersion;\n    \n        const versionInfo = this.getVersionInfo(newState.idleVersion);\n    \n        // console.log('loadParams',newState.latestVersion,newState.idleVersion,versionInfo);\n    \n        if (newState.idleVersion && versionInfo.endTimestamp){\n          const newEndTimestampObj = moment(moment(versionInfo.endTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n          if (newState.endTimestampObj.isAfter(newEndTimestampObj)){\n            newState.endTimestampObj = newEndTimestampObj;\n            newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n          }\n    \n          if (!newState.maxEndDate || newState.maxEndDate.isAfter(newEndTimestampObj)){\n            newState.maxEndDate = newEndTimestampObj;\n          }\n        }\n    \n        newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n    \n        // Set start date\n        newState.startTimestampObj = newState.endTimestampObj.clone().subtract(1,'month');\n        newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n    \n        if (newState.idleVersion && versionInfo.startTimestamp){\n          const newStartTimestampObj = moment(moment(versionInfo.startTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n          if (newState.startTimestampObj.isBefore(newStartTimestampObj)){\n            newState.startTimestampObj = newStartTimestampObj;\n            newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n          }\n    \n          if (newState.minStartTime.isBefore(newStartTimestampObj)){\n            newState.minStartTime = newStartTimestampObj;\n          }\n        }\n    \n        newState.minDate = newState.minStartTime._d;\n        newState.maxDate = newState.maxEndDate._d;\n    \n        if (newState !== this.state){\n          await this.setStateSafe(newState);\n        }\n      }\n    \n      setDateRange = (ranges,quickSelection=null) => {\n    \n        const minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp);\n    \n        let startTimestampObj = moment(ranges.startDate).isSameOrAfter(minStartTime) ? moment(ranges.startDate) : minStartTime;\n        let endTimestampObj = moment(ranges.endDate);\n    \n        if (startTimestampObj.isSame(endTimestampObj)){\n          endTimestampObj.add(1,'day');\n        }\n    \n        endTimestampObj = moment(endTimestampObj.format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n    \n        if (startTimestampObj.isBefore(this.state.minStartTime)){\n          startTimestampObj = this.state.minStartTime;\n        }\n    \n        if (endTimestampObj.isAfter(this.state.maxEndDate)){\n          endTimestampObj = this.state.maxEndDate;\n        }\n    \n        const startTimestamp = parseInt(startTimestampObj._d.getTime()/1000);\n        const endTimestamp = parseInt(endTimestampObj._d.getTime()/1000);\n    \n        const newState = {\n          minStartTime,\n          endTimestamp,\n          quickSelection,\n          startTimestamp,\n          endTimestampObj,\n          startTimestampObj\n        };\n    \n        this.setStateSafe(newState);\n    \n        return newState;\n      }\n      \n      setDateRangeModal = (dateRangeModalOpened) => {\n        if (dateRangeModalOpened !== this.state.dateRangeModalOpened){\n          this.setStateSafe({\n            dateRangeModalOpened\n          });\n        }\n      }\n    \n      async componentDidMount() {\n    \n        if (!this.props.web3){\n          this.props.initWeb3();\n          return false;\n        }\n    \n        /*\n        const style = document.createElement('style');\n        style.id = 'crisp-custom-style';\n        style.type = 'text/css';\n        style.innerHTML = `\n        .crisp-client{\n          display:none !important;\n        }`;\n        document.body.appendChild(style);\n        */\n    \n        this.loadUtils();\n        await this.loadParams();\n        this.loadApiData();\n        this.loadCarousel();\n      }\n    \n      loadCarousel(){\n        const carouselMax = this.props.isMobile ? 3 : 2;\n        this.setStateSafe({\n          carouselMax\n        });\n      }\n    \n      async componentDidUpdate(prevProps,prevState) {\n        const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n        const strategyChanged = prevProps.selectedStrategy !== this.props.selectedStrategy;\n        const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n        const dateChanged = prevState.startTimestamp !== this.state.startTimestamp || prevState.endTimestamp !== this.state.endTimestamp;\n        const versionChanged = prevState.idleVersion !== this.state.idleVersion;\n        const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n    \n        if (mobileChanged){\n          this.loadCarousel();\n        }\n    \n        if (contractsInitialized || tokenChanged || strategyChanged || versionChanged){\n          // console.log('componentDidUpdate',this.props.selectedStrategy,this.props.selectedToken);\n          await this.componentDidMount();\n        } else if (dateChanged){\n          this.loadApiData();\n        }\n      }\n    \n      filterTokenData = (apiResults) => {\n        return apiResults.filter((r,i) => {\n          return (!this.state.startTimestamp || r.timestamp >= this.state.startTimestamp) && (!this.state.endTimestamp || r.timestamp <= this.state.endTimestamp);\n        });\n      }\n    \n      setIdleVersion = idleVersion => {\n        this.setStateSafe({\n          idleVersion\n        });\n      }\n    \n      loadApiData = async () => {\n    \n        if (!this.props.selectedToken || !this.props.tokenConfig){\n          return false;\n        }\n    \n        // Get COMP APR\n        // const compAPR = await this.functionsUtil.getCompAPR(this.props.tokenConfig);\n        // console.log('compAPR',compAPR.toString());\n    \n        const startTimestamp = this.state.minDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.minDate).format('DD/MM/YYYY 00:00:00'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n        const endTimestamp = this.state.maxDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.maxDate).format('DD/MM/YYYY 23:59:59'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n    \n        const isRisk = ['v3','v4'].includes(this.state.idleVersion) && this.props.selectedStrategy === 'risk';\n        let apiResults_unfiltered = await this.functionsUtil.getTokenApiData(this.props.tokenConfig.address,isRisk,startTimestamp,endTimestamp,true,7200);\n    \n        const apiResults = this.filterTokenData(apiResults_unfiltered);\n    \n        // console.log('loadApiData',startTimestamp,endTimestamp,new Date(startTimestamp*1000),new Date(endTimestamp*1000),apiResults,apiResults_unfiltered);\n    \n        if (!apiResults || !apiResults_unfiltered || !apiResults.length || !apiResults_unfiltered.length){\n          return false;\n        }\n    \n        const firstResult = apiResults[0];\n        const lastResult = Object.values(apiResults).pop();\n    \n        window.moment = moment;\n    \n        let days = (lastResult.timestamp-firstResult.timestamp)/86400;\n        if (days === 0){\n          days = 1;\n        }\n    \n        let apr = null;\n        let delta = 'N/A';\n    \n        const idleTokens = this.functionsUtil.fixTokenDecimals(lastResult.idleSupply,18);\n        const firstIdlePrice = this.functionsUtil.fixTokenDecimals(firstResult.idlePrice,this.props.tokenConfig.decimals);\n        const lastIdlePrice = this.functionsUtil.fixTokenDecimals(lastResult.idlePrice,this.props.tokenConfig.decimals);\n    \n        // Calculate AUM\n        let aum = idleTokens.times(lastIdlePrice);\n    \n        // Convert Token balance\n        aum = await this.functionsUtil.convertTokenBalance(aum,this.props.selectedToken,this.props.tokenConfig,isRisk);\n    \n        const compoundInfo = this.props.tokenConfig.protocols.filter((p) => { return p.name === 'compound' })[0];\n        const firstCompoundData = compoundInfo ? firstResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n        const lastCompoundData = compoundInfo ? lastResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n    \n        if (this.state.idleVersion === 'v4') {\n    \n          apr = apiResults.reduce( (sum,r) => {\n            const idleRate = this.functionsUtil.fixTokenDecimals(r.idleRate,18);\n            return this.functionsUtil.BNify(sum).plus(idleRate);\n          },0);\n    \n          // Calculate average\n          apr = apr.div(apiResults.length);\n    \n          if (compoundInfo){\n            const compoundWithCOMPInfo = globalConfigs.stats.protocols.compoundWithCOMP;\n            const rateField = compoundWithCOMPInfo.rateField ? compoundWithCOMPInfo.rateField : 'rate';\n    \n            let compoundAvgApr = apiResults.reduce( (sum,r) => {\n    \n              const compoundData = r.protocolsData.find((pData,x) => {\n                return pData.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase()\n              });\n    \n              let compoundRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n                if (compoundData && compoundData[field]){\n                  return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(compoundData[field]));\n                }\n                return this.functionsUtil.BNify(acc);\n              },0) : this.functionsUtil.BNify(compoundData[rateField]);\n    \n              compoundRate = this.functionsUtil.fixTokenDecimals(compoundRate,18);\n    \n              return this.functionsUtil.BNify(sum).plus(compoundRate);\n            },0);\n    \n            // Calculate average\n            compoundAvgApr = compoundAvgApr.div(apiResults.length);\n    \n            // compoundAvgApr = this.functionsUtil.apr2apy(compoundAvgApr.div(100)).times(100);\n            // apr = this.functionsUtil.apr2apy(apr.div(100)).times(100);\n    \n            delta = apr.minus(compoundAvgApr);\n            if (parseFloat(delta)<0){\n              delta = 0\n            }\n            delta = delta.toFixed(2);\n          }\n    \n          apr = apr.toFixed(2);\n    \n        } else {\n          const earning = lastIdlePrice.div(firstIdlePrice).minus(1).times(100);\n          apr = earning.times(365).div(days).toFixed(2);\n    \n          if (firstCompoundData && lastCompoundData){\n            const firstCompoundPrice = this.functionsUtil.fixTokenDecimals(firstCompoundData.price,this.props.tokenConfig.decimals);\n            const lastCompoundPrice = this.functionsUtil.fixTokenDecimals(lastCompoundData.price,this.props.tokenConfig.decimals);\n            const compoundApr = lastCompoundPrice.div(firstCompoundPrice).minus(1).times(100);\n            delta = earning.minus(compoundApr).times(365).div(days);\n            if (parseFloat(delta)<0){\n              delta = 0\n            }\n            delta = delta.toFixed(2);\n          }\n        }\n    \n        // Count rebalances\n        let rebalances = 0;\n        apiResults.forEach((row,index) => {\n          if (index){\n            const prevRow = apiResults[index-1];\n    \n            const totalAllocation = row.protocolsData.reduce((accumulator,protocolAllocation) => {\n              const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n              return this.functionsUtil.BNify(accumulator).plus(allocation);\n            },0);\n    \n            const prevTotalAllocation = prevRow.protocolsData.reduce((accumulator,protocolAllocation) => {\n              const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n              return this.functionsUtil.BNify(accumulator).plus(allocation);\n            },0);\n    \n            let hasRebalanced = false;\n            row.protocolsData.forEach( p => {\n              if (hasRebalanced){\n                return;\n              }\n              const prevP = prevRow.protocolsData.find( prevP => (prevP.protocolAddr.toLowerCase() === p.protocolAddr.toLowerCase()) );\n              const allocation = this.functionsUtil.fixTokenDecimals(p.allocation,this.props.tokenConfig.decimals);\n              const prevAllocation = prevP ? this.functionsUtil.fixTokenDecimals(prevP.allocation,this.props.tokenConfig.decimals) : this.functionsUtil.BNify(0);\n              const allocationPerc = parseInt(parseFloat(allocation.div(totalAllocation).times(100)));\n              const prevAllocationPerc = parseInt(parseFloat(prevAllocation.div(prevTotalAllocation).times(100)));\n              if (allocationPerc!==prevAllocationPerc){\n                rebalances++;\n                hasRebalanced = true;\n              }\n            });\n          }\n        });\n    \n        // Add gov tokens balance to AUM\n        const availableTokens = {};\n        availableTokens[this.props.selectedToken] = this.props.tokenConfig;\n        const govTokensPool = await this.functionsUtil.getGovTokenPool(null,availableTokens,'DAI');\n        if (govTokensPool){\n          aum = aum.plus(govTokensPool);\n        }\n    \n        let unlentBalance = await this.functionsUtil.getUnlentBalance(this.props.tokenConfig);\n        if (unlentBalance){\n          unlentBalance = this.functionsUtil.formatMoney(parseFloat(unlentBalance));\n        }\n    \n        this.setStateSafe({\n          aum,\n          apr,\n          days,\n          delta,\n          apiResults,\n          rebalances,\n          govTokensPool,\n          unlentBalance,\n          apiResults_unfiltered\n        });\n      }\n    \n      selectToken = async (strategy,token) => {\n        await this.props.setStrategyToken(strategy,token);\n        this.props.changeToken(token);\n      }\n    \n      handleCarousel = action => {\n        let carouselIndex = this.state.carouselIndex;\n        if (action==='next' && carouselIndex<this.state.carouselMax){\n          carouselIndex++;\n        } else if (action==='back' && carouselIndex>0){\n          carouselIndex--;\n        }\n    \n        const $element = window.jQuery(`#carousel-cursor > div:eq(${carouselIndex})`);\n        const carouselOffsetLeft = -parseFloat($element.position().left)+'px';\n    \n        this.setStateSafe({\n          carouselIndex,\n          carouselOffsetLeft\n        });\n      }\n    \n\n    render() { \n      const statsTokens = this.functionsUtil.getGlobalConfig(['stats','tokens']);\n      const valueProps = {\n          lineHeight:1,\n          fontSize:[4,5],\n          fontWeight:[3,4],\n          color:'statValue'\n        };\n    \n        const unitProps = {\n          ml:2,\n          lineHeight:1,\n          fontWeight:[2,3],\n          color:'statValue',\n          fontSize:[3,'23px'],\n        };\n        const tokenConfig = statsTokens[this.props.selectedToken];\n        const versionsOptions = Object.keys(globalConfigs.stats.versions).filter( version => {\n            const versionInfo = this.getVersionInfo(version);\n            return versionInfo.enabledTokens.includes(this.props.selectedToken) && versionInfo.enabledStrategies.includes(this.props.selectedStrategy);\n        }).map( version => {\n            const versionInfo = this.getVersionInfo(version);\n            return {\n            value:version,\n            label:versionInfo.label\n            }\n        });\n    \n        // const disabledCharts = tokenConfig.disabledCharts || [];\n    \n        const versionInfo = this.getVersionInfo(this.state.idleVersion);\n        let performanceTooltip = null;\n        if (this.state.idleVersion && versionInfo){\n            const showPerformanceTooltip = this.functionsUtil.getGlobalConfig(['stats','versions',this.state.idleVersion,'showPerformanceTooltip']);\n            performanceTooltip = showPerformanceTooltip ? this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'performanceTooltip']) : null;\n        }\n        const versionDefaultValue = versionsOptions.find( v => (v.value === this.state.idleVersion) );\n    \n        return (\n            <Flex\n            p={0}\n            width={1}\n            flexDirection={'column'}\n            >\n            \n            <Box\n                mb={[3,4]}\n            >\n                <Flex\n                flexDirection={['column','row']}\n                >\n                <Flex\n                    width={[1,0.4]}\n                >\n                  <Breadcrumb\n                    {...this.props}\n                    showPathMobile={true}\n                    text={'ASSETS OVERVIEW'}\n                    isMobile={this.props.isMobile}\n                    handleClick={ e => this.props.goToSection('stats') }\n                    path={[this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])]}\n                  />\n                </Flex>\n                <Flex\n                    mt={[3,0]}\n                    width={[1,0.6]}\n                    flexDirection={['column','row']}\n                    justifyContent={['center','space-between']}\n                >\n                    <Flex\n                    width={[1,0.26]}\n                    flexDirection={'column'}\n                    >\n                    <GenericSelector\n                        innerProps={{\n                        p:1,\n                        height:['100%','46px'],\n                        }}\n                        name={'idle-version'}\n                        options={versionsOptions}\n                        defaultValue={versionDefaultValue}\n                        onChange={ v => this.setIdleVersion(v) }\n                    />\n                    </Flex>\n                    <Flex\n                    mt={[3,0]}\n                    width={[1,0.3]}\n                    flexDirection={'column'}\n                    >\n                    <AssetSelector\n                        innerProps={{\n                        p:1\n                        }}\n                        {...this.props}\n                    />\n                    </Flex>\n                    <Flex\n                    mt={[3,0]}\n                    width={[1,0.39]}\n                    flexDirection={'column'}\n                    >\n                    <DashboardCard\n                        cardProps={{\n                        p:1,\n                        display:'flex',\n                        alignItems:'center',\n                        height:['46px','100%'],\n                        justifyContent:'center'\n                        }}\n                        isInteractive={true}\n                        handleClick={ e => this.setDateRangeModal(true) }\n                    >\n                        <Text\n                        fontWeight={3}\n                        color={'copyColor'}\n                        >\n                        {\n                        this.state.quickSelection\n                        ?\n                            this.quickSelections[this.state.quickSelection].label\n                        : this.state.startTimestampObj && this.state.endTimestampObj &&\n                            `${this.state.startTimestampObj.format('DD/MM/YY')} - ${this.state.endTimestampObj.format('DD/MM/YY')}`\n                        }\n                        </Text>\n                    </DashboardCard>\n                    </Flex>\n                </Flex>\n                </Flex>\n            </Box>\n            {\n                !tokenConfig.enabled ? (\n                <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                >\n                    <DashboardCard\n                    cardProps={{\n                        p:3,\n                        width:[1,0.5],\n                    }}\n                    >\n                    <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                    >\n                        <Icon\n                        size={'2.3em'}\n                        color={'cellText'}\n                        name={'DoNotDisturb'}\n                        />\n                        <Text\n                        mt={2}\n                        fontSize={2}\n                        color={'cellText'}\n                        textAlign={'center'}\n                        >\n                        Stats for {this.props.selectedToken} are not available!\n                        </Text>\n                    </Flex>\n                    </DashboardCard>\n                </Flex>\n                ) : this.state.idleVersion && this.functionsUtil.strToMoment(versionInfo.startTimestamp).isAfter(Date.now()) ? (\n                <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                >\n                    <DashboardCard\n                    cardProps={{\n                        p:3,\n                        width:[1,0.5],\n                    }}\n                    >\n                    <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                    >\n                        <Icon\n                        size={'2.3em'}\n                        color={'cellText'}\n                        name={'AccessTime'}\n                        />\n                        <Text\n                        mt={2}\n                        fontSize={2}\n                        color={'cellText'}\n                        textAlign={'center'}\n                        >\n                        Idle Stats {this.state.idleVersion} will be available shortly!\n                        </Text>\n                    </Flex>\n                    </DashboardCard>\n                </Flex>\n                ) : this.functionsUtil.strToMoment(tokenConfig.startTimestamp).isAfter(Date.now()) ? (\n                <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                >\n                    <DashboardCard\n                    cardProps={{\n                        p:3,\n                        width:[1,0.5],\n                    }}\n                    >\n                    <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                    >\n                        <Icon\n                        size={'2.3em'}\n                        color={'cellText'}\n                        name={'AccessTime'}\n                        />\n                        <Text\n                        mt={2}\n                        fontSize={2}\n                        color={'cellText'}\n                        textAlign={'center'}\n                        >\n                        Stats for {this.props.selectedToken} will be available shortly!\n                        </Text>\n                    </Flex>\n                    </DashboardCard>\n                </Flex>\n                ) : (\n                <Box\n                    width={1}\n                >\n                    <Box\n                    mt={[3,0]}\n                    mb={[3,4]}\n                    >\n                    <Flex\n                        width={1}\n                        alignItems={'center'}\n                        justifyContent={'center'}\n                        flexDirection={['column','row']}\n                    >\n                        <Flex\n                        mb={[2,0]}\n                        pr={[0,2]}\n                        width={[1,1/4]}\n                        flexDirection={'column'}\n                        >\n                        <StatsCard\n                            title={'Asset Under Management'}\n                            label={ this.state.unlentBalance ? `Unlent funds: ${this.state.unlentBalance} ${this.props.selectedToken}` : this.props.selectedToken }\n                            labelTooltip={ this.state.unlentBalance ? this.functionsUtil.getGlobalConfig(['messages','cheapRedeem']) : null}\n                        >\n                            <SmartNumber\n                            precision={2}\n                            type={'money'}\n                            {...valueProps}\n                            unitProps={unitProps}\n                            number={this.state.aum}\n                            flexProps={{\n                                alignItems:'baseline',\n                                justifyContent:'flex-start'\n                            }}\n                            unit={this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'conversionRateField']) ? '$' : null}\n                            />\n                        </StatsCard>\n                        </Flex>\n                        <Flex\n                        mb={[2,0]}\n                        pr={[0,2]}\n                        width={[1,1/4]}\n                        flexDirection={'column'}\n                        >\n                        <StatsCard\n                            title={'Avg APY'}\n                            label={'Annualized'}\n                        >\n                            <Flex\n                            width={1}\n                            alignItems={'center'}\n                            flexDirection={['column','row']}\n                            >\n                            <VariationNumber\n                                direction={'up'}\n                                iconPos={'right'}\n                                iconSize={'1.8em'}\n                                justifyContent={'flex-start'}\n                                width={1}\n                                >\n                                <Text\n                                lineHeight={1}\n                                fontWeight={[3,4]}\n                                color={'statValue'}\n                                fontSize={[4,5]}\n                                >\n                                {this.state.apr}\n                                <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                                </Text>\n                            </VariationNumber>\n                            </Flex>\n                        </StatsCard>\n                        </Flex>\n                        <Flex\n                        mb={[2,0]}\n                        pr={[0,2]}\n                        width={[1,1/4]}\n                        flexDirection={'column'}\n                        >\n                        <StatsCard\n                            title={'Overperformance on Compound'}\n                            label={'Annualized'}\n                        >\n                            {\n                            this.state.delta && !isNaN(this.state.delta) ? (\n                                <VariationNumber\n                                direction={'up'}\n                                iconPos={'right'}\n                                iconSize={'1.8em'}\n                                justifyContent={'flex-start'}\n                                >\n                                <Text\n                                    lineHeight={1}\n                                    fontSize={[4,5]}\n                                    fontWeight={[3,4]}\n                                    color={'statValue'}\n                                >\n                                    {this.state.delta}\n                                    <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                                </Text>\n                                </VariationNumber>\n                            ) : (\n                                <Text\n                                lineHeight={1}\n                                fontSize={[4,5]}\n                                fontWeight={[3,4]}\n                                color={'statValue'}\n                                >\n                                {this.state.delta}\n                                </Text>\n                            )\n                            }\n                        </StatsCard>\n                        </Flex>\n                        <Flex\n                        mb={[2,0]}\n                        pr={[0,2]}\n                        width={[1,1/4]}\n                        flexDirection={'column'}\n                        >\n                        <StatsCard\n                            label={' '}\n                            title={'Rebalances'}\n                            value={this.state.rebalances.toString()}\n                        />\n                        </Flex>\n                        {\n                        /*\n                        <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                        <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                            <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                            <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Current APR</Text.span>\n                            <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                                {this.state.currApr}\n                                <Text.span color={'copyColor'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                            </Text>\n                            </Flex>\n                        </Card>\n                        </Flex>\n                        <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                        <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                            <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                            <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Days Live</Text.span>\n                            <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                                {this.state.days}\n                            </Text>\n                            </Flex>\n                        </Card>\n                        </Flex>\n                        */\n                        }\n                    </Flex>\n                    </Box>\n    \n                    <DashboardCard\n                    title={'Historical Performance'}\n                    description={performanceTooltip}\n                    cardProps={{\n                        mb:[3,4]\n                    }}\n                    >\n                    <Flex id='chart-PRICE' width={1} mb={3}>\n                        <StatsChart\n                        height={ 350 }\n                        {...this.state}\n                        parentId={'chart-PRICE'}\n                        theme={this.props.theme}\n                        isMobile={this.props.isMobile}\n                        contracts={this.props.contracts}\n                        themeMode={this.props.themeMode}\n                        apiResults={this.state.apiResults}\n                        idleVersion={this.state.idleVersion}\n                        selectedToken={this.props.selectedToken}\n                        apiResults_unfiltered={this.state.apiResults_unfiltered}\n                        chartMode={this.state.idleVersion === this.state.latestVersion ? 'PRICE_V4' : 'PRICE'}\n                        />\n                    </Flex>\n                    </DashboardCard>\n    \n                    <DashboardCard\n                    cardProps={{\n                        pb:3,\n                        mb:[3,4]\n                    }}\n                    >\n                    <Flex\n                        flexDirection={['column','row']}\n                        justifyContent={'space-between'}\n                    >\n                        {\n                        this.state.idleVersion === this.state.latestVersion && \n                        <Flex\n                            pt={2}\n                            width={[1,1/3]}\n                            id={'allocation-chart'}\n                            flexDirection={'column'}\n                            alignItems={'flex-start'}\n                            justifyContent={'flex-start'}\n                        >\n                            <AllocationChart\n                            height={310}\n                            {...this.props}\n                            parentId={'allocation-chart'}\n                            />\n                            <Rebalance\n                            {...this.props}\n                            />\n                        </Flex>\n                        }\n                        <Flex\n                        mb={[0,3]}\n                        id={'chart-ALL'}\n                        pl={[0,this.state.idleVersion === this.state.latestVersion ? 0 : 3]}\n                        width={[1, this.state.idleVersion === this.state.latestVersion ? 2/3 : 1]}\n                        >\n                        <Flex alignItems={'flex-start'} justifyContent={'flex-start'} flexDirection={'column'} width={1}>\n                            <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={[3,4]}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                            >\n                            Allocations over time\n                            </Heading.h4>\n                            <StatsChart\n                            height={350}\n                            {...this.state}\n                            chartMode={'ALL'}\n                            parentId={'chart-ALL'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                            />\n                        </Flex>\n                        </Flex>\n                    </Flex>\n                    </DashboardCard>\n    \n                    <Flex\n                    position={'relative'}\n                    >\n                    <Flex\n                        width={1}\n                        id={'carousel-container'}\n                        justifyContent={'flex-end'}\n                    >\n                        <RoundIconButton\n                        buttonProps={{\n                            mr:3\n                        }}\n                        iconName={'ArrowBack'}\n                        disabled={this.state.carouselIndex === 0}\n                        handleClick={ e => this.handleCarousel('back') }\n                        />\n                        <RoundIconButton\n                        iconName={'ArrowForward'}\n                        handleClick={ e => this.handleCarousel('next') }\n                        disabled={this.state.carouselIndex === this.state.carouselMax}\n                        />\n                    </Flex>\n                    <Flex\n                        mt={5}\n                        height={'400px'}\n                        position={'absolute'}\n                        id={'carousel-cursor'}\n                        width={['444%','200%']}\n                        justifyContent={'flex-start'}\n                        left={this.state.carouselOffsetLeft}\n                        style={{\n                        transition:'left 0.3s ease-in-out'\n                        }}\n                    >\n                        <DashboardCard\n                        cardProps={{\n                            mr:4,\n                            height:'fit-content',\n                            style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                        }}\n                        >\n                        <Flex\n                            width={1}\n                            id='chart-AUM'\n                        >\n                            <Flex\n                            mb={3}\n                            width={1}\n                            flexDirection={'column'}\n                            alignItems={'flex-start'}\n                            justifyContent={'center'}\n                            >\n                            <Heading.h4\n                                ml={3}\n                                mt={3}\n                                mb={2}\n                                fontWeight={4}\n                                fontSize={[2,3]}\n                                textAlign={'left'}\n                                color={'dark-gray'}\n                                lineHeight={'initial'}\n                            >\n                                Asset Under Management\n                            </Heading.h4>\n                            <StatsChart\n                                height={300}\n                                {...this.state}\n                                chartMode={'AUM'}\n                                parentId={'chart-AUM'}\n                                theme={this.props.theme}\n                                isMobile={this.props.isMobile}\n                                themeMode={this.props.themeMode}\n                                contracts={this.props.contracts}\n                                apiResults={this.state.apiResults}\n                                idleVersion={this.state.idleVersion}\n                                apiResults_unfiltered={this.state.apiResults_unfiltered}\n                            />\n                            </Flex>\n                        </Flex>\n                        </DashboardCard>\n                        <DashboardCard\n                        cardProps={{\n                            mr:4,\n                            height:'fit-content',\n                            style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                        }}\n                        >\n                        <Flex id='chart-APR' width={1}>\n                            <Flex\n                            mb={3}\n                            width={1}\n                            flexDirection={'column'}\n                            alignItems={'flex-start'}\n                            justifyContent={'center'}\n                            >\n                            <Heading.h4\n                                mb={2}\n                                ml={3}\n                                mt={3}\n                                fontWeight={4}\n                                fontSize={[2,3]}\n                                textAlign={'left'}\n                                color={'dark-gray'}\n                                lineHeight={'initial'}\n                            >\n                                APRs\n                            </Heading.h4>\n                            <StatsChart\n                                height={300}\n                                {...this.state}\n                                chartMode={'APR'}\n                                parentId={'chart-APR'}\n                                theme={this.props.theme}\n                                isMobile={this.props.isMobile}\n                                themeMode={this.props.themeMode}\n                                contracts={this.props.contracts}\n                                apiResults={this.state.apiResults}\n                                idleVersion={this.state.idleVersion}\n                                apiResults_unfiltered={this.state.apiResults_unfiltered}\n                            />\n                            </Flex>\n                        </Flex>\n                        </DashboardCard>\n                        {\n                        /*\n                        !disabledCharts.includes('score') &&\n                            <DashboardCard\n                            cardProps={{\n                                mr:4,\n                                height:'fit-content',\n                                style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                            }}\n                            title={'Risk Score'}\n                            description={'Idle Risk Score is a weighted average of the underlying protocols risks assessed by DeFi Score'}\n                            titleParentProps={{\n                                ml:16,\n                                mt:16\n                            }}\n                            >\n                            <Flex id='chart-SCORE' width={1}>\n                                <Flex\n                                mb={3}\n                                width={1}\n                                flexDirection={'column'}\n                                alignItems={'flex-start'}\n                                justifyContent={'center'}\n                                >\n                                <StatsChart\n                                    height={300}\n                                    {...this.state}\n                                    chartMode={'SCORE'}\n                                    parentId={'chart-SCORE'}\n                                    theme={this.props.theme}\n                                    isMobile={this.props.isMobile}\n                                    themeMode={this.props.themeMode}\n                                    contracts={this.props.contracts}\n                                    apiResults={this.state.apiResults}\n                                    idleVersion={this.state.idleVersion}\n                                    apiResults_unfiltered={this.state.apiResults_unfiltered}\n                                />\n                                </Flex>\n                            </Flex>\n                            </DashboardCard>\n                            */\n                        }\n                        <DashboardCard\n                        cardProps={{\n                            mr:4,\n                            height:'fit-content',\n                            style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                        }}\n                        >\n                        <Flex id='chart-VOL' width={1}>\n                            <Flex\n                            mb={3}\n                            width={1}\n                            flexDirection={'column'}\n                            alignItems={'flex-start'}\n                            justifyContent={'center'}\n                            >\n                            <Heading.h4\n                                mb={2}\n                                ml={3}\n                                mt={3}\n                                fontWeight={4}\n                                fontSize={[2,3]}\n                                textAlign={'left'}\n                                color={'dark-gray'}\n                                lineHeight={'initial'}\n                            >\n                                Volume\n                            </Heading.h4>\n                            <StatsChart\n                                height={300}\n                                {...this.state}\n                                chartMode={'VOL'}\n                                parentId={'chart-VOL'}\n                                theme={this.props.theme}\n                                isMobile={this.props.isMobile}\n                                themeMode={this.props.themeMode}\n                                contracts={this.props.contracts}\n                                apiResults={this.state.apiResults}\n                                idleVersion={this.state.idleVersion}\n                                apiResults_unfiltered={this.state.apiResults_unfiltered}\n                            />\n                            </Flex>\n                        </Flex>\n                        </DashboardCard>\n                    </Flex>\n                    </Flex>\n                </Box>\n                )\n            }\n            <DateRangeModal\n                {...this.props}\n                minDate={this.state.minDate}\n                maxDate={this.state.maxDate}\n                handleSelect={this.setDateRange}\n                quickSelections={this.quickSelections}\n                isOpen={this.state.dateRangeModalOpened}\n                closeModal={e => this.setDateRangeModal(false)}\n                startDate={this.state.startTimestampObj ? this.state.startTimestampObj._d : null}\n                endDate={this.state.endTimestampObj ? this.state.endTimestampObj._d : null}\n            />\n            </Flex>\n        );\n        }\n    \n}\nexport default StatsAsset","import { Flex } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericSelector from '../GenericSelector/GenericSelector';\n\nclass TrancheSelector extends Component {\n\n  state = {\n    options:null,\n    defaultValue:null,\n    CustomOptionValue:null,\n    CustomValueContainer:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async onChange(token){\n    let selectedProtocol;\n    Object.keys(this.props.availableTranches).map(protocol=> {\n        Object.keys(this.props.availableTranches[protocol]).map(t => {\n            if(token===t)\n            selectedProtocol=protocol;\n            return 0;\n            });\n            return 0;\n        });\n    await this.props.changeProtocolToken(selectedProtocol,token);\n  }\n  loadComponents(){\n    \n    let opt=[];\n    Object.keys(this.props.availableTranches).map(protocol => {\n        Object.keys(this.props.availableTranches[protocol]).map(t => {\n            const tokenConfig=this.props.availableTranches[protocol][t];\n            opt.push({\n                value:t,\n                label:t,\n                tokenConfig\n                });\n            return 0;\n            });\n            return 0;\n          });\n    const options=opt;\n    const defaultValue = this.props.selectedToken ? options.find(v => (v.value.toUpperCase() === this.props.selectedToken.toUpperCase())) : null;\n    const CustomOptionValue = props => {\n      const token = props.value;\n      const tokenConfig = props.data.tokenConfig;\n\n      return (\n        <Flex\n          width={1}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'space-between'}\n        >\n          <Flex\n            alignItems={'center'}\n          >\n            <AssetField\n              token={token}\n              tokenConfig={tokenConfig}\n              fieldInfo={{\n                name:'icon',\n                props:{\n                  mr:2,\n                  width:'2em',\n                  height:'2em'\n                }\n              }}\n            />\n            <AssetField\n              token={token}\n              fieldInfo={{\n                name:'tokenName',\n                props:{\n                  fontSize:[1,2],\n                  fontWeight:500,\n                  color:'copyColor'\n                }\n              }}\n            />\n          </Flex>\n        </Flex>\n      );\n    }\n\n    const CustomValueContainer = props => {\n      const options = props.selectProps.options;\n      const selectProps = options.indexOf(props.selectProps.value) !== -1 ? props.selectProps.value : defaultValue;\n\n      if (!selectProps){\n        return null;\n      }\n\n      const token = selectProps.value;\n      const tokenConfig = selectProps.tokenConfig;\n      return (\n        <Flex\n          style={{\n            flex:'1'\n          }}\n          justifyContent={'space-between'}\n          {...props.innerProps}\n        >\n          <Flex\n            p={0}\n            width={1}\n            {...props.innerProps}\n            alignItems={'center'}\n            flexDirection={'row'}\n            style={{cursor:'pointer'}}\n            justifyContent={'flex-start'}\n          >\n            <AssetField\n              token={token}\n              tokenConfig={tokenConfig}\n              fieldInfo={{\n                name:'icon',\n                props:{\n                  mr:2,\n                  height:'2em'\n                }\n              }}\n            />\n            <AssetField\n              token={token}\n              fieldInfo={{\n                name:'tokenName',\n                props:{\n                  fontSize:[1,2],\n                  fontWeight:500,\n                  color:'copyColor'\n                }\n              }}\n            />\n          </Flex>\n        </Flex>\n      );\n    }\n    this.setState({\n      options,\n      defaultValue,\n      CustomOptionValue,\n      CustomValueContainer\n    });\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.loadComponents();\n\n    this.setState({\n      props:this.props\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const selectedTokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    const availableTranchesChanged = JSON.stringify(Object.keys(prevProps.availableTranches)) !== JSON.stringify(Object.keys(this.props.availableTranches));\n    if (availableTranchesChanged || selectedTokenChanged){\n      this.loadComponents();\n    }\n  }\n\n  render() {\n    if (!this.state.options || !this.state.defaultValue || !this.state.CustomOptionValue || !this.state.CustomValueContainer || !this.props.availableTranches || !Object.keys(this.props.availableTranches).length){\n      return null;\n    }\n\n    return (\n      <GenericSelector\n        {...this.props}\n        name={'assets'}\n        options={this.state.options}\n        innerProps={this.props.innerProps}\n        isSearchable={this.props.isSearchable}\n        defaultValue={this.state.defaultValue}\n        selectedToken={this.props.selectedToken}\n        CustomOptionValue={this.state.CustomOptionValue}\n        CustomValueContainer={this.state.CustomValueContainer}\n        onChange={this.onChange.bind(this)}\n      />\n    );\n  }\n}\n\nexport default TrancheSelector;\n","import moment from 'moment';\nimport StatsChart from '../Stats/StatsChart';\nimport React, { Component } from 'react';\nimport StatsCard from '../StatsCard/StatsCard';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Text, Heading, Box, Icon  } from 'rimble-ui';\nimport RoundIconButton from '../RoundIconButton/RoundIconButton';\nimport VariationNumber from '../VariationNumber/VariationNumber';\nimport TrancheSelector from '../TrancheSelector/TrancheSelector';\nimport DateRangeModal from '../utilities/components/DateRangeModal';\n\nclass StatsTranche extends Component {\n  state = {\n    aum:null,\n    apr:null,\n    days:'-',\n    delta:null,\n    earning:null,\n    minDate:null,\n    maxDate:null,\n    carouselMax:1,\n    rebalances:'-',\n    buttonGroups:[],\n    apiResults:null,\n    carouselIndex:0,\n    idleVersion:null,\n    minStartTime:null,\n    endTimestamp:null,\n    apiResults_aa:null,\n    apiResults_bb:null,\n    govTokensPool:null,\n    unlentBalance:null,\n    quickSelection:null,\n    startTimestamp:null,\n    endTimestampObj:null,\n    shouldRebalance:null,\n    carouselOffsetLeft:0,\n    seniorTrancheApy:null,\n    juniorTrancheApy:null,\n    startTimestampObj:null,\n    dateRangeModalOpened:false,\n    apiResults_unfiltered:null,\n    seniorTrancheConverage:null,\n    apiResults_unfiltered_aa:null,\n    apiResults_unfiltered_bb:null,\n  };\n\n  quickSelections = {\n    day:{\n      value:1,\n      type:'day',\n      label:'Last day',\n    },\n    week:{\n      value:1,\n      type:'week',\n      label:'Last week',\n    },\n    weeks:{\n      value:2,\n      type:'week',\n      label:'Last 2 weeks',\n    },\n    month:{\n      value:1,\n      type:'month',\n      label:'Last month',\n    },\n    ytd:{\n      type:'day',\n      label:'Year to date',\n      value:moment().diff(moment('01/01/YYYY','DD/MM/YYYY'),'days'),\n    },\n  };\n\n  // Utils\n  functionsUtil = null;\n  componentUnmounted = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount() {\n    this.loadUtils();\n    await this.loadParams();\n    await this.loadApiData();\n  }\n  componentWillUnmount(){\n    this.componentUnmounted = true;\n  }\n\n  async setStateSafe(newState,callback=null) {\n    if (!this.componentUnmounted){\n      return this.setState(newState,callback);\n    }\n    return null;\n  }\n\n  selectTranche(trancheType){\n    // console.log('selectTranche',trancheType);\n    const trancheDetails = this.functionsUtil.getGlobalConfig(['tranches',trancheType]);\n    if (trancheDetails){\n      this.props.selectTrancheType(trancheDetails.route);\n    }\n  }\n   \n  async loadParams() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    const newState = {};\n    const { match: { params } } = this.props;\n\n    // console.log('loadParams',params,this.props);\n\n    const currentNetworkAvailableTokens = Object.keys(this.props.availableTokens);\n\n    if (!!params.customToken && currentNetworkAvailableTokens.indexOf(params.customToken.toUpperCase()) !== -1 ){\n      newState.selectedToken = params.customToken.toUpperCase();\n    } else {\n      newState.selectedToken = this.props.selectedToken.toUpperCase();\n    }\n\n    newState.tokenConfig = this.props.availableTokens[newState.selectedToken];\n    newState.minStartTime = moment('2021-12-01','YYYY-MM-DD');\n    newState.maxEndDate = moment();\n\n    newState.endTimestampObj = moment(moment().format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n\n    // Set start date\n    newState.startTimestampObj = newState.endTimestampObj.clone().subtract(1,'month');\n    newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n\n    newState.minDate = newState.minStartTime._d;\n    newState.maxDate = newState.maxEndDate._d;\n\n    if (newState !== this.state){\n      await this.setStateSafe(newState);\n    }\n  }\n\n  setDateRange = (ranges,quickSelection=null) => {\n\n    const minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp);\n\n    let startTimestampObj = moment(ranges.startDate).isSameOrAfter(minStartTime) ? moment(ranges.startDate) : minStartTime;\n    let endTimestampObj = moment(ranges.endDate);\n\n    if (startTimestampObj.isSame(endTimestampObj)){\n      endTimestampObj.add(1,'day');\n    }\n\n    endTimestampObj = moment(endTimestampObj.format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    if (startTimestampObj.isBefore(this.state.minStartTime)){\n      startTimestampObj = this.state.minStartTime;\n    }\n\n    if (endTimestampObj.isAfter(this.state.maxEndDate)){\n      endTimestampObj = this.state.maxEndDate;\n    }\n\n    const startTimestamp = parseInt(startTimestampObj._d.getTime()/1000);\n    const endTimestamp = parseInt(endTimestampObj._d.getTime()/1000);\n\n    const newState = {\n      minStartTime,\n      endTimestamp,\n      quickSelection,\n      startTimestamp,\n      endTimestampObj,\n      startTimestampObj\n    };\n\n    this.setStateSafe(newState);\n\n    return newState;\n  }\n  \n  setDateRangeModal = (dateRangeModalOpened) => {\n    if (dateRangeModalOpened !== this.state.dateRangeModalOpened){\n      this.setStateSafe({\n        dateRangeModalOpened\n      });\n    }\n  }\n\n  async componentDidMount() {\n\n    if (!this.props.web3){\n      this.props.initWeb3();\n      return false;\n    }\n\n    this.loadUtils();\n    await this.loadParams();\n    this.loadApiData();\n    this.loadCarousel();\n  }\n\n  loadCarousel(){\n    const carouselMax = this.props.isMobile ? 4 : 3;\n    this.setStateSafe({\n      carouselMax\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n\n    // console.log('componentDidUpdate',this.props.selectedStrategy,this.props.selectedProtocol,this.props.selectedToken,this.props.tokenConfig);\n\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const strategyChanged = prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const protocolChanged = prevProps.selectedProtocol !== this.props.selectedProtocol;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    const dateChanged = prevState.startTimestamp !== this.state.startTimestamp || prevState.endTimestamp !== this.state.endTimestamp;\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n\n    if (mobileChanged){\n      this.loadCarousel();\n    }\n\n    if (contractsInitialized || tokenChanged || strategyChanged || protocolChanged){\n      await this.componentDidMount();\n    } else if (dateChanged){\n      this.loadApiData();\n    }\n  }\n\n  filterTokenData = (apiResults) => {\n    return apiResults.filter((r,i) => {\n      return (!this.state.startTimestamp || r.timeStamp >= this.state.startTimestamp) && (!this.state.endTimestamp || r.timeStamp <= this.state.endTimestamp);\n    });\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.selectedToken || !this.props.selectedProtocol || !this.props.selectedStrategy || !this.props.tokenConfig){\n     \n      return false;\n    }\n\n    const startTimestamp = this.state.minDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.minDate).format('DD/MM/YYYY 00:00:00'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n    const endTimestamp = this.state.maxDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.maxDate).format('DD/MM/YYYY 23:59:59'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n\n    let apiResults_unfiltered_aa = await this.functionsUtil.getSubgraphTrancheInfo(this.props.tokenConfig.AA.address,startTimestamp,endTimestamp);\n    let apiResults_unfiltered_bb = await this.functionsUtil.getSubgraphTrancheInfo(this.props.tokenConfig.BB.address,startTimestamp,endTimestamp);\n\n    const apiResults_aa = this.filterTokenData(apiResults_unfiltered_aa);\n    const apiResults_bb = this.filterTokenData(apiResults_unfiltered_bb);\n    if (!apiResults_aa || !apiResults_unfiltered_aa || !apiResults_aa.length || !apiResults_unfiltered_aa.length || !apiResults_bb || !apiResults_unfiltered_bb || !apiResults_bb.length || !apiResults_unfiltered_bb.length){\n      return false;\n    }\n  \n    const firstResult_aa = Object.values(apiResults_aa)[0];\n    const firstResult_bb = Object.values(apiResults_bb)[0];\n    const lastResult_aa = Object.values(apiResults_aa).pop();\n    const lastResult_bb = Object.values(apiResults_bb).pop();\n\n    const aum_aa = this.functionsUtil.fixTokenDecimals(lastResult_aa.contractValue,this.props.tokenConfig.decimals);\n    const aum_bb = this.functionsUtil.fixTokenDecimals(lastResult_bb.contractValue,this.props.tokenConfig.decimals);\n    const aum = await this.functionsUtil.convertTrancheTokenBalance(aum_aa.plus(aum_bb),this.props.tokenConfig);\n\n    const firstAAPrice = this.functionsUtil.fixTokenDecimals(firstResult_aa.virtualPrice,this.props.tokenConfig.decimals);\n    const lastAAPrice = this.functionsUtil.fixTokenDecimals(lastResult_aa.virtualPrice,this.props.tokenConfig.decimals);\n    const seniorTrancheApy = lastAAPrice.div(firstAAPrice).minus(1).times(100).toFixed(2);\n\n    const firstBBPrice = this.functionsUtil.fixTokenDecimals(firstResult_bb.virtualPrice,this.props.tokenConfig.decimals);\n    const lastBBPrice = this.functionsUtil.fixTokenDecimals(lastResult_bb.virtualPrice,this.props.tokenConfig.decimals);\n    const juniorTrancheApy = lastBBPrice.div(firstBBPrice).minus(1).times(100).toFixed(2);\n\n    const seniorTrancheConverage = Math.min(aum_bb.div(aum_aa).times(100),100).toFixed(2);\n\n    /*\n    const firstResult = apiResults[0];\n    const lastResult = Object.values(apiResults).pop();\n\n    window.moment = moment;\n\n    let days = (lastResult.timestamp-firstResult.timestamp)/86400;\n    if (days === 0){\n      days = 1;\n    }\n\n    let apr = null;\n    let delta = 'N/A';\n\n    const idleTokens = this.functionsUtil.fixTokenDecimals(lastResult.idleSupply,18);\n    const firstIdlePrice = this.functionsUtil.fixTokenDecimals(firstResult.idlePrice,this.props.tokenConfig.decimals);\n    const lastIdlePrice = this.functionsUtil.fixTokenDecimals(lastResult.idlePrice,this.props.tokenConfig.decimals);\n\n    // Calculate AUM\n    \n\n    // Convert Token balance\n    aum = await this.functionsUtil.convertTokenBalance(aum,this.props.selectedToken,this.props.tokenConfig);\n\n    const compoundInfo = this.props.tokenConfig.protocols.filter((p) => { return p.name === 'compound' })[0];\n    const firstCompoundData = compoundInfo ? firstResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n    const lastCompoundData = compoundInfo ? lastResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n\n    apr = apiResults.reduce( (sum,r) => {\n      const idleRate = this.functionsUtil.fixTokenDecimals(r.idleRate,18);\n      return this.functionsUtil.BNify(sum).plus(idleRate);\n    },0);\n\n    // Calculate average\n    apr = apr.div(apiResults.length);\n    apr = apr.toFixed(2);\n\n    // Count rebalances\n    let rebalances = 0;\n    apiResults.forEach((row,index) => {\n      if (index){\n        const prevRow = apiResults[index-1];\n\n        const totalAllocation = row.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        const prevTotalAllocation = prevRow.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        let hasRebalanced = false;\n        row.protocolsData.forEach( p => {\n          if (hasRebalanced){\n            return;\n          }\n          const prevP = prevRow.protocolsData.find( prevP => (prevP.protocolAddr.toLowerCase() === p.protocolAddr.toLowerCase()) );\n          const allocation = this.functionsUtil.fixTokenDecimals(p.allocation,this.props.tokenConfig.decimals);\n          const prevAllocation = prevP ? this.functionsUtil.fixTokenDecimals(prevP.allocation,this.props.tokenConfig.decimals) : this.functionsUtil.BNify(0);\n          const allocationPerc = parseInt(parseFloat(allocation.div(totalAllocation).times(100)));\n          const prevAllocationPerc = parseInt(parseFloat(prevAllocation.div(prevTotalAllocation).times(100)));\n          if (allocationPerc!==prevAllocationPerc){\n            rebalances++;\n            hasRebalanced = true;\n          }\n        });\n      }\n    });\n\n    // Add gov tokens balance to AUM\n    const availableTokens = {};\n    availableTokens[this.props.selectedToken] = this.props.tokenConfig;\n    const govTokensPool = await this.functionsUtil.getGovTokenPool(null,availableTokens,'DAI');\n    if (govTokensPool){\n      aum = aum.plus(govTokensPool);\n    }\n\n    let unlentBalance = await this.functionsUtil.getUnlentBalance(this.props.tokenConfig);\n    if (unlentBalance){\n      unlentBalance = this.functionsUtil.formatMoney(parseFloat(unlentBalance));\n    }\n    */\n    this.setStateSafe({\n      // apr,\n      // days,\n      // delta,\n      // apiResults,\n      // rebalances,\n      // govTokensPool,\n      // unlentBalance,\n      aum,\n      apiResults_aa,\n      apiResults_bb,\n      seniorTrancheApy,\n      juniorTrancheApy,\n      seniorTrancheConverage,\n      apiResults_unfiltered_aa,\n      apiResults_unfiltered_bb\n    });\n  }\n\n  selectToken = async (strategy,token) => {\n    await this.props.setStrategyToken(strategy,token);\n    this.props.changeToken(token);\n  }\n\n  handleCarousel = action => {\n    let carouselIndex = this.state.carouselIndex;\n    if (action==='next' && carouselIndex<this.state.carouselMax){\n      carouselIndex++;\n    } else if (action==='back' && carouselIndex>0){\n      carouselIndex--;\n    }\n\n    const $element = window.jQuery(`#carousel-cursor > div:eq(${carouselIndex})`);\n    const carouselOffsetLeft = -parseFloat($element.position().left)+'px';\n\n    this.setStateSafe({\n      carouselIndex,\n      carouselOffsetLeft\n    });\n  }\n\n\nrender() {\n\n  const statsTokens = this.functionsUtil.getGlobalConfig(['stats','tokens']);\n  const valueProps = {\n    lineHeight:1,\n    fontSize:[4,5],\n    fontWeight:[3,4],\n    color:'statValue'\n  };\n\n  const unitProps = {\n    ml:2,\n    lineHeight:1,\n    fontWeight:[3,4],\n    color:'statValue',\n    fontSize:[3,5],\n  };\n\n  const tokenConfig = statsTokens[this.props.selectedToken.toUpperCase()];\n\n  const seniorTrancheName = this.functionsUtil.capitalize(this.functionsUtil.getGlobalConfig(['tranches','AA','baseName']));\n  const juniorTrancheName = this.functionsUtil.capitalize(this.functionsUtil.getGlobalConfig(['tranches','BB','baseName']));\n\n  // const disabledCharts = tokenConfig.disabledCharts || [];\n\n  let performanceTooltip = null;\n\n  return (\n      <Flex\n        p={0}\n        width={1}\n        flexDirection={'column'}\n      >\n        <Box\n          mb={[3,4]}\n        >\n          <Flex\n            flexDirection={['column','row']}\n          >\n            <Flex\n                width={[1,0.4]}\n            >\n              <Breadcrumb\n                {...this.props}\n                showPathMobile={true}\n                text={'ASSETS OVERVIEW'}\n                isMobile={this.props.isMobile}\n                handleClick={ e => this.props.goToSection('stats') }\n                path={[this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])]}\n              />\n            </Flex>\n\n            <Flex\n              mt={[3,0]}\n              width={[1,0.6]}\n              flexDirection={['column','row']}\n              justifyContent={['center','space-between']}\n            >\n              <Flex\n                width={[1,0.26]}\n                flexDirection={'column'}\n              >\n                {\n                  /*\n                  <GenericSelector\n                    innerProps={{\n                    p:1,\n                    height:['100%','46px'],\n                    }}\n                    name={'idle-version'}\n                    options={versionsOptions}\n                    defaultValue={versionDefaultValue}\n                    onChange={ v => this.setIdleVersion(v) }\n                  />\n                  */\n                }\n              </Flex>\n              <Flex\n                mt={[3,0]}\n                width={[1,0.3]}\n                flexDirection={'column'}\n              >\n                <TrancheSelector\n                  innerProps={{\n                    p:1\n                  }}\n                  {...this.props}\n                />\n              </Flex>\n              <Flex\n                mt={[3,0]}\n                width={[1,0.39]}\n                flexDirection={'column'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:1,\n                    display:'flex',\n                    alignItems:'center',\n                    height:['46px','100%'],\n                    justifyContent:'center'\n                    }}\n                    isInteractive={true}\n                    handleClick={ e => this.setDateRangeModal(true) }\n                  >\n                    <Text\n                      fontWeight={3}\n                      color={'copyColor'}\n                    >\n                      {\n                        this.state.quickSelection ?\n                          this.quickSelections[this.state.quickSelection].label\n                        : this.state.startTimestampObj && this.state.endTimestampObj &&\n                          `${this.state.startTimestampObj.format('DD/MM/YY')} - ${this.state.endTimestampObj.format('DD/MM/YY')}`\n                      }\n                    </Text>\n                </DashboardCard>\n              </Flex>\n            </Flex>\n            </Flex>\n        </Box>\n        {\n          (!tokenConfig || !tokenConfig.enabled) ? (\n            <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n            >\n              <DashboardCard\n                cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                }}\n                >\n                <Flex\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                >\n                  <Icon\n                    size={'2.3em'}\n                    color={'cellText'}\n                    name={'DoNotDisturb'}\n                  />\n                  <Text\n                    mt={2}\n                    fontSize={2}\n                    color={'cellText'}\n                    textAlign={'center'}\n                  >\n                    Stats for {this.props.selectedToken} are not available!\n                  </Text>\n                </Flex>\n              </DashboardCard>\n            </Flex>\n          ) : this.functionsUtil.strToMoment(tokenConfig.startTimestamp).isAfter(Date.now()) ? (\n            <Flex\n              width={1}\n              alignItems={'center'}\n              flexDirection={'row'}\n              justifyContent={'center'}\n            >\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  width:[1,0.5],\n                }}\n              >\n                <Flex\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                >\n                  <Icon\n                    size={'2.3em'}\n                    color={'cellText'}\n                    name={'AccessTime'}\n                  />\n                  <Text\n                    mt={2}\n                    fontSize={2}\n                    color={'cellText'}\n                    textAlign={'center'}\n                  >\n                    Stats for {this.props.selectedToken} will be available shortly!\n                  </Text>\n                </Flex>\n              </DashboardCard>\n            </Flex>\n            ) : (\n            <Box\n              width={1}\n            >\n              <Flex\n                width={1}\n                alignItems={'center'}\n                justifyContent={'flex-start'}\n                flexDirection={['column','row']}\n              >\n                <Flex\n                  mb={[2,4]}\n                  pr={[0,2]}\n                  width={[1,1/4]}\n                  flexDirection={'row'}\n                >\n                  <StatsCard\n                    title={'Asset Under Management'}\n                    label={`${seniorTrancheName} Tranche AUM + ${juniorTrancheName} Tranche AUM`}\n                  >\n                    <SmartNumber\n                      unit={'$'}\n                      precision={2}\n                      type={'money'}\n                      {...valueProps}\n                      unitProps={unitProps}\n                      number={this.state.aum}\n                      flexProps={{\n                        alignItems:'baseline',\n                        justifyContent:'flex-start'\n                      }}\n                    />\n                  </StatsCard>\n                </Flex>\n                <Flex\n                  mb={[2,4]}\n                  pr={[0,2]}\n                  width={[1,1/4]}\n                  flexDirection={'row'}\n                >\n                  <StatsCard\n                    label={'Annualized'}\n                    title={`Performance ${seniorTrancheName} Tranche`}\n                  >\n                    <VariationNumber\n                      direction={'up'}\n                      iconPos={'right'}\n                      iconSize={'1.8em'}\n                      justifyContent={'flex-start'}\n                      width={1}\n                    >\n                      <Text\n                        lineHeight={1}\n                        fontWeight={[3,4]}\n                        color={'statValue'}\n                        fontSize={[4,5]}\n                      >\n                        {this.state.seniorTrancheApy}\n                        <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                      </Text>\n                    </VariationNumber>\n                  </StatsCard>\n                </Flex>\n                <Flex\n                  mb={[2,4]}\n                  pr={[0,2]}\n                  width={[1,1/4]}\n                  flexDirection={'row'}\n                >\n                  <StatsCard\n                    label={'Annualized'}\n                    title={`Performance ${juniorTrancheName} Tranche`}\n                  >\n                    <VariationNumber\n                      direction={'up'}\n                      iconPos={'right'}\n                      iconSize={'1.8em'}\n                      justifyContent={'flex-start'}\n                      width={1}\n                    >\n                      <Text\n                        lineHeight={1}\n                        fontWeight={[3,4]}\n                        color={'statValue'}\n                        fontSize={[4,5]}\n                      >\n                        {this.state.juniorTrancheApy}\n                        <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                      </Text>\n                    </VariationNumber>\n                  </StatsCard>\n                </Flex>\n                <Flex\n                  mb={[2,4]}\n                  pr={[0,2]}\n                  width={[1,1/4]}\n                  flexDirection={'row'}\n                >\n                  <StatsCard\n                    title={`${seniorTrancheName} Tranche coverage`}\n                    label={`Covered by ${juniorTrancheName} Tranche AUM`}\n                  >\n                    <Text\n                      lineHeight={1}\n                      fontWeight={[3,4]}\n                      color={'statValue'}\n                      fontSize={[4,5]}\n                    >\n                      {this.state.seniorTrancheConverage}\n                      <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                    </Text>\n                  </StatsCard>\n                </Flex>\n              </Flex>\n              <DashboardCard\n                title={'Historical Performance'}\n                description={performanceTooltip}\n                cardProps={{\n                  mb:[3,4]\n                }}\n              >\n                <Flex\n                  mb={3}\n                  width={1}\n                  id={'chart-PRICE'}\n                >\n                  <StatsChart\n                    height={ 350 }\n                    {...this.state}\n                    parentId={'chart-PRICE'}\n                    theme={this.props.theme}\n                    chartMode={'PRICE_TRANCHE'}\n                    isMobile={this.props.isMobile}\n                    contracts={this.props.contracts}\n                    themeMode={this.props.themeMode}\n                    tokenConfig={this.props.tokenConfig}\n                    apiResults_aa={this.state.apiResults_aa}\n                    apiResults_bb={this.state.apiResults_bb}\n                    selectedToken={this.props.selectedToken}\n\n                  />\n                </Flex>\n              </DashboardCard>\n              <Flex\n                position={'relative'}\n              >\n                <Flex\n                  width={1}\n                  id={'carousel-container'}\n                  justifyContent={'flex-end'}\n                >\n                  <RoundIconButton\n                    buttonProps={{\n                      mr:3\n                    }}\n                    iconName={'ArrowBack'}\n                    disabled={this.state.carouselIndex === 0}\n                    handleClick={ e => this.handleCarousel('back') }\n                  />\n                  <RoundIconButton\n                    iconName={'ArrowForward'}\n                    handleClick={ e => this.handleCarousel('next') }\n                    disabled={this.state.carouselIndex === this.state.carouselMax}\n                  />\n                </Flex>\n                <Flex\n                  mt={5}\n                  height={'400px'}\n                  position={'absolute'}\n                  id={'carousel-cursor'}\n                  width={['555%','200%']}\n                  justifyContent={'flex-start'}\n                  left={this.state.carouselOffsetLeft}\n                  style={{\n                    transition:'left 0.3s ease-in-out'\n                  }}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      mr:4,\n                      height:'fit-content',\n                      style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                    }}\n                  >\n                    <Flex\n                      width={1}\n                      id={'chart-AUM'}\n                    >\n                      <Flex\n                        mb={3}\n                        width={1}\n                        flexDirection={'column'}\n                        alignItems={'flex-start'}\n                        justifyContent={'center'}\n                      >\n                        <Heading.h4\n                          ml={3}\n                          mt={3}\n                          mb={2}\n                          fontWeight={4}\n                          fontSize={[2,3]}\n                          textAlign={'left'}\n                          color={'dark-gray'}\n                          lineHeight={'initial'}\n                        >\n                          Asset Under Management\n                        </Heading.h4>\n                        <StatsChart\n                          height={300}\n                          {...this.state}\n                          parentId={'chart-AUM'}\n                          theme={this.props.theme}\n                          chartMode={'AUM_TRANCHE'}\n                          isMobile={this.props.isMobile}\n                          themeMode={this.props.themeMode}\n                          contracts={this.props.contracts}\n                          idleVersion={this.state.idleVersion}\n                          tokenConfig={this.props.tokenConfig}\n                          apiResults_aa={this.state.apiResults_aa}\n                          apiResults_bb={this.state.apiResults_bb}\n                          selectedToken={this.props.selectedToken}\n                        />\n                      </Flex>\n                    </Flex>\n                  </DashboardCard>\n                  <DashboardCard\n                    cardProps={{\n                      mr:4,\n                      height:'fit-content',\n                      style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                    }}\n                  >\n                    <Flex\n                      width={1}\n                      id={'chart-APR'}\n                    >\n                      <Flex\n                        mb={3}\n                        width={1}\n                        flexDirection={'column'}\n                        alignItems={'flex-start'}\n                        justifyContent={'center'}\n                      >\n                        <Heading.h4\n                          mb={2}\n                          ml={3}\n                          mt={3}\n                          fontWeight={4}\n                          fontSize={[2,3]}\n                          textAlign={'left'}\n                          color={'dark-gray'}\n                          lineHeight={'initial'}\n                        >\n                          APRs\n                        </Heading.h4>\n                        <StatsChart\n                          height={300}\n                          {...this.state}\n                          parentId={'chart-APR'}\n                          theme={this.props.theme}\n                          chartMode={'APR_TRANCHE'}\n                          isMobile={this.props.isMobile}\n                          themeMode={this.props.themeMode}\n                          contracts={this.props.contracts}\n                          idleVersion={this.state.idleVersion}\n                          tokenConfig={this.props.tokenConfig}\n                          apiResults_aa={this.state.apiResults_aa}\n                          apiResults_bb={this.state.apiResults_bb}\n                          apiResults_unfiltered_aa={this.state.apiResults_unfiltered_aa}\n                          apiResults_unfiltered_bb={this.state.apiResults_unfiltered_bb}\n                        />\n                      </Flex>\n                    </Flex>\n                  </DashboardCard>\n                  <DashboardCard\n                    cardProps={{\n                      mr:4,\n                      height:'fit-content',\n                      style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                    }}\n                  >\n                    <Flex\n                      width={1}\n                      id={'chart-VOL'}\n                    >\n                      <Flex\n                        mb={3}\n                        width={1}\n                        flexDirection={'column'}\n                        alignItems={'flex-start'}\n                        justifyContent={'center'}\n                      >\n                        <Heading.h4\n                          mb={2}\n                          ml={3}\n                          mt={3}\n                          fontWeight={4}\n                          fontSize={[2,3]}\n                          textAlign={'left'}\n                          color={'dark-gray'}\n                          lineHeight={'initial'}\n                        >\n                          {seniorTrancheName} Tranche Coverage\n                        </Heading.h4>\n                        <StatsChart\n                          height={300}\n                          {...this.state}\n                          parentId={'chart-VOL'}\n                          theme={this.props.theme}\n                          chartMode={'COVERAGE_TRANCHE'}\n                          isMobile={this.props.isMobile}\n                          themeMode={this.props.themeMode}\n                          contracts={this.props.contracts}\n                          apiResults_aa={this.state.apiResults_aa}\n                          apiResults_bb={this.state.apiResults_bb}\n                          idleVersion={this.state.idleVersion}\n                          tokenConfig={this.props.tokenConfig}\n                          apiResults_unfiltered_aa={this.state.apiResults_unfiltered_aa}\n                          apiResults_unfiltered_bb={this.state.apiResults_unfiltered_bb}\n                        />\n                      </Flex>\n                    </Flex>\n                  </DashboardCard>\n                  <DashboardCard\n                    cardProps={{\n                      mr:4,\n                      height:'fit-content',\n                      style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                    }}\n                  >\n                    <Flex\n                      width={1}\n                      id={'chart-VOL-AA'}\n                    >\n                      <Flex\n                        mb={3}\n                        width={1}\n                        flexDirection={'column'}\n                        alignItems={'flex-start'}\n                        justifyContent={'center'}\n                      >\n                        <Heading.h4\n                          mb={2}\n                          ml={3}\n                          mt={3}\n                          fontWeight={4}\n                          fontSize={[2,3]}\n                          textAlign={'left'}\n                          color={'dark-gray'}\n                          lineHeight={'initial'}\n                        >\n                          Volume {seniorTrancheName} Tranche\n                        </Heading.h4>\n                        <StatsChart\n                          height={300}\n                          {...this.state}\n                          theme={this.props.theme}\n                          parentId={'chart-VOL-AA'}\n                          chartMode={'VOL_TRANCHE'}\n                          isMobile={this.props.isMobile}\n                          themeMode={this.props.themeMode}\n                          contracts={this.props.contracts}\n                          apiResults={this.state.apiResults_aa}\n                          idleVersion={this.state.idleVersion}\n                          tokenConfig={this.props.tokenConfig}\n                          apiResults_unfiltered={this.state.apiResults_unfiltered_aa}\n                        />\n                      </Flex>\n                    </Flex>\n                  </DashboardCard>\n                  <DashboardCard\n                    cardProps={{\n                      mr:4,\n                      height:'fit-content',\n                      style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                    }}\n                  >\n                    <Flex\n                      width={1}\n                      id={'chart-VOL-BB'}\n                    >\n                      <Flex\n                        mb={3}\n                        width={1}\n                        flexDirection={'column'}\n                        alignItems={'flex-start'}\n                        justifyContent={'center'}\n                      >\n                        <Heading.h4\n                          mb={2}\n                          ml={3}\n                          mt={3}\n                          fontWeight={4}\n                          fontSize={[2,3]}\n                          textAlign={'left'}\n                          color={'dark-gray'}\n                          lineHeight={'initial'}\n                        >\n                           Volume {juniorTrancheName} Tranche\n                        </Heading.h4>\n                        <StatsChart\n                          height={300}\n                          {...this.state}\n                          theme={this.props.theme}\n                          chartMode={'VOL_TRANCHE'}\n                          parentId={'chart-VOL-BB'}\n                          isMobile={this.props.isMobile}\n                          themeMode={this.props.themeMode}\n                          contracts={this.props.contracts}\n                          apiResults={this.state.apiResults_bb}\n                          idleVersion={this.state.idleVersion}\n                          tokenConfig={this.props.tokenConfig}\n                          apiResults_unfiltered={this.state.apiResults_unfiltered_bb}\n                        />\n                      </Flex>\n                    </Flex>\n                  </DashboardCard>\n                </Flex>\n              </Flex>\n            </Box>\n          )\n        }\n        <DateRangeModal\n          {...this.props}\n          minDate={this.state.minDate}\n          maxDate={this.state.maxDate}\n          handleSelect={this.setDateRange}\n          quickSelections={this.quickSelections}\n          isOpen={this.state.dateRangeModalOpened}\n          closeModal={e => this.setDateRangeModal(false)}\n          startDate={this.state.startTimestampObj ? this.state.startTimestampObj._d : null}\n          endDate={this.state.endTimestampObj ? this.state.endTimestampObj._d : null}\n        />\n        </Flex>\n    );\n  }\n}\nexport default StatsTranche","import moment from 'moment';\nimport Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport AssetsList from '../AssetsList/AssetsList';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport StatsAsset from '../StatsAsset/StatsAsset';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TranchesList from \"../TranchesList/TranchesList\";\nimport StatsTranche from '../StatsTranche/StatsTranche';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Text, Box, Icon, Button, Link } from 'rimble-ui';\nimport ExecuteTransaction from '../ExecuteTransaction/ExecuteTransaction';\nimport AssetsUnderManagement from '../AssetsUnderManagement/AssetsUnderManagement';\n\nclass Stats extends Component {\n  state = {\n    aum:null,\n    apr:null,\n    days:'-',\n    delta:null,\n    earning:null,\n    minDate:null,\n    maxDate:null,\n    carouselMax:1,\n    rebalances:'-',\n    buttonGroups:[],\n    apiResults:null,\n    carouselIndex:0,\n    idleVersion:null,\n    statsVersions:{},\n    minStartTime:null,\n    endTimestamp:null,\n    showAdvanced:true,\n    govTokensPool:null,\n    unlentBalance:null,\n    quickSelection:null,\n    startTimestamp:null,\n    endTimestampObj:null,\n    shouldRebalance:null,\n    carouselOffsetLeft:0,\n    startTimestampObj:null,\n    showRefreshIdleSpeed:false,\n    dateRangeModalOpened:false,\n    apiResults_unfiltered:null\n  };\n\n  quickSelections = {\n    day:{\n      value:1,\n      type:'day',\n      label:'Last day',\n    },\n    week:{\n      value:1,\n      type:'week',\n      label:'Last week',\n    },\n    weeks:{\n      value:2,\n      type:'week',\n      label:'Last 2 weeks',\n    },\n    month:{\n      value:1,\n      type:'month',\n      label:'Last month',\n    },\n    ytd:{\n      type:'day',\n      label:'Year to date',\n      value:moment().diff(moment('01/01/YYYY','DD/MM/YYYY'),'days'),\n    },\n  };\n\n  // Utils\n  functionsUtil = null;\n  componentUnmounted = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount() {\n    this.loadUtils();\n    await this.loadParams();\n  }\n\n  componentWillUnmount(){\n    this.componentUnmounted = true;\n  }\n\n  async setStateSafe(newState,callback=null) {\n    if (!this.componentUnmounted){\n      return this.setState(newState,callback);\n    }\n    return null;\n  }\n\n  showRefreshIdleSpeed(){\n    this.setStateSafe({\n      showRefreshIdleSpeed:true\n    });\n  }\n\n  getLatestAvailableVersion(){\n    const statsVersions = globalConfigs.stats.versions;\n    let latestVersion = null;\n    Object.keys(statsVersions).forEach( version => {\n      const versionInfo = statsVersions[version];\n      if (versionInfo.enabledStrategies.includes(this.props.selectedStrategy)){\n        latestVersion = version;\n      }\n    });\n\n    return latestVersion;\n  }\n\n  getVersionInfo(version){\n    if (!version){\n      version = this.state.idleVersion;\n    }\n\n    if (!globalConfigs.stats.versions[version]){\n      return null;\n    }\n\n    const versionInfo = Object.assign({},globalConfigs.stats.versions[version]);\n\n    if (versionInfo.strategiesParams && versionInfo.strategiesParams[this.props.selectedStrategy]){\n      const versionInfoExtra = versionInfo.strategiesParams[this.props.selectedStrategy];\n      Object.keys(versionInfoExtra).forEach( param => {\n        versionInfo[param] = versionInfoExtra[param];\n      });\n    }\n\n    return versionInfo;\n  }\n\n  async loadParams() {\n\n    if (!this.props.selectedToken){\n      return false;\n    }\n\n    const newState = {};\n    const { match: { params } } = this.props;\n\n    const currentNetworkAvailableTokens = Object.keys(this.props.availableTokens);\n\n    if(this.props.selectedStrategy==='tranches') {\n      newState.selectedToken=this.props.selectedToken\n    } else if (!!params.customToken && currentNetworkAvailableTokens.indexOf(params.customToken.toUpperCase()) !== -1 ){\n      newState.selectedToken = params.customToken.toUpperCase();\n    } else {\n      newState.selectedToken = this.props.selectedToken.toUpperCase();\n    }\n\n    newState.tokenConfig = this.props.availableTokens[newState.selectedToken];\n    newState.minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken.toUpperCase()].startTimestamp,'YYYY-MM-DD');\n    newState.maxEndDate = moment();\n\n    newState.endTimestampObj = moment(moment().format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    newState.latestVersion = this.getLatestAvailableVersion();\n    newState.idleVersion = this.state.idleVersion === null ? newState.latestVersion : this.state.idleVersion;\n\n    const versionInfo = this.getVersionInfo(newState.idleVersion);\n\n    // console.log('loadParams',newState.latestVersion,newState.idleVersion,versionInfo);\n\n    if (newState.idleVersion && versionInfo.endTimestamp){\n      const newEndTimestampObj = moment(moment(versionInfo.endTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.endTimestampObj.isAfter(newEndTimestampObj)){\n        newState.endTimestampObj = newEndTimestampObj;\n        newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n      }\n\n      if (!newState.maxEndDate || newState.maxEndDate.isAfter(newEndTimestampObj)){\n        newState.maxEndDate = newEndTimestampObj;\n      }\n    }\n\n    newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n\n    // Set start date\n    newState.startTimestampObj = newState.endTimestampObj.clone().subtract(1,'month');\n    newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n\n    if (newState.idleVersion && versionInfo.startTimestamp){\n      const newStartTimestampObj = moment(moment(versionInfo.startTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.startTimestampObj.isBefore(newStartTimestampObj)){\n        newState.startTimestampObj = newStartTimestampObj;\n        newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n      }\n\n      if (newState.minStartTime.isBefore(newStartTimestampObj)){\n        newState.minStartTime = newStartTimestampObj;\n      }\n    }\n    newState.minDate = newState.minStartTime._d;\n    newState.maxDate = newState.maxEndDate._d;\n\n    if (newState !== this.state){\n      await this.setStateSafe(newState);\n    }\n  }\n\n  setDateRange = (ranges,quickSelection=null) => {\n\n    const minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken.toUpperCase()].startTimestamp);\n\n    let startTimestampObj = moment(ranges.startDate).isSameOrAfter(minStartTime) ? moment(ranges.startDate) : minStartTime;\n    let endTimestampObj = moment(ranges.endDate);\n\n    if (startTimestampObj.isSame(endTimestampObj)){\n      endTimestampObj.add(1,'day');\n    }\n\n    endTimestampObj = moment(endTimestampObj.format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    if (startTimestampObj.isBefore(this.state.minStartTime)){\n      startTimestampObj = this.state.minStartTime;\n    }\n\n    if (endTimestampObj.isAfter(this.state.maxEndDate)){\n      endTimestampObj = this.state.maxEndDate;\n    }\n\n    const startTimestamp = parseInt(startTimestampObj._d.getTime()/1000);\n    const endTimestamp = parseInt(endTimestampObj._d.getTime()/1000);\n\n    const newState = {\n      minStartTime,\n      endTimestamp,\n      quickSelection,\n      startTimestamp,\n      endTimestampObj,\n      startTimestampObj\n    };\n\n    this.setStateSafe(newState);\n\n    return newState;\n  }\n\n  toggleAdvancedCharts = (e) => {\n    e.preventDefault();\n    this.setStateSafe({\n      showAdvanced:!this.state.showAdvanced\n    });\n  }\n\n  setDateRangeModal = (dateRangeModalOpened) => {\n    if (dateRangeModalOpened !== this.state.dateRangeModalOpened){\n      this.setStateSafe({\n        dateRangeModalOpened\n      });\n    }\n  }\n\n  async componentDidMount() {\n\n    if (!this.props.web3){\n      this.props.initWeb3();\n      return false;\n    }\n\n    /*\n    const style = document.createElement('style');\n    style.id = 'crisp-custom-style';\n    style.type = 'text/css';\n    style.innerHTML = `\n    .crisp-client{\n      display:none !important;\n    }`;\n    document.body.appendChild(style);\n    */\n\n    this.loadUtils();\n    await this.loadParams();\n    this.loadApiData();\n    this.loadCarousel();\n  }\n\n  loadCarousel(){\n    const carouselMax = this.props.isMobile ? 3 : 2;\n    this.setStateSafe({\n      carouselMax\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const strategyChanged = prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    const dateChanged = prevState.startTimestamp !== this.state.startTimestamp || prevState.endTimestamp !== this.state.endTimestamp;\n    const versionChanged = prevState.idleVersion !== this.state.idleVersion;\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n\n    if (mobileChanged){\n      this.loadCarousel();\n    }\n\n    if (contractsInitialized || tokenChanged || strategyChanged || versionChanged){\n      // console.log('componentDidUpdate',this.props.selectedStrategy,this.props.selectedToken);\n      await this.componentDidMount();\n    } else if (dateChanged){\n      this.loadApiData();\n    }\n  }\n\n  filterTokenData = (apiResults) => {\n    return apiResults.filter((r,i) => {\n      return (!this.state.startTimestamp || r.timestamp >= this.state.startTimestamp) && (!this.state.endTimestamp || r.timestamp <= this.state.endTimestamp);\n    });\n  }\n\n  setIdleVersion = idleVersion => {\n    this.setStateSafe({\n      idleVersion\n    });\n  }\n\n  loadApiData = async () => {\n\n    /*\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    const startTimestamp = this.state.minDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.minDate).format('DD/MM/YYYY 00:00:00'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n    const endTimestamp = this.state.maxDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.maxDate).format('DD/MM/YYYY 23:59:59'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n\n    const isRisk = ['v3','v4'].includes(this.state.idleVersion) && this.props.selectedStrategy === 'risk';\n    let apiResults_unfiltered = await this.functionsUtil.getTokenApiData(this.props.tokenConfig.address,isRisk,startTimestamp,endTimestamp,true,7200);\n\n    const apiResults = this.filterTokenData(apiResults_unfiltered);\n\n    // console.log('loadApiData',startTimestamp,endTimestamp,new Date(startTimestamp*1000),new Date(endTimestamp*1000),apiResults,apiResults_unfiltered);\n\n    if (!apiResults || !apiResults_unfiltered || !apiResults.length || !apiResults_unfiltered.length){\n      return false;\n    }\n\n    const firstResult = apiResults[0];\n    const lastResult = Object.values(apiResults).pop();\n\n    window.moment = moment;\n\n    let days = (lastResult.timestamp-firstResult.timestamp)/86400;\n    if (days === 0){\n      days = 1;\n    }\n\n    let apr = null;\n    let delta = 'N/A';\n\n    const idleTokens = this.functionsUtil.fixTokenDecimals(lastResult.idleSupply,18);\n    const firstIdlePrice = this.functionsUtil.fixTokenDecimals(firstResult.idlePrice,this.props.tokenConfig.decimals);\n    const lastIdlePrice = this.functionsUtil.fixTokenDecimals(lastResult.idlePrice,this.props.tokenConfig.decimals);\n\n    // Calculate AUM\n    let aum = idleTokens.times(lastIdlePrice);\n\n    // Convert Token balance\n    aum = await this.functionsUtil.convertTokenBalance(aum,this.props.selectedToken,this.props.tokenConfig,isRisk);\n\n    const compoundInfo = this.props.tokenConfig.protocols.filter((p) => { return p.name === 'compound' })[0];\n    const firstCompoundData = compoundInfo ? firstResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n    const lastCompoundData = compoundInfo ? lastResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n\n    if (this.state.idleVersion === 'v4') {\n\n      apr = apiResults.reduce( (sum,r) => {\n        const idleRate = this.functionsUtil.fixTokenDecimals(r.idleRate,18);\n        return this.functionsUtil.BNify(sum).plus(idleRate);\n      },0);\n\n      // Calculate average\n      apr = apr.div(apiResults.length);\n\n      if (compoundInfo){\n        const compoundWithCOMPInfo = globalConfigs.stats.protocols.compoundWithCOMP;\n        const rateField = compoundWithCOMPInfo.rateField ? compoundWithCOMPInfo.rateField : 'rate';\n\n        let compoundAvgApr = apiResults.reduce( (sum,r) => {\n\n          const compoundData = r.protocolsData.find((pData,x) => {\n            return pData.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase()\n          });\n\n          let compoundRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n            if (compoundData && compoundData[field]){\n              return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(compoundData[field]));\n            }\n            return this.functionsUtil.BNify(acc);\n          },0) : this.functionsUtil.BNify(compoundData[rateField]);\n\n          compoundRate = this.functionsUtil.fixTokenDecimals(compoundRate,18);\n\n          return this.functionsUtil.BNify(sum).plus(compoundRate);\n        },0);\n\n        // Calculate average\n        compoundAvgApr = compoundAvgApr.div(apiResults.length);\n\n        // compoundAvgApr = this.functionsUtil.apr2apy(compoundAvgApr.div(100)).times(100);\n        // apr = this.functionsUtil.apr2apy(apr.div(100)).times(100);\n\n        delta = apr.minus(compoundAvgApr);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n\n      apr = apr.toFixed(2);\n\n    } else {\n      const earning = lastIdlePrice.div(firstIdlePrice).minus(1).times(100);\n      apr = earning.times(365).div(days).toFixed(2);\n\n      if (firstCompoundData && lastCompoundData){\n        const firstCompoundPrice = this.functionsUtil.fixTokenDecimals(firstCompoundData.price,this.props.tokenConfig.decimals);\n        const lastCompoundPrice = this.functionsUtil.fixTokenDecimals(lastCompoundData.price,this.props.tokenConfig.decimals);\n        const compoundApr = lastCompoundPrice.div(firstCompoundPrice).minus(1).times(100);\n        delta = earning.minus(compoundApr).times(365).div(days);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n    }\n\n    // Count rebalances\n    let rebalances = 0;\n    apiResults.forEach((row,index) => {\n      if (index){\n        const prevRow = apiResults[index-1];\n\n        const totalAllocation = row.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        const prevTotalAllocation = prevRow.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        let hasRebalanced = false;\n        row.protocolsData.forEach( p => {\n          if (hasRebalanced){\n            return;\n          }\n          const prevP = prevRow.protocolsData.find( prevP => (prevP.protocolAddr.toLowerCase() === p.protocolAddr.toLowerCase()) );\n          const allocation = this.functionsUtil.fixTokenDecimals(p.allocation,this.props.tokenConfig.decimals);\n          const prevAllocation = prevP ? this.functionsUtil.fixTokenDecimals(prevP.allocation,this.props.tokenConfig.decimals) : this.functionsUtil.BNify(0);\n          const allocationPerc = parseInt(parseFloat(allocation.div(totalAllocation).times(100)));\n          const prevAllocationPerc = parseInt(parseFloat(prevAllocation.div(prevTotalAllocation).times(100)));\n          if (allocationPerc!==prevAllocationPerc){\n            rebalances++;\n            hasRebalanced = true;\n          }\n        });\n      }\n    });\n\n    // Add gov tokens balance to AUM\n    const availableTokens = {};\n    availableTokens[this.props.selectedToken] = this.props.tokenConfig;\n    const govTokensPool = await this.functionsUtil.getGovTokenPool(null,availableTokens,'DAI');\n    if (govTokensPool){\n      aum = aum.plus(govTokensPool);\n    }\n\n    let unlentBalance = await this.functionsUtil.getUnlentBalance(this.props.tokenConfig);\n    if (unlentBalance){\n      unlentBalance = this.functionsUtil.formatMoney(parseFloat(unlentBalance));\n    }\n\n    this.setStateSafe({\n      aum,\n      apr,\n      days,\n      delta,\n      apiResults,\n      rebalances,\n      govTokensPool,\n      unlentBalance,\n      apiResults_unfiltered\n    });\n    */\n  }\n\n  selectToken = async (strategy,token) => {\n    await this.props.setStrategyToken(strategy,token);\n    this.props.changeToken(token);\n\n  }\n  selectTranche = async (strategy,protocol,token) => {\n    await this.props.setStrategyToken(strategy,token,protocol);\n    this.props.changeProtocolToken(protocol,token);\n  }\n\n  handleCarousel = action => {\n    let carouselIndex = this.state.carouselIndex;\n    if (action==='next' && carouselIndex<this.state.carouselMax){\n      carouselIndex++;\n    } else if (action==='back' && carouselIndex>0){\n      carouselIndex--;\n    }\n\n    const $element = window.jQuery(`#carousel-cursor > div:eq(${carouselIndex})`);\n    const carouselOffsetLeft = -parseFloat($element.position().left)+'px';\n\n    this.setStateSafe({\n      carouselIndex,\n      carouselOffsetLeft\n    });\n  }\n\n  render() {\n\n    const networkId = this.functionsUtil.getRequiredNetworkId();\n    const idleTokenAvailableNetworks = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','availableNetworks']);\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']) && idleTokenAvailableNetworks.includes(networkId);\n\n    const tranchesConfig = this.functionsUtil.getGlobalConfig(['strategies','tranches']);\n    const tranchesEnabled = tranchesConfig.availableNetworks.includes(networkId);\n    \n    const refreshIdleSpeedConfig = this.functionsUtil.getGlobalConfig(['contract','methods','refreshIdleSpeed']);\n    const refreshIdleSpeedEnabled = refreshIdleSpeedConfig.enabled && refreshIdleSpeedConfig.availableNetworks.includes(networkId);\n\n    const apyLong = this.functionsUtil.getGlobalConfig(['messages','apyLong']);\n\n    if (!this.props.availableStrategies){\n      return (\n        <FlexLoader\n          textProps={{\n            textSize:4,\n            fontWeight:2\n          }}\n          loaderProps={{\n            mb:3,\n            size:'40px'\n          }}\n          flexProps={{\n            minHeight:'50vh',\n            flexDirection:'column'\n          }}\n          text={'Loading assets...'}\n        />\n      );\n    }\n\n    const statsTokens = this.functionsUtil.getGlobalConfig(['stats','tokens']);\n\n    if (!this.props.selectedToken){\n      const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n      const enabledTokens = [];\n      const statsProtocols = this.functionsUtil.getGlobalConfig(['stats','protocols']);\n\n      Object.keys(statsTokens).forEach(token => {\n        const tokenInfo = statsTokens[token];\n        if (tokenInfo.enabled){\n          enabledTokens.push(token);\n        }\n      });\n      return (\n        <Flex\n          mb={3}\n          width={1}\n          flexDirection={'column'}\n        >\n          <AssetsUnderManagement\n            {...this.props}\n            loaderAlign={'flex-end'}\n          />\n          {\n            Object.keys(strategies).map(strategy => \n             \n              {\n                if(strategy==='risk')\n                return false;\n\n                const strategyInfo = strategies[strategy];\n                const availableTokens = this.props.availableStrategies[strategy];\n\n                if (!availableTokens || !Object.keys(availableTokens).length){\n                  return false;\n                }\n                \n                // Get available protocols name\n                const availableProtocolsKeys = [];\n                Object.keys(availableTokens).forEach( token => {\n                  availableTokens[token].protocols.forEach( protocolInfo => {\n                    if (availableProtocolsKeys.indexOf(protocolInfo.name)<0){\n                      availableProtocolsKeys.push(protocolInfo.name);\n                    }\n                  });\n                });\n\n                const availableProtocols = availableProtocolsKeys.map( protocolName => {\n                  return statsProtocols[protocolName];\n                },{});\n\n                return (\n                  <Box\n                    mb={2}\n                    width={1}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                    key={`strategy-container-${strategy}`}\n                  >\n                    <Title\n                      mt={3}\n                      mb={[3,4]}\n                    >\n                      <Flex\n                        flexDirection={'row'}\n                        alignItems={'baseline'}\n                        justifyContent={'center'}\n                      >\n                        {strategyInfo.title}\n                        {\n                          strategyInfo.titlePostfix &&\n                            <Text\n                              ml={2}\n                              fontWeight={3}\n                              fontSize={[2,4]}\n                              color={'dark-gray'}\n                            >\n                              {strategyInfo.titlePostfix}\n                            </Text>\n                        }\n                      </Flex>\n                    </Title>\n                    <AssetsList\n                      enabledTokens={enabledTokens}\n                      handleClick={(props) => this.selectToken(strategy,props.token)}\n                      cols={[\n                        {\n                          title:'CURRENCY',\n                          props:{\n                            width:[0.26,0.15]\n                          },\n                          fields:[\n                            {\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:['1.4em','2.3em']\n                              }\n                            },\n                            {\n                              name:'tokenName'\n                            }\n                          ]\n                        },\n                        {\n                          title:'POOL',\n                          props:{\n                            width:[0.20,0.14],\n                          },\n                          fields:[\n                            {\n                              name:'allocationChart',\n                              mobile:false,\n                              parentProps:{\n                                width:0.3\n                              },\n                              style:{\n                                overflow:'visible'\n                              },\n                              showLoader:false,\n                            },\n                            {\n                              name:'pool',\n                              props:{\n                                ml:1\n                              },\n                              parentProps:{\n                                width:[1,0.7]\n                              }\n                            }\n                          ]\n                        },\n                        {\n                          title:'APY',\n                          desc:apyLong,\n                          props:{\n                            width: [0.29,0.15],\n                          },\n                          parentProps:{\n                            flexDirection:'column',\n                            alignItems:'flex-start',\n                            justifyContent:networkId === 1 ? 'flex-start' : 'center',\n                          },\n                          fields:[\n                            {\n                              name:'apy',\n                              showTooltip:true\n                            },\n                            networkId === 1 ? {\n                              name:'idleDistribution',\n                              showLoader:false,\n                              props:{\n                                decimals:this.props.isMobile ? 1 : 2,\n                                fontSize:this.props.isMobile ? '9px' : 0\n                              }\n                            } : null,\n                          ]\n                        },\n                        {\n                          title:'FARMING',\n                          desc:this.functionsUtil.getGlobalConfig(['messages','yieldFarming']),\n                          mobile:false,\n                          props:{\n                            width:[0.27,0.14],\n                          },\n                          fields:[\n                            {\n                              name:'govTokens'\n                            }\n                          ]\n                        },\n                        {\n                          title:'APR LAST WEEK',\n                          mobile:false,\n                          props:{\n                            width: 0.25,\n                          },\n                          parentProps:{\n                            width:1,\n                            pr:[2,4]\n                          },\n                          fields:[\n                            {\n                              name:'aprChart',\n                              style:{\n                                overflow:'visible',\n                              },\n                            }\n                          ]\n                        },\n                        {\n                          title:'',\n                          props:{\n                            width:[0.29,0.15],\n                          },\n                          parentProps:{\n                            width:1\n                          },\n                          fields:[\n                            {\n                              name:'button',\n                              label:this.props.isMobile ? 'View' : 'View stats',\n                              props:{\n                                width:1,\n                                fontSize:3,\n                                fontWeight:3,\n                                height:'45px',\n                                borderRadius:4,\n                                boxShadow:null,\n                                mainColor:'redeem',\n                                size: this.props.isMobile ? 'small' : 'medium',\n                                handleClick:(props) => this.selectToken(strategy,props.token)\n\n\n\n                              }\n                            }\n                          ]\n                        }\n                      ]}\n                      {...this.props}\n                      selectedStrategy={strategy}\n                      availableTokens={availableTokens}\n                    />\n                    {\n                      !this.props.isMobile &&\n                        <Flex\n                          mt={2}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                          justifyContent={'flex-end'}\n                        >\n                          {\n                            availableProtocols.filter( p => p.legend ).map( (p,index) => (\n                              <Flex\n                                mr={3}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                key={`legend_${index}`}\n                              >\n                                <Box\n                                  mr={1}\n                                  width={'10px'}\n                                  height={'10px'}\n                                  borderRadius={'50%'}\n                                  backgroundColor={`rgb(${p.color.rgb.join(',')})`}\n                                >\n                                </Box>\n                                <Text.span\n                                  fontSize={1}\n                                  color={'cellText'}\n                                >\n                                  {p.label}\n                                </Text.span>\n                              </Flex>\n                            ))\n                          }\n                        </Flex>\n                    }\n                  </Box>\n                );\n              }\n            )\n          }\n\n          {\n            tranchesEnabled && (\n              <Box\n                width={1}\n              >\n                <Title mb={[3,4]}>Tranches</Title>\n                <TranchesList\n                    enabledProtocols={[]}\n                    availableTranches={this.props.availableTranches}\n                    handleClick={(props) => this.selectTranche('tranches',props.protocol,props.token)}\n                    cols={[\n                      {\n                        title:'PROTOCOL',\n                        props:{\n                          width:[0.25, 0.14]\n                        },\n                        fields:[\n                          {\n                            name:'protocolIcon',\n                            props:{\n                              mr:2,\n                              height:['1.4em','2em']\n                            }\n                          },\n                          {\n                            name:'protocolName'\n                          },\n                          {\n                            mobile:false,\n                            name:'experimentalBadge',\n                            props:{\n                              ml:1,\n                              height:'1.5em'\n                            }\n                          }\n                        ]\n                      },\n                      {\n                        title:'TOKEN',\n                        props:{\n                          width:[0.25, 0.14],\n                        },\n                        fields:[\n                          {\n                            name:'tokenIcon',\n                            props:{\n                              mr:2,\n                              height:['1.4em','2em']\n                            }\n                          },\n                          {\n                            mobile:false,\n                            name:'tokenName'\n                          }\n                        ]\n                      },\n\n                      /*\n                      {\n                        title:'TYPE',\n                        props:{\n                          width:[0.29,0.13],\n                        },\n                        fields:[\n                          {\n                            name:'trancheTypeIcon',\n                            props:{\n                              flexProps:{\n                                mr:2\n                              },\n                              size:'1.4em'\n                            }\n                          },\n                          {\n                            name:'trancheType'\n                          }\n                        ],\n                        visible:this.state.useTrancheType\n                      },\n                      */\n                      {\n                        title:'POOL',\n                        props:{\n                          width:[0.25, 0.14],\n                        },\n                        fields:[\n                          {\n                            name:'pool',\n                            props:{\n                              minPrecision:1,\n                              decimals:this.props.isMobile ? 0 : 2,\n                            }\n                          }\n                        ]\n                      },\n                      {\n                        title:'SENIOR APY',\n                        props:{\n                          width:[0.28, 0.14],\n                        },\n                        parentProps:{\n                          flexDirection:'column',\n                          alignItems:'flex-start',\n                        },\n                        fields:[\n                          {\n                            name:'seniorApy',\n                            showTooltip:true\n                          },\n                        ],\n                      },\n                      {\n                        title:'JUNIOR APY',\n                        props:{\n                          width:[0.28, 0.14],\n                        },\n                        parentProps:{\n                          flexDirection:'column',\n                          alignItems:'flex-start',\n                        },\n                        fields:[\n                          {\n                            name:'juniorApy',\n                            props:{\n                              flexProps:{\n                                mr:3\n                              }\n                            },\n                            showTooltip:true\n                          },\n                        ],\n                      },\n                      {\n                        mobile:false,\n                        title:'APR RATIO',\n                        props:{\n                          width:[0.24, 0.13],\n                        },\n                        fields:[\n                          {\n                            name:'trancheAPRSplitRatio',\n                            props:{\n                              flexProps:{\n                                mr:2\n                              },\n                              height:['1.4em','2em']\n                            }\n                          },\n\n                        ]\n                      },\n                        /*\n                      {\n                        mobile:false,\n                        title:'AUTO-FARMING',\n                        props:{\n                          width:[0.25,this.state.useTrancheType ? 0.14 : 0.14],\n                        },\n                        fields:[\n                          {\n                            name:'autoFarming'\n                          }\n                        ]\n                      },\n                */\n                        /*\n                      {\n                        mobile:false,\n                        title:'STAKING REWARDS',\n                        props:{\n                          width:[0.25,this.state.useTrancheType ? 0.15 : 0.13],\n                        },\n                        fields:[\n                          {\n                            name:'stakingRewards'\n                          }\n                        ]\n                      },\n                      /*\n                      {\n                        mobile:true,\n                        title:'TOKENS',\n                        props:{\n                          width:[0.16,0.17],\n                        },\n                        fields:[\n                          {\n                            name:'govTokens'\n                          }\n                        ]\n                      },\n                      */\n\n                      {\n                        title:'',\n                        mobile:false,\n                        props:{\n                          width:[0.29, 0.15],\n                        },\n                        parentProps:{\n                          width:1\n                        },\n                        fields:[\n                          {\n                            name:'button',\n                            label: 'View Stats',\n                            props:{\n                              width:1,\n                              fontSize:3,\n                              fontWeight:3,\n                              height:'45px',\n                              borderRadius:4,\n                              boxShadow:null,\n                              mainColor:'redeem',\n                              size: this.props.isMobile ? 'small' : 'medium',\n                              handleClick:(props) => this.selectTranche('tranches',props.protocol,props.token)\n                            }\n                          }\n                        ]\n                      }\n\n                    ]}\n                    {...this.props}\n                />\n              </Box>\n            )\n          }\n\n          {\n            idleTokenEnabled && refreshIdleSpeedEnabled && !this.state.showRefreshIdleSpeed ? (\n              <Flex\n                mb={4}\n                width={1}\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <Link\n                  hoverColor={'primary'}\n                  onClick={this.showRefreshIdleSpeed.bind(this)}\n                >\n                  Refresh Idle Speed\n                </Link>\n              </Flex>\n            ) : idleTokenEnabled && refreshIdleSpeedEnabled && this.state.showRefreshIdleSpeed &&\n              <DashboardCard\n                cardProps={{\n                  p:2,\n                  mb:4,\n                  width:1,\n                  mt:[2,3],\n                }}\n                isActive={true}\n                isInteractive={false}\n              >\n                <Flex\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                >\n                  <Text\n                    fontWeight={500}\n                    color={'flashColor'}\n                    textAlign={'center'}\n                    fontSize={[1,'15px']}\n                  >\n                    By executing this transaction you can adjust the IDLE distribution speed among the pools.\n                  </Text>\n                  <ExecuteTransaction\n                    action={'Refresh'}\n                    Component={Button}\n                    parentProps={{\n                      mt:1\n                    }}\n                    componentProps={{\n                      size:'small',\n                      mainColor:'blue',\n                      value:'REFRESH IDLE SPEED'\n                    }}\n                    params={[]}\n                    contractName={'IdleController'}\n                    methodName={'refreshIdleSpeeds'}\n                    {...this.props}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'center'}\n                      justifyContent={'center'}\n                    >\n                      <Icon\n                        mr={1}\n                        name={'Done'}\n                        size={'1.4em'}\n                        color={this.props.theme.colors.transactions.status.completed}\n                      />\n                      <Text\n                        fontWeight={500}\n                        fontSize={'15px'}\n                        color={'copyColor'}\n                        textAlign={'center'}\n                      >\n                        Idle Speed Refreshed\n                      </Text>\n                    </Flex>\n                  </ExecuteTransaction>\n                </Flex>\n              </DashboardCard>\n          }\n        </Flex>\n      );\n    } else {\n      return this.props.selectedStrategy==='best' ? (\n         <StatsAsset\n           {...this.props}\n         />\n      ) : this.props.selectedStrategy==='tranches' && (\n        <StatsTranche\n           {...this.props}\n         />\n      )\n    }\n  }\n}\n\nexport default Stats;","import Title from '../Title/Title';\nimport IconBox from '../IconBox/IconBox';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport { Flex, Icon, Text, Box, Image } from \"rimble-ui\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass Utils extends Component {\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    const SubComponent = this.props.selectedSubsection && this.props.selectedSubsection.subComponent ? this.props.selectedSubsection.subComponent : null;\n    const viewOnly = this.props.connectorName === 'custom';\n    const showBreadCrumb = typeof this.props.showBreadCrumb !== 'undefined' ? this.props.showBreadCrumb : true;\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.props.selectedSubsection ? (\n            <Box\n              width={1}\n            >\n              {\n                showBreadCrumb && (\n                  <Flex\n                    width={1}\n                  >\n                    <Breadcrumb\n                      {...this.props}\n                      showPathMobile={true}\n                      isMobile={this.props.isMobile}\n                      path={[this.props.selectedSubsection.label]}\n                      text={this.props.selectedSection.label.toUpperCase()}\n                      handleClick={ e => this.props.goToSection(this.props.selectedSection.route) }\n                    />\n                  </Flex>\n                )\n              }\n              <Flex\n                my={[2,3]}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <Title\n                  mb={2}\n                >\n                  {this.props.selectedSubsection.label}\n                </Title>\n                <Text\n                  textAlign={'center'}\n                  dangerouslySetInnerHTML={{\n                    __html:this.props.selectedSubsection.desc\n                  }}\n                >\n                </Text>\n              </Flex>\n              <SubComponent\n                {...this.props}\n                {...this.props.selectedSubsection.directProps}\n                toolProps={this.props.selectedSubsection.props}\n              />\n            </Box>\n          ) : (\n            <Flex\n              my={[2,3]}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Title\n                mb={3}\n              >\n                Tools\n              </Title>\n              <Flex\n                width={1}\n                style={{\n                  flexWrap:'wrap'\n                }}\n                justifyContent={viewOnly ? 'center' : 'flex-start'}\n              >\n              {\n                viewOnly ? (\n                  <IconBox\n                    cardProps={{\n                      maxWidth:[1,'35em']\n                    }}\n                    icon={'Visibility'}\n                    text={'You are using Idle in \"Read-Only\" mode.<br />Logout and connect with your wallet to interact.'}\n                  />\n                ) : this.props.selectedSection.submenu.map( (tool,toolIndex) => (\n                  <DashboardCard\n                    isInteractive={true}\n                    key={`tool_${toolIndex}`}\n                    cardProps={{\n                      p:[3,4],\n                      mb:[3,3],\n                      mr:[0,'2%'],\n                      style:{\n                        flex: this.props.isMobile ? '1 1 100%' : '0 0 31%'\n                      },\n                      alignItems:'center',\n                      flexDirection:'column',\n                      justifyContent:'center'\n                    }}\n                    handleClick={ e => this.props.goToSection(this.props.selectedSection.route+'/'+tool.route) }\n                  >\n                    <Text\n                      fontSize={[3,4]}\n                      textAlign={'center'}\n                    >\n                      {tool.label}\n                    </Text>\n                    <Flex\n                      justifyContent={'center'}\n                    >\n                      {\n                        tool.image ? (\n                          <Image\n                            my={[0,2]}\n                            height={'2.2em'}\n                            src={tool.image}\n                          />\n                        ) : tool.icon && (\n                          <Icon\n                            my={[0,2]}\n                            size={'3em'}\n                            name={tool.icon}\n                          />\n                        )\n                      }\n                    </Flex>\n                    <Text\n                      fontSize={[2,2]}\n                      textAlign={'center'}\n                      dangerouslySetInnerHTML={{\n                        __html:tool.desc\n                      }}\n                    >\n                    </Text>\n                  </DashboardCard>\n                ) )\n              }\n              </Flex>\n            </Flex>\n          )\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default Utils;\n","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Heading, Text, Tooltip, Icon } from \"rimble-ui\";\nimport PortfolioEquity from '../PortfolioEquity/PortfolioEquity';\n\nclass FundsOverview extends Component {\n\n  state = {\n    // govTokensAprs:null,\n    aggregatedValues:[],\n    govTokensTotalApr:null,\n    govTokensUserBalance:null,\n    govTokensDistribution:null,\n    govTokensTotalBalance:null,\n    govTokensTotalAprTooltip:null,\n    idleTokenUserDistribution:null,\n    govTokensDistributionTooltip:null,\n    govTokensTotalBalanceTooltip:null\n  };\n\n  // Utils\n  functionsUtil = null;\n  idleGovToken = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    this.idleGovToken = this.functionsUtil.getIdleGovToken();\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const isRisk = this.props.selectedStrategy === 'risk';\n\n    const [\n      // govTokensAprs,\n      idleTokenUserDistribution,\n      govTokensUserBalance,\n      apy,\n      depositTimestamp,\n      days\n    ] = await Promise.all([\n      // this.functionsUtil.getGovTokensAprs(this.props.selectedToken,this.props.tokenConfig),\n      this.idleGovToken.getUserDistribution(this.props.account,govTokenAvailableTokens,true),\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,null),\n      this.functionsUtil.loadAssetField('apy',this.props.selectedToken,this.props.tokenConfig,this.props.account,false),\n      this.functionsUtil.loadAssetField('depositTimestamp',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    let avgAPY = await this.functionsUtil.getAvgAPYStats(this.props.tokenConfig.address,isRisk,depositTimestamp);\n\n    if (!avgAPY || this.functionsUtil.BNify(avgAPY).lte(0)){\n      avgAPY = apy;\n    }\n\n    const govTokensTotalBalance = govTokensUserBalance ? Object.values(govTokensUserBalance).reduce( (totBalance,govTokenBalance) => {\n      return totBalance.plus(this.functionsUtil.BNify(govTokenBalance));\n    },this.functionsUtil.BNify(0)) : null;\n\n    const govTokensTotalBalanceTooltip = govTokensUserBalance ? Object.keys(govTokensUserBalance).map( govToken => {\n      const balance = govTokensUserBalance[govToken];\n      if (balance.gt(0)){\n        return `+${balance.toFixed(2)} ${govToken}`;\n      } else {\n        return null;\n      }\n    }).filter(v => (v !== null)) : null;\n\n    // console.log(govTokensTotalBalance,govTokensUserBalance,govTokensTotalBalanceTooltip);\n\n    // const govTokensTotalApr = govTokensAprs ? Object.values(govTokensAprs).reduce( (totApr,govTokenApr) => {\n    //   return totApr.plus(this.functionsUtil.BNify(govTokenApr));\n    // },this.functionsUtil.BNify(0)) : null;\n\n    // const govTokensTotalAprTooltip = govTokensAprs ? Object.keys(govTokensAprs).map( govToken => {\n    //   const apr = govTokensAprs[govToken];\n    //   if (apr.gt(0)){\n    //     return `${govToken}: ${apr.toFixed(2)}%`;\n    //   }\n    //   return null;\n    // }).filter(v => (v !== null)) : null;\n\n    /*\n    const govTokensDistributionTooltip = govTokensUserDistribution ? Object.keys(govTokensUserDistribution).map( govToken => {\n      const speed = govTokensUserDistribution[govToken];\n      if (speed.gt(0)){\n        const distributionFrequency = this.functionsUtil.getGlobalConfig(['govTokens',govToken,'distributionFrequency']);\n        return `+${speed.toFixed(4)} ${govToken}/${distributionFrequency}`;\n      }\n      return null;\n    }).filter(v => (v !== null)) : null;\n    */\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          desc:this.functionsUtil.getGlobalConfig(['messages','apyLong']),\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '0.00%') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    this.setState({\n      // govTokensAprs,\n      aggregatedValues,\n      // govTokensTotalApr,\n      govTokensUserBalance,\n      govTokensTotalBalance,\n      // govTokensTotalAprTooltip,\n      idleTokenUserDistribution,\n      govTokensTotalBalanceTooltip\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Flex\n                          mt={2}\n                          width={1}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <Text\n                            fontWeight={2}\n                            fontSize={[1,2]}\n                            color={'cellText'}\n                          >\n                            {v.props.title}\n                          </Text>\n                          {\n                            v.props.desc && \n                              <Tooltip\n                                placement={'bottom'}\n                                message={v.props.desc}\n                              >\n                                <Icon\n                                  ml={2}\n                                  name={\"Info\"}\n                                  size={'1em'}\n                                  color={'cellTitle'}\n                                />\n                              </Tooltip>\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquity\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              chartToken={this.props.selectedToken}\n              enabledTokens={[this.props.selectedToken]}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLent',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:this.props.theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPerc',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.govTokensTotalBalanceTooltip && this.state.govTokensTotalBalanceTooltip.length>0 && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      this.state.govTokensTotalBalanceTooltip.map((govTokenBalance,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          mt={govTokenIndex ? 1 : 0}\n                          key={`govToken_${govTokenIndex}`}\n                        >\n                          {govTokenBalance}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                )/* : this.state.govTokensUserBalance && Object.keys(this.state.govTokensUserBalance).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + ${this.state.govTokensTotalBalance.toFixed(4)}\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalBalanceTooltip.join(' / ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Fees\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'feesCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'apy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.idleTokenUserDistribution && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      mt={1}\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      {this.state.idleTokenUserDistribution.toFixed(4)} {this.idleGovToken.tokenName}/{this.idleGovToken.tokenConfig.distributionFrequency}\n                    </Text>\n                  </Flex>\n                )\n                /*\n                this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length===1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      Object.keys(this.state.govTokensAprs).map((govToken,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          ml={govTokenIndex ? 2 : 0}\n                          key={`govToken_${govToken}`}\n                        >\n                          {this.state.govTokensAprs[govToken].toFixed(2)}% {govToken}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                ) : this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + {this.state.govTokensTotalApr.toFixed(2)}%\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalAprTooltip.join('; ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            {\n              /*\n              <Flex\n                mb={[2,0]}\n                width={[1,1/5]}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'flex-start'}\n              >\n                <Title\n                  mb={2}\n                  fontSize={[3,4]}\n                  component={Heading.h3}\n                >\n                  Risk Score\n                </Title>\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'score',\n                    props:{\n                      decimals:1,\n                      fontWeight:300,\n                      fontSize:['1.8em','1.9em'],\n                      color:this.props.theme.colors.counter,\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n              */\n            }\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverview;","import React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Icon, Checkbox, Box, Link, Input, Tooltip } from \"rimble-ui\";\n\nclass CurveRedeem extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    tokenConfig:null,\n    unevenAmounts:null,\n    selectedToken:null,\n    availableTokens:null,\n    buttonDisabled:false,\n    showMaxSlippage:false,\n    redeemUnderlying:true,\n    curveTokenConfig:null,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    curveTokensAmounts:null,\n    fastBalanceSelector:null,\n    redeemUnevenAmounts:false,\n    curveRedeemableIdleTokens:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.initToken();\n  }\n\n  showMaxSlippage(){\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  async calculateSlippage(max_slippage=null){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (!inputValue || inputValue.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    let withdrawSlippage = null;\n    let curveTokensAmounts = null;\n    let curveIdleTokensAmounts = null;\n    if (this.state.redeemUnevenAmounts){\n      [\n        curveTokensAmounts,\n        curveIdleTokensAmounts\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokensAmounts(this.props.account,normalizedAmount,true),\n        this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,normalizedAmount)\n      ]);\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false,curveIdleTokensAmounts);\n    } else {\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false);\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const redeemableBalance = inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.times(100).plus(this.state.maxSlippage || this.functionsUtil.BNify(0)).div(100)));\n      curveTokensAmounts = {};\n      curveTokensAmounts[this.state.selectedToken] = redeemableBalance;\n    }\n\n    if (withdrawSlippage){\n      withdrawSlippage = withdrawSlippage.times(100);\n    }\n\n    this.setState({\n      withdrawSlippage,\n      curveTokensAmounts,\n      curveIdleTokensAmounts\n    });\n\n    // Add max slippage but don't save in state\n    if (withdrawSlippage && max_slippage){\n      withdrawSlippage = withdrawSlippage.plus(max_slippage);\n    }\n\n    return withdrawSlippage;\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.tokenConfig.idle.token !== this.props.tokenConfig.idle.token;\n    if (tokenChanged){\n      await this.initToken();\n    }\n\n    const redeemUnevenAmountsChanged = prevState.redeemUnevenAmounts !== this.state.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    const inputChanged = prevState.inputValue !== this.state.inputValue;\n    const maxSlippageChanged = parseFloat(prevState.maxSlippage) !== parseFloat(this.state.maxSlippage);\n    const tokenConfigChanged = JSON.stringify(prevState.tokenConfig) !== JSON.stringify(this.state.tokenConfig);\n    if (inputChanged || tokenConfigChanged || maxSlippageChanged){\n      this.calculateSlippage();\n    }\n\n    const selectedTokenChanged = prevState.selectedToken !== this.state.selectedToken;\n    if (selectedTokenChanged){\n      this.loadSelectedTokenConfig();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    let buttonDisabled = false;\n\n    // if (this.state.redeemUnevenAmounts){\n      buttonDisabled = !amount || amount.gt(this.state.curveTokenBalance);\n    // } else {\n      // buttonDisabled = !amount || amount.gt(this.state.redeemableBalance);\n    // }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    let inputValue = null;\n\n    // if (this.state.redeemUnevenAmounts){\n    inputValue = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n    // } else {\n      // inputValue = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n    // }\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  selectDestinationToken(selectedToken){\n    this.setState({\n      selectedToken\n    });\n  }\n\n  async loadSelectedTokenConfig(){\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const tokenConfig = this.state.availableTokens[this.state.selectedToken];\n    const curveTokenConfig = curveConfig.availableTokens[tokenConfig.idle.token];\n    this.setState({\n      tokenConfig,\n      curveTokenConfig\n    });\n  }\n\n  async initToken(){\n    const [curvePoolContract,curveSwapContract] = await Promise.all([\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract()\n    ]);\n\n    const [\n      curveTokenPrice,\n      curveTokenBalance,\n      curveRedeemableIdleTokens,\n    ] = await Promise.all([\n      this.functionsUtil.getCurveTokenPrice(),\n      this.functionsUtil.getCurveTokenBalance(this.props.account),\n      this.functionsUtil.getCurveRedeemableIdleTokens(this.props.account)\n    ]);\n\n    const unevenAmounts = [];\n    const redeemableBalance = curveTokenBalance ? curveTokenBalance.times(curveTokenPrice) : this.functionsUtil.BNify(0);\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();;\n    const selectedToken = Object.keys(availableTokens)[0];\n\n    this.setState({\n      selectedToken,\n      unevenAmounts,\n      curveTokenPrice,\n      availableTokens,\n      curvePoolContract,\n      curveSwapContract,\n      curveTokenBalance,\n      redeemableBalance,\n      curveRedeemableIdleTokens\n    });\n  }\n\n  async redeem(){\n\n    if (!this.state.curveTokenBalance){\n      return false;\n    }\n\n    const callbackRedeem = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveRedeem`,\n        eventAction: this.props.selectedToken,\n        eventValue: this.state.curveTokenBalance.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackRedeem === 'function' && txSucceeded){\n        this.props.callbackRedeem(tx);\n      }\n    };\n\n    const callbackReceiptRedeem = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.curveSwapContract.name;\n    const withdrawSlippage = await this.calculateSlippage(this.state.maxSlippage);\n    const max_slippage = this.functionsUtil.BNify(this.state.maxSlippage).div(100);\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    // const curveTokenBalance = this.functionsUtil.normalizeTokenAmount(this.state.curveTokenBalance,this.state.curvePoolContract.decimals);\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    if (this.state.redeemUnevenAmounts){\n      const min_amounts = this.state.redeemUnderlying ? await this.functionsUtil.getCurveTokensAmounts(this.props.account,_amount,false,true) : await this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,_amount,max_slippage);\n      console.log('remove_liquidity',_amount.toString(),min_amounts);\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    } else {\n      const coin_index = this.state.curveTokenConfig.migrationParams.coinIndex;\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.div(100))),this.state.tokenConfig.decimals);\n      // const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.minus(inputValue.times(withdrawSlippage.div(100))),this.state.curveTokenConfig.decimals);\n      // let _token_amount = await this.functionsUtil.getCurveTokenAmount(amounts,false);\n      // _token_amount = this.functionsUtil.BNify(_token_amount).isGreaterThan(curveTokenBalance) ? curveTokenBalance : this.functionsUtil.BNify(_token_amount);\n\n      console.log('remove_liquidity_one_coin',_amount, coin_index, min_amount);\n\n      // debugger;\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_one_coin', [_amount, coin_index, min_amount, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    }\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  getFastBalanceSelector(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n\n  render() {\n\n    const showSlippage = !this.state.buttonDisabled && this.state.withdrawSlippage;\n    const curveTokenName = this.functionsUtil.getGlobalConfig(['curve','poolContract','token']);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          {\n            !this.state.curveTokenBalance ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3,\n                  minHeight:'195px',\n                  style:{\n                    display:'flex',\n                    alignItems:'center',\n                    justifyContent:'center'\n                  }\n                }}\n              >\n                <FlexLoader\n                  flexProps={{\n                    flexDirection:'row'\n                  }}\n                  loaderProps={{\n                    size:'30px'\n                  }}\n                  textProps={{\n                    ml:2\n                  }}\n                  text={'Checking Curve Pool...'}\n                />\n              </DashboardCard>\n            ) : this.state.processing.loading ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3\n                }}\n              >\n                <Flex\n                  flexDirection={'column'}\n                >\n                  <TxProgressBar\n                    web3={this.props.web3}\n                    hash={this.state.processing.txHash}\n                    endMessage={`Finalizing redeem request...`}\n                    cancelTransaction={this.cancelTransaction.bind(this)}\n                    waitText={ this.props.waitText ? this.props.waitText : 'Redeem estimated in'}\n                  />\n                </Flex>\n              </DashboardCard>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    mb:2\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'1.8em'}\n                      color={'cellText'}\n                      name={'FileUpload'}\n                    />\n                    <Text\n                      mt={1}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Withdraw from the Curve Pool in a specific token or in uneven amounts of tokens (with no slippage).\n                    </Text>\n                    <Flex\n                      mt={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                    >\n                      <Checkbox\n                        required={false}\n                        label={`Redeem with no slippage`}\n                        checked={this.state.redeemUnevenAmounts}\n                        onChange={ e => this.toggleUnevenAmounts(e.target.checked) }\n                      />\n                      <Tooltip\n                        placement={'top'}\n                        message={`You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.`}\n                      >\n                        <Icon\n                          size={'1em'}\n                          color={'cellTitle'}\n                          name={\"InfoOutline\"}\n                        />\n                      </Tooltip>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n                {\n                  !this.state.redeemUnevenAmounts/* && (!this.props.selectedToken || (this.state.showMaxSlippage && showSlippage))*/ && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      {\n                        this.state.tokenConfig && \n                          <Box\n                            width={1}\n                          >\n                            <Text\n                              mb={1}\n                            >\n                              Select destination token:\n                            </Text>\n                            <AssetSelector\n                              {...this.props}\n                              id={'token-from'}\n                              showBalance={false}\n                              tokenConfig={this.state.tokenConfig}\n                              selectedToken={this.state.selectedToken}\n                              availableTokens={this.state.availableTokens}\n                              onChange={this.selectDestinationToken.bind(this)}\n                            />\n                          </Box>\n                      }\n                    </Box>\n                  )\n                }\n                {\n                  this.state.curveTokensAmounts && !this.state.buttonDisabled && (\n                    <DashboardCard\n                      cardProps={{\n                        mt:1,\n                        mb:2,\n                        py:2,\n                        px:1\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Text\n                          mt={1}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          You will receive:\n                        </Text>\n                        <Flex\n                          mt={2}\n                          width={1}\n                          boxShadow={0}\n                          style={{\n                            flexWrap:'wrap'\n                          }}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                          >\n                            {\n                              Object.keys(this.state.curveTokensAmounts).map( token => {\n                                const balance = this.state.curveTokensAmounts[token];\n                                return (\n                                  <Flex\n                                    mb={1}\n                                    mx={1}\n                                    width={'auto'}\n                                    flexDirection={'row'}\n                                    key={`tokenBalance_${token}`}\n                                    justifyContent={'flex-start'}\n                                  >\n                                    <AssetField\n                                      token={token}\n                                      tokenConfig={{\n                                        token:token\n                                      }}\n                                      fieldInfo={{\n                                        name:'icon',\n                                        props:{\n                                          mr:1,\n                                          width:['1.4em','1.6em'],\n                                          height:['1.4em','1.6em']\n                                        }\n                                      }}\n                                    />\n                                    <SmartNumber\n                                      ml={1}\n                                      fontSize={[0,1]}\n                                      fontWeight={500}\n                                      maxPrecision={4}\n                                      color={'cellText'}\n                                      number={balance.toString()}\n                                    />\n                                  </Flex>\n                                );\n                            })\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n                {\n                  this.state.showMaxSlippage && showSlippage && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Text>\n                          Choose max slippage:\n                        </Text>\n                        <Tooltip\n                          placement={'top'}\n                          message={`Max additional slippage on top of the one shown below`}\n                        >\n                          <Icon\n                            ml={1}\n                            size={'1em'}\n                            color={'cellTitle'}\n                            name={\"InfoOutline\"}\n                          />\n                        </Tooltip>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        {\n                          [0.2,0.5,1,5].map( slippage => (\n                            <FastBalanceSelector\n                              cardProps={{\n                                p:1\n                              }}\n                              textProps={{\n                                fontSize:1\n                              }}\n                              percentage={slippage}\n                              key={`selector_${slippage}`}\n                              onMouseDown={()=>this.setMaxSlippage(slippage)}\n                              isActive={this.state.maxSlippage === parseFloat(slippage)}\n                            />\n                          ))\n                        }\n                      </Flex>\n                    </Box>\n                  )\n                }\n                <Flex\n                  mb={3}\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  <Flex\n                    mb={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'flex-end'}\n                  >\n                    {\n                      showSlippage && (\n                        <Flex\n                          width={1}\n                          maxWidth={'40%'}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            textAlign={'right'}\n                            style={{\n                              whiteSpace:'nowrap'\n                            }}\n                            color={ parseFloat(this.state.withdrawSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                          >\n                            {\n                              parseFloat(this.state.withdrawSlippage.toFixed(3)) === 0 ?\n                                'No Slippage'\n                              : `${ this.state.withdrawSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.withdrawSlippage.abs().toFixed(3)}%`\n                            }\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={ this.state.redeemUnevenAmounts ? `You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.` : this.state.withdrawSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                          {\n                            !this.state.redeemUnevenAmounts &&\n                              <Link\n                                ml={1}\n                                color={'copyColor'}\n                                hoverColor={'primary'}\n                                onClick={this.showMaxSlippage.bind(this)}\n                              >\n                                change\n                              </Link>\n                          }\n                        </Flex>\n                      )\n                    }\n                    <Flex\n                      width={1}\n                      maxWidth={'60%'}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      justifyContent={'flex-end'}\n                    >\n                      <Link\n                        fontSize={1}\n                        fontWeight={3}\n                        color={'dark-gray'}\n                        textAlign={'right'}\n                        hoverColor={'copyColor'}\n                        onClick={ (e) => this.setFastBalanceSelector(100) }\n                        style={{\n                          maxWidth:'100%',\n                          overflow:'hidden',\n                          whiteSpace:'nowrap',\n                          textOverflow:'ellipsis'\n                        }}\n                      >\n                        {this.state.curveTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {curveTokenName}\n                      </Link>\n                    </Flex>\n                  </Flex>\n                  <Input\n                    min={0}\n                    type={\"number\"}\n                    required={true}\n                    height={'3.4em'}\n                    borderRadius={2}\n                    fontWeight={500}\n                    boxShadow={'none !important'}\n                    placeholder={`Insert amount`}\n                    onChange={this.changeInputValue.bind(this)}\n                    border={`1px solid ${this.props.theme.colors.divider}`}\n                    value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                  />\n                  <Flex\n                    mt={2}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      [25,50,75,100].map( percentage => (\n                        <FastBalanceSelector\n                          percentage={percentage}\n                          key={`selector_${percentage}`}\n                          onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                          isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                        />\n                      ))\n                    }\n                  </Flex>\n                </Flex>\n                <Flex\n                  justifyContent={'center'}\n                >\n                  <RoundButton\n                    buttonProps={{\n                      mt:2,\n                      width:[1,1/2],\n                      disabled:this.state.buttonDisabled\n                    }}\n                    handleClick={this.redeem.bind(this)}\n                  >\n                    Redeem\n                  </RoundButton>\n                </Flex>\n              </Flex>\n            )\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveRedeem;","import Migrate from '../Migrate/Migrate';\nimport IconBox from '../IconBox/IconBox';\nimport React, { Component } from 'react';\n// import ExtLink from '../ExtLink/ExtLink';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport ConnectBox from '../ConnectBox/ConnectBox';\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport RoundButton from '../RoundButton/RoundButton';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport ShareModal from '../utilities/components/ShareModal';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport TransactionField from '../TransactionField/TransactionField';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Input, Box, Icon, Link, Checkbox, Tooltip, Image } from \"rimble-ui\";\n\nclass DepositRedeem extends Component {\n\n  state = {\n    txError: {},\n    tokenAPY: '-',\n    inputValue: {},\n    processing: {},\n    curveAPY: null,\n    totalAUM: null,\n    canRedeem: false,\n    maxSlippage: 0.2,\n    canDeposit: false,\n    action: 'deposit',\n    directMint: false,\n    activeModal: null,\n    tokenGovTokens: {},\n    showBuyFlow: false,\n    maxUnlentPerc: null,\n    unlentBalance: null,\n    tokenApproved: false,\n    skipMigration: false,\n    redeemSkipGov: false,\n    showRedeemFlow: false,\n    contractPaused: false,\n    buttonDisabled: false,\n    canRedeemCurve: false,\n    erc20ForwarderTx: null,\n    signedParameters: null,\n    minAmountForMint: null,\n    showMaxSlippage: false,\n    redeemGovTokens: false,\n    canDepositCurve: false,\n    redeemSkipGovTokens: [],\n    fastBalanceSelector: {},\n    actionProxyContract: {},\n    migrationEnabled: false,\n    componentMounted: false,\n    curveTokenBalance: null,\n    agreeSkipGovTokens: false,\n    redeemCurveEnabled: false,\n    depositCurveBalance: null,\n    depositCurveEnabled: true,\n    showAdvancedOptions: false,\n    skipGovTokensGasSave: null,\n    depositCurveSlippage: null,\n    erc20ForwarderContract: {},\n    erc20ForwarderEnabled: false,\n    showETHWrapperEnabled: false,\n    skipGovTokensGasSaveUSD: null,\n    metaTransactionsEnabled: true,\n    skippedGovTokensBalance: null,\n    minAmountForMintReached: false,\n    loadingErc20ForwarderTx: false\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils() {\n    if (this.functionsUtil) {\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount() {\n    this.loadUtils();\n    await this.loadProxyContracts();\n  }\n\n  async componentDidMount() {\n    this.loadTokenInfo();\n  }\n\n  setShowRedeemFlow = (showRedeemFlow) => {\n    this.setState({\n      showRedeemFlow\n    });\n  }\n\n  setShowBuyFlow = (showBuyFlow) => {\n    this.setState({\n      showBuyFlow\n    });\n  }\n\n  toggleShowAdvancedOptions = showAdvancedOptions => {\n    this.setState((prevState) => ({\n      showAdvancedOptions: !prevState.showAdvancedOptions\n    }));\n  }\n\n  toggleSkipMigration = skipMigration => {\n    this.setState({\n      skipMigration\n    });\n  }\n\n  toggleRedeemCurve = redeemCurveEnabled => {\n    this.setState({\n      redeemCurveEnabled\n    });\n  }\n\n  toggleDepositCurve = depositCurveEnabled => {\n    this.setState({\n      depositCurveEnabled\n    });\n  }\n\n  toggleShowETHWrapper = showETHWrapperEnabled => {\n    this.setState({\n      showETHWrapperEnabled\n    });\n  }\n\n  toggleAgreeSkipGovTokens = agreeSkipGovTokens => {\n    this.setState({\n      agreeSkipGovTokens\n    });\n  }\n\n  toggleSkipMint = (directMint) => {\n    this.setState({\n      directMint\n    });\n  }\n\n  toggleRedeemGovTokens = (redeemGovTokens) => {\n    this.setState({\n      redeemGovTokens,\n      redeemSkipGovTokens: [],\n      agreeSkipGovTokens: false,\n      skippedGovTokensBalance: this.functionsUtil.BNify(0),\n      redeemSkipGov: redeemGovTokens ? false : this.state.redeemSkipGov\n    });\n  }\n\n  toggleRedeemSkipGov = (redeemSkipGov) => {\n    this.setState({\n      redeemSkipGov,\n      redeemSkipGovTokens: [],\n      agreeSkipGovTokens: false,\n      skippedGovTokensBalance: this.functionsUtil.BNify(0),\n      redeemGovTokens: redeemSkipGov ? false : this.state.redeemGovTokens\n    });\n  }\n\n  getSkippedGovTokensFlags = async () => {\n    const govTokensIndexes = await this.functionsUtil.getGovTokensIndexes(this.props.account, this.props.tokenConfig);\n    const govTokensFlags = Object.keys(govTokensIndexes).map(token => {\n      return this.state.redeemSkipGovTokens.includes(token);\n    });\n    // console.log('getSkippedGovTokensFlags',govTokensIndexes,govTokensFlags);\n    return govTokensFlags;\n  }\n\n  calculateSkippedGovTokens = async () => {\n    let skippedGovTokensBalance = this.functionsUtil.BNify(0);\n    const DAITokenConfig = this.functionsUtil.getGlobalConfig(['stats', 'tokens', 'DAI']);\n\n    await this.functionsUtil.asyncForEach(this.state.redeemSkipGovTokens, async (govToken) => {\n      const govTokenConfig = this.functionsUtil.getGlobalConfig(['govTokens', govToken]);\n      const govTokenPrice = await this.functionsUtil.getUniswapConversionRate(DAITokenConfig, govTokenConfig);\n      const skippedAmount = this.props.govTokensUserBalances[govToken].times(govTokenPrice);\n      skippedGovTokensBalance = skippedGovTokensBalance.plus(skippedAmount);\n    });\n\n    const _skipGovTokenRedeem = await this.getSkippedGovTokensFlags();\n    const WETHTokenConfig = this.functionsUtil.getGlobalConfig(['stats', 'tokens', 'WETH']);\n\n    const [\n      wethPrice,\n      redeemGasUsage,\n      skipGovRedeemGasUsage\n    ] = await Promise.all([\n      this.functionsUtil.getUniswapConversionRate(DAITokenConfig, WETHTokenConfig),\n      this.functionsUtil.estimateMethodGasUsage(this.props.tokenConfig.idle.token, 'redeemIdleToken', [this.functionsUtil.normalizeTokenAmount(this.props.idleTokenBalance, this.props.tokenConfig.decimals)], this.props.account),\n      this.functionsUtil.estimateMethodGasUsage(this.props.tokenConfig.idle.token, 'redeemIdleTokenSkipGov', [this.functionsUtil.normalizeTokenAmount(this.props.idleTokenBalance, this.props.tokenConfig.decimals), _skipGovTokenRedeem], this.props.account)\n    ]);\n\n    const skipGovTokensGasSave = redeemGasUsage && skipGovRedeemGasUsage ? redeemGasUsage.minus(skipGovRedeemGasUsage) : this.functionsUtil.BNify(0);\n    const skipGovTokensGasSaveUSD = skipGovTokensGasSave ? skipGovTokensGasSave.times(wethPrice) : this.functionsUtil.BNify(0);\n\n    this.setState({\n      skipGovTokensGasSave,\n      skipGovTokensGasSaveUSD,\n      skippedGovTokensBalance\n    });\n    return skippedGovTokensBalance;\n  }\n\n  setRedeemSkipGovTokens = (token, checked) => {\n    this.setState((prevState) => {\n      const redeemSkipGovTokens = Object.assign([], prevState.redeemSkipGovTokens);\n      if (!checked && redeemSkipGovTokens.includes(token)) {\n        redeemSkipGovTokens.splice(redeemSkipGovTokens.indexOf(token), 1);\n      } else if (checked && !redeemSkipGovTokens.includes(token)) {\n        redeemSkipGovTokens.push(token);\n      }\n      return {\n        redeemSkipGovTokens\n      };\n    }, () => {\n      this.calculateSkippedGovTokens();\n    });\n  }\n\n  toggleErc20ForwarderEnabled = (erc20ForwarderEnabled) => {\n    const newState = {\n      erc20ForwarderEnabled\n    };\n\n    this.setState(newState, () => {\n      this.cancelTransaction();\n    });\n  }\n\n  toggleMetaTransactionsEnabled = (metaTransactionsEnabled) => {\n    this.setState({\n      metaTransactionsEnabled\n    });\n  }\n\n  async loadProxyContracts() {\n\n    if (!this.props.contractsInitialized){\n      return false;\n    }\n\n    const actions = ['deposit', 'redeem'];\n    const newState = {\n      actionProxyContract: {},\n      erc20ForwarderContract: {}\n    };\n\n    await this.functionsUtil.asyncForEach(actions, async (action) => {\n      let mintProxyContractInfo = null;\n      const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', action, 'erc20ForwarderEnabled']);\n\n      if (depositErc20ForwarderEnabled) {\n        mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract', 'methods', action, 'erc20ForwarderProxyContract', 'forwarder']);\n\n        await this.props.initContract(mintProxyContractInfo.name, mintProxyContractInfo.address, mintProxyContractInfo.abi);\n\n        // Init contract for erc20 forwarder\n        const erc20ForwarderContractInfo = this.functionsUtil.getGlobalConfig(['contract', 'methods', action, 'erc20ForwarderProxyContract', 'tokens', this.props.selectedToken]);\n        if (erc20ForwarderContractInfo) {\n          mintProxyContractInfo = erc20ForwarderContractInfo;\n          const erc20ForwarderContract = await this.props.initContract(erc20ForwarderContractInfo.name, erc20ForwarderContractInfo.address, erc20ForwarderContractInfo.abi);\n          if (erc20ForwarderContract){\n            newState.erc20ForwarderContract[action] = erc20ForwarderContractInfo;\n            newState.erc20ForwarderContract[action].contract = erc20ForwarderContract.contract;\n          }\n        }\n      }\n\n      if (!mintProxyContractInfo) {\n        mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract', 'methods', action, 'proxyContract']);\n      }\n\n      const hasProxyContract = mintProxyContractInfo && mintProxyContractInfo.enabled;\n      newState.actionProxyContract[action] = hasProxyContract ? mintProxyContractInfo : null;\n      if (hasProxyContract) {\n        const proxyContract = await this.props.initContract(mintProxyContractInfo.name, mintProxyContractInfo.address, mintProxyContractInfo.abi);\n        if (proxyContract){\n          newState.actionProxyContract[action].contract = proxyContract.contract;\n          newState.actionProxyContract[action].approved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken, mintProxyContractInfo.address, this.props.account);\n        }\n      }\n    });\n\n    // console.log('loadProxyContracts',newState);\n\n    return await this.setState(newState);\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadAPY() {\n    const tokenAprs = await this.functionsUtil.getTokenAprs(this.props.tokenConfig);\n    if (tokenAprs && tokenAprs.avgApy !== null) {\n      const tokenAPY = this.functionsUtil.BNify(tokenAprs.avgApy).toFixed(2);\n\n      let curveAPY = null;\n      if (this.state.canDepositCurve) {\n        curveAPY = await this.functionsUtil.getCurveAPY();\n        // console.log('curveAPY',curveAPY);\n        if (curveAPY) {\n          curveAPY = curveAPY.plus(tokenAPY);\n        }\n      }\n      this.setState({\n        tokenAPY,\n        curveAPY\n      });\n    }\n  }\n\n  getReferralAddress() {\n    let _referral = this.functionsUtil.getQueryStringParameterByName('_referral');\n    if (!this.functionsUtil.checkAddress(_referral)) {\n      _referral = null;\n    }\n    return _referral;\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n\n    // console.log('componentDidUpdate',this.props.tokenBalance);\n\n    if (this.props.tokenBalance === null) {\n      return false;\n    }\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const erc20ForwarderEnabledChanged = prevState.erc20ForwarderEnabled !== this.state.erc20ForwarderEnabled;\n    const tokenBalanceChanged = prevProps.tokenBalance !== this.props.tokenBalance && this.props.tokenBalance !== null;\n\n    if (accountChanged || tokenChanged || tokenBalanceChanged || erc20ForwarderEnabledChanged || contractsInitialized) {\n      await this.loadProxyContracts();\n      this.loadTokenInfo();\n      return false;\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n\n    if (actionChanged || fastBalanceSelectorChanged) {\n      this.setInputValue();\n    }\n\n    const inputValueChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputValueChanged) {\n      // this.checkMinAmountForMint();\n    }\n\n    const redeemSkipGovChanged = prevState.redeemSkipGov !== this.state.redeemSkipGov;\n    const redeemGovTokensChanged = prevState.redeemGovTokens !== this.state.redeemGovTokens;\n    const agreeSkipGovTokensChanged = prevState.agreeSkipGovTokens !== this.state.agreeSkipGovTokens;\n    const redeemSkipGovTokensChanged = JSON.stringify(prevState.redeemSkipGovTokens) !== JSON.stringify(this.state.redeemSkipGovTokens);\n\n    if (redeemGovTokensChanged || actionChanged || redeemSkipGovTokensChanged || redeemSkipGovChanged || agreeSkipGovTokensChanged) {\n      this.checkButtonDisabled();\n    }\n\n    const depositCurveChanged = prevState.depositCurveEnabled !== this.state.depositCurveEnabled;\n    const metaTransactionsChanged = prevState.metaTransactionsEnabled !== this.state.metaTransactionsEnabled;\n    if (metaTransactionsChanged || depositCurveChanged) {\n      const tokenApproved = await this.checkTokenApproved();\n      this.setState({\n        tokenApproved\n      });\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged) {\n      this.calculateCurveSlippage();\n    }\n  }\n\n  async checkMinAmountForMint() {\n    let showPoolPerc = false;\n    let totalAUM = this.state.totalAUM;\n    let maxUnlentPerc = this.state.maxUnlentPerc;\n    const isRisk = this.props.selectedStrategy === 'risk';\n    const inputValue = this.functionsUtil.BNify(this.state.inputValue[this.state.action]);\n\n    if (inputValue.gt(this.props.tokenBalance)) {\n      return false;\n    }\n\n    const convertedAmount = await this.functionsUtil.convertTokenBalance(inputValue, this.props.selectedToken, this.props.tokenConfig, isRisk);\n    let minAmountForMint = this.functionsUtil.BNify(this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'minAmountForMint']));\n    let minAmountForMintReached = convertedAmount.gte(minAmountForMint);\n\n    // Check token minAmountForMint\n    if (minAmountForMintReached) {\n      if (this.props.tokenConfig.deposit && this.props.tokenConfig.deposit.minAmountForMint && convertedAmount.lt(this.props.tokenConfig.deposit.minAmountForMint)) {\n        minAmountForMintReached = false;\n      } else {\n        [\n          maxUnlentPerc,\n          totalAUM\n        ] = await Promise.all([\n          maxUnlentPerc || this.functionsUtil.genericContractCall(this.props.tokenConfig.idle.token, 'maxUnlentPerc'),\n          totalAUM || this.functionsUtil.loadAssetField('pool', this.props.selectedToken, this.props.tokenConfig, this.props.account)\n        ]);\n\n        if (maxUnlentPerc && totalAUM) {\n          const depositPerc = inputValue.div(totalAUM).times(100);\n          maxUnlentPerc = this.functionsUtil.BNify(maxUnlentPerc);\n          const maxUnlentPercFormatted = maxUnlentPerc.div(1e3).times(2);\n          if (depositPerc.lt(maxUnlentPercFormatted)) {\n            minAmountForMintReached = false;\n          } else if (totalAUM.times(maxUnlentPercFormatted.div(100)).gt(minAmountForMint)) {\n            showPoolPerc = true;\n            minAmountForMint = totalAUM.times(maxUnlentPercFormatted.div(100));\n          }\n        }\n      }\n    }\n\n    this.setState({\n      totalAUM,\n      showPoolPerc,\n      maxUnlentPerc,\n      minAmountForMint,\n      minAmountForMintReached\n    });\n  }\n\n  async calculateCurveSlippage() {\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)) {\n      return false;\n    }\n\n    const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve', 'poolContract']);\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount, curvePoolContractInfo.decimals);\n    const newState = {};\n\n    switch (this.state.action) {\n      case 'deposit':\n        newState.depositCurveBalance = amount;\n        newState.depositCurveSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token, normalizedAmount, true);\n        break;\n      case 'redeem':\n        // newState.redeemBalance = amount;\n        // newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n        break;\n      default:\n        break;\n    }\n    // console.log('calculateCurveSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  checkUseProxyContract = () => {\n    const proxyContract = this.state.actionProxyContract[this.state.action];\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'metaTransactionsEnabled']) && this.state.metaTransactionsEnabled;\n    return ((depositErc20ForwarderEnabled || depositMetaTransactionsEnabled) && proxyContract && this.props.biconomy);\n  }\n\n  approveContract = async (callbackApprove, callbackReceiptApprove) => {\n    if (this.state.depositCurveEnabled) {\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve', 'depositContract']);\n      this.functionsUtil.enableERC20(this.props.selectedToken, curveDepositContract.address, callbackApprove, callbackReceiptApprove);\n    } else {\n      // Check Proxy Contract Approved for Deposit with Biconomy\n      const useProxyContract = this.checkUseProxyContract();\n      if (useProxyContract) {\n        const proxyContract = this.state.actionProxyContract[this.state.action];\n        this.functionsUtil.enableERC20(this.props.selectedToken, proxyContract.address, callbackApprove, callbackReceiptApprove);\n      } else {\n        this.functionsUtil.enableERC20(this.props.selectedToken, this.props.tokenConfig.idle.address, callbackApprove, callbackReceiptApprove);\n      }\n    }\n  }\n\n  checkTokenApproved = async () => {\n    let tokenApproved = false;\n    if (this.state.depositCurveEnabled) {\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve', 'depositContract']);\n      tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken, curveDepositContract.address, this.props.account);\n    } else {\n      // Check Proxy Contract Approved for Deposit with Biconomy\n      const useProxyContract = this.checkUseProxyContract();\n      if (useProxyContract) {\n        // Check for Permit Deposit\n        const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n        if (depositErc20ForwarderEnabled) {\n          const permitEnabled = this.functionsUtil.getGlobalConfig(['permit', this.props.selectedToken]);\n          if (permitEnabled) {\n            return true;\n          }\n        }\n        // Check proxy contract approved\n        const proxyContract = this.state.actionProxyContract[this.state.action];\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken, proxyContract.address, this.props.account);\n        // console.log('tokenApproved 1',this.props.selectedToken, proxyContract.address, this.props.account, tokenApproved);\n      } else {\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken, this.props.tokenConfig.idle.address, this.props.account);\n        // console.log('tokenApproved 2',this.props.selectedToken, this.props.tokenConfig.idle.address, this.props.account, tokenApproved);\n      }\n    }\n\n    return tokenApproved;\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = await this.checkTokenApproved();\n\n    if (tokenApproved) {\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve: {\n            txHash: null,\n            loading: false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx, error) => {\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.props.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error) {\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error') {\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      // console.log('callbackApprove',tx,tx.status === 'success');\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve: {\n            txHash: null,\n            loading: false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve: {\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.approveContract(callbackApprove, callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve: {\n          txHash: null,\n          loading: true\n        }\n      }\n    }));\n  }\n\n  loadTokenInfo = async () => {\n\n    if (this.state.componentMounted) {\n      this.setState({\n        componentMounted: false\n      });\n    }\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve', 'availableTokens', this.props.tokenConfig.idle.token]);\n    const curveTokenEnabled = curveConfig.enabled && curveTokenConfig && curveTokenConfig.enabled;\n\n    const [\n      tokenApproved,\n      contractPaused,\n      curveSwapContract,\n      curveDepositContract,\n      unlentBalance,\n      { migrationEnabled },\n      curveTokenBalance,\n    ] = await Promise.all([\n      this.checkTokenApproved(),\n      this.functionsUtil.checkContractPaused(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract(),\n      this.functionsUtil.getUnlentBalance(this.props.tokenConfig),\n      this.functionsUtil.checkMigration(this.props.tokenConfig, this.props.account),\n      curveTokenEnabled ? this.functionsUtil.getCurveTokenBalance(this.props.account) : null\n    ]);\n\n    const canDeposit = this.props.tokenBalance && this.functionsUtil.BNify(this.props.tokenBalance).gt(0);\n    const canRedeem = this.props.idleTokenBalance && this.functionsUtil.BNify(this.props.idleTokenBalance).gt(0);\n\n    const canDepositCurve = curveTokenEnabled && canDeposit;\n    const depositCurveEnabled = canDepositCurve;\n\n    const showETHWrapperEnabled = this.props.selectedToken === 'WETH' && (this.state.showETHWrapperEnabled || !canDeposit);\n\n    const canRedeemCurve = curveTokenEnabled && curveTokenBalance && curveTokenBalance.gt(0);\n    const redeemCurveEnabled = canRedeemCurve;\n\n    const tokenGovTokens = this.functionsUtil.getTokenGovTokens(this.props.tokenConfig);\n\n    const newState = { ...this.state };\n\n    // Check curve deposit enabled\n    if (newState.depositCurveEnabled && !curveTokenEnabled) {\n      newState.depositCurveEnabled = false;\n    }\n\n    newState.canRedeem = canRedeem;\n    newState.canDeposit = canDeposit;\n    newState.unlentBalance = unlentBalance;\n    newState.tokenApproved = tokenApproved;\n    newState.tokenGovTokens = tokenGovTokens;\n    newState.contractPaused = contractPaused;\n    newState.canRedeemCurve = canRedeemCurve;\n    newState.canDepositCurve = canDepositCurve;\n    newState.migrationEnabled = migrationEnabled;\n    newState.curveTokenBalance = curveTokenBalance;\n    newState.curveSwapContract = curveSwapContract;\n    newState.redeemCurveEnabled = redeemCurveEnabled;\n    newState.depositCurveEnabled = depositCurveEnabled;\n    newState.curveDepositContract = curveDepositContract;\n    newState.showETHWrapperEnabled = showETHWrapperEnabled;\n\n    newState.txError = {\n      redeem: false,\n      deposit: false\n    };\n    newState.processing = {\n      redeem: {\n        txHash: null,\n        loading: false\n      },\n      deposit: {\n        txHash: null,\n        loading: false\n      },\n      approve: {\n        txHash: null,\n        loading: false\n      },\n      boost: {\n        txHash: null,\n        loading: false\n      }\n    };\n    newState.inputValue = {\n      boost: null,\n      redeem: null,\n      deposit: null\n    };\n    newState.fastBalanceSelector = {\n      boost: null,\n      redeem: null,\n      deposit: null\n    };\n\n    newState.componentMounted = true;\n\n    this.setState(newState, () => {\n      this.checkAction();\n      this.loadAPY();\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      erc20ForwarderTx: null,\n      loadingErc20ForwarderTx: false,\n      processing: {\n        ...prevState.processing,\n        approve: {\n          txHash: null,\n          loading: false\n        },\n        [this.state.action]: {\n          txHash: null,\n          loading: false\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const redeemGovTokens = this.state.redeemGovTokens;\n    const selectedPercentage = this.getFastBalanceSelector();\n    const inputValue = this.state.inputValue[this.state.action];\n    const redeemSkipGov = this.state.redeemSkipGov && this.state.redeemSkipGovTokens.length > 0 && this.state.agreeSkipGovTokens;\n\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'metaTransactionsEnabled']) && this.state.metaTransactionsEnabled;\n\n    let loading = true;\n\n    switch (this.state.action) {\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)) {\n          return false;\n        }\n\n        if (!this.state.tokenApproved) {\n          return this.approveToken();\n        }\n\n        if (localStorage) {\n          this.functionsUtil.setLocalStorage('redirectToFundsAfterLogged', 0);\n        }\n\n        this.setState({\n          lendingProcessing: this.props.account,\n          lendAmount: '',\n          genericError: '',\n        });\n\n        const callbackDeposit = (tx, error) => {\n\n          if (!tx && error) {\n            tx = {\n              status: 'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.props.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error) {\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error') {\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]: {\n                txHash: null,\n                loading: false\n              }\n            }\n          }));\n\n          if (txSucceeded) {\n            this.setState((prevState) => ({\n              activeModal: 'share',\n              inputValue: {\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if ((this.state.metaTransactionsEnabled || this.state.erc20ForwarderEnabled) && txError) {\n            this.setState({\n              erc20ForwarderTx: null,\n              loadingErc20ForwarderTx: false,\n              txError: {\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          // console.log('callbackReceiptDeposit',tx);\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]: {\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n        const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve', 'availableTokens', this.props.tokenConfig.idle.token, 'enabled']);\n\n        // Curve Deposit\n        if (curveTokenEnabled && this.state.depositCurveEnabled) {\n\n          const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve', 'poolContract']);\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue, curvePoolContractInfo.decimals);\n\n          const amounts = await this.functionsUtil.getCurveAmounts(this.props.tokenConfig.idle.token, tokensToDeposit);\n          let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n          if (this.state.maxSlippage) {\n            minMintAmount = this.functionsUtil.BNify(minMintAmount);\n            minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n            minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n          }\n\n          const depositParams = [amounts, minMintAmount];\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, callbackDeposit, callbackReceiptDeposit);\n          // Normal Deposit\n        } else {\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue, this.props.tokenConfig.decimals);\n\n          // const gasLimitDeposit = this.functionsUtil.BNify(1000000);\n          let depositParams = [];\n\n          // Use Proxy Contract if enabled\n          const useProxyContract = this.checkUseProxyContract();\n          if (useProxyContract) {\n            const mintProxyContractInfo = this.state.actionProxyContract[this.state.action];\n            const mintProxyContract = mintProxyContractInfo.contract;\n\n            // Use Meta-Transactions\n            if (depositMetaTransactionsEnabled) {\n              depositParams = [tokensToDeposit, this.props.tokenConfig.idle.address];\n              const functionCall = mintProxyContract.methods[mintProxyContractInfo.function](...depositParams);\n              const functionSignature = functionCall.encodeABI();\n              // console.log('mintProxyContract',mintProxyContractInfo.function,depositParams);\n              // if (this.state.metaTransactionsEnabled){\n              contractSendResult = await this.functionsUtil.sendBiconomyTxWithPersonalSign(mintProxyContractInfo.name, functionSignature, callbackDeposit, callbackReceiptDeposit);\n              // } else {\n              //   contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n              // }\n              // Use Erc20 Forwarder\n            } else if (depositErc20ForwarderEnabled) {\n\n              // Check if the deposit method require the nonce\n              const methodAbi = mintProxyContractInfo.contract._jsonInterface.find(f => f.name === mintProxyContractInfo.function);\n              const useNonce = methodAbi ? methodAbi.inputs.find(i => i.name === 'nonce') : true;\n\n              // Build ERC20 Forwarder Tx\n              if (!this.state.erc20ForwarderTx) {\n                this.setState({\n                  txError: {\n                    [this.state.action]: false\n                  },\n                  loadingErc20ForwarderTx: true\n                }, async () => {\n                  const erc20ForwarderContract = this.state.erc20ForwarderContract[this.state.action];\n                  const signedParameters = await this.functionsUtil.signPermit(this.props.selectedToken, this.props.account, erc20ForwarderContract.name, 0, tokensToDeposit);\n\n                  // console.log('signedParameters_1',signedParameters);\n\n                  if (signedParameters) {\n\n                    const { expiry, nonce, r, s, v } = signedParameters;\n\n                    if (useNonce) {\n                      depositParams = [tokensToDeposit, parseInt(nonce), expiry, v, r, s];\n                    } else {\n                      depositParams = [tokensToDeposit, expiry, v, r, s];\n                    }\n\n                    if (mintProxyContractInfo.function === 'foo') {\n                      depositParams = [];\n                    }\n\n                    // console.log('permitAndDeposit',mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams);\n\n                    // contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n\n                    const permitType = erc20ForwarderContract.permitType;\n                    const functionCall = erc20ForwarderContract.contract.methods[erc20ForwarderContract.function](...depositParams);\n                    const functionSignature = functionCall.encodeABI();\n\n                    // console.log('functionSignature',permitType, erc20ForwarderContract.function, depositParams);\n\n                    let gasLimit = null;\n                    try {\n                      gasLimit = await functionCall.estimateGas({ from: this.props.account }); // 5000000;\n                      if (gasLimit) {\n                        gasLimit = this.functionsUtil.BNify(gasLimit).times(1.2);\n                      } else {\n                        gasLimit = this.functionsUtil.BNify(1000000);\n                      }\n                    } catch (error) {\n                      // console.log('Gas Estimate - Error: ',error);\n                    }\n\n                    if (!gasLimit) {\n                      gasLimit = this.functionsUtil.BNify(1000000);\n                    }\n\n                    // console.log('gasEstimate',mintProxyContractInfo.name, depositParams, parseFloat(gasLimit));\n\n                    // debugger;\n\n                    const erc20ForwarderTx = await this.functionsUtil.buildBiconomyErc20ForwarderTx(erc20ForwarderContract.name, this.props.tokenConfig.address, permitType, functionSignature, gasLimit);\n                    // console.log('erc20ForwarderTx',erc20ForwarderTx);\n                    return this.setState({\n                      erc20ForwarderTx,\n                      loadingErc20ForwarderTx: false\n                    });\n                  } else {\n                    return this.setState((prevState) => ({\n                      processing: {\n                        ...prevState.processing,\n                        [this.state.action]: {\n                          txHash: null,\n                          loading: false\n                        }\n                      },\n                      signedParameters: null,\n                      erc20ForwarderTx: null,\n                      loadingErc20ForwarderTx: false\n                    }));\n                  }\n                });\n                // Send ERC20 Forwarder Tx\n              } else {\n                this.setState({\n                  txError: {\n                    [this.state.action]: false\n                  },\n                  loadingErc20ForwarderTx: true\n                }, async () => {\n                  const metaInfo = {};\n                  const permitOptions = {};\n                  const erc20ForwarderContract = this.state.erc20ForwarderContract[this.state.action];\n                  const erc20ForwarderBaseContract = this.functionsUtil.getGlobalConfig(['contract', 'methods', this.state.action, 'erc20ForwarderProxyContract', 'forwarder']);\n\n                  const permitValue = `${tokensToDeposit}00`;\n                  const incrementNonce = 1; // useNonce ? 1 : 0;\n                  const signedParameters = await this.functionsUtil.signPermit(this.props.selectedToken, this.props.account, erc20ForwarderBaseContract.name, incrementNonce, permitValue);\n\n                  // console.log('signedParameters_2',signedParameters);\n\n                  if (signedParameters) {\n\n                    this.setState({\n                      signedParameters\n                    });\n\n                    const permitConfig = this.functionsUtil.getGlobalConfig(['permit', this.props.selectedToken]);\n                    const setValue = permitConfig.type.find(t => t.name === 'value');\n\n                    const { expiry, nonce, r, s, v } = signedParameters;\n                    permitOptions.v = v;\n                    permitOptions.r = r;\n                    permitOptions.s = s;\n                    permitOptions.allowed = true;\n                    permitOptions.expiry = parseInt(expiry);\n                    permitOptions.holder = this.props.account;\n                    permitOptions.value = setValue ? permitValue : 0;\n                    permitOptions.nonce = parseInt(nonce.toString());\n                    permitOptions.spender = erc20ForwarderBaseContract.address;\n\n                    metaInfo.permitData = permitOptions;\n                    metaInfo.permitType = erc20ForwarderContract.permitType;\n\n                    // console.log('sendBiconomyTxWithErc20Forwarder',permitOptions,metaInfo);\n\n                    await this.functionsUtil.asyncTimeout(200);\n\n                    contractSendResult = await this.functionsUtil.sendBiconomyTxWithErc20Forwarder(this.state.erc20ForwarderTx.request, metaInfo, callbackDeposit, callbackReceiptDeposit);\n\n                    this.setState({\n                      erc20ForwarderTx: null,\n                      loadingErc20ForwarderTx: false\n                    });\n                  } else {\n                    return this.setState((prevState) => ({\n                      processing: {\n                        ...prevState.processing,\n                        [this.state.action]: {\n                          txHash: null,\n                          loading: false\n                        }\n                      },\n                      signedParameters: null,\n                      erc20ForwarderTx: null,\n                      loadingErc20ForwarderTx: false\n                    }));\n                  }\n                });\n              }\n            }\n            // Use main contract if no proxy contract exists\n          } else {\n            /*\n            let _skipMint = !this.state.directMint && this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMint']);\n            _skipMint = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : _skipMint;\n\n            // Check if deposited amount is greated that general lower limit for direct mint\n            if (_skipMint && this.state.minAmountForMintReached){\n              _skipMint = false;\n            }\n            */\n            // Always skip mint\n            let _skipMint = true;\n\n            const _referral = this.getReferralAddress() || '0x0000000000000000000000000000000000000000';\n            depositParams = [tokensToDeposit, _skipMint, _referral];\n            // console.log('depositParams',depositParams);\n            contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'mintIdleToken', depositParams, callbackDeposit, callbackReceiptDeposit);\n          }\n        }\n        break;\n      case 'redeem':\n\n        if (redeemGovTokens) {\n          const callbackRedeem = (tx, error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_gov`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: 0\n            };\n\n            if (error) {\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error') {\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]: {\n                  txHash: null,\n                  loading: false\n                }\n              }\n            }));\n\n            if (txSucceeded) {\n              this.setState((prevState) => ({\n                inputValue: {\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]: {\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'redeemIdleToken', [0], callbackRedeem, callbackReceiptRedeem);\n\n        } else {\n\n          if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)) {\n            return false;\n          }\n\n          const txData = {\n            value: this.functionsUtil.BNify(inputValue)\n          };\n\n          let idleTokenToRedeem = null;\n          if (selectedPercentage) {\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage);\n          } else {\n            const idleTokenPriceWithFee = await this.functionsUtil.getIdleTokenPriceWithFee(this.props.tokenConfig, this.props.account)\n            idleTokenToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue, this.props.tokenConfig.decimals)).div(idleTokenPriceWithFee);\n          }\n\n          // Check if idleTokens to redeem > idleToken balance\n          if (idleTokenToRedeem.gt(this.functionsUtil.BNify(this.props.idleTokenBalance))) {\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance);\n          }\n\n          // Normalize number\n          idleTokenToRedeem = this.functionsUtil.normalizeTokenAmount(idleTokenToRedeem, 18);\n\n          if (!idleTokenToRedeem) {\n            return false;\n          }\n\n          const callbackRedeem = (tx, error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_partial`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: parseInt(inputValue)\n            };\n\n            if (error) {\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error') {\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]: {\n                  txHash: null,\n                  loading: false\n                }\n              }\n            }));\n\n            if (txSucceeded) {\n              this.setState((prevState) => ({\n                inputValue: {\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]: {\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          let redeemMethod = 'redeemIdleToken';\n          let redeemParams = [idleTokenToRedeem];\n\n          if (redeemSkipGov) {\n            redeemMethod = 'redeemIdleTokenSkipGov';\n            const _skipGovTokenRedeem = await this.getSkippedGovTokensFlags();\n            redeemParams.push(_skipGovTokenRedeem);\n          }\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, redeemMethod, redeemParams, callbackRedeem, callbackReceiptRedeem, txData);\n        }\n        break;\n      default: // Reset loading if not handled action\n        loading = false;\n        break;\n    }\n\n    if (contractSendResult !== false || loading !== this.state.processing[this.state.action].loading) {\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]: {\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  showMaxSlippage = () => {\n    this.setState({\n      showMaxSlippage: true\n    });\n  }\n\n  checkAction = () => {\n    let action = this.state.action;\n\n    switch (action) {\n      case 'redeem':\n        if (!this.state.canRedeem) {\n          action = 'deposit';\n        }\n        break;\n      default:\n        break;\n    }\n\n    if (action !== this.state.action) {\n      this.setState({\n        action\n      }, () => {\n        this.checkButtonDisabled();\n      });\n    } else {\n      this.checkButtonDisabled();\n    }\n  }\n\n  checkButtonDisabled = (amount = null) => {\n\n    if (!this.state.action) {\n      return false;\n    }\n\n    if (!amount) {\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action) {\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && (amount.lte(0) || amount.gt(this.props.tokenBalance)));\n        break;\n      case 'redeem':\n        buttonDisabled = !this.state.canRedeemCurve && !this.state.redeemGovTokens && (buttonDisabled || (!amount || amount.lte(0) || amount.gt(this.props.redeemableBalance)));\n\n        if (!buttonDisabled && this.state.redeemSkipGov && this.state.redeemSkipGovTokens.length > 0 && !this.state.agreeSkipGovTokens) {\n          buttonDisabled = true;\n        }\n        // console.log('checkButtonDisabled',this.state.redeemSkipGov,this.state.redeemSkipGovTokens.length,this.state.agreeSkipGovTokens,buttonDisabled);\n        break;\n      default:\n        break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null) {\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch (this.state.action) {\n      case 'deposit':\n        amount = this.props.tokenBalance ? this.functionsUtil.BNify(this.props.tokenBalance).times(selectedPercentage) : null;\n        break;\n      case 'redeem':\n        amount = this.props.redeemableBalance ? this.functionsUtil.BNify(this.props.redeemableBalance).times(selectedPercentage) : null;\n        break;\n      default:\n        break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue: {\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null) {\n      return false;\n    }\n\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action) {\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector: {\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  changeInputValue = async (e) => {\n    if (!this.state.action) {\n      return false;\n    }\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector: {\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue: {\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()) {\n      case 'deposit':\n\n        break;\n      case 'redeem':\n        if (!this.state.canRedeem && !this.state.canRedeemCurve) {\n          action = null;\n        }\n        break;\n      default:\n        action = null;\n        break;\n    }\n\n    if (action !== null) {\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig) {\n      return null;\n    }\n\n\n    const viewOnly = this.props.connectorName === 'custom';\n    const currentNetwork = this.functionsUtil.getCurrentNetwork();\n\n    const isDepositDisabled = this.props.tokenConfig.canDeposit && !this.props.tokenConfig.canDeposit.enabled ? true : false;\n    // const depositDisabledMessage1 = isDepositDisabled && this.props.tokenConfig.canDeposit.disabledMessageDepositKey ? this.functionsUtil.getGlobalConfig(['messages', this.props.tokenConfig.canDeposit.disabledMessageDepositKey]) : null;\n    // const depositDisabledMessage2 = this.state.canRedeem ? this.functionsUtil.getGlobalConfig(['messages', this.props.tokenConfig.canDeposit.disabledMessageRedeemKey]) : \"\";\n    const depositDisabledMessage = isDepositDisabled ? (this.state.canRedeem && this.props.tokenConfig.canDeposit.disabledMessageRedeemKey ? this.functionsUtil.getGlobalConfig(['messages', this.props.tokenConfig.canDeposit.disabledMessageRedeemKey]) : (this.props.tokenConfig.canDeposit.disabledMessageDepositKey ? this.functionsUtil.getGlobalConfig(['messages', this.props.tokenConfig.canDeposit.disabledMessageDepositKey]) : null) ) : null;\n\n    const govTokensDisabled = this.props.tokenConfig.govTokensDisabled;\n    const govTokensEnabled = !govTokensDisabled && this.functionsUtil.getGlobalConfig(['strategies', this.props.selectedStrategy, 'govTokensEnabled']) && Object.keys(this.state.tokenGovTokens).length > 0;\n    const skipMintForDepositEnabled = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : true;\n    const skipMintCheckboxEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'skipMintCheckboxEnabled']) && skipMintForDepositEnabled;\n\n    const showRedeemFlow = this.state.canRedeem && (!this.state.redeemCurveEnabled || this.state.showRedeemFlow) && this.state.action === 'redeem';\n\n    const redeemGovTokenEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'redeemGovTokens', 'enabled']) && govTokensEnabled && showRedeemFlow;// && this.props.govTokensBalance.gt(0);\n    const redeemGovTokens = redeemGovTokenEnabled && this.state.redeemGovTokens;\n\n    const redeemSkipGovConfig = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'redeemSkipGov']);\n    const redeemSkipGovEnabled = redeemSkipGovConfig && !redeemSkipGovConfig.disabledTokens.includes(this.props.tokenConfig.idle.token) && govTokensEnabled && showRedeemFlow;\n    const redeemSkipGov = redeemSkipGovEnabled && this.state.redeemSkipGov && Object.keys(this.props.govTokensUserBalances).length > 0 && this.props.govTokensBalance.gt(0);\n    const redeemSkipGovNoTokens = redeemSkipGovEnabled && this.state.redeemSkipGov && (!Object.keys(this.props.govTokensUserBalances).length || this.props.govTokensBalance.lte(0));\n\n\n    const showAdvancedRedeemOptions = redeemGovTokenEnabled || redeemSkipGovEnabled;\n    // console.log('showAdvancedRedeemOptions',showAdvancedRedeemOptions,redeemGovTokenEnabled,redeemSkipGovEnabled,govTokensEnabled,showRedeemFlow);\n\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'erc20ForwarderEnabled']);\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'metaTransactionsEnabled']);\n    const depositErc20ForwarderEnabledTokens = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'erc20ForwarderProxyContract', 'tokens']);\n\n    // Biconomy Start\n    const metaTransactionsAvailable = depositMetaTransactionsEnabled && this.props.biconomy && this.state.actionProxyContract[this.state.action];\n    const useMetaTx = metaTransactionsAvailable && this.state.metaTransactionsEnabled;\n\n    const erc20ForwarderEnabled = depositErc20ForwarderEnabled && Object.keys(depositErc20ForwarderEnabledTokens).includes(this.props.selectedToken) && depositErc20ForwarderEnabledTokens[this.props.selectedToken].enabled && this.props.biconomy && this.props.erc20ForwarderClient && this.state.actionProxyContract[this.state.action] && !isDepositDisabled;\n\n    // console.log(erc20ForwarderEnabled,depositErc20ForwarderEnabled,this.props.biconomy,this.props.erc20ForwarderClient,this.state.actionProxyContract[this.state.action]);\n    // Biconomy End\n\n    const totalBalance = this.state.action === 'deposit' ? this.props.tokenBalance : this.props.redeemableBalance;\n    const migrateText = this.state.migrationEnabled && this.props.tokenConfig.migration.message !== undefined ? this.props.tokenConfig.migration.message : null;\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve', 'availableTokens', this.props.tokenConfig.idle.token, 'enabled']);\n\n    const depositCurve = curveTokenEnabled && this.state.depositCurveEnabled && this.state.action === 'deposit';\n\n    const showDepositOptions = this.state.action === 'deposit' && !this.state.contractPaused && (curveTokenEnabled || this.state.tokenApproved);\n\n    const showDepositCurve = showDepositOptions && curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canDepositCurve && this.state.action === 'deposit';\n    const showRedeemCurve = curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canRedeemCurve && this.state.action === 'redeem';\n\n    const showCurveSlippage = depositCurve && this.state.depositCurveSlippage && this.state.depositCurveBalance && !this.state.buttonDisabled;\n\n    const showRebalanceOption = false && this.state.canDeposit && skipMintCheckboxEnabled && this.state.action === 'deposit';\n    const showAdvancedDepositOptions = showDepositCurve || showRebalanceOption;\n\n    const batchDepositInfo = this.functionsUtil.getGlobalConfig(['tools','batchDeposit']);\n\n    const batchDepositEnabled = batchDepositInfo.enabled && typeof batchDepositInfo.props.availableTokens[this.props.tokenConfig.idle.token] !== 'undefined' && batchDepositInfo.availableNetworks.includes(currentNetwork.id);\n    \n    const batchDepositDepositEnabled = batchDepositInfo.depositEnabled;\n\n    const showBatchDeposit = !useMetaTx && batchDepositEnabled && batchDepositDepositEnabled && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    const ethWrapperInfo = this.functionsUtil.getGlobalConfig(['tools', 'ethWrapper']);\n    const ETHWrapperComponent = ethWrapperInfo.subComponent;\n    const showETHWrapper = this.props.selectedToken === 'WETH' && ethWrapperInfo.enabled && ethWrapperInfo.availableNetworks.includes(currentNetwork.id) && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    const polygonBridgeInfo = this.functionsUtil.getGlobalConfig(['tools','polygonBridge']);\n    // const PolygonBridgeComponent = polygonBridgeInfo.subComponent;\n    const polygonNetworkId = this.functionsUtil.getGlobalConfig(['network','providers','polygon','networkPairs',currentNetwork.id]);\n    // const polygonNetwork = this.functionsUtil.getGlobalConfig(['network','availableNetworks',polygonNetworkId]);\n\n    const canPerformAction = /*!depositCurve && !this.state.redeemCurveEnabled && */((this.state.action === 'deposit' && this.state.canDeposit && !isDepositDisabled) || (this.state.action === 'redeem' && this.state.canRedeem) || redeemGovTokens) && /*(!this.state.showETHWrapperEnabled || this.state.action === 'redeem') && */(!this.state.showPolygonBridgeEnabled || this.state.action === 'redeem');\n    const showActionFlow = !redeemGovTokens && canPerformAction;\n\n    const showBuyFlow = this.state.componentMounted && currentNetwork.provider === 'infura' && (!showDepositCurve || this.state.showBuyFlow) && !this.state.depositCurveEnabled && this.state.tokenApproved && !this.state.contractPaused && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.action === 'deposit' && !isDepositDisabled && !this.state.canDeposit && !this.state.showETHWrapperEnabled;\n    const showPolygonBridge = this.state.componentMounted && this.state.action === 'deposit' && !this.state.canDeposit && currentNetwork.provider === 'polygon';\n    const showPolygonBridgeBanner = !showPolygonBridge && currentNetwork.provider === 'polygon' && polygonNetworkId && polygonBridgeInfo.enabled && this.state.action === 'deposit';\n\n    const buyToken = this.functionsUtil.BNify(this.props.accountBalance).gt(0) ? this.props.selectedToken : this.functionsUtil.getBaseToken();\n\n    const _referral = this.getReferralAddress();\n    const showReferral = _referral && this.state.action === 'deposit' && showActionFlow && !showBuyFlow;\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1, '35em']}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          <Box\n            width={1}\n          >\n            <Text mb={1}>\n              Select your asset:\n            </Text>\n            <AssetSelector\n              {...this.props}\n            />\n          </Box>\n          {\n            viewOnly ? (\n              <IconBox\n                cardProps={{\n                  mt: 3\n                }}\n                icon={'Visibility'}\n                text={'You are using Idle in \"Read-Only\" mode.<br />Logout and connect with your wallet to interact.'}\n              />\n            ) : (\n                <Migrate\n                  {...this.props}\n                  migrateTextBefore={migrateText}\n                  migrateText={migrateText !== null ? '' : null}\n                  toggleSkipMigration={this.toggleSkipMigration.bind(this)}\n                >\n                  {\n                    !this.props.account ? (\n                      <ConnectBox\n                        {...this.props}\n                      />\n                    ) : this.state.componentMounted ? (\n                      this.state.action && (\n                        <Box\n                          width={1}\n                        >\n                          <Flex\n                            mt={2}\n                            flexDirection={'column'}\n                          >\n                            <Text mb={2}>\n                              Choose the action:\n                          </Text>\n\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              justifyContent={'space-between'}\n                            >\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  width: 0.48,\n                                  onMouseDown: () => {\n                                    this.setAction('deposit');\n                                  }\n                                }}\n                                isInteractive={true}\n                                isActive={this.state.action === 'deposit'}\n\n                              >\n                                <Flex\n                                  my={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <TransactionField\n                                    transaction={{\n                                      action: 'deposit'\n                                    }}\n                                    fieldInfo={{\n                                      name: 'icon',\n                                      props: {\n                                        mr: 3\n                                      }\n                                    }}\n                                  />\n                                  <Text\n                                    fontSize={3}\n                                    fontWeight={3}\n                                  >\n                                    Deposit\n                                </Text>\n                                </Flex>\n                              </DashboardCard>\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  width: 0.48,\n                                  onMouseDown: () => {\n                                    this.setAction('redeem');\n                                  }\n                                }}\n                                isInteractive={true}\n                                isActive={this.state.action === 'redeem'}\n                                isDisabled={!this.state.canRedeem && !this.state.canRedeemCurve}\n                              >\n                                <Flex\n                                  my={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <TransactionField\n                                    transaction={{\n                                      action: 'redeem'\n                                    }}\n                                    fieldInfo={{\n                                      name: 'icon',\n                                      props: {\n                                        mr: 3\n                                      }\n                                    }}\n                                  />\n                                  <Text\n                                    fontSize={3}\n                                    fontWeight={3}\n                                  >\n                                    Redeem\n                                </Text>\n                                </Flex>\n                              </DashboardCard>\n                            </Flex>\n                            {\n                              isDepositDisabled && (\n                                <IconBox\n                                  cardProps={{\n                                    mt: 3\n                                  }}\n                                  iconProps={{\n                                    color:'#ffe000'\n                                  }}\n                                  icon={'Warning'}\n                                  text={depositDisabledMessage}\n                                >\n                                  {\n                                    this.state.action === 'deposit' && this.state.canRedeem && (\n                                      <RoundButton\n                                        buttonProps={{\n                                          mt:3,\n                                          width:[1,1/2]\n                                        }}\n                                        handleClick={e => this.setAction('redeem')}\n                                      >\n                                        Redeem\n                                      </RoundButton>\n                                    )\n                                  }\n                                </IconBox>\n                              )\n                            }\n                          </Flex>\n                          {\n                            (showRedeemFlow && this.state.unlentBalance) &&\n                            <DashboardCard\n                              cardProps={{\n                                py: 2,\n                                px: 2,\n                                mt: 3,\n                                display: 'flex',\n                                alignItems: 'center',\n                                flexDirection: 'column',\n                                justifyContent: 'center',\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={'LocalGasStation'}\n                                />\n                                <Text\n                                  px={2}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Available balance for Cheap Redeem\n                                </Text>\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'center'}\n                                    hoverColor={'copyColor'}\n                                  >\n                                    {this.state.unlentBalance.toFixed(4)} {this.props.selectedToken}\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.functionsUtil.getGlobalConfig(['messages', 'cheapRedeem'])}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              </Flex>\n                            </DashboardCard>\n                          }\n                          {\n                            showAdvancedRedeemOptions ? (\n                              <DashboardCard\n                                cardProps={{\n                                  pt: 2,\n                                  px: 2,\n                                  mt: 3,\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                  flexDirection: 'column',\n                                  justifyContent: 'center',\n                                  pb: this.state.showAdvancedOptions ? 3 : 2,\n                                }}\n                              >\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <Link\n                                    ml={1}\n                                    mainColor={'primary'}\n                                    hoverColor={'primary'}\n                                    onClick={this.toggleShowAdvancedOptions}\n                                  >\n                                    {this.state.showAdvancedOptions ? 'Hide' : 'Show'} advanced options\n                                </Link>\n                                  <Icon\n                                    size={'1.8em'}\n                                    color={'cellText'}\n                                    name={this.state.showAdvancedOptions ? 'ArrowDropUp' : 'ArrowDropDown'}\n                                  />\n                                </Flex>\n                                {\n                                  this.state.showAdvancedOptions &&\n                                  <Flex\n                                    mt={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      redeemGovTokenEnabled &&\n                                      <Flex\n                                        alignItems={'center'}\n                                        justifyContent={'row'}\n                                      >\n                                        <Checkbox\n                                          required={false}\n                                          checked={this.state.redeemGovTokens}\n                                          label={`Redeem governance tokens only`}\n                                          onChange={e => this.toggleRedeemGovTokens(e.target.checked)}\n                                        />\n                                        <Link\n                                          color={'link'}\n                                          hoverColor={'link'}\n                                          onClick={e => this.props.openTooltipModal('Redeem governance tokens', `This feature allows you to redeem just the amount of governance tokens accrued${this.props.govTokensBalance && this.props.govTokensBalance.gt(0) ? ` (~${this.props.govTokensBalance.toFixed(2)}$)` : null} without redeeming the underlying token.`)}\n                                        >\n                                          (read more)\n                                          </Link>\n                                      </Flex>\n                                    }\n                                    {\n                                      redeemSkipGovEnabled &&\n                                      <Flex\n                                        alignItems={'center'}\n                                        flexDirection={'row'}\n                                      >\n                                        <Checkbox\n                                          required={false}\n                                          checked={this.state.redeemSkipGov}\n                                          label={`Redeem without governance tokens`}\n                                          onChange={e => this.toggleRedeemSkipGov(e.target.checked)}\n                                        />\n                                        <Icon\n                                          mr={1}\n                                          size={'1.2em'}\n                                          name={'Warning'}\n                                          color={'#ffe000'}\n                                        />\n                                        <Link\n                                          color={'link'}\n                                          hoverColor={'link'}\n                                          onClick={e => this.props.openTooltipModal('Redeem without governance tokens', this.functionsUtil.getGlobalConfig(['messages', 'redeemSkipGov']))}\n                                        >\n                                          (read more)\n                                          </Link>\n                                      </Flex>\n                                    }\n                                  </Flex>\n                                }\n                              </DashboardCard>\n                            ) : showAdvancedDepositOptions ? (\n                              <DashboardCard\n                                cardProps={{\n                                  pt: 2,\n                                  px: 2,\n                                  mt: 3,\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                  flexDirection: 'column',\n                                  justifyContent: 'center',\n                                  pb: this.state.showAdvancedOptions ? 3 : 2,\n                                }}\n                              >\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <Link\n                                    ml={1}\n                                    mainColor={'primary'}\n                                    hoverColor={'primary'}\n                                    onClick={this.toggleShowAdvancedOptions}\n                                  >\n                                    {this.state.showAdvancedOptions ? 'Hide' : 'Show'} advanced options\n                                </Link>\n                                  <Icon\n                                    size={'1.8em'}\n                                    color={'cellText'}\n                                    name={this.state.showAdvancedOptions ? 'ArrowDropUp' : 'ArrowDropDown'}\n                                  />\n                                </Flex>\n                                {\n                                  this.state.showAdvancedOptions &&\n                                  <Flex\n                                    mt={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      showDepositCurve &&\n                                      <Flex\n                                        alignItems={'center'}\n                                        justifyContent={'row'}\n                                      >\n                                        <Checkbox\n                                          required={false}\n                                          disabled={this.state.directMint}\n                                          label={`Deposit in the Curve Pool`}\n                                          checked={this.state.depositCurveEnabled}\n                                          onChange={e => this.toggleDepositCurve(e.target.checked)}\n                                        />\n                                        <Link\n                                          mainColor={'primary'}\n                                          hoverColor={'primary'}\n                                          onClick={e => this.props.openTooltipModal('How Curve works', this.functionsUtil.getGlobalConfig(['messages', 'curveInstructions']))}\n                                        >\n                                          (read more)\n                                          </Link>\n                                      </Flex>\n                                    }\n                                    {\n                                      showRebalanceOption &&\n                                      <Flex\n                                        alignItems={'center'}\n                                        justifyContent={'row'}\n                                      >\n                                        <Checkbox\n                                          required={false}\n                                          label={`Rebalance the pool`}\n                                          checked={this.state.directMint}\n                                          disabled={this.state.depositCurveEnabled}\n                                          onChange={e => this.toggleSkipMint(e.target.checked)}\n                                        />\n                                        <Tooltip\n                                          placement={'bottom'}\n                                          message={this.functionsUtil.getGlobalConfig(['messages', 'directMint'])}\n                                        >\n                                          <Icon\n                                            size={'1em'}\n                                            color={'cellTitle'}\n                                            name={\"InfoOutline\"}\n                                          />\n                                        </Tooltip>\n                                      </Flex>\n                                    }\n                                  </Flex>\n                                }\n                              </DashboardCard>\n                            ) : (\n                                  <Flex\n                                    width={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      showDepositCurve && (\n                                        <Flex\n                                          width={1}\n                                          flexDirection={'column'}\n                                          justifyContent={'center'}\n                                        >\n                                          <DashboardCard\n                                            isRainbow={true}\n                                            cardProps={{\n                                              py: 3,\n                                              px: 2,\n                                              mt: 3,\n                                              display: 'flex',\n                                              alignItems: 'center',\n                                              flexDirection: 'column',\n                                              justifyContent: 'center',\n                                            }}\n                                          >\n                                            <Flex\n                                              width={1}\n                                              alignItems={'center'}\n                                              flexDirection={'column'}\n                                              justifyContent={'center'}\n                                            >\n                                              <Image\n                                                height={'1.8em'}\n                                                src={curveConfig.params.image}\n                                              />\n                                              <Text\n                                                mt={2}\n                                                px={2}\n                                                fontSize={1}\n                                                color={'dark-gray'}\n                                                textAlign={'center'}\n                                              >\n                                                Deposit your tokens in the Curve Pool and boost your APY up to {this.state.curveAPY ? this.state.curveAPY.toFixed(2) : '-'}%.\n                                          <Link\n                                                  ml={1}\n                                                  mainColor={'primary'}\n                                                  hoverColor={'primary'}\n                                                  onClick={e => this.props.openTooltipModal('How Curve works', this.functionsUtil.getGlobalConfig(['messages', 'curveInstructions']))}\n                                                >\n                                                  Read More\n                                          </Link>\n                                              </Text>\n                                              <Checkbox\n                                                mt={2}\n                                                required={false}\n                                                label={`Deposit in Curve`}\n                                                checked={this.state.depositCurveEnabled}\n                                                onChange={e => this.toggleDepositCurve(e.target.checked)}\n                                              />\n                                            </Flex>\n                                          </DashboardCard>\n                                          {\n                                            (!this.state.showBuyFlow && !this.state.depositCurveEnabled && !this.state.canDeposit) &&\n                                            <Link\n                                              textAlign={'center'}\n                                              hoverColor={'primary'}\n                                              onClick={e => this.setShowBuyFlow(true)}\n                                            >\n                                              I just want to deposit more {this.props.selectedToken}\n                                            </Link>\n                                          }\n                                        </Flex>\n                                      )\n                                    }\n                                    {\n                                      showRebalanceOption && (\n                                        <DashboardCard\n                                          cardProps={{\n                                            py: 3,\n                                            px: 2,\n                                            mt: 3,\n                                            display: 'flex',\n                                            alignItems: 'center',\n                                            flexDirection: 'column',\n                                            justifyContent: 'center',\n                                          }}\n                                        >\n                                          <Flex\n                                            width={1}\n                                            alignItems={'center'}\n                                            flexDirection={'column'}\n                                            justifyContent={'center'}\n                                          >\n                                            <Icon\n                                              size={'1.8em'}\n                                              color={'cellText'}\n                                              name={'InfoOutline'}\n                                            />\n                                            <Text\n                                              mt={1}\n                                              px={2}\n                                              fontSize={1}\n                                              color={'cellText'}\n                                              textAlign={'center'}\n                                            >\n                                              By checking this flag you can rebalance the pool and help all users gain an additional APR\n                                      </Text>\n                                          </Flex>\n                                          <Checkbox\n                                            mt={2}\n                                            required={false}\n                                            label={`Rebalance the pool`}\n                                            checked={this.state.directMint}\n                                            onChange={e => this.toggleSkipMint(e.target.checked)}\n                                          />\n                                        </DashboardCard>\n                                      )\n                                    }\n                                    {\n                                      redeemGovTokenEnabled && (\n                                        <DashboardCard\n                                          cardProps={{\n                                            py: 3,\n                                            px: 2,\n                                            mt: 3,\n                                            display: 'flex',\n                                            alignItems: 'center',\n                                            flexDirection: 'column',\n                                            justifyContent: 'center',\n                                          }}\n                                        >\n                                          <Flex\n                                            width={1}\n                                            alignItems={'center'}\n                                            flexDirection={'column'}\n                                            justifyContent={'center'}\n                                          >\n                                            <Icon\n                                              size={'1.8em'}\n                                              color={'cellText'}\n                                              name={'InfoOutline'}\n                                            />\n                                            <Text\n                                              mt={1}\n                                              px={2}\n                                              fontSize={1}\n                                              color={'cellText'}\n                                              textAlign={'center'}\n                                            >\n                                              By redeeming your {this.props.selectedToken} you will automatically get also the proportional amount of governance tokens accrued{this.props.govTokensBalance && this.props.govTokensBalance.gt(0) ? ` (~ $${this.props.govTokensBalance.toFixed(2)})` : null}.\n                                      </Text>\n                                          </Flex>\n                                          <Checkbox\n                                            mt={2}\n                                            required={false}\n                                            checked={this.state.redeemGovTokens}\n                                            label={`Redeem governance tokens only`}\n                                            onChange={e => this.toggleRedeemGovTokens(e.target.checked)}\n                                          />\n                                        </DashboardCard>\n                                      )\n                                    }\n                                  </Flex>\n                                )\n                          }\n                          {\n                            redeemSkipGov ? (\n                              <DashboardCard\n                                cardProps={{\n                                  mt: 2,\n                                  mb: 2,\n                                  py: 2,\n                                  px: 1\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                >\n                                  <Text\n                                    mt={1}\n                                    fontSize={2}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    Select the gov tokens you want to give away:\n                                  </Text>\n                                  <Flex\n                                    mt={2}\n                                    width={1}\n                                    boxShadow={0}\n                                    style={{\n                                      flexWrap: 'wrap'\n                                    }}\n                                    alignItems={'center'}\n                                    justifyContent={'center'}\n                                  >\n                                    {\n                                      Object.keys(this.props.govTokensUserBalances).map(token => {\n                                        const balance = this.props.govTokensUserBalances[token];\n                                        const isActive = this.state.redeemSkipGovTokens.includes(token);\n                                        const tokenConfig = this.functionsUtil.getGlobalConfig(['govTokens', token]);\n                                        return (\n                                          <Flex\n                                            p={2}\n                                            mb={1}\n                                            mx={1}\n                                            width={'auto'}\n                                            style={{\n                                              cursor: 'pointer'\n                                            }}\n                                            borderRadius={2}\n                                            flexDirection={'row'}\n                                            border={isActive ? 2 : 1}\n                                            key={`skipGovToken_${token}`}\n                                            justifyContent={'flex-start'}\n                                            backgroundColor={isActive ? 'menuHover' : 'cardBgHover'}\n                                            onClick={e => this.setRedeemSkipGovTokens(token, !this.state.redeemSkipGovTokens.includes(token))}\n                                          >\n                                            <Checkbox\n                                              m={0}\n                                              required={false}\n                                              checked={isActive}\n                                              onChange={e => this.setRedeemSkipGovTokens(token, e.target.checked)}\n                                            />\n                                            <AssetField\n                                              token={token}\n                                              tokenConfig={tokenConfig}\n                                              fieldInfo={{\n                                                name: 'icon',\n                                                props: {\n                                                  mr: 1,\n                                                  width: ['1.4em', '1.6em'],\n                                                  height: ['1.4em', '1.6em']\n                                                }\n                                              }}\n                                            />\n                                            <SmartNumber\n                                              ml={1}\n                                              fontSize={[0, 2]}\n                                              fontWeight={500}\n                                              maxPrecision={4}\n                                              color={'cellText'}\n                                              number={balance.toString()}\n                                            />\n                                          </Flex>\n                                        );\n                                      })\n                                    }\n                                  </Flex>\n                                </Flex>\n                              </DashboardCard>\n                            ) : redeemSkipGovNoTokens && (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 2,\n                                  my: 2\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    name={'MoneyOff'}\n                                    color={'cellText'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    You don't have any gov tokens to give away.\n                                </Text>\n                                </Flex>\n                              </DashboardCard>\n                            )\n                          }\n                          {\n                            redeemSkipGov && this.functionsUtil.BNify(this.state.skippedGovTokensBalance).gt(0) ? (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 2,\n                                  my: 2\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    name={'Warning'}\n                                    color={'#ffe000'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    fontSize={1}\n                                    color={'red'}\n                                    textAlign={'center'}\n                                  >\n                                    You are giving away {this.functionsUtil.formatMoney(this.state.skippedGovTokensBalance)}$ worth of governance tokens!\n                                </Text>\n                                  {\n                                    this.state.skipGovTokensGasSave && this.state.skipGovTokensGasSave.gte(0.0001) && (\n                                      <Text\n                                        mt={1}\n                                        fontSize={1}\n                                        color={'#00b84a'}\n                                        textAlign={'center'}\n                                      >\n                                        This will save you {this.state.skipGovTokensGasSave.toFixed(4)} ETH of gas (~{this.state.skipGovTokensGasSaveUSD.toFixed(2)}$)\n                                    </Text>\n                                    )\n                                  }\n                                  <Text\n                                    mt={1}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    To proceed with the redeem please give your authorization by checking the following flag:\n                                </Text>\n                                  <Checkbox\n                                    my={1}\n                                    required={false}\n                                    checked={this.state.agreeSkipGovTokens}\n                                    label={`I agree to give away my governance tokens`}\n                                    onChange={e => this.toggleAgreeSkipGovTokens(e.target.checked)}\n                                  />\n                                </Flex>\n                              </DashboardCard>\n                            ) : redeemSkipGov && this.state.redeemSkipGovTokens.length > 0 && (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  my: 2\n                                }}\n                              >\n                                <FlexLoader\n                                  flexProps={{\n                                    flexDirection: 'row'\n                                  }}\n                                  loaderProps={{\n                                    size: '25px',\n                                  }}\n                                  textProps={{\n                                    ml: 2\n                                  }}\n                                  text={'Loading estimated gas usage...'}\n                                />\n                              </DashboardCard>\n                            )\n                          }\n                          {\n                            showReferral && (\n                              <DashboardCard\n                                cardProps={{\n                                  py: 3,\n                                  px: 2,\n                                  mt: 3,\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                  flexDirection: 'column',\n                                  justifyContent: 'center',\n                                }}\n                              >\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    name={'Share'}\n                                    color={'cellText'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    px={2}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    You are depositing with the following referral address:\n                                </Text>\n                                  <Text\n                                    mt={1}\n                                    px={2}\n                                    fontSize={1}\n                                    fontWeight={500}\n                                    textAlign={'center'}\n                                    color={this.props.theme.colors.transactions.status.completed}\n                                  >\n                                    {_referral}\n                                  </Text>\n                                </Flex>\n                              </DashboardCard>\n                            )\n                          }\n                          {\n                            (metaTransactionsAvailable && !showBuyFlow && !this.state.contractPaused) ? (\n                              <DashboardCard\n                                cardProps={{\n                                  py: 3,\n                                  px: 2,\n                                  my: 3,\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                  flexDirection: 'column',\n                                  justifyContent: 'center',\n                                }}\n                              >\n                                {\n                                  this.state.metaTransactionsEnabled && this.state.txError[this.state.action] && this.state.actionProxyContract[this.state.action].approved ? (\n                                    <Flex\n                                      width={1}\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        name={'Warning'}\n                                        color={'cellText'}\n                                      />\n                                      <Text\n                                        mt={1}\n                                        fontSize={1}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        Seems like you are having some trouble with Meta-Transactions... Disable them by unchecking the box below and try again!\n                                    </Text>\n                                    </Flex>\n                                  ) : this.functionsUtil.getWalletProvider() === 'WalletConnect' && this.state.metaTransactionsEnabled ? (\n                                    <Flex\n                                      width={1}\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        name={'Warning'}\n                                        color={'cellText'}\n                                      />\n                                      <Text\n                                        mt={1}\n                                        fontSize={1}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        Please disable Meta-Transactions if you are using Argent Wallet to avoid failed transactions!\n                                    </Text>\n                                    </Flex>\n                                  ) : (\n                                        <Text\n                                          mt={1}\n                                          fontSize={1}\n                                          color={'cellText'}\n                                          textAlign={'center'}\n                                        >\n                                          Meta-Transactions are {this.state.metaTransactionsEnabled ? 'enabled' : 'disabled'} for {this.state.action}s!<br />\n                                          {\n                                            this.state.metaTransactionsEnabled && !this.state.actionProxyContract[this.state.action].approved && `Please either enable the Smart-Contract to enjoy gas-less ${this.state.action} or just disable meta-tx.`\n                                          }\n                                        </Text>\n                                      )\n                                }\n                                <Checkbox\n                                  mt={2}\n                                  required={false}\n                                  checked={this.state.metaTransactionsEnabled}\n                                  onChange={e => this.toggleMetaTransactionsEnabled(e.target.checked)}\n                                  label={`${this.functionsUtil.capitalize(this.state.action)} with Meta-Transaction`}\n                                />\n                              </DashboardCard>\n                            ) : (erc20ForwarderEnabled && !showBuyFlow && !this.state.contractPaused) && (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  my: 3,\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                  flexDirection: 'column',\n                                  justifyContent: 'center',\n                                }}\n                              >\n                                <Text\n                                  mb={2}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  How do you prefer to pay gas fees for this {this.state.action}?\n                                </Text>\n                                <Flex\n                                  width={[1, 0.7]}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'space-between'}\n                                >\n                                  <CardIconButton\n                                    {...this.props}\n                                    cardProps={{\n                                      py: 2,\n                                      px: [2, 3],\n                                      width: 0.48\n                                    }}\n                                    textProps={{\n                                      ml: [1, 2],\n                                    }}\n                                    text={this.props.selectedToken}\n                                    isActive={this.state.erc20ForwarderEnabled}\n                                    imageProps={{\n                                      height: this.props.isMobile ? '1.4em' : '1.8em',\n                                      width: this.props.isMobile ? '1.4em' : '1.8em'\n                                    }}\n                                    image={`/images/tokens/${this.props.selectedToken}.svg`}\n                                    handleClick={e => this.toggleErc20ForwarderEnabled(true)}\n                                  />\n                                  <CardIconButton\n                                    {...this.props}\n                                    cardProps={{\n                                      py: 2,\n                                      px: [2, 3],\n                                      width: 0.48\n                                    }}\n                                    textProps={{\n                                      ml: [1, 2],\n                                    }}\n                                    text={'ETH'}\n                                    isActive={!this.state.erc20ForwarderEnabled}\n                                    imageProps={{\n                                      height: this.props.isMobile ? '1.4em' : '1.8em',\n                                      width: this.props.isMobile ? '1.4em' : '1.8em'\n                                    }}\n                                    image={`/images/tokens/ETH.svg`}\n                                    handleClick={e => this.toggleErc20ForwarderEnabled(false)}\n                                  />\n                                </Flex>\n                                {\n                                  this.state.erc20ForwarderEnabled && this.state.txError[this.state.action] && (\n                                    <Text\n                                      mt={2}\n                                      fontSize={1}\n                                      color={'red'}\n                                      textAlign={'center'}\n                                    >\n                                      The meta-transaction cannot be executed due to insufficient funds, fund your wallet or select ETH and try again.\n                                  </Text>\n                                  )\n                                }\n                                {\n                                  /*\n                                  <Text\n                                    mt={2}\n                                    fontSize={'11px'}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    Powered by <ExtLink fontSize={'11px'} href={'https://biconomy.io'}>Biconomy</ExtLink>\n                                  </Text>\n                                  */\n                                }\n                              </DashboardCard>\n                            )\n                          }\n                          {\n                            (this.state.minAmountForMintReached && this.state.action === 'deposit') && (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  mt: 3\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    color={'cellText'}\n                                    name={'InfoOutline'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    fontSize={2}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    By depositing more than {this.functionsUtil.formatMoney(this.state.minAmountForMint)}$ {this.state.showPoolPerc ? `(${this.state.minAmountForMint.div(this.state.totalAUM).times(100).toFixed(0)}% of the pool)` : null} the pool will be automatically rebalanced, gas cost may be higher.\n                                </Text>\n                                </Flex>\n                              </DashboardCard>\n                            )\n                          }\n                          {\n                            showBatchDeposit ? (\n                              <Flex\n                                p={2}\n                                mt={3}\n                                width={1}\n                                borderRadius={2}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                                backgroundColor={'DashboardCard'}\n                                border={`1px solid ${this.props.theme.colors.primary}`}\n                              >\n                                <Link\n                                  textAlign={'center'}\n                                  hoverColor={'primary'}\n                                  href={`/#/dashboard/tools/${batchDepositInfo.route}/${this.props.tokenConfig.idle.token}`}\n                                >\n                                  Gas fees too high? Save gas with our Batch Deposit!\n                                </Link>\n                                <Icon\n                                  ml={1}\n                                  size={'1em'}\n                                  color={'primary'}\n                                  name={'LocalGasStation'}\n                                />\n                              </Flex>\n                            ) : showETHWrapper ? (\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <DashboardCard\n                                  cardProps={{\n                                    py: 3,\n                                    px: 2,\n                                    mt: 3,\n                                    display: 'flex',\n                                    alignItems: 'center',\n                                    flexDirection: 'column',\n                                    justifyContent: 'center',\n                                    pb: this.state.showAdvancedOptions ? 3 : 2,\n                                  }}\n                                >\n                                  <Flex\n                                    alignItems={'center'}\n                                    justifyContent={'row'}\n                                  >\n                                    <Checkbox\n                                      required={false}\n                                      checked={this.state.showETHWrapperEnabled}\n                                      label={`Convert your ETH to WETH`}\n                                      onChange={e => this.toggleShowETHWrapper(e.target.checked)}\n                                    />\n                                  </Flex>\n                                </DashboardCard>\n                                {\n                                  this.state.showETHWrapperEnabled &&\n                                  <ETHWrapperComponent\n                                    {...this.props}\n                                    action={'wrap'}\n                                    fullWidth={true}\n                                    toolProps={ethWrapperInfo.props}\n                                  />\n                                }\n                              </Flex>\n                            ) : showPolygonBridgeBanner && (\n                              <Flex\n                                p={2}\n                                mt={3}\n                                width={1}\n                                borderRadius={2}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                                backgroundColor={'DashboardCard'}\n                                border={`1px solid ${this.props.theme.colors.primary}`}\n                              >\n                                <Image\n                                  height={'1.2em'}\n                                  src={polygonBridgeInfo.image}\n                                />\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <Link\n                                    textAlign={'center'}\n                                    hoverColor={'primary'}\n                                    href={`/#/dashboard/tools/${polygonBridgeInfo.route}/${this.props.selectedToken}`}\n                                  >\n                                    Use the {polygonBridgeInfo.label} to deposit your {this.props.selectedToken}\n                                  </Link>\n                                  <Icon\n                                    ml={1}\n                                    size={'1em'}\n                                    color={'primary'}\n                                    name={'ArrowForward'}\n                                  />\n                                </Flex>\n                              </Flex>\n                            )\n                          }\n                          {\n                            showRedeemCurve && this.state.canRedeem && (\n                              <Flex\n                                width={1}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <DashboardCard\n                                  isRainbow={true}\n                                  cardProps={{\n                                    py: 3,\n                                    px: 2,\n                                    mt: 3,\n                                    display: 'flex',\n                                    alignItems: 'center',\n                                    flexDirection: 'column',\n                                    justifyContent: 'center',\n                                  }}\n                                >\n                                  <Flex\n                                    width={1}\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <Image\n                                      height={'1.8em'}\n                                      src={curveConfig.params.image}\n                                    />\n                                    <Text\n                                      mt={2}\n                                      px={2}\n                                      fontSize={1}\n                                      color={'dark-gray'}\n                                      textAlign={'center'}\n                                    >\n                                      Redeem your tokens from the Curve Pool.\n                                    <Link\n                                        ml={1}\n                                        mainColor={'primary'}\n                                        hoverColor={'primary'}\n                                        onClick={e => this.props.openTooltipModal('How Curve works', this.functionsUtil.getGlobalConfig(['messages', 'curveInstructions']))}\n                                      >\n                                        Read More\n                                    </Link>\n                                    </Text>\n                                    {\n                                      this.state.canRedeem &&\n                                      <Checkbox\n                                        mt={2}\n                                        required={false}\n                                        label={`Redeem from Curve`}\n                                        checked={this.state.redeemCurveEnabled}\n                                        onChange={e => this.toggleRedeemCurve(e.target.checked)}\n                                      />\n                                    }\n                                  </Flex>\n                                </DashboardCard>\n                                {\n                                  this.canRedeem &&\n                                  <Link\n                                    textAlign={'center'}\n                                    hoverColor={'primary'}\n                                    onClick={e => this.setShowRedeemFlow(true)}\n                                  >\n                                    I just want to redeem my {this.props.selectedToken}\n                                  </Link>\n                                }\n                              </Flex>\n                            )\n                          }\n                          {\n                            (this.state.contractPaused && this.state.action === 'deposit') ? (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  mt: 3\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    name={'Warning'}\n                                    color={'cellText'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    fontSize={2}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    Deposits for {this.props.selectedToken} are temporarily unavailable due to Smart-Contract maintenance. Redeems are always available.\n                                </Text>\n                                </Flex>\n                              </DashboardCard>\n                            ) : (!this.state.tokenApproved && this.state.action === 'deposit' && !this.state.showETHWrapperEnabled && !isDepositDisabled) ? (\n                              <DashboardCard\n                                isDisabled={isDepositDisabled}\n                                cardProps={{\n                                  p: 3,\n                                  mt: 3\n                                }}\n                              >\n                                {\n                                  this.state.processing['approve'] && this.state.processing['approve'].loading ? (\n                                    <Flex\n                                      flexDirection={'column'}\n                                    >\n                                      <TxProgressBar\n                                        {...this.props}\n                                        waitText={`Approve estimated in`}\n                                        endMessage={`Finalizing approve request...`}\n                                        hash={this.state.processing['approve'].txHash}\n                                        cancelTransaction={this.cancelTransaction.bind(this)}\n                                      />\n                                    </Flex>\n                                  ) : (\n                                    <Flex\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        name={'LockOpen'}\n                                        color={'cellText'}\n                                      />\n                                      <Text\n                                        mt={3}\n                                        fontSize={2}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        {\n                                          this.state.depositCurveEnabled ?\n                                            `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.`\n                                            : useMetaTx ?\n                                              `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle using Meta-Transaction you need to approve our Smart-Contract first.`\n                                            :\n                                              `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle you need to approve our Smart-Contract first.`\n                                        }\n                                      </Text>\n                                      <RoundButton\n                                        buttonProps={{\n                                          mt: 3,\n                                          width: [1, 1 / 2]\n                                        }}\n                                        handleClick={this.approveToken.bind(this)}\n                                      >\n                                        Approve\n                                      </RoundButton>\n                                    </Flex>\n                                  )\n                                }\n                              </DashboardCard>\n                            ) : (!showBuyFlow && canPerformAction) && (\n                              !this.state.processing[this.state.action].loading ? (\n                                <Flex\n                                  mt={2}\n                                  flexDirection={'column'}\n                                >\n                                  {\n                                    showActionFlow && (\n                                      <Flex\n                                        mb={3}\n                                        width={1}\n                                        flexDirection={'column'}\n                                      >\n                                        {\n                                          (totalBalance || this.props.tokenFeesPercentage) && (\n                                            <Box\n                                              mb={1}\n                                              width={1}\n                                            >\n                                              {\n                                                this.state.showMaxSlippage && showCurveSlippage && (\n                                                  <Box\n                                                    mb={2}\n                                                    width={1}\n                                                  >\n                                                    <Flex\n                                                      alignItems={'center'}\n                                                      flexDirection={'row'}\n                                                    >\n                                                      <Text>\n                                                        Choose max slippage:\n                                                    </Text>\n                                                      <Tooltip\n                                                        placement={'top'}\n                                                        message={`Max additional slippage on top of the one shown below`}\n                                                      >\n                                                        <Icon\n                                                          ml={1}\n                                                          size={'1em'}\n                                                          color={'cellTitle'}\n                                                          name={\"InfoOutline\"}\n                                                        />\n                                                      </Tooltip>\n                                                    </Flex>\n                                                    <Flex\n                                                      mt={2}\n                                                      alignItems={'center'}\n                                                      flexDirection={'row'}\n                                                      justifyContent={'space-between'}\n                                                    >\n                                                      {\n                                                        [0.2, 0.5, 1, 5].map(slippage => (\n                                                          <FastBalanceSelector\n                                                            cardProps={{\n                                                              p: 1\n                                                            }}\n                                                            textProps={{\n                                                              fontSize: 1\n                                                            }}\n                                                            percentage={slippage}\n                                                            key={`selector_${slippage}`}\n                                                            onMouseDown={() => this.setMaxSlippage(slippage)}\n                                                            isActive={this.state.maxSlippage === parseFloat(slippage)}\n                                                          />\n                                                        ))\n                                                      }\n                                                    </Flex>\n                                                  </Box>\n                                                )\n                                              }\n                                              <Flex\n                                                width={1}\n                                                alignItems={'center'}\n                                                flexDirection={'row'}\n                                                justifyContent={'space-between'}\n                                              >\n                                                {\n                                                  showCurveSlippage ? (\n                                                    <Flex\n                                                      width={1}\n                                                      maxWidth={'50%'}\n                                                      alignItems={'center'}\n                                                      flexDirection={'row'}\n                                                    >\n                                                      <Text\n                                                        fontSize={1}\n                                                        fontWeight={3}\n                                                        textAlign={'right'}\n                                                        style={{\n                                                          whiteSpace: 'nowrap'\n                                                        }}\n                                                        color={this.state.depositCurveSlippage.gt(0) ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed}\n                                                      >\n                                                        {\n                                                          parseFloat(this.state.depositCurveSlippage.times(100).toFixed(2)) === 0 ?\n                                                            'No Slippage'\n                                                            : `${this.state.depositCurveSlippage.gt(0) ? 'Slippage: ' : 'Bonus: '} ${this.state.depositCurveSlippage.times(100).abs().toFixed(2)}%`\n                                                        }\n                                                      </Text>\n                                                      <Tooltip\n                                                        placement={'top'}\n                                                        message={this.functionsUtil.getGlobalConfig(['messages', 'curveBonusSlippage'])}\n                                                      >\n                                                        <Icon\n                                                          ml={1}\n                                                          size={'1em'}\n                                                          color={'cellTitle'}\n                                                          name={\"InfoOutline\"}\n                                                        />\n                                                      </Tooltip>\n                                                      <Link\n                                                        ml={1}\n                                                        color={'copyColor'}\n                                                        hoverColor={'primary'}\n                                                        onClick={this.showMaxSlippage}\n                                                      >\n                                                        change\n                                                    </Link>\n                                                    </Flex>\n                                                  ) : this.props.tokenFeesPercentage && (\n                                                    <Flex\n                                                      alignItems={'center'}\n                                                      flexDirection={'row'}\n                                                    >\n                                                      <Text\n                                                        fontSize={1}\n                                                        fontWeight={3}\n                                                        color={'dark-gray'}\n                                                        textAlign={'right'}\n                                                        hoverColor={'copyColor'}\n                                                      >\n                                                        Performance fee: {this.props.tokenFeesPercentage.times(100).toFixed(2)}%\n                                                    </Text>\n                                                      <Tooltip\n                                                        placement={'top'}\n                                                        message={this.functionsUtil.getGlobalConfig(['messages', 'performanceFee'])}\n                                                      >\n                                                        <Icon\n                                                          ml={1}\n                                                          size={'1em'}\n                                                          color={'cellTitle'}\n                                                          name={\"InfoOutline\"}\n                                                        />\n                                                      </Tooltip>\n                                                    </Flex>\n                                                  )\n                                                }\n                                                {\n                                                  totalBalance && (\n                                                    <Link\n                                                      fontSize={1}\n                                                      fontWeight={3}\n                                                      color={'dark-gray'}\n                                                      textAlign={'right'}\n                                                      hoverColor={'copyColor'}\n                                                      onClick={(e) => this.setFastBalanceSelector(100)}\n                                                    >\n                                                      {totalBalance.toFixed(6)} {this.props.selectedToken}\n                                                    </Link>\n                                                  )\n                                                }\n                                              </Flex>\n                                            </Box>\n                                          )\n                                        }\n                                        <Input\n                                          min={0}\n                                          type={\"number\"}\n                                          required={true}\n                                          height={'3.4em'}\n                                          borderRadius={2}\n                                          fontWeight={500}\n                                          borderColor={'cardBorder'}\n                                          backgroundColor={'cardBg'}\n                                          boxShadow={'none !important'}\n                                          placeholder={`Insert amount`}\n                                          onChange={this.changeInputValue.bind(this)}\n                                          border={`1px solid ${this.props.theme.colors.divider}`}\n                                          value={this.state.inputValue[this.state.action] !== null ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]).toFixed() : ''}\n                                        />\n                                        <Flex\n                                          mt={2}\n                                          alignItems={'center'}\n                                          flexDirection={'row'}\n                                          justifyContent={'space-between'}\n                                        >\n                                          {\n                                            [25, 50, 75, 100].map(percentage => (\n                                              <FastBalanceSelector\n                                                percentage={percentage}\n                                                key={`selector_${percentage}`}\n                                                onMouseDown={() => this.setFastBalanceSelector(percentage)}\n                                                isActive={this.state.fastBalanceSelector[this.state.action] === parseInt(percentage)}\n                                              />\n                                            ))\n                                          }\n                                        </Flex>\n                                      </Flex>\n                                    )\n                                  }\n                                  {\n                                    canPerformAction && (\n                                      <Flex\n                                        justifyContent={'center'}\n                                        mt={redeemGovTokens ? 2 : 0}\n                                      >\n                                        <RoundButton\n                                          buttonProps={{\n                                            width: 'auto',\n                                            minWidth: [1, 1 / 2],\n                                            style: {\n                                              textTransform: 'capitalize'\n                                            },\n                                            disabled: this.state.buttonDisabled\n                                          }}\n                                          handleClick={this.state.buttonDisabled ? null : this.executeAction.bind(this)}\n                                        >\n                                          {this.state.action}{redeemGovTokens ? ' Gov Tokens' : '' /*(depositCurve ? ' in Curve' : '')*/}\n                                        </RoundButton>\n                                      </Flex>\n                                    )\n                                  }\n                                </Flex>\n                              ) : this.state.loadingErc20ForwarderTx ? (\n                                <Flex\n                                  mt={3}\n                                  flexDirection={'column'}\n                                >\n                                  <FlexLoader\n                                    flexProps={{\n                                      flexDirection: 'row'\n                                    }}\n                                    loaderProps={{\n                                      size: '25px',\n                                    }}\n                                    textProps={{\n                                      ml: 2\n                                    }}\n                                    text={this.state.erc20ForwarderTx ? (this.state.signedParameters ? 'Please Sign the Transaction...' : 'Please Sign the Permit...') : 'Calculating transaction fees...'}\n                                  />\n                                </Flex>\n                              ) : this.state.erc20ForwarderTx ? (\n                                <DashboardCard\n                                  cardProps={{\n                                    p: 3,\n                                    mt: 3,\n                                    display: 'flex',\n                                    alignItems: 'center',\n                                    flexDirection: 'column',\n                                    justifyContent: 'center',\n                                  }}\n                                >\n                                  <Text\n                                    mb={2}\n                                    fontSize={2}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    The required gas fee to perform the {this.state.action} is <strong>{this.state.erc20ForwarderTx.cost} {this.props.selectedToken}</strong>\n                                  </Text>\n                                  <Flex\n                                    width={1}\n                                    alignItems={'center'}\n                                    flexDirection={'row'}\n                                    justifyContent={'center'}\n                                  >\n                                    <DashboardCard\n                                      cardProps={{\n                                        mx: 2,\n                                        py: 2,\n                                        px: [2, 3],\n                                        width: 0.40,\n                                        onMouseDown: () => {\n                                          this.executeAction()\n                                        }\n                                      }}\n                                      isInteractive={true}\n                                    >\n                                      <Flex\n                                        my={1}\n                                        alignItems={'center'}\n                                        flexDirection={'row'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Flex\n                                          mr={2}\n                                          alignItems={'center'}\n                                          justifyContent={'center'}\n                                        >\n                                          <Icon\n                                            align={'center'}\n                                            color={'#00b84a'}\n                                            name={'CheckCircle'}\n                                            size={this.props.isMobile ? '1em' : '1.8em'}\n                                          />\n                                        </Flex>\n                                        <Text\n                                          fontWeight={3}\n                                          fontSize={[2, 3]}\n                                        >\n                                          Confirm\n                                      </Text>\n                                      </Flex>\n                                    </DashboardCard>\n                                    <DashboardCard\n                                      cardProps={{\n                                        mx: 2,\n                                        py: 2,\n                                        px: [2, 3],\n                                        width: 0.40,\n                                        onMouseDown: () => {\n                                          this.cancelTransaction();\n                                        }\n                                      }}\n                                      isInteractive={true}\n                                    >\n                                      <Flex\n                                        my={1}\n                                        alignItems={'center'}\n                                        flexDirection={'row'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Flex\n                                          mr={2}\n                                          alignItems={'center'}\n                                          justifyContent={'center'}\n                                        >\n                                          <Icon\n                                            name={'Cancel'}\n                                            align={'center'}\n                                            color={'#e13636'}\n                                            size={this.props.isMobile ? '1em' : '1.8em'}\n                                          />\n                                        </Flex>\n                                        <Text\n                                          fontWeight={3}\n                                          fontSize={[2, 3]}\n                                        >\n                                          Decline\n                                      </Text>\n                                      </Flex>\n                                    </DashboardCard>\n                                  </Flex>\n                                </DashboardCard>\n                              ) : (\n                                <Flex\n                                  mt={3}\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <TxProgressBar\n                                    {...this.props}\n                                    cancelTransaction={this.cancelTransaction.bind(this)}\n                                    hash={this.state.processing[this.state.action].txHash}\n                                    endMessage={`Finalizing ${this.state.action} request...`}\n                                    waitText={`${this.functionsUtil.capitalize(this.state.action)} estimated in`}\n                                  />\n                                </Flex>\n                              )\n                            )\n                          }\n                        </Box>\n                      )\n                    ) : (\n                      <Flex\n                        mt={4}\n                        flexDirection={'column'}\n                      >\n                        <FlexLoader\n                          flexProps={{\n                            flexDirection: 'row'\n                          }}\n                          loaderProps={{\n                            size: '30px'\n                          }}\n                          textProps={{\n                            ml: 2\n                          }}\n                          text={'Loading asset info...'}\n                        />\n                      </Flex>\n                    )\n                  }\n                </Migrate>\n              )\n          }\n        </Flex>\n        {\n          /*\n          showDepositCurve && this.state.depositCurveEnabled ? (\n            <CurveDeposit\n              {...this.props}\n            />\n          ) :\n          */\n          showRedeemCurve && this.state.redeemCurveEnabled && (\n            <Box\n              mt={3}\n              width={1}\n            >\n              <CurveRedeem\n                {...this.props}\n              />\n            </Box>\n          )\n        }\n        {\n          showBuyFlow ? (\n            <Flex\n              mt={3}\n              width={[1,0.5]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <BuyModal\n                {...this.props}\n                showInline={true}\n                availableMethods={[]}\n                buyToken={this.props.selectedToken}\n              />\n            </Flex>\n          ) : showPolygonBridge && (\n            <Flex\n              mt={3}\n              width={[1,0.36]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <DashboardCard\n                cardProps={{\n                  p:3\n                }}\n              >\n                <Flex\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                >\n                  <Image\n                    height={'2em'}\n                    src={polygonBridgeInfo.image}\n                  />\n                  <Text\n                    mt={1}\n                    fontSize={2}\n                    color={'cellText'}\n                    textAlign={'center'}\n                  >\n                    <strong>You don't have enough {buyToken} in your wallet!</strong><br />Use the {polygonBridgeInfo.label} to transfer your {buyToken} in Polygon.\n                  </Text>\n                  <RoundButton\n                    buttonProps={{\n                      mt:2,\n                      width:[1,1/2]\n                    }}\n                    handleClick={ e => this.props.goToSection(`tools/${polygonBridgeInfo.route}/${buyToken}`)}\n                  >\n                    Deposit {buyToken}\n                  </RoundButton>\n                </Flex>\n              </DashboardCard>\n            </Flex>\n          )\n        }\n        <ShareModal\n          confettiEnabled={true}\n          icon={`images/medal.svg`}\n          title={`Congratulations!`}\n          account={this.props.account}\n          closeModal={this.resetModal}\n          tokenName={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'share'}\n          text={`You have successfully deposited in Idle!<br />Enjoy <strong>${this.state.tokenAPY}% APY</strong> on your <strong>${this.props.selectedToken}</strong>!`}\n          tweet={`I'm earning ${this.state.tokenAPY}% APY on my ${this.props.selectedToken} with @idlefinance! Go to ${this.functionsUtil.getGlobalConfig(['baseURL'])} and start earning now from your idle tokens!`}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default DepositRedeem;\n","import theme from '../theme';\nimport { Bar } from '@nivo/bar';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Text, Input, Icon, Tooltip } from \"rimble-ui\";\n\nclass EstimatedEarnings extends Component {\n\n  state = {\n    chartData:null,\n    chartProps:null,\n    inputValue:1000,\n    maxInputValue:999999999999999\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    this.loadChart();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged){\n      this.loadChart();\n    }\n  }\n\n  async loadChart(){\n\n    const tokenApy = await this.functionsUtil.getTokenApy(this.props.tokenConfig);\n\n    if (!tokenApy){\n      return false;\n    }\n\n    const amount = this.functionsUtil.BNify(this.state.inputValue);\n    const earningsYear = amount.times(this.props.tokenApy.div(100));\n\n    const amountMonth = parseFloat(earningsYear.div(12));\n    const amount3Months = parseFloat(earningsYear.div(4));\n    const amount6Months = parseFloat(earningsYear.div(2));\n    const amountYear = parseFloat(earningsYear.div(1));\n\n    const chartData = [\n      {\n        perc:1/12,\n        label:'MONTH',\n        value:amountMonth,\n        month:amountMonth,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken.toUpperCase(),'color','rgb']).join(','),\n        monthColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken.toUpperCase(),'color','hsl']).join(',')+')',\n      },\n      {\n        perc:3/12,\n        label:'3 MONTHS',\n        value:amount3Months,\n        month3:amount3Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken.toUpperCase(),'color','rgb']).join(','),\n        month3Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken.toUpperCase(),'color','hsl']).join(',')+')',\n      },\n      {\n        perc:6/12,\n        label:'6 MONTHS',\n        value:amount6Months,\n        month6:amount6Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken.toUpperCase(),'color','rgb']).join(','),\n        month6Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken.toUpperCase(),'color','hsl']).join(',')+')',\n      },\n      {\n        perc:1,\n        label:'YEAR',\n        year:amountYear,\n        value:amountYear,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken.toUpperCase(),'color','rgb']).join(','),\n        yearColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken.toUpperCase(),'color','hsl']).join(',')+')',\n      }\n    ];\n\n    let labelTextColorModifiers = this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken.toUpperCase(),'chart','labelTextColorModifiers']);\n\n    const maxGridLines = 4;\n    const gridYStep = amountYear/maxGridLines;\n    const gridYValues = [0];\n    for (let i=1;i<=maxGridLines;i++){\n      const gridYValue = i*gridYStep;\n      gridYValues.push(gridYValue);\n    }\n\n    const chartProps = {\n      padding: 0.2,\n      animate: false,\n      indexBy: 'label',\n      // enableLabel: false,\n      labelSkipWidth: 16,\n      labelSkipHeight: 16,\n      keys: ['month','month3','month6','year'],\n      colors: ({ id, data }) => data[`${id}Color`],\n      label: d => this.functionsUtil.abbreviateNumber(d.value,2,4)+' '+this.props.selectedToken,\n      labelTextColor: labelTextColorModifiers ? { from: 'color', modifiers: [ labelTextColorModifiers ] } : null,\n      isInteractive:false,\n      minValue:0,\n      gridYValues,\n      // maxValue:amountYear,\n      axisLeft:{\n        format: v => this.functionsUtil.abbreviateNumber(v,1,3),\n        tickValues:gridYValues,\n        orient: 'left',\n        tickSize: 0,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendPosition: 'middle'\n      },\n      axisBottom:{\n        legend: '',\n        tickSize:0,\n        tickPadding: 15,\n        orient: 'bottom',\n      },\n      theme:{\n        labels:{\n          text:{\n            fontSize:15,\n            fontWeight:600,\n            fill:theme.colors.counter,\n            fontFamily: theme.fonts.sansSerif\n          }\n        },\n        axis: {\n          ticks: {\n            text: {\n              fontSize:14,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '9 5'\n          }\n        },\n      },\n      margin: this.props.isMobile ? { top: 0, right: 0, bottom: 30, left: 0 } : { top: 10, right: 0, bottom: 50, left: 65 }\n    }\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  changeInputValue(e){\n    let inputValue = e.target.value.length && !isNaN(e.target.value) ? Math.min(this.state.maxInputValue,parseFloat(e.target.value)) : 0;\n    inputValue = this.functionsUtil.BNify(inputValue);\n    this.setState({\n      inputValue\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const showAPYDisclaimer = idleTokenEnabled && this.functionsUtil.getGlobalConfig(['govTokens','IDLE','showAPR']);\n\n    return (\n      <DashboardCard\n        cardProps={{\n          p:[3,4]\n        }}\n      >\n        <Flex\n          width={1}\n          flexDirection={['column','row']}\n        >\n          <Flex\n            width={[1,0.3]}\n            flexDirection={'column'}\n            justifyContent={'flex-start'}\n          >\n            <Flex\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <AssetField\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n                fieldInfo={{\n                  name:'icon',\n                  props:{\n                    mb:2,\n                    height:'2.5em'\n                  }\n                }}\n              />\n              <Text\n                fontSize={2}\n                color={'cellText'}\n                textAlign={'center'}\n              >\n                Set the amount and see your estimated earnings on time based on the current APY: { this.props.tokenApy ? `${this.props.tokenApy.toFixed(2)}%` : null}\n                {\n                  showAPYDisclaimer && \n                    <Flex\n                      style={{\n                        display:'inline-flex',\n                        verticalAlign:'middle'\n                      }}\n                    >\n                      <Tooltip\n                        placement={'top'}\n                        message={this.functionsUtil.getGlobalConfig(['messages','apyLong'])}\n                      >\n                        <Icon\n                          ml={1}\n                          name={\"Info\"}\n                          size={'1em'}\n                          color={'cellTitle'}\n                        />\n                      </Tooltip>\n                    </Flex>\n                }\n              </Text>\n            </Flex>\n            <Flex\n              mt={3}\n              flexDirection={'column'}\n            >\n              <Input\n                min={0}\n                type={\"number\"}\n                required={true}\n                borderRadius={2}\n                fontWeight={500}\n                textAlign={'center'}\n                height={['3em','3.4em']}\n                borderColor={'cardBorder'}\n                boxShadow={'none !important'}\n                max={this.state.maxInputValue}\n                backgroundColor={'cardBgHover'}\n                onChange={this.changeInputValue.bind(this)}\n                border={`1px solid ${theme.colors.divider}`}\n                placeholder={`Insert ${this.props.selectedToken.toUpperCase()} amount`}\n                value={this.state.inputValue && !isNaN(this.state.inputValue) ? this.state.inputValue : ''}\n              />\n            </Flex>\n            <Flex\n              mt={3}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                buttonProps={{\n                  width:[1,1/2],\n                }}\n                handleClick={this.loadChart.bind(this)}\n              >\n                CALCULATE\n              </RoundButton>\n            </Flex>\n          </Flex>\n          <Flex\n            mt={[3,0]}\n            width={[1,0.7]}\n            id={'estimated-earnings-chart'}\n          >\n            {\n              this.props.isMobile ? (\n                <Flex\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  {\n                    this.state.chartData !== null && this.state.chartData.map((v,index) => (\n                      <Flex\n                        py={2}\n                        my={2}\n                        width={1}\n                        flexDirection={'row'}\n                        key={`earnings_${index}`}\n                      >\n                        <Flex\n                          width={0.35}\n                          alignItems={'center'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            color={'legend'}\n                          >\n                            {v.label}\n                          </Text>\n                        </Flex>\n                        <Flex\n                          width={0.65}\n                          position={'relative'}\n                          alignItems={'center'}\n                          minHeight={['20px','35px']}\n                          justifyContent={'center'}\n                        >\n                          <Flex\n                            zIndex={1}\n                            position={'relative'}\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Text\n                              fontSize={1}\n                              fontWeight={3}\n                              color={'counter'}\n                            >\n                              {this.functionsUtil.abbreviateNumber(v.value,2,4)} {this.props.selectedToken}\n                            </Text>\n                          </Flex>\n                          <Flex\n                            right={0}\n                            width={v.perc}\n                            position={'absolute'}\n                            height={['20px','35px']}\n                            borderRadius={['20px 0 0 20px','35px 0 0 35px']}\n                            style={{background:`linear-gradient(-90deg, rgba(${v.color},0) 0%, rgba(${v.color},1) 100%)`}}\n                          ></Flex>\n                        </Flex>\n                      </Flex>\n                    ))\n                  }\n                </Flex>\n              ) : (\n                <GenericChart\n                  type={Bar}\n                  height={250}\n                  showLoader={true}\n                  {...this.state.chartProps}\n                  data={this.state.chartData}\n                  parentId={'estimated-earnings-chart'}\n                />\n              )\n            }\n          </Flex>\n        </Flex>\n      </DashboardCard>\n    );\n  }\n}\n\nexport default EstimatedEarnings;","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport { Box, Flex, Icon, Text } from \"rimble-ui\";\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport AssetsList from '../AssetsList/AssetsList';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport FundsOverview from '../FundsOverview/FundsOverview';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport DepositRedeem from '../DepositRedeem/DepositRedeem';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport ActiveCoverages from '../ActiveCoverages/ActiveCoverages';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport EstimatedEarnings from '../EstimatedEarnings/EstimatedEarnings';\n\nclass AssetPage extends Component {\n\n  state = {\n    tokenApy:{},\n    tokenFees:{},\n    tokenBalance:{},\n    tokenApproved:{},\n    activeModal:null,\n    idleTokenPrice:{},\n    userHasFunds:false,\n    govTokensBalance:{},\n    idleTokenBalance:{},\n    redeemableBalance:{},\n    govTokensDisabled:{},\n    availableGovTokens:{},\n    tokenFeesPercentage:{},\n    componentMounted:false,\n    govTokensUserBalances:{}\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadTokensInfo(){\n\n    if (!this.props.account || !this.props.contractsInitialized){\n      return this.setState({\n        userHasFunds:false\n      });\n    }\n\n    const newState = {...this.state};\n    // await this.functionsUtil.asyncForEach(Object.keys(this.props.availableTokens),async (token) => {\n    const token = this.props.selectedToken;\n    const tokenConfig = this.props.availableTokens[token];\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[token] = tokenConfig;\n\n    const [\n      tokenFeesPercentage,\n      idleTokenPrice,\n      tokenApy,\n      tokenBalance,\n      tokenFees,\n      idleTokenBalance,\n      tokenApproved,\n      govTokensUserBalances,\n      govTokensBalance\n    ] = await Promise.all([\n      this.functionsUtil.getTokenFees(tokenConfig),\n      this.functionsUtil.getIdleTokenPrice(tokenConfig),\n      this.functionsUtil.getTokenApy(this.props.tokenConfig),\n      this.functionsUtil.getTokenBalance(token,this.props.account),\n      this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n      this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n      this.functionsUtil.checkTokenApproved(token,tokenConfig.idle.address,this.props.account),\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,null,null),\n      this.functionsUtil.getGovTokensUserTotalBalance(this.props.account,govTokenAvailableTokens,'DAI',false)\n    ]);\n\n    newState.tokenFees[token] = tokenFees;\n    newState.tokenBalance[token] = tokenBalance;\n    newState.tokenApproved[token] = tokenApproved;\n    newState.idleTokenPrice[token] = idleTokenPrice;\n    newState.idleTokenBalance[token] = idleTokenBalance;\n    newState.govTokensBalance[token] = govTokensBalance;\n    newState.tokenFeesPercentage[token] = tokenFeesPercentage;\n    newState.govTokensUserBalances[token] = govTokensUserBalances;\n    newState.govTokensDisabled[token] = tokenConfig.govTokensDisabled;\n    newState.tokenApy[token] = tokenApy && !tokenApy.isNaN() ? tokenApy : null;\n    newState.redeemableBalance[token] = idleTokenBalance && idleTokenPrice ? idleTokenBalance.times(idleTokenPrice) : this.functionsUtil.BNify(0);\n    // });\n\n    newState.availableGovTokens = this.functionsUtil.getTokenGovTokens(this.props.tokenConfig);\n\n    // console.log('govTokensBalance',newState.govTokensBalance);\n    // console.log('availableGovTokens',newState.availableGovTokens);\n    // console.log('govTokensUserBalances',newState.govTokensUserBalances);\n\n    newState.componentMounted = true;\n    newState.userHasFunds = this.props.account && newState.idleTokenBalance[token] && this.functionsUtil.BNify(newState.idleTokenBalance[token]).gt(0);\n\n    // console.log('loadTokensInfo',this.props.account,this.props.contractsInitialized,newState);\n\n    this.setState(newState);\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n    window.loadTokensInfo = this.loadTokensInfo.bind(this);\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    const selectedTokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    const availableTokensChanged = JSON.stringify(prevProps.availableTokens) !== JSON.stringify(this.props.availableTokens);\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n    if (accountChanged || transactionsChanged || availableTokensChanged || selectedTokenChanged){\n      // console.log('AssetPage - availableTokensChanged',availableTokensChanged);\n      this.loadTokensInfo();\n    }\n  }\n\n  render() {\n\n    // const currentNetwork = this.functionsUtil.getRequiredNetwork();\n    const nexusMutualConfig = this.functionsUtil.getGlobalConfig(['tools','nexusMutual']);\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            <Breadcrumb\n              {...this.props}\n              isMobile={this.props.isMobile}\n              path={[this.props.selectedToken]}\n              handleClick={ e => this.props.goToSection(this.props.selectedStrategy) }\n              text={this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])}\n            />\n          </Flex>\n          <Flex\n            width={0.5}\n            justifyContent={'flex-end'}\n          >\n            <CardIconButton\n              icon={'Add'}\n              {...this.props}\n              text={'Add funds'}\n              handleClick={ e => this.setActiveModal('buy') }\n            />\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Deposit / Redeem\n        </Title>\n        {\n          /*\n          currentNetwork.id === 137 ? (\n            <Flex\n              width={1}\n              minHeight={'45vh'}\n              alignItems={'center'}\n              flexDirection={'row'}\n              justifyContent={'center'}\n            >\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  width:[1,0.5],\n                }}\n              >\n                <Flex\n                  aligItems={'center'}\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                >\n                  <Icon\n                    size={'2.3em'}\n                    color={'cellText'}\n                    name={'AccessTime'}\n                  />\n                  <Text\n                    mt={2}\n                    fontSize={2}\n                    color={'cellText'}\n                    textAlign={'center'}\n                  >\n                    Hang on, please!<br />The {this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])} strategy has not yet been activated in Polygon.\n                  </Text>\n                  <RoundButton\n                    buttonProps={{\n                      mt:3,\n                      width:[1,1/2]\n                    }}\n                    handleClick={e => this.props.goToSection(`stake`)}\n                  >\n                    Go to Staking\n                  </RoundButton>\n                </Flex>\n              </DashboardCard>\n            </Flex>\n          ) :\n          */\n          (\n            <>\n              <Flex\n                width={1}\n              >\n                <DepositRedeem\n                  {...this.props}\n                  tokenFees={this.state.tokenFees[this.props.selectedToken]}\n                  tokenBalance={this.state.tokenBalance[this.props.selectedToken]}\n                  tokenApproved={this.state.tokenApproved[this.props.selectedToken]}\n                  govTokensBalance={this.state.govTokensBalance[this.props.selectedToken]}\n                  idleTokenBalance={this.state.idleTokenBalance[this.props.selectedToken]}\n                  redeemableBalance={this.state.redeemableBalance[this.props.selectedToken]}\n                  tokenFeesPercentage={this.state.tokenFeesPercentage[this.props.selectedToken]}\n                  govTokensUserBalances={this.state.govTokensUserBalances[this.props.selectedToken]}\n                />\n              </Flex>\n              {\n                this.state.userHasFunds && nexusMutualConfig.enabled && Object.keys(nexusMutualConfig.props.availableTokens).includes(this.props.tokenConfig.idle.token) && (\n                  <Flex\n                    width={1}\n                    id={'active-coverages'}\n                    flexDirection={'column'}\n                  >\n                    <ActiveCoverages\n                      {...this.props}\n                      titleProps={{\n                        mb:3,\n                        mt:[3,4],\n                      }}\n                      title={'Coverage'}\n                      availableTokens={[this.props.tokenConfig.idle.token]}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        id={'no-active-cover'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        <DashboardCard\n                          cardProps={{\n                            py:3,\n                            px:[3,4],\n                            width:[1,'auto'],\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Icon\n                              my={[0,2]}\n                              size={'3em'}\n                              name={nexusMutualConfig.icon}\n                            />\n                            <Text\n                              mb={1}\n                              fontSize={[2,3]}\n                              fontWeight={500}\n                              textAlign={'center'}\n                            >\n                              You don't have an active coverage\n                            </Text>\n                            <Text\n                              mb={2}\n                              color={'link'}\n                              fontSize={[1,2]}\n                              fontWeight={500}\n                              textAlign={'center'}\n                            >\n                              {nexusMutualConfig.desc}\n                            </Text>\n                            <RoundButton\n                              buttonProps={{\n                                mt:1,\n                                width:'auto',\n                                minHeight:'40px',\n                                mainColor:'redeem',\n                                size:this.props.isMobile ? 'small' : 'medium'\n                              }}\n                              handleClick={ e => this.props.goToSection(`tools/${nexusMutualConfig.route}/deposit/${this.props.tokenConfig.idle.token}`) }\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <Text\n                                  color={'white'}\n                                  fontSize={[1,2]}\n                                  fontWeight={500}\n                                >\n                                  Get Covered\n                                </Text>\n                                <Icon\n                                  ml={1}\n                                  size={'1.3em'}\n                                  name={'KeyboardArrowRight'}\n                                />\n                              </Flex>\n                            </RoundButton>\n                          </Flex>\n                        </DashboardCard>\n                      </Flex>\n                    </ActiveCoverages>\n                  </Flex>\n                )\n              }\n              {\n                this.state.userHasFunds && this.props.account && (\n                  <Flex\n                    mb={[0,4]}\n                    width={1}\n                    flexDirection={'column'}\n                    id={'funds-overview-container'}\n                  >\n                    <Title my={[3,4]}>Funds Overview</Title>\n                    <FundsOverview\n                      {...this.props}\n                      tokenFees={this.state.tokenFees[this.props.selectedToken]}\n                    />\n                  </Flex>\n                )\n              }\n              {\n                this.state.userHasFunds && this.props.account && !this.state.govTokensDisabled[this.props.selectedToken] && Object.keys(this.state.availableGovTokens).length>0 && \n                  <Flex\n                    width={1}\n                    id={\"yield-farming\"}\n                    flexDirection={'column'}\n                  >\n                    <Title my={[3,4]}>Yield Farming</Title>\n                    <AssetsList\n                      enabledTokens={Object.keys(this.state.availableGovTokens)}\n                      cols={[\n                        {\n                          title:'TOKEN',\n                          props:{\n                            width:[0.30,0.15]\n                          },\n                          fields:[\n                            {\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:['1.4em','2.3em']\n                              }\n                            },\n                            {\n                              name:'tokenName'\n                            }\n                          ]\n                        },\n                        {\n                          mobile:false,\n                          title:'BALANCE',\n                          props:{\n                            width:[0.33, 0.25],\n                          },\n                          fields:[\n                            {\n                              name:'tokenBalance',\n                              props:{\n                                decimals: this.props.isMobile ? 6 : 8\n                              }\n                            }\n                          ]\n                        },\n                        {\n                          title:'REDEEMABLE',\n                          desc:this.functionsUtil.getGlobalConfig(['messages','govTokenRedeemableBalance']),\n                          props:{\n                            width:[0.35,0.30],\n                            justifyContent:['center','flex-start']\n                          },\n                          fields:[\n                            {\n                              name:'redeemableBalance',\n                              props:{\n                                decimals: this.props.isMobile ? 6 : 8\n                              }\n                            },\n                          ]\n                        },\n                        {\n                          title:'DISTRIBUTION',\n                          desc:this.functionsUtil.getGlobalConfig(['messages','userDistributionSpeed']),\n                          props:{\n                            width:[0.35,0.30],\n                          },\n                          fields:[\n                            {\n                              name:'userDistributionSpeed',\n                              props:{\n                                decimals:6\n                              }\n                            }\n                          ]\n                        },\n                        /*\n                        {\n                          title:'APR',\n                          desc:this.functionsUtil.getGlobalConfig(['messages','govTokenApr']),\n                          props:{\n                            width:[0.2,0.17],\n                          },\n                          fields:[\n                            {\n                              name:'apr',\n                            }\n                          ]\n                        },\n                        {\n                          title:'TOKEN PRICE',\n                          desc:this.functionsUtil.getGlobalConfig(['messages','tokenPrice']),\n                          mobile:false,\n                          props:{\n                            width: 0.17,\n                          },\n                          parentProps:{\n                            width:1,\n                            pr:[2,4]\n                          },\n                          fields:[\n                            {\n                              name:'tokenPrice',\n                              props:{\n                                unit:'$',\n                                unitPos:'left',\n                                unitProps:{\n                                  mr:1,\n                                  fontWeight:3,\n                                  fontSize:[0,2],\n                                  color:'cellText'\n                                }\n                              }\n                            }\n                          ]\n                        },\n                        */\n                      ]}\n                      {...this.props}\n                      availableTokens={this.state.availableGovTokens}\n                    />\n                  </Flex>\n              }\n              {\n              this.props.account && this.state.tokenApy[this.props.selectedToken] && \n                <Flex\n                  mb={[3,4]}\n                  width={1}\n                  flexDirection={'column'}\n                  id={'estimated-earnings-container'}\n                >\n                  <Title my={[3,4]}>Estimated earnings</Title>\n                  <EstimatedEarnings\n                    {...this.props}\n                    tokenApy={this.state.tokenApy[this.props.selectedToken]}\n                  />\n                </Flex>\n              }\n              {\n              this.props.account && \n                <Flex\n                  mb={[3,4]}\n                  width={1}\n                  flexDirection={'column'}\n                  id={'transactions-container'}\n                >\n                  <Title my={[3,4]}>Transactions</Title>\n                  <TransactionsList\n                    {...this.props}\n                    enabledTokens={[this.props.selectedToken]}\n                    cols={[\n                      {\n                        title: this.props.isMobile ? '' : 'HASH',\n                        props:{\n                          width:[0.15,0.24]\n                        },\n                        fields:[\n                          {\n                            name:'icon',\n                            props:{\n                              mr:[0,2]\n                            }\n                          },\n                          {\n                            name:'hash',\n                            mobile:false\n                          }\n                        ]\n                      },\n                      {\n                        title:'ACTION',\n                        mobile:false,\n                        props:{\n                          width:0.15,\n                        },\n                        fields:[\n                          {\n                            name:'action'\n                          }\n                        ]\n                      },\n                      {\n                        title:'DATE',\n                        props:{\n                          width:[0.32,0.23],\n                        },\n                        fields:[\n                          {\n                            name:'date'\n                          }\n                        ]\n                      },\n                      {\n                        title:'STATUS',\n                        props:{\n                          width:[0.18,0.22],\n                          justifyContent:['center','flex-start']\n                        },\n                        fields:[\n                          {\n                            name:'statusIcon',\n                            props:{\n                              mr:[0,2]\n                            }\n                          },\n                          {\n                            mobile:false,\n                            name:'status'\n                          }\n                        ]\n                      },\n                      {\n                        title:'AMOUNT',\n                        props:{\n                          width:0.19,\n                        },\n                        fields:[\n                          {\n                            name:'amount'\n                          },\n                        ]\n                      },\n                      {\n                        title:'ASSET',\n                        props:{\n                          width:[0.15,0.20],\n                          justifyContent:['center','flex-start']\n                        },\n                        fields:[\n                          {\n                            name:'tokenIcon',\n                            props:{\n                              mr:[0,2],\n                              height:['1.4em','1.6em']\n                            }\n                          },\n                          {\n                            mobile:false,\n                            name:'tokenName'\n                          },\n                        ]\n                      },\n                    ]}\n                  />\n                </Flex>\n              }\n            </>\n          )\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport { Text, Modal, Flex, Link } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass BetaModal extends React.Component {\n\n  state = {};\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    this.functionsUtil.setLocalStorage('betaApproved',true);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','650px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            pt={3}\n            iconHeight={'40px'}\n            title={'Beta Version'}\n            icon={'images/warning.svg'}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                fontSize={2}\n                textAlign={'left'}\n                color={'dark-gray'}\n              >\n                You're about to enter Idle Finance Beta Dashboard – this is the place where several un-audited and risky features are being tested!<br />Please use at your own risk, or visit the official website at <Link fontSize={2} mainColor={'primary'} hoverColor={'primary'} href={this.functionsUtil.getGlobalConfig(['baseURL'])}>{this.functionsUtil.getGlobalConfig(['baseURL'])}</Link>.\n              </Text>\n            </Flex>\n            <Flex\n              my={3}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                handleClick={this.closeModal}\n                buttonProps={{\n                  width:['100%','40%']\n                }}\n              >\n                Continue Anyway\n              </RoundButton>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default BetaModal;","import React, { Component } from 'react';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Box, Text, Icon, Tooltip, Link, Input } from \"rimble-ui\";\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\n\nclass CurveDeposit extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    depositSlippage:null,\n    redeemableBalance:null,\n    migrationContract:null,\n    curveTokensBalance:null,\n    migrationSucceeded:false,\n    fastBalanceSelector:null,\n    migrationContractApproved:false,\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    await this.initToken();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const idleTokenBalanceChanged = prevProps.idleTokenBalance !== this.props.idleTokenBalance;\n    if (accountChanged || idleTokenBalanceChanged){\n      await this.initToken();\n    }\n    \n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const inputValueChanged = this.state.inputValue !== prevState.inputValue;\n    if (inputValueChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  setInputValue = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    const inputValue = this.props.idleTokenBalance ? this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage) : null;\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    const buttonDisabled = !amount || amount.gt(this.state.idleTokenBalance);\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  approve = async () => {\n    const migrationContract = this.state.migrationContract;\n    if (migrationContract){\n\n      // Check if the migration contract is approved\n      const migrationContractApproved = await this.checkMigrationContractApproved();\n\n      if (!migrationContractApproved){\n\n        const callbackApprove = (tx,error) => {\n          // Send Google Analytics event\n          const eventData = {\n            eventAction: 'approve',\n            eventCategory: 'CurveDeposit',\n            eventLabel: tx ? tx.status : null\n          };\n\n          const txSucceeded = tx && tx.status === 'success';\n\n          // console.log('callbackApprove',tx,error);\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            migrationContractApproved: txSucceeded, // True\n            processing: {\n              ...prevState.processing,\n              txHash:null,\n              loading:false\n            }\n          }));\n\n          if (typeof this.props.callbackApprove === 'function' && txSucceeded){\n            this.props.callbackApprove(tx);\n          }\n\n          this.checkMigration();\n        };\n\n        const callbackReceiptApprove = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              txHash\n            }\n          }));\n        };\n\n        this.functionsUtil.enableERC20(this.props.selectedToken,migrationContract.address,callbackApprove,callbackReceiptApprove);\n\n        this.setState((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            txHash:null,\n            loading:true\n          },\n          migrationContractApproved:false\n        }));\n      } else {\n        this.setState({\n          migrationContractApproved:true\n        });\n      }\n    }\n  }\n\n  deposit = async () => {\n\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    if (!inputValue){\n      return false;\n    }\n\n    const callbackDeposit = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveDeposit`,\n        eventAction: this.props.selectedToken,\n        eventValue: inputValue.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackDeposit === 'function' && txSucceeded){\n        this.props.callbackDeposit(tx);\n      }\n    };\n\n    const callbackReceiptDeposit = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.migrationContract.name;\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n    const depositParams = await this.getMigrationParams(_amount);\n\n    this.props.contractMethodSendWrapper(contractName, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  cancelTransaction = async () => {\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  async getMigrationParams(toMigrate){\n    const migrationParams = [];\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.selectedToken]);\n\n    if (!curveTokenConfig){\n      return false;\n    }\n    \n    const migrationContractParams = curveTokenConfig.migrationParams;\n    if (migrationContractParams.n_coins){\n      const amounts = await this.functionsUtil.getCurveAmounts(this.props.selectedToken,toMigrate,true);\n      let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n\n      if (this.state.maxSlippage){\n        minMintAmount = this.functionsUtil.BNify(minMintAmount);\n        minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n        minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n      }\n\n      migrationParams.push(amounts);\n      migrationParams.push(minMintAmount);\n    }\n\n    return migrationParams;\n  }\n\n  async calculateSlippage(){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (inputValue){\n      let underlyingBalanceToDeposit = inputValue;\n      if (underlyingBalanceToDeposit){\n        const idleTokenPrice = await this.functionsUtil.getIdleTokenPrice(this.props.tokenConfig);\n        if (idleTokenPrice){\n          underlyingBalanceToDeposit = underlyingBalanceToDeposit.times(idleTokenPrice);\n        }\n      } else {\n        underlyingBalanceToDeposit = this.functionsUtil.BNify(0);\n      }\n\n      const normalizeIdleTokenBalance = this.functionsUtil.normalizeTokenAmount(underlyingBalanceToDeposit,this.props.tokenConfig.decimals);\n      let depositSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizeIdleTokenBalance);\n      if (depositSlippage){\n        depositSlippage = depositSlippage.times(100);\n      }\n\n      this.setState({\n        depositSlippage\n      });\n    }\n  }\n\n  async checkMigrationContractApproved(){\n    const migrationContract = this.state.migrationContract || await this.functionsUtil.getCurveSwapContract();\n    if (migrationContract){\n      return await this.functionsUtil.checkTokenApproved(this.props.tokenConfig.idle.token,migrationContract.address,this.props.account);\n    }\n    return false;\n  }\n\n  async initToken(){\n\n    // Init and check migration contract\n    const migrationContract = await this.functionsUtil.getCurveSwapContract();\n    const migrationContractApproved = await this.checkMigrationContractApproved();\n\n    this.setState({\n      migrationContract,\n      migrationContractApproved\n    });\n  }\n\n  approveCallback = () => {\n    this.initToken();\n  }\n\n  migrationCallback = () => {\n    this.setState({\n      migrationSucceeded:true\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken){\n      return null;\n    }\n\n    // const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const hasCurveTokens = this.state.curveTokensBalance && this.state.curveTokensBalance.gt(0);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n            {\n              this.props.idleTokenBalance && this.props.idleTokenBalance.gt(0) && (\n                <Box\n                  width={1}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:3,\n                      px:[2,4]\n                    }}\n                  >\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    > \n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ this.state.migrationContractApproved ? 'CheckBox' : 'LooksOne'}\n                          color={ this.state.migrationContractApproved ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Approve the Curve contract\n                        </Text>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ hasCurveTokens ? 'CheckBox' : 'LooksTwo'}\n                          color={ hasCurveTokens ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Deposit your {this.props.tokenConfig.idle.token}\n                        </Text>\n                      </Flex>\n                    </Flex>\n                  </DashboardCard>\n                  {\n                    !this.state.migrationContractApproved ?\n                      this.state.processing.loading ? (\n                        <Flex\n                          mt={3}\n                          flexDirection={'column'}\n                        >\n                          <TxProgressBar\n                            web3={this.props.web3}\n                            waitText={`Approve estimated in`}\n                            hash={this.state.processing.txHash}\n                            endMessage={`Finalizing approve request...`}\n                            cancelTransaction={this.cancelTransaction.bind(this)}\n                          />\n                        </Flex>\n                      ) : (\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            mt:3,\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                          >\n                            <Icon\n                              size={'2.3em'}\n                              name={'LockOpen'}\n                              color={'cellText'}\n                            />\n                            <Text\n                              mt={1}\n                              fontSize={2}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              To deposit your {this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.\n                            </Text>\n                            <RoundButton\n                              buttonProps={{\n                                mt:3,\n                                width:[1,1/2]\n                              }}\n                              handleClick={this.approve.bind(this)}\n                            >\n                              Approve\n                            </RoundButton>\n                          </Flex>\n                        </DashboardCard>\n                      )\n                    : this.state.processing.loading ? (\n                      <Flex\n                        mt={3}\n                        flexDirection={'column'}\n                      >\n                        <TxProgressBar\n                          web3={this.props.web3}\n                          waitText={`Deposit estimated in`}\n                          hash={this.state.processing.txHash}\n                          endMessage={`Finalizing deposit request...`}\n                          cancelTransaction={this.cancelTransaction.bind(this)}\n                        />\n                      </Flex>\n                    ) : (\n                      <Box\n                        mt={2}\n                        width={1}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text>\n                            Choose max slippage:\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={`Max additional slippage on top of the one shown below`}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                          justifyContent={'space-between'}\n                        >\n                          {\n                            [0.2,0.5,1,5].map( slippage => (\n                              <FastBalanceSelector\n                                cardProps={{\n                                  p:1\n                                }}\n                                textProps={{\n                                  fontSize:1\n                                }}\n                                percentage={slippage}\n                                key={`selector_${slippage}`}\n                                onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                isActive={this.state.maxSlippage === parseFloat(slippage)}\n                              />\n                            ))\n                          }\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                        >\n                          <Flex\n                            mb={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={this.state.depositSlippage ? 'space-between' : 'flex-end'}\n                          >\n                            {\n                              this.state.depositSlippage && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    textAlign={'right'}\n                                    style={{\n                                      whiteSpace:'nowrap'\n                                    }}\n                                    color={ parseFloat(this.state.depositSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                  >\n                                    {\n                                      parseFloat(this.state.depositSlippage.toFixed(3)) === 0 ?\n                                        'No Slippage'\n                                      : `${ this.state.depositSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositSlippage.abs().toFixed(3)}%`\n                                    }\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.state.depositSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              )\n                            }\n                            {\n                              this.props.idleTokenBalance && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'flex-end'}\n                                >\n                                  <Link\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'right'}\n                                    hoverColor={'copyColor'}\n                                    onClick={ (e) => this.setFastBalanceSelector(100) }\n                                    style={{\n                                      maxWidth:'100%',\n                                      overflow:'hidden',\n                                      whiteSpace:'nowrap',\n                                      textOverflow:'ellipsis'\n                                    }}\n                                  >\n                                    {this.props.idleTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {this.props.selectedToken}\n                                  </Link>\n                                </Flex>\n                              )\n                            }\n                          </Flex>\n                          <Input\n                            min={0}\n                            type={\"number\"}\n                            required={true}\n                            height={'3.4em'}\n                            borderRadius={2}\n                            fontWeight={500}\n                            boxShadow={'none !important'}\n                            placeholder={`Insert amount`}\n                            onChange={this.changeInputValue.bind(this)}\n                            border={`1px solid ${this.props.theme.colors.divider}`}\n                            value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                          />\n                          <Flex\n                            mt={2}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'space-between'}\n                          >\n                            {\n                              [25,50,75,100].map( percentage => (\n                                <FastBalanceSelector\n                                  percentage={percentage}\n                                  key={`selector_${percentage}`}\n                                  onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                  isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                                />\n                              ))\n                            }\n                          </Flex>\n                          <Flex\n                            mt={2}\n                            justifyContent={'center'}\n                          >\n                            <RoundButton\n                              buttonProps={{\n                                mt:2,\n                                width:[1,1/2],\n                                disabled:this.state.buttonDisabled\n                              }}\n                              handleClick={this.deposit.bind(this)}\n                            >\n                              Deposit\n                            </RoundButton>\n                          </Flex>\n                        </Flex>\n                      </Box>\n                    )\n                  }\n                </Box>\n              )\n            }\n          {\n            /*\n            this.state.tokenConfig && this.state.redeemableBalance ? (\n              <Box width={1}>\n                <Migrate\n                  {...this.props}\n                  showActions={false}\n                  getTokenPrice={false}\n                  migrationTextProps={{\n                    fontWeight:500\n                  }}\n                  isMigrationTool={true}\n                  migrationImage={{\n                    mb:1,\n                    height:'1.8em',\n                    src:curveConfig.params.image\n                  }}\n                  showBalanceSelector={true}\n                  waitText={'Deposit estimated in'}\n                  tokenConfig={this.state.tokenConfig}\n                  callbackApprove={this.approveCallback.bind(this)}\n                  migrationParams={this.getMigrationParams.bind(this)}\n                  migrationCallback={this.migrationCallback.bind(this)}\n                  approveText={`To deposit your ${this.props.tokenConfig.idle.token} you need to approve Curve smart-contract first.`}\n                  migrationText={`You can deposit ${this.state.redeemableBalance.toFixed(4)} ${this.props.tokenConfig.idle.token} in the Curve Pool${ this.state.depositSlippage ? (this.state.depositSlippage.gte(0) ? ` with <span style=\"color:${this.props.theme.colors.transactions.status.failed}\">${this.state.depositSlippage.times(100).toFixed(2)}% of slippage</span>` : ` with <span style=\"color:${this.props.theme.colors.transactions.status.completed}\">${Math.abs(parseFloat(this.state.depositSlippage.times(100).toFixed(2)))}% of bonus</span>`) : '' }.`}\n                >\n                  {\n                    !this.props.account ? (\n                      <DashboardCard\n                        cardProps={{\n                          p:3,\n                          mt:3\n                        }}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                        >\n                          <Icon\n                            size={'2.3em'}\n                            name={'Input'}\n                            color={'cellText'}\n                          />\n                          <Text\n                            mt={2}\n                            fontSize={2}\n                            color={'cellText'}\n                            textAlign={'center'}\n                          >\n                            Please connect with your wallet interact with Idle.\n                          </Text>\n                          <RoundButton\n                            buttonProps={{\n                              mt:2,\n                              width:[1,1/2]\n                            }}\n                            handleClick={this.props.connectAndValidateAccount}\n                          >\n                            Connect\n                          </RoundButton>\n                        </Flex>\n                      </DashboardCard>\n                    ) : (\n                      <DashboardCard\n                        cardProps={{\n                          p:3\n                        }}\n                      >\n                        {\n                          this.state.migrationSucceeded ? (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'DoneAll'}\n                                color={this.props.theme.colors.transactions.status.completed}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You have successfully deposited your {this.props.tokenConfig.idle.token} in the Curve Pool!\n                              </Text>\n                            </Flex>\n                          ) : (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'MoneyOff'}\n                                color={'cellText'}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You don't have any {this.props.tokenConfig.idle.token} in your wallet.\n                              </Text>\n                            </Flex>\n                          )\n                        }\n                      </DashboardCard>\n                    )\n                  }\n                </Migrate>\n              </Box>\n            ) : null\n            */\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveDeposit;","import theme from '../theme';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\n// import { linearGradientDef } from '@nivo/core'\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport ChartCustomTooltip from '../ChartCustomTooltip/ChartCustomTooltip';\nimport ChartCustomTooltipRow from '../ChartCustomTooltipRow/ChartCustomTooltipRow';\n\nclass PortfolioEquityCurve extends Component {\n  state = {\n    startDate:null,\n    chartData:null,\n    chartProps:null,\n    chartwidth:null,\n    chartHeight:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentDidMount(){\n    this.loadUtils();\n    this.loadChartData();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n\n    const quickDateSelectionChanged = prevProps.quickDateSelection !== this.props.quickDateSelection;\n    const tokenChanged = JSON.stringify(prevProps.enabledTokens) !== JSON.stringify(this.props.enabledTokens);\n    if (tokenChanged || quickDateSelectionChanged){\n      this.setState({\n        chartData:null\n      },() => {\n        this.componentDidMount();\n      });\n    }\n\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n    if (mobileChanged){\n      this.loadChartData();\n    }\n  }\n\n  async loadChartData() {\n\n    let enabledTokens = this.props.enabledTokens;\n    if (!enabledTokens || !enabledTokens.length){\n      enabledTokens = Object.keys(this.props.availableTokens);\n    }\n\n    const curveTxs = await this.functionsUtil.getCurveTxs(this.props.account,0,'latest',enabledTokens);\n\n    const chartData = [];\n    let tokensBalance = [];\n    const processedTxs = {};\n    let firstTxTimestamp = null;\n    let totalBalance = this.functionsUtil.BNify(0);\n    const curvePoolContract = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    if (curveTxs && curveTxs.length){\n\n      curveTxs.forEach((tx,index) => {\n\n        if (!processedTxs[tx.hash]){\n          processedTxs[tx.hash] = [];\n        }\n\n        if (processedTxs[tx.hash].includes(tx.action)){\n          return;\n        }\n        \n        firstTxTimestamp = firstTxTimestamp ? Math.min(firstTxTimestamp,parseInt(tx.timeStamp)) : parseInt(tx.timeStamp);\n\n        const curveTokens = this.functionsUtil.BNify(tx.curveTokens);\n\n        switch (tx.action){\n          case 'CurveIn':\n          case 'CurveZapIn':\n          case 'CurveDepositIn':\n          case 'CurveTransferIn':\n            totalBalance = totalBalance.plus(curveTokens);\n          break;\n          case 'CurveOut':\n          case 'CurveZapOut':\n          case 'CurveDepositOut':\n          case 'CurveTransferOut':\n            totalBalance = totalBalance.minus(curveTokens);\n          break;\n          default:\n          break;\n        }\n\n        // Reset totalBalance if below zero\n        if (totalBalance.lt(0)){\n          totalBalance = this.functionsUtil.BNify(0);\n        }\n\n        const action = tx.action;\n        const balance = totalBalance;\n        const timeStamp = parseInt(tx.timeStamp);\n        const curveTokenPrice = this.functionsUtil.fixTokenDecimals(tx.curveTokenPrice,curvePoolContract.decimals);\n\n        // console.log(this.functionsUtil.strToMoment(timeStamp*1000).format('YYYY/MM/DD HH:mm'),tx.hash,tx.action,curveTokens.toString(),totalBalance.toString());\n\n        if (!curveTokenPrice.isNaN() && !curveTokenPrice.isNaN()){\n          tokensBalance.push({\n            action,\n            balance,\n            timeStamp,\n            curveTokens,\n            curveTokenPrice\n          });\n\n          processedTxs[tx.hash].push(action);\n        }\n      });\n    }\n\n    // Calculate Start Date\n    let startDate = null;\n    const currentDate = this.functionsUtil.strToMoment(new Date());\n\n    switch (this.props.quickDateSelection){\n      case 'week':\n        startDate = currentDate.clone().subtract(1,'week');\n      break;\n      case 'month':\n        startDate = currentDate.clone().subtract(1,'month');\n      break;\n      case 'month3':\n        startDate = currentDate.clone().subtract(3,'month');\n      break;\n      case 'month6':\n        startDate = currentDate.clone().subtract(6,'month');\n      break;\n      default:\n        startDate = null;\n      break;\n    }\n\n    const days = {};\n    let prevBalances = {};\n    let prevTimestamp = null;\n    let minChartValue = null;\n    let maxChartValue = null;\n    const aggregatedBalancesKeys = {};\n    const tokensBalancesPerDate = {};\n    let aggregatedBalance = this.functionsUtil.BNify(0);\n    // let curveTokenBalance = this.functionsUtil.BNify(0);\n    const currTimestamp = parseInt(new Date().getTime()/1000)+86400;\n\n    const tokensData = await this.functionsUtil.getTokenApiData(Object.values(this.props.availableTokens)[0].address,false,firstTxTimestamp,null,false,3600);\n\n    for (let timeStamp=firstTxTimestamp;timeStamp<=currTimestamp;timeStamp+=this.props.frequencySeconds){\n\n      let foundBalances = {};\n      let tokensBalances = {};\n      timeStamp = Math.min(currTimestamp,timeStamp);\n      let momentDate = this.functionsUtil.strToMoment(timeStamp*1000);\n\n      // eslint-disable-next-line\n      const filteredTokenData = tokensData.filter(tx => (tx.timestamp>=prevTimestamp && tx.timestamp<=timeStamp));\n\n      // eslint-disable-next-line\n      let filteredBalances = tokensBalance.filter(tx => (tx.timeStamp<=timeStamp && (!prevTimestamp || tx.timeStamp>prevTimestamp)));\n      \n      if (!filteredBalances.length){\n        if (prevBalances){\n          filteredBalances = prevBalances;\n          const lastFilteredTx = Object.values(filteredBalances).pop();\n          const currentBalance = parseFloat(lastFilteredTx.balance);\n\n          const lastTokenData = Object.values(filteredTokenData).pop();\n          let curveTokenPrice = null;\n          if (lastTokenData){\n            curveTokenPrice = await this.functionsUtil.getCurveTokenPrice(lastTokenData.blocknumber);\n          }\n\n          // Take idleToken price from API and calculate new balance\n          if (currentBalance>0 && timeStamp>firstTxTimestamp && curveTokenPrice){\n            // Set new curveTokenPrice\n            lastFilteredTx.curveTokenPrice = curveTokenPrice;\n            filteredBalances = [lastFilteredTx];\n          }\n        } else {\n          filteredBalances = [{\n            balance:this.functionsUtil.BNify(0),\n            curveTokenPrice:this.functionsUtil.BNify(0)\n          }];\n        }\n      }\n\n      const lastTx = Object.assign([],filteredBalances).pop();\n      let lastTxBalance = this.functionsUtil.BNify(lastTx.balance).times(lastTx.curveTokenPrice);\n\n      tokensBalances[curvePoolContract.token] = this.functionsUtil.BNify(lastTx.balance);\n      aggregatedBalance = lastTxBalance;\n\n      foundBalances = filteredBalances;\n\n      // console.log(momentDate.format('YYYY/MM/DD 00:00'),lastTx.balance.toString(),lastTx.curveTokenPrice.toString(),lastTxBalance.toString());\n\n      if (startDate === null || momentDate.isSameOrAfter(startDate)){\n        \n        if (momentDate.isAfter(new Date(),'day')){\n          momentDate = this.functionsUtil.strToMoment(new Date());\n        }\n\n        // Force date to midnight\n        const formattedDate = momentDate.format('YYYY/MM/DD 00:00');\n\n        // Save days for axisBottom format\n        days[momentDate.format('YYYY/MM/DD')] = 1;\n\n        const aggregatedBalanceParsed = parseFloat(parseFloat(aggregatedBalance.toFixed(6)));\n\n        aggregatedBalancesKeys[formattedDate] = aggregatedBalanceParsed;\n        tokensBalancesPerDate[formattedDate] = tokensBalances;\n\n        // console.log(formattedDate,tokensBalances);\n\n        minChartValue = minChartValue === null ? aggregatedBalanceParsed : Math.min(minChartValue,aggregatedBalanceParsed);\n        maxChartValue = maxChartValue === null ? aggregatedBalanceParsed : Math.max(maxChartValue,aggregatedBalanceParsed);\n      }\n\n      prevTimestamp = timeStamp;\n      prevBalances = foundBalances;\n    }\n\n    const aggregatedBalances = Object.keys(aggregatedBalancesKeys).map(date => ({\n      x:date,\n      y:aggregatedBalancesKeys[date],\n      balances:tokensBalancesPerDate[date]\n    }));\n\n    let itemIndex = 0;\n    aggregatedBalances.forEach( (item,index) => {\n      const itemPos = Math.floor(itemIndex/aggregatedBalances.length*100);\n      aggregatedBalances[index].itemPos = itemPos;\n      itemIndex++;\n    });\n\n    /*\n    aggregatedBalances.push({\n      x:momentDate.format('YYYY/MM/DD HH:mm'),\n      y:aggregatedBalance\n    });\n    */\n\n    // Add day before to start with zero balance\n    /*\n    const firstTxMomentDate = this.functionsUtil.strToMoment(firstTxTimestamp*1000);\n    if ((startDate === null || startDate.isSameOrBefore(firstTxMomentDate)) && aggregatedBalances.length){\n      const firstItem = aggregatedBalances[0];\n      const firstDate = this.functionsUtil.strToMoment(firstItem.x,'YYYY/MM/DD HH:mm');\n      firstDate.subtract(1,'day');\n      aggregatedBalances.unshift({\n        x:firstDate.format('YYYY/MM/DD HH:mm'),\n        y:0\n      });\n    }\n    */\n\n    // Add token Data\n    chartData.push({\n      id:'USD',\n      color: 'hsl('+ this.functionsUtil.getGlobalConfig(['stats','tokens','USD','color','hsl']).join(',')+')',\n      data:aggregatedBalances\n    });\n\n    let yFormatDecimals = 2;\n    if (maxChartValue-minChartValue<1){\n      yFormatDecimals = 4;\n    }\n\n    if (maxChartValue === minChartValue){\n      minChartValue = Math.max(0,maxChartValue-1);\n    }\n\n    const maxGridLines = 5;\n    const gridYStep = (maxChartValue-minChartValue)/maxGridLines;\n    const gridYValues = [];\n    for (let i=0;i<=maxGridLines;i++){\n      const gridYValue = parseFloat(parseFloat(minChartValue+(i*gridYStep)).toFixed(6));\n      gridYValues.push(gridYValue);\n    }\n    \n    const axisBottomMaxValues = 10;\n    const daysCount = Object.values(days).length;    \n    const daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n    const chartProps = {\n      xScale:{\n        type: 'time',\n        format: '%Y/%m/%d %H:%M',\n      },\n      yScale:{\n        type: 'linear',\n        stacked: false,\n        min: minChartValue,\n        max: maxChartValue\n      },\n      xFormat:'time:%b %d %Y',\n      yFormat:value => this.functionsUtil.formatMoney(value,yFormatDecimals),\n      axisBottom: this.props.isMobile ? null : {\n        legend: '',\n        tickSize:0,\n        format: '%b %d',\n        tickPadding: 15,\n        orient: 'bottom',\n        legendOffset: 36,\n        legendPosition: 'middle',\n        tickValues:'every '+daysFrequency+' days'\n      },\n      gridYValues,\n      pointSize:0,\n      useMesh:true,\n      axisLeft: this.props.isMobile ? null : {\n        legend: '',\n        tickSize: 0,\n        orient: 'left',\n        tickPadding: 10,\n        tickRotation: 0,\n        legendOffset: -70,\n        tickValues:gridYValues,\n        legendPosition: 'middle',\n        format: v => this.functionsUtil.abbreviateNumber(v,2),\n      },\n      animate:true,\n      pointLabel:'y',\n      areaOpacity:0.1,\n      enableArea:true,\n      enableSlices:'x',\n      enableGridY:true,\n      curve:'monotoneX',\n      enableGridX:false,\n      pointBorderWidth:1,\n      colors:d => d.color,\n      pointLabelYOffset:-12,\n      areaBaselineValue:minChartValue,\n      pointColor:{ from: 'color', modifiers: []},\n      theme:{\n        axis: {\n          ticks: {\n            text: {\n              fontSize:12,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '8 4'\n          }\n        },\n      },\n      /*\n      defs:[\n        linearGradientDef('gradientA', [\n          { offset: 0, color: 'inherit' },\n          { offset: 100, color: 'inherit', opacity: 0 },\n        ]),\n      ],\n      fill:[{ match: '*', id: 'gradientA' }],\n      */\n      margin: this.props.isMobile ? { top: 20, right: 25, bottom: 25, left: 20 } : { top: 30, right: 50, bottom: 45, left: 50 },\n      sliceTooltip:(slideData) => {\n        const { slice } = slideData;\n        const point = slice.points[0];\n        return (\n          <ChartCustomTooltip\n            point={point}\n          >\n            <ChartCustomTooltipRow\n              color={point.color}\n              label={point.serieId}\n              value={`$ ${point.data.yFormatted}`}\n            />\n            {\n            typeof point.data.balances === 'object' && Object.keys(point.data.balances).length>0 &&\n              Object.keys(point.data.balances).map(token => {\n                if (token === point.serieId){\n                  return null;\n                }\n                const tokenInfo = this.functionsUtil.getGlobalConfig(['stats','tokens',token.toUpperCase()]);\n                if (tokenInfo){\n                  const tokenName = tokenInfo.name ? tokenInfo.name : token;\n                  const color = tokenInfo.color.hex;\n                  const balance = point.data.balances[token];\n                  let formattedBalance = this.functionsUtil.formatMoney(balance,2);\n                  if (parseFloat(balance)>=0.01){\n                    return (\n                      <ChartCustomTooltipRow\n                        label={tokenName}\n                        color={color}\n                        key={`row_${token}`}\n                        value={`${formattedBalance}`}\n                      />\n                    );\n                  }\n                }\n                return null;\n              })\n            }\n          </ChartCustomTooltip>\n        );\n      }\n    };\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  render() {\n    return (\n      <GenericChart\n        type={Line}\n        showLoader={true}\n        {...this.state.chartProps}\n        data={this.state.chartData}\n        parentId={this.props.parentId}\n        height={this.props.chartHeight}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default PortfolioEquityCurve;","import theme from '../theme';\nimport Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport { Flex, Heading, Text } from \"rimble-ui\";\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport PortfolioEquityCurve from '../PortfolioEquityCurve/PortfolioEquityCurve';\n\nclass FundsOverviewCurve extends Component {\n\n  state = {\n    compAPR:null,\n    aggregatedValues:[],\n    govTokensUserBalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    await this.functionsUtil.getCurveAvgBuyPrice();\n\n    // debugger;\n\n    await this.functionsUtil.getCurveAvgSlippage();\n\n    // debugger;\n    /*\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const [govTokensUserBalance,avgAPY,days] = await Promise.all([\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,'DAI'),\n      this.functionsUtil.loadAssetField('avgAPY',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '-') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    let [tokenAllocation,compAPR] = await Promise.all([\n      this.functionsUtil.getTokenAllocation(this.props.tokenConfig,false,false),\n      this.functionsUtil.getCompAPR(this.props.selectedToken,this.props.tokenConfig)\n    ]);\n\n    if (tokenAllocation){\n      const compoundInfo = this.props.tokenConfig.protocols.find( p => (p.name === 'compound') );\n      if (compoundInfo){\n        if (tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()]){\n          const compoundAllocationPerc = tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()];\n          compAPR = compAPR.times(compoundAllocationPerc);\n        }\n      }\n    }\n\n    this.setState({\n      compAPR,\n      aggregatedValues,\n      govTokensUserBalance\n    });\n    */\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Text\n                          mt={2}\n                          fontWeight={2}\n                          fontSize={[1,2]}\n                          color={'cellText'}\n                        >\n                          {v.props.title}\n                        </Text>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquityCurve\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLentCurve',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPercCurve',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            {\n              /*\n              <Flex\n                mb={[2,0]}\n                width={[1,1/5]}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'flex-start'}\n              >\n                <Title\n                  mb={2}\n                  fontSize={[3,4]}\n                  component={Heading.h3}\n                >\n                  Fees\n                </Title>\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'feesCounter',\n                    props:{\n                      decimals:7,\n                      maxPrecision:8,\n                      style:{\n                        fontWeight:300,\n                        fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                        color:theme.colors.counter\n                      },\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n              */\n            }\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveApy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Avg Slippage\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveAvgSlippage',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverviewCurve;","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport { Box, Flex, Text, Icon } from \"rimble-ui\";\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport CurveDeposit from '../CurveDeposit/CurveDeposit';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport TransactionField from '../TransactionField/TransactionField';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport FundsOverviewCurve from '../FundsOverviewCurve/FundsOverviewCurve';\n\nclass AssetPage extends Component {\n\n  state = {\n    inputValue:{},\n    processing:{},\n    tokenFees:null,\n    canRedeem:null,\n    canDeposit:null,\n    action:'deposit',\n    activeModal:null,\n    tokenConfig:null,\n    tokenBalance:null,\n    tokenApproved:null,\n    selectedToken:null,\n    availableTokens:{},\n    redeemBalance:null,\n    depositBalance:null,\n    buttonDisabled:false,\n    curveTokenPrice:null,\n    depositSlippage:null,\n    idleTokenBalance:null,\n    withdrawSlippage:null,\n    govTokensBalance:null,\n    curveZapContract:null,\n    curveTokenConfig:null,\n    curveTokensAmounts:{},\n    govTokensDisabled:null,\n    componentMounted:false,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    redeemableBalance:null,\n    fastBalanceSelector:{},\n    curveAvailableTokens:{},\n    tokenFeesPercentage:null,\n    redeemUnevenAmounts:false,\n    curveDepositContract:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  changeFromToken = (selectedToken) => {\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    this.props.goToSection(`${curveConfig.params.route}/${selectedToken}`);\n  }\n\n  getSelectedToken(){\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    return this.props.urlParams.param1 && curveAvailableTokens[this.props.urlParams.param1] ? this.props.urlParams.param1 : Object.keys(curveAvailableTokens)[0];\n  }\n\n  setSelectedToken = async (selectedToken) => {\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n    this.setState({\n      tokenConfig,\n      selectedToken,\n      availableTokens,\n      curveTokenConfig\n    });\n  }\n\n  loadTokensInfo = async () => {\n\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    this.setState({\n      curveAvailableTokens\n    });\n\n    const selectedToken = this.getSelectedToken();\n    // Check if token is set the query params\n    if (selectedToken && selectedToken !== this.props.urlParams.param1){\n      this.changeFromToken(selectedToken);\n      return await this.setSelectedToken(selectedToken);\n    } else if (selectedToken !== this.state.selectedToken){\n      await this.setSelectedToken(selectedToken);\n    }\n\n    const newState = {...this.state};\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n\n    if (newState.selectedToken !== selectedToken){\n      newState.selectedToken = selectedToken;\n    }\n\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n\n    const [\n      curveZapContract,\n      curvePoolContract,\n      curveSwapContract,\n      curveDepositContract\n    ] = await Promise.all([\n      this.functionsUtil.getCurveZapContract(),\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract()\n    ]);\n\n    newState.curveZapContract = curveZapContract;\n    newState.curvePoolContract = curvePoolContract;\n    newState.curveSwapContract = curveSwapContract;\n    newState.curveDepositContract = curveDepositContract;\n\n    newState.availableTokens = availableTokens;\n\n\n    // console.log('curveTokenPrice',newState.curveTokenPrice.toFixed(6),'curveTokenBalance',newState.curveTokenBalance.toFixed(6),'redeemableBalance',newState.redeemableBalance.toFixed(20),'tokenBalance',newState.tokenBalance.toFixed(20));\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[selectedToken] = tokenConfig;\n\n    newState.tokenConfig = tokenConfig;\n    newState.curveTokenConfig = curveTokenConfig;\n\n    if (this.props.account){\n      [\n        newState.curveTokenPrice,\n        newState.curveTokenBalance,\n        newState.tokenFeesPercentage,\n        newState.tokenFees,\n        newState.tokenBalance,\n        newState.idleTokenBalance,\n        newState.tokenApproved,\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokenPrice(),\n        this.functionsUtil.getCurveTokenBalance(),\n        this.functionsUtil.getTokenFees(tokenConfig),\n        this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n        this.functionsUtil.getTokenBalance(selectedToken,this.props.account),\n        this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n        this.functionsUtil.checkTokenApproved(selectedToken,curveDepositContract.address,this.props.account),\n      ]);\n\n\n      newState.processing = {\n        redeem:{\n          txHash:null,\n          loading:false\n        },\n        deposit:{\n          txHash:null,\n          loading:false\n        },\n        approve:{\n          txHash:null,\n          loading:false\n        },\n      };\n      newState.inputValue = {\n        redeem:null,\n        deposit:null\n      };\n      newState.fastBalanceSelector = {\n        redeem:null,\n        deposit:null\n      };\n\n      newState.componentMounted = true;\n      newState.depositBalance = newState.tokenBalance;\n      newState.redeemBalance = newState.redeemableBalance;\n      newState.govTokensDisabled = tokenConfig.govTokensDisabled;\n      newState.canRedeem = newState.curveTokenBalance && newState.curveTokenBalance.gt(0);\n      newState.canDeposit = newState.idleTokenBalance && newState.idleTokenBalance.gt(0);\n      newState.redeemableBalance = newState.curveTokenBalance ? newState.curveTokenBalance.times(newState.curveTokenPrice) : this.functionsUtil.BNify(0);\n    }\n\n    this.setState(newState);\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async calculateSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,this.state.curvePoolContract.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositBalance = amount;\n        newState.depositSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      case 'redeem':\n        newState.redeemBalance = amount;\n        newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.urlParams.param1 !== this.props.urlParams.param1;\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n\n    if (accountChanged || transactionsChanged || tokenChanged){\n      await this.loadTokensInfo();\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const redeemUnevenAmountsChanged = this.state.redeemUnevenAmounts !== prevState.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n    if (actionChanged || fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    if (actionChanged){\n      this.updateAssetSelector();\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  updateAssetSelector = async () => {\n    const newState = {};\n    switch (this.state.action){\n      case 'deposit':\n        this.loadTokensInfo();\n      break;\n      case 'redeem':\n        // this.loadTokensInfo();\n        const tokenConfig = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n        newState.curveAvailableTokens = {};\n        newState.curveTokenConfig = tokenConfig;\n        newState.selectedToken = tokenConfig.token;\n        newState.curveAvailableTokens[tokenConfig.token] = tokenConfig;\n      break;\n      default:\n      break;\n    }\n\n    this.setState(newState);\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.state.tokenBalance ? this.functionsUtil.BNify(this.state.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          amount = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n        } else {\n          amount = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  changeInputValue = (e) => {\n    if (!this.state.action){\n      return false;\n    }\n\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && amount.gt(this.state.tokenBalance));\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.curveTokenBalance)) );\n        } else {\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.redeemableBalance)) );\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = this.state.tokenApproved;\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.state.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.functionsUtil.enableERC20(this.state.selectedToken,this.state.curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const inputValue = this.state.inputValue[this.state.action];\n    const selectedPercentage = this.getFastBalanceSelector();\n\n    let loading = true;\n\n    switch (this.state.action){\n      // Handle deposit in curve\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.state.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if (this.state.metaTransactionsEnabled && txError){\n            this.setState({\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,tokensToDeposit);\n        const minMintAmount = await this.functionsUtil.genericContractCall(this.state.curveSwapContract.name,'calc_token_amount',[amounts,true]);\n        const depositParams = [amounts,minMintAmount];\n\n        // No need for callback atm\n        contractSendResult = await this.props.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n      break;\n      case 'redeem':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        let curveTokensToRedeem = null;\n        if (selectedPercentage){\n          curveTokensToRedeem = this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage);\n        } else {\n          curveTokensToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals));\n          if (!this.state.redeemUnevenAmounts){\n            const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n            curveTokensToRedeem = curveTokensToRedeem.div(curveTokenPrice);\n          }\n        }\n\n        if (!curveTokensToRedeem){\n          return false;\n        }\n\n        const callbackRedeem = (tx,error) => {\n          const txSucceeded = tx.status === 'success';\n\n          // Send Google Analytics event\n          const eventData = {\n            eventLabel: tx.status,\n            eventCategory: `CurveRedeem`,\n            eventAction: this.state.selectedToken,\n            eventValue: curveTokensToRedeem.toFixed()\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          }\n        };\n\n        const callbackReceiptRedeem = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const _amount = this.functionsUtil.normalizeTokenAmount(curveTokensToRedeem,this.state.curvePoolContract.decimals).toString();\n        let min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,0);\n\n        const contractName = this.state.curveDepositContract.name;\n        if (this.state.redeemUnevenAmounts){\n          console.log('remove_liquidity_imbalance',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_imbalance', [min_amounts, _amount], null, callbackRedeem, callbackReceiptRedeem);\n        } else {\n          min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,_amount);\n          console.log('remove_liquidity',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts], null, callbackRedeem, callbackReceiptRedeem);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    // console.log('contractSendResult',contractSendResult);\n\n    if (contractSendResult !== false){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    const userHasFunds = this.props.account && this.state.curveTokenBalance && this.functionsUtil.BNify(this.state.curveTokenBalance).gt(0);\n    const canPerformAction = true;\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            {\n              <Breadcrumb\n                {...this.props}\n                isMobile={this.props.isMobile}\n                path={['Boost',this.state.selectedToken]}\n                handleClick={ e => this.props.goToSection('best') }\n                text={this.functionsUtil.getGlobalConfig(['strategies','best','title'])}\n              />\n            }\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Curve Pool\n        </Title>\n        <Flex\n          width={1}\n        >\n          <Flex\n            width={1}\n            alignItems={'center'}\n            flexDirection={'column'}\n            justifyContent={'center'}\n          >\n            <Flex\n              width={[1,0.36]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Box\n                width={1}\n              >\n                <Text\n                  mb={1}\n                >\n                  Select your asset:\n                </Text>\n                <AssetSelector\n                  {...this.props}\n                  id={'token-from'}\n                  onChange={this.changeFromToken}\n                  selectedToken={this.state.selectedToken}\n                  tokenConfig={this.state.curveTokenConfig}\n                  showBalance={this.state.action === 'deposit'}\n                  availableTokens={this.state.curveAvailableTokens}\n                />\n              </Box>\n              <Box\n                width={1}\n              >\n                {\n                  canPerformAction ? (\n                    <Flex\n                      mt={2}\n                      flexDirection={'column'}\n                    >\n                      <Text\n                        mb={2}\n                      >\n                        Choose the action:\n                      </Text>\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('deposit');\n                            }\n                          }}\n                          isInteractive={true}\n                          isActive={ this.state.action === 'deposit' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'deposit'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Deposit\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('redeem');\n                            }\n                          }}\n                          isInteractive={true}\n                          isDisabled={ !this.state.canRedeem }\n                          isActive={ this.state.action === 'redeem' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'redeem'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Redeem\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                      </Flex>\n                    </Flex>\n                  ) : (\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    >\n                      <Icon\n                        size={'2.3em'}\n                        name={'MoneyOff'}\n                        color={'cellText'}\n                      />\n                      <Text\n                        mt={2}\n                        fontSize={2}\n                        color={'cellText'}\n                        textAlign={'center'}\n                      >\n                        You don't have any {this.state.tokenConfig.idle.token} in your wallet.\n                      </Text>\n                    </Flex>\n                  )\n                }\n              </Box>\n            </Flex>\n            <Flex\n              width={1}\n              mt={ this.props.account ? 3 : 0 }\n            >\n            {\n              this.state.action === 'deposit' ? (\n                <CurveDeposit\n                  {...this.props}\n                  {...this.state}\n                />\n              ) : this.state.action === 'redeem' && (\n                <CurveRedeem\n                  {...this.props}\n                  {...this.state}\n                />\n              )\n            }\n            </Flex>\n          </Flex>\n        </Flex>\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverviewCurve\n                {...this.props}\n                tokenFees={this.state.tokenFees}\n                tokenConfig={this.state.tokenConfig}\n                selectedToken={this.state.selectedToken}\n                availableTokens={this.state.availableTokens}\n                enabledTokens={Object.keys(this.state.availableTokens)}\n              />\n            </Flex>\n        }\n        {\n          /*\n          this.props.account && !this.state.govTokensDisabled[this.state.selectedToken] && Object.keys(availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id=\"earnings-estimation\"\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(availableGovTokens)}\n                handleClick={(props) => {}}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.33,0.22]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.26],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    props:{\n                      width:[0.33,0.26],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                      {\n                        name:'tooltip',\n                        props:{\n                          placement:'bottom',\n                          message:'The shown balance may be lower than the real one.',\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    mobile:false,\n                    props:{\n                      width: 0.26,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                ]}\n                {...this.props}\n                availableTokens={availableGovTokens}\n              />\n            </Flex>\n          */\n        }\n        {\n          /*\n          this.props.account && \n            <Flex\n              mb={[3,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'estimated-earnings-container'}\n            >\n              <Title my={[3,4]}>Estimated earnings</Title>\n              <EstimatedEarnings\n                {...this.props}\n              />\n            </Flex>\n          */\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              availableTokens={this.state.availableTokens}\n              enabledTokens={Object.keys(this.state.availableTokens)}\n              enabledActions={['CurveIn','CurveOut','CurveZapIn','CurveZapOut','CurveTransferIn','CurveTransferOut','CurveDepositIn','CurveDepositOut']}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.state.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport ExtLink from '../../ExtLink/ExtLink.js';\nimport { Text, Modal, Flex, Link } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass PolygonModal extends React.Component {\n\n  state = {};\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    this.functionsUtil.setLocalStorage('polygonApproved',true);\n    this.props.closeModal();\n  }\n\n  render() {\n    const polygonBridgeInfo = this.functionsUtil.getGlobalConfig(['tools','polygonBridge']);\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','650px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            pt={3}\n            iconHeight={'2em'}\n            title={'Welcome to Idle <> Polygon'}\n            icon={'images/protocols/polygon.svg'}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                fontSize={2}\n                textAlign={'left'}\n                color={'dark-gray'}\n              >\n                You're about to enter Idle Finance in the Polygon Network, make sure to have some <ExtLink color={'link'} fontSize={2} href={this.functionsUtil.getEtherscanAddressUrl(this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.currentNetwork.baseToken,'address']))}>{this.props.currentNetwork.baseToken}</ExtLink> tokens in your wallet to send your transactions! Also you can use our <Link color={'link'} fontSize={2} mainColor={'link'} onClick={ e => this.props.goToSection(`tools/${polygonBridgeInfo.route}/${this.props.currentNetwork.baseToken}`)}>{polygonBridgeInfo.label}</Link> to transfer your tokens from Mainnet to Polygon.<br />If you are not confident with this just switch to Mainnet using your wallet provider.\n              </Text>\n            </Flex>\n            <Flex\n              my={3}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                handleClick={this.closeModal}\n                buttonProps={{\n                  width:['100%','40%']\n                }}\n              >\n                Let Me In\n              </RoundButton>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default PolygonModal;","import React from \"react\";\nimport {\n  Text,\n  Modal,\n  Button,\n  Form,\n  Icon,\n  Flex,\n  Link\n} from \"rimble-ui\";\nimport axios from 'axios';\nimport colors from '../../colors';\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\nimport globalConfigs from '../../configs/globalConfigs';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\n\nclass WelcomeModal extends React.Component {\n\n  state = {\n    email:null,\n    error:false,\n    subscribed:false,\n    sendingForm:false\n  };\n\n  functionsUtil = null;\n\n  constructor(props) {\n    super(props);\n    this.functionsUtil = new FunctionsUtil(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleValidation = this.handleValidation.bind(this);\n  }\n\n  componentDidUpdate = async () => {\n    this.functionsUtil.setProps(this.props);\n  }\n\n  sendUserInfo = (sendEmail=true) => {\n    const walletProvider = this.functionsUtil.getWalletProvider();\n    const userInfo = {\n      address: this.props.account,\n      provider: walletProvider\n    };\n\n    if (sendEmail && this.state.email !== null){\n      userInfo.email = this.state.email;\n    }\n\n    this.functionsUtil.simpleIDPassUserInfo(userInfo);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    if (!this.state.email){\n      return false;\n    }\n\n    const callback = () => {\n      this.setState({\n        sendingForm:false,\n        subscribed:true\n      });\n      window.setTimeout(this.props.closeModal,2500);\n    };\n\n    this.sendUserInfo();\n\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'send_email',\n      eventLabel: 'WelcomeModal'\n    });\n\n    axios.post(globalConfigs.newsletterSubscription.endpoint, {\n      'email': this.state.email\n    }).then(r => {\n      callback();\n    })\n    .catch(err => {\n      callback();\n    });\n\n    // Set signedUp in the localStorage\n    if (localStorage){\n      const walletAddress = this.props.account.toLowerCase();\n      let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : null;\n      if (lastLogin && lastLogin[walletAddress] && !lastLogin[walletAddress].signedUp){\n        lastLogin[walletAddress].signedUp = true;\n        this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n      }\n    }\n\n    this.setState({\n      sendingForm:true\n    })\n  };\n\n  closeModal = async () => {\n\n    const closeModal = () => {\n      this.props.closeModal();\n    };\n\n    try{\n      // Prevent sending email\n      this.sendUserInfo(false);\n\n      // Send Google Analytics event\n      if (globalConfigs.analytics.google.events.enabled){\n        this.functionsUtil.sendGoogleAnalyticsEvent({\n          eventCategory: 'UI',\n          eventAction: 'continue_without_email',\n          eventLabel: 'WelcomeModal'\n        },closeModal);\n\n        // Call callback after 1 second if stuck\n        setTimeout(closeModal,1000);\n      } else {\n        closeModal();\n      }\n    } catch (err) {\n      closeModal();\n    }\n  }\n\n  handleValidation(e) {\n    if (e && e.target) {\n      this.setState({ email: e.target.value });\n      e.target.parentNode.classList.add(\"was-validated\");\n    }\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        {\n          this.state.subscribed ? (\n            <ModalCard\n              closeFunc={this.closeModal}\n            >\n              <ModalCard.Header title={'All done'} icon={`images/done.svg`}></ModalCard.Header>\n              <ModalCard.Body>\n                <Flex width={1} flexDirection={'column'} mb={3}>\n                  <Text color={'dark-gray'} textAlign={'center'} fontSize={3} my={0}>\n                    Thanks for subscribing!\n                  </Text>\n                  <Button\n                    my={3}\n                    width={'100%'}\n                    borderRadius={4}\n                    onClick={this.closeModal}\n                  >\n                    CLOSE\n                  </Button>\n                </Flex>\n              </ModalCard.Body>\n            </ModalCard>\n          ) : (\n            <ModalCard closeFunc={this.closeModal}>\n              <ModalCard.Header title={'Stay up-to-date!'} icon={`images/notification.svg`}>\n              </ModalCard.Header>\n              <ModalCard.Body>\n                <Form onSubmit={this.handleSubmit}>\n                  <Flex width={1} flexDirection={'column'} mb={3}>\n                    <Text color={'mid-gray'} textAlign={'left'} fontSize={3} my={0}>\n                      Add your e-mail to receive updates about:\n                    </Text>\n                  </Flex>\n                  <Flex width={1} flexDirection={'column'} mt={2}>\n                    <Flex my={2} flexDirection={'row'} alignItems={'center'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Performance reports\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        New Protocols & Tokens\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Latest updates\n                      </Text>\n                    </Flex>\n                    <Form.Field width={1} label={''}>\n                      <Form.Input\n                        px={3}\n                        py={4}\n                        required\n                        width={1}\n                        border={0}\n                        fontSize={3}\n                        type={\"email\"}\n                        name={\"EMAIL\"}\n                        outline={'none'}\n                        borderColor={'cardBorder'}\n                        backgroundColor={'cardBg'}\n                        textAlign={['center','left']}\n                        className={header_styles.input}\n                        placeholder={'Enter your e-mail'}\n                        onChange={this.handleValidation}\n                      />\n                    </Form.Field>\n                    <Flex mb={3} flexDirection={'column'} alignItems={'center'} justifyContent={'center'}>\n                      <ButtonLoader\n                        buttonText={'SUBMIT'}\n                        isLoading={this.state.sendingForm}\n                        buttonProps={{className:header_styles.gradientButton,width:'100%',type:'submit'}}\n                      >\n                      </ButtonLoader>\n                      <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without e-mail</Link>\n                    </Flex>\n                  </Flex>\n                </Form>\n              </ModalCard.Body>\n            </ModalCard>\n          )\n        }\n      </Modal>\n    );\n  }\n}\n\nexport default WelcomeModal;\n","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\n\nclass MigrateModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'continue_without_migrate',\n        eventLabel: 'MigrateModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowMigrateModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowMigrateModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = () => {\n    const tokenMigrationRoute = this.functionsUtil.getGlobalConfig(['tools','tokenMigration','route']);\n    this.props.goToSection('tools/'+tokenMigrationRoute);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            iconHeight={'40px'}\n            title={'Migrate to Idle'}\n            icon={`images/migrate.svg`}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={3}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                You can migrate your funds from Compound, Aave, Fulcrum, Yearn and Idle V2 with just one transaction.\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                my={2}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.protocolsTokensBalances && Object.keys(this.props.protocolsTokensBalances).map( token => (\n                    <Flex\n                      mb={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      key={`token_${token}`}\n                      justifyContent={'space-between'}\n                    >\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'icon',\n                          props:{\n                            mr:2,\n                            height:'2.3em'\n                          }\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                      <SmartNumber\n                        mr={2}\n                        {...fieldProps}\n                        minPrecision={5}\n                        number={this.props.protocolsTokensBalances[token].balance} \n                      />\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'tokenName',\n                          props:fieldProps\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                    </Flex>\n                  ) )\n                }\n                <Text\n                  mb={0}\n                  fontSize={1}\n                  color={'red'}\n                  fontWeight={500}\n                  textAlign={'center'}\n                >\n                  Please be aware that by migrating your tokens from other protocols, your open positions might be liquidated if collateralized with migrated tokens.\n                </Text>\n              </Flex>\n              <Flex\n                mb={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <ButtonLoader\n                  buttonText={'MIGRATE'}\n                  handleClick={this.migrate}\n                  isLoading={this.state.sendingForm}\n                  buttonProps={{\n                    width:['100%','50%'],\n                    className:header_styles.gradientButton\n                  }}\n                >\n                </ButtonLoader>\n                {\n                /*\n                <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without migrate</Link>\n                */\n                }\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default MigrateModal;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass UpgradeModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'close_upgrade_modal',\n        eventLabel: 'UpgradeModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowUpgradeModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowUpgradeModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = async (token,strategy=null) => {\n\n    if (!strategy){\n      strategy = this.props.selectedStrategy;\n    }\n\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  convert = async (token) => {\n    const convertTool = this.functionsUtil.getGlobalConfig(['tools','tokenMigration']);\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n\n    if (!this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            icon={`images/migrate.svg`}\n            title={'Upgrade Available'}\n            iconHeight={['35px','40px']}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={[2,3]}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                Idle now supports yield farming and governance tokens distribution, migrate now your portfolio with just one click!\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n              >\n                <Flex\n                  fontSize={[2,3]}\n                  width={[0.5,0.28]}\n                  fontWeight={[4,5]}\n                  color={'copyColor'}\n                >\n                  {\n                    this.props.isMobile ? 'ASSET' : 'ASSET TO MIGRATE'\n                  }\n                </Flex>\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      BALANCE\n                    </Flex>\n                  )\n                }\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      OLD APY\n                    </Flex>\n                  )\n                }\n                <Flex\n                  fontSize={[2,3]}\n                  fontWeight={[4,5]}\n                  width={[0.25,0.19]}\n                  color={'copyColor'}\n                  justifyContent={'center'}\n                >\n                  {\n                    this.props.isMobile ? 'APY' : 'NEW APY'\n                  }\n                </Flex>\n                <Flex\n                  width={[0.25,0.15]}\n                >\n                  \n                </Flex>\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.tokensToMigrate && Object.keys(this.props.tokensToMigrate).map( tokenKey => {\n                    const token = this.props.tokensToMigrate[tokenKey].token;\n                    const strategy = this.props.tokensToMigrate[tokenKey].strategy;\n                    const tokenConfig = this.props.tokensToMigrate[tokenKey].tokenConfig;\n                    const balance = this.props.tokensToMigrate[tokenKey].oldContractBalanceFormatted;\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${tokenKey}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={[0.5,0.28]}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:['1.8em','2.3em']\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                        </Flex>\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <SmartNumber\n                                {...fieldProps}\n                                minPrecision={5}\n                                number={balance}\n                                flexProps={{\n                                  justifyContent:'center'\n                                }}\n                              />\n                            </Flex>\n                          )\n                        }\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <AssetField\n                                {...this.props}\n                                fieldInfo={{\n                                  name:'oldApy',\n                                  props:fieldProps\n                                }}\n                                token={token}\n                                tokenConfig={tokenConfig}\n                              />\n                            </Flex>\n                          )\n                        }\n                        <Flex\n                          width={[0.25,0.19]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={token}\n                            tokenConfig={tokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={[0.25,0.15]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.migrate(token,strategy) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.oldIdleTokensToMigrate && Object.keys(this.props.oldIdleTokensToMigrate).map( token => {\n                    const tokenConfig = this.props.oldIdleTokensToMigrate[token].tokenConfig;\n\n                    if (!tokenConfig){\n                      return null;\n                    }\n\n                    const balance = this.props.oldIdleTokensToMigrate[token].balance;\n                    let newTokenConfig = null;\n\n                    if (tokenConfig.availableStrategies && !this.props.availableTokens[tokenConfig.baseToken]){\n                      newTokenConfig = this.props.availableStrategies[tokenConfig.availableStrategies[0]][tokenConfig.baseToken];\n                    } else {\n                      newTokenConfig = this.props.availableTokens[tokenConfig.baseToken];\n                    }\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${token}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={0.28}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:'2.3em'\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <SmartNumber\n                            {...fieldProps}\n                            minPrecision={5}\n                            number={balance}\n                            flexProps={{\n                              justifyContent:'center'\n                            }}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'oldApy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.15}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.convert(token) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                my={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <RoundButton\n                  handleClick={this.closeModal}\n                  buttonProps={{\n                    fontSize:[2,3],\n                    width:['100%','40%'],\n                  }}\n                >\n                  MIGRATE LATER\n                </RoundButton>\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default UpgradeModal;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport { Text, Modal, Flex } from \"rimble-ui\";\nimport ExtLink from '../../ExtLink/ExtLink.js';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass RiskAdjustedModal extends React.Component {\n\n  state = {};\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    this.props.closeModal();\n  }\n\n  render() {\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','650px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            pt={3}\n            iconHeight={'40px'}\n            icon={'images/warning.svg'}\n            title={'Risk Adjusted Dismissed'}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                fontSize={2}\n                textAlign={'left'}\n                color={'dark-gray'}\n              >\n                The Risk Adjusted strategy has been dismissed after the execution of <ExtLink fontSize={2} href={this.functionsUtil.getAppUrl('#/governance/proposals/14')}>IIP-14</ExtLink> on the 13th October 2021. An incentive program has been released to let users migrate their funds in the <ExtLink fontSize={2} href={'https://beta.idle.finance/#/dashboard/tranches/senior/idle'}>Senior Tranche</ExtLink> in order to keep a similar risk profile as the Risk-Adjusted strategy. Read the <ExtLink fontSize={2} href={'https://gov.idle.finance/t/risk-adjusted-removal-for-tranches-migration/673'}>Governance Forum Post</ExtLink> for further information about the migration program.\n              </Text>\n            </Flex>\n            <Flex\n              my={3}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                handleClick={this.closeModal}\n                buttonProps={{\n                  width:['100%','40%']\n                }}\n              >\n                Got it\n              </RoundButton>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default RiskAdjustedModal;","import React, { Component } from 'react';\nimport FlashNews from '../FlashNews/FlashNews';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport { Flex, Card, Icon, Text } from 'rimble-ui';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardMenu from '../DashboardMenu/DashboardMenu';\n\n// Import page components\nimport Stats from '../Stats/Stats';\nimport Utils from '../Utils/Utils';\nimport AssetPage from '../AssetPage/AssetPage';\nimport RoundButton from '../RoundButton/RoundButton';\nimport Swipeable from '../utilities/components/Swipeable';\nimport BetaModal from \"../utilities/components/BetaModal\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CurveStrategy from '../CurveStrategy/CurveStrategy';\nimport PolygonModal from \"../utilities/components/PolygonModal\";\nimport WelcomeModal from \"../utilities/components/WelcomeModal\";\nimport TooltipModal from \"../utilities/components/TooltipModal\";\nimport MigrateModal from \"../utilities/components/MigrateModal\";\nimport UpgradeModal from \"../utilities/components/UpgradeModal\";\nimport DashboardHeader from '../DashboardHeader/DashboardHeader';\nimport RiskAdjustedModal from \"../utilities/components/RiskAdjustedModal\";\n\nclass Dashboard extends Component {\n  state = {\n    menu: [],\n    baseRoute: null,\n    clickEvent: null,\n    activeModal: null,\n    menuOpened: false,\n    currentRoute: null,\n    pageComponent: null,\n    currentSection: null,\n    currentNetwork: null,\n    selectedSection: null,\n    tokensToMigrate: null,\n    showResetButton: false,\n    selectedSubsection: null,\n    pageComponentProps: null,\n    oldIdleTokensToMigrate: null,\n    protocolsTokensBalances: null,\n  };\n\n  timeoutId = null;\n\n  // Utils\n  functionsUtil = null;\n  loadUtils() {\n    if (this.functionsUtil) {\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    window.functionsUtil = this.functionsUtil;\n  }\n\n  async loadMenu() {\n    const extraicons = this.functionsUtil.getGlobalConfig(['extraicons']);\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard', 'baseRoute']);\n\n    const menu = [];\n    const currentNetwork = this.functionsUtil.getRequiredNetwork();\n\n    // Add Stake Polygon\n    const stakePolygonConfig = this.functionsUtil.getGlobalConfig(['tools', 'stakePolygon']);\n    if (stakePolygonConfig.enabled && (!stakePolygonConfig.availableNetworks || stakePolygonConfig.availableNetworks.includes(currentNetwork.id))) {\n      menu.push(\n        {\n          submenu: [],\n          label: 'Stake',\n          selected: false,\n          color: 'dark-gray',\n          route: '/dashboard/stake',\n          image: extraicons['stake'].icon,\n          imageDark: extraicons['stake'].iconDark,\n          bgColor: this.props.theme.colors.primary,\n          imageInactive: extraicons['stake'].iconInactive,\n          imageInactiveDark: extraicons['stake'].iconInactiveDark,\n          component: Utils,\n          componentProps: {\n            showBreadCrumb: false,\n            toolProps: stakePolygonConfig.props,\n            selectedSubsection: stakePolygonConfig\n          },\n        }\n      );\n    }\n\n    const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n    Object.keys(strategies).filter(s => (!strategies[s].comingSoon && (!strategies[s].availableNetworks || strategies[s].availableNetworks.includes(currentNetwork.id)) && (!strategies[s].enabledEnvs.length || strategies[s].enabledEnvs.includes(this.props.currentEnv)))).forEach(strategy => {\n      const strategyInfo = strategies[strategy];\n      const imageInfo = extraicons[strategy];\n      menu.push({\n        submenu: [],\n        color: '#fff',\n        selected: false,\n        image: imageInfo.icon,\n        label: strategyInfo.title,\n        bgColor: strategyInfo.color,\n        route: baseRoute + '/' + strategy,\n        visible: strategyInfo.visible,\n        imageDark: imageInfo.iconDark,\n        component: strategyInfo.component,\n        imageInactive: imageInfo.iconInactive,\n        imageInactiveDark: imageInfo.iconInactiveDark\n      });\n    });\n\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n\n    // Add Curve\n    if (curveConfig.enabled) {\n      const curveParams = Object.assign({\n        submenu: [],\n        selected: false,\n        component: CurveStrategy,\n      }, curveConfig.params);\n\n      menu.push(curveParams);\n    }\n\n    // Add Stake\n    const stakeConfig = this.functionsUtil.getGlobalConfig(['tools', 'stake']);\n    if (stakeConfig.enabled && (!stakeConfig.availableNetworks || stakeConfig.availableNetworks.includes(currentNetwork.id))) {\n      menu.push(\n        {\n          submenu: [],\n          label: 'Stake',\n          selected: false,\n          color: 'dark-gray',\n          route: '/dashboard/stake',\n          image: extraicons['stake'].icon,\n          imageDark: extraicons['stake'].iconDark,\n          bgColor: this.props.theme.colors.primary,\n          imageInactive: extraicons['stake'].iconInactive,\n          imageInactiveDark: extraicons['stake'].iconInactiveDark,\n          component: Utils,\n          componentProps: {\n            showBreadCrumb: false,\n            toolProps: stakeConfig.props,\n            selectedSubsection: stakeConfig\n          },\n        }\n      );\n    }\n\n    const statsInfo = this.functionsUtil.getGlobalConfig(['stats']);\n    if (!statsInfo.availableNetworks || statsInfo.availableNetworks.includes(currentNetwork.id)) {\n      menu.push(\n        {\n          submenu: [],\n          label: 'Stats',\n          selected: false,\n          component: Stats,\n          bgColor: '#21f36b',\n          color: 'dark-gray',\n          route: '/dashboard/stats',\n          image: extraicons['stats'].icon,\n          imageDark: extraicons['stats'].iconDark,\n          imageInactive: extraicons['stats'].iconInactive,\n          imageInactiveDark: extraicons['stats'].iconInactiveDark,\n        }\n      );\n    }\n\n    // Add tools\n    menu.push(\n      {\n        label: 'Tools',\n        selected: false,\n        component: Utils,\n        color: 'dark-gray',\n        route: '/dashboard/tools',\n        image: extraicons['tools'].icon,\n        imageDark: extraicons['tools'].iconDark,\n        bgColor: this.props.theme.colors.primary,\n        imageInactive: extraicons['tools'].iconInactive,\n        imageInactiveDark: extraicons['tools'].iconInactiveDark,\n        submenu: Object.values(this.functionsUtil.getGlobalConfig(['tools'])).filter(tool => (tool.enabled && (!tool.availableNetworks || tool.availableNetworks.includes(currentNetwork.id))))\n      }\n    );\n\n    // Add Forum\n    menu.push(\n      {\n        submenu: [],\n        mobile: false,\n        label: 'Forum',\n        selected: false,\n        component: null,\n        color: 'dark-gray',\n        bgColor: '#ff0000',\n        isExternalLink: true,\n        image: extraicons['forum'].icon,\n        imageDark: extraicons['forum'].iconDark,\n        imageInactive: extraicons['forum'].iconInactive,\n        imageInactiveDark: extraicons['forum'].iconInactiveDark,\n        route: this.functionsUtil.getGlobalConfig(['forumURL'])\n      }\n    );\n\n    await this.setState({\n      menu,\n      currentNetwork\n    });\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  openTooltipModal = (modalTitle, modalContent) => {\n\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: modalTitle,\n      eventLabel: 'TooltipModal'\n    });\n\n    this.setState({\n      modalTitle,\n      modalContent\n    }, () => {\n      this.setActiveModal('tooltip');\n    })\n  }\n\n  setActiveModal = (activeModal) => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadParams() {\n\n    if (!this.props.networkInitialized) {\n      return;\n    }\n\n    const { match: { params } } = this.props;\n\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard', 'baseRoute']);\n    let currentRoute = baseRoute;\n\n    let pageComponent = null;\n    let selectedToken = null;\n    let currentSection = null;\n    let selectedStrategy = null;\n    let pageComponentProps = null;\n\n    // Set strategy\n    if (params.section) {\n      currentSection = params.section;\n      const param1 = params.param1;\n      const param2 = params.param2;\n      const param3 = params.param3;\n\n      const section_is_strategy = Object.keys(this.props.availableStrategies).includes(currentSection.toLowerCase());\n      const param1_is_strategy = param1 && (Object.keys(this.props.availableStrategies).includes(param1.toLowerCase()) || param1==='tranches');\n\n      if (section_is_strategy || param1_is_strategy) {\n\n        if (!section_is_strategy) {\n          currentRoute += '/' + currentSection;\n        }\n\n        selectedStrategy = section_is_strategy ? currentSection : param1;\n        currentRoute += '/' + selectedStrategy;\n        \n        // Set token\n        const param1_is_token = param1===\"tranches\" ? null : param1 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param1.toUpperCase());\n        const param2_is_token = param1===\"tranches\" ? null : param2 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param2.toUpperCase());\n\n        if (param1_is_token || param2_is_token) {\n          selectedToken = param1_is_token ? param1.toUpperCase() : param2.toUpperCase();\n          currentRoute += '/' + selectedToken;\n\n          if (section_is_strategy) {\n            pageComponent = AssetPage;\n          }\n        }\n        else if(param1===\"tranches\")\n        {\n          selectedToken=params.param3\n          currentRoute+='/'+param2+'/'+param3;\n\n        }\n        \n\n      }\n       else {\n        currentRoute += '/' + params.section;\n\n        if (params.param1 && params.param1.length) {\n          currentRoute += '/' + params.param1;\n        }\n\n        // if (params.param2 && params.param2.length){\n        //   currentRoute += '/'+params.param2;\n        // }\n      }\n    }\n\n    const menu = this.state.menu;\n\n    let selectedSection = null;\n    let selectedSubsection = null;\n\n    menu.forEach(m => {\n      m.selected = false;\n      const sectionRoute = baseRoute + '/' + params.section;\n      if (currentRoute.toLowerCase() === m.route.toLowerCase() || (!m.submenu.length && m.route.toLowerCase() === sectionRoute.toLowerCase())) {\n        m.selected = true;\n        if (pageComponent === null) {\n          pageComponent = m.component;\n          pageComponentProps = m.componentProps;\n        }\n      } else if (m.submenu.length) {\n        m.submenu.forEach(subm => {\n          subm.selected = false;\n          const submRoute = m.route + '/' + subm.route;\n          if (submRoute.toLowerCase() === currentRoute.toLowerCase()) {\n            m.selected = true;\n            subm.selected = true;\n\n            // Set component, if null use parent\n            if (pageComponent === null) {\n              if (subm.component) {\n                pageComponent = subm.component;\n                pageComponentProps = m.componentProps;\n              } else {\n                pageComponent = m.component;\n                pageComponentProps = m.componentProps;\n              }\n            }\n          }\n\n          // Set selected subsection\n          if (subm.selected) {\n            selectedSubsection = subm;\n          }\n\n        });\n      }\n\n      // Set selected section\n      if (m.selected) {\n        selectedSection = m;\n      }\n    });\n\n    // console.log('pageComponent',params,pageComponent);\n\n    // Exit if no strategy and token selected\n    if (!pageComponent){\n      return this.goToSection('',false);\n    }\n\n    // console.log('loadParams',selectedStrategy,selectedToken);\n    if(selectedStrategy===\"tranches\" && currentSection===\"stats\") {\n      // console.log(\"Argss\",selectedStrategy,selectedToken,params.param2)\n      await this.props.setStrategyToken(selectedStrategy,selectedToken,params.param2);\n    } else {\n      await this.props.setStrategyToken(selectedStrategy, selectedToken);\n    }\n\n    // Send GA pageview\n    this.functionsUtil.sendGoogleAnalyticsPageview(currentRoute);\n\n    const newState = {\n      menu,\n      params,\n      baseRoute,\n      currentRoute,\n      pageComponent,\n      currentSection,\n      selectedSection,\n      pageComponentProps,\n      selectedSubsection\n    };\n\n    await this.setState(newState);\n\n    return newState;\n  }\n\n  componentWillUnmount() {\n    if (this.timeoutId) {\n      window.clearTimeout(this.timeoutId);\n    }\n  }\n\n  async componentWillMount() {\n\n    this.props.setCurrentSection('dashboard');\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n  }\n\n  async componentDidMount() {\n\n    this.timeoutId = window.setTimeout(() => {\n      if (!this.props.accountInizialized || !this.props.contractsInitialized) {\n        this.setState({\n          showResetButton: true\n        });\n      }\n    }, 60000);\n\n    if (!this.props.web3) {\n      return this.props.initWeb3();\n    } else if (!this.props.accountInizialized) {\n      return this.props.initAccount();\n    } else if (!this.props.contractsInitialized) {\n      return this.props.initializeContracts();\n    }\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n\n    const viewOnly = this.props.connectorName === 'custom';\n    if (!viewOnly) {\n      this.checkModals();\n    }\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n\n    this.loadUtils();\n\n    const prevParams = prevProps.match.params;\n    const params = this.props.match.params;\n\n    const isMobileChanged = prevProps.isMobile !== this.props.isMobile;\n    if (isMobileChanged) {\n      this.setState({\n        menuOpened: false\n      });\n    }\n\n    if (JSON.stringify(prevParams) !== JSON.stringify(params)) {\n      await this.setState({\n        pageComponent: null\n      }, () => {\n        this.loadParams();\n      });\n    }\n\n    const requiredNetworkChanged = JSON.stringify(prevProps.network.required) !== JSON.stringify(this.props.network.required);\n    const networkChanged = (!prevProps.networkInitialized && this.props.networkInitialized) || requiredNetworkChanged;\n    if (networkChanged) {\n      await this.loadMenu();\n      this.loadParams();\n    }\n\n    const viewOnly = this.props.connectorName === 'custom';\n    const accountChanged = prevProps.account !== this.props.account;\n    const strategyChanged = this.props.selectedStrategy && prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const availableTokensChanged = JSON.stringify(prevProps.availableTokens) !== JSON.stringify(this.props.availableTokens);\n    const accountInizialized = this.props.accountInizialized && prevProps.accountInizialized !== this.props.accountInizialized;\n    const contractsInitialized = this.props.contractsInitialized && prevProps.contractsInitialized !== this.props.contractsInitialized;\n\n    if (!viewOnly && (networkChanged || accountChanged || accountInizialized || contractsInitialized || strategyChanged || availableTokensChanged)) {\n      this.checkModals();\n    }\n  }\n\n  async checkModals() {\n\n    if (this.props.selectedToken || !this.props.accountInizialized || !this.props.contractsInitialized || !this.props.availableStrategies || !this.props.availableTokens) {\n      return null;\n    }\n\n    await this.checkRiskAdjusted();\n    await this.checkPolygonModal();\n    await this.checkBetaApproval();\n    await this.checkTokensToMigrate();\n    await this.checkWelcomeModal();\n    await this.checkProtocolsTokensBalances();\n  }\n\n  async checkRiskAdjusted() {\n    const isRiskAdjusted = this.props.selectedStrategy === 'risk';\n    if (isRiskAdjusted) {\n      const activeModal = 'risk';\n      if (activeModal !== this.state.activeModal) {\n        await this.setState({\n          activeModal\n        });\n        return activeModal;\n      }\n    }\n  }\n\n  async checkPolygonModal() {\n    const isPolygon = this.state.currentNetwork.provider === 'polygon';\n    const isPolygonApproved = this.functionsUtil.getStoredItem('polygonApproved', false, false);\n\n    // console.log('checkPolygonModal',this.state.currentNetwork,isPolygon);\n\n    // Show Beta Warning modal\n    if (isPolygon && !isPolygonApproved) {\n      const activeModal = 'polygon';\n      if (activeModal !== this.state.activeModal) {\n        await this.setState({\n          activeModal\n        });\n        return activeModal;\n      }\n    }\n  }\n\n  async checkBetaApproval() {\n    const isOriginUrl = this.functionsUtil.checkUrlOrigin();\n    const isPolygon = this.state.currentNetwork.provider === 'polygon';\n    const isBetaApproved = this.functionsUtil.getStoredItem('betaApproved', false, false);\n\n    // Show Beta Warning modal\n    if (!isOriginUrl && !isBetaApproved && !isPolygon && this.state.activeModal === null) {\n      const activeModal = 'beta';\n      if (activeModal !== this.state.activeModal) {\n        await this.setState({\n          activeModal\n        });\n        return activeModal;\n      }\n    }\n  }\n\n  async checkTokensToMigrate() {\n\n    const showUpgradeModal = this.functionsUtil.getStoredItem('dontShowUpgradeModal', false, null) !== null ? false : true;\n    if (this.props.selectedToken || !showUpgradeModal || !this.props.availableTokens || this.state.activeModal !== null) {\n      return null;\n    }\n\n    const tokensToMigrate = await this.functionsUtil.getTokensToMigrate();\n    const oldIdleTokensToMigrate = await this.functionsUtil.getProtocolsTokensBalances('idle');\n\n    // console.log('tokensToMigrate',tokensToMigrate);\n\n    if ((tokensToMigrate && Object.keys(tokensToMigrate).length > 0) || (oldIdleTokensToMigrate && Object.keys(oldIdleTokensToMigrate).length > 0)) {\n      const activeModal = 'upgrade';\n      if (activeModal !== this.state.activeModal) {\n        await this.setState({\n          activeModal,\n          tokensToMigrate,\n          oldIdleTokensToMigrate\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkWelcomeModal() {\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized) {\n      return null;\n    }\n\n    // Show welcome modal\n    if (this.props.account && this.state.activeModal === null) {\n      let welcomeIsOpen = false;\n\n      const welcomeModalProps = this.functionsUtil.getGlobalConfig(['modals', 'welcome']);\n\n      if (welcomeModalProps.enabled && localStorage) {\n\n        // Check the last login of the wallet\n        const currTime = new Date().getTime();\n        const walletAddress = this.props.account.toLowerCase();\n        let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : {};\n\n        // First login\n        if (!lastLogin[walletAddress]) {\n          lastLogin[walletAddress] = {\n            'signedUp': false,\n            'lastTime': currTime\n          };\n          welcomeIsOpen = true;\n          // User didn't sign up\n        } else if (!lastLogin[walletAddress].signedUp) {\n          const lastTime = parseInt(lastLogin[walletAddress].lastTime);\n          const timeFromLastLogin = (currTime - lastTime) / 1000;\n          welcomeIsOpen = timeFromLastLogin >= welcomeModalProps.frequency; // 1 day since last login\n        }\n\n        if (welcomeIsOpen) {\n          lastLogin[walletAddress].lastTime = currTime;\n          this.functionsUtil.setLocalStorage('lastLogin', JSON.stringify(lastLogin));\n        }\n      }\n\n      const activeModal = welcomeIsOpen ? 'welcome' : this.state.activeModal;\n      if (this.state.activeModal !== activeModal) {\n        await this.setState({\n          activeModal\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkProtocolsTokensBalances() {\n\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized) {\n      return null;\n    }\n\n    // Show migration modal if no other modals are opened\n    const migrateModalConfig = this.functionsUtil.getGlobalConfig(['modals', 'migrate']);\n    const migrateModalEnabled = migrateModalConfig.enabled && migrateModalConfig.availableNetworks.includes(this.state.currentNetwork.id);\n\n    const showMigrateModal = this.functionsUtil.getStoredItem('dontShowMigrateModal', false, null) !== null ? false : true;\n\n    if (this.state.activeModal === null && migrateModalEnabled && showMigrateModal && !this.state.protocolsTokensBalances) {\n      const protocolsTokensBalances = await this.functionsUtil.getProtocolsTokensBalances();\n      const activeModal = protocolsTokensBalances && Object.keys(protocolsTokensBalances).length > 0 ? 'migrate' : null;\n      const newState = {\n        activeModal,\n        protocolsTokensBalances\n      };\n      await this.setState(newState);\n      return activeModal;\n    }\n\n    return null;\n  }\n\n  goToSection(section, isDashboard = true) {\n\n    // Remove dashboard route\n    if (isDashboard) {\n      section = section.replace(this.state.baseRoute + '/', '');\n    }\n\n    const newRoute = isDashboard ? this.state.baseRoute + '/' + section : section;\n    window.location.hash = newRoute;\n\n    // Send GA event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'goToSection',\n      eventLabel: newRoute\n    });\n\n    window.scrollTo(0, 0);\n  }\n\n  logout = async () => {\n    this.props.setConnector('Infura', 'Infura');\n    await this.props.initWeb3('Infura');\n  }\n\n  changeToken(selectedToken) {\n    selectedToken = selectedToken.toUpperCase();\n    if (Object.keys(this.props.availableTokens).includes(selectedToken)) {\n      const routeParts = [];\n\n      // Add section\n      if (this.state.currentSection.toLowerCase() !== this.props.selectedStrategy.toLowerCase()) {\n        routeParts.push(this.state.currentSection);\n      }\n\n      // Add strategy\n      routeParts.push(this.props.selectedStrategy);\n\n      // Add token\n      routeParts.push(selectedToken);\n\n      this.goToSection(routeParts.join('/'));\n    }\n  }\n\n  changeProtocolToken(selectedProtocol, selectedToken) {\n    selectedProtocol = selectedProtocol.toLowerCase();\n    if (Object.keys(this.props.availableTranches).includes(selectedProtocol)&& Object.keys(this.props.availableTranches[selectedProtocol]).includes(selectedToken)) {\n    \n        const routeParts = [];\n\n        // Add section\n        if (this.state.currentSection.toLowerCase() !== this.props.selectedStrategy.toLowerCase()) {\n          routeParts.push(this.state.currentSection);\n        }\n\n        // Add strategy\n        routeParts.push(this.props.selectedStrategy);\n\n        // Add protocol\n        routeParts.push(selectedProtocol);\n        \n        //Add Token\n        routeParts.push(selectedToken);\n\n        this.goToSection(routeParts.join('/'));\n      \n    }\n  }\n\n  propagateClickEvent(clickEvent) {\n    this.setState({\n      clickEvent: clickEvent.target\n    });\n  }\n\n  setMenu(menuOpened) {\n    this.setState({\n      menuOpened\n    });\n  }\n\n  toggleMenu() {\n    const menuOpened = !this.state.menuOpened;\n    this.setMenu(menuOpened);\n  }\n\n  swipeCallback(eventData) {\n    // console.log('swipeCallback',eventData);\n    if (eventData.dir === 'Right') {\n      this.setMenu(true);\n    } else if (eventData.dir === 'Left') {\n      this.setMenu(false);\n    }\n  }\n\n  render() {\n\n    const networkCorrect = this.props.network.isCorrectNetwork;\n    const networkSupported = this.props.network.isSupportedNetwork;\n    const PageComponent = this.state.pageComponent ? this.state.pageComponent : null;\n    const networkInitialized = this.props.networkInitialized && this.props.network.current.id && this.props.network.required.id;\n\n    if (!this.props.availableStrategies){\n      return (\n        <Flex\n          width={1}\n          minHeight={'100vh'}\n          alignItems={'center'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n          backgroundColor={'selectBg'}\n        >\n          <FlexLoader\n            textProps={{\n              textSize: 4,\n              fontWeight: 2\n            }}\n            loaderProps={{\n              mb: 3,\n              size: '80px',\n              color: 'primary'\n            }}\n            flexProps={{\n              my: 3,\n              flexDirection: 'column'\n            }}\n            text={''}\n          />\n        </Flex>\n      );\n    }\n\n    // console.log('networkInitialized',this.props.networkInitialized,networkInitialized);\n\n    return (\n      <Swipeable\n        callback={this.swipeCallback.bind(this)}\n      >\n        <Flex\n          height={'100vh'}\n          position={'fixed'}\n          flexDirection={'row'}\n          backgroundColor={'dashboardBg'}\n          className={this.props.themeMode}\n          width={this.props.isMobile && this.state.menuOpened ? '180vw' : '100vw'}\n        >\n          {\n            (!this.props.isMobile || this.state.menuOpened) && (\n              <Flex\n                bottom={0}\n                zIndex={99999}\n                position={'relative'}\n                width={['80vw', 1 / 6]}\n                flexDirection={'column'}\n              >\n                <Card\n                  p={0}\n                  border={0}\n                  boxShadow={0}\n                  width={'auto'}\n                  height={'100vh'}\n                  backgroundColor={'menuBg'}\n                  borderColor={this.props.theme.colors.menuRightBorder}\n                  borderRight={`1px solid ${this.props.theme.colors.menuRightBorder}`}\n                >\n                  <DashboardMenu\n                    {...this.props}\n                    menu={this.state.menu}\n                    closeMenu={e => this.setMenu(false)}\n                    goToSection={this.goToSection.bind(this)}\n                  />\n                </Card>\n              </Flex>\n            )\n          }\n          <Flex\n            minHeight={'70vh'}\n            width={['100vw', 5 / 6]}\n            flexDirection={\"column\"}\n          >\n            <DashboardHeader\n              menuOpened={this.state.menuOpened}\n              clickEvent={this.state.clickEvent}\n              toggleMenu={this.toggleMenu.bind(this)}\n              goToSection={this.goToSection.bind(this)}\n              {...this.props}\n            />\n            <Flex\n              py={3}\n              mb={0}\n              width={1}\n              px={[3, 5]}\n              alignItems={\"center\"}\n              style={{\n                overflowY: 'scroll',\n                overflowX: 'hidden'\n              }}\n              justifyItems={\"center\"}\n              flexDirection={'column'}\n              height={['100vh', '100%']}\n              backgroundColor={'dashboardBg'}\n            >\n              {\n                this.props.isDashboard && (\n                  <FlashNews\n                    {...this.props}\n                  />\n                )\n              }\n              {\n                !networkInitialized || !this.props.accountInizialized || !this.props.contractsInitialized || !PageComponent || !networkCorrect || !networkSupported ? (\n                  <Flex\n                    width={1}\n                    minHeight={'50vh'}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      networkInitialized && !networkCorrect ? (\n                        <DashboardCard\n                          cardProps={{\n                            p: 3,\n                            mt: 3,\n                            width: [1, 0.35]\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                          >\n                            <Icon\n                              size={'2.3em'}\n                              name={'Warning'}\n                              color={'cellText'}\n                            />\n                            <Text\n                              mt={2}\n                              fontSize={2}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              You should be on the <strong>{this.functionsUtil.capitalize(this.props.network.required.name)} network</strong>. You are currently connected to the <strong>{this.functionsUtil.capitalize(this.props.network.current.name)} network</strong>, please switch to the correct network.\n                            </Text>\n                            <RoundButton\n                              buttonProps={{\n                                mt:3,\n                                width:[1,1/2]\n                              }}\n                              handleClick={e => this.functionsUtil.addEthereumChain(this.props.network.required.id)}\n                            >\n                              Switch Network\n                            </RoundButton>\n                          </Flex>\n                        </DashboardCard>\n                      ) : networkInitialized && !networkSupported ? (\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            mt:3,\n                            width:[1,0.35]\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                          >\n                            <Icon\n                              size={'2.3em'}\n                              name={'Warning'}\n                              color={'cellText'}\n                            />\n                            <Text\n                              mt={2}\n                              fontSize={2}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              The <strong>{this.functionsUtil.capitalize(this.props.network.current.name)} Network</strong> is not supported, please switch to the correct network.\n                          </Text>\n                          </Flex>\n                        </DashboardCard>\n                      ) : !this.state.showResetButton ? (\n                        <FlexLoader\n                          textProps={{\n                            textSize: 4,\n                            fontWeight: 2\n                          }}\n                          loaderProps={{\n                            mb: 3,\n                            size: '40px'\n                          }}\n                          flexProps={{\n                            my: 3,\n                            flexDirection: 'column'\n                          }}\n                          text={!this.props.networkInitialized ? 'Loading network...' : (!this.props.accountInizialized ? 'Loading account...' : (!this.props.contractsInitialized ? 'Loading contracts...' : 'Loading assets...'))}\n                        />\n                      ) : (\n                        <DashboardCard\n                          cardProps={{\n                            p: 3,\n                            mt: 3,\n                            width: [1, 0.35]\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                          >\n                            <Icon\n                              size={'2.3em'}\n                              name={'Warning'}\n                              color={'cellText'}\n                            />\n                            <Text\n                              mt={2}\n                              fontSize={2}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              Idle can't connect to your wallet!<br />Make sure that your wallet is unlocked and try again.\n                            </Text>\n                            <RoundButton\n                              buttonProps={{\n                                mt: 3,\n                                width: [1, 1 / 2]\n                              }}\n                              handleClick={this.logout.bind(this)}\n                            >\n                              Logout\n                            </RoundButton>\n                          </Flex>\n                        </DashboardCard>\n                      )\n                    }\n                  </Flex>\n                ) : (\n                  <Flex\n                    width={1}\n                    flexDirection={'column'}\n                  >\n                    {\n                      PageComponent &&\n                      <PageComponent\n                        {...this.props}\n                        match={{ params: {} }}\n                        urlParams={this.state.params}\n                        changeToken={this.changeToken.bind(this)}\n                        changeProtocolToken={this.changeProtocolToken.bind(this)}\n                        goToSection={this.goToSection.bind(this)}\n                        selectedSection={this.state.selectedSection}\n                        selectedSubsection={this.state.selectedSubsection}\n                        openTooltipModal={this.openTooltipModal.bind(this)}\n                        {...this.state.pageComponentProps}\n                      />\n                    }\n                  </Flex>\n                )\n              }\n            </Flex>\n          </Flex>\n          {\n            this.state.currentNetwork &&\n            <PolygonModal\n              closeModal={this.resetModal}\n              goToSection={this.goToSection.bind(this)}\n              currentNetwork={this.state.currentNetwork}\n              isOpen={this.state.activeModal === 'polygon'}\n            />\n          }\n          <BetaModal\n            closeModal={this.resetModal}\n            isOpen={this.state.activeModal === 'beta'}\n          />\n          <RiskAdjustedModal\n            closeModal={this.resetModal}\n            isOpen={this.state.activeModal === 'risk'}\n          />\n          <UpgradeModal\n            {...this.props}\n            closeModal={this.resetModal}\n            goToSection={this.goToSection.bind(this)}\n            tokensToMigrate={this.state.tokensToMigrate}\n            isOpen={this.state.activeModal === 'upgrade'}\n            oldIdleTokensToMigrate={this.state.oldIdleTokensToMigrate}\n          />\n          <MigrateModal\n            {...this.props}\n            closeModal={this.resetModal}\n            goToSection={this.goToSection.bind(this)}\n            isOpen={this.state.activeModal === 'migrate'}\n            protocolsTokensBalances={this.state.protocolsTokensBalances}\n          />\n          <TooltipModal\n            closeModal={this.resetModal}\n            title={this.state.modalTitle}\n            content={this.state.modalContent}\n            isOpen={this.state.activeModal === 'tooltip'}\n          />\n          <WelcomeModal\n            closeModal={this.resetModal}\n            account={this.props.account}\n            simpleID={this.props.simpleID}\n            network={this.props.network.current}\n            tokenName={this.props.selectedToken}\n            initSimpleID={this.props.initSimpleID}\n            baseTokenName={this.props.selectedToken}\n            isOpen={this.state.activeModal === 'welcome'}\n          />\n        </Flex>\n      </Swipeable>\n    );\n  }\n}\n\nexport default Dashboard;"],"sourceRoot":""}