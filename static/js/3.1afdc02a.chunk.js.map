{"version":3,"sources":["AssetsUnderManagement/AssetsUnderManagement.js","TwitterShareButton/TwitterShareButton.module.scss","Stats/StatsChart.js","Rebalance/Rebalance.js","utilities/components/DateRangeModal.js","ExecuteTransaction/ExecuteTransaction.js","Stats/Stats.js","Utils/Utils.js","FundsOverview/FundsOverview.js","CurveRedeem/CurveRedeem.js","TwitterShareButton/TwitterShareButton.js","utilities/components/ShareModal.js","DepositRedeem/DepositRedeem.js","EstimatedEarnings/EstimatedEarnings.js","AssetPage/AssetPage.js","utilities/components/BetaModal.js","CurveDeposit/CurveDeposit.js","PortfolioEquityCurve/PortfolioEquityCurve.js","FundsOverviewCurve/FundsOverviewCurve.js","CurveStrategy/CurveStrategy.js","utilities/components/WelcomeModal.js","utilities/components/MigrateModal.js","utilities/components/UpgradeModal.js","Dashboard/Dashboard.js"],"names":["AssetsUnderManagement","state","totalAUM","totalAUMEndOfYear","functionsUtil","this","setProps","props","FunctionsUtil","loadUtils","loadTotalAUM","prevProps","prevState","contractsInitialized","availableStrategies","JSON","stringify","getAggregatedStats","avgAPY","plus","times","div","setState","_this2","react__WEBPACK_IMPORTED_MODULE_9___default","a","createElement","rimble_ui__WEBPACK_IMPORTED_MODULE_10__","width","react_countup__WEBPACK_IMPORTED_MODULE_8___default","delay","decimals","decimal","separator","useEasing","duration","start","parseFloat","end","formattingFn","n","formatMoney","_ref2","countUpRef","style","counterStyle","display","color","whiteSpace","fontFamily","theme","fonts","counter","fontWeight","fontWeights","textAlign","isMobile","fontSize","fontSizes","ref","subtitle","_Title_Title__WEBPACK_IMPORTED_MODULE_7__","Object","assign","subtitleProps","span","alignItems","justifyContent","loaderAlign","size","Component","module","exports","twitterIcon","StatsChart","chartProps","chartType","chartData","chartWidth","parseAum","value","parseInt","toFixed","_this","selectedToken","loadApiData","_callee3","maxGridLines","apiResults","apiResults_unfiltered","totalItems","protocols","versionInfo","keys","tempData","gridYStep","itemIndex","gridYValues","maxChartValue","axisBottomIndex","idleChartData","firstIdleBlock","divergingData","startTimestamp","endTimestamp","timestamp","date","lastRow","maxRange","i","_i","_i2","_i3","prevValue","_i4","prevApr","prevData","avgApy","startBalance","currentBalance","_i5","firstTokenPrice","_i6","regenerator_default","wrap","_context3","prev","next","tokenConfig","chartMode","abrupt","length","globalConfigs","stats","versions","idleVersion","Line","t0","moment","_d","getTime","format","deposits","redeems","forEach","row","idleTokens","fixTokenDecimals","idleSupply","idleTokensPrev","eq","diff","minus","gte","Math","max","abs","values","filter","v","Bar","push","indexBy","enableLabel","minValue","maxValue","label","d","axisBottom","tickSize","legend","tickPadding","orient","legendOffset","legendPosition","tickValues","axisLeft","axisRight","tickRotation","abbreviateNumber","markers","axis","lineStyle","strokeOpacity","textStyle","fill","colors","transactions","action","deposit","legendOrientation","legendOffsetX","stroke","strokeDasharray","redeem","padding","labelTextColor","labelSkipWidth","labelSkipHeight","pointSize","useMesh","animate","pointLabel","curve","enableArea","enableSlices","enableGridX","enableGridY","pointBorderWidth","pointLabelYOffset","legends","dataFrom","itemWidth","itemHeight","translateX","translateY","symbolSize","itemsSpacing","direction","anchor","symbolShape","itemTextColor","effects","on","themeMode","ticks","text","sansSerif","grid","line","lineChartStroke","textTransform","tooltip","container","boxShadow","background","pointColor","from","modifiers","margin","top","right","bottom","left","data","xFormatted","strToMoment","indexValue","point","id","depositFormatted","redeemFormatted","react_default","CustomTooltip","CustomTooltipRow","tokens","hsl","join","map","idlePrice","aum","x","y","toString","p","j","protocolsData","protocolAllocation","protocolAddr","toLowerCase","address","z","BNify","rate","allocation","foundItem","item","pos","indexOf","allocations","name","undefined","xScale","type","xFormat","yFormat","yScale","stacked","showAdvanced","sliceTooltip","slideData","slice","points","serieId","serieColor","yFormatted","protocolName","protocolInfo","protocolColor","protocolAllocationFormatted","protocolAllocationPerc","key","concat","protocolData","protocolPaused","foundProtocol","find","tableCell","_ref3","DashboardCard","cardProps","py","px","borderCollapse","height","totalAllocation","reduce","accumulator","allocationPerc","_ref4","_ref5","enabled","protocolRate","lt","aaveAdditionalAPR","gt","idle","idleRate","protocolEarning","defiScore","isNaN","idleScore","apy","apr","days","earnings","earning","blocknumber","itemPos","floor","additionalProtocols","additionalProtocol","protocol","unshift","objectSpread","tokensProps","tokenProps","isAfter","Date","now","rateField","chartRow","baseProfit","firstProtocolData","firstProtocolBlock","isSameOrBefore","pData","acc","field","rowData","idlePerformance","d1","protocolApy","tokenPrice","asyncForEach","_ref6","asyncToGenerator","mark","_callee2","lastRowData","lastTokenPrice","_context2","_ref7","_callee","tokenExchangeRate","tokenPriceFixed","lastYDiff","_context","price","stop","_x2","apply","arguments","_x","showAdvancedChanged","apiResultsChanged","tokenChanged","componentDidMount","GenericChart","showLoader","parentId","parentIdHeight","Rebalance","loading","processing","rebalance","txHash","shouldRebalance","componentUnmounted","checkRebalance","setStateSafe","sent","e","callback","callback_receipt","preventDefault","tx","error","eventData","eventLabel","status","eventCategory","eventAction","getTransactionError","sendGoogleAnalyticsEvent","window","toastProvider","addMessage","secondaryMessage","colorTheme","actionHref","actionText","variant","transactionHash","contractMethodSendWrapper","token","accountChanged","account","newState","index_es","minHeight","flexDirection","FlexLoader","flexProps","loaderProps","textProps","ml","TxProgressBar","waitText","endMessage","hash","mt","mb","RoundButton","buttonProps","disabled","handleClick","DateRangeModal","quickSelection","ranges","startDate","endDate","componentDidUpdate","selection","target","clone","subtract","closeModal","handleSelect","startTimestampObj","endTimestampObj","_this3","isOpen","ModalCard","closeFunc","Header","title","Body","backgroundColor","cardBg","required","onChange","handleQuickSelect","bind","options","dist","minDate","maxDate","className","Footer","my","mx","borderRadius","mainColor","onClick","React","ExecuteTransaction","txStatus","contractName","methodName","params","ExecuteComponent","parentProps","children","web3","network","progressBarProps","cancelTransaction","execute","componentProps","Stats","delta","carouselMax","rebalances","buttonGroups","carouselIndex","statsVersions","minStartTime","govTokensPool","unlentBalance","carouselOffsetLeft","showRefreshIdleSpeed","dateRangeModalOpened","quickSelections","day","week","weeks","month","setDateRange","isSameOrAfter","isSame","add","isBefore","maxEndDate","toggleAdvancedCharts","setDateRangeModal","filterTokenData","r","setIdleVersion","isRisk","firstResult","lastResult","firstIdlePrice","lastIdlePrice","compoundInfo","firstCompoundData","lastCompoundData","compoundWithCOMPInfo","compoundAvgApr","firstCompoundPrice","lastCompoundPrice","compoundApr","availableTokens","includes","selectedStrategy","getTokenApiData","pop","convertTokenBalance","sum","compoundWithCOMP","compoundData","compoundRate","index","prevRow","prevTotalAllocation","hasRebalanced","prevP","prevAllocation","getGovTokenPool","getUnlentBalance","selectToken","strategy","setStrategyToken","changeToken","handleCarousel","$element","jQuery","position","loadParams","latestVersion","version","enabledStrategies","strategiesParams","versionInfoExtra","param","match","currentNetworkAvailableTokens","customToken","toUpperCase","getLatestAvailableVersion","getVersionInfo","newEndTimestampObj","newStartTimestampObj","initWeb3","loadCarousel","strategyChanged","dateChanged","versionChanged","idleTokenEnabled","getGlobalConfig","apyLong","textSize","statsTokens","versionsOptions","enabledTokens","performanceTooltip","versionDefaultValue","Breadcrumb","showPathMobile","goToSection","path","GenericSelector","innerProps","defaultValue","AssetSelector","isInteractive","pr","StatsCard","labelTooltip","SmartNumber","precision","lineHeight","unitProps","number","unit","VariationNumber","iconPos","iconSize","description","Stats_StatsChart","contracts","pb","pt","AllocationChart","src_Rebalance_Rebalance","pl","h4","RoundIconButton","mr","iconName","transition","titleParentProps","utilities_components_DateRangeModal","strategies","statsProtocols","strategyInfo","availableProtocolsKeys","availableProtocols","Title","titlePostfix","AssetsList","cols","fields","mobile","overflow","desc","showTooltip","rgb","hoverColor","isActive","src_ExecuteTransaction_ExecuteTransaction","Button","completed","Utils","SubComponent","selectedSubsection","subComponent","viewOnly","connectorName","showBreadCrumb","selectedSection","route","directProps","toolProps","flexWrap","IconBox","maxWidth","icon","submenu","tool","toolIndex","flex","image","src","FundsOverview","aggregatedValues","govTokensTotalApr","govTokensUserBalance","govTokensDistribution","govTokensTotalBalance","govTokensTotalAprTooltip","idleTokenUserDistribution","govTokensDistributionTooltip","govTokensTotalBalanceTooltip","idleGovToken","getIdleGovToken","govTokenAvailableTokens","Promise","all","getUserDistribution","getGovTokensUserBalances","loadAssetField","depositTimestamp","getAvgAPYStats","lte","totBalance","govTokenBalance","govToken","balance","dangerouslySetInnerHTML","__html","AssetField","fieldInfo","placement","message","PortfolioEquity","chartHeight","chartToken","frequencySeconds","getFrequencySeconds","component","Heading","h3","maxPrecision","govTokenIndex","tokenName","distributionFrequency","CurveRedeem","inputValue","maxSlippage","unevenAmounts","buttonDisabled","showMaxSlippage","redeemUnderlying","curveTokenConfig","curvePoolContract","curveSwapContract","curveTokenBalance","curveTokensAmounts","fastBalanceSelector","redeemUnevenAmounts","curveRedeemableIdleTokens","toggleUnevenAmounts","checkButtonDisabled","amount","changeInputValue","setFastBalanceSelector","setMaxSlippage","initToken","max_slippage","normalizedAmount","normalizeTokenAmount","withdrawSlippage","curveIdleTokensAmounts","getCurveTokensAmounts","getCurveIdleTokensAmounts","getCurveSlippage","getCurveTokenPrice","curveTokenPrice","redeemableBalance","redeemUnevenAmountsChanged","setInputValue","inputChanged","maxSlippageChanged","tokenConfigChanged","calculateSlippage","loadSelectedTokenConfig","selectedPercentage","curveConfig","getCurvePoolContract","getCurveSwapContract","getCurveTokenBalance","getCurveRedeemableIdleTokens","getCurveAvailableTokens","callbackRedeem","txSucceeded","eventValue","callbackReceiptRedeem","_amount","min_amounts","console","log","coin_index","migrationParams","coinIndex","min_amount","showSlippage","curveTokenName","checked","showBalance","selectDestinationToken","slippage","FastBalanceSelector","percentage","onMouseDown","failed","textOverflow","min","placeholder","border","divider","TwitterShareButton","share","parent","w","innerWidth","open","tweet","contrastColor","styles","ShareModal","getGlobalConfigs","analytics","google","events","escape","customText","confettiEnabled","react_confetti_default","zIndex","run","recycle","innerHeight","src_TwitterShareButton_TwitterShareButton","DepositRedeem","txError","tokenAPY","curveAPY","canRedeem","canDeposit","directMint","activeModal","tokenGovTokens","showBuyFlow","maxUnlentPerc","tokenApproved","skipMigration","redeemSkipGov","showRedeemFlow","contractPaused","canRedeemCurve","erc20ForwarderTx","signedParameters","minAmountForMint","redeemGovTokens","canDepositCurve","redeemSkipGovTokens","actionProxyContract","migrationEnabled","componentMounted","agreeSkipGovTokens","redeemCurveEnabled","depositCurveBalance","depositCurveEnabled","showAdvancedOptions","skipGovTokensGasSave","depositCurveSlippage","erc20ForwarderContract","erc20ForwarderEnabled","showETHWrapperEnabled","skipGovTokensGasSaveUSD","metaTransactionsEnabled","skippedGovTokensBalance","minAmountForMintReached","loadingErc20ForwarderTx","setShowRedeemFlow","setShowBuyFlow","toggleShowAdvancedOptions","toggleSkipMigration","toggleRedeemCurve","toggleDepositCurve","toggleShowETHWrapper","toggleAgreeSkipGovTokens","toggleSkipMint","toggleRedeemGovTokens","toggleRedeemSkipGov","getSkippedGovTokensFlags","govTokensIndexes","govTokensFlags","getGovTokensIndexes","calculateSkippedGovTokens","DAITokenConfig","_skipGovTokenRedeem","WETHTokenConfig","wethPrice","redeemGasUsage","skipGovRedeemGasUsage","govTokenConfig","govTokenPrice","skippedAmount","getUniswapConversionRate","govTokensUserBalances","estimateMethodGasUsage","idleTokenBalance","slicedToArray","setRedeemSkipGovTokens","splice","toggleErc20ForwarderEnabled","toggleMetaTransactionsEnabled","resetModal","setActiveModal","checkUseProxyContract","proxyContract","depositErc20ForwarderEnabled","depositMetaTransactionsEnabled","biconomy","approveContract","_callee4","callbackApprove","callbackReceiptApprove","curveDepositContract","_context4","enableERC20","checkTokenApproved","_callee5","_context5","approveToken","_callee6","_context6","approve","loadTokenInfo","_callee7","curveTokenEnabled","_ref10","_ref11","_context7","checkContractPaused","getCurveDepositContract","checkMigration","tokenBalance","getTokenGovTokens","boost","checkAction","loadAPY","_callee8","_context8","defineProperty","executeAction","_callee11","contractSendResult","callbackDeposit","callbackReceiptDeposit","curvePoolContractInfo","tokensToDeposit","amounts","minMintAmount","depositParams","_tokensToDeposit","_depositParams","mintProxyContractInfo","mintProxyContract","_mintProxyContract$me","functionCall","functionSignature","_referral","txData","idleTokenToRedeem","idleTokenPriceWithFee","_callbackRedeem","_callbackReceiptRedeem","redeemMethod","redeemParams","_context11","getFastBalanceSelector","localStorage","setLocalStorage","lendingProcessing","lendAmount","genericError","getCurveAmounts","getCurveTokenAmount","integerValue","contract","methods","function","toConsumableArray","encodeABI","sendBiconomyTxWithPersonalSign","_callee10","metaInfo","permitOptions","erc20ForwarderBaseContract","expiry","nonce","s","_context10","signPermit","allowed","holder","spender","permitData","permitType","asyncTimeout","sendBiconomyTxWithErc20Forwarder","request","_callee9","_erc20ForwarderContra","_functionCall","_functionSignature","_context9","buildBiconomyErc20ForwarderTx","getReferralAddress","getIdleTokenPriceWithFee","_callee12","_context12","setAction","loadProxyContracts","actions","_ref17","_callee15","erc20ForwarderContractInfo","hasProxyContract","_context15","initContract","abi","approved","_x5","getTokenAprs","tokenAprs","getCurveAPY","getQueryStringParameterByName","checkAddress","erc20ForwarderEnabledChanged","tokenBalanceChanged","actionChanged","fastBalanceSelectorChanged","redeemSkipGovChanged","redeemGovTokensChanged","agreeSkipGovTokensChanged","redeemSkipGovTokensChanged","depositCurveChanged","calculateCurveSlippage","showPoolPerc","convertedAmount","genericContractCall","depositPerc","maxUnlentPercFormatted","govTokensEnabled","govTokensDisabled","skipMintForDepositEnabled","skipMintForDeposit","redeemGovTokenEnabled","govTokensBalance","redeemSkipGovConfig","redeemSkipGovEnabled","disabledTokens","redeemSkipGovNoTokens","showAdvancedRedeemOptions","metaTransactionsAvailable","useMetaTx","erc20ForwarderClient","totalBalance","migrateText","migration","depositCurve","showDepositCurve","showRedeemCurve","showCurveSlippage","showAdvancedDepositOptions","batchDepositInfo","batchDepositEnabled","batchDepositDepositEnabled","depositEnabled","showBatchDeposit","isMigrationTool","ethWrapperInfo","ETHWrapperComponent","showETHWrapper","canPerformAction","showActionFlow","showReferral","Migrate","migrateTextBefore","TransactionField","transaction","isDisabled","openTooltipModal","isRainbow","cursor","m","CardIconButton","imageProps","ExtLink","href","getWalletProvider","capitalize","primary","fullWidth","cost","align","tokenFeesPercentage","borderColor","minWidth","ConnectBox","src_CurveRedeem_CurveRedeem","BuyModal","showInline","availableMethods","buyToken","components_ShareModal","EstimatedEarnings","maxInputValue","loadChart","getTokenApy","earningsYear","tokenApy","amountMonth","amount3Months","amount6Months","amountYear","perc","monthColor","month3","month3Color","month6","month6Color","year","yearColor","labelTextColorModifiers","gridYValue","_ref","labels","showAPYDisclaimer","verticalAlign","AssetPage","tokenFees","idleTokenPrice","availableGovTokens","getTokenFees","getIdleTokenPrice","getTokenBalance","getUserTokenFees","getGovTokensUserTotalBalance","loadTokensInfo","availableTokensChanged","transactionsChanged","userHasFunds","src_DepositRedeem_DepositRedeem","src_FundsOverview_FundsOverview","src_EstimatedEarnings_EstimatedEarnings","TransactionsList","BetaModal","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","iconHeight","CurveDeposit","depositSlippage","migrationContract","curveTokensBalance","migrationSucceeded","migrationContractApproved","checkMigrationContractApproved","getMigrationParams","approveCallback","migrationCallback","idleTokenBalanceChanged","toMigrate","n_coins","underlyingBalanceToDeposit","normalizeIdleTokenBalance","hasCurveTokens","PortfolioEquityCurve","chartwidth","loadChartData","quickDateSelectionChanged","quickDateSelection","getCurveTxs","curveTxs","tokensBalance","processedTxs","firstTxTimestamp","timeStamp","curveTokens","currentDate","prevBalances","prevTimestamp","minChartValue","aggregatedBalancesKeys","tokensBalancesPerDate","aggregatedBalance","currTimestamp","tokensData","foundBalances","tokensBalances","momentDate","filteredTokenData","filteredBalances","lastFilteredTx","lastTokenData","lastTx","lastTxBalance","formattedDate","aggregatedBalanceParsed","aggregatedBalances","balances","yFormatDecimals","daysCount","daysFrequency","ceil","areaOpacity","areaBaselineValue","ChartCustomTooltip","ChartCustomTooltipRow","tokenInfo","hex","formattedBalance","FundsOverviewCurve","compAPR","getCurveAvgBuyPrice","getCurveAvgSlippage","src_PortfolioEquityCurve_PortfolioEquityCurve","redeemBalance","depositBalance","curveZapContract","curveAvailableTokens","changeFromToken","setSelectedToken","baseToken","getSelectedToken","urlParams","param1","getCurveZapContract","updateAssetSelector","curveTokensToRedeem","src_CurveDeposit_CurveDeposit","src_FundsOverviewCurve_FundsOverviewCurve","enabledActions","WelcomeModal","email","subscribed","sendingForm","sendUserInfo","sendEmail","walletProvider","userInfo","provider","simpleIDPassUserInfo","setTimeout","err","handleSubmit","assertThisInitialized","handleValidation","axios","post","newsletterSubscription","endpoint","then","catch","walletAddress","lastLogin","getItem","parse","signedUp","parentNode","classList","onSubmit","green","Field","Input","outline","header_styles","input","ButtonLoader","buttonText","isLoading","gradientButton","MigrateModal","dontShowAgain","toggleDontShowAgain","removeStoredItem","migrate","tokenMigrationRoute","fieldProps","protocolsTokensBalances","minPrecision","UpgradeModal","_args3","convert","convertTool","tokensToMigrate","tokenKey","oldContractBalanceFormatted","oldIdleTokensToMigrate","newTokenConfig","Dashboard","menu","baseRoute","clickEvent","currentRoute","pageComponent","currentSection","showResetButton","pageComponentProps","timeoutId","modalTitle","modalContent","logout","setConnector","comingSoon","selected","bgColor","imageInactive","iconInactive","imageInactiveDark","iconInactiveDark","curveParams","CurveStrategy","stakeConfig","u","isExternalLink","section","param2","section_is_strategy","param1_is_strategy","param1_is_token","param2_is_token","sectionRoute","subm","sendGoogleAnalyticsPageview","clearTimeout","setCurrentSection","loadMenu","accountInizialized","initAccount","initializeContracts","checkModals","prevParams","checkBetaApproval","checkTokensToMigrate","checkWelcomeModal","checkProtocolsTokensBalances","isOriginUrl","checkUrlOrigin","isBetaApproved","getStoredItem","showUpgradeModal","getTokensToMigrate","getProtocolsTokensBalances","welcomeIsOpen","welcomeModalProps","currTime","lastTime","frequency","migrateModalEnabled","showMigrateModal","isDashboard","replace","newRoute","location","scrollTo","routeParts","PageComponent","menuRightBorder","borderRight","DashboardMenu","overflowY","overflowX","DashboardHeader","isCorrectNetwork","current","components_BetaModal","components_UpgradeModal","components_MigrateModal","TooltipModal","content","components_WelcomeModal","simpleID","initSimpleID","baseTokenName"],"mappings":"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","file":"static/js/3.1afdc02a.chunk.js","sourcesContent":["import Title from '../Title/Title';\nimport CountUp from 'react-countup';\nimport React, { Component } from 'react';\nimport { Box, Flex, Text, Loader } from \"rimble-ui\";\nimport FunctionsUtil from '../utilities/FunctionsUtil';\n\nclass AssetsUnderManagement extends Component {\n\n  state = {\n    totalAUM:null,\n    totalAUMEndOfYear:null\n  }\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.loadTotalAUM();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const availableStrategiesChanged = !prevProps.availableStrategies && JSON.stringify(prevProps.availableStrategies) !== JSON.stringify(this.props.availableStrategies);\n    if (availableStrategiesChanged || contractsInitialized){\n      this.loadTotalAUM();\n    }\n  }\n\n  async loadTotalAUM(){\n\n    if (!this.props.availableStrategies || !this.props.contractsInitialized){\n      return true;\n    }\n\n    const {\n      avgAPY,\n      totalAUM\n    } = await this.functionsUtil.getAggregatedStats();\n\n    const totalAUMEndOfYear = totalAUM.plus(totalAUM.times(avgAPY.div(100)));\n\n    this.setState({\n      totalAUM,\n      totalAUMEndOfYear\n    });\n  }\n\n  render() {\n    return this.state.totalAUM ? (\n      <Box\n        width={1}\n      >\n        <CountUp\n          delay={0}\n          decimals={4}\n          decimal={'.'}\n          separator={''}\n          useEasing={false}\n          duration={31536000}\n          start={parseFloat(this.state.totalAUM)}\n          end={parseFloat(this.state.totalAUMEndOfYear)}\n          formattingFn={ n => '$ '+this.functionsUtil.formatMoney(n,4) }\n        >\n          {({ countUpRef, start }) => (\n            <span\n              style={ this.props.counterStyle ? this.props.counterStyle : {\n                display:'block',\n                color:'dark-gray',\n                whiteSpace:'nowrap',\n                fontFamily:this.props.theme.fonts.counter,\n                fontWeight:this.props.theme.fontWeights[5],\n                textAlign: this.props.isMobile ? 'center' : 'right',\n                fontSize: this.props.isMobile ? '1.6em' : this.props.theme.fontSizes[6]\n              }}\n              ref={countUpRef}\n            />\n          )}\n        </CountUp>\n        {\n          (typeof this.props.subtitle === 'undefined' || this.props.subtitle) && (\n            <Title\n              fontWeight={3}\n              fontSize={[2,2]}\n              color={'cellTitle'}\n              textAlign={['center','right']}\n              {...this.props.subtitleProps}\n            >\n              {\n                this.props.subtitle ? this.props.subtitle : (\n                  <Text.span fontWeight={'inherit'} color={'inherit'} fontSize={'inherit'}>Assets Under Management <Text.span color={'cellTitle'} fontWeight={3} fontSize={'70%'}>(V3 + V4)</Text.span></Text.span>\n                )\n              }\n            </Title>\n          )\n        }\n      </Box>\n    ) : (\n      <Flex\n        alignItems={'center'}\n        justifyContent={this.props.loaderAlign || 'center'}\n      >\n        <Loader\n          size={\"30px\"}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default AssetsUnderManagement;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"twitterIcon\":\"TwitterShareButton_twitterIcon__2QCmn\"};","import moment from 'moment';\nimport { Bar } from '@nivo/bar';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CustomTooltip from '../CustomTooltip/CustomTooltip';\nimport CustomTooltipRow from '../CustomTooltip/CustomTooltipRow';\n\nclass StatsChart extends Component {\n  state = {\n    chartProps:{},\n    chartType:null,\n    chartData:null,\n    chartWidth:null\n  };\n\n  async componentDidMount() {\n    this.setState({\n      chartData:null,\n      chartType:null,\n      chartProps:null,\n    });\n    this.loadUtils();\n    this.loadApiData();\n  }\n\n  async componentDidUpdate(prevProps) {\n    const showAdvancedChanged = prevProps.showAdvanced !== this.props.showAdvanced;\n    const apiResultsChanged = prevProps.apiResults !== this.props.apiResults;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    if (apiResultsChanged || showAdvancedChanged || tokenChanged){\n      this.componentDidMount();\n    }\n  }\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  parseAum = value => {\n    return (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.tokenConfig || !this.props.selectedToken || !this.props.chartMode || !this.props.apiResults){\n      return false;\n    }\n\n    const maxGridLines = 4;\n    const apiResults = this.props.apiResults;\n    const apiResults_unfiltered = this.props.apiResults_unfiltered;\n    const totalItems = apiResults.length;\n    const protocols = Object.assign([],this.props.tokenConfig.protocols);\n    // const compoundProtocol = this.props.tokenConfig.protocols.find( p => (p.name === 'compound'));\n\n    const versionInfo = globalConfigs.stats.versions[this.props.idleVersion];\n\n    let keys = {};\n    let tempData = {};\n    let gridYStep = 0;\n    let itemIndex = 0;\n    let chartData = [];\n    let chartProps = {};\n    let chartType = Line;\n    let gridYValues = [];\n    let maxChartValue = 0;\n    let axisBottomIndex = 0;\n    let idleChartData = null;\n    let firstIdleBlock = null;\n\n    switch (this.props.chartMode){\n      case 'VOL':\n        let divergingData = {};\n\n        const startTimestamp = parseInt(apiResults_unfiltered[0].timestamp);\n        const endTimestamp = parseInt(moment()._d.getTime()/1000);\n\n        for (let timestamp=startTimestamp;timestamp<=endTimestamp;timestamp+=86400){\n          const date = moment(timestamp*1000).format(\"YYYY/MM/DD\");\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n        }\n\n        let lastRow = null;\n        apiResults_unfiltered.forEach(row => {\n          const date = moment(row.timestamp*1000).format(\"YYYY/MM/DD\");\n          const idleTokens = this.functionsUtil.fixTokenDecimals(row.idleSupply,18);\n\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp:row.timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n\n          if (lastRow){\n            const idleTokensPrev = this.functionsUtil.fixTokenDecimals(lastRow.idleSupply,18);\n            const idleTokensDiff = !idleTokens.eq(idleTokensPrev);\n            if (idleTokensDiff){\n              const diff = idleTokens.minus(idleTokensPrev);\n              // Deposits\n              if (diff.gte(0)){\n                divergingData[date].deposits+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,divergingData[date].deposits);\n              } else {\n                divergingData[date].redeems+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,Math.abs(divergingData[date].deposits));\n              }\n            }\n\n          } else {\n            divergingData[date].deposits+=parseFloat(idleTokens);\n          }\n\n          lastRow = row;\n        });\n\n        chartData = Object.values(divergingData).filter(v => {\n          return (!this.props.startTimestamp || v.timestamp>=this.props.startTimestamp) && (!this.props.endTimestamp || v.timestamp<=this.props.endTimestamp);\n        });\n\n        let maxRange = 0;\n        chartData.forEach(v => {\n          maxRange = Math.max(maxRange,Math.abs(v.deposits),Math.abs(v.redeems));\n        })\n\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          indexBy: 'date',\n          enableLabel: false,\n          minValue:-maxRange,\n          maxValue:maxRange,\n          label: d => {\n            return Math.abs(d.value);\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days',\n          },\n          axisLeft: null,\n          axisRight: {\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:8,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(Math.abs(v),0)\n          },\n          markers: [\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { strokeOpacity: 0 },\n              textStyle: { fill: this.props.theme.colors.transactions.action.deposit },\n              legend: 'deposits',\n              legendPosition: 'top-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { stroke: this.props.theme.colors['dark-gray'], strokeDasharray: '5 3' },\n              textStyle: { fill: this.props.theme.colors.transactions.action.redeem },\n              legend: 'redeems',\n              legendPosition: 'bottom-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n          ],\n          keys:['deposits','redeems'],\n          padding:0.4,\n          colors:[this.props.theme.colors.transactions.action.deposit, this.props.theme.colors.transactions.action.redeem],\n          labelTextColor: 'inherit:darker(1.4)',\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 80 : 100,\n              itemHeight: 18,\n              translateX: 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            },\n            tooltip:{\n              container:{\n                boxShadow:null,\n                background:null\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 50, bottom: 45, left: 50 } : { top: 20, right: 70, bottom: 70, left: 50 },\n          tooltip:(data) => {\n            const xFormatted = this.functionsUtil.strToMoment(data.indexValue).format('MMM DD');\n            const point = {\n              id:data.id,\n              data:{\n                xFormatted\n              }\n            };\n            const depositFormatted = this.functionsUtil.abbreviateNumber(data.data.deposits,2)+' '+this.props.selectedToken;\n            const redeemFormatted = this.functionsUtil.abbreviateNumber(data.data.redeems,2)+' '+this.props.selectedToken;\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                <CustomTooltipRow\n                  label={'Deposits'}\n                  color={this.props.theme.colors.deposit}\n                  value={depositFormatted}\n                />\n                <CustomTooltipRow\n                  label={'Redeem'}\n                  color={this.props.theme.colors.redeem}\n                  value={redeemFormatted}\n                />\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      /*\n      case 'AUM_ALL':\n        await this.functionsUtil.asyncForEach(Object.keys(availableTokens[globalConfigs.network.requiredNetwork]),async (tokenName,i) => {\n          const tokenConfig = availableTokens[globalConfigs.network.requiredNetwork][tokenName];\n          const tokenDataApi = await this.props.getTokenData(tokenConfig.address);\n          chartData.push({\n            id:tokenName,\n            color: tokenConfig.color,\n            data: tokenDataApi.map((d,i) => {\n              const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n              const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,tokenConfig.decimals);\n              const aum = idleTokens.times(idlePrice);\n              return {\n                x: moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\"),\n                y: parseInt(aum.toString())\n              };\n            })\n          });\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken,\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v),\n            orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            legendPosition: 'middle'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            format: '%b %d',\n            tickValues: this.props.isMobile ? 'every 4 days' : 'every 3 days',\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 36,\n            legendPosition: 'middle'\n          },\n          enableArea:false,\n          curve:\"linear\",\n          enableSlices:'x',\n          enableGridX:true,\n          enableGridY:false,\n          colors:d => d.color,\n          pointSize:0,\n          pointColor:{ from: 'color', modifiers: []},\n          pointBorderWidth:1,\n          pointLabel:\"y\",\n          pointLabelYOffset:-12,\n          useMesh:true,\n          animate:false,\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 60, bottom: 40, left: 60 },\n        };\n      break;\n      */\n      case 'AUM':\n\n        maxChartValue = 0;\n\n        chartData.push({\n          id:'AUM',\n          color: 'hsl('+globalConfigs.stats.tokens[this.props.selectedToken].color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n            const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n            const aum = idleTokens.times(idlePrice);\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(aum.toString());\n\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x,y };\n          })\n        });\n\n        // Add allocation\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          apiResults.map((d,i) => {\n            return d.protocolsData.filter((protocolAllocation,x) => {\n                return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            })\n            .map((protocolAllocation,z) => {\n              const protocolPaused = this.functionsUtil.BNify(protocolAllocation.rate).eq(0);\n              if (!protocolPaused){\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals));\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                let foundItem = chartData[0].data.filter(item => { return item.x === x });\n                if (foundItem){\n                  foundItem = foundItem[0];\n                  const pos = chartData[0].data.indexOf(foundItem);\n                  if (!foundItem.allocations){\n                    foundItem.allocations = {};\n                  }\n                  foundItem.allocations[p.name] = y;\n                  chartData[0].data[pos] = foundItem;\n                }\n              }\n              return undefined;\n            })[0]\n          }).filter((v) => { return v !== undefined; } )\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:v => this.functionsUtil.formatMoney(v,v<1 ? 3 :0),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 0,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:true,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            if (typeof point === 'object' && typeof point.data === 'object'){\n              return (\n                <CustomTooltip\n                  point={point}\n                >\n                  <CustomTooltipRow\n                    label={point.serieId}\n                    color={point.serieColor}\n                    value={point.data.yFormatted}\n                  />\n                  {\n                    point.data.allocations && typeof point.data.allocations === 'object' &&\n                      Object.keys(point.data.allocations).map(protocolName => {\n                        const protocolInfo = globalConfigs.stats.protocols[protocolName];\n                        const protocolColor = 'hsl('+protocolInfo.color.hsl.join(',')+')';\n                        const protocolAllocation = point.data.allocations[protocolName];\n                        const protocolAllocationFormatted = this.functionsUtil.formatMoney(protocolAllocation,protocolAllocation<1 ? 3 : 0);\n                        const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                        return (\n                          <CustomTooltipRow\n                            color={protocolColor}\n                            label={protocolInfo.label}\n                            key={`${point.id}_${protocolName}`}\n                            value={`${protocolAllocationFormatted} (${protocolAllocationPerc})`}\n                          />\n                        );\n                      })\n                  }\n                </CustomTooltip>\n              );\n              /*\n              return (\n                <div\n                    key={point.id}\n                    style={{\n                      background: 'white',\n                      color: 'inherit',\n                      fontSize: 'inherit',\n                      borderRadius: '2px',\n                      boxShadow: 'rgba(0, 0, 0, 0.25) 0px 1px 2px',\n                      padding: '5px 9px'\n                    }}\n                >\n                  <div>\n                    <table style={{width:'100%',borderCollapse:'collapse'}}>\n                      <tbody>\n                        <tr>\n                          <td style={{padding:'3px 5px'}}>\n                            <span style={{display:'block', width: '12px', height: '12px', background: point.serieColor}}></span>\n                          </td>\n                          <td style={{padding:'3px 5px'}}>{point.serieId}</td>\n                          <td style={{padding:'3px 5px'}}><strong>{point.data.yFormatted}</strong></td>\n                        </tr>\n                        {\n                          point.data.allocations && typeof point.data.allocations === 'object' &&\n                            Object.keys(point.data.allocations).map(protocolName => {\n                              const protocolColor = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n                              const protocolAllocation = this.functionsUtil.formatMoney(point.data.allocations[protocolName],0);\n                              const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                              return (\n                                <tr key={`${point.id}_${protocolName}`}>\n                                  <td style={{padding:'3px 5px'}}>\n                                    <span style={{display:'block', width: '12px', height: '12px', background: protocolColor}}></span>\n                                  </td>\n                                  <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{protocolName}</td>\n                                  <td style={{padding:'3px 5px'}}><strong>{protocolAllocation}</strong> ({protocolAllocationPerc})</td>\n                                </tr>\n                              );\n                            })\n                        }\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              );\n              */\n            }\n\n            return null;\n          }\n        };\n      break;\n      case 'ALL':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\");\n\n          let row = {\n            date\n          };\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const foundProtocol = this.props.tokenConfig.protocols.find((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() });\n            if (foundProtocol){\n              const protocolInfo = globalConfigs.stats.protocols[foundProtocol.name];\n              if (!protocolPaused){\n                let allocation = parseFloat(this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals));\n                keys[protocolInfo.label] = 1;\n                row[protocolInfo.label] = allocation;\n                row[`${protocolInfo.label}Color`] = 'hsl('+protocolInfo.color.hsl.join(',')+')';\n                // console.log(protocolInfo.label,this.functionsUtil.BNify(protocolData.allocation).toString(),this.props.tokenConfig.decimals,allocation);\n                maxChartValue = Math.max(maxChartValue,allocation);\n              } else {\n                row[protocolInfo.label] = 0;\n              }\n            }\n          });\n\n\n          tempData[date] = row;\n        });\n\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n            orient: 'left',\n            tickSize: 0,\n            tickPadding: 10,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            tickValues:gridYValues,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickSize: 0,\n            tickPadding: 10,\n            orient: 'bottom-left',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days'\n          },\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            tooltip: {\n              container:{\n                padding:'0',\n                boxShadow:'none',\n                background:'transparent',\n              },\n              tableCell:{\n                padding:'0'\n              }\n            },\n            axis: {\n              ticks: {\n                text: {\n                  fontSize:this.props.isMobile ? 12 : 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize:this.props.isMobile ? 12 : 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 60 },\n          tooltip:({ id, value, color }) => {\n            const allocation = this.functionsUtil.formatMoney(value,0);\n            return (\n              <DashboardCard\n                cardProps={{\n                  py:1,\n                  px:2,\n                  width:1,\n                }}\n              >\n                <table\n                  style={{width:'100%',borderCollapse:'collapse'}}\n                >\n                  <tbody>\n                    <tr>\n                      <td style={{padding:'3px 5px'}}>\n                        <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                      </td>\n                      <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                      <td style={{padding:'3px 5px'}}><strong>{allocation} {this.props.selectedToken}</strong></td>\n                    </tr>\n                  </tbody>\n                </table>\n              </DashboardCard>\n            )\n          }\n        }\n      break;\n      case 'ALL_PERC':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\")\n          let row = {\n            date:moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\")\n          };\n          if (tempData[date]){\n            row = tempData[date];\n          }\n\n          const totalAllocation = d.protocolsData.reduce((accumulator,protocolAllocation) => {\n            const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n            return this.functionsUtil.BNify(accumulator).plus(allocation);\n          },0);\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const protocolName = this.props.tokenConfig.protocols.filter((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() })[0].name;\n            if (!protocolPaused){\n              const allocation = this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals);\n              const allocationPerc = parseFloat(allocation.div(totalAllocation).times(100));\n              keys[protocolName] = 1;\n              row[protocolName] = allocationPerc;\n              row[`${protocolName}Color`] = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n            } else if (typeof row[protocolName] !== undefined) {\n              row[protocolName] = 0;\n            } \n          });\n          \n          tempData[date] = row;\n        });\n\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          data: chartData,\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 40, bottom: 40, left: 60 },\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => parseInt(v)+'%'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            orient: 'bottom',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days'\n          },\n          tooltip:({ id, value, color }) => {\n            const allocation = parseInt(value)===100 ? this.functionsUtil.formatMoney(value,0) : this.functionsUtil.formatMoney(value,2);\n            return (\n              <table style={{width:'100%',borderCollapse:'collapse'}}>\n                <tbody>\n                  <tr>\n                    <td style={{padding:'3px 5px'}}>\n                      <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                    </td>\n                    <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                    <td style={{padding:'3px 5px'}}><strong>{allocation}%</strong></td>\n                  </tr>\n                </tbody>\n              </table>\n            )\n          }\n        }\n      break;\n      case 'APR':\n\n        maxChartValue = 0;\n\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n          if (!protocolInfo.enabled){\n            return;\n          }\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n          chartData.push({\n            id:protocolInfo.label,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                let protocolRate = this.functionsUtil.BNify(protocolAllocation.rate);\n                const protocolPaused = protocolRate.eq(0);\n                if (!protocolPaused){\n\n                  // Aave V1 wrong rate FIX\n                  if (protocolRate.lt(0) && protocolAllocation.aaveAdditionalAPR && this.functionsUtil.BNify(protocolAllocation.aaveAdditionalAPR).gt(0)){\n                    protocolRate = protocolRate.plus(this.functionsUtil.BNify(protocolAllocation.aaveAdditionalAPR));\n                  }\n\n                  protocolRate = this.functionsUtil.fixTokenDecimals(protocolRate,18);\n\n                  const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                  const y = parseFloat(protocolRate);\n\n                  maxChartValue = Math.max(maxChartValue,y);\n\n                  return { x, y };\n                }\n                return undefined;\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color:'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data:apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(this.functionsUtil.fixTokenDecimals(d.idleRate,18));\n            maxChartValue = Math.max(maxChartValue,y);\n            return { x, y };\n          })\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(2)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    // const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'SCORE':\n\n        let prevValue = 0;\n        maxChartValue = 0;\n\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n          if (!protocolInfo.enabled){\n            return;\n          }\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n          chartData.push({\n            id:protocolInfo.label,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(protocolAllocation.defiScore);\n\n                y = isNaN(y) || !y ? prevValue : y;\n                prevValue = y;\n                maxChartValue = Math.max(maxChartValue,y);\n\n                return { x, y };\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            let y = parseFloat(d.idleScore);\n            y = isNaN(y) || !y ? prevValue : y;\n            prevValue = y;\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x, y };\n          })\n        });\n\n        // debugger;\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(1),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 0,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE_V4':\n\n        itemIndex = 0;\n        maxChartValue = 0;\n        // let prevApy = null;\n        let prevApr = null;\n        let prevData = null;\n        let avgApy = this.functionsUtil.BNify(0);\n        let startBalance = this.functionsUtil.BNify(1);\n        let currentBalance = this.functionsUtil.BNify(1);\n\n        // console.log('PRICE_V4',apiResults);\n\n        idleChartData = [];\n\n        apiResults.forEach((d,i) => {\n\n          let y = 0;\n          let apy = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n          const apr = this.functionsUtil.fixTokenDecimals(d.idleRate,18).div(100);\n          // const apy = this.functionsUtil.apr2apy(apr);\n          \n          avgApy = avgApy.plus(apr.times(100));\n\n          if (prevApr){\n            const days = (d.timestamp-prevData.timestamp)/86400;\n            // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n            const earnings = currentBalance.times(prevApr.times(days).div(365));\n            currentBalance = currentBalance.plus(earnings);\n\n            const earning = currentBalance.div(startBalance).minus(1).times(100);\n            y = parseFloat(earning);\n\n            // apy = earning.times(365).div(totDays).toFixed(2);\n            apy = avgApy.div(i+1).toFixed(2);\n          }\n\n          prevData = d;\n          // prevApy = apy;\n          prevApr = apr;\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          if (apy>0){\n            idleChartData.push({ x, y, apy, blocknumber, itemPos });\n          }\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        protocols.forEach( p => {\n\n          const protocolInfo = {...globalConfigs.stats.protocols[p.name]};\n\n          if (protocolInfo.tokensProps && protocolInfo.tokensProps[this.props.selectedToken]){\n            const tokenProps = protocolInfo.tokensProps[this.props.selectedToken];\n            Object.keys(tokenProps).forEach(p => {\n              protocolInfo[p] = tokenProps[p];\n            });\n          }\n\n          if (!protocolInfo.enabled || (protocolInfo.startTimestamp && this.functionsUtil.strToMoment(protocolInfo.startTimestamp).isAfter(Date.now()))){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          // prevApy = null;\n          prevApr = null;\n          prevData = null;\n          let baseProfit = 0;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n          avgApy = this.functionsUtil.BNify(0);\n          startBalance = this.functionsUtil.BNify(1);\n          currentBalance = this.functionsUtil.BNify(1);\n          const apiResults_filtered = apiResults.filter( d => (!protocolInfo.startTimestamp || moment(protocolInfo.startTimestamp).isSameOrBefore(moment(d.timestamp*1000))) );\n\n          apiResults_filtered.forEach( (d,i) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              let protocolRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n                if (protocolData[field]){\n                  return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(protocolData[field]));\n                }\n                return this.functionsUtil.BNify(acc);\n              },0) : this.functionsUtil.BNify(protocolData[rateField]);\n\n              // Aave V1 wrong rate FIX\n              if (protocolRate.lt(0) && protocolData.aaveAdditionalAPR && this.functionsUtil.BNify(protocolData.aaveAdditionalAPR).gt(0)){\n                protocolRate = protocolRate.plus(this.functionsUtil.BNify(protocolData.aaveAdditionalAPR));\n              }\n\n              const protocolPaused = protocolRate.eq(0);\n              if (!protocolPaused){\n\n                let rowData = {};\n\n                let y = 0;\n                let apy = 0;\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                const apr = this.functionsUtil.fixTokenDecimals(protocolRate,18).div(100);\n\n                avgApy = avgApy.plus(apr.times(100));\n                // const apy = this.functionsUtil.apr2apy(apr);\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null) {\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => (d1.blocknumber>=firstProtocolBlock) );\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                      y = baseProfit;\n                      apy = avgApy.toFixed(2);\n                    }\n                  }\n                }\n\n                if (prevData) {\n                  const days = (d.timestamp-prevData.timestamp)/86400;\n                  // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n                  const earnings = currentBalance.times(prevApr.times(days).div(365));\n                  currentBalance = currentBalance.plus(earnings);\n\n                  const earning = currentBalance.div(startBalance).minus(1).times(100);\n                  y = parseFloat(earning)+baseProfit;\n\n                  apy = avgApy.div(i+1).toFixed(2);\n                }\n\n                prevData = d;\n                prevApr = apr;\n\n                if (firstIdleBlock === null){\n                  firstIdleBlock = parseInt(d.blocknumber);\n                }\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                const itemPos = Math.floor(itemIndex/totalItems*100);\n                // const blocknumber = d.blocknumber;\n\n                itemIndex++;\n\n                if (apy>0){\n                  rowData = {\n                    x,\n                    y,\n                    apy,\n                    itemPos\n                  };\n\n                  itemIndex++;\n                  chartRow.data.push(rowData);\n                }\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          data: idleChartData,\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')'\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              itemWidth: this.props.isMobile ? 70 : 160,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE':\n        // let prevTokenPrice = null;\n        maxChartValue = 0;\n        let firstTokenPrice = null;\n\n        idleChartData = apiResults.map((d,i) => {\n\n          let y = 0;\n          let apy = 0;\n          let days = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n          const tokenPrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n\n          if (!firstTokenPrice){\n            firstTokenPrice = tokenPrice;\n          } else {\n            y = parseFloat(tokenPrice.div(firstTokenPrice).minus(1).times(100));\n\n            days = (d.timestamp-apiResults[0].timestamp)/86400;\n            const earning = tokenPrice.div(firstTokenPrice).minus(1).times(100);\n            apy = earning.times(365).div(days).toFixed(2);\n\n            // console.log(firstTokenPrice.toString(),tokenPrice.toString(),earning.toString(),days,y,apy);\n          }\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          return { x, y, apy, blocknumber, itemPos };\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        await this.functionsUtil.asyncForEach(protocols,async (p) => {\n\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n\n          if (!protocolInfo.enabled){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          let baseProfit = 0;\n          firstTokenPrice = null;\n          let lastRowData = null;\n          let lastTokenPrice = null;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n\n          await this.functionsUtil.asyncForEach(apiResults,async (d) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData && protocolData[rateField]){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              const protocolPaused = this.functionsUtil.BNify(protocolData[rateField]).eq(0);\n              if (!protocolPaused){\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null){\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => {\n                      return d1.blocknumber>=firstProtocolBlock;\n                    });\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                    }\n                  }\n                }\n\n                let rowData = {};\n                let tokenExchangeRate = protocolData.price;\n                let tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n\n                // Take data from\n                if (protocolInfo && protocolInfo.data && protocolInfo.data[p.address.toLowerCase()] && protocolInfo.data[p.address.toLowerCase()][d.blocknumber]){\n                  tokenExchangeRate = this.functionsUtil.BNify(globalConfigs.stats.protocols[p.name].data[p.address.toLowerCase()][d.blocknumber]);\n                  tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                }/* else if (p.name === 'aave'){\n                  // Token holders (aDAI = 0xc025c03e10f656d3ee76685d53d236824d8ef3da , aUSDC = 0xd2c734fbd8f5d1c809185e014016dd4097e94711)\n                  let aaveTokenBalance = await this.functionsUtil.genericContractCall(p.token,'balanceOf',['0xd2c734fbd8f5d1c809185e014016dd4097e94711'],{},d.blocknumber);\n                  if (aaveTokenBalance){\n                    if (!Object.values(aave_data).length){\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(1,p.decimals);\n                      aave_data[d.blocknumber] = aaveTokenBalance.toString();\n                    } else {\n                      const firstBalance = Object.values(aave_data)[0];\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(this.functionsUtil.BNify(aaveTokenBalance).div(this.functionsUtil.BNify(firstBalance)).toFixed(p.decimals),p.decimals);\n                      aave_data[d.blocknumber] = tokenExchangeRate.toString();\n                    }\n                  }\n                }\n                */\n\n                let y = baseProfit;\n                let apy = 0;\n\n                if (!firstTokenPrice){\n                  firstTokenPrice = tokenPriceFixed;\n                } else {\n                  if (tokenPriceFixed.lt(lastTokenPrice)){\n                    firstTokenPrice = tokenPriceFixed;\n                    const lastYDiff = chartRow.data[chartRow.data.length-1].y-chartRow.data[chartRow.data.length-2].y;\n                    y = lastRowData.y+lastYDiff;\n                    baseProfit = y;\n                  } else {\n                    y += parseFloat(tokenPriceFixed.div(firstTokenPrice).minus(1).times(100));\n                  }\n\n                  const days = (d.timestamp-apiResults[0].timestamp)/86400;\n                  const earning = tokenPriceFixed.div(firstTokenPrice).minus(1).times(100);\n                  apy = earning.times(365).div(days).toFixed(2);\n                }\n\n                y = Math.max(0,y);\n                maxChartValue = Math.max(maxChartValue,y);\n\n                const itemPos = Math.floor(itemIndex/totalItems*100);\n\n                rowData = {\n                  x,\n                  y,\n                  apy,\n                  itemPos\n                };\n\n                itemIndex++;\n                lastRowData = rowData;\n                chartRow.data.push(rowData);\n                lastTokenPrice = tokenPriceFixed;\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: idleChartData\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              itemWidth: this.props.isMobile ? 70 : 100,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      chartType,\n      chartProps,\n      chartData\n    });\n  }\n\n  render() {\n    return(\n      <GenericChart\n        showLoader={true}\n        {...this.state.chartProps}\n        height={this.props.height}\n        type={this.state.chartType}\n        data={this.state.chartData}\n        width={this.state.chartWidth}\n        isMobile={this.props.isMobile}\n        parentId={this.props.parentId}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default StatsChart;","import { Flex, Text } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\n\nclass Rebalance extends Component {\n\n  state = {\n    loading:true,\n    processing:{\n      rebalance:{\n        txHash:null,\n        loading:false\n      },\n    },\n    shouldRebalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n  componentUnmounted = false;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillUnmount(){\n    this.componentUnmounted = true;\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.checkRebalance();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged || accountChanged){\n      this.checkRebalance();\n    }\n  }\n\n  async setStateSafe(newState,callback=null) {\n    if (!this.componentUnmounted){\n      return this.setState(newState,callback);\n    }\n    return null;\n  }\n\n  checkRebalance = async () => {\n    this.setStateSafe({\n      loading:true,\n    });\n\n    const shouldRebalance = await this.functionsUtil.checkRebalance(this.props.tokenConfig);\n\n    this.setStateSafe({\n      loading:false,\n      shouldRebalance\n    });\n  }\n\n  rebalance = async (e) => {\n    e.preventDefault();\n\n    const callback = (tx,error) => {\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: 'Rebalance',\n        eventAction: this.props.selectedToken,\n      };\n\n      let txDenied = false;\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      if (tx.status === 'success'){\n        // Toast message\n        window.toastProvider.addMessage(`Rebalance completed`, {\n          secondaryMessage: `Now the pool is balanced!`,\n          colorTheme: 'light',\n          actionHref: \"\",\n          actionText: \"\",\n          variant: \"success\",\n        });\n\n      } else if (!txDenied){\n        window.toastProvider.addMessage(`Rebalance error`, {\n          secondaryMessage: `The rebalance has failed, try again...`,\n          colorTheme: 'light',\n          actionHref: \"\",\n          actionText: \"\",\n          variant: \"failure\",\n        });\n      }\n\n      this.setStateSafe((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          rebalance:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n\n      this.checkRebalance();\n    }\n\n    const callback_receipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setStateSafe((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            rebalance:{\n              ...prevState.processing.rebalance,\n              txHash\n            }\n          }\n        })\n      );\n    };\n\n    this.props.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'rebalance', [], null , callback, callback_receipt);\n\n    this.setStateSafe({\n      processing:{\n        rebalance:{\n          txHash:null,\n          loading:true\n        }\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Flex\n        px={3}\n        width={1}\n        minHeight={'100px'}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n      {\n        this.state.loading ? (\n          <FlexLoader\n            flexProps={{\n              flexDirection:'row'\n            }}\n            loaderProps={{\n              size:'30px'\n            }}\n            textProps={{\n              ml:2\n            }}\n            text={'Checking rebalance...'}\n          />\n        ) : (\n          this.state.processing.rebalance.loading ? (\n            <TxProgressBar {...this.props} waitText={`Rebalance estimated in`} endMessage={`Finalizing rebalance request...`} hash={this.state.processing.rebalance.txHash} />\n          ) : (\n            <Flex\n              width={1}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                mt={0}\n                mb={3}\n                textAlign={'center'}\n              >\n                {this.state.shouldRebalance ? 'Rebalance the entire pool. All users will bless you.' : 'The pool is already balanced.'}\n              </Text>\n              <RoundButton\n                buttonProps={{\n                  width:'auto',\n                  disabled:!this.state.shouldRebalance\n                }}\n                handleClick={e => this.rebalance(e)}\n              >\n                Rebalance\n              </RoundButton>\n            </Flex>\n          )\n        )\n      }\n      </Flex>\n    )\n  }\n}\n\nexport default Rebalance;","import React from \"react\";\nimport {\n  Modal,\n  Button,\n  Flex,\n  Field,\n  Select\n} from \"rimble-ui\";\nimport moment from 'moment';\nimport ModalCard from './ModalCard';\nimport 'react-date-range/dist/styles.css';\nimport { DateRange } from 'react-date-range';\nimport 'react-date-range/dist/theme/default.css';\nimport './DateRangeModal.css';\n\nclass DateRangeModal extends React.Component {\n\n  state = {\n    quickSelection:'',\n    ranges:{\n      startDate: this.props.startDate ? this.props.startDate : new Date(),\n      endDate: this.props.endDate ? this.props.endDate : new Date(),\n      key: 'selection'\n    }\n  }\n\n  handleSelect(ranges){\n    this.setState({\n      quickSelection:'',\n      ranges:ranges.selection\n    });\n  }\n\n  handleQuickSelect(e){\n    let startDate = null;\n    let endDate = moment(new Date());\n    const quickSelection = e.target.value;\n\n    switch (quickSelection){\n      case 'day':\n        startDate = endDate.clone().subtract(1,'day');\n      break;\n      case 'week':\n        startDate = endDate.clone().subtract(1,'week');\n      break;\n      case 'weeks':\n        startDate = endDate.clone().subtract(2,'week');\n      break;\n      case 'month':\n        startDate = endDate.clone().subtract(1,'month');\n      break;\n      default:\n        startDate = null;\n        endDate = null;\n      break;\n    }\n\n    if (startDate && endDate){\n      startDate = startDate._d;\n      endDate = endDate._d;\n\n      const ranges = {\n        startDate,\n        endDate,\n        key:'selection'\n      };\n\n      this.setState({\n        ranges,\n        quickSelection\n      }, () => {\n        this.closeModal();\n      });\n    }\n  }\n\n  componentDidUpdate = (prevProps) => {\n    if (prevProps.startDate !== this.props.startDate || prevProps.endDate !== this.props.endDate){\n      this.setState({\n        ranges:{\n          startDate: this.props.startDate ? this.props.startDate : new Date(),\n          endDate: this.props.endDate ? this.props.endDate : new Date(),\n          key: 'selection'\n        }\n      });\n    }\n  }\n\n  closeModal(){\n    const newState = this.props.handleSelect(this.state.ranges,this.state.quickSelection);\n    const ranges = {\n      startDate:newState.startTimestampObj ? newState.startTimestampObj._d : new Date(),\n      endDate:newState.endTimestampObj ? newState.endTimestampObj._d : new Date(),\n      key: 'selection'\n    };\n    this.setState({\n      ranges\n    });\n    this.props.closeModal();\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        <ModalCard closeFunc={this.props.closeModal}>\n          <ModalCard.Header title={'Select Date Range'}>\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex width={1} flexDirection={'column'} alignItems={'center'}>\n              <Field label=\"Quick Date Selection\" style={{display:'flex',width:'100%',alignItems:'stretch',justifyContent:'center'}}>\n                <Select\n                  style={{\n                    fontSize:'14px',\n                    height:'2.5em',\n                    boxShadow:'none',\n                    color:this.props.theme.colors.counter,\n                    backgroundColor:this.props.theme.colors.cardBg\n                  }}\n                  width={'100%'}\n                  required={true}\n                  onChange={this.handleQuickSelect.bind(this)}\n                  value={this.state.quickSelection}\n                  options={[\n                    { value: '', label: \"Select an option\" },\n                    { value: \"day\", label: \"Last day\" },\n                    { value: \"week\", label: \"Last week\" },\n                    { value: \"weeks\", label: \"Last 2 weeks\" },\n                    { value: \"month\", label: \"Last month\" }\n                  ]}\n                />\n              </Field>\n              <DateRange\n                ranges={[this.state.ranges]}\n                minDate={this.props.minDate}\n                maxDate={this.props.maxDate}\n                className={this.props.themeMode}\n                onChange={this.handleSelect.bind(this)}\n              />\n            </Flex>\n          </ModalCard.Body>\n          <ModalCard.Footer>\n            <Flex px={[2,0]} flexDirection={['column', 'row']} width={1} justifyContent={'center'}>\n              <Button\n                my={2}\n                mx={[0, 2]}\n                borderRadius={4}\n                mainColor={'blue'}\n                onClick={ e => this.closeModal(e) }\n                size={this.props.isMobile ? 'small' : 'medium'}\n              >\n              APPLY\n              </Button>\n            </Flex>\n          </ModalCard.Footer>\n        </ModalCard>\n      </Modal>\n    );\n  }\n\n}\n\nexport default DateRangeModal;","import { Flex } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\n\nclass ExecuteTransaction extends Component {\n\n  state = {\n    txStatus:null,\n    processing:{\n      txHash:null,\n      loading:false\n    }\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  execute(){\n\n    const callback = (tx,error) => {\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Transaction',\n        eventLabel: this.props.methodName,\n        eventAction: this.props.contractName\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      const txSucceeded = tx.status === 'success';\n      if (txSucceeded){\n        if (typeof this.props.callback === 'function'){\n          this.props.callback();\n        }\n      }\n\n      this.setState({\n        txStatus:tx.status,\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      });\n    };\n\n    const callbackReceipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        txStatus:'processing',\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    this.functionsUtil.contractMethodSendWrapper(this.props.contractName,this.props.methodName,this.props.params,callback,callbackReceipt);\n\n    this.setState((prevState) => ({\n      txStatus:'loading',\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  render() {\n    const ExecuteComponent = this.props.Component;\n    return (\n      <Flex\n        {...this.props.parentProps}\n      >\n        {\n          this.state.txStatus === 'success' && this.props.children ?\n            this.props.children\n          : this.state.processing && this.state.processing.loading ? (\n            <TxProgressBar\n              web3={this.props.web3}\n              network={this.props.network}\n              {...this.props.progressBarProps}\n              hash={this.state.processing.txHash}\n              waitText={`${this.props.action} estimated in`}\n              cancelTransaction={this.cancelTransaction.bind(this)}\n              endMessage={`Finalizing ${this.props.action} request...`}\n            />\n          ) : (\n            <ExecuteComponent\n              onClick={this.execute.bind(this)}\n              {...this.props.componentProps}\n            >\n              {this.props.componentProps.value}\n            </ExecuteComponent>\n          )\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default ExecuteTransaction;\n","import moment from 'moment';\nimport Title from '../Title/Title';\nimport StatsChart from './StatsChart';\nimport React, { Component } from 'react';\nimport Rebalance from '../Rebalance/Rebalance';\nimport StatsCard from '../StatsCard/StatsCard';\nimport AssetsList from '../AssetsList/AssetsList';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport GenericSelector from '../GenericSelector/GenericSelector';\nimport RoundIconButton from '../RoundIconButton/RoundIconButton';\nimport VariationNumber from '../VariationNumber/VariationNumber';\nimport AllocationChart from '../AllocationChart/AllocationChart';\nimport DateRangeModal from '../utilities/components/DateRangeModal';\nimport { Flex, Text, Heading, Box, Icon, Button, Link } from 'rimble-ui';\nimport ExecuteTransaction from '../ExecuteTransaction/ExecuteTransaction';\nimport AssetsUnderManagement from '../AssetsUnderManagement/AssetsUnderManagement';\n\nclass Stats extends Component {\n  state = {\n    aum:null,\n    apr:null,\n    days:'-',\n    delta:null,\n    earning:null,\n    minDate:null,\n    maxDate:null,\n    carouselMax:1,\n    rebalances:'-',\n    buttonGroups:[],\n    apiResults:null,\n    carouselIndex:0,\n    idleVersion:null,\n    statsVersions:{},\n    minStartTime:null,\n    endTimestamp:null,\n    showAdvanced:true,\n    govTokensPool:null,\n    unlentBalance:null,\n    quickSelection:null,\n    startTimestamp:null,\n    endTimestampObj:null,\n    shouldRebalance:null,\n    carouselOffsetLeft:0,\n    startTimestampObj:null,\n    showRefreshIdleSpeed:false,\n    apiResults_unfiltered:null,\n    dateRangeModalOpened:false\n  };\n\n  quickSelections = {\n    day:'Last day',\n    week:'Last week',\n    weeks:'Last 2 weeks',\n    month:'Last month'\n  };\n\n  // Utils\n  functionsUtil = null;\n  componentUnmounted = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount() {\n    this.loadUtils();\n    await this.loadParams();\n  }\n\n  componentWillUnmount(){\n    this.componentUnmounted = true;\n  }\n\n  async setStateSafe(newState,callback=null) {\n    if (!this.componentUnmounted){\n      return this.setState(newState,callback);\n    }\n    return null;\n  }\n\n  showRefreshIdleSpeed(){\n    this.setState({\n      showRefreshIdleSpeed:true\n    });\n  }\n\n  getLatestAvailableVersion(){\n    const statsVersions = globalConfigs.stats.versions;\n    let latestVersion = null;\n    Object.keys(statsVersions).forEach( version => {\n      const versionInfo = statsVersions[version];\n      if (versionInfo.enabledStrategies.includes(this.props.selectedStrategy)){\n        latestVersion = version;\n      }\n    });\n\n    return latestVersion;\n  }\n\n  getVersionInfo(version){\n    if (!version){\n      version = this.state.idleVersion;\n    }\n\n    if (!globalConfigs.stats.versions[version]){\n      return null;\n    }\n\n    const versionInfo = Object.assign({},globalConfigs.stats.versions[version]);\n\n    if (versionInfo.strategiesParams && versionInfo.strategiesParams[this.props.selectedStrategy]){\n      const versionInfoExtra = versionInfo.strategiesParams[this.props.selectedStrategy];\n      Object.keys(versionInfoExtra).forEach( param => {\n        versionInfo[param] = versionInfoExtra[param];\n      });\n    }\n\n    return versionInfo;\n  }\n\n  async loadParams() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    const newState = {};\n    const { match: { params } } = this.props;\n\n    const currentNetworkAvailableTokens = Object.keys(this.props.availableTokens);\n\n    if (!!params.customToken && currentNetworkAvailableTokens.indexOf(params.customToken.toUpperCase()) !== -1 ){\n      newState.selectedToken = params.customToken.toUpperCase();\n    } else {\n      newState.selectedToken = this.props.selectedToken.toUpperCase();\n    }\n\n    newState.tokenConfig = this.props.availableTokens[newState.selectedToken];\n    newState.minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp,'YYYY-MM-DD');\n    newState.maxEndDate = moment();\n\n    newState.endTimestampObj = moment(moment().format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    newState.latestVersion = this.getLatestAvailableVersion();\n    newState.idleVersion = this.state.idleVersion === null ? newState.latestVersion : this.state.idleVersion;\n\n    const versionInfo = this.getVersionInfo(newState.idleVersion);\n\n    // console.log('loadParams',newState.latestVersion,newState.idleVersion,versionInfo);\n\n    if (newState.idleVersion && versionInfo.endTimestamp){\n      const newEndTimestampObj = moment(moment(versionInfo.endTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.endTimestampObj.isAfter(newEndTimestampObj)){\n        newState.endTimestampObj = newEndTimestampObj;\n        newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n      }\n\n      if (!newState.maxEndDate || newState.maxEndDate.isAfter(newEndTimestampObj)){\n        newState.maxEndDate = newEndTimestampObj;\n      }\n    }\n\n    newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n\n    // Set start date\n    newState.startTimestampObj = newState.endTimestampObj.clone().subtract(1,'month');\n    newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n\n    if (newState.idleVersion && versionInfo.startTimestamp){\n      const newStartTimestampObj = moment(moment(versionInfo.startTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.startTimestampObj.isBefore(newStartTimestampObj)){\n        newState.startTimestampObj = newStartTimestampObj;\n        newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n      }\n\n      if (newState.minStartTime.isBefore(newStartTimestampObj)){\n        newState.minStartTime = newStartTimestampObj;\n      }\n    }\n\n    newState.minDate = newState.minStartTime._d;\n    newState.maxDate = newState.maxEndDate._d;\n\n    if (newState !== this.state){\n      await this.setStateSafe(newState);\n    }\n  }\n\n  setDateRange = (ranges,quickSelection=null) => {\n\n    const minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp);\n\n    let startTimestampObj = moment(ranges.startDate).isSameOrAfter(minStartTime) ? moment(ranges.startDate) : minStartTime;\n    let endTimestampObj = moment(ranges.endDate);\n\n    if (startTimestampObj.isSame(endTimestampObj)){\n      endTimestampObj.add(1,'day');\n    }\n\n    endTimestampObj = moment(endTimestampObj.format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    if (startTimestampObj.isBefore(this.state.minStartTime)){\n      startTimestampObj = this.state.minStartTime;\n    }\n\n    if (endTimestampObj.isAfter(this.state.maxEndDate)){\n      endTimestampObj = this.state.maxEndDate;\n    }\n\n    const startTimestamp = parseInt(startTimestampObj._d.getTime()/1000);\n    const endTimestamp = parseInt(endTimestampObj._d.getTime()/1000);\n\n    const newState = {\n      minStartTime,\n      endTimestamp,\n      quickSelection,\n      startTimestamp,\n      endTimestampObj,\n      startTimestampObj\n    };\n\n    this.setStateSafe(newState);\n\n    return newState;\n  }\n\n  toggleAdvancedCharts = (e) => {\n    e.preventDefault();\n    this.setStateSafe({\n      showAdvanced:!this.state.showAdvanced\n    });\n  }\n\n  setDateRangeModal = (dateRangeModalOpened) => {\n    if (dateRangeModalOpened !== this.state.dateRangeModalOpened){\n      this.setStateSafe({\n        dateRangeModalOpened\n      });\n    }\n  }\n\n  async componentDidMount() {\n\n    if (!this.props.web3){\n      this.props.initWeb3();\n      return false;\n    }\n\n    /*\n    const style = document.createElement('style');\n    style.id = 'crisp-custom-style';\n    style.type = 'text/css';\n    style.innerHTML = `\n    .crisp-client{\n      display:none !important;\n    }`;\n    document.body.appendChild(style);\n    */\n\n    this.loadUtils();\n    await this.loadParams();\n    this.loadApiData();\n    this.loadCarousel();\n  }\n\n  loadCarousel(){\n    const carouselMax = this.props.isMobile ? 3 : 2;\n    this.setStateSafe({\n      carouselMax\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const strategyChanged = prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    const dateChanged = prevState.startTimestamp !== this.state.startTimestamp || prevState.endTimestamp !== this.state.endTimestamp;\n    const versionChanged = prevState.idleVersion !== this.state.idleVersion;\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n\n    if (mobileChanged){\n      this.loadCarousel();\n    }\n\n    if (contractsInitialized || tokenChanged || strategyChanged || versionChanged){\n      // console.log('componentDidUpdate',this.props.selectedStrategy,this.props.selectedToken);\n      await this.componentDidMount();\n    } else if (dateChanged){\n      this.loadApiData();\n    }\n  }\n\n  filterTokenData = (apiResults) => {\n    return apiResults.filter((r,i) => {\n      return (!this.state.startTimestamp || r.timestamp >= this.state.startTimestamp) && (!this.state.endTimestamp || r.timestamp <= this.state.endTimestamp);\n    });\n  }\n\n  setIdleVersion = idleVersion => {\n    this.setStateSafe({\n      idleVersion\n    });\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    // Get COMP APR\n    // const compAPR = await this.functionsUtil.getCompAPR(this.props.tokenConfig);\n    // console.log('compAPR',compAPR.toString());\n\n    const startTimestamp = this.state.minDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.minDate).format('DD/MM/YYYY 00:00:00'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n    const endTimestamp = this.state.maxDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.maxDate).format('DD/MM/YYYY 23:59:59'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n\n    const isRisk = ['v3','v4'].includes(this.state.idleVersion) && this.props.selectedStrategy === 'risk';\n    let apiResults_unfiltered = await this.functionsUtil.getTokenApiData(this.props.tokenConfig.address,isRisk,startTimestamp,endTimestamp,true,7200);\n\n    const apiResults = this.filterTokenData(apiResults_unfiltered);\n\n    // console.log('loadApiData',startTimestamp,endTimestamp,new Date(startTimestamp*1000),new Date(endTimestamp*1000),apiResults,apiResults_unfiltered);\n\n    if (!apiResults || !apiResults_unfiltered || !apiResults.length || !apiResults_unfiltered.length){\n      return false;\n    }\n\n    const firstResult = apiResults[0];\n    const lastResult = Object.values(apiResults).pop();\n\n    window.moment = moment;\n\n    let days = (lastResult.timestamp-firstResult.timestamp)/86400;\n    if (days === 0){\n      days = 1;\n    }\n\n    let apr = null;\n    let delta = 'N/A';\n\n    const idleTokens = this.functionsUtil.fixTokenDecimals(lastResult.idleSupply,18);\n    const firstIdlePrice = this.functionsUtil.fixTokenDecimals(firstResult.idlePrice,this.props.tokenConfig.decimals);\n    const lastIdlePrice = this.functionsUtil.fixTokenDecimals(lastResult.idlePrice,this.props.tokenConfig.decimals);\n\n    // Calculate AUM\n    let aum = idleTokens.times(lastIdlePrice);\n\n    // Convert Token balance\n    aum = await this.functionsUtil.convertTokenBalance(aum,this.props.selectedToken,this.props.tokenConfig,isRisk);\n\n    const compoundInfo = this.props.tokenConfig.protocols.filter((p) => { return p.name === 'compound' })[0];\n    const firstCompoundData = compoundInfo ? firstResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n    const lastCompoundData = compoundInfo ? lastResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n\n    if (this.state.idleVersion === 'v4') {\n\n      apr = apiResults.reduce( (sum,r) => {\n        const idleRate = this.functionsUtil.fixTokenDecimals(r.idleRate,18);\n        return this.functionsUtil.BNify(sum).plus(idleRate);\n      },0);\n\n      // Calculate average\n      apr = apr.div(apiResults.length);\n\n      if (compoundInfo){\n        const compoundWithCOMPInfo = globalConfigs.stats.protocols.compoundWithCOMP;\n        const rateField = compoundWithCOMPInfo.rateField ? compoundWithCOMPInfo.rateField : 'rate';\n\n        let compoundAvgApr = apiResults.reduce( (sum,r) => {\n\n          const compoundData = r.protocolsData.find((pData,x) => {\n            return pData.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase()\n          });\n\n          let compoundRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n            if (compoundData && compoundData[field]){\n              return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(compoundData[field]));\n            }\n            return this.functionsUtil.BNify(acc);\n          },0) : this.functionsUtil.BNify(compoundData[rateField]);\n\n          compoundRate = this.functionsUtil.fixTokenDecimals(compoundRate,18);\n\n          return this.functionsUtil.BNify(sum).plus(compoundRate);\n        },0);\n\n        // Calculate average\n        compoundAvgApr = compoundAvgApr.div(apiResults.length);\n\n        // compoundAvgApr = this.functionsUtil.apr2apy(compoundAvgApr.div(100)).times(100);\n        // apr = this.functionsUtil.apr2apy(apr.div(100)).times(100);\n\n        delta = apr.minus(compoundAvgApr);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n\n      apr = apr.toFixed(2);\n\n    } else {\n      const earning = lastIdlePrice.div(firstIdlePrice).minus(1).times(100);\n      apr = earning.times(365).div(days).toFixed(2);\n\n      if (firstCompoundData && lastCompoundData){\n        const firstCompoundPrice = this.functionsUtil.fixTokenDecimals(firstCompoundData.price,this.props.tokenConfig.decimals);\n        const lastCompoundPrice = this.functionsUtil.fixTokenDecimals(lastCompoundData.price,this.props.tokenConfig.decimals);\n        const compoundApr = lastCompoundPrice.div(firstCompoundPrice).minus(1).times(100);\n        delta = earning.minus(compoundApr).times(365).div(days);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n    }\n\n    // Count rebalances\n    let rebalances = 0;\n    apiResults.forEach((row,index) => {\n      if (index){\n        const prevRow = apiResults[index-1];\n\n        const totalAllocation = row.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        const prevTotalAllocation = prevRow.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        let hasRebalanced = false;\n        row.protocolsData.forEach( p => {\n          if (hasRebalanced){\n            return;\n          }\n          const prevP = prevRow.protocolsData.find( prevP => (prevP.protocolAddr.toLowerCase() === p.protocolAddr.toLowerCase()) );\n          const allocation = this.functionsUtil.fixTokenDecimals(p.allocation,this.props.tokenConfig.decimals);\n          const prevAllocation = prevP ? this.functionsUtil.fixTokenDecimals(prevP.allocation,this.props.tokenConfig.decimals) : this.functionsUtil.BNify(0);\n          const allocationPerc = parseInt(parseFloat(allocation.div(totalAllocation).times(100)));\n          const prevAllocationPerc = parseInt(parseFloat(prevAllocation.div(prevTotalAllocation).times(100)));\n          if (allocationPerc!==prevAllocationPerc){\n            rebalances++;\n            hasRebalanced = true;\n          }\n        });\n      }\n    });\n\n    // Add gov tokens balance to AUM\n    const availableTokens = {};\n    availableTokens[this.props.selectedToken] = this.props.tokenConfig;\n    const govTokensPool = await this.functionsUtil.getGovTokenPool(null,availableTokens,'DAI');\n    if (govTokensPool){\n      aum = aum.plus(govTokensPool);\n    }\n\n    // Format AUM\n    /*\n    aum = this.functionsUtil.formatMoney(parseFloat(aum));\n\n    const conversionRateField = this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'conversionRateField']);\n    if (conversionRateField){\n      aum += ' $';\n    }\n    */\n\n    let unlentBalance = await this.functionsUtil.getUnlentBalance(this.props.tokenConfig);\n    if (unlentBalance){\n      unlentBalance = this.functionsUtil.formatMoney(parseFloat(unlentBalance));\n    }\n\n    this.setStateSafe({\n      aum,\n      apr,\n      days,\n      delta,\n      apiResults,\n      rebalances,\n      govTokensPool,\n      unlentBalance,\n      apiResults_unfiltered\n    });\n  }\n\n  selectToken = async (strategy,token) => {\n    await this.props.setStrategyToken(strategy,token);\n    this.props.changeToken(token);\n  }\n\n  handleCarousel = action => {\n    let carouselIndex = this.state.carouselIndex;\n    if (action==='next' && carouselIndex<this.state.carouselMax){\n      carouselIndex++;\n    } else if (action==='back' && carouselIndex>0){\n      carouselIndex--;\n    }\n\n    const $element = window.jQuery(`#carousel-cursor > div:eq(${carouselIndex})`);\n    const carouselOffsetLeft = -parseFloat($element.position().left)+'px';\n\n    this.setStateSafe({\n      carouselIndex,\n      carouselOffsetLeft\n    });\n  }\n\n  render() {\n\n    const valueProps = {\n      lineHeight:1,\n      fontSize:[4,5],\n      fontWeight:[3,4],\n      color:'statValue'\n    };\n\n    const unitProps = {\n      ml:2,\n      lineHeight:1,\n      fontWeight:[2,3],\n      color:'statValue',\n      fontSize:[3,'23px'],\n    };\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const apyLong = this.functionsUtil.getGlobalConfig(['messages','apyLong']);\n\n    if (!this.props.availableStrategies){\n      return (\n        <FlexLoader\n          textProps={{\n            textSize:4,\n            fontWeight:2\n          }}\n          loaderProps={{\n            mb:3,\n            size:'40px'\n          }}\n          flexProps={{\n            minHeight:'50vh',\n            flexDirection:'column'\n          }}\n          text={'Loading assets...'}\n        />\n      );\n    }\n\n    const statsTokens = this.functionsUtil.getGlobalConfig(['stats','tokens']);\n\n    if (!this.props.selectedToken){\n      const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n      const enabledTokens = [];\n      const statsProtocols = this.functionsUtil.getGlobalConfig(['stats','protocols']);\n\n      Object.keys(statsTokens).forEach(token => {\n        const tokenInfo = statsTokens[token];\n        if (tokenInfo.enabled){\n          enabledTokens.push(token);\n        }\n      });\n      return (\n        <Flex\n          mb={3}\n          width={1}\n          flexDirection={'column'}\n        >\n          <AssetsUnderManagement\n            {...this.props}\n            loaderAlign={'flex-end'}\n          />\n          {\n            Object.keys(strategies).map(strategy => {\n              const strategyInfo = strategies[strategy];\n              const availableTokens = this.props.availableStrategies[strategy];\n\n              if (!availableTokens){\n                return false;\n              }\n              \n              // Get available protocols name\n              const availableProtocolsKeys = [];\n              Object.keys(availableTokens).forEach( token => {\n                availableTokens[token].protocols.forEach( protocolInfo => {\n                  if (availableProtocolsKeys.indexOf(protocolInfo.name)<0){\n                    availableProtocolsKeys.push(protocolInfo.name);\n                  }\n                });\n              });\n\n              const availableProtocols = availableProtocolsKeys.map( protocolName => {\n                return statsProtocols[protocolName];\n              },{});\n\n              return (\n                <Box\n                  mb={2}\n                  width={1}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                  key={`strategy-container-${strategy}`}\n                >\n                  <Title\n                    mt={3}\n                    mb={[3,4]}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'baseline'}\n                      justifyContent={'center'}\n                    >\n                      {strategyInfo.title}\n                      {\n                        strategyInfo.titlePostfix &&\n                          <Text\n                            ml={2}\n                            fontWeight={3}\n                            fontSize={[2,4]}\n                            color={'dark-gray'}\n                          >\n                            {strategyInfo.titlePostfix}\n                          </Text>\n                      }\n                    </Flex>\n                  </Title>\n                  <AssetsList\n                    enabledTokens={enabledTokens}\n                    handleClick={(props) => this.selectToken(strategy,props.token)}\n                    cols={[\n                      {\n                        title:'CURRENCY',\n                        props:{\n                          width:[0.26,0.15]\n                        },\n                        fields:[\n                          {\n                            name:'icon',\n                            props:{\n                              mr:2,\n                              height:['1.4em','2.3em']\n                            }\n                          },\n                          {\n                            name:'tokenName'\n                          }\n                        ]\n                      },\n                      {\n                        title:'POOL',\n                        props:{\n                          width:[0.22,0.14],\n                        },\n                        fields:[\n                          {\n                            name:'allocationChart',\n                            mobile:false,\n                            parentProps:{\n                              width:0.3\n                            },\n                            style:{\n                              overflow:'visible'\n                            },\n                            showLoader:false,\n                          },\n                          {\n                            name:'pool',\n                            props:{\n                              ml:1\n                            },\n                            parentProps:{\n                              width:[1,0.7]\n                            }\n                          }\n                        ]\n                      },\n                      {\n                        title:'APY',\n                        desc:apyLong,\n                        props:{\n                          width: [0.29,0.14],\n                        },\n                        parentProps:{\n                          flexDirection:'column',\n                          alignItems:'flex-start',\n                        },\n                        fields:[\n                          {\n                            name:'apy',\n                            showTooltip:true\n                          },\n                          {\n                            name:'idleDistribution',\n                            showLoader:false,\n                            props:{\n                              decimals:this.props.isMobile ? 1 : 2,\n                              fontSize:this.props.isMobile ? '9px' : 0\n                            }\n                          },\n                        ]\n                      },\n                      {\n                        title:'RISK SCORE',\n                        desc:this.functionsUtil.getGlobalConfig(['messages','riskScore']),\n                        mobile:false,\n                        props:{\n                          width:[0.27,0.16],\n                        },\n                        fields:[\n                          {\n                            name:'score'\n                          }\n                        ]\n                      },\n                      {\n                        title:'APR LAST WEEK',\n                        mobile:false,\n                        props:{\n                          width: 0.25,\n                        },\n                        parentProps:{\n                          width:1,\n                          pr:[2,4]\n                        },\n                        fields:[\n                          {\n                            name:'aprChart',\n                            style:{\n                              overflow:'visible',\n                            },\n                          }\n                        ]\n                      },\n                      {\n                        title:'',\n                        props:{\n                          width:[0.23,0.16],\n                        },\n                        parentProps:{\n                          width:1\n                        },\n                        fields:[\n                          {\n                            name:'button',\n                            label:this.props.isMobile ? 'View' : 'View stats',\n                            props:{\n                              width:1,\n                              fontSize:3,\n                              fontWeight:3,\n                              height:'45px',\n                              borderRadius:4,\n                              boxShadow:null,\n                              mainColor:'redeem',\n                              size: this.props.isMobile ? 'small' : 'medium',\n                              handleClick:(props) => this.selectToken(strategy,props.token)\n                            }\n                          }\n                        ]\n                      }\n                    ]}\n                    {...this.props}\n                    selectedStrategy={strategy}\n                    availableTokens={availableTokens}\n                  />\n                  {\n                    !this.props.isMobile &&\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'flex-end'}\n                      >\n                        {\n                          availableProtocols.filter( p => p.legend ).map( (p,index) => (\n                            <Flex\n                              mr={3}\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              key={`legend_${index}`}\n                            >\n                              <Box\n                                mr={1}\n                                width={'10px'}\n                                height={'10px'}\n                                borderRadius={'50%'}\n                                backgroundColor={`rgb(${p.color.rgb.join(',')})`}\n                              >\n                              </Box>\n                              <Text.span\n                                fontSize={1}\n                                color={'cellText'}\n                              >\n                                {p.label}\n                              </Text.span>\n                            </Flex>\n                          ))\n                        }\n                      </Flex>\n                  }\n                </Box>\n              );\n            })\n          }\n          {\n            idleTokenEnabled && !this.state.showRefreshIdleSpeed ? (\n              <Flex\n                mb={4}\n                width={1}\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <Link\n                  hoverColor={'primary'}\n                  onClick={this.showRefreshIdleSpeed.bind(this)}\n                >\n                  Refresh Idle Speed\n                </Link>\n              </Flex>\n            ) : idleTokenEnabled && this.state.showRefreshIdleSpeed &&\n              <DashboardCard\n                cardProps={{\n                  p:2,\n                  mb:4,\n                  width:1,\n                  mt:[2,3],\n                }}\n                isActive={true}\n                isInteractive={false}\n              >\n                <Flex\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                >\n                  <Text\n                    fontWeight={500}\n                    color={'flashColor'}\n                    textAlign={'center'}\n                    fontSize={[1,'15px']}\n                  >\n                    By executing this transaction you can adjust the IDLE distribution speed among the pools.\n                  </Text>\n                  <ExecuteTransaction\n                    action={'Refresh'}\n                    Component={Button}\n                    parentProps={{\n                      mt:1\n                    }}\n                    componentProps={{\n                      size:'small',\n                      mainColor:'blue',\n                      value:'REFRESH IDLE SPEED'\n                    }}\n                    params={[]}\n                    contractName={'IdleController'}\n                    methodName={'refreshIdleSpeeds'}\n                    {...this.props}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'center'}\n                      justifyContent={'center'}\n                    >\n                      <Icon\n                        mr={1}\n                        name={'Done'}\n                        size={'1.4em'}\n                        color={this.props.theme.colors.transactions.status.completed}\n                      />\n                      <Text\n                        fontWeight={500}\n                        fontSize={'15px'}\n                        color={'copyColor'}\n                        textAlign={'center'}\n                      >\n                        Idle Speed Refreshed\n                      </Text>\n                    </Flex>\n                  </ExecuteTransaction>\n                </Flex>\n              </DashboardCard>\n          }\n        </Flex>\n      );\n    } else {\n\n      const tokenConfig = statsTokens[this.props.selectedToken];\n\n      const versionsOptions = Object.keys(globalConfigs.stats.versions).filter( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return versionInfo.enabledTokens.includes(this.props.selectedToken) && versionInfo.enabledStrategies.includes(this.props.selectedStrategy);\n      }).map( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return {\n          value:version,\n          label:versionInfo.label\n        }\n      });\n\n      const versionInfo = this.getVersionInfo(this.state.idleVersion);\n\n      let performanceTooltip = null;\n      if (this.state.idleVersion && versionInfo){\n        const showPerformanceTooltip = this.functionsUtil.getGlobalConfig(['stats','versions',this.state.idleVersion,'showPerformanceTooltip']);\n        performanceTooltip = showPerformanceTooltip ? this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'performanceTooltip']) : null;\n      }\n\n      const versionDefaultValue = versionsOptions.find( v => (v.value === this.state.idleVersion) );\n\n      return (\n        <Flex\n          p={0}\n          width={1}\n          flexDirection={'column'}\n        >\n          {\n          /*\n          }\n          <Flex position={['absolute','relative']} left={0} px={[3,0]} zIndex={10} width={1} flexDirection={'row'} mb={[0,3]}>\n            <Flex alignItems={'center'} width={[2/3,1/2]}>\n              <RouterLink to=\"/\">\n                <Image src=\"images/logo-gradient.svg\"\n                  height={['35px','48px']}\n                  position={'relative'} />\n              </RouterLink>\n              <Heading.h3 color={'dark-gray'} textAlign={'left'} fontWeight={3} lineHeight={'initial'} fontSize={[4,5]} ml={[1,2]}>\n                <Text.span fontSize={'80%'}>|</Text.span> Stats\n              </Heading.h3>\n            </Flex>\n            <Flex flexDirection={'row'} width={[1/3,1/2]} justifyContent={'flex-end'} alignItems={'center'}>\n              {\n                this.state.buttonGroups && \n                  this.props.isMobile ? (\n                    <ButtonGroup\n                      isMobile={this.props.isMobile}\n                      components={ this.state.buttonGroups.reduce((components,array) => components.concat(array),[]) }\n                      theme={'light'}\n                    />\n                  ) :\n                  this.state.buttonGroups.map((buttonGroup,i) => (\n                    <ButtonGroup\n                      key={`buttonGroup_${i}`}\n                      isMobile={this.props.isMobile}\n                      components={buttonGroup}\n                      theme={'light'}\n                    />\n                  ))\n              }\n            </Flex>\n          </Flex>\n          */\n          }\n          <Box\n            mb={[3,4]}\n          >\n            <Flex\n              flexDirection={['column','row']}\n            >\n              <Flex\n                width={[1,0.4]}\n              >\n                <Breadcrumb\n                  {...this.props}\n                  showPathMobile={true}\n                  text={'ASSETS OVERVIEW'}\n                  isMobile={this.props.isMobile}\n                  handleClick={ e => this.props.goToSection('stats') }\n                  path={[this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])]}\n                />\n              </Flex>\n              <Flex\n                mt={[3,0]}\n                width={[1,0.6]}\n                flexDirection={['column','row']}\n                justifyContent={['center','space-between']}\n              >\n                <Flex\n                  width={[1,0.26]}\n                  flexDirection={'column'}\n                >\n                  <GenericSelector\n                    innerProps={{\n                      p:1,\n                      height:['100%','46px'],\n                    }}\n                    name={'idle-version'}\n                    options={versionsOptions}\n                    defaultValue={versionDefaultValue}\n                    onChange={ v => this.setIdleVersion(v) }\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.3]}\n                  flexDirection={'column'}\n                >\n                  <AssetSelector\n                    innerProps={{\n                      p:1\n                    }}\n                    {...this.props}\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.39]}\n                  flexDirection={'column'}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:1,\n                      display:'flex',\n                      alignItems:'center',\n                      height:['46px','100%'],\n                      justifyContent:'center'\n                    }}\n                    isInteractive={true}\n                    handleClick={ e => this.setDateRangeModal(true) }\n                  >\n                    <Text\n                      fontWeight={3}\n                      color={'copyColor'}\n                    >\n                    {\n                      this.state.quickSelection\n                      ?\n                        this.quickSelections[this.state.quickSelection]\n                      : this.state.startTimestampObj && this.state.endTimestampObj &&\n                        `${this.state.startTimestampObj.format('DD/MM/YY')} - ${this.state.endTimestampObj.format('DD/MM/YY')}`\n                    }\n                    </Text>\n                  </DashboardCard>\n                </Flex>\n              </Flex>\n            </Flex>\n          </Box>\n          {\n            !tokenConfig.enabled ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'DoNotDisturb'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Stats for {this.props.selectedToken} are not available!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : this.state.idleVersion && this.functionsUtil.strToMoment(versionInfo.startTimestamp).isAfter(Date.now()) ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'AccessTime'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Idle Stats {this.state.idleVersion} will be available shortly!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : this.functionsUtil.strToMoment(tokenConfig.startTimestamp).isAfter(Date.now()) ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'AccessTime'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Stats for {this.props.selectedToken} will be available shortly!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : (\n              <Box\n                width={1}\n              >\n                <Box\n                  mt={[3,0]}\n                  mb={[3,4]}\n                >\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    justifyContent={'center'}\n                    flexDirection={['column','row']}\n                  >\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Asset Under Management'}\n                        label={ this.state.unlentBalance ? `Unlent funds: ${this.state.unlentBalance} ${this.props.selectedToken}` : this.props.selectedToken }\n                        labelTooltip={ this.state.unlentBalance ? this.functionsUtil.getGlobalConfig(['messages','cheapRedeem']) : null}\n                      >\n                        <SmartNumber\n                          precision={2}\n                          type={'money'}\n                          {...valueProps}\n                          unitProps={unitProps}\n                          number={this.state.aum}\n                          flexProps={{\n                            alignItems:'baseline',\n                            justifyContent:'flex-start'\n                          }}\n                          unit={this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'conversionRateField']) ? '$' : null}\n                        />\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Avg APY'}\n                        label={'Annualized'}\n                      >\n                        <Flex\n                          width={1}\n                          alignItems={'center'}\n                          flexDirection={['column','row']}\n                        >\n                          <VariationNumber\n                            direction={'up'}\n                            iconPos={'right'}\n                            iconSize={'1.8em'}\n                            justifyContent={'flex-start'}\n                            width={1}\n                            >\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                              fontSize={[4,5]}\n                            >\n                              {this.state.apr}\n                              <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                            </Text>\n                          </VariationNumber>\n                        </Flex>\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Overperformance on Compound'}\n                        label={'Annualized'}\n                      >\n                        {\n                          this.state.delta && !isNaN(this.state.delta) ? (\n                            <VariationNumber\n                              direction={'up'}\n                              iconPos={'right'}\n                              iconSize={'1.8em'}\n                              justifyContent={'flex-start'}\n                              >\n                              <Text\n                                lineHeight={1}\n                                fontSize={[4,5]}\n                                fontWeight={[3,4]}\n                                color={'statValue'}\n                              >\n                                {this.state.delta}\n                                <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                              </Text>\n                            </VariationNumber>\n                          ) : (\n                            <Text\n                              lineHeight={1}\n                              fontSize={[4,5]}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                            >\n                              {this.state.delta}\n                            </Text>\n                          )\n                        }\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        label={' '}\n                        title={'Rebalances'}\n                        value={this.state.rebalances.toString()}\n                      />\n                    </Flex>\n                    {\n                    /*\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Current APR</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.currApr}\n                            <Text.span color={'copyColor'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Days Live</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.days}\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    */\n                    }\n                  </Flex>\n                </Box>\n\n                <DashboardCard\n                  title={'Historical Performance'}\n                  description={performanceTooltip}\n                  cardProps={{\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex id='chart-PRICE' width={1} mb={3}>\n                    <StatsChart\n                      height={ 350 }\n                      {...this.state}\n                      parentId={'chart-PRICE'}\n                      theme={this.props.theme}\n                      isMobile={this.props.isMobile}\n                      contracts={this.props.contracts}\n                      themeMode={this.props.themeMode}\n                      apiResults={this.state.apiResults}\n                      idleVersion={this.state.idleVersion}\n                      selectedToken={this.props.selectedToken}\n                      apiResults_unfiltered={this.state.apiResults_unfiltered}\n                      chartMode={this.state.idleVersion === this.state.latestVersion ? 'PRICE_V4' : 'PRICE'}\n                    />\n                  </Flex>\n                </DashboardCard>\n\n                <DashboardCard\n                  cardProps={{\n                    pb:3,\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex\n                    flexDirection={['column','row']}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      this.state.idleVersion === this.state.latestVersion && \n                      <Flex\n                        pt={2}\n                        width={[1,1/3]}\n                        id={'allocation-chart'}\n                        flexDirection={'column'}\n                        alignItems={'flex-start'}\n                        justifyContent={'flex-start'}\n                      >\n                        <AllocationChart\n                          height={310}\n                          {...this.props}\n                          parentId={'allocation-chart'}\n                        />\n                        <Rebalance\n                          {...this.props}\n                        />\n                      </Flex>\n                    }\n                    <Flex\n                      mb={[0,3]}\n                      id={'chart-ALL'}\n                      pl={[0,this.state.idleVersion === this.state.latestVersion ? 0 : 3]}\n                      width={[1, this.state.idleVersion === this.state.latestVersion ? 2/3 : 1]}\n                    >\n                      <Flex alignItems={'flex-start'} justifyContent={'flex-start'} flexDirection={'column'} width={1}>\n                        <Heading.h4\n                          mb={2}\n                          ml={3}\n                          mt={[3,4]}\n                          fontWeight={4}\n                          fontSize={[2,3]}\n                          textAlign={'left'}\n                          color={'dark-gray'}\n                          lineHeight={'initial'}\n                        >\n                          Allocations over time\n                        </Heading.h4>\n                        <StatsChart\n                          height={350}\n                          {...this.state}\n                          chartMode={'ALL'}\n                          parentId={'chart-ALL'}\n                          theme={this.props.theme}\n                          isMobile={this.props.isMobile}\n                          themeMode={this.props.themeMode}\n                          contracts={this.props.contracts}\n                          apiResults={this.state.apiResults}\n                          idleVersion={this.state.idleVersion}\n                          apiResults_unfiltered={this.state.apiResults_unfiltered}\n                        />\n                      </Flex>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n\n                <Flex\n                  position={'relative'}\n                >\n                  <Flex\n                    width={1}\n                    id={'carousel-container'}\n                    justifyContent={'flex-end'}\n                  >\n                    <RoundIconButton\n                      buttonProps={{\n                        mr:3\n                      }}\n                      iconName={'ArrowBack'}\n                      disabled={this.state.carouselIndex === 0}\n                      handleClick={ e => this.handleCarousel('back') }\n                    />\n                    <RoundIconButton\n                      iconName={'ArrowForward'}\n                      handleClick={ e => this.handleCarousel('next') }\n                      disabled={this.state.carouselIndex === this.state.carouselMax}\n                    />\n                  </Flex>\n                  <Flex\n                    mt={5}\n                    height={'400px'}\n                    position={'absolute'}\n                    id={'carousel-cursor'}\n                    width={['444%','200%']}\n                    justifyContent={'flex-start'}\n                    left={this.state.carouselOffsetLeft}\n                    style={{\n                      transition:'left 0.3s ease-in-out'\n                    }}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        id='chart-AUM'\n                      >\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            ml={3}\n                            mt={3}\n                            mb={2}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Asset Under Management\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'AUM'}\n                            parentId={'chart-AUM'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-APR' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            APRs\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'APR'}\n                            parentId={'chart-APR'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                      title={'Risk Score'}\n                      description={'Idle Risk Score is a weighted average of the underlying protocols risks assessed by DeFi Score'}\n                      titleParentProps={{\n                        ml:16,\n                        mt:16\n                      }}\n                    >\n                      <Flex id='chart-SCORE' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'SCORE'}\n                            parentId={'chart-SCORE'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-VOL' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Volume\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'VOL'}\n                            parentId={'chart-VOL'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                </Flex>\n              </Box>\n            )\n          }\n          <DateRangeModal\n            {...this.props}\n            minDate={this.state.minDate}\n            maxDate={this.state.maxDate}\n            handleSelect={this.setDateRange}\n            isOpen={this.state.dateRangeModalOpened}\n            closeModal={e => this.setDateRangeModal(false)}\n            startDate={this.state.startTimestampObj ? this.state.startTimestampObj._d : null}\n            endDate={this.state.endTimestampObj ? this.state.endTimestampObj._d : null}\n          />\n        </Flex>\n      );\n    }\n  }\n}\n\nexport default Stats;","import Title from '../Title/Title';\nimport IconBox from '../IconBox/IconBox';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport { Flex, Icon, Text, Box, Image } from \"rimble-ui\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass Utils extends Component {\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    const SubComponent = this.props.selectedSubsection && this.props.selectedSubsection.subComponent ? this.props.selectedSubsection.subComponent : null;\n    const viewOnly = this.props.connectorName === 'custom';\n    const showBreadCrumb = typeof this.props.showBreadCrumb !== 'undefined' ? this.props.showBreadCrumb : true;\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.props.selectedSubsection ? (\n            <Box\n              width={1}\n            >\n              {\n                showBreadCrumb && (\n                  <Flex\n                    width={1}\n                  >\n                    <Breadcrumb\n                      {...this.props}\n                      showPathMobile={true}\n                      isMobile={this.props.isMobile}\n                      path={[this.props.selectedSubsection.label]}\n                      text={this.props.selectedSection.label.toUpperCase()}\n                      handleClick={ e => this.props.goToSection(this.props.selectedSection.route) }\n                    />\n                  </Flex>\n                )\n              }\n              <Flex\n                my={[2,3]}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <Title\n                  mb={2}\n                >\n                  {this.props.selectedSubsection.label}\n                </Title>\n                <Text\n                  textAlign={'center'}\n                >\n                  {this.props.selectedSubsection.desc}\n                </Text>\n              </Flex>\n              <SubComponent\n                {...this.props}\n                {...this.props.selectedSubsection.directProps}\n                toolProps={this.props.selectedSubsection.props}\n              />\n            </Box>\n          ) : (\n            <Flex\n              my={[2,3]}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Title\n                mb={3}\n              >\n                Tools\n              </Title>\n              <Flex\n                width={1}\n                style={{\n                  flexWrap:'wrap'\n                }}\n                justifyContent={viewOnly ? 'center' : 'flex-start'}\n              >\n              {\n                viewOnly ? (\n                  <IconBox\n                    cardProps={{\n                      maxWidth:[1,'35em']\n                    }}\n                    icon={'Visibility'}\n                    text={'You are using Idle in \"Read-Only\" mode.<br />Logout and connect with your wallet to interact.'}\n                  />\n                ) : this.props.selectedSection.submenu.map( (tool,toolIndex) => (\n                  <DashboardCard\n                    isInteractive={true}\n                    key={`tool_${toolIndex}`}\n                    cardProps={{\n                      p:[3,4],\n                      mb:[3,3],\n                      mr:[0,'2%'],\n                      style:{\n                        flex: this.props.isMobile ? '1 1 100%' : '0 0 31%'\n                      },\n                      alignItems:'center',\n                      flexDirection:'column',\n                      justifyContent:'center'\n                    }}\n                    handleClick={ e => this.props.goToSection(this.props.selectedSection.route+'/'+tool.route) }\n                  >\n                    <Text\n                      fontSize={[3,4]}\n                      textAlign={'center'}\n                    >\n                      {tool.label}\n                    </Text>\n                    <Flex\n                      justifyContent={'center'}\n                    >\n                      {\n                        tool.image ? (\n                          <Image\n                            my={[0,2]}\n                            height={'2.2em'}\n                            src={tool.image}\n                          />\n                        ) : tool.icon && (\n                          <Icon\n                            my={[0,2]}\n                            size={'3em'}\n                            name={tool.icon}\n                          />\n                        )\n                      }\n                    </Flex>\n                    <Text\n                      fontSize={[2,2]}\n                      textAlign={'center'}\n                    >\n                      {tool.desc}\n                    </Text>\n                  </DashboardCard>\n                ) )\n              }\n              </Flex>\n            </Flex>\n          )\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default Utils;\n","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Heading, Text, Tooltip, Icon } from \"rimble-ui\";\nimport PortfolioEquity from '../PortfolioEquity/PortfolioEquity';\n\nclass FundsOverview extends Component {\n\n  state = {\n    // govTokensAprs:null,\n    aggregatedValues:[],\n    govTokensTotalApr:null,\n    govTokensUserBalance:null,\n    govTokensDistribution:null,\n    govTokensTotalBalance:null,\n    govTokensTotalAprTooltip:null,\n    idleTokenUserDistribution:null,\n    govTokensDistributionTooltip:null,\n    govTokensTotalBalanceTooltip:null\n  };\n\n  // Utils\n  functionsUtil = null;\n  idleGovToken = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    this.idleGovToken = this.functionsUtil.getIdleGovToken();\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const isRisk = this.props.selectedStrategy === 'risk';\n\n    const [\n      // govTokensAprs,\n      idleTokenUserDistribution,\n      govTokensUserBalance,\n      apy,\n      depositTimestamp,\n      days\n    ] = await Promise.all([\n      // this.functionsUtil.getGovTokensAprs(this.props.selectedToken,this.props.tokenConfig),\n      this.idleGovToken.getUserDistribution(this.props.account,govTokenAvailableTokens,true),\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,null),\n      this.functionsUtil.loadAssetField('apy',this.props.selectedToken,this.props.tokenConfig,this.props.account,false),\n      this.functionsUtil.loadAssetField('depositTimestamp',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    let avgAPY = await this.functionsUtil.getAvgAPYStats(this.props.tokenConfig.address,isRisk,depositTimestamp);\n\n    if (!avgAPY || this.functionsUtil.BNify(avgAPY).lte(0)){\n      avgAPY = apy;\n    }\n\n    const govTokensTotalBalance = govTokensUserBalance ? Object.values(govTokensUserBalance).reduce( (totBalance,govTokenBalance) => {\n      return totBalance.plus(this.functionsUtil.BNify(govTokenBalance));\n    },this.functionsUtil.BNify(0)) : null;\n\n    const govTokensTotalBalanceTooltip = govTokensUserBalance ? Object.keys(govTokensUserBalance).map( govToken => {\n      const balance = govTokensUserBalance[govToken];\n      if (balance.gt(0)){\n        return `+${balance.toFixed(2)} ${govToken}`;\n      } else {\n        return null;\n      }\n    }).filter(v => (v !== null)) : null;\n\n    // console.log(govTokensTotalBalance,govTokensUserBalance,govTokensTotalBalanceTooltip);\n\n    // const govTokensTotalApr = govTokensAprs ? Object.values(govTokensAprs).reduce( (totApr,govTokenApr) => {\n    //   return totApr.plus(this.functionsUtil.BNify(govTokenApr));\n    // },this.functionsUtil.BNify(0)) : null;\n\n    // const govTokensTotalAprTooltip = govTokensAprs ? Object.keys(govTokensAprs).map( govToken => {\n    //   const apr = govTokensAprs[govToken];\n    //   if (apr.gt(0)){\n    //     return `${govToken}: ${apr.toFixed(2)}%`;\n    //   }\n    //   return null;\n    // }).filter(v => (v !== null)) : null;\n\n    /*\n    const govTokensDistributionTooltip = govTokensUserDistribution ? Object.keys(govTokensUserDistribution).map( govToken => {\n      const speed = govTokensUserDistribution[govToken];\n      if (speed.gt(0)){\n        const distributionFrequency = this.functionsUtil.getGlobalConfig(['govTokens',govToken,'distributionFrequency']);\n        return `+${speed.toFixed(4)} ${govToken}/${distributionFrequency}`;\n      }\n      return null;\n    }).filter(v => (v !== null)) : null;\n    */\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          desc:this.functionsUtil.getGlobalConfig(['messages','apyLong']),\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '0.00%') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    this.setState({\n      // govTokensAprs,\n      aggregatedValues,\n      // govTokensTotalApr,\n      govTokensUserBalance,\n      govTokensTotalBalance,\n      // govTokensTotalAprTooltip,\n      idleTokenUserDistribution,\n      govTokensTotalBalanceTooltip\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Flex\n                          mt={2}\n                          width={1}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <Text\n                            fontWeight={2}\n                            fontSize={[1,2]}\n                            color={'cellText'}\n                          >\n                            {v.props.title}\n                          </Text>\n                          {\n                            v.props.desc && \n                              <Tooltip\n                                placement={'bottom'}\n                                message={v.props.desc}\n                              >\n                                <Icon\n                                  ml={2}\n                                  name={\"Info\"}\n                                  size={'1em'}\n                                  color={'cellTitle'}\n                                />\n                              </Tooltip>\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquity\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              chartToken={this.props.selectedToken}\n              enabledTokens={[this.props.selectedToken]}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLent',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:this.props.theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPerc',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.govTokensTotalBalanceTooltip && this.state.govTokensTotalBalanceTooltip.length>0 && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      this.state.govTokensTotalBalanceTooltip.map((govTokenBalance,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          mt={govTokenIndex ? 1 : 0}\n                          key={`govToken_${govTokenIndex}`}\n                        >\n                          {govTokenBalance}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                )/* : this.state.govTokensUserBalance && Object.keys(this.state.govTokensUserBalance).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + ${this.state.govTokensTotalBalance.toFixed(4)}\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalBalanceTooltip.join(' / ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Fees\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'feesCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'apy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.idleTokenUserDistribution && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      mt={1}\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      {this.state.idleTokenUserDistribution.toFixed(4)} {this.idleGovToken.tokenName}/{this.idleGovToken.tokenConfig.distributionFrequency}\n                    </Text>\n                  </Flex>\n                )\n                /*\n                this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length===1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      Object.keys(this.state.govTokensAprs).map((govToken,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          ml={govTokenIndex ? 2 : 0}\n                          key={`govToken_${govToken}`}\n                        >\n                          {this.state.govTokensAprs[govToken].toFixed(2)}% {govToken}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                ) : this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + {this.state.govTokensTotalApr.toFixed(2)}%\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalAprTooltip.join('; ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Risk Score\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'score',\n                  props:{\n                    decimals:1,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverview;","import React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Icon, Checkbox, Box, Link, Input, Tooltip } from \"rimble-ui\";\n\nclass CurveRedeem extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    tokenConfig:null,\n    unevenAmounts:null,\n    selectedToken:null,\n    availableTokens:null,\n    buttonDisabled:false,\n    showMaxSlippage:false,\n    redeemUnderlying:true,\n    curveTokenConfig:null,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    curveTokensAmounts:null,\n    fastBalanceSelector:null,\n    redeemUnevenAmounts:false,\n    curveRedeemableIdleTokens:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.initToken();\n  }\n\n  showMaxSlippage(){\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  async calculateSlippage(max_slippage=null){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (!inputValue || inputValue.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    let withdrawSlippage = null;\n    let curveTokensAmounts = null;\n    let curveIdleTokensAmounts = null;\n    if (this.state.redeemUnevenAmounts){\n      [\n        curveTokensAmounts,\n        curveIdleTokensAmounts\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokensAmounts(this.props.account,normalizedAmount,true),\n        this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,normalizedAmount)\n      ]);\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false,curveIdleTokensAmounts);\n    } else {\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false);\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const redeemableBalance = inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.times(100).plus(this.state.maxSlippage || this.functionsUtil.BNify(0)).div(100)));\n      curveTokensAmounts = {};\n      curveTokensAmounts[this.state.selectedToken] = redeemableBalance;\n    }\n\n    if (withdrawSlippage){\n      withdrawSlippage = withdrawSlippage.times(100);\n    }\n\n    this.setState({\n      withdrawSlippage,\n      curveTokensAmounts,\n      curveIdleTokensAmounts\n    });\n\n    // Add max slippage but don't save in state\n    if (withdrawSlippage && max_slippage){\n      withdrawSlippage = withdrawSlippage.plus(max_slippage);\n    }\n\n    return withdrawSlippage;\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.tokenConfig.idle.token !== this.props.tokenConfig.idle.token;\n    if (tokenChanged){\n      await this.initToken();\n    }\n\n    const redeemUnevenAmountsChanged = prevState.redeemUnevenAmounts !== this.state.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    const inputChanged = prevState.inputValue !== this.state.inputValue;\n    const maxSlippageChanged = parseFloat(prevState.maxSlippage) !== parseFloat(this.state.maxSlippage);\n    const tokenConfigChanged = JSON.stringify(prevState.tokenConfig) !== JSON.stringify(this.state.tokenConfig);\n    if (inputChanged || tokenConfigChanged || maxSlippageChanged){\n      this.calculateSlippage();\n    }\n\n    const selectedTokenChanged = prevState.selectedToken !== this.state.selectedToken;\n    if (selectedTokenChanged){\n      this.loadSelectedTokenConfig();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    let buttonDisabled = false;\n\n    // if (this.state.redeemUnevenAmounts){\n      buttonDisabled = !amount || amount.gt(this.state.curveTokenBalance);\n    // } else {\n      // buttonDisabled = !amount || amount.gt(this.state.redeemableBalance);\n    // }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    let inputValue = null;\n\n    // if (this.state.redeemUnevenAmounts){\n    inputValue = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n    // } else {\n      // inputValue = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n    // }\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  selectDestinationToken(selectedToken){\n    this.setState({\n      selectedToken\n    });\n  }\n\n  async loadSelectedTokenConfig(){\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const tokenConfig = this.state.availableTokens[this.state.selectedToken];\n    const curveTokenConfig = curveConfig.availableTokens[tokenConfig.idle.token];\n    this.setState({\n      tokenConfig,\n      curveTokenConfig\n    });\n  }\n\n  async initToken(){\n    const [curvePoolContract,curveSwapContract] = await Promise.all([\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract()\n    ]);\n\n    const [\n      curveTokenPrice,\n      curveTokenBalance,\n      curveRedeemableIdleTokens,\n    ] = await Promise.all([\n      this.functionsUtil.getCurveTokenPrice(),\n      this.functionsUtil.getCurveTokenBalance(this.props.account),\n      this.functionsUtil.getCurveRedeemableIdleTokens(this.props.account)\n    ]);\n\n    const unevenAmounts = [];\n    const redeemableBalance = curveTokenBalance ? curveTokenBalance.times(curveTokenPrice) : this.functionsUtil.BNify(0);\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();;\n    const selectedToken = Object.keys(availableTokens)[0];\n\n    this.setState({\n      selectedToken,\n      unevenAmounts,\n      curveTokenPrice,\n      availableTokens,\n      curvePoolContract,\n      curveSwapContract,\n      curveTokenBalance,\n      redeemableBalance,\n      curveRedeemableIdleTokens\n    });\n  }\n\n  async redeem(){\n\n    if (!this.state.curveTokenBalance){\n      return false;\n    }\n\n    const callbackRedeem = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveRedeem`,\n        eventAction: this.props.selectedToken,\n        eventValue: this.state.curveTokenBalance.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackRedeem === 'function' && txSucceeded){\n        this.props.callbackRedeem(tx);\n      }\n    };\n\n    const callbackReceiptRedeem = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.curveSwapContract.name;\n    const withdrawSlippage = await this.calculateSlippage(this.state.maxSlippage);\n    const max_slippage = this.functionsUtil.BNify(this.state.maxSlippage).div(100);\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    // const curveTokenBalance = this.functionsUtil.normalizeTokenAmount(this.state.curveTokenBalance,this.state.curvePoolContract.decimals);\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    if (this.state.redeemUnevenAmounts){\n      const min_amounts = this.state.redeemUnderlying ? await this.functionsUtil.getCurveTokensAmounts(this.props.account,_amount,false,true) : await this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,_amount,max_slippage);\n      console.log('remove_liquidity',_amount.toString(),min_amounts);\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    } else {\n      const coin_index = this.state.curveTokenConfig.migrationParams.coinIndex;\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.div(100))),this.state.tokenConfig.decimals);\n      // const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.minus(inputValue.times(withdrawSlippage.div(100))),this.state.curveTokenConfig.decimals);\n      // let _token_amount = await this.functionsUtil.getCurveTokenAmount(amounts,false);\n      // _token_amount = this.functionsUtil.BNify(_token_amount).isGreaterThan(curveTokenBalance) ? curveTokenBalance : this.functionsUtil.BNify(_token_amount);\n\n      console.log('remove_liquidity_one_coin',_amount, coin_index, min_amount);\n\n      // debugger;\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_one_coin', [_amount, coin_index, min_amount, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    }\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  getFastBalanceSelector(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n\n  render() {\n\n    const showSlippage = !this.state.buttonDisabled && this.state.withdrawSlippage;\n    const curveTokenName = this.functionsUtil.getGlobalConfig(['curve','poolContract','token']);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          {\n            !this.state.curveTokenBalance ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3,\n                  minHeight:'195px',\n                  style:{\n                    display:'flex',\n                    alignItems:'center',\n                    justifyContent:'center'\n                  }\n                }}\n              >\n                <FlexLoader\n                  flexProps={{\n                    flexDirection:'row'\n                  }}\n                  loaderProps={{\n                    size:'30px'\n                  }}\n                  textProps={{\n                    ml:2\n                  }}\n                  text={'Checking Curve Pool...'}\n                />\n              </DashboardCard>\n            ) : this.state.processing.loading ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3\n                }}\n              >\n                <Flex\n                  flexDirection={'column'}\n                >\n                  <TxProgressBar\n                    web3={this.props.web3}\n                    hash={this.state.processing.txHash}\n                    endMessage={`Finalizing redeem request...`}\n                    cancelTransaction={this.cancelTransaction.bind(this)}\n                    waitText={ this.props.waitText ? this.props.waitText : 'Redeem estimated in'}\n                  />\n                </Flex>\n              </DashboardCard>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    mb:2\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'1.8em'}\n                      color={'cellText'}\n                      name={'FileUpload'}\n                    />\n                    <Text\n                      mt={1}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Withdraw from the Curve Pool in a specific token or in uneven amounts of tokens (with no slippage).\n                    </Text>\n                    <Flex\n                      mt={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                    >\n                      <Checkbox\n                        required={false}\n                        label={`Redeem with no slippage`}\n                        checked={this.state.redeemUnevenAmounts}\n                        onChange={ e => this.toggleUnevenAmounts(e.target.checked) }\n                      />\n                      <Tooltip\n                        placement={'top'}\n                        message={`You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.`}\n                      >\n                        <Icon\n                          size={'1em'}\n                          color={'cellTitle'}\n                          name={\"InfoOutline\"}\n                        />\n                      </Tooltip>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n                {\n                  !this.state.redeemUnevenAmounts/* && (!this.props.selectedToken || (this.state.showMaxSlippage && showSlippage))*/ && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      {\n                        this.state.tokenConfig && \n                          <Box\n                            width={1}\n                          >\n                            <Text\n                              mb={1}\n                            >\n                              Select destination token:\n                            </Text>\n                            <AssetSelector\n                              {...this.props}\n                              id={'token-from'}\n                              showBalance={false}\n                              tokenConfig={this.state.tokenConfig}\n                              selectedToken={this.state.selectedToken}\n                              availableTokens={this.state.availableTokens}\n                              onChange={this.selectDestinationToken.bind(this)}\n                            />\n                          </Box>\n                      }\n                    </Box>\n                  )\n                }\n                {\n                  this.state.curveTokensAmounts && !this.state.buttonDisabled && (\n                    <DashboardCard\n                      cardProps={{\n                        mt:1,\n                        mb:2,\n                        py:2,\n                        px:1\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Text\n                          mt={1}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          You will receive:\n                        </Text>\n                        <Flex\n                          mt={2}\n                          width={1}\n                          boxShadow={0}\n                          style={{\n                            flexWrap:'wrap'\n                          }}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                          >\n                            {\n                              Object.keys(this.state.curveTokensAmounts).map( token => {\n                                const balance = this.state.curveTokensAmounts[token];\n                                return (\n                                  <Flex\n                                    mb={1}\n                                    mx={1}\n                                    width={'auto'}\n                                    flexDirection={'row'}\n                                    key={`tokenBalance_${token}`}\n                                    justifyContent={'flex-start'}\n                                  >\n                                    <AssetField\n                                      token={token}\n                                      tokenConfig={{\n                                        token:token\n                                      }}\n                                      fieldInfo={{\n                                        name:'icon',\n                                        props:{\n                                          mr:1,\n                                          width:['1.4em','1.6em'],\n                                          height:['1.4em','1.6em']\n                                        }\n                                      }}\n                                    />\n                                    <SmartNumber\n                                      ml={1}\n                                      fontSize={[0,1]}\n                                      fontWeight={500}\n                                      maxPrecision={4}\n                                      color={'cellText'}\n                                      number={balance.toString()}\n                                    />\n                                  </Flex>\n                                );\n                            })\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n                {\n                  this.state.showMaxSlippage && showSlippage && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Text>\n                          Choose max slippage:\n                        </Text>\n                        <Tooltip\n                          placement={'top'}\n                          message={`Max additional slippage on top of the one shown below`}\n                        >\n                          <Icon\n                            ml={1}\n                            size={'1em'}\n                            color={'cellTitle'}\n                            name={\"InfoOutline\"}\n                          />\n                        </Tooltip>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        {\n                          [0.2,0.5,1,5].map( slippage => (\n                            <FastBalanceSelector\n                              cardProps={{\n                                p:1\n                              }}\n                              textProps={{\n                                fontSize:1\n                              }}\n                              percentage={slippage}\n                              key={`selector_${slippage}`}\n                              onMouseDown={()=>this.setMaxSlippage(slippage)}\n                              isActive={this.state.maxSlippage === parseFloat(slippage)}\n                            />\n                          ))\n                        }\n                      </Flex>\n                    </Box>\n                  )\n                }\n                <Flex\n                  mb={3}\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  <Flex\n                    mb={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'flex-end'}\n                  >\n                    {\n                      showSlippage && (\n                        <Flex\n                          width={1}\n                          maxWidth={'40%'}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            textAlign={'right'}\n                            style={{\n                              whiteSpace:'nowrap'\n                            }}\n                            color={ parseFloat(this.state.withdrawSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                          >\n                            {\n                              parseFloat(this.state.withdrawSlippage.toFixed(3)) === 0 ?\n                                'No Slippage'\n                              : `${ this.state.withdrawSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.withdrawSlippage.abs().toFixed(3)}%`\n                            }\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={ this.state.redeemUnevenAmounts ? `You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.` : this.state.withdrawSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                          {\n                            !this.state.redeemUnevenAmounts &&\n                              <Link\n                                ml={1}\n                                color={'copyColor'}\n                                hoverColor={'primary'}\n                                onClick={this.showMaxSlippage.bind(this)}\n                              >\n                                change\n                              </Link>\n                          }\n                        </Flex>\n                      )\n                    }\n                    <Flex\n                      width={1}\n                      maxWidth={'60%'}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      justifyContent={'flex-end'}\n                    >\n                      <Link\n                        fontSize={1}\n                        fontWeight={3}\n                        color={'dark-gray'}\n                        textAlign={'right'}\n                        hoverColor={'copyColor'}\n                        onClick={ (e) => this.setFastBalanceSelector(100) }\n                        style={{\n                          maxWidth:'100%',\n                          overflow:'hidden',\n                          whiteSpace:'nowrap',\n                          textOverflow:'ellipsis'\n                        }}\n                      >\n                        {this.state.curveTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {curveTokenName}\n                      </Link>\n                    </Flex>\n                  </Flex>\n                  <Input\n                    min={0}\n                    type={\"number\"}\n                    required={true}\n                    height={'3.4em'}\n                    borderRadius={2}\n                    fontWeight={500}\n                    boxShadow={'none !important'}\n                    placeholder={`Insert amount`}\n                    onChange={this.changeInputValue.bind(this)}\n                    border={`1px solid ${this.props.theme.colors.divider}`}\n                    value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                  />\n                  <Flex\n                    mt={2}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      [25,50,75,100].map( percentage => (\n                        <FastBalanceSelector\n                          percentage={percentage}\n                          key={`selector_${percentage}`}\n                          onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                          isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                        />\n                      ))\n                    }\n                  </Flex>\n                </Flex>\n                <Flex\n                  justifyContent={'center'}\n                >\n                  <RoundButton\n                    buttonProps={{\n                      mt:2,\n                      width:[1,1/2],\n                      disabled:this.state.buttonDisabled\n                    }}\n                    handleClick={this.redeem.bind(this)}\n                  >\n                    Redeem\n                  </RoundButton>\n                </Flex>\n              </Flex>\n            )\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveRedeem;","import React, { Component } from 'react';\nimport {\n  Button,\n  Flex,\n  Box,\n  Text\n} from \"rimble-ui\";\nimport styles from './TwitterShareButton.module.scss';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\n\nclass TwitterShareButton extends Component {\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  componentWillMount() {\n    this.loadUtils();\n  }\n\n  componentDidMount() {\n    this.loadUtils();\n  }\n\n  componentDidUpdate() {\n    this.loadUtils();\n  }\n\n  share = () => {\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'Share',\n      eventAction: 'twitter',\n      eventLabel: this.props.parent\n    });\n\n    const w = Math.min(window.innerWidth,600);\n    const h = 350;\n    const x = (window.innerWidth-w)/2;\n    const y = 150;\n    window.open(`https://twitter.com/intent/tweet?text=${this.props.tweet}`,\"_blank\",`toolbar=yes,scrollbars=no,resizable=no,top=${y},left=${x},width=${w},height=${h}`);\n  }\n\n  render() {\n    return (\n        <Button\n          borderRadius={1}\n          mainColor={'#2aa6f2'}\n          contrastColor={'white'}\n          onClick={ e => { this.share() } }\n        >\n          <Flex flexDirection={'row'} alignItems={'center'} justifyContent={'center'}>\n            <Box className={styles.twitterIcon} />\n            <Text color={'white'} fontWeight={3} ml={2}>{ this.props.text ? this.props.text : 'Tweet' }</Text>\n          </Flex>\n        </Button>\n    );\n  }\n}\n\nexport default TwitterShareButton;\n","import React from \"react\";\nimport {\n  Text,\n  Modal,\n  Link,\n  Flex\n} from \"rimble-ui\";\nimport ModalCard from './ModalCard';\nimport TwitterShareButton from '../../TwitterShareButton/TwitterShareButton.js';\nimport Confetti from 'react-confetti/dist/react-confetti';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\n\nclass ShareModal extends React.Component {\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  componentWillMount() {\n    this.loadUtils();\n  }\n\n  componentDidMount() {\n    this.loadUtils();\n  }\n\n  componentDidUpdate() {\n    this.loadUtils();\n  }\n\n  closeModal = async (action) => {\n    const globalConfigs = this.functionsUtil.getGlobalConfigs();\n    // Send Google Analytics event\n    if (globalConfigs.analytics.google.events.enabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'Share',\n        eventAction: action,\n        eventLabel: 'ShareModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n    const tweet = window.escape(this.props.tweet);\n    const customText = {__html: this.props.text};\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        <ModalCard closeFunc={this.props.closeModal}>\n          {\n            this.props.confettiEnabled &&\n            <Confetti\n              style={{ position: 'fixed','zIndex':9999 }}\n              run={true}\n              recycle={true}\n              width={window.innerWidth}\n              height={window.innerHeight}\n            />\n          }\n          <ModalCard.Header title={this.props.title} icon={this.props.icon}></ModalCard.Header>\n          <ModalCard.Body>\n            <Flex my={3} width={1} flexDirection={'column'} mx={'auto'}>\n              <Text color={'dark-gray'} textAlign={'center'} fontSize={3} mb={2} dangerouslySetInnerHTML={customText}></Text>\n            </Flex>\n            <Flex mb={3} flexDirection={'column'} alignItems={'center'} justifyContent={'center'}>\n              <TwitterShareButton tweet={tweet} text={'Share now'} parent={'ShareModal'} />\n              <Link mt={2} onClick={ e => this.closeModal('continue_without_sharing') } hoverColor={'blue'}>continue without sharing</Link>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default ShareModal;","import Migrate from '../Migrate/Migrate';\nimport IconBox from '../IconBox/IconBox';\nimport React, { Component } from 'react';\nimport ExtLink from '../ExtLink/ExtLink';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport ConnectBox from '../ConnectBox/ConnectBox';\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport RoundButton from '../RoundButton/RoundButton';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport ShareModal from '../utilities/components/ShareModal';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport TransactionField from '../TransactionField/TransactionField';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Input, Box, Icon, Link, Checkbox, Tooltip, Image } from \"rimble-ui\";\n\nclass DepositRedeem extends Component {\n\n  state = {\n    txError:{},\n    tokenAPY:'-',\n    inputValue:{},\n    processing:{},\n    curveAPY:null,\n    totalAUM:null,\n    canRedeem:false,\n    maxSlippage:0.2,\n    canDeposit:false,\n    action:'deposit',\n    directMint:false,\n    activeModal:null,\n    tokenGovTokens:{},\n    showBuyFlow:false,\n    maxUnlentPerc:null,\n    unlentBalance:null,\n    tokenApproved:false,\n    skipMigration:false,\n    redeemSkipGov:false,\n    showRedeemFlow:false,\n    contractPaused:false,\n    buttonDisabled:false,\n    canRedeemCurve:false,\n    erc20ForwarderTx:null,\n    signedParameters:null,\n    minAmountForMint:null,\n    showMaxSlippage:false,\n    redeemGovTokens:false,\n    canDepositCurve:false,\n    redeemSkipGovTokens:[],\n    fastBalanceSelector:{},\n    actionProxyContract:{},\n    migrationEnabled:false,\n    componentMounted:false,\n    curveTokenBalance:null,\n    agreeSkipGovTokens:false,\n    redeemCurveEnabled:false,\n    depositCurveBalance:null,\n    depositCurveEnabled:true,\n    showAdvancedOptions:false,\n    skipGovTokensGasSave:null,\n    depositCurveSlippage:null,\n    erc20ForwarderContract:{},\n    erc20ForwarderEnabled:true,\n    showETHWrapperEnabled:false,\n    skipGovTokensGasSaveUSD:null,\n    metaTransactionsEnabled:true,\n    skippedGovTokensBalance:null,\n    minAmountForMintReached:false,\n    loadingErc20ForwarderTx:false\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadProxyContracts();\n  }\n\n  async componentDidMount(){\n\n  }\n\n  setShowRedeemFlow = (showRedeemFlow) => {\n    this.setState({\n      showRedeemFlow\n    });\n  }\n\n  setShowBuyFlow = (showBuyFlow) => {\n    this.setState({\n      showBuyFlow\n    });\n  }\n\n  toggleShowAdvancedOptions = showAdvancedOptions => {\n    this.setState((prevState) => ({\n      showAdvancedOptions:!prevState.showAdvancedOptions\n    }));\n  }\n\n  toggleSkipMigration = skipMigration => {\n    this.setState({\n      skipMigration\n    });\n  }\n\n  toggleRedeemCurve = redeemCurveEnabled => {\n    this.setState({\n      redeemCurveEnabled\n    });\n  }\n\n  toggleDepositCurve = depositCurveEnabled => {\n    this.setState({\n      depositCurveEnabled\n    });\n  }\n\n  toggleShowETHWrapper = showETHWrapperEnabled => {\n    this.setState({\n      showETHWrapperEnabled\n    });\n  }\n\n  toggleAgreeSkipGovTokens = agreeSkipGovTokens => {\n    this.setState({\n      agreeSkipGovTokens\n    });\n  }\n\n  toggleSkipMint = (directMint) => {\n    this.setState({\n      directMint\n    });\n  }\n\n  toggleRedeemGovTokens = (redeemGovTokens) => {\n    this.setState({\n      redeemGovTokens,\n      redeemSkipGovTokens:[],\n      agreeSkipGovTokens:false,\n      skippedGovTokensBalance:this.functionsUtil.BNify(0),\n      redeemSkipGov:redeemGovTokens?false:this.state.redeemSkipGov\n    });\n  }\n\n  toggleRedeemSkipGov = (redeemSkipGov) => {\n    this.setState({\n      redeemSkipGov,\n      redeemSkipGovTokens:[],\n      agreeSkipGovTokens:false,\n      skippedGovTokensBalance:this.functionsUtil.BNify(0),\n      redeemGovTokens:redeemSkipGov?false:this.state.redeemGovTokens\n    });\n  }\n\n  getSkippedGovTokensFlags = async () => {\n    const govTokensIndexes = await this.functionsUtil.getGovTokensIndexes(this.props.account,this.props.tokenConfig);\n    const govTokensFlags = Object.keys(govTokensIndexes).map( token => {\n      return this.state.redeemSkipGovTokens.includes(token);\n    });\n    // console.log('getSkippedGovTokensFlags',govTokensIndexes,govTokensFlags);\n    return govTokensFlags;\n  }\n\n  calculateSkippedGovTokens = async () => {\n    let skippedGovTokensBalance = this.functionsUtil.BNify(0);\n    const DAITokenConfig = this.functionsUtil.getGlobalConfig(['stats','tokens','DAI']);\n\n    await this.functionsUtil.asyncForEach(this.state.redeemSkipGovTokens, async (govToken) => {\n      const govTokenConfig = this.functionsUtil.getGlobalConfig(['govTokens',govToken]);\n      const govTokenPrice = await this.functionsUtil.getUniswapConversionRate(DAITokenConfig,govTokenConfig);\n      const skippedAmount = this.props.govTokensUserBalances[govToken].times(govTokenPrice);\n      skippedGovTokensBalance = skippedGovTokensBalance.plus(skippedAmount);\n    });\n\n    const _skipGovTokenRedeem = await this.getSkippedGovTokensFlags();\n    const WETHTokenConfig = this.functionsUtil.getGlobalConfig(['stats','tokens','WETH']);\n\n    const [\n      wethPrice,\n      redeemGasUsage,\n      skipGovRedeemGasUsage\n    ] = await Promise.all([\n      this.functionsUtil.getUniswapConversionRate(DAITokenConfig,WETHTokenConfig),\n      this.functionsUtil.estimateMethodGasUsage(this.props.tokenConfig.idle.token, 'redeemIdleToken', [this.functionsUtil.normalizeTokenAmount(this.props.idleTokenBalance,this.props.tokenConfig.decimals)], this.props.account),\n      this.functionsUtil.estimateMethodGasUsage(this.props.tokenConfig.idle.token, 'redeemIdleTokenSkipGov', [this.functionsUtil.normalizeTokenAmount(this.props.idleTokenBalance,this.props.tokenConfig.decimals),_skipGovTokenRedeem], this.props.account)\n    ]);\n\n    const skipGovTokensGasSave = redeemGasUsage && skipGovRedeemGasUsage ? redeemGasUsage.minus(skipGovRedeemGasUsage) : this.functionsUtil.BNify(0);\n    const skipGovTokensGasSaveUSD = skipGovTokensGasSave ? skipGovTokensGasSave.times(wethPrice) : this.functionsUtil.BNify(0);\n\n    this.setState({\n      skipGovTokensGasSave,\n      skipGovTokensGasSaveUSD,\n      skippedGovTokensBalance\n    });\n    return skippedGovTokensBalance;\n  }\n\n  setRedeemSkipGovTokens = (token,checked) => {\n    this.setState((prevState) => {\n      const redeemSkipGovTokens = Object.assign([],prevState.redeemSkipGovTokens);\n      if (!checked && redeemSkipGovTokens.includes(token)){\n        redeemSkipGovTokens.splice(redeemSkipGovTokens.indexOf(token),1);\n      } else if (checked && !redeemSkipGovTokens.includes(token)) {\n        redeemSkipGovTokens.push(token);\n      }\n      return {\n        redeemSkipGovTokens\n      };\n    },() => {\n      this.calculateSkippedGovTokens();\n    });\n  }\n\n  toggleErc20ForwarderEnabled = (erc20ForwarderEnabled) => {\n    const newState = {\n      erc20ForwarderEnabled\n    };\n\n    this.setState(newState, () => {\n      this.cancelTransaction();\n    });\n  }\n\n  toggleMetaTransactionsEnabled = (metaTransactionsEnabled) => {\n    this.setState({\n      metaTransactionsEnabled\n    });\n  }\n\n  async loadProxyContracts(){\n    const actions = ['deposit','redeem'];\n    const newState = {\n      actionProxyContract:{},\n      erc20ForwarderContract:{}\n    };\n\n    await this.functionsUtil.asyncForEach(actions,async (action) => {\n      let mintProxyContractInfo = null;\n      const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods',action,'erc20ForwarderEnabled']);\n\n      if (depositErc20ForwarderEnabled){\n        mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract','methods',action,'erc20ForwarderProxyContract','forwarder']);\n\n        await this.props.initContract(mintProxyContractInfo.name,mintProxyContractInfo.address,mintProxyContractInfo.abi);\n\n        // Init contract for erc20 forwarder\n        const erc20ForwarderContractInfo = this.functionsUtil.getGlobalConfig(['contract','methods',action,'erc20ForwarderProxyContract','tokens',this.props.selectedToken]);\n        if (erc20ForwarderContractInfo){\n          mintProxyContractInfo = erc20ForwarderContractInfo;\n          const erc20ForwarderContract = await this.props.initContract(erc20ForwarderContractInfo.name,erc20ForwarderContractInfo.address,erc20ForwarderContractInfo.abi);\n          newState.erc20ForwarderContract[action] = erc20ForwarderContractInfo;\n          newState.erc20ForwarderContract[action].contract = erc20ForwarderContract.contract;\n        }\n      }\n\n      if (!mintProxyContractInfo){\n        mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract','methods',action,'proxyContract']);\n      }\n\n      const hasProxyContract = mintProxyContractInfo && mintProxyContractInfo.enabled;\n      newState.actionProxyContract[action] = hasProxyContract ? mintProxyContractInfo : null;\n      if (hasProxyContract){\n        const proxyContract = await this.props.initContract(mintProxyContractInfo.name,mintProxyContractInfo.address,mintProxyContractInfo.abi);\n        newState.actionProxyContract[action].contract = proxyContract.contract;\n        newState.actionProxyContract[action].approved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,mintProxyContractInfo.address,this.props.account);\n      }\n    });\n\n    this.setState(newState);\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadAPY(){\n    const tokenAprs = await this.functionsUtil.getTokenAprs(this.props.tokenConfig);\n    if (tokenAprs && tokenAprs.avgApy !== null){\n      const tokenAPY = this.functionsUtil.BNify(tokenAprs.avgApy).toFixed(2);\n\n      let curveAPY = null;\n      if (this.state.canDepositCurve){\n        curveAPY = await this.functionsUtil.getCurveAPY();\n        // console.log('curveAPY',curveAPY);\n        if (curveAPY){\n          curveAPY = curveAPY.plus(tokenAPY);\n        }\n      }\n      this.setState({\n        tokenAPY,\n        curveAPY\n      });\n    }\n  }\n\n  getReferralAddress(){\n    let _referral = this.functionsUtil.getQueryStringParameterByName('_referral');\n    if (!this.functionsUtil.checkAddress(_referral)){\n      _referral = null;\n    }\n    return _referral;\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    if (this.props.tokenBalance === null){\n      return false;\n    }\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    const erc20ForwarderEnabledChanged = prevState.erc20ForwarderEnabled !==  this.state.erc20ForwarderEnabled;\n    const tokenBalanceChanged = prevProps.tokenBalance !== this.props.tokenBalance && this.props.tokenBalance !== null;\n\n    if (tokenChanged || tokenBalanceChanged || erc20ForwarderEnabledChanged){\n      await this.loadProxyContracts();\n      this.loadTokenInfo();\n      return false;\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n\n    if (actionChanged || fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const inputValueChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputValueChanged){\n      // this.checkMinAmountForMint();\n    }\n\n    const redeemSkipGovChanged = prevState.redeemSkipGov !== this.state.redeemSkipGov;\n    const redeemGovTokensChanged = prevState.redeemGovTokens !== this.state.redeemGovTokens;\n    const agreeSkipGovTokensChanged = prevState.agreeSkipGovTokens !== this.state.agreeSkipGovTokens;\n    const redeemSkipGovTokensChanged = JSON.stringify(prevState.redeemSkipGovTokens) !== JSON.stringify(this.state.redeemSkipGovTokens);\n\n    if (redeemGovTokensChanged || actionChanged || redeemSkipGovTokensChanged || redeemSkipGovChanged || agreeSkipGovTokensChanged){\n      this.checkButtonDisabled();\n    }\n\n    const depositCurveChanged = prevState.depositCurveEnabled !== this.state.depositCurveEnabled;\n    const metaTransactionsChanged = prevState.metaTransactionsEnabled !== this.state.metaTransactionsEnabled;\n    if (metaTransactionsChanged || depositCurveChanged){\n      const tokenApproved = await this.checkTokenApproved();\n      this.setState({\n        tokenApproved\n      });\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateCurveSlippage();\n    }\n  }\n\n  async checkMinAmountForMint(){\n    let showPoolPerc = false;\n    let totalAUM = this.state.totalAUM;\n    let maxUnlentPerc = this.state.maxUnlentPerc;\n    const isRisk = this.props.selectedStrategy === 'risk';\n    const inputValue = this.functionsUtil.BNify(this.state.inputValue[this.state.action]);\n\n    if (inputValue.gt(this.props.tokenBalance)){\n      return false;\n    }\n\n    const convertedAmount = await this.functionsUtil.convertTokenBalance(inputValue,this.props.selectedToken,this.props.tokenConfig,isRisk);\n    let minAmountForMint = this.functionsUtil.BNify(this.functionsUtil.getGlobalConfig(['contract','methods','deposit','minAmountForMint']));\n    let minAmountForMintReached = convertedAmount.gte(minAmountForMint);\n\n    // Check token minAmountForMint\n    if (minAmountForMintReached){\n      if (this.props.tokenConfig.deposit && this.props.tokenConfig.deposit.minAmountForMint && convertedAmount.lt(this.props.tokenConfig.deposit.minAmountForMint)){\n        minAmountForMintReached = false;\n      } else {\n        [\n          maxUnlentPerc,\n          totalAUM\n        ] = await Promise.all([\n          maxUnlentPerc || this.functionsUtil.genericContractCall(this.props.tokenConfig.idle.token, 'maxUnlentPerc'),\n          totalAUM ||this.functionsUtil.loadAssetField('pool',this.props.selectedToken,this.props.tokenConfig,this.props.account)\n        ]);\n\n        if (maxUnlentPerc && totalAUM){\n          const depositPerc = inputValue.div(totalAUM).times(100);\n          maxUnlentPerc = this.functionsUtil.BNify(maxUnlentPerc);\n          const maxUnlentPercFormatted = maxUnlentPerc.div(1e3).times(2);\n          if (depositPerc.lt(maxUnlentPercFormatted)){\n            minAmountForMintReached = false;\n          } else if (totalAUM.times(maxUnlentPercFormatted.div(100)).gt(minAmountForMint)) {\n            showPoolPerc = true;\n            minAmountForMint = totalAUM.times(maxUnlentPercFormatted.div(100));\n          }\n        }\n      }\n    }\n\n    this.setState({\n      totalAUM,\n      showPoolPerc,\n      maxUnlentPerc,\n      minAmountForMint,\n      minAmountForMintReached\n    });\n  }\n\n  async calculateCurveSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,curvePoolContractInfo.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositCurveBalance = amount;\n        newState.depositCurveSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n      break;  \n      case 'redeem':\n        // newState.redeemBalance = amount;\n        // newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateCurveSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  checkUseProxyContract = () => {\n    const proxyContract = this.state.actionProxyContract[this.state.action];\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','metaTransactionsEnabled']) && this.state.metaTransactionsEnabled;\n    return ((depositErc20ForwarderEnabled || depositMetaTransactionsEnabled) && proxyContract && this.props.biconomy);\n  }\n\n  approveContract = async (callbackApprove,callbackReceiptApprove) => {\n    if (this.state.depositCurveEnabled){\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve','depositContract']);\n      this.functionsUtil.enableERC20(this.props.selectedToken,curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n    } else {\n      // Check Proxy Contract Approved for Deposit with Biconomy\n      const useProxyContract = this.checkUseProxyContract();\n      if (useProxyContract){\n        const proxyContract = this.state.actionProxyContract[this.state.action];\n        this.functionsUtil.enableERC20(this.props.selectedToken,proxyContract.address,callbackApprove,callbackReceiptApprove);\n      } else {\n        this.functionsUtil.enableERC20(this.props.selectedToken,this.props.tokenConfig.idle.address,callbackApprove,callbackReceiptApprove);\n      }\n    }\n  }\n\n  checkTokenApproved = async () => {\n    let tokenApproved = false;\n    if (this.state.depositCurveEnabled){\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve','depositContract']);\n      tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,curveDepositContract.address,this.props.account);\n    } else {\n      // Check Proxy Contract Approved for Deposit with Biconomy\n      const useProxyContract = this.checkUseProxyContract();\n      if (useProxyContract){\n        // Check for Permit Deposit\n        const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n        if (depositErc20ForwarderEnabled){\n          const permitEnabled = this.functionsUtil.getGlobalConfig(['permit',this.props.selectedToken]);\n          if (permitEnabled){\n            return true;\n          }\n        }\n        // Check proxy contract approved\n        const proxyContract = this.state.actionProxyContract[this.state.action];\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,proxyContract.address,this.props.account);\n        // console.log('tokenApproved 1',tokenApproved);\n      } else {\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,this.props.tokenConfig.idle.address,this.props.account);\n        // console.log('tokenApproved 2',tokenApproved);\n      }\n    }\n\n    return tokenApproved;\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = await this.checkTokenApproved();\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.props.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.approveContract(callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  loadTokenInfo = async () => {\n\n    if (this.state.componentMounted){\n      this.setState({\n        componentMounted:false\n      });\n    }\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token]);\n    const curveTokenEnabled = curveConfig.enabled && curveTokenConfig && curveTokenConfig.enabled;\n\n    const [\n      tokenApproved,\n      contractPaused,\n      curveSwapContract,\n      curveDepositContract,\n      unlentBalance,\n      {migrationEnabled},\n      curveTokenBalance,\n    ] = await Promise.all([\n      this.checkTokenApproved(),\n      this.functionsUtil.checkContractPaused(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract(),\n      this.functionsUtil.getUnlentBalance(this.props.tokenConfig),\n      this.functionsUtil.checkMigration(this.props.tokenConfig,this.props.account),\n      curveTokenEnabled ? this.functionsUtil.getCurveTokenBalance(this.props.account) : null\n    ]);\n\n    const canDeposit = this.props.tokenBalance && this.functionsUtil.BNify(this.props.tokenBalance).gt(0);\n    const canRedeem = this.props.idleTokenBalance && this.functionsUtil.BNify(this.props.idleTokenBalance).gt(0);\n\n    const canDepositCurve = curveTokenEnabled && canDeposit;\n    const depositCurveEnabled = canDepositCurve;\n\n    const showETHWrapperEnabled = this.props.selectedToken === 'WETH' && (this.state.showETHWrapperEnabled || !canDeposit);\n\n    const canRedeemCurve = curveTokenEnabled && curveTokenBalance && curveTokenBalance.gt(0);\n    const redeemCurveEnabled = canRedeemCurve;\n\n    const tokenGovTokens = this.functionsUtil.getTokenGovTokens(this.props.tokenConfig);\n\n    const newState = {...this.state};\n\n    // Check curve deposit enabled\n    if (newState.depositCurveEnabled && !curveTokenEnabled){\n      newState.depositCurveEnabled = false;\n    }\n    \n\n    newState.canRedeem = canRedeem;\n    newState.canDeposit = canDeposit;\n    newState.unlentBalance = unlentBalance;\n    newState.tokenApproved = tokenApproved;\n    newState.tokenGovTokens = tokenGovTokens;\n    newState.contractPaused = contractPaused;\n    newState.canRedeemCurve = canRedeemCurve;\n    newState.canDepositCurve = canDepositCurve;\n    newState.migrationEnabled = migrationEnabled;\n    newState.curveTokenBalance = curveTokenBalance;\n    newState.curveSwapContract = curveSwapContract;\n    newState.redeemCurveEnabled = redeemCurveEnabled;\n    newState.depositCurveEnabled = depositCurveEnabled;\n    newState.curveDepositContract = curveDepositContract;\n    newState.showETHWrapperEnabled = showETHWrapperEnabled;\n\n    newState.txError = {\n      redeem:false,\n      deposit:false\n    };\n    newState.processing = {\n      redeem:{\n        txHash:null,\n        loading:false\n      },\n      deposit:{\n        txHash:null,\n        loading:false\n      },\n      approve:{\n        txHash:null,\n        loading:false\n      },\n      boost:{\n        txHash:null,\n        loading:false\n      }\n    };\n    newState.inputValue = {\n      boost:null,\n      redeem:null,\n      deposit:null\n    };\n    newState.fastBalanceSelector = {\n      boost:null,\n      redeem:null,\n      deposit:null\n    };\n\n    newState.componentMounted = true;\n\n    this.setState(newState,() => {\n      this.checkAction();\n      this.loadAPY();\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      erc20ForwarderTx:null,\n      loadingErc20ForwarderTx:false,\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const redeemGovTokens = this.state.redeemGovTokens;\n    const selectedPercentage = this.getFastBalanceSelector();\n    const inputValue = this.state.inputValue[this.state.action];\n    const redeemSkipGov = this.state.redeemSkipGov && this.state.redeemSkipGovTokens.length>0 && this.state.agreeSkipGovTokens;\n\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','metaTransactionsEnabled']) && this.state.metaTransactionsEnabled;\n\n    let loading = true;\n\n    switch (this.state.action){\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        if (!this.state.tokenApproved){\n          return this.approveToken();\n        }\n\n        if (localStorage){\n          this.functionsUtil.setLocalStorage('redirectToFundsAfterLogged',0);\n        }\n\n        this.setState({\n          lendingProcessing: this.props.account,\n          lendAmount: '',\n          genericError: '',\n        });\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.props.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if ((this.state.metaTransactionsEnabled || this.state.erc20ForwarderEnabled) && txError){\n            this.setState({\n              erc20ForwarderTx:null,\n              loadingErc20ForwarderTx:false,\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n        const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token,'enabled']);\n\n        // Curve Deposit\n        if (curveTokenEnabled && this.state.depositCurveEnabled){\n\n          const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,curvePoolContractInfo.decimals);\n\n          const amounts = await this.functionsUtil.getCurveAmounts(this.props.tokenConfig.idle.token,tokensToDeposit);\n          let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n          if (this.state.maxSlippage){\n            minMintAmount = this.functionsUtil.BNify(minMintAmount);\n            minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n            minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n          }\n          \n          const depositParams = [amounts,minMintAmount];\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, callbackDeposit, callbackReceiptDeposit);\n        // Normal Deposit\n        } else {\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n\n          // const gasLimitDeposit = this.functionsUtil.BNify(1000000);\n          let depositParams = [];\n\n          // Use Proxy Contract if enabled\n          const useProxyContract = this.checkUseProxyContract();\n          if (useProxyContract){\n            const mintProxyContractInfo = this.state.actionProxyContract[this.state.action];\n            const mintProxyContract = mintProxyContractInfo.contract;\n\n            // Use Meta-Transactions\n            if (depositMetaTransactionsEnabled){\n              depositParams = [tokensToDeposit, this.props.tokenConfig.idle.address];\n              const functionCall = mintProxyContract.methods[mintProxyContractInfo.function](...depositParams);\n              const functionSignature = functionCall.encodeABI();\n              // console.log('mintProxyContract',mintProxyContractInfo.function,depositParams);\n              // if (this.state.metaTransactionsEnabled){\n              contractSendResult = await this.functionsUtil.sendBiconomyTxWithPersonalSign(mintProxyContractInfo.name, functionSignature, callbackDeposit, callbackReceiptDeposit);\n              // } else {\n              //   contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n              // }\n            // Use Erc20 Forwarder\n            } else if (depositErc20ForwarderEnabled){\n              // Build ERC20 Forwarder Tx\n              if (!this.state.erc20ForwarderTx){\n                this.setState({\n                  txError:{\n                    [this.state.action]:false\n                  },\n                  loadingErc20ForwarderTx:true\n                }, async () => {\n                  const erc20ForwarderContract = this.state.erc20ForwarderContract[this.state.action];\n                  const signedParameters = await this.functionsUtil.signPermit(this.props.selectedToken, this.props.account, erc20ForwarderContract.name);\n                  console.log('signedParameters',signedParameters);\n                  if (signedParameters){\n                    const { expiry, nonce, r, s, v } = signedParameters;\n                    depositParams = [tokensToDeposit, parseInt(nonce), expiry, v, r, s];\n\n                    console.log('permitAndDeposit',mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams);\n\n                    // contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n\n                    const permitType = erc20ForwarderContract.permitType;\n                    const functionCall = erc20ForwarderContract.contract.methods[erc20ForwarderContract.function](...depositParams);\n                    const functionSignature = functionCall.encodeABI();\n\n                    // console.log('buildBiconomyErc20ForwarderTx 1',permitType, erc20ForwarderContract.function, depositParams, functionCall, functionSignature);\n\n                    const gasLimit = 1000000;//await functionCall.estimateGas({from: this.props.account}); // 5000000;\n\n                    console.log('buildBiconomyErc20ForwarderTx',mintProxyContractInfo.name, depositParams, functionSignature, gasLimit);\n\n                    // debugger;\n\n                    const erc20ForwarderTx = await this.functionsUtil.buildBiconomyErc20ForwarderTx(erc20ForwarderContract.name, this.props.tokenConfig.address, permitType, functionSignature, gasLimit);\n                    console.log('erc20ForwarderTx',erc20ForwarderTx);\n                    return this.setState({\n                      erc20ForwarderTx,\n                      loadingErc20ForwarderTx:false\n                    });\n                  } else {\n                    return this.setState((prevState) => ({\n                      processing: {\n                        ...prevState.processing,\n                        [this.state.action]:{\n                          txHash:null,\n                          loading:false\n                        }\n                      },\n                      signedParameters:null,\n                      erc20ForwarderTx:null,\n                      loadingErc20ForwarderTx:false\n                    }));\n                  }\n                });\n              // Send ERC20 Forwarder Tx\n              } else {\n                this.setState({\n                  txError:{\n                    [this.state.action]:false\n                  },\n                  loadingErc20ForwarderTx:true\n                }, async () => {\n                  const metaInfo = {};\n                  const permitOptions = {};\n                  const erc20ForwarderContract = this.state.erc20ForwarderContract[this.state.action];\n                  const erc20ForwarderBaseContract = this.functionsUtil.getGlobalConfig(['contract','methods',this.state.action,'erc20ForwarderProxyContract','forwarder']);\n\n                  const signedParameters = await this.functionsUtil.signPermit(this.props.selectedToken, this.props.account, erc20ForwarderBaseContract.name, 1);\n                  if (signedParameters){\n\n                    this.setState({\n                      signedParameters\n                    });\n\n                    const { expiry, nonce, r, s, v } = signedParameters;\n                    permitOptions.v = v;\n                    permitOptions.r = r;\n                    permitOptions.s = s;\n                    permitOptions.value = 0; //in case of DAI passing dummy value for the sake of struct (similar to token address in EIP2771)\n                    permitOptions.allowed = true;\n                    permitOptions.expiry = parseInt(expiry);\n                    permitOptions.holder = this.props.account;\n                    permitOptions.nonce = parseInt(nonce.toString());\n                    permitOptions.spender = erc20ForwarderBaseContract.address;\n\n                    metaInfo.permitData = permitOptions;\n                    metaInfo.permitType = erc20ForwarderContract.permitType;\n\n                    console.log('sendBiconomyTxWithErc20Forwarder',permitOptions,metaInfo);\n\n                    await this.functionsUtil.asyncTimeout(200);\n\n                    contractSendResult = await this.functionsUtil.sendBiconomyTxWithErc20Forwarder(this.state.erc20ForwarderTx.request, metaInfo, callbackDeposit, callbackReceiptDeposit);\n\n                    this.setState({\n                      erc20ForwarderTx:null,\n                      loadingErc20ForwarderTx:false\n                    });\n                  } else {\n                    return this.setState((prevState) => ({\n                      processing: {\n                        ...prevState.processing,\n                        [this.state.action]:{\n                          txHash:null,\n                          loading:false\n                        }\n                      },\n                      signedParameters:null,\n                      erc20ForwarderTx:null,\n                      loadingErc20ForwarderTx:false\n                    }));\n                  }\n                });\n              }\n            }\n          // Use main contract if no proxy contract exists\n          } else {\n            /*\n            let _skipMint = !this.state.directMint && this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMint']);\n            _skipMint = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : _skipMint;\n\n            // Check if deposited amount is greated that general lower limit for direct mint\n            if (_skipMint && this.state.minAmountForMintReached){\n              _skipMint = false;\n            }\n            */\n            // Always skip mint\n            let _skipMint = true;\n\n            const _referral = this.getReferralAddress() || '0x0000000000000000000000000000000000000000';\n            depositParams = [tokensToDeposit, _skipMint, _referral];\n            // console.log('depositParams',depositParams);\n            contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'mintIdleToken', depositParams, callbackDeposit, callbackReceiptDeposit);\n          }\n        }\n      break;\n      case 'redeem':\n\n        if (redeemGovTokens){\n          const callbackRedeem = (tx,error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_gov`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: 0\n            };\n\n            if (error){\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error'){\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  txHash:null,\n                  loading:false\n                }\n              }\n            }));\n\n            if (txSucceeded){\n              this.setState((prevState) => ({\n                inputValue:{\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'redeemIdleToken', [0], callbackRedeem, callbackReceiptRedeem);\n          \n        } else {\n\n          if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n            return false;\n          }\n\n          const txData = {\n            value:this.functionsUtil.BNify(inputValue)\n          };\n\n          let idleTokenToRedeem = null;\n          if (selectedPercentage){\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage);\n          } else {\n            const idleTokenPriceWithFee = await this.functionsUtil.getIdleTokenPriceWithFee(this.props.tokenConfig,this.props.account)\n            idleTokenToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals)).div(idleTokenPriceWithFee);\n          }\n\n          // Check if idleTokens to redeem > idleToken balance\n          if (idleTokenToRedeem.gt(this.functionsUtil.BNify(this.props.idleTokenBalance))){\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance);\n          }\n\n          // Normalize number\n          idleTokenToRedeem = this.functionsUtil.normalizeTokenAmount(idleTokenToRedeem,18);\n\n          if (!idleTokenToRedeem){\n            return false;\n          }\n\n          const callbackRedeem = (tx,error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_partial`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: parseInt(inputValue)\n            };\n\n            if (error){\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error'){\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  txHash:null,\n                  loading:false\n                }\n              }\n            }));\n\n            if (txSucceeded){\n              this.setState((prevState) => ({\n                inputValue:{\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          let redeemMethod = 'redeemIdleToken';\n          let redeemParams = [idleTokenToRedeem];\n\n          if (redeemSkipGov){\n            redeemMethod = 'redeemIdleTokenSkipGov';\n            const _skipGovTokenRedeem = await this.getSkippedGovTokensFlags();\n            redeemParams.push(_skipGovTokenRedeem);\n          }\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, redeemMethod, redeemParams, callbackRedeem, callbackReceiptRedeem, txData);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    if (contractSendResult !== false || loading !== this.state.processing[this.state.action].loading){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  showMaxSlippage = () => {\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  checkAction = () => {\n    let action = this.state.action;\n\n    switch(action){\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = 'deposit';\n        }\n      break;\n      default:\n      break;\n    }\n\n    if (action !== this.state.action){\n      this.setState({\n        action\n      },() => {\n        this.checkButtonDisabled();\n      });\n    } else {\n      this.checkButtonDisabled();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && (amount.lte(0) || amount.gt(this.props.tokenBalance)));\n      break;\n      case 'redeem':\n        buttonDisabled = !this.state.canRedeemCurve && !this.state.redeemGovTokens && (buttonDisabled || ( !amount || amount.lte(0) || amount.gt(this.props.redeemableBalance) ));\n\n        if (!buttonDisabled && this.state.redeemSkipGov && this.state.redeemSkipGovTokens.length>0 && !this.state.agreeSkipGovTokens){\n          buttonDisabled = true;\n        }\n        // console.log('checkButtonDisabled',this.state.redeemSkipGov,this.state.redeemSkipGovTokens.length,this.state.agreeSkipGovTokens,buttonDisabled);\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.props.tokenBalance ? this.functionsUtil.BNify(this.props.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        amount = this.props.redeemableBalance ? this.functionsUtil.BNify(this.props.redeemableBalance).times(selectedPercentage) : null;\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  changeInputValue = async (e) => {\n    if (!this.state.action){\n      return false;\n    }\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem && !this.state.canRedeemCurve){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const viewOnly = this.props.connectorName === 'custom';\n\n    const govTokensDisabled = this.props.tokenConfig.govTokensDisabled;\n    const govTokensEnabled = !govTokensDisabled && this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'govTokensEnabled']) && Object.keys(this.state.tokenGovTokens).length>0;\n    const skipMintForDepositEnabled = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : true;\n    const skipMintCheckboxEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMintCheckboxEnabled']) && skipMintForDepositEnabled;\n\n    const showRedeemFlow = this.state.canRedeem && (!this.state.redeemCurveEnabled || this.state.showRedeemFlow) && this.state.action==='redeem';\n\n    const redeemGovTokenEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','redeemGovTokens','enabled']) && govTokensEnabled && showRedeemFlow && this.props.govTokensBalance.gt(0);\n    const redeemGovTokens = redeemGovTokenEnabled && this.state.redeemGovTokens;\n\n    const redeemSkipGovConfig = this.functionsUtil.getGlobalConfig(['contract','methods','redeemSkipGov']);\n    const redeemSkipGovEnabled = redeemSkipGovConfig && !redeemSkipGovConfig.disabledTokens.includes(this.props.tokenConfig.idle.token) && govTokensEnabled && showRedeemFlow;\n    const redeemSkipGov = redeemSkipGovEnabled && this.state.redeemSkipGov && Object.keys(this.props.govTokensUserBalances).length>0 && this.props.govTokensBalance.gt(0);\n    const redeemSkipGovNoTokens = redeemSkipGovEnabled && this.state.redeemSkipGov && (!Object.keys(this.props.govTokensUserBalances).length || this.props.govTokensBalance.lte(0));\n\n\n    const showAdvancedRedeemOptions = redeemGovTokenEnabled || redeemSkipGovEnabled;\n    // console.log('showAdvancedRedeemOptions',showAdvancedRedeemOptions,redeemGovTokenEnabled,redeemSkipGovEnabled,govTokensEnabled,showRedeemFlow);\n\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','erc20ForwarderEnabled']);\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','metaTransactionsEnabled']);\n\n    // Biconomy Start\n    const metaTransactionsAvailable = depositMetaTransactionsEnabled && this.props.biconomy && this.state.actionProxyContract[this.state.action];\n    const useMetaTx = metaTransactionsAvailable && this.state.metaTransactionsEnabled;\n\n    const erc20ForwarderEnabled = depositErc20ForwarderEnabled && this.props.biconomy && this.props.erc20ForwarderClient && this.state.actionProxyContract[this.state.action];\n\n    // console.log(erc20ForwarderEnabled,depositErc20ForwarderEnabled,this.props.biconomy,this.props.erc20ForwarderClient,this.state.actionProxyContract[this.state.action]);\n    // Biconomy End\n\n    const totalBalance = this.state.action === 'deposit' ? this.props.tokenBalance : this.props.redeemableBalance;\n    const migrateText = this.state.migrationEnabled && this.props.tokenConfig.migration.message !== undefined ? this.props.tokenConfig.migration.message : null;\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token,'enabled']);\n\n    const depositCurve = curveTokenEnabled && this.state.depositCurveEnabled && this.state.action === 'deposit';\n\n    const showDepositOptions = this.state.action === 'deposit' && !this.state.contractPaused && (curveTokenEnabled || this.state.tokenApproved);\n\n    const showDepositCurve = showDepositOptions && curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canDepositCurve && this.state.action === 'deposit';\n    const showRedeemCurve = curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canRedeemCurve && this.state.action === 'redeem';\n\n    const showCurveSlippage = depositCurve && this.state.depositCurveSlippage && this.state.depositCurveBalance && !this.state.buttonDisabled;\n\n    const showRebalanceOption = false && this.state.canDeposit && skipMintCheckboxEnabled && this.state.action === 'deposit';\n    const showAdvancedDepositOptions = showDepositCurve || showRebalanceOption;\n\n    const batchDepositInfo = this.functionsUtil.getGlobalConfig(['tools','batchDeposit']);\n    const batchDepositEnabled = batchDepositInfo.enabled && typeof batchDepositInfo.props.availableTokens[this.props.tokenConfig.idle.token] !== 'undefined';\n    const batchDepositDepositEnabled = batchDepositInfo.depositEnabled;\n\n    const showBatchDeposit = !useMetaTx && batchDepositEnabled && batchDepositDepositEnabled && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    const ethWrapperInfo = this.functionsUtil.getGlobalConfig(['tools','ethWrapper']);\n    const ETHWrapperComponent = ethWrapperInfo.subComponent;\n    const showETHWrapper = this.props.selectedToken === 'WETH' && ethWrapperInfo.enabled && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    const canPerformAction = /*!depositCurve && !this.state.redeemCurveEnabled && */((this.state.action === 'deposit' && this.state.canDeposit) || (this.state.action === 'redeem' && this.state.canRedeem) || redeemGovTokens) && (!this.state.showETHWrapperEnabled || this.state.action === 'redeem');\n    const showActionFlow = !redeemGovTokens && canPerformAction;\n\n    const showBuyFlow = this.state.componentMounted && (!showDepositCurve || this.state.showBuyFlow) && !this.state.depositCurveEnabled && this.state.tokenApproved && !this.state.contractPaused && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.action === 'deposit' && !this.state.canDeposit && !this.state.showETHWrapperEnabled;\n\n    const _referral = this.getReferralAddress();\n    const showReferral = _referral && this.state.action === 'deposit' && showActionFlow && !showBuyFlow;\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          <Box\n            width={1}\n          >\n            <Text mb={1}>\n              Select your asset:\n            </Text>\n            <AssetSelector\n              {...this.props}\n            />\n          </Box>\n          {\n            viewOnly ? (\n              <IconBox\n                cardProps={{\n                  mt:3\n                }}\n                icon={'Visibility'}\n                text={'You are using Idle in \"Read-Only\" mode.<br />Logout and connect with your wallet to interact.'}\n              />\n            ) : (\n              <Migrate\n                {...this.props}\n                migrateTextBefore={migrateText}\n                migrateText={migrateText !== null ? '' : null}\n                toggleSkipMigration={this.toggleSkipMigration.bind(this)}\n              >\n                {\n                  !this.props.account ? (\n                    <ConnectBox\n                      {...this.props}\n                    />\n                  ) : this.state.componentMounted ? (\n                    this.state.action && (\n                      <Box\n                        width={1}\n                      >\n                        <Flex\n                          mt={2}\n                          flexDirection={'column'}\n                        >\n                          <Text mb={2}>\n                            Choose the action:\n                          </Text>\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'space-between'}\n                          >\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                width:0.48,\n                                onMouseDown:() => {\n                                  this.setAction('deposit');\n                                }\n                              }}\n                              isInteractive={true}\n                              isActive={ this.state.action === 'deposit' }\n                            >\n                              <Flex\n                                my={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <TransactionField\n                                  transaction={{\n                                    action:'deposit'\n                                  }}\n                                  fieldInfo={{\n                                    name:'icon',\n                                    props:{\n                                      mr:3\n                                    }\n                                  }}\n                                />\n                                <Text\n                                  fontSize={3}\n                                  fontWeight={3}\n                                >\n                                  Deposit\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                width:0.48,\n                                onMouseDown:() => {\n                                  this.setAction('redeem');\n                                }\n                              }}\n                              isInteractive={true}\n                              isActive={ this.state.action === 'redeem' }\n                              isDisabled={ !this.state.canRedeem && !this.state.canRedeemCurve }\n                            >\n                              <Flex\n                                my={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <TransactionField\n                                  transaction={{\n                                    action:'redeem'\n                                  }}\n                                  fieldInfo={{\n                                    name:'icon',\n                                    props:{\n                                      mr:3\n                                    }\n                                  }}\n                                />\n                                <Text\n                                  fontSize={3}\n                                  fontWeight={3}\n                                >\n                                  Redeem\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          </Flex>\n                        </Flex>\n                        {\n                          (showRedeemFlow && this.state.unlentBalance) &&\n                            <DashboardCard\n                              cardProps={{\n                                py:2,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={'LocalGasStation'}\n                                />\n                                <Text\n                                  px={2}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Available balance for Cheap Redeem\n                                </Text>\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'center'}\n                                    hoverColor={'copyColor'}\n                                  >\n                                    {this.state.unlentBalance.toFixed(4)} {this.props.selectedToken}\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.functionsUtil.getGlobalConfig(['messages','cheapRedeem'])}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              </Flex>\n                            </DashboardCard>\n                        }\n                        {\n                          showAdvancedRedeemOptions ? (\n                            <DashboardCard\n                              cardProps={{\n                                pt:2,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                                pb:this.state.showAdvancedOptions ? 3 : 2,\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <Link\n                                  ml={1}\n                                  mainColor={'primary'}\n                                  hoverColor={'primary'}\n                                  onClick={this.toggleShowAdvancedOptions}\n                                >\n                                  { this.state.showAdvancedOptions ? 'Hide' : 'Show' } advanced options\n                                </Link>\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={this.state.showAdvancedOptions ? 'ArrowDropUp' : 'ArrowDropDown'}\n                                />\n                              </Flex>\n                              {\n                                this.state.showAdvancedOptions &&\n                                  <Flex\n                                    mt={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      redeemGovTokenEnabled && \n                                        <Flex\n                                          alignItems={'center'}\n                                          justifyContent={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            checked={this.state.redeemGovTokens}\n                                            label={`Redeem governance tokens only`}\n                                            onChange={ e => this.toggleRedeemGovTokens(e.target.checked) }\n                                          />\n                                          <Link\n                                            color={'link'}\n                                            hoverColor={'link'}\n                                            onClick={ e => this.props.openTooltipModal('Redeem governance tokens',`This feature allows you to redeem just the amount of governance tokens accrued${ this.props.govTokensBalance && this.props.govTokensBalance.gt(0) ? ` (~${this.props.govTokensBalance.toFixed(2)}$)` : null } without redeeming the underlying token.`) }\n                                          >\n                                            (read more)\n                                          </Link>\n                                        </Flex>\n                                    }\n                                    {\n                                      redeemSkipGovEnabled && \n                                        <Flex\n                                          alignItems={'center'}\n                                          flexDirection={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            checked={this.state.redeemSkipGov}\n                                            label={`Redeem without governance tokens`}\n                                            onChange={ e => this.toggleRedeemSkipGov(e.target.checked) }\n                                          />\n                                          <Icon\n                                            mr={1}\n                                            size={'1.2em'}\n                                            name={'Warning'}\n                                            color={'#ffe000'}\n                                          />\n                                          <Link\n                                            color={'link'}\n                                            hoverColor={'link'}\n                                            onClick={ e => this.props.openTooltipModal('Redeem without governance tokens',this.functionsUtil.getGlobalConfig(['messages','redeemSkipGov'])) }\n                                          >\n                                            (read more)\n                                          </Link>\n                                        </Flex>\n                                    }\n                                  </Flex>\n                              }\n                            </DashboardCard>\n                          ) :  showAdvancedDepositOptions ? (\n                            <DashboardCard\n                              cardProps={{\n                                pt:2,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                                pb:this.state.showAdvancedOptions ? 3 : 2,\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <Link\n                                  ml={1}\n                                  mainColor={'primary'}\n                                  hoverColor={'primary'}\n                                  onClick={this.toggleShowAdvancedOptions}\n                                >\n                                  { this.state.showAdvancedOptions ? 'Hide' : 'Show' } advanced options\n                                </Link>\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={this.state.showAdvancedOptions ? 'ArrowDropUp' : 'ArrowDropDown'}\n                                />\n                              </Flex>\n                              {\n                                this.state.showAdvancedOptions &&\n                                  <Flex\n                                    mt={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      showDepositCurve && \n                                        <Flex\n                                          alignItems={'center'}\n                                          justifyContent={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            disabled={this.state.directMint}\n                                            label={`Deposit in the Curve Pool`}\n                                            checked={this.state.depositCurveEnabled}\n                                            onChange={ e => this.toggleDepositCurve(e.target.checked) }\n                                          />\n                                          <Link\n                                            mainColor={'primary'}\n                                            hoverColor={'primary'}\n                                            onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                          >\n                                            (read more)\n                                          </Link>\n                                        </Flex>\n                                    }\n                                    {\n                                      showRebalanceOption && \n                                        <Flex\n                                          alignItems={'center'}\n                                          justifyContent={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            label={`Rebalance the pool`}\n                                            checked={this.state.directMint}\n                                            disabled={this.state.depositCurveEnabled}\n                                            onChange={ e => this.toggleSkipMint(e.target.checked) }\n                                          />\n                                          <Tooltip\n                                            placement={'bottom'}\n                                            message={this.functionsUtil.getGlobalConfig(['messages','directMint'])}\n                                          >\n                                            <Icon\n                                              size={'1em'}\n                                              color={'cellTitle'}\n                                              name={\"InfoOutline\"}\n                                            />\n                                          </Tooltip>\n                                        </Flex>\n                                    }\n                                  </Flex>\n                              }\n                            </DashboardCard>\n                          ) : (\n                            <Flex\n                              width={1}\n                              flexDirection={'column'}\n                            >\n                              {\n                                showDepositCurve && (\n                                  <Flex\n                                    width={1}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <DashboardCard\n                                      isRainbow={true}\n                                      cardProps={{\n                                        py:3,\n                                        px:2,\n                                        mt:3,\n                                        display:'flex',\n                                        alignItems:'center',\n                                        flexDirection:'column',\n                                        justifyContent:'center',\n                                      }}\n                                    >\n                                      <Flex\n                                        width={1}\n                                        alignItems={'center'}\n                                        flexDirection={'column'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Image\n                                          height={'1.8em'}\n                                          src={curveConfig.params.image}\n                                        />\n                                        <Text\n                                          mt={2}\n                                          px={2}\n                                          fontSize={1}\n                                          color={'dark-gray'}\n                                          textAlign={'center'}\n                                        >\n                                          Deposit your tokens in the Curve Pool and boost your APY up to {this.state.curveAPY ? this.state.curveAPY.toFixed(2) : '-'}%.\n                                          <Link\n                                            ml={1}\n                                            mainColor={'primary'}\n                                            hoverColor={'primary'}\n                                            onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                          >\n                                            Read More\n                                          </Link>\n                                        </Text>\n                                        <Checkbox\n                                          mt={2}\n                                          required={false}\n                                          label={`Deposit in Curve`}\n                                          checked={this.state.depositCurveEnabled}\n                                          onChange={ e => this.toggleDepositCurve(e.target.checked) }\n                                        />\n                                      </Flex>\n                                    </DashboardCard>\n                                    {\n                                      (!this.state.showBuyFlow && !this.state.depositCurveEnabled && !this.state.canDeposit) &&\n                                        <Link\n                                          textAlign={'center'}\n                                          hoverColor={'primary'}\n                                          onClick={ e => this.setShowBuyFlow(true) }\n                                        >\n                                          I just want to deposit more {this.props.selectedToken}\n                                        </Link>\n                                    }\n                                  </Flex>\n                                )\n                              }\n                              {\n                                showRebalanceOption && (\n                                  <DashboardCard\n                                    cardProps={{\n                                      py:3,\n                                      px:2,\n                                      mt:3,\n                                      display:'flex',\n                                      alignItems:'center',\n                                      flexDirection:'column',\n                                      justifyContent:'center',\n                                    }}\n                                  >\n                                    <Flex\n                                      width={1}\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        color={'cellText'}\n                                        name={'InfoOutline'}\n                                      />\n                                      <Text\n                                        mt={1}\n                                        px={2}\n                                        fontSize={1}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        By checking this flag you can rebalance the pool and help all users gain an additional APR\n                                      </Text>\n                                    </Flex>\n                                    <Checkbox\n                                      mt={2}\n                                      required={false}\n                                      label={`Rebalance the pool`}\n                                      checked={this.state.directMint}\n                                      onChange={ e => this.toggleSkipMint(e.target.checked) }\n                                    />\n                                  </DashboardCard>\n                                )\n                              }\n                              {\n                                redeemGovTokenEnabled && (\n                                  <DashboardCard\n                                    cardProps={{\n                                      py:3,\n                                      px:2,\n                                      mt:3,\n                                      display:'flex',\n                                      alignItems:'center',\n                                      flexDirection:'column',\n                                      justifyContent:'center',\n                                    }}\n                                  >\n                                    <Flex\n                                      width={1}\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        color={'cellText'}\n                                        name={'InfoOutline'}\n                                      />\n                                      <Text\n                                        mt={1}\n                                        px={2}\n                                        fontSize={1}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        By redeeming your {this.props.selectedToken} you will automatically get also the proportional amount of governance tokens accrued{ this.props.govTokensBalance && this.props.govTokensBalance.gt(0) ? ` (~ $${this.props.govTokensBalance.toFixed(2)})` : null }.\n                                      </Text>\n                                    </Flex>\n                                    <Checkbox\n                                      mt={2}\n                                      required={false}\n                                      checked={this.state.redeemGovTokens}\n                                      label={`Redeem governance tokens only`}\n                                      onChange={ e => this.toggleRedeemGovTokens(e.target.checked) }\n                                    />\n                                  </DashboardCard>\n                                )\n                              }\n                            </Flex>\n                          )\n                        }\n                        {\n                          redeemSkipGov ? (\n                            <DashboardCard\n                              cardProps={{\n                                mt:2,\n                                mb:2,\n                                py:2,\n                                px:1\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                              >\n                                <Text\n                                  mt={1}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Select the gov tokens you want to give away:\n                                </Text>\n                                <Flex\n                                  mt={2}\n                                  width={1}\n                                  boxShadow={0}\n                                  style={{\n                                    flexWrap:'wrap'\n                                  }}\n                                  alignItems={'center'}\n                                  justifyContent={'center'}\n                                  >\n                                    {\n                                      Object.keys(this.props.govTokensUserBalances).map( token => {\n                                        const balance = this.props.govTokensUserBalances[token];\n                                        const isActive = this.state.redeemSkipGovTokens.includes(token);\n                                        const tokenConfig = this.functionsUtil.getGlobalConfig(['govTokens',token]);\n                                        return (\n                                          <Flex\n                                            p={2}\n                                            mb={1}\n                                            mx={1}\n                                            width={'auto'}\n                                            style={{\n                                              cursor:'pointer'\n                                            }}\n                                            borderRadius={2}\n                                            flexDirection={'row'}\n                                            key={`skipGovToken_${token}`}\n                                            justifyContent={'flex-start'}\n                                            backgroundColor={isActive ? '#2a4b78' : 'cardBgHover'}\n                                            onClick={ e => this.setRedeemSkipGovTokens(token,!this.state.redeemSkipGovTokens.includes(token)) }\n                                          >\n                                            <Checkbox\n                                              m={0}\n                                              required={false}\n                                              checked={isActive}\n                                              onChange={ e => this.setRedeemSkipGovTokens(token,e.target.checked) }\n                                            />\n                                            <AssetField\n                                              token={token}\n                                              tokenConfig={tokenConfig}\n                                              fieldInfo={{\n                                                name:'icon',\n                                                props:{\n                                                  mr:1,\n                                                  width:['1.4em','1.6em'],\n                                                  height:['1.4em','1.6em']\n                                                }\n                                              }}\n                                            />\n                                            <SmartNumber\n                                              ml={1}\n                                              fontSize={[0,2]}\n                                              fontWeight={500}\n                                              maxPrecision={4}\n                                              color={'cellText'}\n                                              number={balance.toString()}\n                                            />\n                                          </Flex>\n                                        );\n                                    })\n                                  }\n                                </Flex>\n                              </Flex>\n                            </DashboardCard>\n                          ) : redeemSkipGovNoTokens && (\n                            <DashboardCard\n                              cardProps={{\n                                p:2,\n                                my:2\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'MoneyOff'}\n                                  color={'cellText'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  You don't have any gov tokens to give away.\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          redeemSkipGov && this.functionsUtil.BNify(this.state.skippedGovTokensBalance).gt(0) ? (\n                            <DashboardCard\n                              cardProps={{\n                                p:2,\n                                my:2\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'Warning'}\n                                  color={'#ffe000'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={1}\n                                  color={'red'}\n                                  textAlign={'center'}\n                                >\n                                  You are giving away {this.functionsUtil.formatMoney(this.state.skippedGovTokensBalance)}$ worth of governance tokens!\n                                </Text>\n                                {\n                                  this.state.skipGovTokensGasSave && this.state.skipGovTokensGasSave.gte(0.0001) && (\n                                    <Text\n                                      mt={1}\n                                      fontSize={1}\n                                      color={'#00b84a'}\n                                      textAlign={'center'}\n                                    >\n                                      This will save you {this.state.skipGovTokensGasSave.toFixed(4)} ETH of gas (~{this.state.skipGovTokensGasSaveUSD.toFixed(2)}$)\n                                    </Text>\n                                  )\n                                }\n                                <Text\n                                  mt={1}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  To proceed with the redeem please give your authorization by checking the following flag:\n                                </Text>\n                                <Checkbox\n                                  my={1}\n                                  required={false}\n                                  checked={this.state.agreeSkipGovTokens}\n                                  label={`I agree to give away my governance tokens`}\n                                  onChange={ e => this.toggleAgreeSkipGovTokens(e.target.checked) }\n                                />\n                              </Flex>\n                            </DashboardCard>\n                          ) : redeemSkipGov && this.state.redeemSkipGovTokens.length>0 && (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                my:2\n                              }}\n                            >\n                              <FlexLoader\n                                flexProps={{\n                                  flexDirection:'row'\n                                }}\n                                loaderProps={{\n                                  size:'25px',\n                                }}\n                                textProps={{\n                                  ml:2\n                                }}\n                                text={'Loading estimated gas usage...'}\n                              />\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          showReferral && (\n                            <DashboardCard\n                              cardProps={{\n                                py:3,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'Share'}\n                                  color={'cellText'}\n                                />\n                                <Text\n                                  mt={1}\n                                  px={2}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  You are depositing with the following referral address:\n                                </Text>\n                                <Text\n                                  mt={1}\n                                  px={2}\n                                  fontSize={1}\n                                  fontWeight={500}\n                                  textAlign={'center'}\n                                  color={this.props.theme.colors.transactions.status.completed}\n                                >\n                                  {_referral}\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          (metaTransactionsAvailable && !showBuyFlow && !this.state.contractPaused) ? (\n                            <DashboardCard\n                              cardProps={{\n                                py:3,\n                                px:2,\n                                my:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              {\n                                this.state.metaTransactionsEnabled && this.state.txError[this.state.action] && this.state.actionProxyContract[this.state.action].approved ? (\n                                  <Flex\n                                    width={1}\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <Icon\n                                      size={'1.8em'}\n                                      name={'Warning'}\n                                      color={'cellText'}\n                                    />\n                                    <Text\n                                      mt={1}\n                                      fontSize={1}\n                                      color={'cellText'}\n                                      textAlign={'center'}\n                                    >\n                                      Seems like you are having some trouble with Meta-Transactions... Disable them by unchecking the box below and try again!\n                                    </Text>\n                                  </Flex>\n                                ) : this.functionsUtil.getWalletProvider() === 'WalletConnect' && this.state.metaTransactionsEnabled ? (\n                                  <Flex\n                                    width={1}\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <Icon\n                                      size={'1.8em'}\n                                      name={'Warning'}\n                                      color={'cellText'}\n                                    />\n                                    <Text\n                                      mt={1}\n                                      fontSize={1}\n                                      color={'cellText'}\n                                      textAlign={'center'}\n                                    >\n                                      Please disable Meta-Transactions if you are using Argent Wallet to avoid failed transactions!\n                                    </Text>\n                                  </Flex>\n                                ) : (\n                                  <Text\n                                    mt={1}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    Meta-Transactions are {this.state.metaTransactionsEnabled ? 'enabled' : 'disabled'} for {this.state.action}s!<br />\n                                    {\n                                      this.state.metaTransactionsEnabled && !this.state.actionProxyContract[this.state.action].approved && `Please either enable the Smart-Contract to enjoy gas-less ${this.state.action} or just disable meta-tx.`\n                                    }\n                                  </Text>\n                                )\n                              }\n                              <Checkbox\n                                mt={2}\n                                required={false}\n                                checked={this.state.metaTransactionsEnabled}\n                                onChange={ e => this.toggleMetaTransactionsEnabled(e.target.checked) }\n                                label={`${this.functionsUtil.capitalize(this.state.action)} with Meta-Transaction`}\n                              />\n                            </DashboardCard>\n                          ) : (erc20ForwarderEnabled && !showBuyFlow && !this.state.contractPaused) && (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                my:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              <Text\n                                mb={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                How do you prefer to pay gas fees for this {this.state.action}?\n                              </Text>\n                              <Flex\n                                width={[1,0.7]}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'space-between'}\n                              >\n                                <CardIconButton\n                                  {...this.props}\n                                  cardProps={{\n                                    py:2,\n                                    px:[2,3],\n                                    width:0.48\n                                  }}\n                                  textProps={{\n                                    ml:[1,2],\n                                  }}\n                                  text={this.props.selectedToken}\n                                  isActive={this.state.erc20ForwarderEnabled}\n                                  imageProps={{\n                                    height:this.props.isMobile ? '1.4em' : '1.8em',\n                                    width:this.props.isMobile ? '1.4em' : '1.8em'\n                                  }}\n                                  image={`/images/tokens/${this.props.selectedToken}.svg`}\n                                  handleClick={e => this.toggleErc20ForwarderEnabled(true)}\n                                />\n                                <CardIconButton\n                                  {...this.props}\n                                  cardProps={{\n                                    py:2,\n                                    px:[2,3],\n                                    width:0.48\n                                  }}\n                                  textProps={{\n                                    ml:[1,2],\n                                  }}\n                                  text={'ETH'}\n                                  isActive={!this.state.erc20ForwarderEnabled}\n                                  imageProps={{\n                                    height:this.props.isMobile ? '1.4em' : '1.8em',\n                                    width:this.props.isMobile ? '1.4em' : '1.8em'\n                                  }}\n                                  image={`/images/tokens/ETH.svg`}\n                                  handleClick={e => this.toggleErc20ForwarderEnabled(false)}\n                                />\n                              </Flex>\n                              {\n                                this.state.txError[this.state.action] && (\n                                  <Text\n                                    mt={2}\n                                    fontSize={1}\n                                    color={'red'}\n                                    textAlign={'center'}\n                                  >\n                                    The meta-transaction cannot be executed, select ETH and try again.\n                                  </Text>\n                                )\n                              }\n                              <Text\n                                mt={2}\n                                fontSize={'11px'}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                Powered by <ExtLink fontSize={'11px'} href={'https://biconomy.io'}>Biconomy</ExtLink>\n                              </Text>\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          (this.state.minAmountForMintReached && this.state.action === 'deposit') && (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                mt:3\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={'InfoOutline'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  By depositing more than {this.functionsUtil.formatMoney(this.state.minAmountForMint)}$ { this.state.showPoolPerc ? `(${this.state.minAmountForMint.div(this.state.totalAUM).times(100).toFixed(0)}% of the pool)` : null } the pool will be automatically rebalanced, gas cost may be higher.\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          showBatchDeposit ? (\n                            <Flex\n                              p={2}\n                              mt={3}\n                              width={1}\n                              borderRadius={2}\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              justifyContent={'center'}\n                              backgroundColor={'DashboardCard'}\n                              border={`1px solid ${this.props.theme.colors.primary}`}\n                            >\n                              <Link\n                                textAlign={'center'}\n                                hoverColor={'primary'}\n                                href={`/#/dashboard/tools/${batchDepositInfo.route}/${this.props.tokenConfig.idle.token}`}\n                              >\n                                Gas fees too high? Save gas with our Batch Deposit!\n                              </Link>\n                              <Icon\n                                ml={1}\n                                size={'1em'}\n                                color={'primary'}\n                                name={'LocalGasStation'}\n                              />\n                            </Flex>\n                          ) : showETHWrapper && (\n                            <Flex\n                              width={1}\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <DashboardCard\n                                cardProps={{\n                                  py:3,\n                                  px:2,\n                                  mt:3,\n                                  display:'flex',\n                                  alignItems:'center',\n                                  flexDirection:'column',\n                                  justifyContent:'center',\n                                  pb:this.state.showAdvancedOptions ? 3 : 2,\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  justifyContent={'row'}\n                                >\n                                  <Checkbox\n                                    required={false}\n                                    checked={this.state.showETHWrapperEnabled}\n                                    label={`Convert your ETH to WETH`}\n                                    onChange={ e => this.toggleShowETHWrapper(e.target.checked) }\n                                  />\n                                </Flex>\n                              </DashboardCard>\n                              {\n                                this.state.showETHWrapperEnabled && \n                                  <ETHWrapperComponent\n                                    {...this.props}\n                                    action={'wrap'}\n                                    fullWidth={true}\n                                    toolProps={ethWrapperInfo.props}\n                                  />\n                              }\n                            </Flex>\n                          )\n                        }\n                        {\n                          showRedeemCurve && this.state.canRedeem && (\n                            <Flex\n                              width={1}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <DashboardCard\n                                isRainbow={true}\n                                cardProps={{\n                                  py:3,\n                                  px:2,\n                                  mt:3,\n                                  display:'flex',\n                                  alignItems:'center',\n                                  flexDirection:'column',\n                                  justifyContent:'center',\n                                }}\n                              >\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Image\n                                    height={'1.8em'}\n                                    src={curveConfig.params.image}\n                                  />\n                                  <Text\n                                    mt={2}\n                                    px={2}\n                                    fontSize={1}\n                                    color={'dark-gray'}\n                                    textAlign={'center'}\n                                  >\n                                    Redeem your tokens from the Curve Pool.\n                                    <Link\n                                      ml={1}\n                                      mainColor={'primary'}\n                                      hoverColor={'primary'}\n                                      onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                    >\n                                      Read More\n                                    </Link>\n                                  </Text>\n                                  {\n                                    this.state.canRedeem &&\n                                      <Checkbox\n                                        mt={2}\n                                        required={false}\n                                        label={`Redeem from Curve`}\n                                        checked={this.state.redeemCurveEnabled}\n                                        onChange={ e => this.toggleRedeemCurve(e.target.checked) }\n                                      />\n                                  }\n                                </Flex>\n                              </DashboardCard>\n                              {\n                                this.canRedeem &&\n                                  <Link\n                                    textAlign={'center'}\n                                    hoverColor={'primary'}\n                                    onClick={ e => this.setShowRedeemFlow(true) }\n                                  >\n                                    I just want to redeem my {this.props.selectedToken}\n                                  </Link>\n                              }\n                            </Flex>\n                          )\n                        }\n                        {\n                          (this.state.contractPaused && this.state.action === 'deposit') ? (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                mt:3\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'Warning'}\n                                  color={'cellText'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Deposits for {this.props.selectedToken} are temporarily unavailable due to Smart-Contract maintenance. Redeems are always available.\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          ) : (!this.state.tokenApproved && this.state.action === 'deposit' && !this.state.showETHWrapperEnabled) ? (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                mt:3\n                              }}\n                            >\n                              {\n                                this.state.processing['approve'] && this.state.processing['approve'].loading ? (\n                                  <Flex\n                                    flexDirection={'column'}\n                                  >\n                                    <TxProgressBar\n                                      {...this.props}\n                                      waitText={`Approve estimated in`}\n                                      endMessage={`Finalizing approve request...`}\n                                      hash={this.state.processing['approve'].txHash}\n                                      cancelTransaction={this.cancelTransaction.bind(this)}\n                                    />\n                                  </Flex>\n                                ) : (\n                                  <Flex\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                  >\n                                    <Icon\n                                      size={'1.8em'}\n                                      name={'LockOpen'}\n                                      color={'cellText'}\n                                    />\n                                    <Text\n                                      mt={3}\n                                      fontSize={2}\n                                      color={'cellText'}\n                                      textAlign={'center'}\n                                    >\n                                      {\n                                        this.state.depositCurveEnabled ? \n                                          `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.`\n                                        : useMetaTx ?\n                                          `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle using Meta-Transaction you need to approve our Smart-Contract first.`\n                                        :\n                                          `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle you need to approve our Smart-Contract first.`\n                                      }\n                                    </Text>\n                                    <RoundButton\n                                      buttonProps={{\n                                        mt:3,\n                                        width:[1,1/2]\n                                      }}\n                                      handleClick={this.approveToken.bind(this)}\n                                    >\n                                      Approve\n                                    </RoundButton>\n                                  </Flex>\n                                )\n                              }\n                            </DashboardCard>\n                          ) : (!showBuyFlow && canPerformAction) && (\n                            !this.state.processing[this.state.action].loading ? (\n                              <Flex\n                                mt={2}\n                                flexDirection={'column'}\n                              >\n                                {\n                                  showActionFlow && (\n                                    <Flex\n                                      mb={3}\n                                      width={1}\n                                      flexDirection={'column'}\n                                    >\n                                      {\n                                        (totalBalance || this.props.tokenFeesPercentage) && (\n                                          <Box\n                                            mb={1}\n                                            width={1}\n                                          >\n                                            {\n                                              this.state.showMaxSlippage && showCurveSlippage && (\n                                                <Box\n                                                  mb={2}\n                                                  width={1}\n                                                >\n                                                  <Flex\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                  >\n                                                    <Text>\n                                                      Choose max slippage:\n                                                    </Text>\n                                                    <Tooltip\n                                                      placement={'top'}\n                                                      message={`Max additional slippage on top of the one shown below`}\n                                                    >\n                                                      <Icon\n                                                        ml={1}\n                                                        size={'1em'}\n                                                        color={'cellTitle'}\n                                                        name={\"InfoOutline\"}\n                                                      />\n                                                    </Tooltip>\n                                                  </Flex>\n                                                  <Flex\n                                                    mt={2}\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                    justifyContent={'space-between'}\n                                                  >\n                                                    {\n                                                      [0.2,0.5,1,5].map( slippage => (\n                                                        <FastBalanceSelector\n                                                          cardProps={{\n                                                            p:1\n                                                          }}\n                                                          textProps={{\n                                                            fontSize:1\n                                                          }}\n                                                          percentage={slippage}\n                                                          key={`selector_${slippage}`}\n                                                          onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                                          isActive={this.state.maxSlippage === parseFloat(slippage)}\n                                                        />\n                                                      ))\n                                                    }\n                                                  </Flex>\n                                                </Box>\n                                              )\n                                            }\n                                            <Flex\n                                              width={1}\n                                              alignItems={'center'}\n                                              flexDirection={'row'}\n                                              justifyContent={'space-between'}\n                                            >\n                                              {\n                                                showCurveSlippage ? (\n                                                  <Flex\n                                                    width={1}\n                                                    maxWidth={'50%'}\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                  >\n                                                    <Text\n                                                      fontSize={1}\n                                                      fontWeight={3}\n                                                      textAlign={'right'}\n                                                      style={{\n                                                        whiteSpace:'nowrap'\n                                                      }}\n                                                      color={ this.state.depositCurveSlippage.gt(0) ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                                    >\n                                                      {\n                                                        parseFloat(this.state.depositCurveSlippage.times(100).toFixed(2)) === 0 ?\n                                                          'No Slippage'\n                                                        : `${ this.state.depositCurveSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositCurveSlippage.times(100).abs().toFixed(2)}%`\n                                                      }\n                                                    </Text>\n                                                    <Tooltip\n                                                      placement={'top'}\n                                                      message={this.functionsUtil.getGlobalConfig(['messages','curveBonusSlippage'])}\n                                                    >\n                                                      <Icon\n                                                        ml={1}\n                                                        size={'1em'}\n                                                        color={'cellTitle'}\n                                                        name={\"InfoOutline\"}\n                                                      />\n                                                    </Tooltip>\n                                                    <Link\n                                                      ml={1}\n                                                      color={'copyColor'}\n                                                      hoverColor={'primary'}\n                                                      onClick={this.showMaxSlippage}\n                                                    >\n                                                      change\n                                                    </Link>\n                                                  </Flex>\n                                                ) : this.props.tokenFeesPercentage && (\n                                                  <Flex\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                  >\n                                                    <Text\n                                                      fontSize={1}\n                                                      fontWeight={3}\n                                                      color={'dark-gray'}\n                                                      textAlign={'right'}\n                                                      hoverColor={'copyColor'}\n                                                    >\n                                                      Performance fee: {this.props.tokenFeesPercentage.times(100).toFixed(2)}%\n                                                    </Text>\n                                                    <Tooltip\n                                                      placement={'top'}\n                                                      message={this.functionsUtil.getGlobalConfig(['messages','performanceFee'])}\n                                                    >\n                                                      <Icon\n                                                        ml={1}\n                                                        size={'1em'}\n                                                        color={'cellTitle'}\n                                                        name={\"InfoOutline\"}\n                                                      />\n                                                    </Tooltip>\n                                                  </Flex>\n                                                )\n                                              }\n                                              {\n                                                totalBalance && (\n                                                  <Link\n                                                    fontSize={1}\n                                                    fontWeight={3}\n                                                    color={'dark-gray'}\n                                                    textAlign={'right'}\n                                                    hoverColor={'copyColor'}\n                                                    onClick={ (e) => this.setFastBalanceSelector(100) }\n                                                  >\n                                                    {totalBalance.toFixed(6)} {this.props.selectedToken}\n                                                  </Link>\n                                                )\n                                              }\n                                            </Flex>\n                                          </Box>\n                                        )\n                                      }\n                                      <Input\n                                        min={0}\n                                        type={\"number\"}\n                                        required={true}\n                                        height={'3.4em'}\n                                        borderRadius={2}\n                                        fontWeight={500}\n                                        borderColor={'cardBorder'}\n                                        backgroundColor={'cardBg'}\n                                        boxShadow={'none !important'}\n                                        placeholder={`Insert amount`}\n                                        onChange={this.changeInputValue.bind(this)}\n                                        border={`1px solid ${this.props.theme.colors.divider}`}\n                                        value={this.state.inputValue[this.state.action] !== null ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]).toFixed() : ''}\n                                      />\n                                      <Flex\n                                        mt={2}\n                                        alignItems={'center'}\n                                        flexDirection={'row'}\n                                        justifyContent={'space-between'}\n                                      >\n                                        {\n                                          [25,50,75,100].map( percentage => (\n                                            <FastBalanceSelector\n                                              percentage={percentage}\n                                              key={`selector_${percentage}`}\n                                              onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                              isActive={this.state.fastBalanceSelector[this.state.action] === parseInt(percentage)}\n                                            />\n                                          ))\n                                        }\n                                      </Flex>\n                                    </Flex>\n                                  )\n                                }\n                                {\n                                  canPerformAction && (\n                                    <Flex\n                                      justifyContent={'center'}\n                                      mt={ redeemGovTokens ? 2 : 0 }\n                                    >\n                                      <RoundButton\n                                        buttonProps={{\n                                          width:'auto',\n                                          minWidth:[1,1/2],\n                                          style:{\n                                            textTransform:'capitalize'\n                                          },\n                                          disabled:this.state.buttonDisabled\n                                        }}\n                                        handleClick={this.state.buttonDisabled ? null : this.executeAction.bind(this) }\n                                      >\n                                        {this.state.action}{ redeemGovTokens ? ' Gov Tokens' : '' /*(depositCurve ? ' in Curve' : '')*/ }\n                                      </RoundButton>\n                                    </Flex>\n                                  )\n                                }\n                              </Flex>\n                            ) : this.state.loadingErc20ForwarderTx ? (\n                              <Flex\n                                mt={3}\n                                flexDirection={'column'}\n                              >\n                                <FlexLoader\n                                  flexProps={{\n                                    flexDirection:'row'\n                                  }}\n                                  loaderProps={{\n                                    size:'25px',\n                                  }}\n                                  textProps={{\n                                    ml:2\n                                  }}\n                                  text={ this.state.erc20ForwarderTx ? ( this.state.signedParameters ? 'Please Sign the Transaction...' : 'Please Sign the Permit...' ) : 'Calculating transaction fees...'}\n                                />\n                              </Flex>\n                            ) : this.state.erc20ForwarderTx ? (\n                              <DashboardCard\n                                cardProps={{\n                                  p:3,\n                                  mt:3,\n                                  display:'flex',\n                                  alignItems:'center',\n                                  flexDirection:'column',\n                                  justifyContent:'center',\n                                }}\n                              >\n                                <Text\n                                  mb={2}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  The required fee to perform the {this.state.action} is <strong>{this.state.erc20ForwarderTx.cost} {this.props.selectedToken}</strong>\n                                </Text>\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <DashboardCard\n                                    cardProps={{\n                                      mx:2,\n                                      py:2,\n                                      px:[2,3],\n                                      width:0.40,\n                                      onMouseDown:() => {\n                                        this.executeAction()\n                                      }\n                                    }}\n                                    isInteractive={true}\n                                  >\n                                    <Flex\n                                      my={1}\n                                      alignItems={'center'}\n                                      flexDirection={'row'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Flex\n                                        mr={2}\n                                        alignItems={'center'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Icon\n                                          align={'center'}\n                                          color={'#00b84a'}\n                                          name={'CheckCircle'}\n                                          size={this.props.isMobile ? '1em' : '1.8em'}\n                                        />\n                                      </Flex>\n                                      <Text\n                                        fontWeight={3}\n                                        fontSize={[2,3]}\n                                      >\n                                        Confirm\n                                      </Text>\n                                    </Flex>\n                                  </DashboardCard>\n                                  <DashboardCard\n                                    cardProps={{\n                                      mx:2,\n                                      py:2,\n                                      px:[2,3],\n                                      width:0.40,\n                                      onMouseDown:() => {\n                                        this.cancelTransaction();\n                                      }\n                                    }}\n                                    isInteractive={true}\n                                  >\n                                    <Flex\n                                      my={1}\n                                      alignItems={'center'}\n                                      flexDirection={'row'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Flex\n                                        mr={2}\n                                        alignItems={'center'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Icon\n                                          name={'Cancel'}\n                                          align={'center'}\n                                          color={'#e13636'}\n                                          size={this.props.isMobile ? '1em' : '1.8em'}\n                                        />\n                                      </Flex>\n                                      <Text\n                                        fontWeight={3}\n                                        fontSize={[2,3]}\n                                      >\n                                        Decline\n                                      </Text>\n                                    </Flex>\n                                  </DashboardCard>\n                                </Flex>\n                              </DashboardCard>\n                            ) : (\n                              <Flex\n                                mt={3}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <TxProgressBar\n                                  {...this.props}\n                                  cancelTransaction={this.cancelTransaction.bind(this)}\n                                  hash={this.state.processing[this.state.action].txHash}\n                                  endMessage={`Finalizing ${this.state.action} request...`}\n                                  waitText={`${this.functionsUtil.capitalize(this.state.action)} estimated in`}\n                                />\n                              </Flex>\n                            )\n                          )\n                        }\n                      </Box>\n                    )\n                  ) : (\n                    <Flex\n                      mt={4}\n                      flexDirection={'column'}\n                    >\n                      <FlexLoader\n                        flexProps={{\n                          flexDirection:'row'\n                        }}\n                        loaderProps={{\n                          size:'30px'\n                        }}\n                        textProps={{\n                          ml:2\n                        }}\n                        text={'Loading asset info...'}\n                      />\n                    </Flex>\n                  )\n                }\n              </Migrate>\n            )\n          }\n        </Flex>\n        {\n          /*\n          showDepositCurve && this.state.depositCurveEnabled ? (\n            <CurveDeposit\n              {...this.props}\n            />\n          ) :\n          */\n          showRedeemCurve && this.state.redeemCurveEnabled && (\n            <Box\n              mt={3}\n              width={1}\n            >\n              <CurveRedeem\n                {...this.props}\n              />\n            </Box>\n          )\n        }\n        {\n          showBuyFlow &&\n            <Flex\n              mt={3}\n              width={[1,0.5]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <BuyModal\n                {...this.props}\n                showInline={true}\n                availableMethods={[]}\n                buyToken={this.props.selectedToken}\n              />\n            </Flex>\n        }\n\n        <ShareModal\n          confettiEnabled={true}\n          icon={`images/medal.svg`}\n          title={`Congratulations!`}\n          account={this.props.account}\n          closeModal={this.resetModal}\n          tokenName={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'share'}\n          text={`You have successfully deposited in Idle!<br />Enjoy <strong>${this.state.tokenAPY}% APY</strong> on your <strong>${this.props.selectedToken}</strong>!`}\n          tweet={`I'm earning ${this.state.tokenAPY}% APY on my ${this.props.selectedToken} with @idlefinance! Go to ${this.functionsUtil.getGlobalConfig(['baseURL'])} and start earning now from your idle tokens!`}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default DepositRedeem;\n","import theme from '../theme';\nimport { Bar } from '@nivo/bar';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Text, Input, Icon, Tooltip } from \"rimble-ui\";\n\nclass EstimatedEarnings extends Component {\n\n  state = {\n    chartData:null,\n    chartProps:null,\n    inputValue:1000,\n    maxInputValue:999999999999999\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    this.loadChart();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged){\n      this.loadChart();\n    }\n  }\n\n  async loadChart(){\n\n    const tokenApy = await this.functionsUtil.getTokenApy(this.props.tokenConfig);\n\n    if (!tokenApy){\n      return false;\n    }\n\n    const amount = this.functionsUtil.BNify(this.state.inputValue);\n    const earningsYear = amount.times(this.props.tokenApy.div(100));\n\n    const amountMonth = parseFloat(earningsYear.div(12));\n    const amount3Months = parseFloat(earningsYear.div(4));\n    const amount6Months = parseFloat(earningsYear.div(2));\n    const amountYear = parseFloat(earningsYear.div(1));\n\n    const chartData = [\n      {\n        perc:1/12,\n        label:'MONTH',\n        value:amountMonth,\n        month:amountMonth,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        monthColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:3/12,\n        label:'3 MONTHS',\n        value:amount3Months,\n        month3:amount3Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month3Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:6/12,\n        label:'6 MONTHS',\n        value:amount6Months,\n        month6:amount6Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month6Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:1,\n        label:'YEAR',\n        year:amountYear,\n        value:amountYear,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        yearColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      }\n    ];\n\n    let labelTextColorModifiers = this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'chart','labelTextColorModifiers']);\n\n    const maxGridLines = 4;\n    const gridYStep = amountYear/maxGridLines;\n    const gridYValues = [0];\n    for (let i=1;i<=maxGridLines;i++){\n      const gridYValue = i*gridYStep;\n      gridYValues.push(gridYValue);\n    }\n\n    const chartProps = {\n      padding: 0.2,\n      animate: false,\n      indexBy: 'label',\n      // enableLabel: false,\n      labelSkipWidth: 16,\n      labelSkipHeight: 16,\n      keys: ['month','month3','month6','year'],\n      colors: ({ id, data }) => data[`${id}Color`],\n      label: d => this.functionsUtil.abbreviateNumber(d.value,2,4)+' '+this.props.selectedToken,\n      labelTextColor: labelTextColorModifiers ? { from: 'color', modifiers: [ labelTextColorModifiers ] } : null,\n      isInteractive:false,\n      minValue:0,\n      gridYValues,\n      // maxValue:amountYear,\n      axisLeft:{\n        format: v => this.functionsUtil.abbreviateNumber(v,1,3),\n        tickValues:gridYValues,\n        orient: 'left',\n        tickSize: 0,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendPosition: 'middle'\n      },\n      axisBottom:{\n        legend: '',\n        tickSize:0,\n        tickPadding: 15,\n        orient: 'bottom',\n      },\n      theme:{\n        labels:{\n          text:{\n            fontSize:15,\n            fontWeight:600,\n            fill:theme.colors.counter,\n            fontFamily: theme.fonts.sansSerif\n          }\n        },\n        axis: {\n          ticks: {\n            text: {\n              fontSize:14,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '9 5'\n          }\n        },\n      },\n      margin: this.props.isMobile ? { top: 0, right: 0, bottom: 30, left: 0 } : { top: 10, right: 0, bottom: 50, left: 65 }\n    }\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  changeInputValue(e){\n    let inputValue = e.target.value.length && !isNaN(e.target.value) ? Math.min(this.state.maxInputValue,parseFloat(e.target.value)) : 0;\n    inputValue = this.functionsUtil.BNify(inputValue);\n    this.setState({\n      inputValue\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const showAPYDisclaimer = idleTokenEnabled && this.functionsUtil.getGlobalConfig(['govTokens','IDLE','showAPR']);\n\n    return (\n      <DashboardCard\n        cardProps={{\n          p:[3,4]\n        }}\n      >\n        <Flex\n          width={1}\n          flexDirection={['column','row']}\n        >\n          <Flex\n            width={[1,0.3]}\n            flexDirection={'column'}\n            justifyContent={'flex-start'}\n          >\n            <Flex\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <AssetField\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n                fieldInfo={{\n                  name:'icon',\n                  props:{\n                    mb:2,\n                    height:'2.5em'\n                  }\n                }}\n              />\n              <Text\n                fontSize={2}\n                color={'cellText'}\n                textAlign={'center'}\n              >\n                Set the amount and see your estimated earnings on time based on the current APY: { this.props.tokenApy ? `${this.props.tokenApy.toFixed(2)}%` : null}\n                {\n                  showAPYDisclaimer && \n                    <Flex\n                      style={{\n                        display:'inline-flex',\n                        verticalAlign:'middle'\n                      }}\n                    >\n                      <Tooltip\n                        placement={'top'}\n                        message={this.functionsUtil.getGlobalConfig(['messages','apyLong'])}\n                      >\n                        <Icon\n                          ml={1}\n                          name={\"Info\"}\n                          size={'1em'}\n                          color={'cellTitle'}\n                        />\n                      </Tooltip>\n                    </Flex>\n                }\n              </Text>\n            </Flex>\n            <Flex\n              mt={3}\n              flexDirection={'column'}\n            >\n              <Input\n                min={0}\n                type={\"number\"}\n                required={true}\n                borderRadius={2}\n                fontWeight={500}\n                textAlign={'center'}\n                height={['3em','3.4em']}\n                borderColor={'cardBorder'}\n                boxShadow={'none !important'}\n                max={this.state.maxInputValue}\n                backgroundColor={'cardBgHover'}\n                onChange={this.changeInputValue.bind(this)}\n                border={`1px solid ${theme.colors.divider}`}\n                placeholder={`Insert ${this.props.selectedToken.toUpperCase()} amount`}\n                value={this.state.inputValue && !isNaN(this.state.inputValue) ? this.state.inputValue : ''}\n              />\n            </Flex>\n            <Flex\n              mt={3}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                buttonProps={{\n                  width:[1,1/2],\n                }}\n                handleClick={this.loadChart.bind(this)}\n              >\n                CALCULATE\n              </RoundButton>\n            </Flex>\n          </Flex>\n          <Flex\n            mt={[3,0]}\n            width={[1,0.7]}\n            id={'estimated-earnings-chart'}\n          >\n            {\n              this.props.isMobile ? (\n                <Flex\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  {\n                    this.state.chartData !== null && this.state.chartData.map((v,index) => (\n                      <Flex\n                        py={2}\n                        my={2}\n                        width={1}\n                        flexDirection={'row'}\n                        key={`earnings_${index}`}\n                      >\n                        <Flex\n                          width={0.35}\n                          alignItems={'center'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            color={'legend'}\n                          >\n                            {v.label}\n                          </Text>\n                        </Flex>\n                        <Flex\n                          width={0.65}\n                          position={'relative'}\n                          alignItems={'center'}\n                          minHeight={['20px','35px']}\n                          justifyContent={'center'}\n                        >\n                          <Flex\n                            zIndex={1}\n                            position={'relative'}\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Text\n                              fontSize={1}\n                              fontWeight={3}\n                              color={'counter'}\n                            >\n                              {this.functionsUtil.abbreviateNumber(v.value,2,4)} {this.props.selectedToken}\n                            </Text>\n                          </Flex>\n                          <Flex\n                            right={0}\n                            width={v.perc}\n                            position={'absolute'}\n                            height={['20px','35px']}\n                            borderRadius={['20px 0 0 20px','35px 0 0 35px']}\n                            style={{background:`linear-gradient(-90deg, rgba(${v.color},0) 0%, rgba(${v.color},1) 100%)`}}\n                          ></Flex>\n                        </Flex>\n                      </Flex>\n                    ))\n                  }\n                </Flex>\n              ) : (\n                <GenericChart\n                  type={Bar}\n                  height={250}\n                  showLoader={true}\n                  {...this.state.chartProps}\n                  data={this.state.chartData}\n                  parentId={'estimated-earnings-chart'}\n                />\n              )\n            }\n          </Flex>\n        </Flex>\n      </DashboardCard>\n    );\n  }\n}\n\nexport default EstimatedEarnings;","import Title from '../Title/Title';\nimport { Box, Flex } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport AssetsList from '../AssetsList/AssetsList';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport FundsOverview from '../FundsOverview/FundsOverview';\nimport DepositRedeem from '../DepositRedeem/DepositRedeem';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport EstimatedEarnings from '../EstimatedEarnings/EstimatedEarnings';\n\nclass AssetPage extends Component {\n\n  state = {\n    tokenApy:{},\n    tokenFees:{},\n    tokenBalance:{},\n    tokenApproved:{},\n    activeModal:null,\n    idleTokenPrice:{},\n    govTokensBalance:{},\n    idleTokenBalance:{},\n    redeemableBalance:{},\n    govTokensDisabled:{},\n    availableGovTokens:{},\n    tokenFeesPercentage:{},\n    componentMounted:false,\n    govTokensUserBalances:{}\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadTokensInfo(){\n    if (this.props.account){\n      const newState = {...this.state};\n      await this.functionsUtil.asyncForEach(Object.keys(this.props.availableTokens),async (token) => {\n        const tokenConfig = this.props.availableTokens[token];\n        const govTokenAvailableTokens = {};\n        govTokenAvailableTokens[token] = tokenConfig;\n\n        const [\n          tokenFeesPercentage,\n          idleTokenPrice,\n          tokenApy,\n          tokenBalance,\n          tokenFees,\n          idleTokenBalance,\n          tokenApproved,\n          govTokensUserBalances,\n          govTokensBalance\n        ] = await Promise.all([\n          this.functionsUtil.getTokenFees(tokenConfig),\n          this.functionsUtil.getIdleTokenPrice(tokenConfig),\n          this.functionsUtil.getTokenApy(this.props.tokenConfig),\n          this.functionsUtil.getTokenBalance(token,this.props.account),\n          this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n          this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n          this.functionsUtil.checkTokenApproved(token,tokenConfig.idle.address,this.props.account),\n          this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,null,null),\n          this.functionsUtil.getGovTokensUserTotalBalance(this.props.account,govTokenAvailableTokens,'DAI',false)\n        ]);\n\n        newState.tokenFees[token] = tokenFees;\n        newState.tokenBalance[token] = tokenBalance;\n        newState.tokenApproved[token] = tokenApproved;\n        newState.idleTokenPrice[token] = idleTokenPrice;\n        newState.idleTokenBalance[token] = idleTokenBalance;\n        newState.govTokensBalance[token] = govTokensBalance;\n        newState.tokenFeesPercentage[token] = tokenFeesPercentage;\n        newState.govTokensUserBalances[token] = govTokensUserBalances;\n        newState.govTokensDisabled[token] = tokenConfig.govTokensDisabled;\n        newState.tokenApy[token] = tokenApy && !tokenApy.isNaN() ? tokenApy : null;\n        newState.redeemableBalance[token] = idleTokenBalance && idleTokenPrice ? idleTokenBalance.times(idleTokenPrice) : this.functionsUtil.BNify(0);\n      });\n\n      newState.availableGovTokens = this.functionsUtil.getTokenGovTokens(this.props.tokenConfig);\n\n      // console.log('govTokensBalance',newState.govTokensBalance);\n      // console.log('availableGovTokens',newState.availableGovTokens);\n      // console.log('govTokensUserBalances',newState.govTokensUserBalances);\n\n      newState.componentMounted = true;\n\n      this.setState(newState);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    const availableTokensChanged = JSON.stringify(prevProps.availableTokens) !== JSON.stringify(this.props.availableTokens);\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n    if (accountChanged || transactionsChanged || availableTokensChanged){\n      // console.log('AssetPage - availableTokensChanged',availableTokensChanged);\n      this.loadTokensInfo();\n    }\n  }\n\n  render() {\n\n    const userHasFunds = this.props.account && this.state.idleTokenBalance[this.props.selectedToken] && this.functionsUtil.BNify(this.state.idleTokenBalance[this.props.selectedToken]).gt(0);\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            <Breadcrumb\n              {...this.props}\n              isMobile={this.props.isMobile}\n              path={[this.props.selectedToken]}\n              handleClick={ e => this.props.goToSection(this.props.selectedStrategy) }\n              text={this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])}\n            />\n          </Flex>\n          <Flex\n            width={0.5}\n            justifyContent={'flex-end'}\n          >\n            <CardIconButton\n              icon={'Add'}\n              {...this.props}\n              text={'Add funds'}\n              handleClick={ e => this.setActiveModal('buy') }\n            />\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Deposit / Redeem\n        </Title>\n        <Flex\n          width={1}\n        >\n          <DepositRedeem\n            {...this.props}\n            tokenFees={this.state.tokenFees[this.props.selectedToken]}\n            tokenBalance={this.state.tokenBalance[this.props.selectedToken]}\n            tokenApproved={this.state.tokenApproved[this.props.selectedToken]}\n            govTokensBalance={this.state.govTokensBalance[this.props.selectedToken]}\n            idleTokenBalance={this.state.idleTokenBalance[this.props.selectedToken]}\n            redeemableBalance={this.state.redeemableBalance[this.props.selectedToken]}\n            tokenFeesPercentage={this.state.tokenFeesPercentage[this.props.selectedToken]}\n            govTokensUserBalances={this.state.govTokensUserBalances[this.props.selectedToken]}\n          />\n        </Flex>\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverview\n                {...this.props}\n                tokenFees={this.state.tokenFees[this.props.selectedToken]}\n              />\n            </Flex>\n        }\n        {\n          userHasFunds && this.props.account && !this.state.govTokensDisabled[this.props.selectedToken] && Object.keys(this.state.availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id={\"yield-farming\"}\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(this.state.availableGovTokens)}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.30,0.15]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    mobile:false,\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.25],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','govTokenRedeemableBalance']),\n                    props:{\n                      width:[0.35,0.30],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                    ]\n                  },\n                  {\n                    title:'DISTRIBUTION',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','userDistributionSpeed']),\n                    props:{\n                      width:[0.35,0.30],\n                    },\n                    fields:[\n                      {\n                        name:'userDistributionSpeed',\n                        props:{\n                          decimals:6\n                        }\n                      }\n                    ]\n                  },\n                  /*\n                  {\n                    title:'APR',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','govTokenApr']),\n                    props:{\n                      width:[0.2,0.17],\n                    },\n                    fields:[\n                      {\n                        name:'apr',\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','tokenPrice']),\n                    mobile:false,\n                    props:{\n                      width: 0.17,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                  */\n                ]}\n                {...this.props}\n                availableTokens={this.state.availableGovTokens}\n              />\n            </Flex>\n        }\n        {\n        this.props.account && this.state.tokenApy[this.props.selectedToken] && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'estimated-earnings-container'}\n          >\n            <Title my={[3,4]}>Estimated earnings</Title>\n            <EstimatedEarnings\n              {...this.props}\n              tokenApy={this.state.tokenApy[this.props.selectedToken]}\n            />\n          </Flex>\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              enabledTokens={[this.props.selectedToken]}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport { Text, Modal, Flex, Link } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass BetaModal extends React.Component {\n\n  state = {};\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    this.functionsUtil.setLocalStorage('betaApproved',true);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','650px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            pt={3}\n            iconHeight={'40px'}\n            title={'Beta Version'}\n            icon={'images/warning.svg'}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                fontSize={2}\n                textAlign={'left'}\n                color={'dark-gray'}\n              >\n                You're about to enter Idle Finance Beta Dashboard – this is the place where several un-audited and risky features are being tested!<br />Please use at your own risk, or visit the official website at <Link fontSize={2} mainColor={'primary'} hoverColor={'primary'} href={this.functionsUtil.getGlobalConfig(['baseURL'])}>{this.functionsUtil.getGlobalConfig(['baseURL'])}</Link>.\n              </Text>\n            </Flex>\n            <Flex\n              my={3}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                handleClick={this.closeModal}\n                buttonProps={{\n                  width:['100%','40%']\n                }}\n              >\n                Continue Anyway\n              </RoundButton>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default BetaModal;","import React, { Component } from 'react';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Box, Text, Icon, Tooltip, Link, Input } from \"rimble-ui\";\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\n\nclass CurveDeposit extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    depositSlippage:null,\n    redeemableBalance:null,\n    migrationContract:null,\n    curveTokensBalance:null,\n    migrationSucceeded:false,\n    fastBalanceSelector:null,\n    migrationContractApproved:false,\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    await this.initToken();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const idleTokenBalanceChanged = prevProps.idleTokenBalance !== this.props.idleTokenBalance;\n    if (accountChanged || idleTokenBalanceChanged){\n      await this.initToken();\n    }\n    \n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const inputValueChanged = this.state.inputValue !== prevState.inputValue;\n    if (inputValueChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  setInputValue = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    const inputValue = this.props.idleTokenBalance ? this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage) : null;\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    const buttonDisabled = !amount || amount.gt(this.state.idleTokenBalance);\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  approve = async () => {\n    const migrationContract = this.state.migrationContract;\n    if (migrationContract){\n\n      // Check if the migration contract is approved\n      const migrationContractApproved = await this.checkMigrationContractApproved();\n\n      if (!migrationContractApproved){\n\n        const callbackApprove = (tx,error) => {\n          // Send Google Analytics event\n          const eventData = {\n            eventAction: 'approve',\n            eventCategory: 'CurveDeposit',\n            eventLabel: tx ? tx.status : null\n          };\n\n          const txSucceeded = tx && tx.status === 'success';\n\n          // console.log('callbackApprove',tx,error);\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            migrationContractApproved: txSucceeded, // True\n            processing: {\n              ...prevState.processing,\n              txHash:null,\n              loading:false\n            }\n          }));\n\n          if (typeof this.props.callbackApprove === 'function' && txSucceeded){\n            this.props.callbackApprove(tx);\n          }\n\n          this.checkMigration();\n        };\n\n        const callbackReceiptApprove = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              txHash\n            }\n          }));\n        };\n\n        this.functionsUtil.enableERC20(this.props.selectedToken,migrationContract.address,callbackApprove,callbackReceiptApprove);\n\n        this.setState((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            txHash:null,\n            loading:true\n          },\n          migrationContractApproved:false\n        }));\n      } else {\n        this.setState({\n          migrationContractApproved:true\n        });\n      }\n    }\n  }\n\n  deposit = async () => {\n\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    if (!inputValue){\n      return false;\n    }\n\n    const callbackDeposit = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveDeposit`,\n        eventAction: this.props.selectedToken,\n        eventValue: inputValue.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackDeposit === 'function' && txSucceeded){\n        this.props.callbackDeposit(tx);\n      }\n    };\n\n    const callbackReceiptDeposit = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.migrationContract.name;\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n    const depositParams = await this.getMigrationParams(_amount);\n\n    this.props.contractMethodSendWrapper(contractName, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  cancelTransaction = async () => {\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  async getMigrationParams(toMigrate){\n    const migrationParams = [];\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.selectedToken]);\n\n    if (!curveTokenConfig){\n      return false;\n    }\n    \n    const migrationContractParams = curveTokenConfig.migrationParams;\n    if (migrationContractParams.n_coins){\n      const amounts = await this.functionsUtil.getCurveAmounts(this.props.selectedToken,toMigrate,true);\n      let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n\n      if (this.state.maxSlippage){\n        minMintAmount = this.functionsUtil.BNify(minMintAmount);\n        minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n        minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n      }\n\n      migrationParams.push(amounts);\n      migrationParams.push(minMintAmount);\n    }\n\n    return migrationParams;\n  }\n\n  async calculateSlippage(){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (inputValue){\n      let underlyingBalanceToDeposit = inputValue;\n      if (underlyingBalanceToDeposit){\n        const idleTokenPrice = await this.functionsUtil.getIdleTokenPrice(this.props.tokenConfig);\n        if (idleTokenPrice){\n          underlyingBalanceToDeposit = underlyingBalanceToDeposit.times(idleTokenPrice);\n        }\n      } else {\n        underlyingBalanceToDeposit = this.functionsUtil.BNify(0);\n      }\n\n      const normalizeIdleTokenBalance = this.functionsUtil.normalizeTokenAmount(underlyingBalanceToDeposit,this.props.tokenConfig.decimals);\n      let depositSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizeIdleTokenBalance);\n      if (depositSlippage){\n        depositSlippage = depositSlippage.times(100);\n      }\n\n      this.setState({\n        depositSlippage\n      });\n    }\n  }\n\n  async checkMigrationContractApproved(){\n    const migrationContract = this.state.migrationContract || await this.functionsUtil.getCurveSwapContract();\n    if (migrationContract){\n      return await this.functionsUtil.checkTokenApproved(this.props.tokenConfig.idle.token,migrationContract.address,this.props.account);\n    }\n    return false;\n  }\n\n  async initToken(){\n\n    // Init and check migration contract\n    const migrationContract = await this.functionsUtil.getCurveSwapContract();\n    const migrationContractApproved = await this.checkMigrationContractApproved();\n\n    this.setState({\n      migrationContract,\n      migrationContractApproved\n    });\n  }\n\n  approveCallback = () => {\n    this.initToken();\n  }\n\n  migrationCallback = () => {\n    this.setState({\n      migrationSucceeded:true\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken){\n      return null;\n    }\n\n    // const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const hasCurveTokens = this.state.curveTokensBalance && this.state.curveTokensBalance.gt(0);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n            {\n              this.props.idleTokenBalance && this.props.idleTokenBalance.gt(0) && (\n                <Box\n                  width={1}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:3,\n                      px:[2,4]\n                    }}\n                  >\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    > \n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ this.state.migrationContractApproved ? 'CheckBox' : 'LooksOne'}\n                          color={ this.state.migrationContractApproved ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Approve the Curve contract\n                        </Text>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ hasCurveTokens ? 'CheckBox' : 'LooksTwo'}\n                          color={ hasCurveTokens ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Deposit your {this.props.tokenConfig.idle.token}\n                        </Text>\n                      </Flex>\n                    </Flex>\n                  </DashboardCard>\n                  {\n                    !this.state.migrationContractApproved ?\n                      this.state.processing.loading ? (\n                        <Flex\n                          mt={3}\n                          flexDirection={'column'}\n                        >\n                          <TxProgressBar\n                            web3={this.props.web3}\n                            waitText={`Approve estimated in`}\n                            hash={this.state.processing.txHash}\n                            endMessage={`Finalizing approve request...`}\n                            cancelTransaction={this.cancelTransaction.bind(this)}\n                          />\n                        </Flex>\n                      ) : (\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            mt:3,\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                          >\n                            <Icon\n                              size={'2.3em'}\n                              name={'LockOpen'}\n                              color={'cellText'}\n                            />\n                            <Text\n                              mt={1}\n                              fontSize={2}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              To deposit your {this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.\n                            </Text>\n                            <RoundButton\n                              buttonProps={{\n                                mt:3,\n                                width:[1,1/2]\n                              }}\n                              handleClick={this.approve.bind(this)}\n                            >\n                              Approve\n                            </RoundButton>\n                          </Flex>\n                        </DashboardCard>\n                      )\n                    : this.state.processing.loading ? (\n                      <Flex\n                        mt={3}\n                        flexDirection={'column'}\n                      >\n                        <TxProgressBar\n                          web3={this.props.web3}\n                          waitText={`Deposit estimated in`}\n                          hash={this.state.processing.txHash}\n                          endMessage={`Finalizing deposit request...`}\n                          cancelTransaction={this.cancelTransaction.bind(this)}\n                        />\n                      </Flex>\n                    ) : (\n                      <Box\n                        mt={2}\n                        width={1}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text>\n                            Choose max slippage:\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={`Max additional slippage on top of the one shown below`}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                          justifyContent={'space-between'}\n                        >\n                          {\n                            [0.2,0.5,1,5].map( slippage => (\n                              <FastBalanceSelector\n                                cardProps={{\n                                  p:1\n                                }}\n                                textProps={{\n                                  fontSize:1\n                                }}\n                                percentage={slippage}\n                                key={`selector_${slippage}`}\n                                onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                isActive={this.state.maxSlippage === parseFloat(slippage)}\n                              />\n                            ))\n                          }\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                        >\n                          <Flex\n                            mb={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={this.state.depositSlippage ? 'space-between' : 'flex-end'}\n                          >\n                            {\n                              this.state.depositSlippage && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    textAlign={'right'}\n                                    style={{\n                                      whiteSpace:'nowrap'\n                                    }}\n                                    color={ parseFloat(this.state.depositSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                  >\n                                    {\n                                      parseFloat(this.state.depositSlippage.toFixed(3)) === 0 ?\n                                        'No Slippage'\n                                      : `${ this.state.depositSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositSlippage.abs().toFixed(3)}%`\n                                    }\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.state.depositSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              )\n                            }\n                            {\n                              this.props.idleTokenBalance && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'flex-end'}\n                                >\n                                  <Link\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'right'}\n                                    hoverColor={'copyColor'}\n                                    onClick={ (e) => this.setFastBalanceSelector(100) }\n                                    style={{\n                                      maxWidth:'100%',\n                                      overflow:'hidden',\n                                      whiteSpace:'nowrap',\n                                      textOverflow:'ellipsis'\n                                    }}\n                                  >\n                                    {this.props.idleTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {this.props.selectedToken}\n                                  </Link>\n                                </Flex>\n                              )\n                            }\n                          </Flex>\n                          <Input\n                            min={0}\n                            type={\"number\"}\n                            required={true}\n                            height={'3.4em'}\n                            borderRadius={2}\n                            fontWeight={500}\n                            boxShadow={'none !important'}\n                            placeholder={`Insert amount`}\n                            onChange={this.changeInputValue.bind(this)}\n                            border={`1px solid ${this.props.theme.colors.divider}`}\n                            value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                          />\n                          <Flex\n                            mt={2}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'space-between'}\n                          >\n                            {\n                              [25,50,75,100].map( percentage => (\n                                <FastBalanceSelector\n                                  percentage={percentage}\n                                  key={`selector_${percentage}`}\n                                  onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                  isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                                />\n                              ))\n                            }\n                          </Flex>\n                          <Flex\n                            mt={2}\n                            justifyContent={'center'}\n                          >\n                            <RoundButton\n                              buttonProps={{\n                                mt:2,\n                                width:[1,1/2],\n                                disabled:this.state.buttonDisabled\n                              }}\n                              handleClick={this.deposit.bind(this)}\n                            >\n                              Deposit\n                            </RoundButton>\n                          </Flex>\n                        </Flex>\n                      </Box>\n                    )\n                  }\n                </Box>\n              )\n            }\n          {\n            /*\n            this.state.tokenConfig && this.state.redeemableBalance ? (\n              <Box width={1}>\n                <Migrate\n                  {...this.props}\n                  showActions={false}\n                  getTokenPrice={false}\n                  migrationTextProps={{\n                    fontWeight:500\n                  }}\n                  isMigrationTool={true}\n                  migrationImage={{\n                    mb:1,\n                    height:'1.8em',\n                    src:curveConfig.params.image\n                  }}\n                  showBalanceSelector={true}\n                  waitText={'Deposit estimated in'}\n                  tokenConfig={this.state.tokenConfig}\n                  callbackApprove={this.approveCallback.bind(this)}\n                  migrationParams={this.getMigrationParams.bind(this)}\n                  migrationCallback={this.migrationCallback.bind(this)}\n                  approveText={`To deposit your ${this.props.tokenConfig.idle.token} you need to approve Curve smart-contract first.`}\n                  migrationText={`You can deposit ${this.state.redeemableBalance.toFixed(4)} ${this.props.tokenConfig.idle.token} in the Curve Pool${ this.state.depositSlippage ? (this.state.depositSlippage.gte(0) ? ` with <span style=\"color:${this.props.theme.colors.transactions.status.failed}\">${this.state.depositSlippage.times(100).toFixed(2)}% of slippage</span>` : ` with <span style=\"color:${this.props.theme.colors.transactions.status.completed}\">${Math.abs(parseFloat(this.state.depositSlippage.times(100).toFixed(2)))}% of bonus</span>`) : '' }.`}\n                >\n                  {\n                    !this.props.account ? (\n                      <DashboardCard\n                        cardProps={{\n                          p:3,\n                          mt:3\n                        }}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                        >\n                          <Icon\n                            size={'2.3em'}\n                            name={'Input'}\n                            color={'cellText'}\n                          />\n                          <Text\n                            mt={2}\n                            fontSize={2}\n                            color={'cellText'}\n                            textAlign={'center'}\n                          >\n                            Please connect with your wallet interact with Idle.\n                          </Text>\n                          <RoundButton\n                            buttonProps={{\n                              mt:2,\n                              width:[1,1/2]\n                            }}\n                            handleClick={this.props.connectAndValidateAccount}\n                          >\n                            Connect\n                          </RoundButton>\n                        </Flex>\n                      </DashboardCard>\n                    ) : (\n                      <DashboardCard\n                        cardProps={{\n                          p:3\n                        }}\n                      >\n                        {\n                          this.state.migrationSucceeded ? (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'DoneAll'}\n                                color={this.props.theme.colors.transactions.status.completed}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You have successfully deposited your {this.props.tokenConfig.idle.token} in the Curve Pool!\n                              </Text>\n                            </Flex>\n                          ) : (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'MoneyOff'}\n                                color={'cellText'}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You don't have any {this.props.tokenConfig.idle.token} in your wallet.\n                              </Text>\n                            </Flex>\n                          )\n                        }\n                      </DashboardCard>\n                    )\n                  }\n                </Migrate>\n              </Box>\n            ) : null\n            */\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveDeposit;","import theme from '../theme';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\n// import { linearGradientDef } from '@nivo/core'\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport ChartCustomTooltip from '../ChartCustomTooltip/ChartCustomTooltip';\nimport ChartCustomTooltipRow from '../ChartCustomTooltipRow/ChartCustomTooltipRow';\n\nclass PortfolioEquityCurve extends Component {\n  state = {\n    startDate:null,\n    chartData:null,\n    chartProps:null,\n    chartwidth:null,\n    chartHeight:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentDidMount(){\n    this.loadUtils();\n    this.loadChartData();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n\n    const quickDateSelectionChanged = prevProps.quickDateSelection !== this.props.quickDateSelection;\n    const tokenChanged = JSON.stringify(prevProps.enabledTokens) !== JSON.stringify(this.props.enabledTokens);\n    if (tokenChanged || quickDateSelectionChanged){\n      this.setState({\n        chartData:null\n      },() => {\n        this.componentDidMount();\n      });\n    }\n\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n    if (mobileChanged){\n      this.loadChartData();\n    }\n  }\n\n  async loadChartData() {\n\n    let enabledTokens = this.props.enabledTokens;\n    if (!enabledTokens || !enabledTokens.length){\n      enabledTokens = Object.keys(this.props.availableTokens);\n    }\n\n    const curveTxs = await this.functionsUtil.getCurveTxs(this.props.account,0,'latest',enabledTokens);\n\n    const chartData = [];\n    let tokensBalance = [];\n    const processedTxs = {};\n    let firstTxTimestamp = null;\n    let totalBalance = this.functionsUtil.BNify(0);\n    const curvePoolContract = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    if (curveTxs && curveTxs.length){\n\n      curveTxs.forEach((tx,index) => {\n\n        if (!processedTxs[tx.hash]){\n          processedTxs[tx.hash] = [];\n        }\n\n        if (processedTxs[tx.hash].includes(tx.action)){\n          return;\n        }\n        \n        firstTxTimestamp = firstTxTimestamp ? Math.min(firstTxTimestamp,parseInt(tx.timeStamp)) : parseInt(tx.timeStamp);\n\n        const curveTokens = this.functionsUtil.BNify(tx.curveTokens);\n\n        switch (tx.action){\n          case 'CurveIn':\n          case 'CurveZapIn':\n          case 'CurveDepositIn':\n          case 'CurveTransferIn':\n            totalBalance = totalBalance.plus(curveTokens);\n          break;\n          case 'CurveOut':\n          case 'CurveZapOut':\n          case 'CurveDepositOut':\n          case 'CurveTransferOut':\n            totalBalance = totalBalance.minus(curveTokens);\n          break;\n          default:\n          break;\n        }\n\n        // Reset totalBalance if below zero\n        if (totalBalance.lt(0)){\n          totalBalance = this.functionsUtil.BNify(0);\n        }\n\n        const action = tx.action;\n        const balance = totalBalance;\n        const timeStamp = parseInt(tx.timeStamp);\n        const curveTokenPrice = this.functionsUtil.fixTokenDecimals(tx.curveTokenPrice,curvePoolContract.decimals);\n\n        // console.log(this.functionsUtil.strToMoment(timeStamp*1000).format('YYYY/MM/DD HH:mm'),tx.hash,tx.action,curveTokens.toString(),totalBalance.toString());\n\n        if (!curveTokenPrice.isNaN() && !curveTokenPrice.isNaN()){\n          tokensBalance.push({\n            action,\n            balance,\n            timeStamp,\n            curveTokens,\n            curveTokenPrice\n          });\n\n          processedTxs[tx.hash].push(action);\n        }\n      });\n    }\n\n    // Calculate Start Date\n    let startDate = null;\n    const currentDate = this.functionsUtil.strToMoment(new Date());\n\n    switch (this.props.quickDateSelection){\n      case 'week':\n        startDate = currentDate.clone().subtract(1,'week');\n      break;\n      case 'month':\n        startDate = currentDate.clone().subtract(1,'month');\n      break;\n      case 'month3':\n        startDate = currentDate.clone().subtract(3,'month');\n      break;\n      case 'month6':\n        startDate = currentDate.clone().subtract(6,'month');\n      break;\n      default:\n        startDate = null;\n      break;\n    }\n\n    const days = {};\n    let prevBalances = {};\n    let prevTimestamp = null;\n    let minChartValue = null;\n    let maxChartValue = null;\n    const aggregatedBalancesKeys = {};\n    const tokensBalancesPerDate = {};\n    let aggregatedBalance = this.functionsUtil.BNify(0);\n    // let curveTokenBalance = this.functionsUtil.BNify(0);\n    const currTimestamp = parseInt(new Date().getTime()/1000)+86400;\n\n    const tokensData = await this.functionsUtil.getTokenApiData(Object.values(this.props.availableTokens)[0].address,false,firstTxTimestamp,null,false,3600);\n\n    for (let timeStamp=firstTxTimestamp;timeStamp<=currTimestamp;timeStamp+=this.props.frequencySeconds){\n\n      let foundBalances = {};\n      let tokensBalances = {};\n      timeStamp = Math.min(currTimestamp,timeStamp);\n      let momentDate = this.functionsUtil.strToMoment(timeStamp*1000);\n\n      // eslint-disable-next-line\n      const filteredTokenData = tokensData.filter(tx => (tx.timestamp>=prevTimestamp && tx.timestamp<=timeStamp));\n\n      // eslint-disable-next-line\n      let filteredBalances = tokensBalance.filter(tx => (tx.timeStamp<=timeStamp && (!prevTimestamp || tx.timeStamp>prevTimestamp)));\n      \n      if (!filteredBalances.length){\n        if (prevBalances){\n          filteredBalances = prevBalances;\n          const lastFilteredTx = Object.values(filteredBalances).pop();\n          const currentBalance = parseFloat(lastFilteredTx.balance);\n\n          const lastTokenData = Object.values(filteredTokenData).pop();\n          let curveTokenPrice = null;\n          if (lastTokenData){\n            curveTokenPrice = await this.functionsUtil.getCurveTokenPrice(lastTokenData.blocknumber);\n          }\n\n          // Take idleToken price from API and calculate new balance\n          if (currentBalance>0 && timeStamp>firstTxTimestamp && curveTokenPrice){\n            // Set new curveTokenPrice\n            lastFilteredTx.curveTokenPrice = curveTokenPrice;\n            filteredBalances = [lastFilteredTx];\n          }\n        } else {\n          filteredBalances = [{\n            balance:this.functionsUtil.BNify(0),\n            curveTokenPrice:this.functionsUtil.BNify(0)\n          }];\n        }\n      }\n\n      const lastTx = Object.assign([],filteredBalances).pop();\n      let lastTxBalance = this.functionsUtil.BNify(lastTx.balance).times(lastTx.curveTokenPrice);\n\n      tokensBalances[curvePoolContract.token] = this.functionsUtil.BNify(lastTx.balance);\n      aggregatedBalance = lastTxBalance;\n\n      foundBalances = filteredBalances;\n\n      // console.log(momentDate.format('YYYY/MM/DD 00:00'),lastTx.balance.toString(),lastTx.curveTokenPrice.toString(),lastTxBalance.toString());\n\n      if (startDate === null || momentDate.isSameOrAfter(startDate)){\n        \n        if (momentDate.isAfter(new Date(),'day')){\n          momentDate = this.functionsUtil.strToMoment(new Date());\n        }\n\n        // Force date to midnight\n        const formattedDate = momentDate.format('YYYY/MM/DD 00:00');\n\n        // Save days for axisBottom format\n        days[momentDate.format('YYYY/MM/DD')] = 1;\n\n        const aggregatedBalanceParsed = parseFloat(parseFloat(aggregatedBalance.toFixed(6)));\n\n        aggregatedBalancesKeys[formattedDate] = aggregatedBalanceParsed;\n        tokensBalancesPerDate[formattedDate] = tokensBalances;\n\n        // console.log(formattedDate,tokensBalances);\n\n        minChartValue = minChartValue === null ? aggregatedBalanceParsed : Math.min(minChartValue,aggregatedBalanceParsed);\n        maxChartValue = maxChartValue === null ? aggregatedBalanceParsed : Math.max(maxChartValue,aggregatedBalanceParsed);\n      }\n\n      prevTimestamp = timeStamp;\n      prevBalances = foundBalances;\n    }\n\n    const aggregatedBalances = Object.keys(aggregatedBalancesKeys).map(date => ({\n      x:date,\n      y:aggregatedBalancesKeys[date],\n      balances:tokensBalancesPerDate[date]\n    }));\n\n    let itemIndex = 0;\n    aggregatedBalances.forEach( (item,index) => {\n      const itemPos = Math.floor(itemIndex/aggregatedBalances.length*100);\n      aggregatedBalances[index].itemPos = itemPos;\n      itemIndex++;\n    });\n\n    /*\n    aggregatedBalances.push({\n      x:momentDate.format('YYYY/MM/DD HH:mm'),\n      y:aggregatedBalance\n    });\n    */\n\n    // Add day before to start with zero balance\n    /*\n    const firstTxMomentDate = this.functionsUtil.strToMoment(firstTxTimestamp*1000);\n    if ((startDate === null || startDate.isSameOrBefore(firstTxMomentDate)) && aggregatedBalances.length){\n      const firstItem = aggregatedBalances[0];\n      const firstDate = this.functionsUtil.strToMoment(firstItem.x,'YYYY/MM/DD HH:mm');\n      firstDate.subtract(1,'day');\n      aggregatedBalances.unshift({\n        x:firstDate.format('YYYY/MM/DD HH:mm'),\n        y:0\n      });\n    }\n    */\n\n    // Add token Data\n    chartData.push({\n      id:'USD',\n      color: 'hsl('+ this.functionsUtil.getGlobalConfig(['stats','tokens','USD','color','hsl']).join(',')+')',\n      data:aggregatedBalances\n    });\n\n    let yFormatDecimals = 2;\n    if (maxChartValue-minChartValue<1){\n      yFormatDecimals = 4;\n    }\n\n    if (maxChartValue === minChartValue){\n      minChartValue = Math.max(0,maxChartValue-1);\n    }\n\n    const maxGridLines = 5;\n    const gridYStep = (maxChartValue-minChartValue)/maxGridLines;\n    const gridYValues = [];\n    for (let i=0;i<=maxGridLines;i++){\n      const gridYValue = parseFloat(parseFloat(minChartValue+(i*gridYStep)).toFixed(6));\n      gridYValues.push(gridYValue);\n    }\n    \n    const axisBottomMaxValues = 10;\n    const daysCount = Object.values(days).length;    \n    const daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n    const chartProps = {\n      xScale:{\n        type: 'time',\n        format: '%Y/%m/%d %H:%M',\n      },\n      yScale:{\n        type: 'linear',\n        stacked: false,\n        min: minChartValue,\n        max: maxChartValue\n      },\n      xFormat:'time:%b %d %Y',\n      yFormat:value => this.functionsUtil.formatMoney(value,yFormatDecimals),\n      axisBottom: this.props.isMobile ? null : {\n        legend: '',\n        tickSize:0,\n        format: '%b %d',\n        tickPadding: 15,\n        orient: 'bottom',\n        legendOffset: 36,\n        legendPosition: 'middle',\n        tickValues:'every '+daysFrequency+' days'\n      },\n      gridYValues,\n      pointSize:0,\n      useMesh:true,\n      axisLeft: this.props.isMobile ? null : {\n        legend: '',\n        tickSize: 0,\n        orient: 'left',\n        tickPadding: 10,\n        tickRotation: 0,\n        legendOffset: -70,\n        tickValues:gridYValues,\n        legendPosition: 'middle',\n        format: v => this.functionsUtil.abbreviateNumber(v,2),\n      },\n      animate:true,\n      pointLabel:'y',\n      areaOpacity:0.1,\n      enableArea:true,\n      enableSlices:'x',\n      enableGridY:true,\n      curve:'monotoneX',\n      enableGridX:false,\n      pointBorderWidth:1,\n      colors:d => d.color,\n      pointLabelYOffset:-12,\n      areaBaselineValue:minChartValue,\n      pointColor:{ from: 'color', modifiers: []},\n      theme:{\n        axis: {\n          ticks: {\n            text: {\n              fontSize:12,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '8 4'\n          }\n        },\n      },\n      /*\n      defs:[\n        linearGradientDef('gradientA', [\n          { offset: 0, color: 'inherit' },\n          { offset: 100, color: 'inherit', opacity: 0 },\n        ]),\n      ],\n      fill:[{ match: '*', id: 'gradientA' }],\n      */\n      margin: this.props.isMobile ? { top: 20, right: 25, bottom: 25, left: 20 } : { top: 30, right: 50, bottom: 45, left: 50 },\n      sliceTooltip:(slideData) => {\n        const { slice } = slideData;\n        const point = slice.points[0];\n        return (\n          <ChartCustomTooltip\n            point={point}\n          >\n            <ChartCustomTooltipRow\n              color={point.color}\n              label={point.serieId}\n              value={`$ ${point.data.yFormatted}`}\n            />\n            {\n            typeof point.data.balances === 'object' && Object.keys(point.data.balances).length>0 &&\n              Object.keys(point.data.balances).map(token => {\n                if (token === point.serieId){\n                  return null;\n                }\n                const tokenInfo = this.functionsUtil.getGlobalConfig(['stats','tokens',token]);\n                if (tokenInfo){\n                  const tokenName = tokenInfo.name ? tokenInfo.name : token;\n                  const color = tokenInfo.color.hex;\n                  const balance = point.data.balances[token];\n                  let formattedBalance = this.functionsUtil.formatMoney(balance,2);\n                  if (parseFloat(balance)>=0.01){\n                    return (\n                      <ChartCustomTooltipRow\n                        label={tokenName}\n                        color={color}\n                        key={`row_${token}`}\n                        value={`${formattedBalance}`}\n                      />\n                    );\n                  }\n                }\n                return null;\n              })\n            }\n          </ChartCustomTooltip>\n        );\n      }\n    };\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  render() {\n    return (\n      <GenericChart\n        type={Line}\n        showLoader={true}\n        {...this.state.chartProps}\n        data={this.state.chartData}\n        parentId={this.props.parentId}\n        height={this.props.chartHeight}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default PortfolioEquityCurve;","import theme from '../theme';\nimport Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport { Flex, Heading, Text } from \"rimble-ui\";\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport PortfolioEquityCurve from '../PortfolioEquityCurve/PortfolioEquityCurve';\n\nclass FundsOverviewCurve extends Component {\n\n  state = {\n    compAPR:null,\n    aggregatedValues:[],\n    govTokensUserBalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    await this.functionsUtil.getCurveAvgBuyPrice();\n\n    // debugger;\n\n    await this.functionsUtil.getCurveAvgSlippage();\n\n    // debugger;\n    /*\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const [govTokensUserBalance,avgAPY,days] = await Promise.all([\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,'DAI'),\n      this.functionsUtil.loadAssetField('avgAPY',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '-') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    let [tokenAllocation,compAPR] = await Promise.all([\n      this.functionsUtil.getTokenAllocation(this.props.tokenConfig,false,false),\n      this.functionsUtil.getCompAPR(this.props.selectedToken,this.props.tokenConfig)\n    ]);\n\n    if (tokenAllocation){\n      const compoundInfo = this.props.tokenConfig.protocols.find( p => (p.name === 'compound') );\n      if (compoundInfo){\n        if (tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()]){\n          const compoundAllocationPerc = tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()];\n          compAPR = compAPR.times(compoundAllocationPerc);\n        }\n      }\n    }\n\n    this.setState({\n      compAPR,\n      aggregatedValues,\n      govTokensUserBalance\n    });\n    */\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Text\n                          mt={2}\n                          fontWeight={2}\n                          fontSize={[1,2]}\n                          color={'cellText'}\n                        >\n                          {v.props.title}\n                        </Text>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquityCurve\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLentCurve',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPercCurve',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            {\n              /*\n              <Flex\n                mb={[2,0]}\n                width={[1,1/5]}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'flex-start'}\n              >\n                <Title\n                  mb={2}\n                  fontSize={[3,4]}\n                  component={Heading.h3}\n                >\n                  Fees\n                </Title>\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'feesCounter',\n                    props:{\n                      decimals:7,\n                      maxPrecision:8,\n                      style:{\n                        fontWeight:300,\n                        fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                        color:theme.colors.counter\n                      },\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n              */\n            }\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveApy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Avg Slippage\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveAvgSlippage',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverviewCurve;","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport { Box, Flex, Text, Icon } from \"rimble-ui\";\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport CurveDeposit from '../CurveDeposit/CurveDeposit';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport TransactionField from '../TransactionField/TransactionField';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport FundsOverviewCurve from '../FundsOverviewCurve/FundsOverviewCurve';\n\nclass AssetPage extends Component {\n\n  state = {\n    inputValue:{},\n    processing:{},\n    tokenFees:null,\n    canRedeem:null,\n    canDeposit:null,\n    action:'deposit',\n    activeModal:null,\n    tokenConfig:null,\n    tokenBalance:null,\n    tokenApproved:null,\n    selectedToken:null,\n    availableTokens:{},\n    redeemBalance:null,\n    depositBalance:null,\n    buttonDisabled:false,\n    curveTokenPrice:null,\n    depositSlippage:null,\n    idleTokenBalance:null,\n    withdrawSlippage:null,\n    govTokensBalance:null,\n    curveZapContract:null,\n    curveTokenConfig:null,\n    curveTokensAmounts:{},\n    govTokensDisabled:null,\n    componentMounted:false,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    redeemableBalance:null,\n    fastBalanceSelector:{},\n    curveAvailableTokens:{},\n    tokenFeesPercentage:null,\n    redeemUnevenAmounts:false,\n    curveDepositContract:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  changeFromToken = (selectedToken) => {\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    this.props.goToSection(`${curveConfig.params.route}/${selectedToken}`);\n  }\n\n  getSelectedToken(){\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    return this.props.urlParams.param1 && curveAvailableTokens[this.props.urlParams.param1] ? this.props.urlParams.param1 : Object.keys(curveAvailableTokens)[0];\n  }\n\n  setSelectedToken = async (selectedToken) => {\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n    this.setState({\n      tokenConfig,\n      selectedToken,\n      availableTokens,\n      curveTokenConfig\n    });\n  }\n\n  loadTokensInfo = async () => {\n\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    this.setState({\n      curveAvailableTokens\n    });\n\n    const selectedToken = this.getSelectedToken();\n    // Check if token is set the query params\n    if (selectedToken && selectedToken !== this.props.urlParams.param1){\n      this.changeFromToken(selectedToken);\n      return await this.setSelectedToken(selectedToken);\n    } else if (selectedToken !== this.state.selectedToken){\n      await this.setSelectedToken(selectedToken);\n    }\n\n    const newState = {...this.state};\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n\n    if (newState.selectedToken !== selectedToken){\n      newState.selectedToken = selectedToken;\n    }\n\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n\n    const [\n      curveZapContract,\n      curvePoolContract,\n      curveSwapContract,\n      curveDepositContract\n    ] = await Promise.all([\n      this.functionsUtil.getCurveZapContract(),\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract()\n    ]);\n\n    newState.curveZapContract = curveZapContract;\n    newState.curvePoolContract = curvePoolContract;\n    newState.curveSwapContract = curveSwapContract;\n    newState.curveDepositContract = curveDepositContract;\n\n    newState.availableTokens = availableTokens;\n\n\n    // console.log('curveTokenPrice',newState.curveTokenPrice.toFixed(6),'curveTokenBalance',newState.curveTokenBalance.toFixed(6),'redeemableBalance',newState.redeemableBalance.toFixed(20),'tokenBalance',newState.tokenBalance.toFixed(20));\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[selectedToken] = tokenConfig;\n\n    newState.tokenConfig = tokenConfig;\n    newState.curveTokenConfig = curveTokenConfig;\n\n    if (this.props.account){\n      [\n        newState.curveTokenPrice,\n        newState.curveTokenBalance,\n        newState.tokenFeesPercentage,\n        newState.tokenFees,\n        newState.tokenBalance,\n        newState.idleTokenBalance,\n        newState.tokenApproved,\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokenPrice(),\n        this.functionsUtil.getCurveTokenBalance(),\n        this.functionsUtil.getTokenFees(tokenConfig),\n        this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n        this.functionsUtil.getTokenBalance(selectedToken,this.props.account),\n        this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n        this.functionsUtil.checkTokenApproved(selectedToken,curveDepositContract.address,this.props.account),\n      ]);\n\n\n      newState.processing = {\n        redeem:{\n          txHash:null,\n          loading:false\n        },\n        deposit:{\n          txHash:null,\n          loading:false\n        },\n        approve:{\n          txHash:null,\n          loading:false\n        },\n      };\n      newState.inputValue = {\n        redeem:null,\n        deposit:null\n      };\n      newState.fastBalanceSelector = {\n        redeem:null,\n        deposit:null\n      };\n\n      newState.componentMounted = true;\n      newState.depositBalance = newState.tokenBalance;\n      newState.redeemBalance = newState.redeemableBalance;\n      newState.govTokensDisabled = tokenConfig.govTokensDisabled;\n      newState.canRedeem = newState.curveTokenBalance && newState.curveTokenBalance.gt(0);\n      newState.canDeposit = newState.idleTokenBalance && newState.idleTokenBalance.gt(0);\n      newState.redeemableBalance = newState.curveTokenBalance ? newState.curveTokenBalance.times(newState.curveTokenPrice) : this.functionsUtil.BNify(0);\n    }\n\n    this.setState(newState);\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async calculateSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,this.state.curvePoolContract.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositBalance = amount;\n        newState.depositSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      case 'redeem':\n        newState.redeemBalance = amount;\n        newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.urlParams.param1 !== this.props.urlParams.param1;\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n\n    if (accountChanged || transactionsChanged || tokenChanged){\n      await this.loadTokensInfo();\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const redeemUnevenAmountsChanged = this.state.redeemUnevenAmounts !== prevState.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n    if (actionChanged || fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    if (actionChanged){\n      this.updateAssetSelector();\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  updateAssetSelector = async () => {\n    const newState = {};\n    switch (this.state.action){\n      case 'deposit':\n        this.loadTokensInfo();\n      break;\n      case 'redeem':\n        // this.loadTokensInfo();\n        const tokenConfig = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n        newState.curveAvailableTokens = {};\n        newState.curveTokenConfig = tokenConfig;\n        newState.selectedToken = tokenConfig.token;\n        newState.curveAvailableTokens[tokenConfig.token] = tokenConfig;\n      break;\n      default:\n      break;\n    }\n\n    this.setState(newState);\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.state.tokenBalance ? this.functionsUtil.BNify(this.state.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          amount = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n        } else {\n          amount = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  changeInputValue = (e) => {\n    if (!this.state.action){\n      return false;\n    }\n\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && amount.gt(this.state.tokenBalance));\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.curveTokenBalance)) );\n        } else {\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.redeemableBalance)) );\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = this.state.tokenApproved;\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.state.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.functionsUtil.enableERC20(this.state.selectedToken,this.state.curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const inputValue = this.state.inputValue[this.state.action];\n    const selectedPercentage = this.getFastBalanceSelector();\n\n    let loading = true;\n\n    switch (this.state.action){\n      // Handle deposit in curve\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.state.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if (this.state.metaTransactionsEnabled && txError){\n            this.setState({\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,tokensToDeposit);\n        const minMintAmount = await this.functionsUtil.genericContractCall(this.state.curveSwapContract.name,'calc_token_amount',[amounts,true]);\n        const depositParams = [amounts,minMintAmount];\n\n        // No need for callback atm\n        contractSendResult = await this.props.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n      break;\n      case 'redeem':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        let curveTokensToRedeem = null;\n        if (selectedPercentage){\n          curveTokensToRedeem = this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage);\n        } else {\n          curveTokensToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals));\n          if (!this.state.redeemUnevenAmounts){\n            const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n            curveTokensToRedeem = curveTokensToRedeem.div(curveTokenPrice);\n          }\n        }\n\n        if (!curveTokensToRedeem){\n          return false;\n        }\n\n        const callbackRedeem = (tx,error) => {\n          const txSucceeded = tx.status === 'success';\n\n          // Send Google Analytics event\n          const eventData = {\n            eventLabel: tx.status,\n            eventCategory: `CurveRedeem`,\n            eventAction: this.state.selectedToken,\n            eventValue: curveTokensToRedeem.toFixed()\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          }\n        };\n\n        const callbackReceiptRedeem = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const _amount = this.functionsUtil.normalizeTokenAmount(curveTokensToRedeem,this.state.curvePoolContract.decimals).toString();\n        let min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,0);\n\n        const contractName = this.state.curveDepositContract.name;\n        if (this.state.redeemUnevenAmounts){\n          console.log('remove_liquidity_imbalance',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_imbalance', [min_amounts, _amount], null, callbackRedeem, callbackReceiptRedeem);\n        } else {\n          min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,_amount);\n          console.log('remove_liquidity',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts], null, callbackRedeem, callbackReceiptRedeem);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    // console.log('contractSendResult',contractSendResult);\n\n    if (contractSendResult !== false){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    const userHasFunds = this.props.account && this.state.curveTokenBalance && this.functionsUtil.BNify(this.state.curveTokenBalance).gt(0);\n    const canPerformAction = true;\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            {\n              <Breadcrumb\n                {...this.props}\n                isMobile={this.props.isMobile}\n                path={['Boost',this.state.selectedToken]}\n                handleClick={ e => this.props.goToSection('best') }\n                text={this.functionsUtil.getGlobalConfig(['strategies','best','title'])}\n              />\n            }\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Curve Pool\n        </Title>\n        <Flex\n          width={1}\n        >\n          <Flex\n            width={1}\n            alignItems={'center'}\n            flexDirection={'column'}\n            justifyContent={'center'}\n          >\n            <Flex\n              width={[1,0.36]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Box\n                width={1}\n              >\n                <Text\n                  mb={1}\n                >\n                  Select your asset:\n                </Text>\n                <AssetSelector\n                  {...this.props}\n                  id={'token-from'}\n                  onChange={this.changeFromToken}\n                  selectedToken={this.state.selectedToken}\n                  tokenConfig={this.state.curveTokenConfig}\n                  showBalance={this.state.action === 'deposit'}\n                  availableTokens={this.state.curveAvailableTokens}\n                />\n              </Box>\n              <Box\n                width={1}\n              >\n                {\n                  canPerformAction ? (\n                    <Flex\n                      mt={2}\n                      flexDirection={'column'}\n                    >\n                      <Text\n                        mb={2}\n                      >\n                        Choose the action:\n                      </Text>\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('deposit');\n                            }\n                          }}\n                          isInteractive={true}\n                          isActive={ this.state.action === 'deposit' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'deposit'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Deposit\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('redeem');\n                            }\n                          }}\n                          isInteractive={true}\n                          isDisabled={ !this.state.canRedeem }\n                          isActive={ this.state.action === 'redeem' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'redeem'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Redeem\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                      </Flex>\n                    </Flex>\n                  ) : (\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    >\n                      <Icon\n                        size={'2.3em'}\n                        name={'MoneyOff'}\n                        color={'cellText'}\n                      />\n                      <Text\n                        mt={2}\n                        fontSize={2}\n                        color={'cellText'}\n                        textAlign={'center'}\n                      >\n                        You don't have any {this.state.tokenConfig.idle.token} in your wallet.\n                      </Text>\n                    </Flex>\n                  )\n                }\n              </Box>\n            </Flex>\n            <Flex\n              width={1}\n              mt={ this.props.account ? 3 : 0 }\n            >\n            {\n              this.state.action === 'deposit' ? (\n                <CurveDeposit\n                  {...this.props}\n                  {...this.state}\n                />\n              ) : this.state.action === 'redeem' && (\n                <CurveRedeem\n                  {...this.props}\n                  {...this.state}\n                />\n              )\n            }\n            </Flex>\n          </Flex>\n        </Flex>\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverviewCurve\n                {...this.props}\n                tokenFees={this.state.tokenFees}\n                tokenConfig={this.state.tokenConfig}\n                selectedToken={this.state.selectedToken}\n                availableTokens={this.state.availableTokens}\n                enabledTokens={Object.keys(this.state.availableTokens)}\n              />\n            </Flex>\n        }\n        {\n          /*\n          this.props.account && !this.state.govTokensDisabled[this.state.selectedToken] && Object.keys(availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id=\"earnings-estimation\"\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(availableGovTokens)}\n                handleClick={(props) => {}}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.33,0.22]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.26],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    props:{\n                      width:[0.33,0.26],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                      {\n                        name:'tooltip',\n                        props:{\n                          placement:'bottom',\n                          message:'The shown balance may be lower than the real one.',\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    mobile:false,\n                    props:{\n                      width: 0.26,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                ]}\n                {...this.props}\n                availableTokens={availableGovTokens}\n              />\n            </Flex>\n          */\n        }\n        {\n          /*\n          this.props.account && \n            <Flex\n              mb={[3,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'estimated-earnings-container'}\n            >\n              <Title my={[3,4]}>Estimated earnings</Title>\n              <EstimatedEarnings\n                {...this.props}\n              />\n            </Flex>\n          */\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              availableTokens={this.state.availableTokens}\n              enabledTokens={Object.keys(this.state.availableTokens)}\n              enabledActions={['CurveIn','CurveOut','CurveZapIn','CurveZapOut','CurveTransferIn','CurveTransferOut','CurveDepositIn','CurveDepositOut']}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.state.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport {\n  Text,\n  Modal,\n  Button,\n  Form,\n  Icon,\n  Flex,\n  Link\n} from \"rimble-ui\";\nimport axios from 'axios';\nimport colors from '../../colors';\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\nimport globalConfigs from '../../configs/globalConfigs';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\n\nclass WelcomeModal extends React.Component {\n\n  state = {\n    email:null,\n    error:false,\n    subscribed:false,\n    sendingForm:false\n  };\n\n  functionsUtil = null;\n\n  constructor(props) {\n    super(props);\n    this.functionsUtil = new FunctionsUtil(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleValidation = this.handleValidation.bind(this);\n  }\n\n  componentDidUpdate = async () => {\n    this.functionsUtil.setProps(this.props);\n  }\n\n  sendUserInfo = (sendEmail=true) => {\n    const walletProvider = this.functionsUtil.getWalletProvider();\n    const userInfo = {\n      address: this.props.account,\n      provider: walletProvider\n    };\n\n    if (sendEmail && this.state.email !== null){\n      userInfo.email = this.state.email;\n    }\n\n    this.functionsUtil.simpleIDPassUserInfo(userInfo);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    if (!this.state.email){\n      return false;\n    }\n\n    const callback = () => {\n      this.setState({\n        sendingForm:false,\n        subscribed:true\n      });\n      window.setTimeout(this.props.closeModal,2500);\n    };\n\n    this.sendUserInfo();\n\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'send_email',\n      eventLabel: 'WelcomeModal'\n    });\n\n    axios.post(globalConfigs.newsletterSubscription.endpoint, {\n      'email': this.state.email\n    }).then(r => {\n      callback();\n    })\n    .catch(err => {\n      callback();\n    });\n\n    // Set signedUp in the localStorage\n    if (localStorage){\n      const walletAddress = this.props.account.toLowerCase();\n      let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : null;\n      if (lastLogin && lastLogin[walletAddress] && !lastLogin[walletAddress].signedUp){\n        lastLogin[walletAddress].signedUp = true;\n        this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n      }\n    }\n\n    this.setState({\n      sendingForm:true\n    })\n  };\n\n  closeModal = async () => {\n\n    const closeModal = () => {\n      this.props.closeModal();\n    };\n\n    try{\n      // Prevent sending email\n      this.sendUserInfo(false);\n\n      // Send Google Analytics event\n      if (globalConfigs.analytics.google.events.enabled){\n        this.functionsUtil.sendGoogleAnalyticsEvent({\n          eventCategory: 'UI',\n          eventAction: 'continue_without_email',\n          eventLabel: 'WelcomeModal'\n        },closeModal);\n\n        // Call callback after 1 second if stuck\n        setTimeout(closeModal,1000);\n      } else {\n        closeModal();\n      }\n    } catch (err) {\n      closeModal();\n    }\n  }\n\n  handleValidation(e) {\n    if (e && e.target) {\n      this.setState({ email: e.target.value });\n      e.target.parentNode.classList.add(\"was-validated\");\n    }\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        {\n          this.state.subscribed ? (\n            <ModalCard\n              closeFunc={this.closeModal}\n            >\n              <ModalCard.Header title={'All done'} icon={`images/done.svg`}></ModalCard.Header>\n              <ModalCard.Body>\n                <Flex width={1} flexDirection={'column'} mb={3}>\n                  <Text color={'dark-gray'} textAlign={'center'} fontSize={3} my={0}>\n                    Thanks for subscribing!\n                  </Text>\n                  <Button\n                    my={3}\n                    width={'100%'}\n                    borderRadius={4}\n                    onClick={this.closeModal}\n                  >\n                    CLOSE\n                  </Button>\n                </Flex>\n              </ModalCard.Body>\n            </ModalCard>\n          ) : (\n            <ModalCard closeFunc={this.closeModal}>\n              <ModalCard.Header title={'Stay up-to-date!'} icon={`images/notification.svg`}>\n              </ModalCard.Header>\n              <ModalCard.Body>\n                <Form onSubmit={this.handleSubmit}>\n                  <Flex width={1} flexDirection={'column'} mb={3}>\n                    <Text color={'mid-gray'} textAlign={'left'} fontSize={3} my={0}>\n                      Add your e-mail to receive updates about:\n                    </Text>\n                  </Flex>\n                  <Flex width={1} flexDirection={'column'} mt={2}>\n                    <Flex my={2} flexDirection={'row'} alignItems={'center'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Performance reports\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        New Protocols & Tokens\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Latest updates\n                      </Text>\n                    </Flex>\n                    <Form.Field width={1} label={''}>\n                      <Form.Input\n                        px={3}\n                        py={4}\n                        required\n                        width={1}\n                        border={0}\n                        fontSize={3}\n                        type={\"email\"}\n                        name={\"EMAIL\"}\n                        outline={'none'}\n                        borderColor={'cardBorder'}\n                        backgroundColor={'cardBg'}\n                        textAlign={['center','left']}\n                        className={header_styles.input}\n                        placeholder={'Enter your e-mail'}\n                        onChange={this.handleValidation}\n                      />\n                    </Form.Field>\n                    <Flex mb={3} flexDirection={'column'} alignItems={'center'} justifyContent={'center'}>\n                      <ButtonLoader\n                        buttonText={'SUBMIT'}\n                        isLoading={this.state.sendingForm}\n                        buttonProps={{className:header_styles.gradientButton,width:'100%',type:'submit'}}\n                      >\n                      </ButtonLoader>\n                      <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without e-mail</Link>\n                    </Flex>\n                  </Flex>\n                </Form>\n              </ModalCard.Body>\n            </ModalCard>\n          )\n        }\n      </Modal>\n    );\n  }\n}\n\nexport default WelcomeModal;\n","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\n\nclass MigrateModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'continue_without_migrate',\n        eventLabel: 'MigrateModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowMigrateModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowMigrateModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = () => {\n    const tokenMigrationRoute = this.functionsUtil.getGlobalConfig(['tools','tokenMigration','route']);\n    this.props.goToSection('tools/'+tokenMigrationRoute);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            iconHeight={'40px'}\n            title={'Migrate to Idle'}\n            icon={`images/migrate.svg`}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={3}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                You can migrate your funds from Compound, Aave, Fulcrum, Yearn and Idle V2 with just one transaction.\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                my={2}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.protocolsTokensBalances && Object.keys(this.props.protocolsTokensBalances).map( token => (\n                    <Flex\n                      mb={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      key={`token_${token}`}\n                      justifyContent={'space-between'}\n                    >\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'icon',\n                          props:{\n                            mr:2,\n                            height:'2.3em'\n                          }\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                      <SmartNumber\n                        mr={2}\n                        {...fieldProps}\n                        minPrecision={5}\n                        number={this.props.protocolsTokensBalances[token].balance} \n                      />\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'tokenName',\n                          props:fieldProps\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                    </Flex>\n                  ) )\n                }\n                <Text\n                  mb={0}\n                  fontSize={1}\n                  color={'red'}\n                  fontWeight={500}\n                  textAlign={'center'}\n                >\n                  Please be aware that by migrating your tokens from other protocols, your open positions might be liquidated if collateralized with migrated tokens.\n                </Text>\n              </Flex>\n              <Flex\n                mb={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <ButtonLoader\n                  buttonText={'MIGRATE'}\n                  handleClick={this.migrate}\n                  isLoading={this.state.sendingForm}\n                  buttonProps={{\n                    width:['100%','50%'],\n                    className:header_styles.gradientButton\n                  }}\n                >\n                </ButtonLoader>\n                {\n                /*\n                <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without migrate</Link>\n                */\n                }\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default MigrateModal;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass UpgradeModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'close_upgrade_modal',\n        eventLabel: 'UpgradeModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowUpgradeModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowUpgradeModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = async (token,strategy=null) => {\n\n    if (!strategy){\n      strategy = this.props.selectedStrategy;\n    }\n\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  convert = async (token) => {\n    const convertTool = this.functionsUtil.getGlobalConfig(['tools','tokenMigration']);\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n\n    if (!this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            icon={`images/migrate.svg`}\n            title={'Upgrade Available'}\n            iconHeight={['35px','40px']}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={[2,3]}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                Idle now supports yield farming and governance tokens distribution, migrate now your portfolio with just one click!\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n              >\n                <Flex\n                  fontSize={[2,3]}\n                  width={[0.5,0.28]}\n                  fontWeight={[4,5]}\n                  color={'copyColor'}\n                >\n                  {\n                    this.props.isMobile ? 'ASSET' : 'ASSET TO MIGRATE'\n                  }\n                </Flex>\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      BALANCE\n                    </Flex>\n                  )\n                }\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      OLD APY\n                    </Flex>\n                  )\n                }\n                <Flex\n                  fontSize={[2,3]}\n                  fontWeight={[4,5]}\n                  width={[0.25,0.19]}\n                  color={'copyColor'}\n                  justifyContent={'center'}\n                >\n                  {\n                    this.props.isMobile ? 'APY' : 'NEW APY'\n                  }\n                </Flex>\n                <Flex\n                  width={[0.25,0.15]}\n                >\n                  \n                </Flex>\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.tokensToMigrate && Object.keys(this.props.tokensToMigrate).map( tokenKey => {\n                    const token = this.props.tokensToMigrate[tokenKey].token;\n                    const strategy = this.props.tokensToMigrate[tokenKey].strategy;\n                    const tokenConfig = this.props.tokensToMigrate[tokenKey].tokenConfig;\n                    const balance = this.props.tokensToMigrate[tokenKey].oldContractBalanceFormatted;\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${tokenKey}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={[0.5,0.28]}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:['1.8em','2.3em']\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                        </Flex>\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <SmartNumber\n                                {...fieldProps}\n                                minPrecision={5}\n                                number={balance}\n                                flexProps={{\n                                  justifyContent:'center'\n                                }}\n                              />\n                            </Flex>\n                          )\n                        }\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <AssetField\n                                {...this.props}\n                                fieldInfo={{\n                                  name:'oldApy',\n                                  props:fieldProps\n                                }}\n                                token={token}\n                                tokenConfig={tokenConfig}\n                              />\n                            </Flex>\n                          )\n                        }\n                        <Flex\n                          width={[0.25,0.19]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={token}\n                            tokenConfig={tokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={[0.25,0.15]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.migrate(token,strategy) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.oldIdleTokensToMigrate && Object.keys(this.props.oldIdleTokensToMigrate).map( token => {\n                    const tokenConfig = this.props.oldIdleTokensToMigrate[token].tokenConfig;\n\n                    if (!tokenConfig){\n                      return null;\n                    }\n\n                    const balance = this.props.oldIdleTokensToMigrate[token].balance;\n                    let newTokenConfig = null;\n\n                    if (tokenConfig.availableStrategies && !this.props.availableTokens[tokenConfig.baseToken]){\n                      newTokenConfig = this.props.availableStrategies[tokenConfig.availableStrategies[0]][tokenConfig.baseToken];\n                    } else {\n                      newTokenConfig = this.props.availableTokens[tokenConfig.baseToken];\n                    }\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${token}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={0.28}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:'2.3em'\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <SmartNumber\n                            {...fieldProps}\n                            minPrecision={5}\n                            number={balance}\n                            flexProps={{\n                              justifyContent:'center'\n                            }}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'oldApy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.15}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.convert(token) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                my={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <RoundButton\n                  handleClick={this.closeModal}\n                  buttonProps={{\n                    fontSize:[2,3],\n                    width:['100%','40%'],\n                  }}\n                >\n                  MIGRATE LATER\n                </RoundButton>\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default UpgradeModal;","import React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport { Flex, Card, Icon, Text } from 'rimble-ui';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardMenu from '../DashboardMenu/DashboardMenu';\n\n// Import page components\nimport Stats from '../Stats/Stats';\nimport Utils from '../Utils/Utils';\nimport AssetPage from '../AssetPage/AssetPage';\nimport RoundButton from '../RoundButton/RoundButton';\nimport BetaModal from \"../utilities/components/BetaModal\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CurveStrategy from '../CurveStrategy/CurveStrategy';\nimport WelcomeModal from \"../utilities/components/WelcomeModal\";\nimport TooltipModal from \"../utilities/components/TooltipModal\";\nimport MigrateModal from \"../utilities/components/MigrateModal\";\nimport UpgradeModal from \"../utilities/components/UpgradeModal\";\nimport DashboardHeader from '../DashboardHeader/DashboardHeader';\n\nclass Dashboard extends Component {\n  state = {\n    menu:[],\n    baseRoute:null,\n    clickEvent:null,\n    activeModal:null,\n    currentRoute:null,\n    pageComponent:null,\n    currentSection:null,\n    selectedSection:null,\n    tokensToMigrate:null,\n    showResetButton:false,\n    selectedSubsection:null,\n    pageComponentProps:null,\n    oldIdleTokensToMigrate:null,\n    protocolsTokensBalances:null,\n  };\n\n  timeoutId = null;\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    window.functionsUtil = this.functionsUtil;\n  }\n\n  async loadMenu() {\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n    const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n    const menu = Object.keys(strategies).filter( s => ( !strategies[s].comingSoon ) ).map(strategy => ({\n        submenu:[],\n        color:'#fff',\n        selected:false,\n        route:baseRoute+'/'+strategy,\n        label:strategies[strategy].title,\n        image:strategies[strategy].icon,\n        bgColor:strategies[strategy].color,\n        component:strategies[strategy].component,\n        imageInactive:strategies[strategy].iconInactive,\n        imageInactiveDark:strategies[strategy].iconInactiveDark\n      })\n    );\n\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n\n    // Add Curve\n    if (curveConfig.enabled){\n      const curveParams = Object.assign({\n        submenu:[],\n        selected:false,\n        component:CurveStrategy,\n      },curveConfig.params);\n\n      menu.push(curveParams);\n    }\n\n    // Add Stake\n    const stakeConfig = this.functionsUtil.getGlobalConfig(['tools','stake']);\n    if (stakeConfig.enabled){\n      menu.push(\n        {\n          submenu:[],\n          label:'Stake',\n          selected:false,\n          color:'dark-gray',\n          icon:stakeConfig.icon,\n          route:'/dashboard/stake',\n          component:Utils,\n          componentProps:{\n            showBreadCrumb:false,\n            toolProps:stakeConfig.props,\n            selectedSubsection:stakeConfig\n          },\n          bgColor:this.props.theme.colors.primary,\n        }\n      );\n    }\n\n    // Add tools\n    menu.push(\n      {\n        icon:'Build',\n        label:'Tools',\n        color:'dark-gray',\n        component:Utils,\n        selected:false,\n        route:'/dashboard/tools',\n        bgColor:this.props.theme.colors.primary,\n        submenu:Object.values(this.functionsUtil.getGlobalConfig(['tools'])).filter( u => (u.enabled) )\n      }\n    );\n\n    // Add Stats\n    menu.push(\n      {\n        icon:'Equalizer',\n        label:'Stats',\n        bgColor:'#21f36b',\n        color:'dark-gray',\n        component:Stats,\n        selected:false,\n        route:'/dashboard/stats',\n        submenu:[]\n      }\n    );\n\n    // Add Forum\n    menu.push(\n      {\n        submenu:[],\n        icon:'Forum',\n        mobile:false,\n        label:'Forum',\n        selected:false,\n        component:null,\n        color:'dark-gray',\n        bgColor:'#ff0000',\n        isExternalLink:true,\n        route:this.functionsUtil.getGlobalConfig(['forumURL'])\n      }\n    );\n\n    await this.setState({\n      menu\n    });\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  openTooltipModal = (modalTitle,modalContent) => {\n\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: modalTitle,\n      eventLabel: 'TooltipModal'\n    });\n\n    this.setState({\n      modalTitle,\n      modalContent\n    },() => {\n      this.setActiveModal('tooltip');\n    })\n  }\n\n  setActiveModal = (activeModal) => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadParams() {\n    const { match: { params } } = this.props;\n\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n    let currentRoute = baseRoute;\n\n    let pageComponent = null;\n    let selectedToken = null;\n    let currentSection = null;\n    let selectedStrategy = null;\n    let pageComponentProps = null;\n\n    // Set strategy\n    if (params.section){\n      currentSection = params.section;\n      const param1 = params.param1;\n      const param2 = params.param2;\n\n      const section_is_strategy = Object.keys(this.props.availableStrategies).includes(currentSection.toLowerCase());\n      const param1_is_strategy = param1 && Object.keys(this.props.availableStrategies).includes(param1.toLowerCase());\n\n      if (section_is_strategy || param1_is_strategy){\n\n        if (!section_is_strategy){\n          currentRoute += '/'+currentSection;\n        }\n\n        selectedStrategy = section_is_strategy ? currentSection : param1;\n        currentRoute += '/'+selectedStrategy;\n\n        // Set token\n        const param1_is_token = param1 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param1.toUpperCase());\n        const param2_is_token = param2 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param2.toUpperCase());\n        if (param1_is_token || param2_is_token){\n          selectedToken = param1_is_token ? param1.toUpperCase() : param2.toUpperCase();\n          currentRoute += '/'+selectedToken;\n\n          if (section_is_strategy){\n            pageComponent = AssetPage;\n          }\n        }\n      } else {\n        currentRoute += '/'+params.section;\n\n        if (params.param1 && params.param1.length){\n          currentRoute += '/'+params.param1;\n        }\n\n        // if (params.param2 && params.param2.length){\n        //   currentRoute += '/'+params.param2;\n        // }\n      }\n    }\n\n    const menu = this.state.menu;\n\n    let selectedSection = null;\n    let selectedSubsection = null;\n\n    menu.forEach(m => {\n      m.selected = false;\n      const sectionRoute = baseRoute+'/'+params.section;\n      if (currentRoute.toLowerCase() === m.route.toLowerCase() || ( !m.submenu.length && m.route.toLowerCase() === sectionRoute.toLowerCase() )){\n        m.selected = true;\n        if (pageComponent === null){\n          pageComponent = m.component;\n          pageComponentProps = m.componentProps;\n        }\n      } else if (m.submenu.length) {\n        m.submenu.forEach(subm => {\n          subm.selected = false;\n          const submRoute = m.route+'/'+subm.route;\n          if (submRoute.toLowerCase() === currentRoute.toLowerCase()){\n            m.selected = true;\n            subm.selected = true;\n\n            // Set component, if null use parent\n            if (pageComponent === null){\n              if (subm.component){\n                pageComponent = subm.component;\n                pageComponentProps = m.componentProps;\n              } else {\n                pageComponent = m.component;\n                pageComponentProps = m.componentProps;\n              }\n            }\n          }\n\n          // Set selected subsection\n          if (subm.selected){\n            selectedSubsection = subm;\n          }\n\n        });\n      }\n\n      // Set selected section\n      if (m.selected){\n        selectedSection = m;\n      }\n    });\n\n    // console.log('pageComponent',params,pageComponent);\n\n    // Exit if no strategy and token selected\n    if (!pageComponent){\n      return this.goToSection('/',false);\n    }\n\n    // console.log('loadParams',selectedStrategy,selectedToken);\n    await this.props.setStrategyToken(selectedStrategy,selectedToken);\n    \n    // Send GA pageview\n    this.functionsUtil.sendGoogleAnalyticsPageview(currentRoute);\n\n    await this.setState({\n      menu,\n      params,\n      baseRoute,\n      currentRoute,\n      pageComponent,\n      currentSection,\n      selectedSection,\n      pageComponentProps,\n      selectedSubsection\n    });\n  }\n\n  componentWillUnmount(){\n    if (this.timeoutId){\n      window.clearTimeout(this.timeoutId);\n    }\n  }\n\n  async componentWillMount() {\n\n    this.props.setCurrentSection('dashboard');\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n  }\n\n  async componentDidMount() {\n\n    this.timeoutId = window.setTimeout(() => {\n      if (!this.props.accountInizialized || !this.props.contractsInitialized){\n        this.setState({\n          showResetButton:true\n        });\n      }\n    },20000);\n\n    if (!this.props.web3){\n      return this.props.initWeb3();\n    } else if (!this.props.accountInizialized){\n      return this.props.initAccount();\n    } else if (!this.props.contractsInitialized){\n      return this.props.initializeContracts();\n    }\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n\n    const viewOnly = this.props.connectorName === 'custom';\n    if (!viewOnly){\n      this.checkModals();\n    }\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n\n    this.loadUtils();\n\n    const prevParams = prevProps.match.params;\n    const params = this.props.match.params;\n\n    if (JSON.stringify(prevParams) !== JSON.stringify(params)){\n      await this.setState({\n        pageComponent:null\n      }, () => {\n        this.loadParams();\n      });\n    }\n\n    const viewOnly = this.props.connectorName === 'custom';\n    const accountChanged = prevProps.account !== this.props.account;\n    const strategyChanged = this.props.selectedStrategy && prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const availableTokensChanged = JSON.stringify(prevProps.availableTokens) !== JSON.stringify(this.props.availableTokens);\n    const accountInizialized = this.props.accountInizialized && prevProps.accountInizialized !== this.props.accountInizialized;\n    const contractsInitialized = this.props.contractsInitialized && prevProps.contractsInitialized !== this.props.contractsInitialized;\n\n    if (!viewOnly && (accountChanged || accountInizialized || contractsInitialized || strategyChanged || availableTokensChanged)){\n      this.checkModals();\n    }\n  }\n\n  async checkModals(){\n\n    if (this.props.selectedToken || !this.props.accountInizialized || !this.props.contractsInitialized || !this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    await this.checkBetaApproval();\n    await this.checkTokensToMigrate();\n    await this.checkWelcomeModal();\n    await this.checkProtocolsTokensBalances();\n  }\n\n  async checkBetaApproval(){\n    const isOriginUrl = this.functionsUtil.checkUrlOrigin();\n    const isBetaApproved = this.functionsUtil.getStoredItem('betaApproved',false,false);\n\n    // Show Beta Warning modal\n    if (!isOriginUrl && !isBetaApproved){\n      const activeModal = 'beta';\n      if (activeModal !== this.state.activeModal){\n        await this.setState({\n          activeModal,\n        });\n\n        return activeModal;\n      }\n    }\n  }\n\n  async checkTokensToMigrate(){\n\n    const showUpgradeModal = this.functionsUtil.getStoredItem('dontShowUpgradeModal',false,null) !== null ? false : true;\n    if (this.props.selectedToken || !showUpgradeModal || !this.props.availableTokens || this.state.activeModal !== null){\n      return null;\n    }\n\n    const tokensToMigrate = await this.functionsUtil.getTokensToMigrate();\n    const oldIdleTokensToMigrate = await this.functionsUtil.getProtocolsTokensBalances('idle');\n\n    // console.log('tokensToMigrate',tokensToMigrate);\n    \n    if ((tokensToMigrate && Object.keys(tokensToMigrate).length>0) || (oldIdleTokensToMigrate && Object.keys(oldIdleTokensToMigrate).length>0)){\n      const activeModal = 'upgrade';\n      if (activeModal !== this.state.activeModal){\n        await this.setState({\n          activeModal,\n          tokensToMigrate,\n          oldIdleTokensToMigrate\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkWelcomeModal(){\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show welcome modal\n    if (this.props.account && this.state.activeModal === null){\n      let welcomeIsOpen = false;\n\n      const welcomeModalProps = this.functionsUtil.getGlobalConfig(['modals','welcome']);\n\n      if (welcomeModalProps.enabled && localStorage){\n\n        // Check the last login of the wallet\n        const currTime = new Date().getTime();\n        const walletAddress = this.props.account.toLowerCase();\n        let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : {};\n\n        // First login\n        if (!lastLogin[walletAddress]){\n          lastLogin[walletAddress] = {\n            'signedUp':false,\n            'lastTime':currTime\n          };\n          welcomeIsOpen = true;\n        // User didn't sign up\n        } else if (!lastLogin[walletAddress].signedUp) {\n          const lastTime = parseInt(lastLogin[walletAddress].lastTime);\n          const timeFromLastLogin = (currTime-lastTime)/1000;\n          welcomeIsOpen = timeFromLastLogin>=welcomeModalProps.frequency; // 1 day since last login\n        }\n\n        if (welcomeIsOpen){\n          lastLogin[walletAddress].lastTime = currTime;\n          this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n        }\n      }\n\n      const activeModal = welcomeIsOpen ? 'welcome' : this.state.activeModal;\n      if (this.state.activeModal !== activeModal){\n        await this.setState({\n          activeModal\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkProtocolsTokensBalances() {\n\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show migration modal if no other modals are opened\n    const migrateModalEnabled = this.functionsUtil.getGlobalConfig(['modals','migrate','enabled']);\n    const showMigrateModal = this.functionsUtil.getStoredItem('dontShowMigrateModal',false,null) !== null ? false : true;\n\n    if (this.state.activeModal === null && migrateModalEnabled && showMigrateModal && !this.state.protocolsTokensBalances){\n      const protocolsTokensBalances = await this.functionsUtil.getProtocolsTokensBalances();\n      const activeModal = protocolsTokensBalances && Object.keys(protocolsTokensBalances).length>0 ? 'migrate' : null;\n      const newState = {\n        activeModal,\n        protocolsTokensBalances\n      };\n      await this.setState(newState);\n      return activeModal;\n    }\n\n    return null;\n  }\n\n  goToSection(section,isDashboard=true){\n\n    // Remove dashboard route\n    if (isDashboard){\n      section = section.replace(this.state.baseRoute +'/','');\n    }\n\n    const newRoute = isDashboard ? this.state.baseRoute +'/' + section : section;\n    window.location.hash=newRoute;\n\n    // Send GA event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'goToSection',\n      eventLabel: newRoute\n    });\n\n    window.scrollTo(0, 0);\n  }\n\n  logout = async () => {\n    this.props.setConnector('Infura','Infura');\n    await this.props.initWeb3('Infura');\n  }\n\n  changeToken(selectedToken){\n    selectedToken = selectedToken.toUpperCase();\n    if (Object.keys(this.props.availableTokens).includes(selectedToken)){\n      const routeParts = [];\n\n      // Add section\n      if (this.state.currentSection.toLowerCase() !== this.props.selectedStrategy.toLowerCase()){\n        routeParts.push(this.state.currentSection);\n      }\n\n      // Add strategy\n      routeParts.push(this.props.selectedStrategy); \n\n      // Add token\n      routeParts.push(selectedToken);\n\n      this.goToSection(routeParts.join('/'));\n    }\n  }\n\n  propagateClickEvent(clickEvent){\n    this.setState({\n      clickEvent:clickEvent.target\n    });\n  }\n\n  render() {\n    const PageComponent = this.state.pageComponent ? this.state.pageComponent : null;\n    return (\n      <Flex\n        width={'100%'}\n        position={'fixed'}\n        flexDirection={'row'}\n        className={this.props.themeMode}\n        backgroundColor={['dashboardBg','white']}\n        /*onClick={ e => this.propagateClickEvent(e) }*/\n        height={[(window.innerHeight-61)+'px','100vh']}\n      >\n        <Flex\n          bottom={0}\n          zIndex={99999}\n          width={[1,1/6]}\n          flexDirection={'column'}\n          position={['fixed','relative']}\n        >\n          <Card\n            p={[0,3]}\n            border={0}\n            width={['100vw','auto']}\n            height={['auto','100vh']}\n            backgroundColor={'menuBg'}\n            borderColor={this.props.theme.colors.menuRightBorder}\n            borderRight={`1px solid ${this.props.theme.colors.menuRightBorder}`}\n            >\n            <DashboardMenu\n              {...this.props}\n              menu={this.state.menu}\n            />\n          </Card>\n        </Flex>\n        <Flex\n          py={3}\n          mb={0}\n          px={[3,5]}\n          width={[1,5/6]}\n          style={{\n            overflowY:'scroll',\n            overflowX:'hidden'\n          }}\n          height={['92vh','auto']}\n          flexDirection={'columns'}\n          backgroundColor={'dashboardBg'}\n        >\n          {\n            !this.props.accountInizialized || !this.props.contractsInitialized || !PageComponent ? (\n              <Flex\n                width={1}\n                minHeight={'50vg'}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                {\n                  !this.props.network.isCorrectNetwork ? (\n                    <DashboardCard\n                      cardProps={{\n                        p:3,\n                        mt:3,\n                        width:[1,0.35]\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Icon\n                          size={'2.3em'}\n                          name={'Warning'}\n                          color={'cellText'}\n                        />\n                        <Text\n                          mt={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          The <strong>{this.functionsUtil.capitalize(this.props.network.current.name)} Network</strong> is not supported, please switch to the correct network.\n                        </Text>\n                      </Flex>\n                    </DashboardCard>\n                  ) : !this.state.showResetButton ? (\n                    <FlexLoader\n                      textProps={{\n                        textSize:4,\n                        fontWeight:2\n                      }}\n                      loaderProps={{\n                        mb:3,\n                        size:'40px'\n                      }}\n                      flexProps={{\n                        my:3,\n                        flexDirection:'column'\n                      }}\n                      text={ !this.props.accountInizialized ? 'Loading account...' : ( !this.props.contractsInitialized ? 'Loading contracts...' : 'Loading assets...' )}\n                    />\n                  ) : (\n                    <DashboardCard\n                      cardProps={{\n                        p:3,\n                        mt:3,\n                        width:[1,0.35]\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Icon\n                          size={'2.3em'}\n                          name={'Warning'}\n                          color={'cellText'}\n                        />\n                        <Text\n                          mt={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          Idle can't connect to your wallet!<br />Make sure that your wallet is unlocked and try again.\n                        </Text>\n                        <RoundButton\n                          buttonProps={{\n                            mt:3,\n                            width:[1,1/2]\n                          }}\n                          handleClick={this.logout.bind(this)}\n                        >\n                          Logout\n                        </RoundButton>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n              </Flex>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardHeader\n                  clickEvent={this.state.clickEvent}\n                  goToSection={this.goToSection.bind(this)}\n                  {...this.props}\n                />\n                {\n                  PageComponent &&\n                    <PageComponent\n                      {...this.props}\n                      match={{ params:{} }}\n                      urlParams={this.state.params}\n                      changeToken={this.changeToken.bind(this)}\n                      goToSection={this.goToSection.bind(this)}\n                      selectedSection={this.state.selectedSection}\n                      selectedSubsection={this.state.selectedSubsection}\n                      openTooltipModal={this.openTooltipModal.bind(this)}\n                      {...this.state.pageComponentProps}\n                      />\n                }\n              </Flex>\n            )\n          }\n        </Flex>\n        <BetaModal\n          closeModal={this.resetModal}\n          isOpen={this.state.activeModal === 'beta'}\n        />\n        <UpgradeModal\n          {...this.props}\n          closeModal={this.resetModal}\n          goToSection={this.goToSection.bind(this)}\n          tokensToMigrate={this.state.tokensToMigrate}\n          isOpen={this.state.activeModal === 'upgrade'}\n          oldIdleTokensToMigrate={this.state.oldIdleTokensToMigrate}\n        />\n        <MigrateModal\n          {...this.props}\n          closeModal={this.resetModal}\n          goToSection={this.goToSection.bind(this)}\n          isOpen={this.state.activeModal === 'migrate'}\n          protocolsTokensBalances={this.state.protocolsTokensBalances}\n        />\n        <TooltipModal\n          closeModal={this.resetModal}\n          title={this.state.modalTitle}\n          content={this.state.modalContent}\n          isOpen={this.state.activeModal === 'tooltip'}\n        />\n        <WelcomeModal\n          closeModal={this.resetModal}\n          account={this.props.account}\n          simpleID={this.props.simpleID}\n          network={this.props.network.current}\n          tokenName={this.props.selectedToken}\n          initSimpleID={this.props.initSimpleID}\n          baseTokenName={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'welcome'}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default Dashboard;"],"sourceRoot":""}