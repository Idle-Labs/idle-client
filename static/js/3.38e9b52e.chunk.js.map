{"version":3,"sources":["AssetsUnderManagement/AssetsUnderManagement.js","DepositRedeem/DepositRedeem.module.scss","TwitterShareButton/TwitterShareButton.module.scss","Stats/StatsChart.js","Rebalance/Rebalance.js","utilities/components/DateRangeModal.js","ExecuteTransaction/ExecuteTransaction.js","Stats/Stats.js","Utils/Utils.js","FundsOverview/FundsOverview.js","CurveRedeem/CurveRedeem.js","TwitterShareButton/TwitterShareButton.js","utilities/components/ShareModal.js","DepositRedeem/DepositRedeem.js","EstimatedEarnings/EstimatedEarnings.js","AssetPage/AssetPage.js","utilities/components/BetaModal.js","CurveDeposit/CurveDeposit.js","PortfolioEquityCurve/PortfolioEquityCurve.js","FundsOverviewCurve/FundsOverviewCurve.js","CurveStrategy/CurveStrategy.js","utilities/components/WelcomeModal.js","utilities/components/MigrateModal.js","utilities/components/UpgradeModal.js","Dashboard/Dashboard.js"],"names":["AssetsUnderManagement","state","totalAUM","totalAUMEndOfYear","functionsUtil","this","setProps","props","FunctionsUtil","loadUtils","loadTotalAUM","prevProps","prevState","contractsInitialized","availableStrategies","JSON","stringify","getAggregatedStats","avgAPY","plus","times","div","setState","_this2","react__WEBPACK_IMPORTED_MODULE_9___default","a","createElement","rimble_ui__WEBPACK_IMPORTED_MODULE_10__","width","react_countup__WEBPACK_IMPORTED_MODULE_8___default","delay","decimals","decimal","separator","useEasing","duration","start","parseFloat","end","formattingFn","n","formatMoney","_ref2","countUpRef","style","counterStyle","display","color","whiteSpace","fontFamily","theme","fonts","counter","fontWeight","fontWeights","textAlign","isMobile","fontSize","fontSizes","ref","subtitle","_Title_Title__WEBPACK_IMPORTED_MODULE_7__","Object","assign","subtitleProps","span","alignItems","justifyContent","loaderAlign","size","Component","module","exports","input","twitterIcon","StatsChart","chartProps","chartType","chartData","chartWidth","parseAum","value","parseInt","toFixed","_this","selectedToken","loadApiData","_callee3","maxGridLines","apiResults","apiResults_unfiltered","totalItems","protocols","versionInfo","keys","tempData","gridYStep","itemIndex","gridYValues","maxChartValue","axisBottomIndex","idleChartData","firstIdleBlock","divergingData","startTimestamp","endTimestamp","timestamp","date","lastRow","maxRange","i","_i","_i2","_i3","prevValue","_i4","prevApr","prevData","startBalance","currentBalance","avgApy","_i5","firstTokenPrice","_i6","regenerator_default","wrap","_context3","prev","next","tokenConfig","chartMode","abrupt","length","globalConfigs","stats","versions","idleVersion","Line","t0","moment","_d","getTime","format","deposits","redeems","forEach","row","idleTokens","fixTokenDecimals","idleSupply","idleTokensPrev","eq","diff","minus","gte","Math","max","abs","values","filter","v","Bar","push","indexBy","enableLabel","minValue","maxValue","label","d","axisBottom","tickSize","legend","tickPadding","orient","legendOffset","legendPosition","tickValues","axisLeft","axisRight","tickRotation","abbreviateNumber","markers","axis","lineStyle","strokeOpacity","textStyle","fill","colors","transactions","action","deposit","legendOrientation","legendOffsetX","stroke","strokeDasharray","redeem","padding","labelTextColor","labelSkipWidth","labelSkipHeight","pointSize","useMesh","animate","pointLabel","curve","enableArea","enableSlices","enableGridX","enableGridY","pointBorderWidth","pointLabelYOffset","legends","dataFrom","itemWidth","itemHeight","translateX","translateY","symbolSize","itemsSpacing","direction","anchor","symbolShape","itemTextColor","effects","on","ticks","text","sansSerif","grid","line","lineChartStroke","tooltip","container","boxShadow","background","pointColor","from","modifiers","margin","top","right","bottom","left","data","xFormatted","strToMoment","indexValue","point","id","depositFormatted","redeemFormatted","react_default","CustomTooltip","CustomTooltipRow","tokens","hsl","join","map","idlePrice","aum","x","y","toString","p","j","protocolsData","protocolAllocation","protocolAddr","toLowerCase","address","z","BNify","rate","allocation","foundItem","item","pos","indexOf","allocations","name","undefined","xScale","type","xFormat","yFormat","yScale","stacked","showAdvanced","sliceTooltip","slideData","slice","points","serieId","serieColor","yFormatted","protocolName","protocolColor","protocolAllocationFormatted","protocolAllocationPerc","key","concat","protocolData","protocolPaused","foundProtocol","find","capitalize","tableCell","_ref3","DashboardCard","cardProps","py","px","borderCollapse","height","textTransform","totalAllocation","reduce","accumulator","allocationPerc","_ref4","_ref5","idle","idleRate","protocolEarning","defiScore","isNaN","idleScore","apy","apr","days","earnings","earning","blocknumber","itemPos","floor","additionalProtocols","additionalProtocol","protocolInfo","protocol","enabled","unshift","rateField","chartRow","baseProfit","firstProtocolData","firstProtocolBlock","pData","protocolRate","acc","field","idlePerformance","d1","rowData","protocolApy","tokenPrice","asyncForEach","_ref6","asyncToGenerator","mark","_callee2","lastRowData","lastTokenPrice","_context2","_ref7","_callee","tokenExchangeRate","tokenPriceFixed","lastYDiff","_context","price","lt","stop","_x2","apply","arguments","_x","showAdvancedChanged","apiResultsChanged","tokenChanged","componentDidMount","GenericChart","showLoader","parentId","parentIdHeight","Rebalance","loading","processing","rebalance","txHash","shouldRebalance","checkRebalance","sent","e","callback","callback_receipt","preventDefault","tx","error","eventData","eventCategory","eventAction","eventLabel","status","getTransactionError","sendGoogleAnalyticsEvent","window","toastProvider","addMessage","secondaryMessage","colorTheme","actionHref","actionText","variant","objectSpread","transactionHash","contractMethodSendWrapper","token","accountChanged","account","index_es","minHeight","flexDirection","FlexLoader","flexProps","loaderProps","textProps","ml","TxProgressBar","web3","waitText","endMessage","hash","mt","mb","RoundButton","buttonProps","disabled","handleClick","DateRangeModal","quickSelection","ranges","startDate","Date","endDate","componentDidUpdate","selection","target","clone","subtract","closeModal","newState","handleSelect","startTimestampObj","endTimestampObj","_this3","isOpen","ModalCard","closeFunc","Header","title","Body","backgroundColor","cardBg","required","onChange","handleQuickSelect","bind","options","dist","minDate","maxDate","className","themeMode","Footer","my","mx","borderRadius","mainColor","onClick","React","ExecuteTransaction","txStatus","contractName","methodName","params","ExecuteComponent","parentProps","children","progressBarProps","cancelTransaction","execute","componentProps","Stats","delta","carouselMax","rebalances","buttonGroups","carouselIndex","statsVersions","minStartTime","govTokensPool","unlentBalance","carouselOffsetLeft","showRefreshIdleSpeed","dateRangeModalOpened","quickSelections","day","week","weeks","month","componentUnmounted","setDateRange","isSameOrAfter","isSame","add","isBefore","isAfter","maxEndDate","setStateSafe","toggleAdvancedCharts","setDateRangeModal","filterTokenData","r","setIdleVersion","isRisk","firstResult","lastResult","firstIdlePrice","lastIdlePrice","compoundInfo","firstCompoundData","lastCompoundData","compoundWithCOMPInfo","compoundAvgApr","firstCompoundPrice","lastCompoundPrice","compoundApr","availableTokens","includes","selectedStrategy","getTokenApiData","pop","convertTokenBalance","sum","compoundWithCOMP","compoundData","compoundRate","index","prevRow","prevTotalAllocation","hasRebalanced","prevP","prevAllocation","getGovTokenPool","getUnlentBalance","selectToken","strategy","setStrategyToken","changeToken","handleCarousel","$element","jQuery","position","loadParams","latestVersion","version","enabledStrategies","strategiesParams","versionInfoExtra","param","match","currentNetworkAvailableTokens","customToken","toUpperCase","getLatestAvailableVersion","getVersionInfo","newEndTimestampObj","newStartTimestampObj","initWeb3","document","innerHTML","body","appendChild","loadCarousel","strategyChanged","dateChanged","versionChanged","idleTokenEnabled","getGlobalConfig","apyLong","textSize","versionsOptions","enabledTokens","performanceTooltip","versionDefaultValue","Breadcrumb","showPathMobile","goToSection","path","GenericSelector","innerProps","defaultValue","AssetSelector","isInteractive","pr","StatsCard","labelTooltip","SmartNumber","precision","lineHeight","unitProps","number","unit","VariationNumber","iconPos","iconSize","description","Stats_StatsChart","contracts","pb","pt","AllocationChart","src_Rebalance_Rebalance","pl","h4","RoundIconButton","mr","iconName","transition","titleParentProps","utilities_components_DateRangeModal","strategies","statsTokens","statsProtocols","strategyInfo","Title","titlePostfix","AssetsList","cols","fields","mobile","overflow","desc","showTooltip","rgb","hoverColor","isActive","src_ExecuteTransaction_ExecuteTransaction","Button","completed","Utils","SubComponent","selectedSubsection","subComponent","viewOnly","connectorName","selectedSection","route","directProps","toolProps","flexWrap","IconBox","maxWidth","icon","submenu","tool","toolIndex","flex","image","src","FundsOverview","govTokensAprs","aggregatedValues","govTokensTotalApr","govTokensUserBalance","govTokensDistribution","govTokensTotalBalance","govTokensTotalAprTooltip","idleTokenUserDistribution","govTokensDistributionTooltip","govTokensTotalBalanceTooltip","idleGovToken","getIdleGovToken","govTokenAvailableTokens","Promise","all","getGovTokensAprs","getUserDistribution","getGovTokensUserBalances","loadAssetField","depositTimestamp","getAvgAPYStats","totBalance","govTokenBalance","govToken","balance","gt","totApr","govTokenApr","dangerouslySetInnerHTML","__html","AssetField","fieldInfo","placement","message","PortfolioEquity","chartHeight","chartToken","frequencySeconds","getFrequencySeconds","component","Heading","h3","maxPrecision","govTokenIndex","tokenName","distributionFrequency","CurveRedeem","inputValue","maxSlippage","unevenAmounts","buttonDisabled","showMaxSlippage","redeemUnderlying","curveTokenConfig","curvePoolContract","curveSwapContract","curveTokenBalance","curveTokensAmounts","fastBalanceSelector","redeemUnevenAmounts","curveRedeemableIdleTokens","toggleUnevenAmounts","checkButtonDisabled","amount","changeInputValue","setFastBalanceSelector","setMaxSlippage","initToken","max_slippage","lte","normalizedAmount","normalizeTokenAmount","withdrawSlippage","curveIdleTokensAmounts","getCurveTokensAmounts","getCurveIdleTokensAmounts","getCurveSlippage","getCurveTokenPrice","curveTokenPrice","redeemableBalance","redeemUnevenAmountsChanged","setInputValue","inputChanged","maxSlippageChanged","tokenConfigChanged","calculateSlippage","loadSelectedTokenConfig","selectedPercentage","curveConfig","getCurvePoolContract","getCurveSwapContract","getCurveTokenBalance","getCurveRedeemableIdleTokens","getCurveAvailableTokens","callbackRedeem","txSucceeded","eventValue","callbackReceiptRedeem","_amount","min_amounts","console","log","coin_index","migrationParams","coinIndex","min_amount","showSlippage","curveTokenName","checked","showBalance","selectDestinationToken","slippage","FastBalanceSelector","percentage","onMouseDown","failed","textOverflow","min","placeholder","border","divider","TwitterShareButton","share","parent","w","innerWidth","open","tweet","contrastColor","styles","ShareModal","getGlobalConfigs","analytics","google","events","escape","customText","confettiEnabled","react_confetti_default","zIndex","run","recycle","innerHeight","src_TwitterShareButton_TwitterShareButton","DepositRedeem","txError","tokenAPY","curveAPY","canRedeem","canDeposit","directMint","activeModal","showBuyFlow","maxUnlentPerc","tokenApproved","skipMigration","showRedeemFlow","contractPaused","canRedeemCurve","minAmountForMint","redeemGovTokens","canDepositCurve","actionProxyContract","migrationEnabled","componentMounted","redeemCurveEnabled","depositCurveBalance","depositCurveEnabled","showAdvancedOptions","depositCurveSlippage","showETHWrapperEnabled","metaTransactionsEnabled","minAmountForMintReached","setShowRedeemFlow","setShowBuyFlow","toggleShowAdvancedOptions","toggleSkipMigration","toggleRedeemCurve","toggleDepositCurve","toggleShowETHWrapper","toggleSkipMint","toggleRedeemGovTokens","toggleMetaTransactionsEnabled","resetModal","setActiveModal","approveContract","callbackApprove","callbackReceiptApprove","curveDepositContract","proxyContract","enableERC20","biconomy","checkTokenApproved","approveToken","approve","loadTokenInfo","_callee4","curveTokenEnabled","_context4","checkContractPaused","getCurveDepositContract","checkMigration","slicedToArray","tokenBalance","idleTokenBalance","boost","checkAction","loadAPY","_callee5","_context5","defineProperty","executeAction","_callee6","contractSendResult","callbackDeposit","callbackReceiptDeposit","curvePoolContractInfo","tokensToDeposit","amounts","minMintAmount","depositParams","_tokensToDeposit","depositMetaTransactionsEnabled","_depositParams","mintProxyContractInfo","mintProxyContract","_mintProxyContract$me","functionSignature","_skipMint","txData","idleTokenToRedeem","idleTokenPrice","_callbackRedeem","_callbackReceiptRedeem","redeemParams","_context6","getFastBalanceSelector","localStorage","setLocalStorage","lendingProcessing","lendAmount","genericError","getCurveAmounts","getCurveTokenAmount","integerValue","contract","methods","function","toConsumableArray","encodeABI","sendBiconomyTxWithPersonalSign","skipMintForDeposit","genericContractCall","_callee7","_context7","setAction","loadProxyContracts","actions","_ref10","_callee10","hasProxyContract","_context10","initContract","abi","approved","_x4","getTokenAprs","tokenAprs","getCurveAPY","tokenBalanceChanged","actionChanged","fastBalanceSelectorChanged","checkMinAmountForMint","depositCurveChanged","calculateCurveSlippage","showPoolPerc","convertedAmount","depositPerc","maxUnlentPercFormatted","govTokensDisabled","govTokensEnabled","skipMintForDepositEnabled","skipMintCheckboxEnabled","redeemGovTokenEnabled","metaTransactionsAvailable","useMetaTx","totalBalance","migrateText","migration","depositCurve","showDepositOptions","showDepositCurve","showRedeemCurve","showCurveSlippage","showRebalanceOption","showAdvancedDepositOptions","batchDepositInfo","batchDepositEnabled","batchDepositDepositEnabled","depositEnabled","showBatchDeposit","isMigrationTool","ethWrapperInfo","ETHWrapperComponent","showETHWrapper","canPerformAction","showActionFlow","Migrate","migrateTextBefore","TransactionField","transaction","isDisabled","openTooltipModal","isRainbow","getWalletProvider","primary","href","fullWidth","depositOnly","govTokensBalance","tokenFeesPercentage","borderColor","minWidth","ConnectBox","src_CurveRedeem_CurveRedeem","BuyModal","showInline","availableMethods","buyToken","components_ShareModal","EstimatedEarnings","maxInputValue","loadChart","earningsYear","tokenApy","amountMonth","amount3Months","amount6Months","amountYear","perc","monthColor","month3","month3Color","month6","month6Color","year","yearColor","labelTextColorModifiers","gridYValue","_ref","labels","showAPYDisclaimer","verticalAlign","AssetPage","tokenFees","availableGovTokens","getTokenFees","getTokenApy","getTokenBalance","getUserTokenFees","getGovTokensUserTotalBalance","getTokenGovTokens","loadTokensInfo","transactionsChanged","userHasFunds","CardIconButton","src_DepositRedeem_DepositRedeem","src_FundsOverview_FundsOverview","src_EstimatedEarnings_EstimatedEarnings","TransactionsList","BetaModal","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","iconHeight","CurveDeposit","depositSlippage","migrationContract","curveTokensBalance","migrationSucceeded","migrationContractApproved","checkMigrationContractApproved","getMigrationParams","approveCallback","migrationCallback","idleTokenBalanceChanged","toMigrate","n_coins","underlyingBalanceToDeposit","getIdleTokenPrice","normalizeIdleTokenBalance","hasCurveTokens","PortfolioEquityCurve","chartwidth","loadChartData","quickDateSelectionChanged","quickDateSelection","getCurveTxs","curveTxs","tokensBalance","processedTxs","firstTxTimestamp","timeStamp","curveTokens","currentDate","prevBalances","prevTimestamp","minChartValue","aggregatedBalancesKeys","tokensBalancesPerDate","aggregatedBalance","currTimestamp","tokensData","foundBalances","tokensBalances","momentDate","filteredTokenData","filteredBalances","lastFilteredTx","lastTokenData","lastTx","lastTxBalance","formattedDate","aggregatedBalanceParsed","aggregatedBalances","balances","yFormatDecimals","daysCount","daysFrequency","ceil","areaOpacity","areaBaselineValue","ChartCustomTooltip","ChartCustomTooltipRow","tokenInfo","hex","formattedBalance","FundsOverviewCurve","compAPR","getCurveAvgBuyPrice","getCurveAvgSlippage","src_PortfolioEquityCurve_PortfolioEquityCurve","redeemBalance","depositBalance","curveZapContract","curveAvailableTokens","changeFromToken","setSelectedToken","baseToken","getSelectedToken","urlParams","param1","getCurveZapContract","updateAssetSelector","curveTokensToRedeem","src_CurveDeposit_CurveDeposit","src_FundsOverviewCurve_FundsOverviewCurve","enabledActions","WelcomeModal","email","subscribed","sendingForm","sendUserInfo","sendEmail","walletProvider","userInfo","provider","simpleIDPassUserInfo","setTimeout","err","handleSubmit","assertThisInitialized","handleValidation","axios","post","newsletterSubscription","endpoint","then","catch","walletAddress","lastLogin","getItem","parse","signedUp","parentNode","classList","onSubmit","green","Field","Input","outline","header_styles","ButtonLoader","buttonText","isLoading","gradientButton","MigrateModal","dontShowAgain","toggleDontShowAgain","removeStoredItem","migrate","tokenMigrationRoute","fieldProps","protocolsTokensBalances","minPrecision","UpgradeModal","_args3","convert","convertTool","tokensToMigrate","tokenKey","oldContractBalanceFormatted","oldIdleTokensToMigrate","newTokenConfig","Dashboard","menu","baseRoute","clickEvent","currentRoute","pageComponent","currentSection","showResetButton","timeoutId","modalTitle","modalContent","logout","setConnector","s","comingSoon","selected","bgColor","imageInactive","iconInactive","imageInactiveDark","iconInactiveDark","curveParams","CurveStrategy","u","isExternalLink","section","param2","section_is_strategy","param1_is_strategy","param1_is_token","param2_is_token","m","sectionRoute","subm","clearTimeout","setCurrentSection","loadMenu","accountInizialized","initAccount","initializeContracts","checkModals","prevParams","checkBetaApproval","checkTokensToMigrate","checkWelcomeModal","checkProtocolsTokensBalances","isOriginUrl","checkUrlOrigin","isBetaApproved","getStoredItem","showUpgradeModal","getTokensToMigrate","getProtocolsTokensBalances","welcomeIsOpen","welcomeModalProps","currTime","lastTime","frequency","migrateModalEnabled","showMigrateModal","isDashboard","replace","newRoute","location","scrollTo","routeParts","PageComponent","menuRightBorder","borderRight","DashboardMenu","overflowY","overflowX","DashboardHeader","components_BetaModal","components_UpgradeModal","components_MigrateModal","TooltipModal","content","components_WelcomeModal","simpleID","network","current","initSimpleID","baseTokenName"],"mappings":"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","file":"static/js/3.38e9b52e.chunk.js","sourcesContent":["import Title from '../Title/Title';\nimport CountUp from 'react-countup';\nimport React, { Component } from 'react';\nimport { Box, Flex, Text, Loader } from \"rimble-ui\";\nimport FunctionsUtil from '../utilities/FunctionsUtil';\n\nclass AssetsUnderManagement extends Component {\n\n  state = {\n    totalAUM:null,\n    totalAUMEndOfYear:null\n  }\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.loadTotalAUM();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const availableStrategiesChanged = !prevProps.availableStrategies && JSON.stringify(prevProps.availableStrategies) !== JSON.stringify(this.props.availableStrategies);\n    if (availableStrategiesChanged || contractsInitialized){\n      this.loadTotalAUM();\n    }\n  }\n\n  async loadTotalAUM(){\n\n    if (!this.props.availableStrategies || !this.props.contractsInitialized){\n      return true;\n    }\n\n    const {\n      avgAPY,\n      totalAUM\n    } = await this.functionsUtil.getAggregatedStats();\n\n    const totalAUMEndOfYear = totalAUM.plus(totalAUM.times(avgAPY.div(100)));\n\n    this.setState({\n      totalAUM,\n      totalAUMEndOfYear\n    });\n  }\n\n  render() {\n    return this.state.totalAUM ? (\n      <Box\n        width={1}\n      >\n        <CountUp\n          delay={0}\n          decimals={4}\n          decimal={'.'}\n          separator={''}\n          useEasing={false}\n          duration={31536000}\n          start={parseFloat(this.state.totalAUM)}\n          end={parseFloat(this.state.totalAUMEndOfYear)}\n          formattingFn={ n => '$ '+this.functionsUtil.formatMoney(n,4) }\n        >\n          {({ countUpRef, start }) => (\n            <span\n              style={ this.props.counterStyle ? this.props.counterStyle : {\n                display:'block',\n                color:'dark-gray',\n                whiteSpace:'nowrap',\n                fontFamily:this.props.theme.fonts.counter,\n                fontWeight:this.props.theme.fontWeights[5],\n                textAlign: this.props.isMobile ? 'center' : 'right',\n                fontSize: this.props.isMobile ? '1.6em' : this.props.theme.fontSizes[6]\n              }}\n              ref={countUpRef}\n            />\n          )}\n        </CountUp>\n        {\n          (typeof this.props.subtitle === 'undefined' || this.props.subtitle) && (\n            <Title\n              fontWeight={3}\n              fontSize={[2,2]}\n              color={'cellTitle'}\n              textAlign={['center','right']}\n              {...this.props.subtitleProps}\n            >\n              {\n                this.props.subtitle ? this.props.subtitle : (\n                  <Text.span fontWeight={'inherit'} color={'inherit'} fontSize={'inherit'}>Assets Under Management <Text.span color={'cellTitle'} fontWeight={3} fontSize={'70%'}>(V3 + V4)</Text.span></Text.span>\n                )\n              }\n            </Title>\n          )\n        }\n      </Box>\n    ) : (\n      <Flex\n        alignItems={'center'}\n        justifyContent={this.props.loaderAlign || 'center'}\n      >\n        <Loader\n          size={\"30px\"}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default AssetsUnderManagement;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"DepositRedeem_input__28jp2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"twitterIcon\":\"TwitterShareButton_twitterIcon__2QCmn\"};","import moment from 'moment';\nimport theme from '../theme';\nimport { Bar } from '@nivo/bar';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CustomTooltip from '../CustomTooltip/CustomTooltip';\nimport CustomTooltipRow from '../CustomTooltip/CustomTooltipRow';\n\nclass StatsChart extends Component {\n  state = {\n    chartProps:{},\n    chartType:null,\n    chartData:null,\n    chartWidth:null\n  };\n\n  async componentDidMount() {\n    this.setState({\n      chartData:null,\n      chartType:null,\n      chartProps:null,\n    });\n    this.loadUtils();\n    this.loadApiData();\n  }\n\n  async componentDidUpdate(prevProps) {\n    const showAdvancedChanged = prevProps.showAdvanced !== this.props.showAdvanced;\n    const apiResultsChanged = prevProps.apiResults !== this.props.apiResults;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    if (apiResultsChanged || showAdvancedChanged || tokenChanged){\n      this.componentDidMount();\n    }\n  }\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  parseAum = value => {\n    return (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.tokenConfig || !this.props.selectedToken || !this.props.chartMode || !this.props.apiResults){\n      return false;\n    }\n\n    const maxGridLines = 4;\n    const apiResults = this.props.apiResults;\n    const apiResults_unfiltered = this.props.apiResults_unfiltered;\n    const totalItems = apiResults.length;\n    const protocols = Object.assign([],this.props.tokenConfig.protocols);\n    // const compoundProtocol = this.props.tokenConfig.protocols.find( p => (p.name === 'compound'));\n\n    const versionInfo = globalConfigs.stats.versions[this.props.idleVersion];\n\n    let keys = {};\n    let tempData = {};\n    let gridYStep = 0;\n    let itemIndex = 0;\n    let chartData = [];\n    let chartProps = {};\n    let chartType = Line;\n    let gridYValues = [];\n    let maxChartValue = 0;\n    let axisBottomIndex = 0;\n    let idleChartData = null;\n    let firstIdleBlock = null;\n\n    switch (this.props.chartMode){\n      case 'VOL':\n        let divergingData = {};\n\n        const startTimestamp = parseInt(apiResults_unfiltered[0].timestamp);\n        const endTimestamp = parseInt(moment()._d.getTime()/1000);\n\n        for (let timestamp=startTimestamp;timestamp<=endTimestamp;timestamp+=86400){\n          const date = moment(timestamp*1000).format(\"YYYY/MM/DD\");\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n        }\n\n        let lastRow = null;\n        apiResults_unfiltered.forEach(row => {\n          const date = moment(row.timestamp*1000).format(\"YYYY/MM/DD\");\n          const idleTokens = this.functionsUtil.fixTokenDecimals(row.idleSupply,18);\n\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp:row.timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n\n          if (lastRow){\n            const idleTokensPrev = this.functionsUtil.fixTokenDecimals(lastRow.idleSupply,18);\n            const idleTokensDiff = !idleTokens.eq(idleTokensPrev);\n            if (idleTokensDiff){\n              const diff = idleTokens.minus(idleTokensPrev);\n              // Deposits\n              if (diff.gte(0)){\n                divergingData[date].deposits+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,divergingData[date].deposits);\n              } else {\n                divergingData[date].redeems+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,Math.abs(divergingData[date].deposits));\n              }\n            }\n\n          } else {\n            divergingData[date].deposits+=parseFloat(idleTokens);\n          }\n\n          lastRow = row;\n        });\n\n        chartData = Object.values(divergingData).filter(v => {\n          return (!this.props.startTimestamp || v.timestamp>=this.props.startTimestamp) && (!this.props.endTimestamp || v.timestamp<=this.props.endTimestamp);\n        });\n\n        let maxRange = 0;\n        chartData.forEach(v => {\n          maxRange = Math.max(maxRange,Math.abs(v.deposits),Math.abs(v.redeems));\n        })\n\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          indexBy: 'date',\n          enableLabel: false,\n          minValue:-maxRange,\n          maxValue:maxRange,\n          label: d => {\n            return Math.abs(d.value);\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days',\n          },\n          axisLeft: null,\n          axisRight: {\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:8,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(Math.abs(v),0)\n          },\n          markers: [\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { strokeOpacity: 0 },\n              textStyle: { fill: theme.colors.transactions.action.deposit },\n              legend: 'deposits',\n              legendPosition: 'top-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { stroke: theme.colors['dark-gray'], strokeDasharray: '5 3' },\n              textStyle: { fill: theme.colors.transactions.action.redeem },\n              legend: 'redeems',\n              legendPosition: 'bottom-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n          ],\n          keys:['deposits','redeems'],\n          padding:0.4,\n          colors:[theme.colors.transactions.action.deposit, theme.colors.transactions.action.redeem],\n          labelTextColor: 'inherit:darker(1.4)',\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 80 : 100,\n              itemHeight: 18,\n              translateX: 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            },\n            tooltip:{\n              container:{\n                boxShadow:null,\n                background:null\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 50, bottom: 45, left: 50 } : { top: 20, right: 70, bottom: 70, left: 50 },\n          tooltip:(data) => {\n            const xFormatted = this.functionsUtil.strToMoment(data.indexValue).format('MMM DD');\n            const point = {\n              id:data.id,\n              data:{\n                xFormatted\n              }\n            };\n            const depositFormatted = this.functionsUtil.abbreviateNumber(data.data.deposits,2)+' '+this.props.selectedToken;\n            const redeemFormatted = this.functionsUtil.abbreviateNumber(data.data.redeems,2)+' '+this.props.selectedToken;\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                <CustomTooltipRow\n                  label={'Deposits'}\n                  color={theme.colors.deposit}\n                  value={depositFormatted}\n                />\n                <CustomTooltipRow\n                  label={'Redeem'}\n                  color={theme.colors.redeem}\n                  value={redeemFormatted}\n                />\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      /*\n      case 'AUM_ALL':\n        await this.functionsUtil.asyncForEach(Object.keys(availableTokens[globalConfigs.network.requiredNetwork]),async (tokenName,i) => {\n          const tokenConfig = availableTokens[globalConfigs.network.requiredNetwork][tokenName];\n          const tokenDataApi = await this.props.getTokenData(tokenConfig.address);\n          chartData.push({\n            id:tokenName,\n            color: tokenConfig.color,\n            data: tokenDataApi.map((d,i) => {\n              const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n              const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,tokenConfig.decimals);\n              const aum = idleTokens.times(idlePrice);\n              return {\n                x: moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\"),\n                y: parseInt(aum.toString())\n              };\n            })\n          });\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken,\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v),\n            orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            legendPosition: 'middle'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            format: '%b %d',\n            tickValues: this.props.isMobile ? 'every 4 days' : 'every 3 days',\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 36,\n            legendPosition: 'middle'\n          },\n          enableArea:false,\n          curve:\"linear\",\n          enableSlices:'x',\n          enableGridX:true,\n          enableGridY:false,\n          colors:d => d.color,\n          pointSize:0,\n          pointColor:{ from: 'color', modifiers: []},\n          pointBorderWidth:1,\n          pointLabel:\"y\",\n          pointLabelYOffset:-12,\n          useMesh:true,\n          animate:false,\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 60, bottom: 40, left: 60 },\n        };\n      break;\n      */\n      case 'AUM':\n\n        maxChartValue = 0;\n\n        chartData.push({\n          id:'AUM',\n          color: 'hsl('+globalConfigs.stats.tokens[this.props.selectedToken].color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n            const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n            const aum = idleTokens.times(idlePrice);\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(aum.toString());\n\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x,y };\n          })\n        });\n\n        // Add allocation\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          apiResults.map((d,i) => {\n            return d.protocolsData.filter((protocolAllocation,x) => {\n                return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            })\n            .map((protocolAllocation,z) => {\n              const protocolPaused = this.functionsUtil.BNify(protocolAllocation.rate).eq(0);\n              if (!protocolPaused){\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals));\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                let foundItem = chartData[0].data.filter(item => { return item.x === x });\n                if (foundItem){\n                  foundItem = foundItem[0];\n                  const pos = chartData[0].data.indexOf(foundItem);\n                  if (!foundItem.allocations){\n                    foundItem.allocations = {};\n                  }\n                  foundItem.allocations[p.name] = y;\n                  chartData[0].data[pos] = foundItem;\n                }\n              }\n              return undefined;\n            })[0]\n          }).filter((v) => { return v !== undefined; } )\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:v => this.functionsUtil.formatMoney(v,v<1 ? 3 :0),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 0,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:true,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            if (typeof point === 'object' && typeof point.data === 'object'){\n              return (\n                <CustomTooltip\n                  point={point}\n                >\n                  <CustomTooltipRow\n                    label={point.serieId}\n                    color={point.serieColor}\n                    value={point.data.yFormatted}\n                  />\n                  {\n                    point.data.allocations && typeof point.data.allocations === 'object' &&\n                      Object.keys(point.data.allocations).map(protocolName => {\n                        const protocolColor = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n                        const protocolAllocation = point.data.allocations[protocolName];\n                        const protocolAllocationFormatted = this.functionsUtil.formatMoney(protocolAllocation,protocolAllocation<1 ? 3 : 0);\n                        const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                        return (\n                          <CustomTooltipRow\n                            label={protocolName}\n                            color={protocolColor}\n                            key={`${point.id}_${protocolName}`}\n                            value={`${protocolAllocationFormatted} (${protocolAllocationPerc})`}\n                          />\n                        );\n                      })\n                  }\n                </CustomTooltip>\n              );\n              /*\n              return (\n                <div\n                    key={point.id}\n                    style={{\n                      background: 'white',\n                      color: 'inherit',\n                      fontSize: 'inherit',\n                      borderRadius: '2px',\n                      boxShadow: 'rgba(0, 0, 0, 0.25) 0px 1px 2px',\n                      padding: '5px 9px'\n                    }}\n                >\n                  <div>\n                    <table style={{width:'100%',borderCollapse:'collapse'}}>\n                      <tbody>\n                        <tr>\n                          <td style={{padding:'3px 5px'}}>\n                            <span style={{display:'block', width: '12px', height: '12px', background: point.serieColor}}></span>\n                          </td>\n                          <td style={{padding:'3px 5px'}}>{point.serieId}</td>\n                          <td style={{padding:'3px 5px'}}><strong>{point.data.yFormatted}</strong></td>\n                        </tr>\n                        {\n                          point.data.allocations && typeof point.data.allocations === 'object' &&\n                            Object.keys(point.data.allocations).map(protocolName => {\n                              const protocolColor = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n                              const protocolAllocation = this.functionsUtil.formatMoney(point.data.allocations[protocolName],0);\n                              const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                              return (\n                                <tr key={`${point.id}_${protocolName}`}>\n                                  <td style={{padding:'3px 5px'}}>\n                                    <span style={{display:'block', width: '12px', height: '12px', background: protocolColor}}></span>\n                                  </td>\n                                  <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{protocolName}</td>\n                                  <td style={{padding:'3px 5px'}}><strong>{protocolAllocation}</strong> ({protocolAllocationPerc})</td>\n                                </tr>\n                              );\n                            })\n                        }\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              );\n              */\n            }\n\n            return null;\n          }\n        };\n      break;\n      case 'ALL':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\");\n\n          let row = {\n            date\n          };\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const foundProtocol = this.props.tokenConfig.protocols.find((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() });\n            if (foundProtocol){\n              const protocolName = this.functionsUtil.capitalize(foundProtocol.name);\n              if (!protocolPaused){\n                let allocation = parseFloat(this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals));\n                keys[protocolName] = 1;\n                row[protocolName] = allocation;\n                row[`${protocolName}Color`] = 'hsl('+globalConfigs.stats.protocols[protocolName.toLowerCase()].color.hsl.join(',')+')';\n                // console.log(protocolName,this.functionsUtil.BNify(protocolData.allocation).toString(),this.props.tokenConfig.decimals,allocation);\n                maxChartValue = Math.max(maxChartValue,allocation);\n              } else {\n                row[protocolName] = 0;\n              }\n            }\n          });\n\n\n          tempData[date] = row;\n        });\n\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n            orient: 'left',\n            tickSize: 0,\n            tickPadding: 10,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            tickValues:gridYValues,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickSize: 0,\n            tickPadding: 10,\n            orient: 'bottom-left',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days'\n          },\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            tooltip: {\n              container:{\n                padding:'0',\n                boxShadow:'none',\n                background:'transparent',\n              },\n              tableCell:{\n                padding:'0'\n              }\n            },\n            axis: {\n              ticks: {\n                text: {\n                  fontSize:this.props.isMobile ? 12 : 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize:this.props.isMobile ? 12 : 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 60 },\n          tooltip:({ id, value, color }) => {\n            const allocation = this.functionsUtil.formatMoney(value,0);\n            return (\n              <DashboardCard\n                cardProps={{\n                  py:1,\n                  px:2,\n                  width:1,\n                }}\n              >\n                <table\n                  style={{width:'100%',borderCollapse:'collapse'}}\n                >\n                  <tbody>\n                    <tr>\n                      <td style={{padding:'3px 5px'}}>\n                        <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                      </td>\n                      <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                      <td style={{padding:'3px 5px'}}><strong>{allocation} {this.props.selectedToken}</strong></td>\n                    </tr>\n                  </tbody>\n                </table>\n              </DashboardCard>\n            )\n          }\n        }\n      break;\n      case 'ALL_PERC':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\")\n          let row = {\n            date:moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\")\n          };\n          if (tempData[date]){\n            row = tempData[date];\n          }\n\n          const totalAllocation = d.protocolsData.reduce((accumulator,protocolAllocation) => {\n            const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n            return this.functionsUtil.BNify(accumulator).plus(allocation);\n          },0);\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const protocolName = this.props.tokenConfig.protocols.filter((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() })[0].name;\n            if (!protocolPaused){\n              const allocation = this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals);\n              const allocationPerc = parseFloat(allocation.div(totalAllocation).times(100));\n              keys[protocolName] = 1;\n              row[protocolName] = allocationPerc;\n              row[`${protocolName}Color`] = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n            } else if (typeof row[protocolName] !== undefined) {\n              row[protocolName] = 0;\n            } \n          });\n          \n          tempData[date] = row;\n        });\n\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          data: chartData,\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 40, bottom: 40, left: 60 },\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => parseInt(v)+'%'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            orient: 'bottom',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days'\n          },\n          tooltip:({ id, value, color }) => {\n            const allocation = parseInt(value)===100 ? this.functionsUtil.formatMoney(value,0) : this.functionsUtil.formatMoney(value,2);\n            return (\n              <table style={{width:'100%',borderCollapse:'collapse'}}>\n                <tbody>\n                  <tr>\n                    <td style={{padding:'3px 5px'}}>\n                      <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                    </td>\n                    <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                    <td style={{padding:'3px 5px'}}><strong>{allocation}%</strong></td>\n                  </tr>\n                </tbody>\n              </table>\n            )\n          }\n        }\n      break;\n      case 'APR':\n\n        maxChartValue = 0;\n\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n          chartData.push({\n            id:p.name,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                const protocolPaused = this.functionsUtil.BNify(protocolAllocation.rate).eq(0);\n                if (!protocolPaused){\n                  const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                  const y = parseFloat(this.functionsUtil.fixTokenDecimals(protocolAllocation.rate,18));\n\n                  maxChartValue = Math.max(maxChartValue,y);\n\n                  return { x, y };\n                }\n                return undefined;\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(this.functionsUtil.fixTokenDecimals(d.idleRate,18));\n\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x, y };\n          })\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(2)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 0,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    // const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'SCORE':\n\n        let prevValue = 0;\n        maxChartValue = 0;\n\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n\n          chartData.push({\n            id:p.name,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(protocolAllocation.defiScore);\n\n                y = isNaN(y) || !y ? prevValue : y;\n                prevValue = y;\n                maxChartValue = Math.max(maxChartValue,y);\n\n                return { x, y };\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            let y = parseFloat(d.idleScore);\n            y = isNaN(y) || !y ? prevValue : y;\n            prevValue = y;\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x, y };\n          })\n        });\n\n        // debugger;\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(1),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 15,\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 0,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE_V4':\n\n        itemIndex = 0;\n        maxChartValue = 0;\n        // let prevApy = null;\n        let prevApr = null;\n        let prevData = null;\n        let startBalance = this.functionsUtil.BNify(1);\n        let currentBalance = this.functionsUtil.BNify(1);\n        let avgApy = this.functionsUtil.BNify(0);\n\n        // console.log('PRICE_V4',apiResults);\n\n        idleChartData = apiResults.map((d,i) => {\n\n          let y = 0;\n          let apy = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n          const apr = this.functionsUtil.fixTokenDecimals(d.idleRate,18).div(100);\n          // const apy = this.functionsUtil.apr2apy(apr);\n          \n          avgApy = avgApy.plus(apr.times(100));\n\n          if (prevApr){\n            const days = (d.timestamp-prevData.timestamp)/86400;\n            // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n            const earnings = currentBalance.times(prevApr.times(days).div(365));\n            currentBalance = currentBalance.plus(earnings);\n\n            const earning = currentBalance.div(startBalance).minus(1).times(100);\n            y = parseFloat(earning);\n\n            // apy = earning.times(365).div(totDays).toFixed(2);\n            apy = avgApy.div(i+1).toFixed(2);\n          }\n\n          prevData = d;\n          // prevApy = apy;\n          prevApr = apr;\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          return { x, y, apy, blocknumber, itemPos };\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        protocols.forEach( p => {\n\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          // prevApy = null;\n          prevApr = null;\n          prevData = null;\n          let baseProfit = 0;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n          avgApy = this.functionsUtil.BNify(0);\n          startBalance = this.functionsUtil.BNify(1);\n          currentBalance = this.functionsUtil.BNify(1);\n\n          apiResults.forEach( (d,i) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              const protocolRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n                if (protocolData[field]){\n                  return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(protocolData[field]));\n                }\n                return this.functionsUtil.BNify(acc);\n              },0) : this.functionsUtil.BNify(protocolData[rateField]);\n\n              const protocolPaused = protocolRate.eq(0);\n              if (!protocolPaused){\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null){\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => (d1.blocknumber>=firstProtocolBlock) );\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                    }\n                  }\n                }\n\n                let rowData = {};\n\n                let y = 0;\n                let apy = 0;\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                const apr = this.functionsUtil.fixTokenDecimals(protocolRate,18).div(100);\n\n                avgApy = avgApy.plus(apr.times(100));\n                // const apy = this.functionsUtil.apr2apy(apr);\n\n                if (prevData){\n                  const days = (d.timestamp-prevData.timestamp)/86400;\n                  // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n                  const earnings = currentBalance.times(prevApr.times(days).div(365));\n                  currentBalance = currentBalance.plus(earnings);\n\n                  const earning = currentBalance.div(startBalance).minus(1).times(100);\n                  y = parseFloat(earning)+baseProfit;\n\n                  apy = avgApy.div(i+1).toFixed(2);\n                }\n\n                prevData = d;\n                prevApr = apr;\n\n                if (firstIdleBlock === null){\n                  firstIdleBlock = parseInt(d.blocknumber);\n                }\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                const itemPos = Math.floor(itemIndex/totalItems*100);\n                // const blocknumber = d.blocknumber;\n\n                itemIndex++;\n\n                rowData = {\n                  x,\n                  y,\n                  apy,\n                  itemPos\n                };\n\n                itemIndex++;\n                chartRow.data.push(rowData);\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: idleChartData\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              itemWidth: this.props.isMobile ? 70 : 100,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE':\n        // let prevTokenPrice = null;\n        maxChartValue = 0;\n        let firstTokenPrice = null;\n\n        idleChartData = apiResults.map((d,i) => {\n\n          let y = 0;\n          let apy = 0;\n          let days = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n          const tokenPrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n\n          if (!firstTokenPrice){\n            firstTokenPrice = tokenPrice;\n          } else {\n            y = parseFloat(tokenPrice.div(firstTokenPrice).minus(1).times(100));\n\n            days = (d.timestamp-apiResults[0].timestamp)/86400;\n            const earning = tokenPrice.div(firstTokenPrice).minus(1).times(100);\n            apy = earning.times(365).div(days).toFixed(2);\n\n            // console.log(firstTokenPrice.toString(),tokenPrice.toString(),earning.toString(),days,y,apy);\n          }\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          return { x, y, apy, blocknumber, itemPos };\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        await this.functionsUtil.asyncForEach(protocols,async (p) => {\n\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          let baseProfit = 0;\n          firstTokenPrice = null;\n          let lastRowData = null;\n          let lastTokenPrice = null;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n\n          await this.functionsUtil.asyncForEach(apiResults,async (d) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData && protocolData[rateField]){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              const protocolPaused = this.functionsUtil.BNify(protocolData[rateField]).eq(0);\n              if (!protocolPaused){\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null){\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => {\n                      return d1.blocknumber>=firstProtocolBlock;\n                    });\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                    }\n                  }\n                }\n\n                let rowData = {};\n                let tokenExchangeRate = protocolData.price;\n                let tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n\n                // Take data from\n                if (protocolInfo && protocolInfo.data && protocolInfo.data[p.address.toLowerCase()] && protocolInfo.data[p.address.toLowerCase()][d.blocknumber]){\n                  tokenExchangeRate = this.functionsUtil.BNify(globalConfigs.stats.protocols[p.name].data[p.address.toLowerCase()][d.blocknumber]);\n                  tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                }/* else if (p.name === 'aave'){\n                  // Token holders (aDAI = 0xc025c03e10f656d3ee76685d53d236824d8ef3da , aUSDC = 0xd2c734fbd8f5d1c809185e014016dd4097e94711)\n                  let aaveTokenBalance = await this.functionsUtil.genericContractCall(p.token,'balanceOf',['0xd2c734fbd8f5d1c809185e014016dd4097e94711'],{},d.blocknumber);\n                  if (aaveTokenBalance){\n                    if (!Object.values(aave_data).length){\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(1,p.decimals);\n                      aave_data[d.blocknumber] = aaveTokenBalance.toString();\n                    } else {\n                      const firstBalance = Object.values(aave_data)[0];\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(this.functionsUtil.BNify(aaveTokenBalance).div(this.functionsUtil.BNify(firstBalance)).toFixed(p.decimals),p.decimals);\n                      aave_data[d.blocknumber] = tokenExchangeRate.toString();\n                    }\n                  }\n                }\n                */\n\n                let y = baseProfit;\n                let apy = 0;\n\n                if (!firstTokenPrice){\n                  firstTokenPrice = tokenPriceFixed;\n                } else {\n                  if (tokenPriceFixed.lt(lastTokenPrice)){\n                    firstTokenPrice = tokenPriceFixed;\n                    const lastYDiff = chartRow.data[chartRow.data.length-1].y-chartRow.data[chartRow.data.length-2].y;\n                    y = lastRowData.y+lastYDiff;\n                    baseProfit = y;\n                  } else {\n                    y += parseFloat(tokenPriceFixed.div(firstTokenPrice).minus(1).times(100));\n                  }\n\n                  const days = (d.timestamp-apiResults[0].timestamp)/86400;\n                  const earning = tokenPriceFixed.div(firstTokenPrice).minus(1).times(100);\n                  apy = earning.times(365).div(days).toFixed(2);\n                }\n\n                y = Math.max(0,y);\n                maxChartValue = Math.max(maxChartValue,y);\n\n                const itemPos = Math.floor(itemIndex/totalItems*100);\n\n                rowData = {\n                  x,\n                  y,\n                  apy,\n                  itemPos\n                };\n\n                itemIndex++;\n                lastRowData = rowData;\n                chartRow.data.push(rowData);\n                lastTokenPrice = tokenPriceFixed;\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: idleChartData\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              itemWidth: this.props.isMobile ? 70 : 100,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: '#000'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:theme.colors.legend,\n                  fontFamily: theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fontWeight:500,\n                fontFamily: theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      chartType,\n      chartProps,\n      chartData\n    });\n  }\n\n  render() {\n    return(\n      <GenericChart\n        showLoader={true}\n        {...this.state.chartProps}\n        height={this.props.height}\n        type={this.state.chartType}\n        data={this.state.chartData}\n        width={this.state.chartWidth}\n        isMobile={this.props.isMobile}\n        parentId={this.props.parentId}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default StatsChart;","import { Flex, Text } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\n\nclass Rebalance extends Component {\n\n  state = {\n    loading:true,\n    processing:{\n      rebalance:{\n        txHash:null,\n        loading:false\n      },\n    },\n    shouldRebalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.checkRebalance();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged || accountChanged){\n      this.checkRebalance();\n    }\n  }\n\n  checkRebalance = async () => {\n    this.setState({\n      loading:true,\n    });\n\n    const shouldRebalance = await this.functionsUtil.checkRebalance(this.props.tokenConfig);\n\n    this.setState({\n      loading:false,\n      shouldRebalance\n    });\n  }\n\n  rebalance = async (e) => {\n    e.preventDefault();\n\n    const callback = (tx,error) => {\n\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Rebalance',\n        eventAction: this.props.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      let txDenied = false;\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      if (tx.status === 'success'){\n        // Toast message\n        window.toastProvider.addMessage(`Rebalance completed`, {\n          secondaryMessage: `Now the pool is balanced!`,\n          colorTheme: 'light',\n          actionHref: \"\",\n          actionText: \"\",\n          variant: \"success\",\n        });\n\n      } else if (!txDenied){\n        window.toastProvider.addMessage(`Rebalance error`, {\n          secondaryMessage: `The rebalance has failed, try again...`,\n          colorTheme: 'light',\n          actionHref: \"\",\n          actionText: \"\",\n          variant: \"failure\",\n        });\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          rebalance:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n\n      this.checkRebalance();\n    }\n\n    const callback_receipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            rebalance:{\n              ...prevState.processing.rebalance,\n              txHash\n            }\n          }\n        })\n      );\n    };\n\n    this.props.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'rebalance', [], null , callback, callback_receipt);\n\n    this.setState({\n      processing:{\n        rebalance:{\n          txHash:null,\n          loading:true\n        }\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Flex\n        px={3}\n        width={1}\n        minHeight={'100px'}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n      {\n        this.state.loading ? (\n          <FlexLoader\n            flexProps={{\n              flexDirection:'row'\n            }}\n            loaderProps={{\n              size:'30px'\n            }}\n            textProps={{\n              ml:2\n            }}\n            text={'Checking rebalance...'}\n          />\n        ) : (\n          this.state.processing.rebalance.loading ? (\n            <TxProgressBar web3={this.props.web3} waitText={`Rebalance estimated in`} endMessage={`Finalizing rebalance request...`} hash={this.state.processing.rebalance.txHash} />\n          ) : (\n            <Flex\n              width={1}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                mt={0}\n                mb={3}\n                textAlign={'center'}\n              >\n                {this.state.shouldRebalance ? 'Rebalance the entire pool. All users will bless you.' : 'The pool is already balanced.'}\n              </Text>\n              <RoundButton\n                buttonProps={{\n                  width:'auto',\n                  disabled:!this.state.shouldRebalance\n                }}\n                handleClick={e => this.rebalance(e)}\n              >\n                Rebalance\n              </RoundButton>\n            </Flex>\n          )\n        )\n      }\n      </Flex>\n    )\n  }\n}\n\nexport default Rebalance;","import React from \"react\";\nimport {\n  Modal,\n  Button,\n  Flex,\n  Field,\n  Select\n} from \"rimble-ui\";\nimport moment from 'moment';\nimport ModalCard from './ModalCard';\nimport 'react-date-range/dist/styles.css';\nimport { DateRange } from 'react-date-range';\nimport 'react-date-range/dist/theme/default.css';\nimport './DateRangeModal.css';\n\nclass DateRangeModal extends React.Component {\n\n  state = {\n    quickSelection:'',\n    ranges:{\n      startDate: this.props.startDate ? this.props.startDate : new Date(),\n      endDate: this.props.endDate ? this.props.endDate : new Date(),\n      key: 'selection'\n    }\n  }\n\n  handleSelect(ranges){\n    this.setState({\n      quickSelection:'',\n      ranges:ranges.selection\n    });\n  }\n\n  handleQuickSelect(e){\n    let startDate = null;\n    let endDate = moment(new Date());\n    const quickSelection = e.target.value;\n\n    switch (quickSelection){\n      case 'day':\n        startDate = endDate.clone().subtract(1,'day');\n      break;\n      case 'week':\n        startDate = endDate.clone().subtract(1,'week');\n      break;\n      case 'weeks':\n        startDate = endDate.clone().subtract(2,'week');\n      break;\n      case 'month':\n        startDate = endDate.clone().subtract(1,'month');\n      break;\n      default:\n        startDate = null;\n        endDate = null;\n      break;\n    }\n\n    if (startDate && endDate){\n      startDate = startDate._d;\n      endDate = endDate._d;\n\n      const ranges = {\n        startDate,\n        endDate,\n        key:'selection'\n      };\n\n      this.setState({\n        ranges,\n        quickSelection\n      }, () => {\n        this.closeModal();\n      });\n    }\n  }\n\n  componentDidUpdate = (prevProps) => {\n    if (prevProps.startDate !== this.props.startDate || prevProps.endDate !== this.props.endDate){\n      this.setState({\n        ranges:{\n          startDate: this.props.startDate ? this.props.startDate : new Date(),\n          endDate: this.props.endDate ? this.props.endDate : new Date(),\n          key: 'selection'\n        }\n      });\n    }\n  }\n\n  closeModal(){\n    const newState = this.props.handleSelect(this.state.ranges,this.state.quickSelection);\n    const ranges = {\n      startDate:newState.startTimestampObj ? newState.startTimestampObj._d : new Date(),\n      endDate:newState.endTimestampObj ? newState.endTimestampObj._d : new Date(),\n      key: 'selection'\n    };\n    this.setState({\n      ranges\n    });\n    this.props.closeModal();\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        <ModalCard closeFunc={this.props.closeModal}>\n          <ModalCard.Header title={'Select Date Range'}>\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex width={1} flexDirection={'column'} alignItems={'center'}>\n              <Field label=\"Quick Date Selection\" style={{display:'flex',width:'100%',alignItems:'stretch',justifyContent:'center'}}>\n                <Select\n                  style={{\n                    fontSize:'14px',\n                    height:'2.5em',\n                    boxShadow:'none',\n                    color:this.props.theme.colors.counter,\n                    backgroundColor:this.props.theme.colors.cardBg\n                  }}\n                  width={'100%'}\n                  required={true}\n                  onChange={this.handleQuickSelect.bind(this)}\n                  value={this.state.quickSelection}\n                  options={[\n                    { value: '', label: \"Select an option\" },\n                    { value: \"day\", label: \"Last day\" },\n                    { value: \"week\", label: \"Last week\" },\n                    { value: \"weeks\", label: \"Last 2 weeks\" },\n                    { value: \"month\", label: \"Last month\" }\n                  ]}\n                />\n              </Field>\n              <DateRange\n                ranges={[this.state.ranges]}\n                minDate={this.props.minDate}\n                maxDate={this.props.maxDate}\n                className={this.props.themeMode}\n                onChange={this.handleSelect.bind(this)}\n              />\n            </Flex>\n          </ModalCard.Body>\n          <ModalCard.Footer>\n            <Flex px={[2,0]} flexDirection={['column', 'row']} width={1} justifyContent={'center'}>\n              <Button\n                my={2}\n                mx={[0, 2]}\n                borderRadius={4}\n                mainColor={'blue'}\n                onClick={ e => this.closeModal(e) }\n                size={this.props.isMobile ? 'small' : 'medium'}\n              >\n              APPLY\n              </Button>\n            </Flex>\n          </ModalCard.Footer>\n        </ModalCard>\n      </Modal>\n    );\n  }\n\n}\n\nexport default DateRangeModal;","import { Flex } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\n\nclass ExecuteTransaction extends Component {\n\n  state = {\n    txStatus:null,\n    processing:{\n      txHash:null,\n      loading:false\n    }\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  execute(){\n\n    const callback = (tx,error) => {\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Transaction',\n        eventLabel: this.props.methodName,\n        eventAction: this.props.contractName\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      const txSucceeded = tx.status === 'success';\n      if (txSucceeded){\n        if (typeof this.props.callback === 'function'){\n          this.props.callback();\n        }\n      }\n\n      this.setState({\n        txStatus:tx.status,\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      });\n    };\n\n    const callbackReceipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        txStatus:'processing',\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    this.functionsUtil.contractMethodSendWrapper(this.props.contractName,this.props.methodName,this.props.params,callback,callbackReceipt);\n\n    this.setState((prevState) => ({\n      txStatus:'loading',\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  render() {\n    const ExecuteComponent = this.props.Component;\n    return (\n      <Flex\n        {...this.props.parentProps}\n      >\n        {\n          this.state.txStatus === 'success' && this.props.children ?\n            this.props.children\n          : this.state.processing && this.state.processing.loading ? (\n            <TxProgressBar\n              web3={this.props.web3}\n              {...this.props.progressBarProps}\n              hash={this.state.processing.txHash}\n              waitText={`${this.props.action} estimated in`}\n              cancelTransaction={this.cancelTransaction.bind(this)}\n              endMessage={`Finalizing ${this.props.action} request...`}\n            />\n          ) : (\n            <ExecuteComponent\n              onClick={this.execute.bind(this)}\n              {...this.props.componentProps}\n            >\n              {this.props.componentProps.value}\n            </ExecuteComponent>\n          )\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default ExecuteTransaction;\n","import moment from 'moment';\nimport Title from '../Title/Title';\nimport StatsChart from './StatsChart';\nimport React, { Component } from 'react';\nimport Rebalance from '../Rebalance/Rebalance';\nimport StatsCard from '../StatsCard/StatsCard';\nimport AssetsList from '../AssetsList/AssetsList';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport GenericSelector from '../GenericSelector/GenericSelector';\nimport RoundIconButton from '../RoundIconButton/RoundIconButton';\nimport VariationNumber from '../VariationNumber/VariationNumber';\nimport AllocationChart from '../AllocationChart/AllocationChart';\nimport DateRangeModal from '../utilities/components/DateRangeModal';\nimport { Flex, Text, Heading, Box, Icon, Button, Link } from 'rimble-ui';\nimport ExecuteTransaction from '../ExecuteTransaction/ExecuteTransaction';\nimport AssetsUnderManagement from '../AssetsUnderManagement/AssetsUnderManagement';\n\nclass Stats extends Component {\n  state = {\n    aum:null,\n    apr:null,\n    days:'-',\n    delta:null,\n    earning:null,\n    minDate:null,\n    maxDate:null,\n    carouselMax:1,\n    rebalances:'-',\n    buttonGroups:[],\n    apiResults:null,\n    carouselIndex:0,\n    idleVersion:null,\n    statsVersions:{},\n    minStartTime:null,\n    endTimestamp:null,\n    showAdvanced:true,\n    govTokensPool:null,\n    unlentBalance:null,\n    quickSelection:null,\n    startTimestamp:null,\n    endTimestampObj:null,\n    shouldRebalance:null,\n    carouselOffsetLeft:0,\n    startTimestampObj:null,\n    showRefreshIdleSpeed:false,\n    apiResults_unfiltered:null,\n    dateRangeModalOpened:false\n  };\n\n  quickSelections = {\n    day:'Last day',\n    week:'Last week',\n    weeks:'Last 2 weeks',\n    month:'Last month'\n  };\n\n  // Utils\n  functionsUtil = null;\n  componentUnmounted = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount() {\n    this.loadUtils();\n    await this.loadParams();\n  }\n\n  componentWillUnmount(){\n    this.componentUnmounted = true;\n  }\n\n  async setStateSafe(newState,callback=null) {\n    if (!this.componentUnmounted){\n      return this.setState(newState,callback);\n    }\n    return null;\n  }\n\n  showRefreshIdleSpeed(){\n    this.setState({\n      showRefreshIdleSpeed:true\n    });\n  }\n\n  getLatestAvailableVersion(){\n    const statsVersions = globalConfigs.stats.versions;\n    let latestVersion = null;\n    Object.keys(statsVersions).forEach( version => {\n      const versionInfo = statsVersions[version];\n      if (versionInfo.enabledStrategies.includes(this.props.selectedStrategy)){\n        latestVersion = version;\n      }\n    });\n\n    return latestVersion;\n  }\n\n  getVersionInfo(version){\n    if (!version){\n      version = this.state.idleVersion;\n    }\n\n    if (!globalConfigs.stats.versions[version]){\n      return null;\n    }\n\n    const versionInfo = Object.assign({},globalConfigs.stats.versions[version]);\n\n    if (versionInfo.strategiesParams && versionInfo.strategiesParams[this.props.selectedStrategy]){\n      const versionInfoExtra = versionInfo.strategiesParams[this.props.selectedStrategy];\n      Object.keys(versionInfoExtra).forEach( param => {\n        versionInfo[param] = versionInfoExtra[param];\n      });\n    }\n\n    return versionInfo;\n  }\n\n  async loadParams() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    const newState = {};\n    const { match: { params } } = this.props;\n\n    const currentNetworkAvailableTokens = Object.keys(this.props.availableTokens);\n\n    if (!!params.customToken && currentNetworkAvailableTokens.indexOf(params.customToken.toUpperCase()) !== -1 ){\n      newState.selectedToken = params.customToken.toUpperCase();\n    } else {\n      newState.selectedToken = this.props.selectedToken.toUpperCase();\n    }\n\n    newState.tokenConfig = this.props.availableTokens[newState.selectedToken];\n    newState.minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp,'YYYY-MM-DD');\n    newState.maxEndDate = moment();\n\n    newState.endTimestampObj = moment(moment().format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    newState.latestVersion = this.getLatestAvailableVersion();\n    newState.idleVersion = this.state.idleVersion === null ? newState.latestVersion : this.state.idleVersion;\n\n    const versionInfo = this.getVersionInfo(newState.idleVersion);\n\n    // console.log('loadParams',newState.latestVersion,newState.idleVersion,versionInfo);\n\n    if (newState.idleVersion && versionInfo.endTimestamp){\n      const newEndTimestampObj = moment(moment(versionInfo.endTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.endTimestampObj.isAfter(newEndTimestampObj)){\n        newState.endTimestampObj = newEndTimestampObj;\n        newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n      }\n\n      if (!newState.maxEndDate || newState.maxEndDate.isAfter(newEndTimestampObj)){\n        newState.maxEndDate = newEndTimestampObj;\n      }\n    }\n\n    newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n\n    // Set start date\n    newState.startTimestampObj = newState.endTimestampObj.clone().subtract(1,'month');\n    newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n\n    if (newState.idleVersion && versionInfo.startTimestamp){\n      const newStartTimestampObj = moment(moment(versionInfo.startTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.startTimestampObj.isBefore(newStartTimestampObj)){\n        newState.startTimestampObj = newStartTimestampObj;\n        newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n      }\n\n      if (newState.minStartTime.isBefore(newStartTimestampObj)){\n        newState.minStartTime = newStartTimestampObj;\n      }\n    }\n\n    newState.minDate = newState.minStartTime._d;\n    newState.maxDate = newState.maxEndDate._d;\n\n    if (newState !== this.state){\n      await this.setStateSafe(newState);\n    }\n  }\n\n  setDateRange = (ranges,quickSelection=null) => {\n\n    const minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp);\n\n    let startTimestampObj = moment(ranges.startDate).isSameOrAfter(minStartTime) ? moment(ranges.startDate) : minStartTime;\n    let endTimestampObj = moment(ranges.endDate);\n\n    if (startTimestampObj.isSame(endTimestampObj)){\n      endTimestampObj.add(1,'day');\n    }\n\n    endTimestampObj = moment(endTimestampObj.format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    if (startTimestampObj.isBefore(this.state.minStartTime)){\n      startTimestampObj = this.state.minStartTime;\n    }\n\n    if (endTimestampObj.isAfter(this.state.maxEndDate)){\n      endTimestampObj = this.state.maxEndDate;\n    }\n\n    const startTimestamp = parseInt(startTimestampObj._d.getTime()/1000);\n    const endTimestamp = parseInt(endTimestampObj._d.getTime()/1000);\n\n    const newState = {\n      minStartTime,\n      endTimestamp,\n      quickSelection,\n      startTimestamp,\n      endTimestampObj,\n      startTimestampObj\n    };\n\n    this.setStateSafe(newState);\n\n    return newState;\n  }\n\n  toggleAdvancedCharts = (e) => {\n    e.preventDefault();\n    this.setStateSafe({\n      showAdvanced:!this.state.showAdvanced\n    });\n  }\n\n  setDateRangeModal = (dateRangeModalOpened) => {\n    if (dateRangeModalOpened !== this.state.dateRangeModalOpened){\n      this.setStateSafe({\n        dateRangeModalOpened\n      });\n    }\n  }\n\n  async componentDidMount() {\n\n    if (!this.props.web3){\n      this.props.initWeb3();\n      return false;\n    }\n\n    const style = document.createElement('style');\n    style.id = 'crisp-custom-style';\n    style.type = 'text/css';\n    style.innerHTML = `\n    .crisp-client{\n      display:none !important;\n    }`;\n    document.body.appendChild(style);\n\n    this.loadUtils();\n    await this.loadParams();\n    this.loadApiData();\n    this.loadCarousel();\n  }\n\n  loadCarousel(){\n    const carouselMax = this.props.isMobile ? 3 : 2;\n    this.setStateSafe({\n      carouselMax\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const strategyChanged = prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    const dateChanged = prevState.startTimestamp !== this.state.startTimestamp || prevState.endTimestamp !== this.state.endTimestamp;\n    const versionChanged = prevState.idleVersion !== this.state.idleVersion;\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n\n    if (mobileChanged){\n      this.loadCarousel();\n    }\n\n    if (contractsInitialized || tokenChanged || strategyChanged || versionChanged){\n      // console.log('componentDidUpdate',this.props.selectedStrategy,this.props.selectedToken);\n      await this.componentDidMount();\n    } else if (dateChanged){\n      this.loadApiData();\n    }\n  }\n\n  filterTokenData = (apiResults) => {\n    return apiResults.filter((r,i) => {\n      return (!this.state.startTimestamp || r.timestamp >= this.state.startTimestamp) && (!this.state.endTimestamp || r.timestamp <= this.state.endTimestamp);\n    });\n  }\n\n  setIdleVersion = idleVersion => {\n    this.setStateSafe({\n      idleVersion\n    });\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    // Get COMP APR\n    // const compAPR = await this.functionsUtil.getCompAPR(this.props.tokenConfig);\n    // console.log('compAPR',compAPR.toString());\n\n    const startTimestamp = this.state.minDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.minDate).format('DD/MM/YYYY 00:00:00'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n    const endTimestamp = this.state.maxDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.maxDate).format('DD/MM/YYYY 23:59:59'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n\n    const isRisk = ['v3','v4'].includes(this.state.idleVersion) && this.props.selectedStrategy === 'risk';\n    let apiResults_unfiltered = await this.functionsUtil.getTokenApiData(this.props.tokenConfig.address,isRisk,startTimestamp,endTimestamp,true,7200);\n\n    const apiResults = this.filterTokenData(apiResults_unfiltered);\n\n    // console.log('loadApiData',startTimestamp,endTimestamp,new Date(startTimestamp*1000),new Date(endTimestamp*1000),apiResults,apiResults_unfiltered);\n\n    if (!apiResults || !apiResults_unfiltered || !apiResults.length || !apiResults_unfiltered.length){\n      return false;\n    }\n\n    const firstResult = apiResults[0];\n    const lastResult = Object.values(apiResults).pop();\n\n    window.moment = moment;\n\n    let days = (lastResult.timestamp-firstResult.timestamp)/86400;\n    if (days === 0){\n      days = 1;\n    }\n\n    let apr = null;\n    let delta = 'N/A';\n\n    const idleTokens = this.functionsUtil.fixTokenDecimals(lastResult.idleSupply,18);\n    const firstIdlePrice = this.functionsUtil.fixTokenDecimals(firstResult.idlePrice,this.props.tokenConfig.decimals);\n    const lastIdlePrice = this.functionsUtil.fixTokenDecimals(lastResult.idlePrice,this.props.tokenConfig.decimals);\n\n    // Calculate AUM\n    let aum = idleTokens.times(lastIdlePrice);\n\n    // Convert Token balance\n    aum = await this.functionsUtil.convertTokenBalance(aum,this.props.selectedToken,this.props.tokenConfig,isRisk);\n\n    const compoundInfo = this.props.tokenConfig.protocols.filter((p) => { return p.name === 'compound' })[0];\n    const firstCompoundData = compoundInfo ? firstResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n    const lastCompoundData = compoundInfo ? lastResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n\n    if (this.state.idleVersion === 'v4') {\n\n      apr = apiResults.reduce( (sum,r) => {\n        const idleRate = this.functionsUtil.fixTokenDecimals(r.idleRate,18);\n        return this.functionsUtil.BNify(sum).plus(idleRate);\n      },0);\n\n      // Calculate average\n      apr = apr.div(apiResults.length);\n\n      if (compoundInfo){\n        const compoundWithCOMPInfo = globalConfigs.stats.protocols.compoundWithCOMP;\n        const rateField = compoundWithCOMPInfo.rateField ? compoundWithCOMPInfo.rateField : 'rate';\n\n        let compoundAvgApr = apiResults.reduce( (sum,r) => {\n\n          const compoundData = r.protocolsData.find((pData,x) => {\n            return pData.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase()\n          });\n\n          let compoundRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n            if (compoundData[field]){\n              return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(compoundData[field]));\n            }\n            return this.functionsUtil.BNify(acc);\n          },0) : this.functionsUtil.BNify(compoundData[rateField]);\n\n          compoundRate = this.functionsUtil.fixTokenDecimals(compoundRate,18);\n\n          return this.functionsUtil.BNify(sum).plus(compoundRate);\n        },0);\n\n        // Calculate average\n        compoundAvgApr = compoundAvgApr.div(apiResults.length);\n\n        // compoundAvgApr = this.functionsUtil.apr2apy(compoundAvgApr.div(100)).times(100);\n        // apr = this.functionsUtil.apr2apy(apr.div(100)).times(100);\n\n        delta = apr.minus(compoundAvgApr);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n\n      apr = apr.toFixed(2);\n\n    } else {\n      const earning = lastIdlePrice.div(firstIdlePrice).minus(1).times(100);\n      apr = earning.times(365).div(days).toFixed(2);\n\n      if (firstCompoundData && lastCompoundData){\n        const firstCompoundPrice = this.functionsUtil.fixTokenDecimals(firstCompoundData.price,this.props.tokenConfig.decimals);\n        const lastCompoundPrice = this.functionsUtil.fixTokenDecimals(lastCompoundData.price,this.props.tokenConfig.decimals);\n        const compoundApr = lastCompoundPrice.div(firstCompoundPrice).minus(1).times(100);\n        delta = earning.minus(compoundApr).times(365).div(days);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n    }\n\n    // Count rebalances\n    let rebalances = 0;\n    apiResults.forEach((row,index) => {\n      if (index){\n        const prevRow = apiResults[index-1];\n\n        const totalAllocation = row.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        const prevTotalAllocation = prevRow.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        let hasRebalanced = false;\n        row.protocolsData.forEach( p => {\n          if (hasRebalanced){\n            return;\n          }\n          const prevP = prevRow.protocolsData.find( prevP => (prevP.protocolAddr.toLowerCase() === p.protocolAddr.toLowerCase()) );\n          const allocation = this.functionsUtil.fixTokenDecimals(p.allocation,this.props.tokenConfig.decimals);\n          const prevAllocation = this.functionsUtil.fixTokenDecimals(prevP.allocation,this.props.tokenConfig.decimals);\n          const allocationPerc = parseInt(parseFloat(allocation.div(totalAllocation).times(100)));\n          const prevAllocationPerc = parseInt(parseFloat(prevAllocation.div(prevTotalAllocation).times(100)));\n          if (allocationPerc!==prevAllocationPerc){\n            rebalances++;\n            hasRebalanced = true;\n          }\n        });\n      }\n    });\n\n    // Add gov tokens balance to AUM\n    const availableTokens = {};\n    availableTokens[this.props.selectedToken] = this.props.tokenConfig;\n    const govTokensPool = await this.functionsUtil.getGovTokenPool(null,availableTokens,'DAI');\n    if (govTokensPool){\n      aum = aum.plus(govTokensPool);\n    }\n\n    // Format AUM\n    /*\n    aum = this.functionsUtil.formatMoney(parseFloat(aum));\n\n    const conversionRateField = this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'conversionRateField']);\n    if (conversionRateField){\n      aum += ' $';\n    }\n    */\n\n    let unlentBalance = await this.functionsUtil.getUnlentBalance(this.props.tokenConfig);\n    if (unlentBalance){\n      unlentBalance = this.functionsUtil.formatMoney(parseFloat(unlentBalance));\n    }\n\n    this.setStateSafe({\n      aum,\n      apr,\n      days,\n      delta,\n      apiResults,\n      rebalances,\n      govTokensPool,\n      unlentBalance,\n      apiResults_unfiltered\n    });\n  }\n\n  selectToken = async (strategy,token) => {\n    await this.props.setStrategyToken(strategy,token);\n    this.props.changeToken(token);\n  }\n\n  handleCarousel = action => {\n    let carouselIndex = this.state.carouselIndex;\n    if (action==='next' && carouselIndex<this.state.carouselMax){\n      carouselIndex++;\n    } else if (action==='back' && carouselIndex>0){\n      carouselIndex--;\n    }\n\n    const $element = window.jQuery(`#carousel-cursor > div:eq(${carouselIndex})`);\n    const carouselOffsetLeft = -parseFloat($element.position().left)+'px';\n\n    this.setStateSafe({\n      carouselIndex,\n      carouselOffsetLeft\n    });\n  }\n\n  render() {\n\n    const valueProps = {\n      lineHeight:1,\n      fontSize:[4,5],\n      fontWeight:[3,4],\n      color:'statValue'\n    };\n\n    const unitProps = {\n      ml:2,\n      lineHeight:1,\n      fontWeight:[2,3],\n      color:'statValue',\n      fontSize:[3,'23px'],\n    };\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const apyLong = this.functionsUtil.getGlobalConfig(['messages','apyLong']);\n\n    if (!this.props.availableStrategies){\n      return (\n        <FlexLoader\n          textProps={{\n            textSize:4,\n            fontWeight:2\n          }}\n          loaderProps={{\n            mb:3,\n            size:'40px'\n          }}\n          flexProps={{\n            minHeight:'50vh',\n            flexDirection:'column'\n          }}\n          text={'Loading assets...'}\n        />\n      );\n    }\n\n    if (!this.props.selectedToken){\n      const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n      const enabledTokens = [];\n      const statsTokens = this.functionsUtil.getGlobalConfig(['stats','tokens']);\n      const statsProtocols = this.functionsUtil.getGlobalConfig(['stats','protocols']);\n      Object.keys(statsTokens).forEach(token => {\n        const tokenInfo = statsTokens[token];\n        if (tokenInfo.enabled){\n          enabledTokens.push(token);\n        }\n      });\n      return (\n        <Flex\n          mb={3}\n          width={1}\n          flexDirection={'column'}\n        >\n          <AssetsUnderManagement\n            {...this.props}\n            loaderAlign={'flex-end'}\n          />\n          {\n            Object.keys(strategies).map(strategy => {\n              const strategyInfo = strategies[strategy];\n              const availableTokens = this.props.availableStrategies[strategy];\n              if (!availableTokens){\n                return false;\n              }\n              return (\n                <Box\n                  mb={2}\n                  width={1}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                  key={`strategy-container-${strategy}`}\n                >\n                  <Title\n                    mt={3}\n                    mb={[3,4]}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'baseline'}\n                      justifyContent={'center'}\n                    >\n                      {strategyInfo.title}\n                      {\n                        strategyInfo.titlePostfix &&\n                          <Text\n                            ml={2}\n                            fontWeight={3}\n                            fontSize={[2,4]}\n                            color={'dark-gray'}\n                          >\n                            {strategyInfo.titlePostfix}\n                          </Text>\n                      }\n                    </Flex>\n                  </Title>\n                  <AssetsList\n                    enabledTokens={enabledTokens}\n                    handleClick={(props) => this.selectToken(strategy,props.token)}\n                    cols={[\n                      {\n                        title:'CURRENCY',\n                        props:{\n                          width:[0.26,0.15]\n                        },\n                        fields:[\n                          {\n                            name:'icon',\n                            props:{\n                              mr:2,\n                              height:['1.4em','2.3em']\n                            }\n                          },\n                          {\n                            name:'tokenName'\n                          }\n                        ]\n                      },\n                      {\n                        title:'POOL',\n                        props:{\n                          width:[0.22,0.14],\n                        },\n                        fields:[\n                          {\n                            name:'allocationChart',\n                            mobile:false,\n                            parentProps:{\n                              width:0.3\n                            },\n                            style:{\n                              overflow:'visible'\n                            },\n                            showLoader:false,\n                          },\n                          {\n                            name:'pool',\n                            props:{\n                              ml:1\n                            },\n                            parentProps:{\n                              width:[1,0.7]\n                            }\n                          }\n                        ]\n                      },\n                      {\n                        title:'APY',\n                        desc:apyLong,\n                        props:{\n                          width: [0.29,0.14],\n                        },\n                        parentProps:{\n                          flexDirection:'column',\n                          alignItems:'flex-start',\n                        },\n                        fields:[\n                          {\n                            name:'apy',\n                            showTooltip:true\n                          },\n                          {\n                            name:'idleDistribution',\n                            showLoader:false,\n                            props:{\n                              decimals:this.props.isMobile ? 1 : 2,\n                              fontSize:this.props.isMobile ? '9px' : 0\n                            }\n                          },\n                        ]\n                      },\n                      {\n                        title:'RISK SCORE',\n                        desc:this.functionsUtil.getGlobalConfig(['messages','riskScore']),\n                        mobile:false,\n                        props:{\n                          width:[0.27,0.16],\n                        },\n                        fields:[\n                          {\n                            name:'score'\n                          }\n                        ]\n                      },\n                      {\n                        title:'APR LAST WEEK',\n                        mobile:false,\n                        props:{\n                          width: 0.25,\n                        },\n                        parentProps:{\n                          width:1,\n                          pr:[2,4]\n                        },\n                        fields:[\n                          {\n                            name:'aprChart',\n                            style:{\n                              overflow:'visible',\n                            },\n                          }\n                        ]\n                      },\n                      {\n                        title:'',\n                        props:{\n                          width:[0.23,0.16],\n                        },\n                        parentProps:{\n                          width:1\n                        },\n                        fields:[\n                          {\n                            name:'button',\n                            label:this.props.isMobile ? 'View' : 'View stats',\n                            props:{\n                              width:1,\n                              fontSize:3,\n                              fontWeight:3,\n                              height:'45px',\n                              borderRadius:4,\n                              boxShadow:null,\n                              mainColor:'redeem',\n                              size: this.props.isMobile ? 'small' : 'medium',\n                              handleClick:(props) => this.selectToken(strategy,props.token)\n                            }\n                          }\n                        ]\n                      }\n                    ]}\n                    {...this.props}\n                    selectedStrategy={strategy}\n                    availableTokens={availableTokens}\n                  />\n                  {\n                    !this.props.isMobile &&\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'flex-end'}\n                      >\n                        {\n                          Object.values(statsProtocols).filter( p => (p.legend) ).map( (p,index) => (\n                            <Flex\n                              mr={3}\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              key={`legend_${index}`}\n                            >\n                              <Box\n                                mr={1}\n                                width={'10px'}\n                                height={'10px'}\n                                borderRadius={'50%'}\n                                backgroundColor={`rgb(${p.color.rgb.join(',')})`}\n                              >\n                              </Box>\n                              <Text.span\n                                fontSize={1}\n                                color={'cellText'}\n                              >\n                                {p.label}\n                              </Text.span>\n                            </Flex>\n                          ))\n                        }\n                      </Flex>\n                  }\n                </Box>\n              );\n            })\n          }\n          {\n            idleTokenEnabled && !this.state.showRefreshIdleSpeed ? (\n              <Flex\n                mb={4}\n                width={1}\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <Link\n                  hoverColor={'primary'}\n                  onClick={this.showRefreshIdleSpeed.bind(this)}\n                >\n                  Refresh Idle Speed\n                </Link>\n              </Flex>\n            ) : idleTokenEnabled && this.state.showRefreshIdleSpeed &&\n              <DashboardCard\n                cardProps={{\n                  p:2,\n                  mb:4,\n                  width:1,\n                  mt:[2,3],\n                }}\n                isActive={true}\n                isInteractive={false}\n              >\n                <Flex\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                >\n                  <Text\n                    fontWeight={500}\n                    color={'flashColor'}\n                    textAlign={'center'}\n                    fontSize={[1,'15px']}\n                  >\n                    By executing this transaction you can adjust the IDLE distribution speed among the pools.\n                  </Text>\n                  <ExecuteTransaction\n                    action={'Refresh'}\n                    Component={Button}\n                    parentProps={{\n                      mt:1\n                    }}\n                    componentProps={{\n                      size:'small',\n                      mainColor:'blue',\n                      value:'REFRESH IDLE SPEED'\n                    }}\n                    params={[]}\n                    contractName={'IdleController'}\n                    methodName={'refreshIdleSpeeds'}\n                    {...this.props}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'center'}\n                      justifyContent={'center'}\n                    >\n                      <Icon\n                        mr={1}\n                        name={'Done'}\n                        size={'1.4em'}\n                        color={this.props.theme.colors.transactions.status.completed}\n                      />\n                      <Text\n                        fontWeight={500}\n                        fontSize={'15px'}\n                        color={'copyColor'}\n                        textAlign={'center'}\n                      >\n                        Idle Speed Refreshed\n                      </Text>\n                    </Flex>\n                  </ExecuteTransaction>\n                </Flex>\n              </DashboardCard>\n          }\n        </Flex>\n      );\n    } else {\n      const versionsOptions = Object.keys(globalConfigs.stats.versions).filter( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return versionInfo.enabledTokens.includes(this.props.selectedToken) && versionInfo.enabledStrategies.includes(this.props.selectedStrategy);\n      }).map( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return {\n          value:version,\n          label:versionInfo.label\n        }\n      });\n\n      const versionInfo = this.getVersionInfo(this.state.idleVersion);\n\n      let performanceTooltip = null;\n      if (this.state.idleVersion && versionInfo){\n        const showPerformanceTooltip = this.functionsUtil.getGlobalConfig(['stats','versions',this.state.idleVersion,'showPerformanceTooltip']);\n        performanceTooltip = showPerformanceTooltip ? this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'performanceTooltip']) : null;\n      }\n\n      const versionDefaultValue = versionsOptions.find( v => (v.value === this.state.idleVersion) );\n\n      return (\n        <Flex\n          p={0}\n          width={1}\n          flexDirection={'column'}\n        >\n          {\n          /*\n          }\n          <Flex position={['absolute','relative']} left={0} px={[3,0]} zIndex={10} width={1} flexDirection={'row'} mb={[0,3]}>\n            <Flex alignItems={'center'} width={[2/3,1/2]}>\n              <RouterLink to=\"/\">\n                <Image src=\"images/logo-gradient.svg\"\n                  height={['35px','48px']}\n                  position={'relative'} />\n              </RouterLink>\n              <Heading.h3 color={'dark-gray'} textAlign={'left'} fontWeight={3} lineHeight={'initial'} fontSize={[4,5]} ml={[1,2]}>\n                <Text.span fontSize={'80%'}>|</Text.span> Stats\n              </Heading.h3>\n            </Flex>\n            <Flex flexDirection={'row'} width={[1/3,1/2]} justifyContent={'flex-end'} alignItems={'center'}>\n              {\n                this.state.buttonGroups && \n                  this.props.isMobile ? (\n                    <ButtonGroup\n                      isMobile={this.props.isMobile}\n                      components={ this.state.buttonGroups.reduce((components,array) => components.concat(array),[]) }\n                      theme={'light'}\n                    />\n                  ) :\n                  this.state.buttonGroups.map((buttonGroup,i) => (\n                    <ButtonGroup\n                      key={`buttonGroup_${i}`}\n                      isMobile={this.props.isMobile}\n                      components={buttonGroup}\n                      theme={'light'}\n                    />\n                  ))\n              }\n            </Flex>\n          </Flex>\n          */\n          }\n          <Box\n            mb={[3,4]}\n          >\n            <Flex\n              flexDirection={['column','row']}\n            >\n              <Flex\n                width={[1,0.4]}\n              >\n                <Breadcrumb\n                  {...this.props}\n                  showPathMobile={true}\n                  text={'ASSETS OVERVIEW'}\n                  isMobile={this.props.isMobile}\n                  handleClick={ e => this.props.goToSection('stats') }\n                  path={[this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])]}\n                />\n              </Flex>\n              <Flex\n                mt={[3,0]}\n                width={[1,0.6]}\n                flexDirection={['column','row']}\n                justifyContent={['center','space-between']}\n              >\n                <Flex\n                  width={[1,0.26]}\n                  flexDirection={'column'}\n                >\n                  <GenericSelector\n                    innerProps={{\n                      p:1,\n                      height:['100%','46px'],\n                    }}\n                    name={'idle-version'}\n                    options={versionsOptions}\n                    defaultValue={versionDefaultValue}\n                    onChange={ v => this.setIdleVersion(v) }\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.3]}\n                  flexDirection={'column'}\n                >\n                  <AssetSelector\n                    innerProps={{\n                      p:1\n                    }}\n                    {...this.props}\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.39]}\n                  flexDirection={'column'}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:1,\n                      display:'flex',\n                      alignItems:'center',\n                      height:['46px','100%'],\n                      justifyContent:'center'\n                    }}\n                    isInteractive={true}\n                    handleClick={ e => this.setDateRangeModal(true) }\n                  >\n                    <Text\n                      fontWeight={3}\n                      color={'copyColor'}\n                    >\n                    {\n                      this.state.quickSelection\n                      ?\n                        this.quickSelections[this.state.quickSelection]\n                      : this.state.startTimestampObj && this.state.endTimestampObj &&\n                        `${this.state.startTimestampObj.format('DD/MM/YY')} - ${this.state.endTimestampObj.format('DD/MM/YY')}`\n                    }\n                    </Text>\n                  </DashboardCard>\n                </Flex>\n              </Flex>\n            </Flex>\n          </Box>\n\n          {\n            this.state.idleVersion && (versionInfo.startTimestamp>parseInt(new Date().getTime()/1000)) ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'AccessTime'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Idle Stats {this.state.idleVersion} will be available shortly!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : (\n              <Box\n                width={1}\n              >\n                <Box\n                  mt={[3,0]}\n                  mb={[3,4]}\n                >\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    justifyContent={'center'}\n                    flexDirection={['column','row']}\n                  >\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Asset Under Management'}\n                        label={ this.state.unlentBalance ? `Unlent funds: ${this.state.unlentBalance} ${this.props.selectedToken}` : this.props.selectedToken }\n                        labelTooltip={ this.state.unlentBalance ? this.functionsUtil.getGlobalConfig(['messages','cheapRedeem']) : null}\n                      >\n                        <SmartNumber\n                          precision={2}\n                          type={'money'}\n                          {...valueProps}\n                          unitProps={unitProps}\n                          number={this.state.aum}\n                          flexProps={{\n                            alignItems:'baseline',\n                            justifyContent:'flex-start'\n                          }}\n                          unit={this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'conversionRateField']) ? '$' : null}\n                        />\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Avg APY'}\n                        label={'Annualized'}\n                      >\n                        <Flex\n                          width={1}\n                          alignItems={'center'}\n                          flexDirection={['column','row']}\n                        >\n                          <VariationNumber\n                            direction={'up'}\n                            iconPos={'right'}\n                            iconSize={'1.8em'}\n                            justifyContent={'flex-start'}\n                            width={1}\n                            >\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                              fontSize={[4,5]}\n                            >\n                              {this.state.apr}\n                              <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                            </Text>\n                          </VariationNumber>\n                        </Flex>\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Overperformance on Compound'}\n                        label={'Annualized'}\n                      >\n                        {\n                          this.state.delta && !isNaN(this.state.delta) ? (\n                            <VariationNumber\n                              direction={'up'}\n                              iconPos={'right'}\n                              iconSize={'1.8em'}\n                              justifyContent={'flex-start'}\n                              >\n                              <Text\n                                lineHeight={1}\n                                fontSize={[4,5]}\n                                fontWeight={[3,4]}\n                                color={'statValue'}\n                              >\n                                {this.state.delta}\n                                <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                              </Text>\n                            </VariationNumber>\n                          ) : (\n                            <Text\n                              lineHeight={1}\n                              fontSize={[4,5]}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                            >\n                              {this.state.delta}\n                            </Text>\n                          )\n                        }\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        label={' '}\n                        title={'Rebalances'}\n                        value={this.state.rebalances.toString()}\n                      />\n                    </Flex>\n                    {\n                    /*\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Current APR</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.currApr}\n                            <Text.span color={'copyColor'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Days Live</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.days}\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    */\n                    }\n                  </Flex>\n                </Box>\n\n                <DashboardCard\n                  title={'Historical Performance'}\n                  description={performanceTooltip}\n                  cardProps={{\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex id='chart-PRICE' width={1} mb={3}>\n                    <StatsChart\n                      height={ 350 }\n                      {...this.state}\n                      parentId={'chart-PRICE'}\n                      isMobile={this.props.isMobile}\n                      contracts={this.props.contracts}\n                      apiResults={this.state.apiResults}\n                      idleVersion={this.state.idleVersion}\n                      apiResults_unfiltered={this.state.apiResults_unfiltered}\n                      chartMode={this.state.idleVersion === this.state.latestVersion ? 'PRICE_V4' : 'PRICE'}\n                    />\n                  </Flex>\n                </DashboardCard>\n\n                <DashboardCard\n                  cardProps={{\n                    pb:3,\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex\n                    flexDirection={['column','row']}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      this.state.idleVersion === this.state.latestVersion && \n                      <Flex\n                        pt={2}\n                        width={[1,1/3]}\n                        id={'allocation-chart'}\n                        flexDirection={'column'}\n                        alignItems={'flex-start'}\n                        justifyContent={'flex-start'}\n                      >\n                        <AllocationChart\n                          height={310}\n                          {...this.props}\n                          parentId={'allocation-chart'}\n                        />\n                        <Rebalance\n                          {...this.props}\n                        />\n                      </Flex>\n                    }\n                    <Flex\n                      mb={[0,3]}\n                      id={'chart-ALL'}\n                      pl={[0,this.state.idleVersion === this.state.latestVersion ? 0 : 3]}\n                      width={[1, this.state.idleVersion === this.state.latestVersion ? 2/3 : 1]}\n                    >\n                      <Flex alignItems={'flex-start'} justifyContent={'flex-start'} flexDirection={'column'} width={1}>\n                        <Heading.h4\n                          mb={2}\n                          ml={3}\n                          mt={[3,4]}\n                          fontWeight={4}\n                          fontSize={[2,3]}\n                          textAlign={'left'}\n                          color={'dark-gray'}\n                          lineHeight={'initial'}\n                        >\n                          Allocations over time\n                        </Heading.h4>\n                        <StatsChart\n                          height={350}\n                          {...this.state}\n                          chartMode={'ALL'}\n                          parentId={'chart-ALL'}\n                          isMobile={this.props.isMobile}\n                          contracts={this.props.contracts}\n                          apiResults={this.state.apiResults}\n                          idleVersion={this.state.idleVersion}\n                          apiResults_unfiltered={this.state.apiResults_unfiltered}\n                        />\n                      </Flex>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n\n                <Flex\n                  position={'relative'}\n                >\n                  <Flex\n                    width={1}\n                    id={'carousel-container'}\n                    justifyContent={'flex-end'}\n                  >\n                    <RoundIconButton\n                      buttonProps={{\n                        mr:3\n                      }}\n                      iconName={'ArrowBack'}\n                      disabled={this.state.carouselIndex === 0}\n                      handleClick={ e => this.handleCarousel('back') }\n                    />\n                    <RoundIconButton\n                      iconName={'ArrowForward'}\n                      handleClick={ e => this.handleCarousel('next') }\n                      disabled={this.state.carouselIndex === this.state.carouselMax}\n                    />\n                  </Flex>\n                  <Flex\n                    mt={5}\n                    height={'400px'}\n                    position={'absolute'}\n                    id={'carousel-cursor'}\n                    width={['444%','200%']}\n                    justifyContent={'flex-start'}\n                    left={this.state.carouselOffsetLeft}\n                    style={{\n                      transition:'left 0.3s ease-in-out'\n                    }}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        id='chart-AUM'\n                      >\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            ml={3}\n                            mt={3}\n                            mb={2}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Asset Under Management\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'AUM'}\n                            parentId={'chart-AUM'}\n                            isMobile={this.props.isMobile}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-APR' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            APRs\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'APR'}\n                            parentId={'chart-APR'}\n                            isMobile={this.props.isMobile}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                      title={'Risk Score'}\n                      description={'Idle Risk Score is a weighted average of the underlying protocols risks assessed by DeFi Score'}\n                      titleParentProps={{\n                        ml:16,\n                        mt:16\n                      }}\n                    >\n                      <Flex id='chart-SCORE' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'SCORE'}\n                            parentId={'chart-SCORE'}\n                            isMobile={this.props.isMobile}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-VOL' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Volume\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'VOL'}\n                            parentId={'chart-VOL'}\n                            isMobile={this.props.isMobile}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                </Flex>\n              </Box>\n            )\n          }\n          <DateRangeModal\n            {...this.props}\n            minDate={this.state.minDate}\n            maxDate={this.state.maxDate}\n            handleSelect={this.setDateRange}\n            isOpen={this.state.dateRangeModalOpened}\n            closeModal={e => this.setDateRangeModal(false)}\n            startDate={this.state.startTimestampObj ? this.state.startTimestampObj._d : null}\n            endDate={this.state.endTimestampObj ? this.state.endTimestampObj._d : null}\n          />\n        </Flex>\n      );\n    }\n  }\n}\n\nexport default Stats;","import Title from '../Title/Title';\nimport IconBox from '../IconBox/IconBox';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport { Flex, Icon, Text, Box, Image } from \"rimble-ui\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass Utils extends Component {\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    const SubComponent = this.props.selectedSubsection && this.props.selectedSubsection.subComponent ? this.props.selectedSubsection.subComponent : null;\n    const viewOnly = this.props.connectorName === 'custom';\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.props.selectedSubsection ? (\n            <Box\n              width={1}\n            >\n              <Flex\n                width={1}\n              >\n                <Breadcrumb\n                  {...this.props}\n                  showPathMobile={true}\n                  isMobile={this.props.isMobile}\n                  path={[this.props.selectedSubsection.label]}\n                  text={this.props.selectedSection.label.toUpperCase()}\n                  handleClick={ e => this.props.goToSection(this.props.selectedSection.route) }\n                />\n              </Flex>\n              <Flex\n                my={[2,3]}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <Title\n                  mb={2}\n                >\n                  {this.props.selectedSubsection.label}\n                </Title>\n                <Text\n                  textAlign={'center'}\n                >\n                  {this.props.selectedSubsection.desc}\n                </Text>\n              </Flex>\n              <SubComponent\n                {...this.props}\n                {...this.props.selectedSubsection.directProps}\n                toolProps={this.props.selectedSubsection.props}\n              />\n            </Box>\n          ) : (\n            <Flex\n              my={[2,3]}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Title\n                mb={3}\n              >\n                Tools\n              </Title>\n              <Flex\n                width={1}\n                style={{\n                  flexWrap:'wrap'\n                }}\n                justifyContent={viewOnly ? 'center' : 'flex-start'}\n              >\n              {\n                viewOnly ? (\n                  <IconBox\n                    cardProps={{\n                      maxWidth:[1,'35em']\n                    }}\n                    icon={'Visibility'}\n                    text={'You are using Idle in \"Read-Only\" mode.<br />Logout and connect with your wallet to interact.'}\n                  />\n                ) : this.props.selectedSection.submenu.map( (tool,toolIndex) => (\n                  <DashboardCard\n                    isInteractive={true}\n                    key={`tool_${toolIndex}`}\n                    cardProps={{\n                      p:[3,4],\n                      mb:[3,3],\n                      mr:[0,'2%'],\n                      style:{\n                        flex: this.props.isMobile ? '1 1 100%' : '0 0 31%'\n                      },\n                      alignItems:'center',\n                      flexDirection:'column',\n                      justifyContent:'center'\n                    }}\n                    handleClick={ e => this.props.goToSection(this.props.selectedSection.route+'/'+tool.route) }\n                  >\n                    <Text\n                      fontSize={[3,4]}\n                      textAlign={'center'}\n                    >\n                      {tool.label}\n                    </Text>\n                    <Flex\n                      justifyContent={'center'}\n                    >\n                      {\n                        tool.image ? (\n                          <Image\n                            my={[0,2]}\n                            height={'2.2em'}\n                            src={tool.image}\n                          />\n                        ) : tool.icon && (\n                          <Icon\n                            my={[0,2]}\n                            size={'3em'}\n                            name={tool.icon}\n                          />\n                        )\n                      }\n                    </Flex>\n                    <Text\n                      fontSize={[2,2]}\n                      textAlign={'center'}\n                    >\n                      {tool.desc}\n                    </Text>\n                  </DashboardCard>\n                ) )\n              }\n              </Flex>\n            </Flex>\n          )\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default Utils;\n","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Heading, Text, Tooltip, Icon } from \"rimble-ui\";\nimport PortfolioEquity from '../PortfolioEquity/PortfolioEquity';\n\nclass FundsOverview extends Component {\n\n  state = {\n    govTokensAprs:null,\n    aggregatedValues:[],\n    govTokensTotalApr:null,\n    govTokensUserBalance:null,\n    govTokensDistribution:null,\n    govTokensTotalBalance:null,\n    govTokensTotalAprTooltip:null,\n    idleTokenUserDistribution:null,\n    govTokensDistributionTooltip:null,\n    govTokensTotalBalanceTooltip:null\n  };\n\n  // Utils\n  functionsUtil = null;\n  idleGovToken = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    this.idleGovToken = this.functionsUtil.getIdleGovToken();\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const isRisk = this.props.selectedStrategy === 'risk';\n\n    const [\n      govTokensAprs,\n      idleTokenUserDistribution,\n      govTokensUserBalance,\n      depositTimestamp,\n      days,\n    ] = await Promise.all([\n      this.functionsUtil.getGovTokensAprs(this.props.selectedToken,this.props.tokenConfig),\n      this.idleGovToken.getUserDistribution(this.props.account,govTokenAvailableTokens,true),\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,null),\n      this.functionsUtil.loadAssetField('depositTimestamp',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    const avgAPY = await this.functionsUtil.getAvgAPYStats(this.props.tokenConfig.address,isRisk,depositTimestamp);\n\n    const govTokensTotalBalance = govTokensUserBalance ? Object.values(govTokensUserBalance).reduce( (totBalance,govTokenBalance) => {\n      return totBalance.plus(this.functionsUtil.BNify(govTokenBalance));\n    },this.functionsUtil.BNify(0)) : null;\n\n    const govTokensTotalBalanceTooltip = govTokensUserBalance ? Object.keys(govTokensUserBalance).map( govToken => {\n      const balance = govTokensUserBalance[govToken];\n      if (balance.gt(0)){\n        return `+${balance.toFixed(2)} ${govToken}`;\n      } else {\n        return null;\n      }\n    }).filter(v => (v !== null)) : null;\n\n    // console.log(govTokensTotalBalance,govTokensUserBalance,govTokensTotalBalanceTooltip);\n\n    const govTokensTotalApr = govTokensAprs ? Object.values(govTokensAprs).reduce( (totApr,govTokenApr) => {\n      return totApr.plus(this.functionsUtil.BNify(govTokenApr));\n    },this.functionsUtil.BNify(0)) : null;\n\n    const govTokensTotalAprTooltip = govTokensAprs ? Object.keys(govTokensAprs).map( govToken => {\n      const apr = govTokensAprs[govToken];\n      if (apr.gt(0)){\n        return `${govToken}: ${apr.toFixed(2)}%`;\n      }\n      return null;\n    }).filter(v => (v !== null)) : null;\n\n    /*\n    const govTokensDistributionTooltip = govTokensUserDistribution ? Object.keys(govTokensUserDistribution).map( govToken => {\n      const speed = govTokensUserDistribution[govToken];\n      if (speed.gt(0)){\n        const distributionFrequency = this.functionsUtil.getGlobalConfig(['govTokens',govToken,'distributionFrequency']);\n        return `+${speed.toFixed(4)} ${govToken}/${distributionFrequency}`;\n      }\n      return null;\n    }).filter(v => (v !== null)) : null;\n    */\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          desc:this.functionsUtil.getGlobalConfig(['messages','apyLong']),\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '-') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    this.setState({\n      govTokensAprs,\n      aggregatedValues,\n      govTokensTotalApr,\n      govTokensUserBalance,\n      govTokensTotalBalance,\n      govTokensTotalAprTooltip,\n      idleTokenUserDistribution,\n      govTokensTotalBalanceTooltip\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Flex\n                          mt={2}\n                          width={1}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <Text\n                            fontWeight={2}\n                            fontSize={[1,2]}\n                            color={'cellText'}\n                          >\n                            {v.props.title}\n                          </Text>\n                          {\n                            v.props.desc && \n                              <Tooltip\n                                placement={'bottom'}\n                                message={v.props.desc}\n                              >\n                                <Icon\n                                  ml={2}\n                                  name={\"Info\"}\n                                  size={'1em'}\n                                  color={'cellTitle'}\n                                />\n                              </Tooltip>\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquity\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              chartToken={this.props.selectedToken}\n              enabledTokens={[this.props.selectedToken]}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLent',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:this.props.theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPerc',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.govTokensTotalBalanceTooltip && this.state.govTokensTotalBalanceTooltip.length>0 && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      this.state.govTokensTotalBalanceTooltip.map((govTokenBalance,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          mt={govTokenIndex ? 1 : 0}\n                          key={`govToken_${govTokenIndex}`}\n                        >\n                          {govTokenBalance}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                )/* : this.state.govTokensUserBalance && Object.keys(this.state.govTokensUserBalance).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + ${this.state.govTokensTotalBalance.toFixed(4)}\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalBalanceTooltip.join(' / ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Fees\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'feesCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'apy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.idleTokenUserDistribution && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      mt={1}\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      {this.state.idleTokenUserDistribution.toFixed(4)} {this.idleGovToken.tokenName}/{this.idleGovToken.tokenConfig.distributionFrequency}\n                    </Text>\n                  </Flex>\n                )\n                /*\n                this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length===1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      Object.keys(this.state.govTokensAprs).map((govToken,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          ml={govTokenIndex ? 2 : 0}\n                          key={`govToken_${govToken}`}\n                        >\n                          {this.state.govTokensAprs[govToken].toFixed(2)}% {govToken}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                ) : this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + {this.state.govTokensTotalApr.toFixed(2)}%\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalAprTooltip.join('; ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/6]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Risk Score\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'score',\n                  props:{\n                    decimals:1,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverview;","import React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Icon, Checkbox, Box, Link, Input, Tooltip } from \"rimble-ui\";\n\nclass CurveRedeem extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    tokenConfig:null,\n    unevenAmounts:null,\n    selectedToken:null,\n    availableTokens:null,\n    buttonDisabled:false,\n    showMaxSlippage:false,\n    redeemUnderlying:true,\n    curveTokenConfig:null,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    curveTokensAmounts:null,\n    fastBalanceSelector:null,\n    redeemUnevenAmounts:false,\n    curveRedeemableIdleTokens:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.initToken();\n  }\n\n  showMaxSlippage(){\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  async calculateSlippage(max_slippage=null){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (!inputValue || inputValue.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    let withdrawSlippage = null;\n    let curveTokensAmounts = null;\n    let curveIdleTokensAmounts = null;\n    if (this.state.redeemUnevenAmounts){\n      [\n        curveTokensAmounts,\n        curveIdleTokensAmounts\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokensAmounts(this.props.account,normalizedAmount,true),\n        this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,normalizedAmount)\n      ]);\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false,curveIdleTokensAmounts);\n    } else {\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false);\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const redeemableBalance = inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.times(100).plus(this.state.maxSlippage || this.functionsUtil.BNify(0)).div(100)));\n      curveTokensAmounts = {};\n      curveTokensAmounts[this.state.selectedToken] = redeemableBalance;\n    }\n\n    if (withdrawSlippage){\n      withdrawSlippage = withdrawSlippage.times(100);\n    }\n\n    this.setState({\n      withdrawSlippage,\n      curveTokensAmounts,\n      curveIdleTokensAmounts\n    });\n\n    // Add max slippage but don't save in state\n    if (withdrawSlippage && max_slippage){\n      withdrawSlippage = withdrawSlippage.plus(max_slippage);\n    }\n\n    return withdrawSlippage;\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.tokenConfig.idle.token !== this.props.tokenConfig.idle.token;\n    if (tokenChanged){\n      await this.initToken();\n    }\n\n    const redeemUnevenAmountsChanged = prevState.redeemUnevenAmounts !== this.state.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    const inputChanged = prevState.inputValue !== this.state.inputValue;\n    const maxSlippageChanged = parseFloat(prevState.maxSlippage) !== parseFloat(this.state.maxSlippage);\n    const tokenConfigChanged = JSON.stringify(prevState.tokenConfig) !== JSON.stringify(this.state.tokenConfig);\n    if (inputChanged || tokenConfigChanged || maxSlippageChanged){\n      this.calculateSlippage();\n    }\n\n    const selectedTokenChanged = prevState.selectedToken !== this.state.selectedToken;\n    if (selectedTokenChanged){\n      this.loadSelectedTokenConfig();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    let buttonDisabled = false;\n\n    // if (this.state.redeemUnevenAmounts){\n      buttonDisabled = !amount || amount.gt(this.state.curveTokenBalance);\n    // } else {\n      // buttonDisabled = !amount || amount.gt(this.state.redeemableBalance);\n    // }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    let inputValue = null;\n\n    // if (this.state.redeemUnevenAmounts){\n    inputValue = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n    // } else {\n      // inputValue = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n    // }\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  selectDestinationToken(selectedToken){\n    this.setState({\n      selectedToken\n    });\n  }\n\n  async loadSelectedTokenConfig(){\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const tokenConfig = this.state.availableTokens[this.state.selectedToken];\n    const curveTokenConfig = curveConfig.availableTokens[tokenConfig.idle.token];\n    this.setState({\n      tokenConfig,\n      curveTokenConfig\n    });\n  }\n\n  async initToken(){\n    const [curvePoolContract,curveSwapContract] = await Promise.all([\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract()\n    ]);\n\n    const [\n      curveTokenPrice,\n      curveTokenBalance,\n      curveRedeemableIdleTokens,\n    ] = await Promise.all([\n      this.functionsUtil.getCurveTokenPrice(),\n      this.functionsUtil.getCurveTokenBalance(this.props.account),\n      this.functionsUtil.getCurveRedeemableIdleTokens(this.props.account)\n    ]);\n\n    const unevenAmounts = [];\n    const redeemableBalance = curveTokenBalance ? curveTokenBalance.times(curveTokenPrice) : this.functionsUtil.BNify(0);\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();;\n    const selectedToken = Object.keys(availableTokens)[0];\n\n    this.setState({\n      selectedToken,\n      unevenAmounts,\n      curveTokenPrice,\n      availableTokens,\n      curvePoolContract,\n      curveSwapContract,\n      curveTokenBalance,\n      redeemableBalance,\n      curveRedeemableIdleTokens\n    });\n  }\n\n  async redeem(){\n\n    if (!this.state.curveTokenBalance){\n      return false;\n    }\n\n    const callbackRedeem = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveRedeem`,\n        eventAction: this.props.selectedToken,\n        eventValue: this.state.curveTokenBalance.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackRedeem === 'function' && txSucceeded){\n        this.props.callbackRedeem(tx);\n      }\n    };\n\n    const callbackReceiptRedeem = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.curveSwapContract.name;\n    const withdrawSlippage = await this.calculateSlippage(this.state.maxSlippage);\n    const max_slippage = this.functionsUtil.BNify(this.state.maxSlippage).div(100);\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    // const curveTokenBalance = this.functionsUtil.normalizeTokenAmount(this.state.curveTokenBalance,this.state.curvePoolContract.decimals);\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    if (this.state.redeemUnevenAmounts){\n      const min_amounts = this.state.redeemUnderlying ? await this.functionsUtil.getCurveTokensAmounts(this.props.account,_amount,false,true) : await this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,_amount,max_slippage);\n      console.log('remove_liquidity',_amount.toString(),min_amounts);\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    } else {\n      const coin_index = this.state.curveTokenConfig.migrationParams.coinIndex;\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.div(100))),this.state.tokenConfig.decimals);\n      // const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.minus(inputValue.times(withdrawSlippage.div(100))),this.state.curveTokenConfig.decimals);\n      // let _token_amount = await this.functionsUtil.getCurveTokenAmount(amounts,false);\n      // _token_amount = this.functionsUtil.BNify(_token_amount).isGreaterThan(curveTokenBalance) ? curveTokenBalance : this.functionsUtil.BNify(_token_amount);\n\n      console.log('remove_liquidity_one_coin',_amount, coin_index, min_amount);\n\n      // debugger;\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_one_coin', [_amount, coin_index, min_amount, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    }\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  getFastBalanceSelector(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n\n  render() {\n\n    const showSlippage = !this.state.buttonDisabled && this.state.withdrawSlippage;\n    const curveTokenName = this.functionsUtil.getGlobalConfig(['curve','poolContract','token']);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          {\n            !this.state.curveTokenBalance ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3,\n                  minHeight:'195px',\n                  style:{\n                    display:'flex',\n                    alignItems:'center',\n                    justifyContent:'center'\n                  }\n                }}\n              >\n                <FlexLoader\n                  flexProps={{\n                    flexDirection:'row'\n                  }}\n                  loaderProps={{\n                    size:'30px'\n                  }}\n                  textProps={{\n                    ml:2\n                  }}\n                  text={'Checking Curve Pool...'}\n                />\n              </DashboardCard>\n            ) : this.state.processing.loading ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3\n                }}\n              >\n                <Flex\n                  flexDirection={'column'}\n                >\n                  <TxProgressBar\n                    web3={this.props.web3}\n                    hash={this.state.processing.txHash}\n                    endMessage={`Finalizing redeem request...`}\n                    cancelTransaction={this.cancelTransaction.bind(this)}\n                    waitText={ this.props.waitText ? this.props.waitText : 'Redeem estimated in'}\n                  />\n                </Flex>\n              </DashboardCard>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    mb:2\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'1.8em'}\n                      color={'cellText'}\n                      name={'FileUpload'}\n                    />\n                    <Text\n                      mt={1}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Withdraw from the Curve Pool in a specific token or in uneven amounts of tokens (with no slippage).\n                    </Text>\n                    <Flex\n                      mt={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                    >\n                      <Checkbox\n                        required={false}\n                        label={`Redeem with no slippage`}\n                        checked={this.state.redeemUnevenAmounts}\n                        onChange={ e => this.toggleUnevenAmounts(e.target.checked) }\n                      />\n                      <Tooltip\n                        placement={'top'}\n                        message={`You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.`}\n                      >\n                        <Icon\n                          size={'1em'}\n                          color={'cellTitle'}\n                          name={\"InfoOutline\"}\n                        />\n                      </Tooltip>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n                {\n                  !this.state.redeemUnevenAmounts/* && (!this.props.selectedToken || (this.state.showMaxSlippage && showSlippage))*/ && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      {\n                        this.state.tokenConfig && \n                          <Box\n                            width={1}\n                          >\n                            <Text\n                              mb={1}\n                            >\n                              Select destination token:\n                            </Text>\n                            <AssetSelector\n                              {...this.props}\n                              id={'token-from'}\n                              showBalance={false}\n                              tokenConfig={this.state.tokenConfig}\n                              selectedToken={this.state.selectedToken}\n                              availableTokens={this.state.availableTokens}\n                              onChange={this.selectDestinationToken.bind(this)}\n                            />\n                          </Box>\n                      }\n                    </Box>\n                  )\n                }\n                {\n                  this.state.curveTokensAmounts && !this.state.buttonDisabled && (\n                    <DashboardCard\n                      cardProps={{\n                        mt:1,\n                        mb:2,\n                        py:2,\n                        px:1\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Text\n                          mt={1}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          You will receive:\n                        </Text>\n                        <Flex\n                          mt={2}\n                          width={1}\n                          boxShadow={0}\n                          style={{\n                            flexWrap:'wrap'\n                          }}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                          >\n                            {\n                              Object.keys(this.state.curveTokensAmounts).map( token => {\n                                const balance = this.state.curveTokensAmounts[token];\n                                return (\n                                  <Flex\n                                    mb={1}\n                                    mx={1}\n                                    width={'auto'}\n                                    flexDirection={'row'}\n                                    key={`tokenBalance_${token}`}\n                                    justifyContent={'flex-start'}\n                                  >\n                                    <AssetField\n                                      token={token}\n                                      tokenConfig={{\n                                        token:token\n                                      }}\n                                      fieldInfo={{\n                                        name:'icon',\n                                        props:{\n                                          mr:1,\n                                          width:['1.4em','1.6em'],\n                                          height:['1.4em','1.6em']\n                                        }\n                                      }}\n                                    />\n                                    <SmartNumber\n                                      ml={1}\n                                      fontSize={[0,1]}\n                                      fontWeight={500}\n                                      maxPrecision={4}\n                                      color={'cellText'}\n                                      number={balance.toString()}\n                                    />\n                                  </Flex>\n                                );\n                            })\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n                {\n                  this.state.showMaxSlippage && showSlippage && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Text>\n                          Choose max slippage:\n                        </Text>\n                        <Tooltip\n                          placement={'top'}\n                          message={`Max additional slippage on top of the one shown below`}\n                        >\n                          <Icon\n                            ml={1}\n                            size={'1em'}\n                            color={'cellTitle'}\n                            name={\"InfoOutline\"}\n                          />\n                        </Tooltip>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        {\n                          [0.2,0.5,1,5].map( slippage => (\n                            <FastBalanceSelector\n                              cardProps={{\n                                p:1\n                              }}\n                              textProps={{\n                                fontSize:1\n                              }}\n                              percentage={slippage}\n                              key={`selector_${slippage}`}\n                              onMouseDown={()=>this.setMaxSlippage(slippage)}\n                              isActive={this.state.maxSlippage === parseFloat(slippage)}\n                            />\n                          ))\n                        }\n                      </Flex>\n                    </Box>\n                  )\n                }\n                <Flex\n                  mb={3}\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  <Flex\n                    mb={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'flex-end'}\n                  >\n                    {\n                      showSlippage && (\n                        <Flex\n                          width={1}\n                          maxWidth={'40%'}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            textAlign={'right'}\n                            style={{\n                              whiteSpace:'nowrap'\n                            }}\n                            color={ parseFloat(this.state.withdrawSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                          >\n                            {\n                              parseFloat(this.state.withdrawSlippage.toFixed(3)) === 0 ?\n                                'No Slippage'\n                              : `${ this.state.withdrawSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.withdrawSlippage.abs().toFixed(3)}%`\n                            }\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={ this.state.redeemUnevenAmounts ? `You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.` : this.state.withdrawSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                          {\n                            !this.state.redeemUnevenAmounts &&\n                              <Link\n                                ml={1}\n                                color={'copyColor'}\n                                hoverColor={'primary'}\n                                onClick={this.showMaxSlippage.bind(this)}\n                              >\n                                change\n                              </Link>\n                          }\n                        </Flex>\n                      )\n                    }\n                    <Flex\n                      width={1}\n                      maxWidth={'60%'}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      justifyContent={'flex-end'}\n                    >\n                      <Link\n                        fontSize={1}\n                        fontWeight={3}\n                        color={'dark-gray'}\n                        textAlign={'right'}\n                        hoverColor={'copyColor'}\n                        onClick={ (e) => this.setFastBalanceSelector(100) }\n                        style={{\n                          maxWidth:'100%',\n                          overflow:'hidden',\n                          whiteSpace:'nowrap',\n                          textOverflow:'ellipsis'\n                        }}\n                      >\n                        {this.state.curveTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {curveTokenName}\n                      </Link>\n                    </Flex>\n                  </Flex>\n                  <Input\n                    min={0}\n                    type={\"number\"}\n                    required={true}\n                    height={'3.4em'}\n                    borderRadius={2}\n                    fontWeight={500}\n                    boxShadow={'none !important'}\n                    placeholder={`Insert amount`}\n                    onChange={this.changeInputValue.bind(this)}\n                    border={`1px solid ${this.props.theme.colors.divider}`}\n                    value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                  />\n                  <Flex\n                    mt={2}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      [25,50,75,100].map( percentage => (\n                        <FastBalanceSelector\n                          percentage={percentage}\n                          key={`selector_${percentage}`}\n                          onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                          isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                        />\n                      ))\n                    }\n                  </Flex>\n                </Flex>\n                <Flex\n                  justifyContent={'center'}\n                >\n                  <RoundButton\n                    buttonProps={{\n                      mt:2,\n                      width:[1,1/2],\n                      disabled:this.state.buttonDisabled\n                    }}\n                    handleClick={this.redeem.bind(this)}\n                  >\n                    Redeem\n                  </RoundButton>\n                </Flex>\n              </Flex>\n            )\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveRedeem;","import React, { Component } from 'react';\nimport {\n  Button,\n  Flex,\n  Box,\n  Text\n} from \"rimble-ui\";\nimport styles from './TwitterShareButton.module.scss';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\n\nclass TwitterShareButton extends Component {\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  componentWillMount() {\n    this.loadUtils();\n  }\n\n  componentDidMount() {\n    this.loadUtils();\n  }\n\n  componentDidUpdate() {\n    this.loadUtils();\n  }\n\n  share = () => {\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'Share',\n      eventAction: 'twitter',\n      eventLabel: this.props.parent\n    });\n\n    const w = Math.min(window.innerWidth,600);\n    const h = 350;\n    const x = (window.innerWidth-w)/2;\n    const y = 150;\n    window.open(`https://twitter.com/intent/tweet?text=${this.props.tweet}`,\"_blank\",`toolbar=yes,scrollbars=no,resizable=no,top=${y},left=${x},width=${w},height=${h}`);\n  }\n\n  render() {\n    return (\n        <Button\n          borderRadius={1}\n          mainColor={'#2aa6f2'}\n          contrastColor={'white'}\n          onClick={ e => { this.share() } }\n        >\n          <Flex flexDirection={'row'} alignItems={'center'} justifyContent={'center'}>\n            <Box className={styles.twitterIcon} />\n            <Text color={'white'} fontWeight={3} ml={2}>{ this.props.text ? this.props.text : 'Tweet' }</Text>\n          </Flex>\n        </Button>\n    );\n  }\n}\n\nexport default TwitterShareButton;\n","import React from \"react\";\nimport {\n  Text,\n  Modal,\n  Link,\n  Flex\n} from \"rimble-ui\";\nimport ModalCard from './ModalCard';\nimport TwitterShareButton from '../../TwitterShareButton/TwitterShareButton.js';\nimport Confetti from 'react-confetti/dist/react-confetti';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\n\nclass ShareModal extends React.Component {\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  componentWillMount() {\n    this.loadUtils();\n  }\n\n  componentDidMount() {\n    this.loadUtils();\n  }\n\n  componentDidUpdate() {\n    this.loadUtils();\n  }\n\n  closeModal = async (action) => {\n    const globalConfigs = this.functionsUtil.getGlobalConfigs();\n    // Send Google Analytics event\n    if (globalConfigs.analytics.google.events.enabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'Share',\n        eventAction: action,\n        eventLabel: 'ShareModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n    const tweet = window.escape(this.props.tweet);\n    const customText = {__html: this.props.text};\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        <ModalCard closeFunc={this.props.closeModal}>\n          {\n            this.props.confettiEnabled &&\n            <Confetti\n              style={{ position: 'fixed','zIndex':9999 }}\n              run={true}\n              recycle={true}\n              width={window.innerWidth}\n              height={window.innerHeight}\n            />\n          }\n          <ModalCard.Header title={this.props.title} icon={this.props.icon}></ModalCard.Header>\n          <ModalCard.Body>\n            <Flex my={3} width={1} flexDirection={'column'} mx={'auto'}>\n              <Text color={'dark-gray'} textAlign={'center'} fontSize={3} mb={2} dangerouslySetInnerHTML={customText}></Text>\n            </Flex>\n            <Flex mb={3} flexDirection={'column'} alignItems={'center'} justifyContent={'center'}>\n              <TwitterShareButton tweet={tweet} text={'Share now'} parent={'ShareModal'} />\n              <Link mt={2} onClick={ e => this.closeModal('continue_without_sharing') } hoverColor={'blue'}>continue without sharing</Link>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default ShareModal;","import Migrate from '../Migrate/Migrate';\nimport IconBox from '../IconBox/IconBox';\nimport React, { Component } from 'react';\nimport styles from './DepositRedeem.module.scss';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport ConnectBox from '../ConnectBox/ConnectBox';\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport ShareModal from '../utilities/components/ShareModal';\nimport TransactionField from '../TransactionField/TransactionField';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Input, Box, Icon, Link, Checkbox, Tooltip, Image } from \"rimble-ui\";\n\nclass DepositRedeem extends Component {\n\n  state = {\n    txError:{},\n    tokenAPY:'-',\n    inputValue:{},\n    processing:{},\n    curveAPY:null,\n    totalAUM:null,\n    canRedeem:false,\n    maxSlippage:0.2,\n    canDeposit:false,\n    action:'deposit',\n    directMint:false,\n    activeModal:null,\n    showBuyFlow:false,\n    maxUnlentPerc:null,\n    unlentBalance:null,\n    tokenApproved:false,\n    skipMigration:false,\n    showRedeemFlow:false,\n    contractPaused:false,\n    buttonDisabled:false,\n    canRedeemCurve:false,\n    minAmountForMint:null,\n    showMaxSlippage:false,\n    redeemGovTokens:false,\n    canDepositCurve:false,\n    fastBalanceSelector:{},\n    actionProxyContract:{},\n    migrationEnabled:false,\n    componentMounted:false,\n    curveTokenBalance:null,\n    redeemCurveEnabled:false,\n    depositCurveBalance:null,\n    depositCurveEnabled:true,\n    showAdvancedOptions:false,\n    depositCurveSlippage:null,\n    showETHWrapperEnabled:false,\n    metaTransactionsEnabled:true,\n    minAmountForMintReached:false\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadProxyContracts();\n  }\n\n  async componentDidMount(){\n\n  }\n\n  setShowRedeemFlow = (showRedeemFlow) => {\n    this.setState({\n      showRedeemFlow\n    });\n  }\n\n  setShowBuyFlow = (showBuyFlow) => {\n    this.setState({\n      showBuyFlow\n    });\n  }\n\n  toggleShowAdvancedOptions = showAdvancedOptions => {\n    this.setState((prevState) => ({\n      showAdvancedOptions:!prevState.showAdvancedOptions\n    }));\n  }\n\n  toggleSkipMigration = skipMigration => {\n    this.setState({\n      skipMigration\n    });\n  }\n\n  toggleRedeemCurve = redeemCurveEnabled => {\n    this.setState({\n      redeemCurveEnabled\n    });\n  }\n\n  toggleDepositCurve = depositCurveEnabled => {\n    this.setState({\n      depositCurveEnabled\n    });\n  }\n\n  toggleShowETHWrapper = showETHWrapperEnabled => {\n    this.setState({\n      showETHWrapperEnabled\n    });\n  }\n\n  toggleSkipMint = (directMint) => {\n    this.setState({\n      directMint\n    });\n  }\n\n  toggleRedeemGovTokens = (redeemGovTokens) => {\n    this.setState({\n      redeemGovTokens\n    });\n  }\n\n  toggleMetaTransactionsEnabled = (metaTransactionsEnabled) => {\n    this.setState({\n      metaTransactionsEnabled\n    });\n  }\n\n  async loadProxyContracts(){\n    const actions = ['deposit','redeem'];\n    const newState = {\n      actionProxyContract:{}\n    };\n\n    await this.functionsUtil.asyncForEach(actions,async (action) => {\n      const mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract','methods',action,'proxyContract']);\n      const hasProxyContract = mintProxyContractInfo && mintProxyContractInfo.enabled;\n      newState.actionProxyContract[action] = hasProxyContract ? mintProxyContractInfo : null;\n      if (hasProxyContract){\n        const proxyContract = await this.props.initContract(mintProxyContractInfo.name,mintProxyContractInfo.address,mintProxyContractInfo.abi);\n        newState.actionProxyContract[action].contract = proxyContract.contract;\n        newState.actionProxyContract[action].approved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,mintProxyContractInfo.address,this.props.account);\n      }\n    });\n\n    this.setState(newState);\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadAPY(){\n    const tokenAprs = await this.functionsUtil.getTokenAprs(this.props.tokenConfig);\n    if (tokenAprs && tokenAprs.avgApy !== null){\n      const tokenAPY = this.functionsUtil.BNify(tokenAprs.avgApy).toFixed(2);\n\n      let curveAPY = null;\n      if (this.state.canDepositCurve){\n        curveAPY = await this.functionsUtil.getCurveAPY();\n        // console.log('curveAPY',curveAPY);\n        if (curveAPY){\n          curveAPY = curveAPY.plus(tokenAPY);\n        }\n      }\n      this.setState({\n        tokenAPY,\n        curveAPY\n      });\n    }\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    if (this.props.tokenBalance === null){\n      return false;\n    }\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    const tokenBalanceChanged = prevProps.tokenBalance !== this.props.tokenBalance && this.props.tokenBalance !== null;\n\n    if (tokenChanged || tokenBalanceChanged){\n      await this.loadProxyContracts();\n      this.loadTokenInfo();\n      return false;\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n\n    if (actionChanged || fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const inputValueChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputValueChanged){\n      this.checkMinAmountForMint();\n    }\n\n    const redeemGovTokensChanged = prevState.redeemGovTokens !== this.state.redeemGovTokens;\n    if (redeemGovTokensChanged || actionChanged){\n      this.checkButtonDisabled();\n    }\n\n    const depositCurveChanged = prevState.depositCurveEnabled !== this.state.depositCurveEnabled;\n    const metaTransactionsChanged = prevState.metaTransactionsEnabled !== this.state.metaTransactionsEnabled;\n    if (metaTransactionsChanged || depositCurveChanged){\n      const tokenApproved = await this.checkTokenApproved();\n      this.setState({\n        tokenApproved\n      });\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateCurveSlippage();\n    }\n  }\n\n  async checkMinAmountForMint(){\n    let showPoolPerc = false;\n    let totalAUM = this.state.totalAUM;\n    let maxUnlentPerc = this.state.maxUnlentPerc;\n    const isRisk = this.props.selectedStrategy === 'risk';\n    const inputValue = this.functionsUtil.BNify(this.state.inputValue[this.state.action]);\n\n    if (inputValue.gt(this.props.tokenBalance)){\n      return false;\n    }\n\n    const convertedAmount = await this.functionsUtil.convertTokenBalance(inputValue,this.props.selectedToken,this.props.tokenConfig,isRisk);\n    let minAmountForMint = this.functionsUtil.BNify(this.functionsUtil.getGlobalConfig(['contract','methods','deposit','minAmountForMint']));\n    let minAmountForMintReached = convertedAmount.gte(minAmountForMint);\n\n    // Check token minAmountForMint\n    if (minAmountForMintReached){\n      if (this.props.tokenConfig.deposit && this.props.tokenConfig.deposit.minAmountForMint && convertedAmount.lt(this.props.tokenConfig.deposit.minAmountForMint)){\n        minAmountForMintReached = false;\n      } else {\n        [\n          maxUnlentPerc,\n          totalAUM\n        ] = await Promise.all([\n          maxUnlentPerc || this.functionsUtil.genericContractCall(this.props.tokenConfig.idle.token, 'maxUnlentPerc'),\n          totalAUM ||this.functionsUtil.loadAssetField('pool',this.props.selectedToken,this.props.tokenConfig,this.props.account)\n        ]);\n\n        if (maxUnlentPerc && totalAUM){\n          const depositPerc = inputValue.div(totalAUM).times(100);\n          maxUnlentPerc = this.functionsUtil.BNify(maxUnlentPerc);\n          const maxUnlentPercFormatted = maxUnlentPerc.div(1e3).times(2);\n          if (depositPerc.lt(maxUnlentPercFormatted)){\n            minAmountForMintReached = false;\n          } else if (totalAUM.times(maxUnlentPercFormatted.div(100)).gt(minAmountForMint)) {\n            showPoolPerc = true;\n            minAmountForMint = totalAUM.times(maxUnlentPercFormatted.div(100));\n          }\n        }\n      }\n    }\n\n    this.setState({\n      totalAUM,\n      showPoolPerc,\n      maxUnlentPerc,\n      minAmountForMint,\n      minAmountForMintReached\n    });\n  }\n\n  async calculateCurveSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,curvePoolContractInfo.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositCurveBalance = amount;\n        newState.depositCurveSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      case 'redeem':\n        // newState.redeemBalance = amount;\n        // newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateCurveSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  approveContract = async (callbackApprove,callbackReceiptApprove) => {\n    if (this.state.depositCurveEnabled){\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve','depositContract']);\n      this.functionsUtil.enableERC20(this.props.selectedToken,curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n    } else {\n      const proxyContract = this.state.actionProxyContract[this.state.action];\n      if (proxyContract && this.state.metaTransactionsEnabled && this.props.biconomy){\n        this.functionsUtil.enableERC20(this.props.selectedToken,proxyContract.address,callbackApprove,callbackReceiptApprove);\n      } else {\n        this.functionsUtil.enableERC20(this.props.selectedToken,this.props.tokenConfig.idle.address,callbackApprove,callbackReceiptApprove);\n      }\n    }\n  }\n\n  checkTokenApproved = async () => {\n\n    let tokenApproved = false;\n\n    if (this.state.depositCurveEnabled){\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve','depositContract']);\n      tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,curveDepositContract.address,this.props.account);\n    } else {\n      const proxyContract = this.state.actionProxyContract[this.state.action];\n      if (proxyContract && this.state.metaTransactionsEnabled && this.props.biconomy){\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,proxyContract.address,this.props.account);\n      } else {\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken,this.props.tokenConfig.idle.address,this.props.account);\n      }\n    }\n\n    return tokenApproved;\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = await this.checkTokenApproved();\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.props.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.approveContract(callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  loadTokenInfo = async () => {\n\n    if (this.state.componentMounted){\n      this.setState({\n        componentMounted:false\n      });\n    }\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token]);\n    const curveTokenEnabled = curveConfig.enabled && curveTokenConfig && curveTokenConfig.enabled;\n\n    const [\n      tokenApproved,\n      contractPaused,\n      curveSwapContract,\n      curveDepositContract,\n      unlentBalance,\n      {migrationEnabled},\n      curveTokenBalance,\n    ] = await Promise.all([\n      this.checkTokenApproved(),\n      this.functionsUtil.checkContractPaused(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract(),\n      this.functionsUtil.getUnlentBalance(this.props.tokenConfig),\n      this.functionsUtil.checkMigration(this.props.tokenConfig,this.props.account),\n      curveTokenEnabled ? this.functionsUtil.getCurveTokenBalance(this.props.account) : null\n    ]);\n\n    const canDeposit = this.props.tokenBalance && this.functionsUtil.BNify(this.props.tokenBalance).gt(0);\n    const canRedeem = this.props.idleTokenBalance && this.functionsUtil.BNify(this.props.idleTokenBalance).gt(0);\n\n    const canDepositCurve = curveTokenEnabled && canDeposit;\n    const depositCurveEnabled = canDepositCurve;\n\n    const showETHWrapperEnabled = this.props.selectedToken === 'WETH' && (this.state.showETHWrapperEnabled || !canDeposit);\n\n    const canRedeemCurve = curveTokenEnabled && curveTokenBalance && curveTokenBalance.gt(0);\n    const redeemCurveEnabled = canRedeemCurve;\n\n    const newState = {...this.state};\n\n    // Check curve deposit enabled\n    if (newState.depositCurveEnabled && !curveTokenEnabled){\n      newState.depositCurveEnabled = false;\n    }\n    \n    newState.canRedeem = canRedeem;\n    newState.canDeposit = canDeposit;\n    newState.unlentBalance = unlentBalance;\n    newState.tokenApproved = tokenApproved;\n    newState.contractPaused = contractPaused;\n    newState.canRedeemCurve = canRedeemCurve;\n    newState.canDepositCurve = canDepositCurve;\n    newState.migrationEnabled = migrationEnabled;\n    newState.curveTokenBalance = curveTokenBalance;\n    newState.curveSwapContract = curveSwapContract;\n    newState.redeemCurveEnabled = redeemCurveEnabled;\n    newState.depositCurveEnabled = depositCurveEnabled;\n    newState.curveDepositContract = curveDepositContract;\n    newState.showETHWrapperEnabled = showETHWrapperEnabled;\n\n    newState.txError = {\n      redeem:false,\n      deposit:false\n    };\n    newState.processing = {\n      redeem:{\n        txHash:null,\n        loading:false\n      },\n      deposit:{\n        txHash:null,\n        loading:false\n      },\n      approve:{\n        txHash:null,\n        loading:false\n      },\n      boost:{\n        txHash:null,\n        loading:false\n      }\n    };\n    newState.inputValue = {\n      boost:null,\n      redeem:null,\n      deposit:null\n    };\n    newState.fastBalanceSelector = {\n      boost:null,\n      redeem:null,\n      deposit:null\n    };\n\n    newState.componentMounted = true;\n\n    this.setState(newState,() => {\n      this.checkAction();\n      this.loadAPY();\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const redeemGovTokens = this.state.redeemGovTokens;\n    const inputValue = this.state.inputValue[this.state.action];\n    const selectedPercentage = this.getFastBalanceSelector();\n\n    let loading = true;\n\n    switch (this.state.action){\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        if (!this.state.tokenApproved){\n          return this.approveToken();\n        }\n\n        if (localStorage){\n          this.functionsUtil.setLocalStorage('redirectToFundsAfterLogged',0);\n        }\n\n        this.setState({\n          lendingProcessing: this.props.account,\n          lendAmount: '',\n          genericError: '',\n        });\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.props.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if (this.state.metaTransactionsEnabled && txError){\n            this.setState({\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n        const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token,'enabled']);\n\n        // Handle Curve Deposit\n        if (curveTokenEnabled && this.state.depositCurveEnabled){\n\n          const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,curvePoolContractInfo.decimals);\n\n          const amounts = await this.functionsUtil.getCurveAmounts(this.props.tokenConfig.idle.token,tokensToDeposit);\n          let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n          if (this.state.maxSlippage){\n            minMintAmount = this.functionsUtil.BNify(minMintAmount);\n            minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n            minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n          }\n          \n          const depositParams = [amounts,minMintAmount];\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, callbackDeposit, callbackReceiptDeposit);\n        } else {\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n\n          const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','metaTransactionsEnabled']);\n          // const gasLimitDeposit = this.functionsUtil.BNify(1000000);\n          let depositParams = [];\n\n          // Use Proxy Contract if enabled\n          const mintProxyContractInfo = this.state.actionProxyContract[this.state.action];\n          if (depositMetaTransactionsEnabled && mintProxyContractInfo && this.props.biconomy && this.state.metaTransactionsEnabled){\n            const mintProxyContract = this.state.actionProxyContract[this.state.action].contract;\n            depositParams = [tokensToDeposit, this.props.tokenConfig.idle.address];\n            // console.log('mintProxyContract',mintProxyContractInfo.function,depositParams);\n            if (this.state.metaTransactionsEnabled){\n              const functionSignature = mintProxyContract.methods[mintProxyContractInfo.function](...depositParams).encodeABI();\n              contractSendResult = await this.functionsUtil.sendBiconomyTxWithPersonalSign(mintProxyContractInfo.name, functionSignature, callbackDeposit, callbackReceiptDeposit);\n            } else {\n              contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n            }\n          // Use main contract if no proxy contract exists\n          } else {\n            let _skipMint = !this.state.directMint && this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMint']);\n            _skipMint = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : _skipMint;\n\n            // Check if deposited amount is greated that general lower limit for direct mint\n            if (_skipMint && this.state.minAmountForMintReached){\n              _skipMint = false;\n            }\n\n            // console.log('skipMint',_skipMint);\n\n            depositParams = [tokensToDeposit, _skipMint, '0x0000000000000000000000000000000000000000'];\n            contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'mintIdleToken', depositParams, callbackDeposit, callbackReceiptDeposit);\n          }\n        }\n      break;\n      case 'redeem':\n\n        if (redeemGovTokens){\n          const callbackRedeem = (tx,error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_gov`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: 0\n            };\n\n            if (error){\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error'){\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  txHash:null,\n                  loading:false\n                }\n              }\n            }));\n\n            if (txSucceeded){\n              this.setState((prevState) => ({\n                inputValue:{\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'redeemIdleToken', [0], callbackRedeem, callbackReceiptRedeem);\n          \n        } else {\n\n          if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n            return false;\n          }\n\n          const txData = {\n            value:this.functionsUtil.BNify(inputValue)\n          };\n\n          let idleTokenToRedeem = null;\n          if (selectedPercentage){\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage);\n          } else {\n            const idleTokenPrice = await this.functionsUtil.genericContractCall(this.props.tokenConfig.idle.token, 'tokenPrice');\n            idleTokenToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals)).div(idleTokenPrice);\n          }\n\n          // Normalize number\n          idleTokenToRedeem = this.functionsUtil.normalizeTokenAmount(idleTokenToRedeem,18);\n\n          if (!idleTokenToRedeem){\n            return false;\n          }\n\n          const callbackRedeem = (tx,error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_partial`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: parseInt(inputValue)\n            };\n\n            if (error){\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error'){\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  txHash:null,\n                  loading:false\n                }\n              }\n            }));\n\n            if (txSucceeded){\n              this.setState((prevState) => ({\n                inputValue:{\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]:{\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          let redeemParams = [idleTokenToRedeem];\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'redeemIdleToken', redeemParams, callbackRedeem, callbackReceiptRedeem, txData);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    if (contractSendResult !== false){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  showMaxSlippage = () => {\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  checkAction = () => {\n    let action = this.state.action;\n\n    switch(action){\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = 'deposit';\n        }\n      break;\n      default:\n      break;\n    }\n\n    if (action !== this.state.action){\n      this.setState({\n        action\n      },() => {\n        this.checkButtonDisabled();\n      });\n    } else {\n      this.checkButtonDisabled();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && amount.gt(this.props.tokenBalance));\n      break;\n      case 'redeem':\n        buttonDisabled = !this.state.canRedeemCurve && !this.state.redeemGovTokens && ( buttonDisabled || (amount && amount.gt(this.props.redeemableBalance)) );\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.props.tokenBalance ? this.functionsUtil.BNify(this.props.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        amount = this.props.redeemableBalance ? this.functionsUtil.BNify(this.props.redeemableBalance).times(selectedPercentage) : null;\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  changeInputValue = async (e) => {\n    if (!this.state.action){\n      return false;\n    }\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem && !this.state.canRedeemCurve){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const viewOnly = this.props.connectorName === 'custom';\n\n    const govTokensDisabled = this.props.tokenConfig.govTokensDisabled;\n    const govTokensEnabled = this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'govTokensEnabled']);\n    const skipMintForDepositEnabled = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : true;\n    const skipMintCheckboxEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMintCheckboxEnabled']) && skipMintForDepositEnabled;\n\n    const redeemGovTokenEnabled = this.functionsUtil.getGlobalConfig(['contract','methods','redeemGovTokens','enabled']) && !govTokensDisabled && govTokensEnabled;\n    const redeemGovTokens = redeemGovTokenEnabled && this.state.redeemGovTokens && this.state.action === 'redeem';\n\n    const metaTransactionsAvailable = this.props.biconomy && this.state.actionProxyContract[this.state.action];\n    const useMetaTx = metaTransactionsAvailable && this.state.metaTransactionsEnabled;\n    const totalBalance = this.state.action === 'deposit' ? this.props.tokenBalance : this.props.redeemableBalance;\n    const migrateText = this.state.migrationEnabled && this.props.tokenConfig.migration.message !== undefined ? this.props.tokenConfig.migration.message : null;\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.tokenConfig.idle.token,'enabled']);\n\n    const depositCurve = curveTokenEnabled && this.state.depositCurveEnabled && this.state.action === 'deposit';\n\n    const showDepositOptions = this.state.action === 'deposit' && !this.state.contractPaused && (curveTokenEnabled || this.state.tokenApproved);\n\n    const showDepositCurve = showDepositOptions && curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canDepositCurve && this.state.action === 'deposit';\n    const showRedeemCurve = curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canRedeemCurve && this.state.action === 'redeem';\n\n    const showRedeemFlow = this.state.canRedeem && (!this.state.redeemCurveEnabled || this.state.showRedeemFlow);\n\n    const showCurveSlippage = depositCurve && this.state.depositCurveSlippage && this.state.depositCurveBalance && !this.state.buttonDisabled;\n\n    const showRebalanceOption = showDepositOptions && this.state.canDeposit && skipMintCheckboxEnabled && this.state.action === 'deposit';\n    const showAdvancedDepositOptions = showDepositCurve || showRebalanceOption;\n\n    const batchDepositInfo = this.functionsUtil.getGlobalConfig(['tools','batchDeposit']);\n    const batchDepositEnabled = batchDepositInfo.enabled && typeof batchDepositInfo.props.availableTokens[this.props.tokenConfig.idle.token] !== 'undefined';\n    const batchDepositDepositEnabled = batchDepositInfo.depositEnabled;\n\n    const showBatchDeposit = batchDepositEnabled && batchDepositDepositEnabled && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    const ethWrapperInfo = this.functionsUtil.getGlobalConfig(['tools','ethWrapper']);\n    const ETHWrapperComponent = ethWrapperInfo.subComponent;\n    const showETHWrapper = this.props.selectedToken === 'WETH' && ethWrapperInfo.enabled && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    const canPerformAction = /*!depositCurve && !this.state.redeemCurveEnabled && */((this.state.action === 'deposit' && this.state.canDeposit) || (this.state.action === 'redeem' && this.state.canRedeem) || redeemGovTokens) && (!this.state.showETHWrapperEnabled || this.state.action === 'redeem');\n    const showActionFlow = !redeemGovTokens && canPerformAction;\n\n    const showBuyFlow = this.state.componentMounted && (!showDepositCurve || this.state.showBuyFlow) && !this.state.depositCurveEnabled && this.state.tokenApproved && !this.state.contractPaused && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.action === 'deposit' && !this.state.canDeposit && !this.state.showETHWrapperEnabled;\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          <Box\n            width={1}\n          >\n            <Text mb={1}>\n              Select your asset:\n            </Text>\n            <AssetSelector\n              {...this.props}\n            />\n          </Box>\n          {\n            viewOnly ? (\n              <IconBox\n                cardProps={{\n                  mt:3\n                }}\n                icon={'Visibility'}\n                text={'You are using Idle in \"Read-Only\" mode.<br />Logout and connect with your wallet to interact.'}\n              />\n            ) : (\n              <Migrate\n                {...this.props}\n                migrateTextBefore={migrateText}\n                migrateText={migrateText !== null ? '' : null}\n                toggleSkipMigration={this.toggleSkipMigration.bind(this)}\n              >\n                {\n                  !this.props.account ? (\n                    <ConnectBox\n                      {...this.props}\n                    />\n                  ) :\n                  this.state.componentMounted ? (\n                    this.state.action ? (\n                      <Box width={1}>\n                        <Flex\n                          mt={2}\n                          flexDirection={'column'}\n                        >\n                          <Text mb={2}>\n                            Choose the action:\n                          </Text>\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'space-between'}\n                          >\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                width:0.48,\n                                onMouseDown:() => {\n                                  this.setAction('deposit');\n                                }\n                              }}\n                              isInteractive={true}\n                              isActive={ this.state.action === 'deposit' }\n                            >\n                              <Flex\n                                my={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <TransactionField\n                                  transaction={{\n                                    action:'deposit'\n                                  }}\n                                  fieldInfo={{\n                                    name:'icon',\n                                    props:{\n                                      mr:3\n                                    }\n                                  }}\n                                />\n                                <Text\n                                  fontSize={3}\n                                  fontWeight={3}\n                                >\n                                  Deposit\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                width:0.48,\n                                onMouseDown:() => {\n                                  this.setAction('redeem');\n                                }\n                              }}\n                              isInteractive={true}\n                              isActive={ this.state.action === 'redeem' }\n                              isDisabled={ !this.state.canRedeem && !this.state.canRedeemCurve }\n                            >\n                              <Flex\n                                my={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <TransactionField\n                                  transaction={{\n                                    action:'redeem'\n                                  }}\n                                  fieldInfo={{\n                                    name:'icon',\n                                    props:{\n                                      mr:3\n                                    }\n                                  }}\n                                />\n                                <Text\n                                  fontSize={3}\n                                  fontWeight={3}\n                                >\n                                  Redeem\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          </Flex>\n                        </Flex>\n                        {\n                          showAdvancedDepositOptions ? (\n                            <DashboardCard\n                              cardProps={{\n                                pt:2,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                                pb:this.state.showAdvancedOptions ? 3 : 2,\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <Link\n                                  ml={1}\n                                  mainColor={'primary'}\n                                  hoverColor={'primary'}\n                                  onClick={this.toggleShowAdvancedOptions}\n                                >\n                                  { this.state.showAdvancedOptions ? 'Hide' : 'Show' } advanced options\n                                </Link>\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={this.state.showAdvancedOptions ? 'ArrowDropUp' : 'ArrowDropDown'}\n                                />\n                              </Flex>\n                              {\n                                this.state.showAdvancedOptions &&\n                                  <Flex\n                                    mt={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      showDepositCurve && \n                                        <Flex\n                                          alignItems={'center'}\n                                          justifyContent={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            disabled={this.state.directMint}\n                                            label={`Deposit in the Curve Pool`}\n                                            checked={this.state.depositCurveEnabled}\n                                            onChange={ e => this.toggleDepositCurve(e.target.checked) }\n                                          />\n                                          <Link\n                                            mainColor={'primary'}\n                                            hoverColor={'primary'}\n                                            onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                          >\n                                            (read more)\n                                          </Link>\n                                        </Flex>\n                                    }\n                                    {\n                                      showRebalanceOption && \n                                        <Flex\n                                          alignItems={'center'}\n                                          justifyContent={'row'}\n                                        >\n                                          <Checkbox\n                                            required={false}\n                                            label={`Rebalance the pool`}\n                                            checked={this.state.directMint}\n                                            disabled={this.state.depositCurveEnabled}\n                                            onChange={ e => this.toggleSkipMint(e.target.checked) }\n                                          />\n                                          <Tooltip\n                                            placement={'bottom'}\n                                            message={this.functionsUtil.getGlobalConfig(['messages','directMint'])}\n                                          >\n                                            <Icon\n                                              size={'1em'}\n                                              color={'cellTitle'}\n                                              name={\"InfoOutline\"}\n                                            />\n                                          </Tooltip>\n                                        </Flex>\n                                    }\n                                  </Flex>\n                              }\n                            </DashboardCard>\n                          ) : (\n                            <Flex\n                              width={1}\n                              flexDirection={'column'}\n                            >\n                              {\n                                showDepositCurve && (\n                                  <Flex\n                                    width={1}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <DashboardCard\n                                      isRainbow={true}\n                                      cardProps={{\n                                        py:3,\n                                        px:2,\n                                        mt:3,\n                                        display:'flex',\n                                        alignItems:'center',\n                                        flexDirection:'column',\n                                        justifyContent:'center',\n                                      }}\n                                    >\n                                      <Flex\n                                        width={1}\n                                        alignItems={'center'}\n                                        flexDirection={'column'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Image\n                                          height={'1.8em'}\n                                          src={curveConfig.params.image}\n                                        />\n                                        <Text\n                                          mt={2}\n                                          px={2}\n                                          fontSize={1}\n                                          color={'dark-gray'}\n                                          textAlign={'center'}\n                                        >\n                                          Deposit your tokens in the Curve Pool and boost your APY up to {this.state.curveAPY ? this.state.curveAPY.toFixed(2) : '-'}%.\n                                          <Link\n                                            ml={1}\n                                            mainColor={'primary'}\n                                            hoverColor={'primary'}\n                                            onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                          >\n                                            Read More\n                                          </Link>\n                                        </Text>\n                                        <Checkbox\n                                          mt={2}\n                                          required={false}\n                                          label={`Deposit in Curve`}\n                                          checked={this.state.depositCurveEnabled}\n                                          onChange={ e => this.toggleDepositCurve(e.target.checked) }\n                                        />\n                                      </Flex>\n                                    </DashboardCard>\n                                    {\n                                      (!this.state.showBuyFlow && !this.state.depositCurveEnabled && !this.state.canDeposit) &&\n                                        <Link\n                                          textAlign={'center'}\n                                          hoverColor={'primary'}\n                                          onClick={ e => this.setShowBuyFlow(true) }\n                                        >\n                                          I just want to deposit more {this.props.selectedToken}\n                                        </Link>\n                                    }\n                                  </Flex>\n                                )\n                              }\n                              {\n                                showRebalanceOption && (\n                                  <DashboardCard\n                                    cardProps={{\n                                      py:3,\n                                      px:2,\n                                      mt:3,\n                                      display:'flex',\n                                      alignItems:'center',\n                                      flexDirection:'column',\n                                      justifyContent:'center',\n                                    }}\n                                  >\n                                    <Flex\n                                      width={1}\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        color={'cellText'}\n                                        name={'InfoOutline'}\n                                      />\n                                      <Text\n                                        mt={1}\n                                        px={2}\n                                        fontSize={1}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        By checking this flag you can rebalance the pool and help all users gain an additional APR\n                                      </Text>\n                                    </Flex>\n                                    <Checkbox\n                                      mt={2}\n                                      required={false}\n                                      label={`Rebalance the pool`}\n                                      checked={this.state.directMint}\n                                      onChange={ e => this.toggleSkipMint(e.target.checked) }\n                                    />\n                                  </DashboardCard>\n                                )\n                              }\n                            </Flex>\n                          )\n                        }\n                        {\n                          (metaTransactionsAvailable && !showBuyFlow && !this.state.contractPaused) && \n                          <DashboardCard\n                            cardProps={{\n                              py:3,\n                              px:2,\n                              my:3,\n                              display:'flex',\n                              alignItems:'center',\n                              flexDirection:'column',\n                              justifyContent:'center',\n                            }}\n                          >\n                            {\n                              this.state.metaTransactionsEnabled && this.state.txError[this.state.action] && this.state.actionProxyContract[this.state.action].approved ? (\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    name={'Warning'}\n                                    color={'cellText'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    Seems like you are having some trouble with Meta-Transactions... Disable them by unchecking the box below and try again!\n                                  </Text>\n                                </Flex>\n                              ) : this.functionsUtil.getWalletProvider() === 'WalletConnect' && this.state.metaTransactionsEnabled ? (\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    name={'Warning'}\n                                    color={'cellText'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    Please disable Meta-Transactions if you are using Argent Wallet to avoid failed transactions!\n                                  </Text>\n                                </Flex>\n                              ) : (\n                                <Text\n                                  mt={1}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Meta-Transactions are {this.state.metaTransactionsEnabled ? 'available' : 'disabled'} for {this.state.action}s!<br />\n                                  {\n                                    this.state.metaTransactionsEnabled && !this.state.actionProxyContract[this.state.action].approved && `Please either enable the Smart-Contract to enjoy gas-less ${this.state.action} or just disable meta-tx.`\n                                  }\n                                </Text>\n                              )\n                            }\n                            <Checkbox\n                              mt={2}\n                              required={false}\n                              checked={this.state.metaTransactionsEnabled}\n                              onChange={ e => this.toggleMetaTransactionsEnabled(e.target.checked) }\n                              label={`${this.functionsUtil.capitalize(this.state.action)} with Meta-Transaction`}\n                            />\n                          </DashboardCard>\n                        }\n                        {\n                          (this.state.minAmountForMintReached && this.state.action === 'deposit') && (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                mt:3\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={'InfoOutline'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  By depositing more than {this.functionsUtil.formatMoney(this.state.minAmountForMint)}$ { this.state.showPoolPerc ? `(${this.state.minAmountForMint.div(this.state.totalAUM).times(100).toFixed(0)}% of the pool)` : null } the pool will be automatically rebalanced, gas cost may be higher.\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          showBatchDeposit ? (\n                            <Flex\n                              p={2}\n                              mt={3}\n                              width={1}\n                              borderRadius={2}\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              justifyContent={'center'}\n                              backgroundColor={'DashboardCard'}\n                              border={`1px solid ${this.props.theme.colors.primary}`}\n                            >\n                              <Link\n                                textAlign={'center'}\n                                hoverColor={'primary'}\n                                href={`/#/dashboard/tools/${batchDepositInfo.route}/${this.props.tokenConfig.idle.token}`}\n                              >\n                                Gas fees too high? Save gas with our Batch Deposit!\n                              </Link>\n                              <Icon\n                                ml={1}\n                                size={'1em'}\n                                color={'primary'}\n                                name={'LocalGasStation'}\n                              />\n                            </Flex>\n                          ) : showETHWrapper && (\n                            <Flex\n                              width={1}\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <DashboardCard\n                                cardProps={{\n                                  py:3,\n                                  px:2,\n                                  mt:3,\n                                  display:'flex',\n                                  alignItems:'center',\n                                  flexDirection:'column',\n                                  justifyContent:'center',\n                                  pb:this.state.showAdvancedOptions ? 3 : 2,\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  justifyContent={'row'}\n                                >\n                                  <Checkbox\n                                    required={false}\n                                    checked={this.state.showETHWrapperEnabled}\n                                    label={`Convert your ETH to WETH`}\n                                    onChange={ e => this.toggleShowETHWrapper(e.target.checked) }\n                                  />\n                                </Flex>\n                              </DashboardCard>\n                              {\n                                this.state.showETHWrapperEnabled && \n                                  <ETHWrapperComponent\n                                    {...this.props}\n                                    fullWidth={true}\n                                    depositOnly={true}\n                                    toolProps={ethWrapperInfo.props}\n                                  />\n                              }\n                            </Flex>\n                          )\n                        }\n                        {\n                          showRedeemCurve && this.state.canRedeem && (\n                            <Flex\n                              width={1}\n                              flexDirection={'column'}\n                              justifyContent={'center'}\n                            >\n                              <DashboardCard\n                                isRainbow={true}\n                                cardProps={{\n                                  py:3,\n                                  px:2,\n                                  mt:3,\n                                  display:'flex',\n                                  alignItems:'center',\n                                  flexDirection:'column',\n                                  justifyContent:'center',\n                                }}\n                              >\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Image\n                                    height={'1.8em'}\n                                    src={curveConfig.params.image}\n                                  />\n                                  <Text\n                                    mt={2}\n                                    px={2}\n                                    fontSize={1}\n                                    color={'dark-gray'}\n                                    textAlign={'center'}\n                                  >\n                                    Redeem your tokens from the Curve Pool.\n                                    <Link\n                                      ml={1}\n                                      mainColor={'primary'}\n                                      hoverColor={'primary'}\n                                      onClick={ e => this.props.openTooltipModal('How Curve works',this.functionsUtil.getGlobalConfig(['messages','curveInstructions'])) }\n                                    >\n                                      Read More\n                                    </Link>\n                                  </Text>\n                                  {\n                                    this.state.canRedeem &&\n                                      <Checkbox\n                                        mt={2}\n                                        required={false}\n                                        label={`Redeem from Curve`}\n                                        checked={this.state.redeemCurveEnabled}\n                                        onChange={ e => this.toggleRedeemCurve(e.target.checked) }\n                                      />\n                                  }\n                                </Flex>\n                              </DashboardCard>\n                              {\n                                this.canRedeem &&\n                                  <Link\n                                    textAlign={'center'}\n                                    hoverColor={'primary'}\n                                    onClick={ e => this.setShowRedeemFlow(true) }\n                                  >\n                                    I just want to redeem my {this.props.selectedToken}\n                                  </Link>\n                              }\n                            </Flex>\n                          )\n                        }\n                        {\n                          (this.state.action === 'redeem' && this.state.unlentBalance && showRedeemFlow) &&\n                            <DashboardCard\n                              cardProps={{\n                                py:2,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={'LocalGasStation'}\n                                />\n                                <Text\n                                  px={2}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Available balance for Cheap Redeem\n                                </Text>\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'center'}\n                                    hoverColor={'copyColor'}\n                                  >\n                                    {this.state.unlentBalance.toFixed(4)} {this.props.selectedToken}\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.functionsUtil.getGlobalConfig(['messages','cheapRedeem'])}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              </Flex>\n                            </DashboardCard>\n                        }\n                        {\n                          (this.state.action === 'redeem' && redeemGovTokenEnabled && showRedeemFlow) && (\n                            <DashboardCard\n                              cardProps={{\n                                py:3,\n                                px:2,\n                                mt:3,\n                                display:'flex',\n                                alignItems:'center',\n                                flexDirection:'column',\n                                justifyContent:'center',\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={'InfoOutline'}\n                                />\n                                <Text\n                                  mt={1}\n                                  px={2}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  By redeeming your {this.props.selectedToken} you will automatically get also the proportional amount of governance tokens accrued{ this.props.govTokensBalance && this.props.govTokensBalance.gt(0) ? ` (~ $${this.props.govTokensBalance.toFixed(2)})` : null }.\n                                </Text>\n                              </Flex>\n                              <Checkbox\n                                mt={2}\n                                required={false}\n                                checked={this.state.redeemGovTokens}\n                                label={`Redeem governance tokens only`}\n                                onChange={ e => this.toggleRedeemGovTokens(e.target.checked) }\n                              />\n                            </DashboardCard>\n                          )\n                        }\n                        {\n                          (this.state.contractPaused && this.state.action === 'deposit') ? (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                mt:3\n                              }}\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  name={'Warning'}\n                                  color={'cellText'}\n                                />\n                                <Text\n                                  mt={1}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Deposits for {this.props.selectedToken} are temporarily unavailable due to Smart-Contract maintenance. Redeems are always available.\n                                </Text>\n                              </Flex>\n                            </DashboardCard>\n                          ) : (!this.state.tokenApproved && this.state.action === 'deposit' && !this.state.showETHWrapperEnabled) ? (\n                            <DashboardCard\n                              cardProps={{\n                                p:3,\n                                mt:3\n                              }}\n                            >\n                              {\n                                this.state.processing['approve'] && this.state.processing['approve'].loading ? (\n                                  <Flex\n                                    flexDirection={'column'}\n                                  >\n                                    <TxProgressBar\n                                      web3={this.props.web3}\n                                      waitText={`Approve estimated in`}\n                                      endMessage={`Finalizing approve request...`}\n                                      hash={this.state.processing['approve'].txHash}\n                                      cancelTransaction={this.cancelTransaction.bind(this)}\n                                    />\n                                  </Flex>\n                                ) : (\n                                  <Flex\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                  >\n                                    <Icon\n                                      size={'1.8em'}\n                                      name={'LockOpen'}\n                                      color={'cellText'}\n                                    />\n                                    <Text\n                                      mt={3}\n                                      fontSize={2}\n                                      color={'cellText'}\n                                      textAlign={'center'}\n                                    >\n                                      {\n                                        this.state.depositCurveEnabled ? \n                                          `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.`\n                                        : useMetaTx ?\n                                          `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle using Meta-Transaction you need to approve our Smart-Contract first.`\n                                        :\n                                          `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle you need to approve our Smart-Contract first.`\n                                      }\n                                    </Text>\n                                    <RoundButton\n                                      buttonProps={{\n                                        mt:3,\n                                        width:[1,1/2]\n                                      }}\n                                      handleClick={this.approveToken.bind(this)}\n                                    >\n                                      Approve\n                                    </RoundButton>\n                                  </Flex>\n                                )\n                              }\n                            </DashboardCard>\n                          ) : (!showBuyFlow && canPerformAction) && (\n                            !this.state.processing[this.state.action].loading ? (\n                              <Flex\n                                mt={2}\n                                flexDirection={'column'}\n                              >\n                                {\n                                  showActionFlow && (\n                                    <Flex\n                                      mb={3}\n                                      width={1}\n                                      flexDirection={'column'}\n                                    >\n                                      {\n                                        /*\n                                        showCurveSlippage &&\n                                          <DashboardCard\n                                            cardProps={{\n                                              p:3,\n                                              mb:2\n                                            }}\n                                          >\n                                            <Flex\n                                              alignItems={'center'}\n                                              flexDirection={'column'}\n                                            >\n                                              <Icon\n                                                size={'1.8em'}\n                                                color={'cellText'}\n                                                name={'FileUpload'}\n                                              />\n                                              <Text\n                                                mt={2}\n                                                fontSize={2}\n                                                color={'cellText'}\n                                                textAlign={'center'}\n                                              >\n                                                You can deposit {this.state.depositCurveBalance.toFixed(4)} {this.props.selectedToken} in the Curve Pool{ this.state.depositCurveSlippage ? (this.state.depositCurveSlippage.gt(0) ? ` with ${this.state.depositCurveSlippage.times(100).toFixed(2)}% of slippage` : ` with ${Math.abs(parseFloat(this.state.depositCurveSlippage.times(100).toFixed(2)))}% of bonus`) : '' }.\n                                              </Text>\n                                            </Flex>\n                                          </DashboardCard>\n                                        */\n                                      }\n                                      {\n                                        (totalBalance || this.props.tokenFeesPercentage) && (\n                                          <Box\n                                            mb={1}\n                                            width={1}\n                                          >\n                                            {\n                                              this.state.showMaxSlippage && showCurveSlippage && (\n                                                <Box\n                                                  mb={2}\n                                                  width={1}\n                                                >\n                                                  <Flex\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                  >\n                                                    <Text>\n                                                      Choose max slippage:\n                                                    </Text>\n                                                    <Tooltip\n                                                      placement={'top'}\n                                                      message={`Max additional slippage on top of the one shown below`}\n                                                    >\n                                                      <Icon\n                                                        ml={1}\n                                                        size={'1em'}\n                                                        color={'cellTitle'}\n                                                        name={\"InfoOutline\"}\n                                                      />\n                                                    </Tooltip>\n                                                  </Flex>\n                                                  <Flex\n                                                    mt={2}\n                                                    alignItems={'center'}\n                                                    flexDirection={'row'}\n                                                    justifyContent={'space-between'}\n                                                  >\n                                                    {\n                                                      [0.2,0.5,1,5].map( slippage => (\n                                                        <FastBalanceSelector\n                                                          cardProps={{\n                                                            p:1\n                                                          }}\n                                                          textProps={{\n                                                            fontSize:1\n                                                          }}\n                                                          percentage={slippage}\n                                                          key={`selector_${slippage}`}\n                                                          onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                                          isActive={this.state.maxSlippage === parseFloat(slippage)}\n                                                        />\n                                                      ))\n                                                    }\n                                                  </Flex>\n                                                </Box>\n                                              )\n                                            }\n                                            <Flex\n                                              width={1}\n                                              alignItems={'center'}\n                                              flexDirection={'row'}\n                                              justifyContent={'space-between'}\n                                            >\n                                            {\n                                              showCurveSlippage ? (\n                                                <Flex\n                                                  width={1}\n                                                  maxWidth={'50%'}\n                                                  alignItems={'center'}\n                                                  flexDirection={'row'}\n                                                >\n                                                  <Text\n                                                    fontSize={1}\n                                                    fontWeight={3}\n                                                    textAlign={'right'}\n                                                    style={{\n                                                      whiteSpace:'nowrap'\n                                                    }}\n                                                    color={ this.state.depositCurveSlippage.gt(0) ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                                  >\n                                                    {\n                                                      parseFloat(this.state.depositCurveSlippage.times(100).toFixed(2)) === 0 ?\n                                                        'No Slippage'\n                                                      : `${ this.state.depositCurveSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositCurveSlippage.times(100).abs().toFixed(2)}%`\n                                                    }\n                                                  </Text>\n                                                  <Tooltip\n                                                    placement={'top'}\n                                                    message={this.functionsUtil.getGlobalConfig(['messages','curveBonusSlippage'])}\n                                                  >\n                                                    <Icon\n                                                      ml={1}\n                                                      size={'1em'}\n                                                      color={'cellTitle'}\n                                                      name={\"InfoOutline\"}\n                                                    />\n                                                  </Tooltip>\n                                                  <Link\n                                                    ml={1}\n                                                    color={'copyColor'}\n                                                    hoverColor={'primary'}\n                                                    onClick={this.showMaxSlippage}\n                                                  >\n                                                    change\n                                                  </Link>\n                                                </Flex>\n                                              ) : this.props.tokenFeesPercentage && (\n                                                <Flex\n                                                  alignItems={'center'}\n                                                  flexDirection={'row'}\n                                                >\n                                                  <Text\n                                                    fontSize={1}\n                                                    fontWeight={3}\n                                                    color={'dark-gray'}\n                                                    textAlign={'right'}\n                                                    hoverColor={'copyColor'}\n                                                  >\n                                                    Performance fee: {this.props.tokenFeesPercentage.times(100).toFixed(2)}%\n                                                  </Text>\n                                                  <Tooltip\n                                                    placement={'top'}\n                                                    message={this.functionsUtil.getGlobalConfig(['messages','performanceFee'])}\n                                                  >\n                                                    <Icon\n                                                      ml={1}\n                                                      size={'1em'}\n                                                      color={'cellTitle'}\n                                                      name={\"InfoOutline\"}\n                                                    />\n                                                  </Tooltip>\n                                                </Flex>\n                                              )\n                                            }\n                                            {\n                                              totalBalance && (\n                                                <Link\n                                                  fontSize={1}\n                                                  fontWeight={3}\n                                                  color={'dark-gray'}\n                                                  textAlign={'right'}\n                                                  hoverColor={'copyColor'}\n                                                  onClick={ (e) => this.setFastBalanceSelector(100) }\n                                                >\n                                                  {totalBalance.toFixed(6)} {this.props.selectedToken}\n                                                </Link>\n                                              )\n                                            }\n                                            </Flex>\n                                          </Box>\n                                        )\n                                      }\n                                      <Input\n                                        min={0}\n                                        type={\"number\"}\n                                        required={true}\n                                        height={'3.4em'}\n                                        borderRadius={2}\n                                        fontWeight={500}\n                                        className={styles.input}\n                                        borderColor={'cardBorder'}\n                                        backgroundColor={'cardBg'}\n                                        boxShadow={'none !important'}\n                                        placeholder={`Insert amount`}\n                                        onChange={this.changeInputValue.bind(this)}\n                                        border={`1px solid ${this.props.theme.colors.divider}`}\n                                        value={this.state.inputValue[this.state.action] !== null ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]).toFixed() : ''}\n                                      />\n                                      <Flex\n                                        mt={2}\n                                        alignItems={'center'}\n                                        flexDirection={'row'}\n                                        justifyContent={'space-between'}\n                                      >\n                                        {\n                                          [25,50,75,100].map( percentage => (\n                                            <FastBalanceSelector\n                                              percentage={percentage}\n                                              key={`selector_${percentage}`}\n                                              onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                              isActive={this.state.fastBalanceSelector[this.state.action] === parseInt(percentage)}\n                                            />\n                                          ))\n                                        }\n                                      </Flex>\n                                    </Flex>\n                                  )\n                                }\n                                {\n                                  canPerformAction && \n                                    <Flex\n                                      justifyContent={'center'}\n                                      mt={ redeemGovTokens ? 2 : 0 }\n                                    >\n                                      <RoundButton\n                                        buttonProps={{\n                                          width:'auto',\n                                          minWidth:[1,1/2],\n                                          style:{\n                                            textTransform:'capitalize'\n                                          },\n                                          disabled:this.state.buttonDisabled\n                                        }}\n                                        handleClick={this.state.buttonDisabled ? null : this.executeAction.bind(this) }\n                                      >\n                                        {this.state.action}{ redeemGovTokens ? ' Gov Tokens' : '' /*(depositCurve ? ' in Curve' : '')*/ }\n                                      </RoundButton>\n                                    </Flex>\n                                }\n                              </Flex>\n                            ) : (\n                              <Flex\n                                mt={4}\n                                flexDirection={'column'}\n                              >\n                                <TxProgressBar\n                                  web3={this.props.web3}\n                                  cancelTransaction={this.cancelTransaction.bind(this)}\n                                  hash={this.state.processing[this.state.action].txHash}\n                                  endMessage={`Finalizing ${this.state.action} request...`}\n                                  waitText={`${this.functionsUtil.capitalize(this.state.action)} estimated in`}\n                                />\n                              </Flex>\n                            )\n                          )\n                        }\n                      </Box>\n                    ) : null\n                  ) : (\n                    <Flex\n                      mt={4}\n                      flexDirection={'column'}\n                    >\n                      <FlexLoader\n                        flexProps={{\n                          flexDirection:'row'\n                        }}\n                        loaderProps={{\n                          size:'30px'\n                        }}\n                        textProps={{\n                          ml:2\n                        }}\n                        text={'Loading asset info...'}\n                      />\n                    </Flex>\n                  )\n                }\n              </Migrate>\n            )\n          }\n        </Flex>\n        {\n          /*\n          showDepositCurve && this.state.depositCurveEnabled ? (\n            <CurveDeposit\n              {...this.props}\n            />\n          ) :\n          */\n          showRedeemCurve && this.state.redeemCurveEnabled && (\n            <Box\n              mt={3}\n              width={1}\n            >\n              <CurveRedeem\n                {...this.props}\n              />\n            </Box>\n          )\n        }\n        {\n          showBuyFlow &&\n            <Flex\n              mt={3}\n              width={[1,0.5]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <BuyModal\n                {...this.props}\n                showInline={true}\n                availableMethods={[]}\n                buyToken={this.props.selectedToken}\n              />\n            </Flex>\n        }\n\n        <ShareModal\n          confettiEnabled={true}\n          icon={`images/medal.svg`}\n          title={`Congratulations!`}\n          account={this.props.account}\n          closeModal={this.resetModal}\n          tokenName={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'share'}\n          text={`You have successfully deposited in Idle!<br />Enjoy <strong>${this.state.tokenAPY}% APY</strong> on your <strong>${this.props.selectedToken}</strong>!`}\n          tweet={`I'm earning ${this.state.tokenAPY}% APY on my ${this.props.selectedToken} with @idlefinance! Go to ${this.functionsUtil.getGlobalConfig(['baseURL'])} and start earning now from your idle tokens!`}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default DepositRedeem;\n","import theme from '../theme';\nimport { Bar } from '@nivo/bar';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Text, Input, Icon, Tooltip } from \"rimble-ui\";\n\nclass EstimatedEarnings extends Component {\n\n  state = {\n    chartData:null,\n    chartProps:null,\n    inputValue:1000,\n    maxInputValue:999999999999999\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    this.loadChart();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged){\n      this.loadChart();\n    }\n  }\n\n  async loadChart(){\n    const amount = this.functionsUtil.BNify(this.state.inputValue);\n    const earningsYear = amount.times(this.props.tokenApy.div(100));\n\n    const amountMonth = parseFloat(earningsYear.div(12));\n    const amount3Months = parseFloat(earningsYear.div(4));\n    const amount6Months = parseFloat(earningsYear.div(2));\n    const amountYear = parseFloat(earningsYear.div(1));\n\n    const chartData = [\n      {\n        perc:1/12,\n        label:'MONTH',\n        value:amountMonth,\n        month:amountMonth,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        monthColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:3/12,\n        label:'3 MONTHS',\n        value:amount3Months,\n        month3:amount3Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month3Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:6/12,\n        label:'6 MONTHS',\n        value:amount6Months,\n        month6:amount6Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month6Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:1,\n        label:'YEAR',\n        year:amountYear,\n        value:amountYear,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        yearColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      }\n    ];\n\n    let labelTextColorModifiers = this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'chart','labelTextColorModifiers']);\n\n    const maxGridLines = 4;\n    const gridYStep = amountYear/maxGridLines;\n    const gridYValues = [0];\n    for (let i=1;i<=maxGridLines;i++){\n      const gridYValue = i*gridYStep;\n      gridYValues.push(gridYValue);\n    }\n\n    const chartProps = {\n      padding: 0.2,\n      animate: false,\n      indexBy: 'label',\n      // enableLabel: false,\n      labelSkipWidth: 16,\n      labelSkipHeight: 16,\n      keys: ['month','month3','month6','year'],\n      colors: ({ id, data }) => data[`${id}Color`],\n      label: d => this.functionsUtil.abbreviateNumber(d.value,2,4)+' '+this.props.selectedToken,\n      labelTextColor: labelTextColorModifiers ? { from: 'color', modifiers: [ labelTextColorModifiers ] } : null,\n      isInteractive:false,\n      minValue:0,\n      gridYValues,\n      // maxValue:amountYear,\n      axisLeft:{\n        format: v => this.functionsUtil.abbreviateNumber(v,1,3),\n        tickValues:gridYValues,\n        orient: 'left',\n        tickSize: 0,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendPosition: 'middle'\n      },\n      axisBottom:{\n        legend: '',\n        tickSize:0,\n        tickPadding: 15,\n        orient: 'bottom',\n      },\n      theme:{\n        labels:{\n          text:{\n            fontSize:15,\n            fontWeight:600,\n            fill:theme.colors.counter,\n            fontFamily: theme.fonts.sansSerif\n          }\n        },\n        axis: {\n          ticks: {\n            text: {\n              fontSize:14,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '9 5'\n          }\n        },\n      },\n      margin: this.props.isMobile ? { top: 0, right: 0, bottom: 30, left: 0 } : { top: 10, right: 0, bottom: 50, left: 65 }\n    }\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  changeInputValue(e){\n    let inputValue = e.target.value.length && !isNaN(e.target.value) ? Math.min(this.state.maxInputValue,parseFloat(e.target.value)) : 0;\n    inputValue = this.functionsUtil.BNify(inputValue);\n    this.setState({\n      inputValue\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const showAPYDisclaimer = idleTokenEnabled && this.functionsUtil.getGlobalConfig(['govTokens','IDLE','showAPR']);\n\n    return (\n      <DashboardCard\n        cardProps={{\n          p:[3,4]\n        }}\n      >\n        <Flex\n          width={1}\n          flexDirection={['column','row']}\n        >\n          <Flex\n            width={[1,0.3]}\n            flexDirection={'column'}\n            justifyContent={'flex-start'}\n          >\n            <Flex\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <AssetField\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'icon',\n                  props:{\n                    mb:2,\n                    height:'2.5em'\n                  }\n                }}\n              />\n              <Text\n                fontSize={2}\n                color={'cellText'}\n                textAlign={'center'}\n              >\n                Set the amount and see your estimated earnings on time based on the current APY: { this.props.tokenApy ? `${this.props.tokenApy.toFixed(2)}%` : null}\n                {\n                  showAPYDisclaimer && \n                    <Flex\n                      style={{\n                        display:'inline-flex',\n                        verticalAlign:'middle'\n                      }}\n                    >\n                      <Tooltip\n                        placement={'top'}\n                        message={this.functionsUtil.getGlobalConfig(['messages','apyLong'])}\n                      >\n                        <Icon\n                          ml={1}\n                          name={\"Info\"}\n                          size={'1em'}\n                          color={'cellTitle'}\n                        />\n                      </Tooltip>\n                    </Flex>\n                }\n              </Text>\n            </Flex>\n            <Flex\n              mt={3}\n              flexDirection={'column'}\n            >\n              <Input\n                min={0}\n                type={\"number\"}\n                required={true}\n                borderRadius={2}\n                fontWeight={500}\n                textAlign={'center'}\n                height={['3em','3.4em']}\n                borderColor={'cardBorder'}\n                boxShadow={'none !important'}\n                max={this.state.maxInputValue}\n                backgroundColor={'cardBgHover'}\n                onChange={this.changeInputValue.bind(this)}\n                border={`1px solid ${theme.colors.divider}`}\n                placeholder={`Insert ${this.props.selectedToken.toUpperCase()} amount`}\n                value={this.state.inputValue && !isNaN(this.state.inputValue) ? this.state.inputValue : ''}\n              />\n            </Flex>\n            <Flex\n              mt={3}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                buttonProps={{\n                  width:[1,1/2],\n                }}\n                handleClick={this.loadChart.bind(this)}\n              >\n                CALCULATE\n              </RoundButton>\n            </Flex>\n          </Flex>\n          <Flex\n            mt={[3,0]}\n            width={[1,0.7]}\n            id={'estimated-earnings-chart'}\n          >\n            {\n              this.props.isMobile ? (\n                <Flex\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  {\n                    this.state.chartData !== null && this.state.chartData.map((v,index) => (\n                      <Flex\n                        py={2}\n                        my={2}\n                        width={1}\n                        flexDirection={'row'}\n                        key={`earnings_${index}`}\n                      >\n                        <Flex\n                          width={0.35}\n                          alignItems={'center'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            color={'legend'}\n                          >\n                            {v.label}\n                          </Text>\n                        </Flex>\n                        <Flex\n                          width={0.65}\n                          position={'relative'}\n                          alignItems={'center'}\n                          minHeight={['20px','35px']}\n                          justifyContent={'center'}\n                        >\n                          <Flex\n                            zIndex={1}\n                            position={'relative'}\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Text\n                              fontSize={1}\n                              fontWeight={3}\n                              color={'counter'}\n                            >\n                              {this.functionsUtil.abbreviateNumber(v.value,2,4)} {this.props.selectedToken}\n                            </Text>\n                          </Flex>\n                          <Flex\n                            right={0}\n                            width={v.perc}\n                            position={'absolute'}\n                            height={['20px','35px']}\n                            borderRadius={['20px 0 0 20px','35px 0 0 35px']}\n                            style={{background:`linear-gradient(-90deg, rgba(${v.color},0) 0%, rgba(${v.color},1) 100%)`}}\n                          ></Flex>\n                        </Flex>\n                      </Flex>\n                    ))\n                  }\n                </Flex>\n              ) : (\n                <GenericChart\n                  type={Bar}\n                  height={250}\n                  showLoader={true}\n                  {...this.state.chartProps}\n                  data={this.state.chartData}\n                  parentId={'estimated-earnings-chart'}\n                />\n              )\n            }\n          </Flex>\n        </Flex>\n      </DashboardCard>\n    );\n  }\n}\n\nexport default EstimatedEarnings;","import Title from '../Title/Title';\nimport { Box, Flex } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport AssetsList from '../AssetsList/AssetsList';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport FundsOverview from '../FundsOverview/FundsOverview';\nimport DepositRedeem from '../DepositRedeem/DepositRedeem';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport EstimatedEarnings from '../EstimatedEarnings/EstimatedEarnings';\n\nclass AssetPage extends Component {\n\n  state = {\n    tokenApy:{},\n    tokenFees:{},\n    tokenBalance:{},\n    tokenApproved:{},\n    activeModal:null,\n    idleTokenPrice:{},\n    govTokensBalance:{},\n    idleTokenBalance:{},\n    redeemableBalance:{},\n    govTokensDisabled:{},\n    availableGovTokens:{},\n    tokenFeesPercentage:{},\n    componentMounted:false\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadTokensInfo(){\n    if (this.props.account){\n      const newState = {...this.state};\n      await this.functionsUtil.asyncForEach(Object.keys(this.props.availableTokens),async (token) => {\n        const tokenConfig = this.props.availableTokens[token];\n        const govTokenAvailableTokens = {};\n        govTokenAvailableTokens[token] = tokenConfig;\n\n        const [\n          tokenFeesPercentage,\n          tokenApy,\n          tokenBalance,\n          tokenFees,\n          idleTokenPrice,\n          idleTokenBalance,\n          tokenApproved,\n          govTokensBalance\n        ] = await Promise.all([\n          this.functionsUtil.getTokenFees(tokenConfig),\n          this.functionsUtil.getTokenApy(this.props.tokenConfig),\n          this.functionsUtil.getTokenBalance(token,this.props.account),\n          this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n          this.functionsUtil.genericContractCall(tokenConfig.idle.token, 'tokenPrice'),\n          this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n          this.functionsUtil.checkTokenApproved(token,tokenConfig.idle.address,this.props.account),\n          this.functionsUtil.getGovTokensUserTotalBalance(this.props.account,govTokenAvailableTokens,'DAI')\n        ]);\n\n        newState.tokenFees[token] = tokenFees;\n        newState.tokenBalance[token] = tokenBalance;\n        newState.tokenApproved[token] = tokenApproved;\n        newState.idleTokenPrice[token] = idleTokenPrice;\n        newState.idleTokenBalance[token] = idleTokenBalance;\n        newState.govTokensBalance[token] = govTokensBalance;\n        newState.tokenFeesPercentage[token] = tokenFeesPercentage;\n        newState.govTokensDisabled[token] = tokenConfig.govTokensDisabled;\n        newState.tokenApy[token] = tokenApy && !tokenApy.isNaN() ? tokenApy : null;\n        newState.redeemableBalance[token] = idleTokenBalance ? this.functionsUtil.fixTokenDecimals(idleTokenBalance.times(idleTokenPrice),tokenConfig.decimals) : this.functionsUtil.BNify(0);\n      });\n\n      newState.availableGovTokens = this.functionsUtil.getTokenGovTokens(this.props.tokenConfig);\n\n      newState.componentMounted = true;\n\n      this.setState(newState);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n    const accountChanged = prevProps.account !== this.props.account;\n    if (accountChanged || transactionsChanged){\n      this.loadTokensInfo();\n    }\n  }\n\n  render() {\n\n    const userHasFunds = this.props.account && this.state.idleTokenBalance[this.props.selectedToken] && this.functionsUtil.BNify(this.state.idleTokenBalance[this.props.selectedToken]).gt(0);\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            <Breadcrumb\n              {...this.props}\n              isMobile={this.props.isMobile}\n              path={[this.props.selectedToken]}\n              handleClick={ e => this.props.goToSection(this.props.selectedStrategy) }\n              text={this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])}\n            />\n          </Flex>\n          <Flex\n            width={0.5}\n            justifyContent={'flex-end'}\n          >\n            <CardIconButton\n              icon={'Add'}\n              {...this.props}\n              text={'Add funds'}\n              handleClick={ e => this.setActiveModal('buy') }\n            />\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Deposit / Redeem\n        </Title>\n        <Flex\n          width={1}\n        >\n          <DepositRedeem\n            {...this.props}\n            tokenFees={this.state.tokenFees[this.props.selectedToken]}\n            tokenBalance={this.state.tokenBalance[this.props.selectedToken]}\n            tokenApproved={this.state.tokenApproved[this.props.selectedToken]}\n            govTokensBalance={this.state.govTokensBalance[this.props.selectedToken]}\n            idleTokenBalance={this.state.idleTokenBalance[this.props.selectedToken]}\n            redeemableBalance={this.state.redeemableBalance[this.props.selectedToken]}\n            tokenFeesPercentage={this.state.tokenFeesPercentage[this.props.selectedToken]}\n          />\n        </Flex>\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverview\n                {...this.props}\n                tokenFees={this.state.tokenFees[this.props.selectedToken]}\n              />\n            </Flex>\n        }\n        {\n          userHasFunds && this.props.account && !this.state.govTokensDisabled[this.props.selectedToken] && Object.keys(this.state.availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id={\"yield-farming\"}\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(this.state.availableGovTokens)}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.30,0.15]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    mobile:false,\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.25],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','govTokenRedeemableBalance']),\n                    props:{\n                      width:[0.35,0.30],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                    ]\n                  },\n                  {\n                    title:'DISTRIBUTION',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','userDistributionSpeed']),\n                    props:{\n                      width:[0.35,0.30],\n                    },\n                    fields:[\n                      {\n                        name:'userDistributionSpeed',\n                        props:{\n                          decimals:6\n                        }\n                      }\n                    ]\n                  },\n                  /*\n                  {\n                    title:'APR',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','govTokenApr']),\n                    props:{\n                      width:[0.2,0.17],\n                    },\n                    fields:[\n                      {\n                        name:'apr',\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    desc:this.functionsUtil.getGlobalConfig(['messages','tokenPrice']),\n                    mobile:false,\n                    props:{\n                      width: 0.17,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                  */\n                ]}\n                {...this.props}\n                availableTokens={this.state.availableGovTokens}\n              />\n            </Flex>\n        }\n        {\n        this.props.account && this.state.tokenApy[this.props.selectedToken] && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'estimated-earnings-container'}\n          >\n            <Title my={[3,4]}>Estimated earnings</Title>\n            <EstimatedEarnings\n              {...this.props}\n              tokenApy={this.state.tokenApy[this.props.selectedToken]}\n            />\n          </Flex>\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              enabledTokens={[this.props.selectedToken]}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport { Text, Modal, Flex, Link } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass BetaModal extends React.Component {\n\n  state = {};\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    this.functionsUtil.setLocalStorage('betaApproved',true);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','650px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            pt={3}\n            iconHeight={'40px'}\n            title={'Beta Version'}\n            icon={'images/warning.svg'}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                fontSize={2}\n                textAlign={'left'}\n                color={'dark-gray'}\n              >\n                You're about to enter Idle Finance Beta Dashboard – this is the place where several un-audited and risky features are being tested!<br />Please use at your own risk, or visit the official website at <Link fontSize={2} mainColor={'primary'} hoverColor={'primary'} href={this.functionsUtil.getGlobalConfig(['baseURL'])}>{this.functionsUtil.getGlobalConfig(['baseURL'])}</Link>.\n              </Text>\n            </Flex>\n            <Flex\n              my={3}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                handleClick={this.closeModal}\n                buttonProps={{\n                  width:['100%','40%']\n                }}\n              >\n                Continue Anyway\n              </RoundButton>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default BetaModal;","import React, { Component } from 'react';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Box, Text, Icon, Tooltip, Link, Input } from \"rimble-ui\";\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\n\nclass CurveDeposit extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    depositSlippage:null,\n    redeemableBalance:null,\n    migrationContract:null,\n    curveTokensBalance:null,\n    migrationSucceeded:false,\n    fastBalanceSelector:null,\n    migrationContractApproved:false,\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    await this.initToken();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const idleTokenBalanceChanged = prevProps.idleTokenBalance !== this.props.idleTokenBalance;\n    if (accountChanged || idleTokenBalanceChanged){\n      await this.initToken();\n    }\n    \n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const inputValueChanged = this.state.inputValue !== prevState.inputValue;\n    if (inputValueChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  setInputValue = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    const inputValue = this.props.idleTokenBalance ? this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage) : null;\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    const buttonDisabled = !amount || amount.gt(this.state.idleTokenBalance);\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  approve = async () => {\n    const migrationContract = this.state.migrationContract;\n    if (migrationContract){\n\n      // Check if the migration contract is approved\n      const migrationContractApproved = await this.checkMigrationContractApproved();\n\n      if (!migrationContractApproved){\n\n        const callbackApprove = (tx,error) => {\n          // Send Google Analytics event\n          const eventData = {\n            eventAction: 'approve',\n            eventCategory: 'CurveDeposit',\n            eventLabel: tx ? tx.status : null\n          };\n\n          const txSucceeded = tx && tx.status === 'success';\n\n          // console.log('callbackApprove',tx,error);\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            migrationContractApproved: txSucceeded, // True\n            processing: {\n              ...prevState.processing,\n              txHash:null,\n              loading:false\n            }\n          }));\n\n          if (typeof this.props.callbackApprove === 'function' && txSucceeded){\n            this.props.callbackApprove(tx);\n          }\n\n          this.checkMigration();\n        };\n\n        const callbackReceiptApprove = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              txHash\n            }\n          }));\n        };\n\n        this.functionsUtil.enableERC20(this.props.selectedToken,migrationContract.address,callbackApprove,callbackReceiptApprove);\n\n        this.setState((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            txHash:null,\n            loading:true\n          },\n          migrationContractApproved:false\n        }));\n      } else {\n        this.setState({\n          migrationContractApproved:true\n        });\n      }\n    }\n  }\n\n  deposit = async () => {\n\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    if (!inputValue){\n      return false;\n    }\n\n    const callbackDeposit = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveDeposit`,\n        eventAction: this.props.selectedToken,\n        eventValue: inputValue.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackDeposit === 'function' && txSucceeded){\n        this.props.callbackDeposit(tx);\n      }\n    };\n\n    const callbackReceiptDeposit = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.migrationContract.name;\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n    const depositParams = await this.getMigrationParams(_amount);\n\n    this.props.contractMethodSendWrapper(contractName, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  cancelTransaction = async () => {\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  async getMigrationParams(toMigrate){\n    const migrationParams = [];\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.selectedToken]);\n\n    if (!curveTokenConfig){\n      return false;\n    }\n    \n    const migrationContractParams = curveTokenConfig.migrationParams;\n    if (migrationContractParams.n_coins){\n      const amounts = await this.functionsUtil.getCurveAmounts(this.props.selectedToken,toMigrate,true);\n      let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n\n      if (this.state.maxSlippage){\n        minMintAmount = this.functionsUtil.BNify(minMintAmount);\n        minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n        minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n      }\n\n      migrationParams.push(amounts);\n      migrationParams.push(minMintAmount);\n    }\n\n    return migrationParams;\n  }\n\n  async calculateSlippage(){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (inputValue){\n      let underlyingBalanceToDeposit = inputValue;\n      if (underlyingBalanceToDeposit){\n        const idleTokenPrice = await this.functionsUtil.getIdleTokenPrice(this.props.tokenConfig);\n        if (idleTokenPrice){\n          underlyingBalanceToDeposit = underlyingBalanceToDeposit.times(idleTokenPrice);\n        }\n      } else {\n        underlyingBalanceToDeposit = this.functionsUtil.BNify(0);\n      }\n\n      const normalizeIdleTokenBalance = this.functionsUtil.normalizeTokenAmount(underlyingBalanceToDeposit,this.props.tokenConfig.decimals);\n      let depositSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizeIdleTokenBalance);\n      if (depositSlippage){\n        depositSlippage = depositSlippage.times(100);\n      }\n\n      this.setState({\n        depositSlippage\n      });\n    }\n  }\n\n  async checkMigrationContractApproved(){\n    const migrationContract = this.state.migrationContract || await this.functionsUtil.getCurveSwapContract();\n    if (migrationContract){\n      return await this.functionsUtil.checkTokenApproved(this.props.tokenConfig.idle.token,migrationContract.address,this.props.account);\n    }\n    return false;\n  }\n\n  async initToken(){\n\n    // Init and check migration contract\n    const migrationContract = await this.functionsUtil.getCurveSwapContract();\n    const migrationContractApproved = await this.checkMigrationContractApproved();\n\n    this.setState({\n      migrationContract,\n      migrationContractApproved\n    });\n  }\n\n  approveCallback = () => {\n    this.initToken();\n  }\n\n  migrationCallback = () => {\n    this.setState({\n      migrationSucceeded:true\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken){\n      return null;\n    }\n\n    // const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const hasCurveTokens = this.state.curveTokensBalance && this.state.curveTokensBalance.gt(0);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n            {\n              this.props.idleTokenBalance && this.props.idleTokenBalance.gt(0) && (\n                <Box\n                  width={1}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:3,\n                      px:[2,4]\n                    }}\n                  >\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    > \n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ this.state.migrationContractApproved ? 'CheckBox' : 'LooksOne'}\n                          color={ this.state.migrationContractApproved ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Approve the Curve contract\n                        </Text>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ hasCurveTokens ? 'CheckBox' : 'LooksTwo'}\n                          color={ hasCurveTokens ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Deposit your {this.props.tokenConfig.idle.token}\n                        </Text>\n                      </Flex>\n                    </Flex>\n                  </DashboardCard>\n                  {\n                    !this.state.migrationContractApproved ?\n                      this.state.processing.loading ? (\n                        <Flex\n                          mt={3}\n                          flexDirection={'column'}\n                        >\n                          <TxProgressBar\n                            web3={this.props.web3}\n                            waitText={`Approve estimated in`}\n                            hash={this.state.processing.txHash}\n                            endMessage={`Finalizing approve request...`}\n                            cancelTransaction={this.cancelTransaction.bind(this)}\n                          />\n                        </Flex>\n                      ) : (\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            mt:3,\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                          >\n                            <Icon\n                              size={'2.3em'}\n                              name={'LockOpen'}\n                              color={'cellText'}\n                            />\n                            <Text\n                              mt={1}\n                              fontSize={2}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              To deposit your {this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.\n                            </Text>\n                            <RoundButton\n                              buttonProps={{\n                                mt:3,\n                                width:[1,1/2]\n                              }}\n                              handleClick={this.approve.bind(this)}\n                            >\n                              Approve\n                            </RoundButton>\n                          </Flex>\n                        </DashboardCard>\n                      )\n                    : this.state.processing.loading ? (\n                      <Flex\n                        mt={3}\n                        flexDirection={'column'}\n                      >\n                        <TxProgressBar\n                          web3={this.props.web3}\n                          waitText={`Deposit estimated in`}\n                          hash={this.state.processing.txHash}\n                          endMessage={`Finalizing deposit request...`}\n                          cancelTransaction={this.cancelTransaction.bind(this)}\n                        />\n                      </Flex>\n                    ) : (\n                      <Box\n                        mt={2}\n                        width={1}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text>\n                            Choose max slippage:\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={`Max additional slippage on top of the one shown below`}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                          justifyContent={'space-between'}\n                        >\n                          {\n                            [0.2,0.5,1,5].map( slippage => (\n                              <FastBalanceSelector\n                                cardProps={{\n                                  p:1\n                                }}\n                                textProps={{\n                                  fontSize:1\n                                }}\n                                percentage={slippage}\n                                key={`selector_${slippage}`}\n                                onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                isActive={this.state.maxSlippage === parseFloat(slippage)}\n                              />\n                            ))\n                          }\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                        >\n                          <Flex\n                            mb={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={this.state.depositSlippage ? 'space-between' : 'flex-end'}\n                          >\n                            {\n                              this.state.depositSlippage && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    textAlign={'right'}\n                                    style={{\n                                      whiteSpace:'nowrap'\n                                    }}\n                                    color={ parseFloat(this.state.depositSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                  >\n                                    {\n                                      parseFloat(this.state.depositSlippage.toFixed(3)) === 0 ?\n                                        'No Slippage'\n                                      : `${ this.state.depositSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositSlippage.abs().toFixed(3)}%`\n                                    }\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.state.depositSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              )\n                            }\n                            {\n                              this.props.idleTokenBalance && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'flex-end'}\n                                >\n                                  <Link\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'right'}\n                                    hoverColor={'copyColor'}\n                                    onClick={ (e) => this.setFastBalanceSelector(100) }\n                                    style={{\n                                      maxWidth:'100%',\n                                      overflow:'hidden',\n                                      whiteSpace:'nowrap',\n                                      textOverflow:'ellipsis'\n                                    }}\n                                  >\n                                    {this.props.idleTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {this.props.selectedToken}\n                                  </Link>\n                                </Flex>\n                              )\n                            }\n                          </Flex>\n                          <Input\n                            min={0}\n                            type={\"number\"}\n                            required={true}\n                            height={'3.4em'}\n                            borderRadius={2}\n                            fontWeight={500}\n                            boxShadow={'none !important'}\n                            placeholder={`Insert amount`}\n                            onChange={this.changeInputValue.bind(this)}\n                            border={`1px solid ${this.props.theme.colors.divider}`}\n                            value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                          />\n                          <Flex\n                            mt={2}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'space-between'}\n                          >\n                            {\n                              [25,50,75,100].map( percentage => (\n                                <FastBalanceSelector\n                                  percentage={percentage}\n                                  key={`selector_${percentage}`}\n                                  onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                  isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                                />\n                              ))\n                            }\n                          </Flex>\n                          <Flex\n                            mt={2}\n                            justifyContent={'center'}\n                          >\n                            <RoundButton\n                              buttonProps={{\n                                mt:2,\n                                width:[1,1/2],\n                                disabled:this.state.buttonDisabled\n                              }}\n                              handleClick={this.deposit.bind(this)}\n                            >\n                              Deposit\n                            </RoundButton>\n                          </Flex>\n                        </Flex>\n                      </Box>\n                    )\n                  }\n                </Box>\n              )\n            }\n          {\n            /*\n            this.state.tokenConfig && this.state.redeemableBalance ? (\n              <Box width={1}>\n                <Migrate\n                  {...this.props}\n                  showActions={false}\n                  getTokenPrice={false}\n                  migrationTextProps={{\n                    fontWeight:500\n                  }}\n                  isMigrationTool={true}\n                  migrationImage={{\n                    mb:1,\n                    height:'1.8em',\n                    src:curveConfig.params.image\n                  }}\n                  showBalanceSelector={true}\n                  waitText={'Deposit estimated in'}\n                  tokenConfig={this.state.tokenConfig}\n                  callbackApprove={this.approveCallback.bind(this)}\n                  migrationParams={this.getMigrationParams.bind(this)}\n                  migrationCallback={this.migrationCallback.bind(this)}\n                  approveText={`To deposit your ${this.props.tokenConfig.idle.token} you need to approve Curve smart-contract first.`}\n                  migrationText={`You can deposit ${this.state.redeemableBalance.toFixed(4)} ${this.props.tokenConfig.idle.token} in the Curve Pool${ this.state.depositSlippage ? (this.state.depositSlippage.gte(0) ? ` with <span style=\"color:${this.props.theme.colors.transactions.status.failed}\">${this.state.depositSlippage.times(100).toFixed(2)}% of slippage</span>` : ` with <span style=\"color:${this.props.theme.colors.transactions.status.completed}\">${Math.abs(parseFloat(this.state.depositSlippage.times(100).toFixed(2)))}% of bonus</span>`) : '' }.`}\n                >\n                  {\n                    !this.props.account ? (\n                      <DashboardCard\n                        cardProps={{\n                          p:3,\n                          mt:3\n                        }}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                        >\n                          <Icon\n                            size={'2.3em'}\n                            name={'Input'}\n                            color={'cellText'}\n                          />\n                          <Text\n                            mt={2}\n                            fontSize={2}\n                            color={'cellText'}\n                            textAlign={'center'}\n                          >\n                            Please connect with your wallet interact with Idle.\n                          </Text>\n                          <RoundButton\n                            buttonProps={{\n                              mt:2,\n                              width:[1,1/2]\n                            }}\n                            handleClick={this.props.connectAndValidateAccount}\n                          >\n                            Connect\n                          </RoundButton>\n                        </Flex>\n                      </DashboardCard>\n                    ) : (\n                      <DashboardCard\n                        cardProps={{\n                          p:3\n                        }}\n                      >\n                        {\n                          this.state.migrationSucceeded ? (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'DoneAll'}\n                                color={this.props.theme.colors.transactions.status.completed}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You have successfully deposited your {this.props.tokenConfig.idle.token} in the Curve Pool!\n                              </Text>\n                            </Flex>\n                          ) : (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'MoneyOff'}\n                                color={'cellText'}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You don't have any {this.props.tokenConfig.idle.token} in your wallet.\n                              </Text>\n                            </Flex>\n                          )\n                        }\n                      </DashboardCard>\n                    )\n                  }\n                </Migrate>\n              </Box>\n            ) : null\n            */\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveDeposit;","import theme from '../theme';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\n// import { linearGradientDef } from '@nivo/core'\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport ChartCustomTooltip from '../ChartCustomTooltip/ChartCustomTooltip';\nimport ChartCustomTooltipRow from '../ChartCustomTooltipRow/ChartCustomTooltipRow';\n\nclass PortfolioEquityCurve extends Component {\n  state = {\n    startDate:null,\n    chartData:null,\n    chartProps:null,\n    chartwidth:null,\n    chartHeight:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentDidMount(){\n    this.loadUtils();\n    this.loadChartData();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n\n    const quickDateSelectionChanged = prevProps.quickDateSelection !== this.props.quickDateSelection;\n    const tokenChanged = JSON.stringify(prevProps.enabledTokens) !== JSON.stringify(this.props.enabledTokens);\n    if (tokenChanged || quickDateSelectionChanged){\n      this.setState({\n        chartData:null\n      },() => {\n        this.componentDidMount();\n      });\n    }\n\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n    if (mobileChanged){\n      this.loadChartData();\n    }\n  }\n\n  async loadChartData() {\n\n    let enabledTokens = this.props.enabledTokens;\n    if (!enabledTokens || !enabledTokens.length){\n      enabledTokens = Object.keys(this.props.availableTokens);\n    }\n\n    const curveTxs = await this.functionsUtil.getCurveTxs(this.props.account,0,'latest',enabledTokens);\n\n    const chartData = [];\n    let tokensBalance = [];\n    const processedTxs = {};\n    let firstTxTimestamp = null;\n    let totalBalance = this.functionsUtil.BNify(0);\n    const curvePoolContract = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    if (curveTxs && curveTxs.length){\n\n      curveTxs.forEach((tx,index) => {\n\n        if (!processedTxs[tx.hash]){\n          processedTxs[tx.hash] = [];\n        }\n\n        if (processedTxs[tx.hash].includes(tx.action)){\n          return;\n        }\n        \n        firstTxTimestamp = firstTxTimestamp ? Math.min(firstTxTimestamp,parseInt(tx.timeStamp)) : parseInt(tx.timeStamp);\n\n        const curveTokens = this.functionsUtil.BNify(tx.curveTokens);\n\n        switch (tx.action){\n          case 'CurveIn':\n          case 'CurveZapIn':\n          case 'CurveDepositIn':\n          case 'CurveTransferIn':\n            totalBalance = totalBalance.plus(curveTokens);\n          break;\n          case 'CurveOut':\n          case 'CurveZapOut':\n          case 'CurveDepositOut':\n          case 'CurveTransferOut':\n            totalBalance = totalBalance.minus(curveTokens);\n          break;\n          default:\n          break;\n        }\n\n        // Reset totalBalance if below zero\n        if (totalBalance.lt(0)){\n          totalBalance = this.functionsUtil.BNify(0);\n        }\n\n        const action = tx.action;\n        const balance = totalBalance;\n        const timeStamp = parseInt(tx.timeStamp);\n        const curveTokenPrice = this.functionsUtil.fixTokenDecimals(tx.curveTokenPrice,curvePoolContract.decimals);\n\n        // console.log(this.functionsUtil.strToMoment(timeStamp*1000).format('YYYY/MM/DD HH:mm'),tx.hash,tx.action,curveTokens.toString(),totalBalance.toString());\n\n        if (!curveTokenPrice.isNaN() && !curveTokenPrice.isNaN()){\n          tokensBalance.push({\n            action,\n            balance,\n            timeStamp,\n            curveTokens,\n            curveTokenPrice\n          });\n\n          processedTxs[tx.hash].push(action);\n        }\n      });\n    }\n\n    // Calculate Start Date\n    let startDate = null;\n    const currentDate = this.functionsUtil.strToMoment(new Date());\n\n    switch (this.props.quickDateSelection){\n      case 'week':\n        startDate = currentDate.clone().subtract(1,'week');\n      break;\n      case 'month':\n        startDate = currentDate.clone().subtract(1,'month');\n      break;\n      case 'month3':\n        startDate = currentDate.clone().subtract(3,'month');\n      break;\n      case 'month6':\n        startDate = currentDate.clone().subtract(6,'month');\n      break;\n      default:\n        startDate = null;\n      break;\n    }\n\n    const days = {};\n    let prevBalances = {};\n    let prevTimestamp = null;\n    let minChartValue = null;\n    let maxChartValue = null;\n    const aggregatedBalancesKeys = {};\n    const tokensBalancesPerDate = {};\n    let aggregatedBalance = this.functionsUtil.BNify(0);\n    // let curveTokenBalance = this.functionsUtil.BNify(0);\n    const currTimestamp = parseInt(new Date().getTime()/1000)+86400;\n\n    const tokensData = await this.functionsUtil.getTokenApiData(Object.values(this.props.availableTokens)[0].address,false,firstTxTimestamp,null,false,3600);\n\n    for (let timeStamp=firstTxTimestamp;timeStamp<=currTimestamp;timeStamp+=this.props.frequencySeconds){\n\n      let foundBalances = {};\n      let tokensBalances = {};\n      timeStamp = Math.min(currTimestamp,timeStamp);\n      let momentDate = this.functionsUtil.strToMoment(timeStamp*1000);\n\n      // eslint-disable-next-line\n      const filteredTokenData = tokensData.filter(tx => (tx.timestamp>=prevTimestamp && tx.timestamp<=timeStamp));\n\n      // eslint-disable-next-line\n      let filteredBalances = tokensBalance.filter(tx => (tx.timeStamp<=timeStamp && (!prevTimestamp || tx.timeStamp>prevTimestamp)));\n      \n      if (!filteredBalances.length){\n        if (prevBalances){\n          filteredBalances = prevBalances;\n          const lastFilteredTx = Object.values(filteredBalances).pop();\n          const currentBalance = parseFloat(lastFilteredTx.balance);\n\n          const lastTokenData = Object.values(filteredTokenData).pop();\n          let curveTokenPrice = null;\n          if (lastTokenData){\n            curveTokenPrice = await this.functionsUtil.getCurveTokenPrice(lastTokenData.blocknumber);\n          }\n\n          // Take idleToken price from API and calculate new balance\n          if (currentBalance>0 && timeStamp>firstTxTimestamp && curveTokenPrice){\n            // Set new curveTokenPrice\n            lastFilteredTx.curveTokenPrice = curveTokenPrice;\n            filteredBalances = [lastFilteredTx];\n          }\n        } else {\n          filteredBalances = [{\n            balance:this.functionsUtil.BNify(0),\n            curveTokenPrice:this.functionsUtil.BNify(0)\n          }];\n        }\n      }\n\n      const lastTx = Object.assign([],filteredBalances).pop();\n      let lastTxBalance = this.functionsUtil.BNify(lastTx.balance).times(lastTx.curveTokenPrice);\n\n      tokensBalances[curvePoolContract.token] = this.functionsUtil.BNify(lastTx.balance);\n      aggregatedBalance = lastTxBalance;\n\n      foundBalances = filteredBalances;\n\n      // console.log(momentDate.format('YYYY/MM/DD 00:00'),lastTx.balance.toString(),lastTx.curveTokenPrice.toString(),lastTxBalance.toString());\n\n      if (startDate === null || momentDate.isSameOrAfter(startDate)){\n        \n        if (momentDate.isAfter(new Date(),'day')){\n          momentDate = this.functionsUtil.strToMoment(new Date());\n        }\n\n        // Force date to midnight\n        const formattedDate = momentDate.format('YYYY/MM/DD 00:00');\n\n        // Save days for axisBottom format\n        days[momentDate.format('YYYY/MM/DD')] = 1;\n\n        const aggregatedBalanceParsed = parseFloat(parseFloat(aggregatedBalance.toFixed(6)));\n\n        aggregatedBalancesKeys[formattedDate] = aggregatedBalanceParsed;\n        tokensBalancesPerDate[formattedDate] = tokensBalances;\n\n        // console.log(formattedDate,tokensBalances);\n\n        minChartValue = minChartValue === null ? aggregatedBalanceParsed : Math.min(minChartValue,aggregatedBalanceParsed);\n        maxChartValue = maxChartValue === null ? aggregatedBalanceParsed : Math.max(maxChartValue,aggregatedBalanceParsed);\n      }\n\n      prevTimestamp = timeStamp;\n      prevBalances = foundBalances;\n    }\n\n    const aggregatedBalances = Object.keys(aggregatedBalancesKeys).map(date => ({\n      x:date,\n      y:aggregatedBalancesKeys[date],\n      balances:tokensBalancesPerDate[date]\n    }));\n\n    let itemIndex = 0;\n    aggregatedBalances.forEach( (item,index) => {\n      const itemPos = Math.floor(itemIndex/aggregatedBalances.length*100);\n      aggregatedBalances[index].itemPos = itemPos;\n      itemIndex++;\n    });\n\n    /*\n    aggregatedBalances.push({\n      x:momentDate.format('YYYY/MM/DD HH:mm'),\n      y:aggregatedBalance\n    });\n    */\n\n    // Add day before to start with zero balance\n    /*\n    const firstTxMomentDate = this.functionsUtil.strToMoment(firstTxTimestamp*1000);\n    if ((startDate === null || startDate.isSameOrBefore(firstTxMomentDate)) && aggregatedBalances.length){\n      const firstItem = aggregatedBalances[0];\n      const firstDate = this.functionsUtil.strToMoment(firstItem.x,'YYYY/MM/DD HH:mm');\n      firstDate.subtract(1,'day');\n      aggregatedBalances.unshift({\n        x:firstDate.format('YYYY/MM/DD HH:mm'),\n        y:0\n      });\n    }\n    */\n\n    // Add token Data\n    chartData.push({\n      id:'USD',\n      color: 'hsl('+ this.functionsUtil.getGlobalConfig(['stats','tokens','USD','color','hsl']).join(',')+')',\n      data:aggregatedBalances\n    });\n\n    let yFormatDecimals = 2;\n    if (maxChartValue-minChartValue<1){\n      yFormatDecimals = 4;\n    }\n\n    if (maxChartValue === minChartValue){\n      minChartValue = Math.max(0,maxChartValue-1);\n    }\n\n    const maxGridLines = 5;\n    const gridYStep = (maxChartValue-minChartValue)/maxGridLines;\n    const gridYValues = [];\n    for (let i=0;i<=maxGridLines;i++){\n      const gridYValue = parseFloat(parseFloat(minChartValue+(i*gridYStep)).toFixed(6));\n      gridYValues.push(gridYValue);\n    }\n    \n    const axisBottomMaxValues = 10;\n    const daysCount = Object.values(days).length;    \n    const daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n    const chartProps = {\n      xScale:{\n        type: 'time',\n        format: '%Y/%m/%d %H:%M',\n      },\n      yScale:{\n        type: 'linear',\n        stacked: false,\n        min: minChartValue,\n        max: maxChartValue\n      },\n      xFormat:'time:%b %d %Y',\n      yFormat:value => this.functionsUtil.formatMoney(value,yFormatDecimals),\n      axisBottom: this.props.isMobile ? null : {\n        legend: '',\n        tickSize:0,\n        format: '%b %d',\n        tickPadding: 15,\n        orient: 'bottom',\n        legendOffset: 36,\n        legendPosition: 'middle',\n        tickValues:'every '+daysFrequency+' days'\n      },\n      gridYValues,\n      pointSize:0,\n      useMesh:true,\n      axisLeft: this.props.isMobile ? null : {\n        legend: '',\n        tickSize: 0,\n        orient: 'left',\n        tickPadding: 10,\n        tickRotation: 0,\n        legendOffset: -70,\n        tickValues:gridYValues,\n        legendPosition: 'middle',\n        format: v => this.functionsUtil.abbreviateNumber(v,2),\n      },\n      animate:true,\n      pointLabel:'y',\n      areaOpacity:0.1,\n      enableArea:true,\n      enableSlices:'x',\n      enableGridY:true,\n      curve:'monotoneX',\n      enableGridX:false,\n      pointBorderWidth:1,\n      colors:d => d.color,\n      pointLabelYOffset:-12,\n      areaBaselineValue:minChartValue,\n      pointColor:{ from: 'color', modifiers: []},\n      theme:{\n        axis: {\n          ticks: {\n            text: {\n              fontSize:12,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '8 4'\n          }\n        },\n      },\n      /*\n      defs:[\n        linearGradientDef('gradientA', [\n          { offset: 0, color: 'inherit' },\n          { offset: 100, color: 'inherit', opacity: 0 },\n        ]),\n      ],\n      fill:[{ match: '*', id: 'gradientA' }],\n      */\n      margin: this.props.isMobile ? { top: 20, right: 25, bottom: 25, left: 20 } : { top: 30, right: 50, bottom: 45, left: 50 },\n      sliceTooltip:(slideData) => {\n        const { slice } = slideData;\n        const point = slice.points[0];\n        return (\n          <ChartCustomTooltip\n            point={point}\n          >\n            <ChartCustomTooltipRow\n              color={point.color}\n              label={point.serieId}\n              value={`$ ${point.data.yFormatted}`}\n            />\n            {\n            typeof point.data.balances === 'object' && Object.keys(point.data.balances).length>0 &&\n              Object.keys(point.data.balances).map(token => {\n                if (token === point.serieId){\n                  return null;\n                }\n                const tokenInfo = this.functionsUtil.getGlobalConfig(['stats','tokens',token]);\n                if (tokenInfo){\n                  const tokenName = tokenInfo.name ? tokenInfo.name : token;\n                  const color = tokenInfo.color.hex;\n                  const balance = point.data.balances[token];\n                  let formattedBalance = this.functionsUtil.formatMoney(balance,2);\n                  if (parseFloat(balance)>=0.01){\n                    return (\n                      <ChartCustomTooltipRow\n                        label={tokenName}\n                        color={color}\n                        key={`row_${token}`}\n                        value={`${formattedBalance}`}\n                      />\n                    );\n                  }\n                }\n                return null;\n              })\n            }\n          </ChartCustomTooltip>\n        );\n      }\n    };\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  render() {\n    return (\n      <GenericChart\n        type={Line}\n        showLoader={true}\n        {...this.state.chartProps}\n        data={this.state.chartData}\n        parentId={this.props.parentId}\n        height={this.props.chartHeight}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default PortfolioEquityCurve;","import theme from '../theme';\nimport Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport { Flex, Heading, Text } from \"rimble-ui\";\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport PortfolioEquityCurve from '../PortfolioEquityCurve/PortfolioEquityCurve';\n\nclass FundsOverviewCurve extends Component {\n\n  state = {\n    compAPR:null,\n    aggregatedValues:[],\n    govTokensUserBalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    await this.functionsUtil.getCurveAvgBuyPrice();\n\n    // debugger;\n\n    await this.functionsUtil.getCurveAvgSlippage();\n\n    // debugger;\n    /*\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const [govTokensUserBalance,avgAPY,days] = await Promise.all([\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,'DAI'),\n      this.functionsUtil.loadAssetField('avgAPY',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '-') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    let [tokenAllocation,compAPR] = await Promise.all([\n      this.functionsUtil.getTokenAllocation(this.props.tokenConfig,false,false),\n      this.functionsUtil.getCompAPR(this.props.selectedToken,this.props.tokenConfig)\n    ]);\n\n    if (tokenAllocation){\n      const compoundInfo = this.props.tokenConfig.protocols.find( p => (p.name === 'compound') );\n      if (compoundInfo){\n        if (tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()]){\n          const compoundAllocationPerc = tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()];\n          compAPR = compAPR.times(compoundAllocationPerc);\n        }\n      }\n    }\n\n    this.setState({\n      compAPR,\n      aggregatedValues,\n      govTokensUserBalance\n    });\n    */\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Text\n                          mt={2}\n                          fontWeight={2}\n                          fontSize={[1,2]}\n                          color={'cellText'}\n                        >\n                          {v.props.title}\n                        </Text>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquityCurve\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLentCurve',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPercCurve',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            {\n              /*\n              <Flex\n                mb={[2,0]}\n                width={[1,1/5]}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'flex-start'}\n              >\n                <Title\n                  mb={2}\n                  fontSize={[3,4]}\n                  component={Heading.h3}\n                >\n                  Fees\n                </Title>\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'feesCounter',\n                    props:{\n                      decimals:7,\n                      maxPrecision:8,\n                      style:{\n                        fontWeight:300,\n                        fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                        color:theme.colors.counter\n                      },\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n              */\n            }\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveApy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Avg Slippage\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveAvgSlippage',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverviewCurve;","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport { Box, Flex, Text, Icon } from \"rimble-ui\";\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport CurveDeposit from '../CurveDeposit/CurveDeposit';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport TransactionField from '../TransactionField/TransactionField';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport FundsOverviewCurve from '../FundsOverviewCurve/FundsOverviewCurve';\n\nclass AssetPage extends Component {\n\n  state = {\n    inputValue:{},\n    processing:{},\n    tokenFees:null,\n    canRedeem:null,\n    canDeposit:null,\n    action:'deposit',\n    activeModal:null,\n    tokenConfig:null,\n    tokenBalance:null,\n    tokenApproved:null,\n    selectedToken:null,\n    availableTokens:{},\n    redeemBalance:null,\n    depositBalance:null,\n    buttonDisabled:false,\n    curveTokenPrice:null,\n    depositSlippage:null,\n    idleTokenBalance:null,\n    withdrawSlippage:null,\n    govTokensBalance:null,\n    curveZapContract:null,\n    curveTokenConfig:null,\n    curveTokensAmounts:{},\n    govTokensDisabled:null,\n    componentMounted:false,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    redeemableBalance:null,\n    fastBalanceSelector:{},\n    curveAvailableTokens:{},\n    tokenFeesPercentage:null,\n    redeemUnevenAmounts:false,\n    curveDepositContract:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  changeFromToken = (selectedToken) => {\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    this.props.goToSection(`${curveConfig.params.route}/${selectedToken}`);\n  }\n\n  getSelectedToken(){\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    return this.props.urlParams.param1 && curveAvailableTokens[this.props.urlParams.param1] ? this.props.urlParams.param1 : Object.keys(curveAvailableTokens)[0];\n  }\n\n  setSelectedToken = async (selectedToken) => {\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n    this.setState({\n      tokenConfig,\n      selectedToken,\n      availableTokens,\n      curveTokenConfig\n    });\n  }\n\n  loadTokensInfo = async () => {\n\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    this.setState({\n      curveAvailableTokens\n    });\n\n    const selectedToken = this.getSelectedToken();\n    // Check if token is set the query params\n    if (selectedToken && selectedToken !== this.props.urlParams.param1){\n      this.changeFromToken(selectedToken);\n      return await this.setSelectedToken(selectedToken);\n    } else if (selectedToken !== this.state.selectedToken){\n      await this.setSelectedToken(selectedToken);\n    }\n\n    const newState = {...this.state};\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n\n    if (newState.selectedToken !== selectedToken){\n      newState.selectedToken = selectedToken;\n    }\n\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n\n    const [\n      curveZapContract,\n      curvePoolContract,\n      curveSwapContract,\n      curveDepositContract\n    ] = await Promise.all([\n      this.functionsUtil.getCurveZapContract(),\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract()\n    ]);\n\n    newState.curveZapContract = curveZapContract;\n    newState.curvePoolContract = curvePoolContract;\n    newState.curveSwapContract = curveSwapContract;\n    newState.curveDepositContract = curveDepositContract;\n\n    newState.availableTokens = availableTokens;\n\n\n    // console.log('curveTokenPrice',newState.curveTokenPrice.toFixed(6),'curveTokenBalance',newState.curveTokenBalance.toFixed(6),'redeemableBalance',newState.redeemableBalance.toFixed(20),'tokenBalance',newState.tokenBalance.toFixed(20));\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[selectedToken] = tokenConfig;\n\n    newState.tokenConfig = tokenConfig;\n    newState.curveTokenConfig = curveTokenConfig;\n\n    if (this.props.account){\n      [\n        newState.curveTokenPrice,\n        newState.curveTokenBalance,\n        newState.tokenFeesPercentage,\n        newState.tokenFees,\n        newState.tokenBalance,\n        newState.idleTokenBalance,\n        newState.tokenApproved,\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokenPrice(),\n        this.functionsUtil.getCurveTokenBalance(),\n        this.functionsUtil.getTokenFees(tokenConfig),\n        this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n        this.functionsUtil.getTokenBalance(selectedToken,this.props.account),\n        this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n        this.functionsUtil.checkTokenApproved(selectedToken,curveDepositContract.address,this.props.account),\n      ]);\n\n\n      newState.processing = {\n        redeem:{\n          txHash:null,\n          loading:false\n        },\n        deposit:{\n          txHash:null,\n          loading:false\n        },\n        approve:{\n          txHash:null,\n          loading:false\n        },\n      };\n      newState.inputValue = {\n        redeem:null,\n        deposit:null\n      };\n      newState.fastBalanceSelector = {\n        redeem:null,\n        deposit:null\n      };\n\n      newState.componentMounted = true;\n      newState.depositBalance = newState.tokenBalance;\n      newState.redeemBalance = newState.redeemableBalance;\n      newState.govTokensDisabled = tokenConfig.govTokensDisabled;\n      newState.canRedeem = newState.curveTokenBalance && newState.curveTokenBalance.gt(0);\n      newState.canDeposit = newState.idleTokenBalance && newState.idleTokenBalance.gt(0);\n      newState.redeemableBalance = newState.curveTokenBalance ? newState.curveTokenBalance.times(newState.curveTokenPrice) : this.functionsUtil.BNify(0);\n    }\n\n    this.setState(newState);\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async calculateSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,this.state.curvePoolContract.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositBalance = amount;\n        newState.depositSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      case 'redeem':\n        newState.redeemBalance = amount;\n        newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.urlParams.param1 !== this.props.urlParams.param1;\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n\n    if (accountChanged || transactionsChanged || tokenChanged){\n      await this.loadTokensInfo();\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const redeemUnevenAmountsChanged = this.state.redeemUnevenAmounts !== prevState.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n    if (actionChanged || fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    if (actionChanged){\n      this.updateAssetSelector();\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  updateAssetSelector = async () => {\n    const newState = {};\n    switch (this.state.action){\n      case 'deposit':\n        this.loadTokensInfo();\n      break;\n      case 'redeem':\n        // this.loadTokensInfo();\n        const tokenConfig = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n        newState.curveAvailableTokens = {};\n        newState.curveTokenConfig = tokenConfig;\n        newState.selectedToken = tokenConfig.token;\n        newState.curveAvailableTokens[tokenConfig.token] = tokenConfig;\n      break;\n      default:\n      break;\n    }\n\n    this.setState(newState);\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.state.tokenBalance ? this.functionsUtil.BNify(this.state.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          amount = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n        } else {\n          amount = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  changeInputValue = (e) => {\n    if (!this.state.action){\n      return false;\n    }\n\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && amount.gt(this.state.tokenBalance));\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.curveTokenBalance)) );\n        } else {\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.redeemableBalance)) );\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = this.state.tokenApproved;\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.state.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.functionsUtil.enableERC20(this.state.selectedToken,this.state.curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const inputValue = this.state.inputValue[this.state.action];\n    const selectedPercentage = this.getFastBalanceSelector();\n\n    let loading = true;\n\n    switch (this.state.action){\n      // Handle deposit in curve\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.state.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if (this.state.metaTransactionsEnabled && txError){\n            this.setState({\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,tokensToDeposit);\n        const minMintAmount = await this.functionsUtil.genericContractCall(this.state.curveSwapContract.name,'calc_token_amount',[amounts,true]);\n        const depositParams = [amounts,minMintAmount];\n\n        // No need for callback atm\n        contractSendResult = await this.props.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n      break;\n      case 'redeem':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        let curveTokensToRedeem = null;\n        if (selectedPercentage){\n          curveTokensToRedeem = this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage);\n        } else {\n          curveTokensToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals));\n          if (!this.state.redeemUnevenAmounts){\n            const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n            curveTokensToRedeem = curveTokensToRedeem.div(curveTokenPrice);\n          }\n        }\n\n        if (!curveTokensToRedeem){\n          return false;\n        }\n\n        const callbackRedeem = (tx,error) => {\n          const txSucceeded = tx.status === 'success';\n\n          // Send Google Analytics event\n          const eventData = {\n            eventLabel: tx.status,\n            eventCategory: `CurveRedeem`,\n            eventAction: this.state.selectedToken,\n            eventValue: curveTokensToRedeem.toFixed()\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          }\n        };\n\n        const callbackReceiptRedeem = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const _amount = this.functionsUtil.normalizeTokenAmount(curveTokensToRedeem,this.state.curvePoolContract.decimals).toString();\n        let min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,0);\n\n        const contractName = this.state.curveDepositContract.name;\n        if (this.state.redeemUnevenAmounts){\n          console.log('remove_liquidity_imbalance',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_imbalance', [min_amounts, _amount], null, callbackRedeem, callbackReceiptRedeem);\n        } else {\n          min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,_amount);\n          console.log('remove_liquidity',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts], null, callbackRedeem, callbackReceiptRedeem);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    // console.log('contractSendResult',contractSendResult);\n\n    if (contractSendResult !== false){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    const userHasFunds = this.props.account && this.state.curveTokenBalance && this.functionsUtil.BNify(this.state.curveTokenBalance).gt(0);\n    const canPerformAction = true;\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            {\n              <Breadcrumb\n                {...this.props}\n                isMobile={this.props.isMobile}\n                path={['Boost',this.state.selectedToken]}\n                handleClick={ e => this.props.goToSection('best') }\n                text={this.functionsUtil.getGlobalConfig(['strategies','best','title'])}\n              />\n            }\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Curve Pool\n        </Title>\n        <Flex\n          width={1}\n        >\n          <Flex\n            width={1}\n            alignItems={'center'}\n            flexDirection={'column'}\n            justifyContent={'center'}\n          >\n            <Flex\n              width={[1,0.36]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Box\n                width={1}\n              >\n                <Text\n                  mb={1}\n                >\n                  Select your asset:\n                </Text>\n                <AssetSelector\n                  {...this.props}\n                  id={'token-from'}\n                  onChange={this.changeFromToken}\n                  selectedToken={this.state.selectedToken}\n                  tokenConfig={this.state.curveTokenConfig}\n                  showBalance={this.state.action === 'deposit'}\n                  availableTokens={this.state.curveAvailableTokens}\n                />\n              </Box>\n              <Box\n                width={1}\n              >\n                {\n                  canPerformAction ? (\n                    <Flex\n                      mt={2}\n                      flexDirection={'column'}\n                    >\n                      <Text\n                        mb={2}\n                      >\n                        Choose the action:\n                      </Text>\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('deposit');\n                            }\n                          }}\n                          isInteractive={true}\n                          isActive={ this.state.action === 'deposit' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'deposit'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Deposit\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('redeem');\n                            }\n                          }}\n                          isInteractive={true}\n                          isDisabled={ !this.state.canRedeem }\n                          isActive={ this.state.action === 'redeem' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'redeem'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Redeem\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                      </Flex>\n                    </Flex>\n                  ) : (\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    >\n                      <Icon\n                        size={'2.3em'}\n                        name={'MoneyOff'}\n                        color={'cellText'}\n                      />\n                      <Text\n                        mt={2}\n                        fontSize={2}\n                        color={'cellText'}\n                        textAlign={'center'}\n                      >\n                        You don't have any {this.state.tokenConfig.idle.token} in your wallet.\n                      </Text>\n                    </Flex>\n                  )\n                }\n              </Box>\n            </Flex>\n            <Flex\n              width={1}\n              mt={ this.props.account ? 3 : 0 }\n            >\n            {\n              this.state.action === 'deposit' ? (\n                <CurveDeposit\n                  {...this.props}\n                  {...this.state}\n                />\n              ) : this.state.action === 'redeem' && (\n                <CurveRedeem\n                  {...this.props}\n                  {...this.state}\n                />\n              )\n            }\n            </Flex>\n          </Flex>\n        </Flex>\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverviewCurve\n                {...this.props}\n                tokenFees={this.state.tokenFees}\n                tokenConfig={this.state.tokenConfig}\n                selectedToken={this.state.selectedToken}\n                availableTokens={this.state.availableTokens}\n                enabledTokens={Object.keys(this.state.availableTokens)}\n              />\n            </Flex>\n        }\n        {\n          /*\n          this.props.account && !this.state.govTokensDisabled[this.state.selectedToken] && Object.keys(availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id=\"earnings-estimation\"\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(availableGovTokens)}\n                handleClick={(props) => {}}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.33,0.22]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.26],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    props:{\n                      width:[0.33,0.26],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                      {\n                        name:'tooltip',\n                        props:{\n                          placement:'bottom',\n                          message:'The shown balance may be lower than the real one.',\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    mobile:false,\n                    props:{\n                      width: 0.26,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                ]}\n                {...this.props}\n                availableTokens={availableGovTokens}\n              />\n            </Flex>\n          */\n        }\n        {\n          /*\n          this.props.account && \n            <Flex\n              mb={[3,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'estimated-earnings-container'}\n            >\n              <Title my={[3,4]}>Estimated earnings</Title>\n              <EstimatedEarnings\n                {...this.props}\n              />\n            </Flex>\n          */\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              availableTokens={this.state.availableTokens}\n              enabledTokens={Object.keys(this.state.availableTokens)}\n              enabledActions={['CurveIn','CurveOut','CurveZapIn','CurveZapOut','CurveTransferIn','CurveTransferOut','CurveDepositIn','CurveDepositOut']}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.state.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport {\n  Text,\n  Modal,\n  Button,\n  Form,\n  Icon,\n  Flex,\n  Link\n} from \"rimble-ui\";\nimport axios from 'axios';\nimport colors from '../../colors';\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\nimport globalConfigs from '../../configs/globalConfigs';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\n\nclass WelcomeModal extends React.Component {\n\n  state = {\n    email:null,\n    error:false,\n    subscribed:false,\n    sendingForm:false\n  };\n\n  functionsUtil = null;\n\n  constructor(props) {\n    super(props);\n    this.functionsUtil = new FunctionsUtil(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleValidation = this.handleValidation.bind(this);\n  }\n\n  componentDidUpdate = async () => {\n    this.functionsUtil.setProps(this.props);\n  }\n\n  sendUserInfo = (sendEmail=true) => {\n    const walletProvider = this.functionsUtil.getWalletProvider();\n    const userInfo = {\n      address: this.props.account,\n      provider: walletProvider\n    };\n\n    if (sendEmail && this.state.email !== null){\n      userInfo.email = this.state.email;\n    }\n\n    this.functionsUtil.simpleIDPassUserInfo(userInfo);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    if (!this.state.email){\n      return false;\n    }\n\n    const callback = () => {\n      this.setState({\n        sendingForm:false,\n        subscribed:true\n      });\n      window.setTimeout(this.props.closeModal,2500);\n    };\n\n    this.sendUserInfo();\n\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'send_email',\n      eventLabel: 'WelcomeModal'\n    });\n\n    axios.post(globalConfigs.newsletterSubscription.endpoint, {\n      'email': this.state.email\n    }).then(r => {\n      callback();\n    })\n    .catch(err => {\n      callback();\n    });\n\n    // Set signedUp in the localStorage\n    if (localStorage){\n      const walletAddress = this.props.account.toLowerCase();\n      let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : null;\n      if (lastLogin && lastLogin[walletAddress] && !lastLogin[walletAddress].signedUp){\n        lastLogin[walletAddress].signedUp = true;\n        this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n      }\n    }\n\n    this.setState({\n      sendingForm:true\n    })\n  };\n\n  closeModal = async () => {\n\n    const closeModal = () => {\n      this.props.closeModal();\n    };\n\n    try{\n      // Prevent sending email\n      this.sendUserInfo(false);\n\n      // Send Google Analytics event\n      if (globalConfigs.analytics.google.events.enabled){\n        this.functionsUtil.sendGoogleAnalyticsEvent({\n          eventCategory: 'UI',\n          eventAction: 'continue_without_email',\n          eventLabel: 'WelcomeModal'\n        },closeModal);\n\n        // Call callback after 1 second if stuck\n        setTimeout(closeModal,1000);\n      } else {\n        closeModal();\n      }\n    } catch (err) {\n      closeModal();\n    }\n  }\n\n  handleValidation(e) {\n    if (e && e.target) {\n      this.setState({ email: e.target.value });\n      e.target.parentNode.classList.add(\"was-validated\");\n    }\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        {\n          this.state.subscribed ? (\n            <ModalCard\n              closeFunc={this.closeModal}\n            >\n              <ModalCard.Header title={'All done'} icon={`images/done.svg`}></ModalCard.Header>\n              <ModalCard.Body>\n                <Flex width={1} flexDirection={'column'} mb={3}>\n                  <Text color={'dark-gray'} textAlign={'center'} fontSize={3} my={0}>\n                    Thanks for subscribing!\n                  </Text>\n                  <Button\n                    my={3}\n                    width={'100%'}\n                    borderRadius={4}\n                    onClick={this.closeModal}\n                  >\n                    CLOSE\n                  </Button>\n                </Flex>\n              </ModalCard.Body>\n            </ModalCard>\n          ) : (\n            <ModalCard closeFunc={this.closeModal}>\n              <ModalCard.Header title={'Stay up-to-date!'} icon={`images/notification.svg`}>\n              </ModalCard.Header>\n              <ModalCard.Body>\n                <Form onSubmit={this.handleSubmit}>\n                  <Flex width={1} flexDirection={'column'} mb={3}>\n                    <Text color={'mid-gray'} textAlign={'left'} fontSize={3} my={0}>\n                      Add your e-mail to receive updates about:\n                    </Text>\n                  </Flex>\n                  <Flex width={1} flexDirection={'column'} mt={2}>\n                    <Flex my={2} flexDirection={'row'} alignItems={'center'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Performance reports\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        New Protocols & Tokens\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Latest updates\n                      </Text>\n                    </Flex>\n                    <Form.Field width={1} label={''}>\n                      <Form.Input\n                        px={3}\n                        py={4}\n                        required\n                        width={1}\n                        border={0}\n                        fontSize={3}\n                        type={\"email\"}\n                        name={\"EMAIL\"}\n                        outline={'none'}\n                        borderColor={'cardBorder'}\n                        backgroundColor={'cardBg'}\n                        textAlign={['center','left']}\n                        className={header_styles.input}\n                        placeholder={'Enter your e-mail'}\n                        onChange={this.handleValidation}\n                      />\n                    </Form.Field>\n                    <Flex mb={3} flexDirection={'column'} alignItems={'center'} justifyContent={'center'}>\n                      <ButtonLoader\n                        buttonText={'SUBMIT'}\n                        isLoading={this.state.sendingForm}\n                        buttonProps={{className:header_styles.gradientButton,width:'100%',type:'submit'}}\n                      >\n                      </ButtonLoader>\n                      <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without e-mail</Link>\n                    </Flex>\n                  </Flex>\n                </Form>\n              </ModalCard.Body>\n            </ModalCard>\n          )\n        }\n      </Modal>\n    );\n  }\n}\n\nexport default WelcomeModal;\n","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\n\nclass MigrateModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'continue_without_migrate',\n        eventLabel: 'MigrateModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowMigrateModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowMigrateModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = () => {\n    const tokenMigrationRoute = this.functionsUtil.getGlobalConfig(['tools','tokenMigration','route']);\n    this.props.goToSection('tools/'+tokenMigrationRoute);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            iconHeight={'40px'}\n            title={'Migrate to Idle'}\n            icon={`images/migrate.svg`}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={3}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                You can migrate your funds from Compound, Aave, Fulcrum, Yearn and Idle V2 with just one transaction.\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                my={2}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.protocolsTokensBalances && Object.keys(this.props.protocolsTokensBalances).map( token => (\n                    <Flex\n                      mb={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      key={`token_${token}`}\n                      justifyContent={'space-between'}\n                    >\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'icon',\n                          props:{\n                            mr:2,\n                            height:'2.3em'\n                          }\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                      <SmartNumber\n                        mr={2}\n                        {...fieldProps}\n                        minPrecision={5}\n                        number={this.props.protocolsTokensBalances[token].balance} \n                      />\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'tokenName',\n                          props:fieldProps\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                    </Flex>\n                  ) )\n                }\n                <Text\n                  mb={0}\n                  fontSize={1}\n                  color={'red'}\n                  fontWeight={500}\n                  textAlign={'center'}\n                >\n                  Please be aware that by migrating your tokens from other protocols, your open positions might be liquidated if collateralized with migrated tokens.\n                </Text>\n              </Flex>\n              <Flex\n                mb={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <ButtonLoader\n                  buttonText={'MIGRATE'}\n                  handleClick={this.migrate}\n                  isLoading={this.state.sendingForm}\n                  buttonProps={{\n                    width:['100%','50%'],\n                    className:header_styles.gradientButton\n                  }}\n                >\n                </ButtonLoader>\n                {\n                /*\n                <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without migrate</Link>\n                */\n                }\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default MigrateModal;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass UpgradeModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'close_upgrade_modal',\n        eventLabel: 'UpgradeModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowUpgradeModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowUpgradeModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = async (token,strategy=null) => {\n\n    if (!strategy){\n      strategy = this.props.selectedStrategy;\n    }\n\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  convert = async (token) => {\n    const convertTool = this.functionsUtil.getGlobalConfig(['tools','tokenMigration']);\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n\n    if (!this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            icon={`images/migrate.svg`}\n            title={'Upgrade Available'}\n            iconHeight={['35px','40px']}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={[2,3]}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                Idle now supports yield farming and governance tokens distribution, migrate now your portfolio with just one click!\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n              >\n                <Flex\n                  fontSize={[2,3]}\n                  width={[0.5,0.28]}\n                  fontWeight={[4,5]}\n                  color={'copyColor'}\n                >\n                  {\n                    this.props.isMobile ? 'ASSET' : 'ASSET TO MIGRATE'\n                  }\n                </Flex>\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      BALANCE\n                    </Flex>\n                  )\n                }\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      OLD APY\n                    </Flex>\n                  )\n                }\n                <Flex\n                  fontSize={[2,3]}\n                  fontWeight={[4,5]}\n                  width={[0.25,0.19]}\n                  color={'copyColor'}\n                  justifyContent={'center'}\n                >\n                  {\n                    this.props.isMobile ? 'APY' : 'NEW APY'\n                  }\n                </Flex>\n                <Flex\n                  width={[0.25,0.15]}\n                >\n                  \n                </Flex>\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.tokensToMigrate && Object.keys(this.props.tokensToMigrate).map( tokenKey => {\n                    const token = this.props.tokensToMigrate[tokenKey].token;\n                    const strategy = this.props.tokensToMigrate[tokenKey].strategy;\n                    const tokenConfig = this.props.tokensToMigrate[tokenKey].tokenConfig;\n                    const balance = this.props.tokensToMigrate[tokenKey].oldContractBalanceFormatted;\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${tokenKey}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={[0.5,0.28]}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:['1.8em','2.3em']\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                        </Flex>\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <SmartNumber\n                                {...fieldProps}\n                                minPrecision={5}\n                                number={balance}\n                                flexProps={{\n                                  justifyContent:'center'\n                                }}\n                              />\n                            </Flex>\n                          )\n                        }\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <AssetField\n                                {...this.props}\n                                fieldInfo={{\n                                  name:'oldApy',\n                                  props:fieldProps\n                                }}\n                                token={token}\n                                tokenConfig={tokenConfig}\n                              />\n                            </Flex>\n                          )\n                        }\n                        <Flex\n                          width={[0.25,0.19]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={token}\n                            tokenConfig={tokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={[0.25,0.15]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.migrate(token,strategy) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.oldIdleTokensToMigrate && Object.keys(this.props.oldIdleTokensToMigrate).map( token => {\n                    const tokenConfig = this.props.oldIdleTokensToMigrate[token].tokenConfig;\n\n                    if (!tokenConfig){\n                      return null;\n                    }\n\n                    const balance = this.props.oldIdleTokensToMigrate[token].balance;\n                    let newTokenConfig = null;\n\n                    if (tokenConfig.availableStrategies && !this.props.availableTokens[tokenConfig.baseToken]){\n                      newTokenConfig = this.props.availableStrategies[tokenConfig.availableStrategies[0]][tokenConfig.baseToken];\n                    } else {\n                      newTokenConfig = this.props.availableTokens[tokenConfig.baseToken];\n                    }\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${token}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={0.28}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:'2.3em'\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <SmartNumber\n                            {...fieldProps}\n                            minPrecision={5}\n                            number={balance}\n                            flexProps={{\n                              justifyContent:'center'\n                            }}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'oldApy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.15}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.convert(token) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                my={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <RoundButton\n                  handleClick={this.closeModal}\n                  buttonProps={{\n                    fontSize:[2,3],\n                    width:['100%','40%'],\n                  }}\n                >\n                  MIGRATE LATER\n                </RoundButton>\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default UpgradeModal;","import React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport { Flex, Card, Icon, Text } from 'rimble-ui';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardMenu from '../DashboardMenu/DashboardMenu';\n\n// Import page components\nimport Stats from '../Stats/Stats';\nimport Utils from '../Utils/Utils';\nimport AssetPage from '../AssetPage/AssetPage';\nimport RoundButton from '../RoundButton/RoundButton';\nimport BetaModal from \"../utilities/components/BetaModal\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CurveStrategy from '../CurveStrategy/CurveStrategy';\nimport WelcomeModal from \"../utilities/components/WelcomeModal\";\nimport TooltipModal from \"../utilities/components/TooltipModal\";\nimport MigrateModal from \"../utilities/components/MigrateModal\";\nimport UpgradeModal from \"../utilities/components/UpgradeModal\";\nimport DashboardHeader from '../DashboardHeader/DashboardHeader';\n\nclass Dashboard extends Component {\n  state = {\n    menu:[],\n    baseRoute:null,\n    clickEvent:null,\n    activeModal:null,\n    currentRoute:null,\n    pageComponent:null,\n    currentSection:null,\n    selectedSection:null,\n    tokensToMigrate:null,\n    showResetButton:false,\n    selectedSubsection:null,\n    oldIdleTokensToMigrate:null,\n    protocolsTokensBalances:null,\n  };\n\n  timeoutId = null;\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    window.functionsUtil = this.functionsUtil;\n  }\n\n  async loadMenu() {\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n    const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n    const menu = Object.keys(strategies).filter( s => ( !strategies[s].comingSoon ) ).map(strategy => ({\n        submenu:[],\n        color:'#fff',\n        selected:false,\n        route:baseRoute+'/'+strategy,\n        label:strategies[strategy].title,\n        image:strategies[strategy].icon,\n        bgColor:strategies[strategy].color,\n        component:strategies[strategy].component,\n        imageInactive:strategies[strategy].iconInactive,\n        imageInactiveDark:strategies[strategy].iconInactiveDark\n      })\n    );\n\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n\n    // Add Curve\n    if (curveConfig.enabled){\n      const curveParams = Object.assign({\n        submenu:[],\n        selected:false,\n        component:CurveStrategy,\n      },curveConfig.params);\n\n      menu.push(curveParams);\n    }\n\n    // Add tools\n    menu.push(\n      {\n        icon:'Build',\n        label:'Tools',\n        color:'dark-gray',\n        component:Utils,\n        selected:false,\n        route:'/dashboard/tools',\n        bgColor:this.props.theme.colors.primary,\n        submenu:Object.values(this.functionsUtil.getGlobalConfig(['tools'])).filter( u => (u.enabled) )\n      }\n    );\n\n    // Add Stats\n    menu.push(\n      {\n        icon:'Equalizer',\n        label:'Stats',\n        bgColor:'#21f36b',\n        color:'dark-gray',\n        component:Stats,\n        selected:false,\n        route:'/dashboard/stats',\n        submenu:[]\n      }\n    );\n\n    // Add Forum\n    menu.push(\n      {\n        submenu:[],\n        icon:'Forum',\n        mobile:false,\n        label:'Forum',\n        selected:false,\n        component:null,\n        color:'dark-gray',\n        bgColor:'#ff0000',\n        isExternalLink:true,\n        route:this.functionsUtil.getGlobalConfig(['forumURL'])\n      }\n    );\n\n    await this.setState({\n      menu\n    });\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  openTooltipModal = (modalTitle,modalContent) => {\n\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: modalTitle,\n      eventLabel: 'TooltipModal'\n    });\n\n    this.setState({\n      modalTitle,\n      modalContent\n    },() => {\n      this.setActiveModal('tooltip');\n    })\n  }\n\n  setActiveModal = (activeModal) => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadParams() {\n    const { match: { params } } = this.props;\n\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n    let currentRoute = baseRoute;\n\n    let pageComponent = null;\n    let selectedToken = null;\n    let currentSection = null;\n    let selectedStrategy = null;\n\n    // Set strategy\n    if (params.section){\n      currentSection = params.section;\n      const param1 = params.param1;\n      const param2 = params.param2;\n\n      const section_is_strategy = Object.keys(this.props.availableStrategies).includes(currentSection.toLowerCase());\n      const param1_is_strategy = param1 && Object.keys(this.props.availableStrategies).includes(param1.toLowerCase());\n\n      if (section_is_strategy || param1_is_strategy){\n        selectedStrategy = section_is_strategy ? currentSection : param1;\n        currentRoute += '/'+selectedStrategy;\n\n        // Set token\n        const param1_is_token = param1 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param1.toUpperCase());\n        const param2_is_token = param2 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param2.toUpperCase());\n        if (param1_is_token || param2_is_token){\n          selectedToken = param1_is_token ? param1.toUpperCase() : param2.toUpperCase();\n          currentRoute += '/'+selectedToken;\n\n          if (section_is_strategy){\n            pageComponent = AssetPage;\n          }\n        }\n      } else {\n        currentRoute += '/'+params.section;\n\n        if (params.param1 && params.param1.length){\n          currentRoute += '/'+params.param1;\n        }\n\n        // if (params.param2 && params.param2.length){\n        //   currentRoute += '/'+params.param2;\n        // }\n      }\n    }\n\n    const menu = this.state.menu;\n\n    let selectedSection = null;\n    let selectedSubsection = null;\n\n    menu.forEach(m => {\n      m.selected = false;\n      const sectionRoute = baseRoute+'/'+params.section;\n      if (currentRoute.toLowerCase() === m.route.toLowerCase() || ( !m.submenu.length && m.route.toLowerCase() === sectionRoute.toLowerCase() )){\n        m.selected = true;\n        if (pageComponent === null){\n          pageComponent = m.component;\n        }\n      } else if (m.submenu.length) {\n        m.submenu.forEach(subm => {\n          subm.selected = false;\n          const submRoute = m.route+'/'+subm.route;\n          if (submRoute.toLowerCase() === currentRoute.toLowerCase()){\n            m.selected = true;\n            subm.selected = true;\n\n            // Set component, if null use parent\n            if (pageComponent === null){\n              if (subm.component){\n                pageComponent = subm.component;\n              } else {\n                pageComponent = m.component;\n              }\n            }\n          }\n\n          // Set selected subsection\n          if (subm.selected){\n            selectedSubsection = subm;\n          }\n\n        });\n      }\n\n      // Set selected section\n      if (m.selected){\n        selectedSection = m;\n      }\n    });\n\n    // console.log('pageComponent',params,pageComponent);\n\n    // Exit if no strategy and token selected\n    if (!pageComponent){\n      return this.goToSection('/',false);\n    }\n\n    // console.log('loadParams',selectedStrategy,selectedToken);\n    await this.props.setStrategyToken(selectedStrategy,selectedToken);\n\n    await this.setState({\n      menu,\n      params,\n      baseRoute,\n      currentRoute,\n      pageComponent,\n      currentSection,\n      selectedSection,\n      selectedSubsection\n    });\n  }\n\n  componentWillUnmount(){\n    if (this.timeoutId){\n      window.clearTimeout(this.timeoutId);\n    }\n  }\n\n  async componentWillMount() {\n\n    this.props.setCurrentSection('dashboard');\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n  }\n\n  async componentDidMount() {\n\n    this.timeoutId = window.setTimeout(() => {\n      if (!this.props.accountInizialized || !this.props.contractsInitialized){\n        this.setState({\n          showResetButton:true\n        });\n      }\n    },20000);\n\n    if (!this.props.web3){\n      return this.props.initWeb3();\n    } else if (!this.props.accountInizialized){\n      return this.props.initAccount();\n    } else if (!this.props.contractsInitialized){\n      return this.props.initializeContracts();\n    }\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n\n    const viewOnly = this.props.connectorName === 'custom';\n    if (!viewOnly){\n      this.checkModals();\n    }\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n\n    this.loadUtils();\n\n    const prevParams = prevProps.match.params;\n    const params = this.props.match.params;\n\n    if (JSON.stringify(prevParams) !== JSON.stringify(params)){\n      await this.setState({\n        pageComponent:null\n      }, () => {\n        this.loadParams();\n      });\n    }\n\n    const viewOnly = this.props.connectorName === 'custom';\n    const accountChanged = prevProps.account !== this.props.account;\n    const strategyChanged = this.props.selectedStrategy && prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const accountInizialized = this.props.accountInizialized && prevProps.accountInizialized !== this.props.accountInizialized;\n    const contractsInitialized = this.props.contractsInitialized && prevProps.contractsInitialized !== this.props.contractsInitialized;\n\n    if (!viewOnly && (accountChanged || accountInizialized || contractsInitialized || strategyChanged)){\n      this.checkModals();\n    }\n  }\n\n  async checkModals(){\n\n    if (this.props.selectedToken || !this.props.accountInizialized || !this.props.contractsInitialized || !this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    await this.checkBetaApproval();\n    await this.checkTokensToMigrate();\n    await this.checkWelcomeModal();\n    await this.checkProtocolsTokensBalances();\n  }\n\n  async checkBetaApproval(){\n    const isOriginUrl = this.functionsUtil.checkUrlOrigin();\n    const isBetaApproved = this.functionsUtil.getStoredItem('betaApproved',false,false);\n\n    // Show Beta Warning modal\n    if (!isOriginUrl && !isBetaApproved){\n      const activeModal = 'beta';\n      if (activeModal !== this.state.activeModal){\n        await this.setState({\n          activeModal,\n        });\n\n        return activeModal;\n      }\n    }\n  }\n\n  async checkTokensToMigrate(){\n\n    const showUpgradeModal = this.functionsUtil.getStoredItem('dontShowUpgradeModal',false,null) !== null ? false : true;\n    if (this.props.selectedToken || !showUpgradeModal || !this.props.availableTokens || this.state.activeModal !== null){\n      return null;\n    }\n\n    const tokensToMigrate = await this.functionsUtil.getTokensToMigrate();\n    const oldIdleTokensToMigrate = await this.functionsUtil.getProtocolsTokensBalances('idle');\n\n    // console.log('tokensToMigrate',tokensToMigrate);\n    \n    if ((tokensToMigrate && Object.keys(tokensToMigrate).length>0) || (oldIdleTokensToMigrate && Object.keys(oldIdleTokensToMigrate).length>0)){\n      const activeModal = 'upgrade';\n      if (activeModal !== this.state.activeModal){\n        await this.setState({\n          activeModal,\n          tokensToMigrate,\n          oldIdleTokensToMigrate\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkWelcomeModal(){\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show welcome modal\n    if (this.props.account && this.state.activeModal === null){\n      let welcomeIsOpen = false;\n\n      const welcomeModalProps = this.functionsUtil.getGlobalConfig(['modals','welcome']);\n\n      if (welcomeModalProps.enabled && localStorage){\n\n        // Check the last login of the wallet\n        const currTime = new Date().getTime();\n        const walletAddress = this.props.account.toLowerCase();\n        let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : {};\n\n        // First login\n        if (!lastLogin[walletAddress]){\n          lastLogin[walletAddress] = {\n            'signedUp':false,\n            'lastTime':currTime\n          };\n          welcomeIsOpen = true;\n        // User didn't sign up\n        } else if (!lastLogin[walletAddress].signedUp) {\n          const lastTime = parseInt(lastLogin[walletAddress].lastTime);\n          const timeFromLastLogin = (currTime-lastTime)/1000;\n          welcomeIsOpen = timeFromLastLogin>=welcomeModalProps.frequency; // 1 day since last login\n        }\n\n        if (welcomeIsOpen){\n          lastLogin[walletAddress].lastTime = currTime;\n          this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n        }\n      }\n\n      const activeModal = welcomeIsOpen ? 'welcome' : this.state.activeModal;\n      if (this.state.activeModal !== activeModal){\n        await this.setState({\n          activeModal\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkProtocolsTokensBalances() {\n\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show migration modal if no other modals are opened\n    const migrateModalEnabled = this.functionsUtil.getGlobalConfig(['modals','migrate','enabled']);\n    const showMigrateModal = this.functionsUtil.getStoredItem('dontShowMigrateModal',false,null) !== null ? false : true;\n\n    if (this.state.activeModal === null && migrateModalEnabled && showMigrateModal && !this.state.protocolsTokensBalances){\n      const protocolsTokensBalances = await this.functionsUtil.getProtocolsTokensBalances();\n      const activeModal = protocolsTokensBalances && Object.keys(protocolsTokensBalances).length>0 ? 'migrate' : null;\n      const newState = {\n        activeModal,\n        protocolsTokensBalances\n      };\n      await this.setState(newState);\n      return activeModal;\n    }\n\n    return null;\n  }\n\n  goToSection(section,isDashboard=true){\n\n    // Remove dashboard route\n    if (isDashboard){\n      section = section.replace(this.state.baseRoute +'/','');\n    }\n\n    const newRoute = isDashboard ? this.state.baseRoute +'/' + section : section;\n    window.location.hash=newRoute;\n\n    // Send GA event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'goToSection',\n      eventLabel: newRoute\n    });\n\n    window.scrollTo(0, 0);\n  }\n\n  logout = async () => {\n    this.props.setConnector('Infura','Infura');\n    await this.props.initWeb3('Infura');\n  }\n\n  changeToken(selectedToken){\n    selectedToken = selectedToken.toUpperCase();\n    if (Object.keys(this.props.availableTokens).includes(selectedToken)){\n      const routeParts = [];\n\n      // Add section\n      if (this.state.currentSection.toLowerCase() !== this.props.selectedStrategy.toLowerCase()){\n        routeParts.push(this.state.currentSection);\n      }\n\n      // Add strategy\n      routeParts.push(this.props.selectedStrategy); \n\n      // Add token\n      routeParts.push(selectedToken);\n\n      this.goToSection(routeParts.join('/'));\n    }\n  }\n\n  propagateClickEvent(clickEvent){\n    this.setState({\n      clickEvent:clickEvent.target\n    });\n  }\n\n  render() {\n    const PageComponent = this.state.pageComponent ? this.state.pageComponent : null;\n    return (\n      <Flex\n        width={'100%'}\n        position={'fixed'}\n        flexDirection={'row'}\n        backgroundColor={['dashboardBg','white']}\n        /*onClick={ e => this.propagateClickEvent(e) }*/\n        height={[(window.innerHeight-61)+'px','100vh']}\n      >\n        <Flex\n          bottom={0}\n          zIndex={99999}\n          width={[1,1/6]}\n          flexDirection={'column'}\n          position={['fixed','relative']}\n        >\n          <Card\n            p={[0,3]}\n            border={0}\n            width={['100vw','auto']}\n            height={['auto','100vh']}\n            backgroundColor={'menuBg'}\n            borderColor={this.props.theme.colors.menuRightBorder}\n            borderRight={`1px solid ${this.props.theme.colors.menuRightBorder}`}\n            >\n            <DashboardMenu\n              {...this.props}\n              menu={this.state.menu}\n            />\n          </Card>\n        </Flex>\n        <Flex\n          py={3}\n          mb={0}\n          px={[3,5]}\n          width={[1,5/6]}\n          style={{\n            overflowY:'scroll',\n            overflowX:'hidden'\n          }}\n          height={['92vh','auto']}\n          flexDirection={'columns'}\n          backgroundColor={'dashboardBg'}\n        >\n          {\n            !this.props.accountInizialized || !this.props.contractsInitialized || !PageComponent ? (\n              <Flex\n                width={1}\n                minHeight={'50vg'}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                {\n                  !this.state.showResetButton ? (\n                    <FlexLoader\n                      textProps={{\n                        textSize:4,\n                        fontWeight:2\n                      }}\n                      loaderProps={{\n                        mb:3,\n                        size:'40px'\n                      }}\n                      flexProps={{\n                        my:3,\n                        flexDirection:'column'\n                      }}\n                      text={ !this.props.accountInizialized ? 'Loading account...' : ( !this.props.contractsInitialized ? 'Loading contracts...' : 'Loading assets...' )}\n                    />\n                  ) : (\n                    <DashboardCard\n                      cardProps={{\n                        p:3,\n                        mt:3,\n                        width:[1,0.35]\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Icon\n                          size={'2.3em'}\n                          name={'Warning'}\n                          color={'cellText'}\n                        />\n                        <Text\n                          mt={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          Idle can't connect to your wallet!<br />Make sure that your wallet is unlocked and try again.\n                        </Text>\n                        <RoundButton\n                          buttonProps={{\n                            mt:3,\n                            width:[1,1/2]\n                          }}\n                          handleClick={this.logout.bind(this)}\n                        >\n                          Logout\n                        </RoundButton>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n              </Flex>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardHeader\n                  clickEvent={this.state.clickEvent}\n                  goToSection={this.goToSection.bind(this)}\n                  {...this.props}\n                />\n                {\n                  PageComponent &&\n                    <PageComponent\n                      {...this.props}\n                      match={{ params:{} }}\n                      urlParams={this.state.params}\n                      changeToken={this.changeToken.bind(this)}\n                      goToSection={this.goToSection.bind(this)}\n                      selectedSection={this.state.selectedSection}\n                      selectedSubsection={this.state.selectedSubsection}\n                      openTooltipModal={this.openTooltipModal.bind(this)}\n                      />\n                }\n              </Flex>\n            )\n          }\n        </Flex>\n        <BetaModal\n          closeModal={this.resetModal}\n          isOpen={this.state.activeModal === 'beta'}\n        />\n        <UpgradeModal\n          {...this.props}\n          closeModal={this.resetModal}\n          goToSection={this.goToSection.bind(this)}\n          tokensToMigrate={this.state.tokensToMigrate}\n          isOpen={this.state.activeModal === 'upgrade'}\n          oldIdleTokensToMigrate={this.state.oldIdleTokensToMigrate}\n        />\n        <MigrateModal\n          {...this.props}\n          closeModal={this.resetModal}\n          goToSection={this.goToSection.bind(this)}\n          isOpen={this.state.activeModal === 'migrate'}\n          protocolsTokensBalances={this.state.protocolsTokensBalances}\n        />\n        <TooltipModal\n          closeModal={this.resetModal}\n          title={this.state.modalTitle}\n          content={this.state.modalContent}\n          isOpen={this.state.activeModal === 'tooltip'}\n        />\n        <WelcomeModal\n          closeModal={this.resetModal}\n          account={this.props.account}\n          simpleID={this.props.simpleID}\n          network={this.props.network.current}\n          tokenName={this.props.selectedToken}\n          initSimpleID={this.props.initSimpleID}\n          baseTokenName={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'welcome'}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default Dashboard;"],"sourceRoot":""}