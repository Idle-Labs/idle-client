{"version":3,"sources":["Stats/StatsChart.js","Rebalance/Rebalance.js","utilities/components/DateRangeModal.js","Stats/Stats.js","Utils/Utils.js","FundsOverview/FundsOverview.js","CurveRedeem/CurveRedeem.js","DepositRedeem/DepositRedeem.js","EstimatedEarnings/EstimatedEarnings.js","AssetPage/AssetPage.js","utilities/components/BetaModal.js","CurveDeposit/CurveDeposit.js","PortfolioEquityCurve/PortfolioEquityCurve.js","FundsOverviewCurve/FundsOverviewCurve.js","CurveStrategy/CurveStrategy.js","utilities/components/PolygonModal.js","utilities/components/WelcomeModal.js","utilities/components/MigrateModal.js","utilities/components/UpgradeModal.js","utilities/components/RiskAdjustedModal.js","Dashboard/Dashboard.js"],"names":["StatsChart","state","chartProps","chartType","chartData","chartWidth","functionsUtil","parseAum","value","parseInt","parseFloat","toFixed","_this","props","selectedToken","loadApiData","_callee3","maxGridLines","apiResults","apiResults_unfiltered","totalItems","protocols","versionInfo","keys","tempData","gridYStep","itemIndex","daysCount","gridYValues","maxChartValue","axisBottomIndex","daysFrequency","idleChartData","firstIdleBlock","axisBottomMaxValues","divergingData","startTimestamp","endTimestamp","timestamp","date","lastRow","maxRange","i","_i","dates","_i2","_i3","chartValues","prevValue","_i4","prevApr","prevData","avgApy","startBalance","currentBalance","aaveProtocolInfo","_i5","firstTokenPrice","_i6","regenerator_default","a","wrap","_context3","prev","next","tokenConfig","chartMode","abrupt","length","Object","assign","globalConfigs","stats","versions","idleVersion","Line","t0","moment","_d","getTime","format","deposits","redeems","forEach","row","idleTokens","fixTokenDecimals","idleSupply","idleTokensPrev","eq","diff","minus","gte","Math","max","abs","values","filter","v","sort","b","Bar","push","ceil","indexBy","enableLabel","minValue","maxValue","label","d","axisBottom","isMobile","tickSize","legend","tickPadding","orient","legendOffset","tickValues","legendPosition","axisLeft","axisRight","tickRotation","abbreviateNumber","markers","axis","lineStyle","strokeOpacity","textStyle","fill","theme","colors","transactions","action","deposit","legendOrientation","legendOffsetX","stroke","strokeDasharray","redeem","padding","labelTextColor","labelSkipWidth","labelSkipHeight","pointSize","useMesh","animate","pointLabel","curve","enableArea","enableSlices","enableGridX","enableGridY","pointBorderWidth","pointLabelYOffset","legends","dataFrom","itemWidth","itemHeight","translateX","translateY","symbolSize","itemsSpacing","direction","anchor","symbolShape","itemTextColor","effects","on","style","themeMode","ticks","text","fontSize","fontWeight","fontFamily","fonts","sansSerif","grid","line","lineChartStroke","textTransform","tooltip","container","boxShadow","background","pointColor","from","modifiers","margin","top","right","bottom","left","data","xFormatted","strToMoment","point","id","depositFormatted","redeemFormatted","react_default","createElement","CustomTooltip","CustomTooltipRow","color","tokens","hsl","join","map","idlePrice","decimals","aum","times","x","y","toString","p","j","protocolsData","protocolAllocation","protocolAddr","toLowerCase","address","z","BNify","rate","allocation","foundItem","item","pos","indexOf","allocations","name","undefined","xScale","type","xFormat","yFormat","formatMoney","yScale","stacked","sliceTooltip","slideData","slice","points","serieId","serieColor","yFormatted","protocolName","protocolInfo","protocolColor","protocolAllocationFormatted","protocolAllocationPerc","div","key","concat","protocolData","protocolPaused","foundProtocol","find","_ref2","tableCell","_ref3","DashboardCard","cardProps","py","px","width","borderCollapse","display","height","totalAllocation","reduce","accumulator","plus","allocationPerc","_ref4","_ref5","additionalProtocols","additionalProtocol","protocol","enabledTokens","includes","enabled","unshift","objectSpread","rateField","protocolRate","acc","field","lt","aaveAdditionalAPR","gt","idle","idleRate","isBefore","protocolEarning","defiScore","isNaN","idleScore","apy","isSameOrBefore","aaveProtocolData","pData","apr","days","earnings","earning","daysSinceBeginning","blocknumber","itemPos","floor","tokensProps","tokenProps","isAfter","Date","now","chartRow","baseProfit","firstProtocolData","firstProtocolBlock","rowData","idlePerformance","d1","protocolApy","tokenPrice","asyncForEach","_ref6","asyncToGenerator","mark","_callee2","lastRowData","lastTokenPrice","_context2","_ref7","_callee","tokenExchangeRate","tokenPriceFixed","lastYDiff","_context","price","stop","this","_x2","apply","arguments","_x","showAdvanced","setState","loadUtils","prevProps","showAdvancedChanged","apiResultsChanged","tokenChanged","JSON","stringify","componentDidMount","setProps","FunctionsUtil","GenericChart","showLoader","parentId","parentIdHeight","Component","Rebalance","loading","processing","rebalance","txHash","shouldRebalance","componentUnmounted","checkRebalance","setStateSafe","sent","e","callback","callback_receipt","preventDefault","tx","error","eventData","eventLabel","status","eventCategory","eventAction","getTransactionError","sendGoogleAnalyticsEvent","window","toastProvider","addMessage","secondaryMessage","colorTheme","actionHref","actionText","variant","prevState","transactionHash","contractMethodSendWrapper","token","accountChanged","account","newState","_this2","index_es","minHeight","alignItems","flexDirection","justifyContent","FlexLoader","flexProps","loaderProps","size","textProps","ml","TxProgressBar","waitText","endMessage","hash","mt","mb","textAlign","RoundButton","buttonProps","disabled","handleClick","DateRangeModal","quickSelection","ranges","startDate","endDate","options","quickSelections","componentDidUpdate","selection","target","quickSelectionParams","clone","subtract","closeModal","handleSelect","startTimestampObj","endTimestampObj","_this3","isOpen","ModalCard","closeFunc","Header","title","Body","counter","backgroundColor","cardBg","required","onChange","handleQuickSelect","bind","dist","minDate","maxDate","className","Footer","my","mx","borderRadius","mainColor","onClick","React","Stats","delta","carouselMax","rebalances","buttonGroups","carouselIndex","statsVersions","minStartTime","govTokensPool","unlentBalance","carouselOffsetLeft","showRefreshIdleSpeed","dateRangeModalOpened","day","week","weeks","month","ytd","setDateRange","isSameOrAfter","isSame","add","maxEndDate","toggleAdvancedCharts","setDateRangeModal","filterTokenData","r","setIdleVersion","isRisk","firstResult","lastResult","firstIdlePrice","lastIdlePrice","compoundInfo","firstCompoundData","lastCompoundData","compoundWithCOMPInfo","compoundAvgApr","firstCompoundPrice","lastCompoundPrice","compoundApr","availableTokens","selectedStrategy","getTokenApiData","pop","convertTokenBalance","sum","compoundWithCOMP","compoundData","compoundRate","index","prevRow","prevTotalAllocation","hasRebalanced","prevP","prevAllocation","getGovTokenPool","getUnlentBalance","selectToken","strategy","setStrategyToken","changeToken","handleCarousel","$element","jQuery","position","loadParams","latestVersion","version","enabledStrategies","strategiesParams","versionInfoExtra","param","params","match","currentNetworkAvailableTokens","customToken","toUpperCase","getLatestAvailableVersion","getVersionInfo","newEndTimestampObj","newStartTimestampObj","web3","initWeb3","loadCarousel","contractsInitialized","strategyChanged","dateChanged","versionChanged","networkId","getRequiredNetworkId","idleTokenAvailableNetworks","getGlobalConfig","idleTokenEnabled","refreshIdleSpeedConfig","refreshIdleSpeedEnabled","availableNetworks","apyLong","availableStrategies","textSize","statsTokens","versionsOptions","performanceTooltip","versionDefaultValue","Breadcrumb","showPathMobile","goToSection","path","GenericSelector","innerProps","defaultValue","AssetSelector","isInteractive","pr","StatsCard","labelTooltip","SmartNumber","precision","lineHeight","unitProps","number","unit","VariationNumber","iconPos","iconSize","span","description","Stats_StatsChart","contracts","pb","pt","AllocationChart","src_Rebalance_Rebalance","pl","h4","RoundIconButton","mr","iconName","transition","utilities_components_DateRangeModal","strategies","statsProtocols","AssetsUnderManagement","loaderAlign","strategyInfo","availableProtocolsKeys","availableProtocols","Title","titlePostfix","AssetsList","cols","fields","mobile","parentProps","overflow","desc","showTooltip","rgb","hoverColor","isActive","ExecuteTransaction","Button","componentProps","contractName","methodName","completed","Utils","SubComponent","selectedSubsection","subComponent","viewOnly","connectorName","showBreadCrumb","selectedSection","route","dangerouslySetInnerHTML","__html","directProps","toolProps","flexWrap","IconBox","maxWidth","icon","submenu","tool","toolIndex","flex","image","src","FundsOverview","aggregatedValues","govTokensTotalApr","govTokensUserBalance","govTokensDistribution","govTokensTotalBalance","govTokensTotalAprTooltip","idleTokenUserDistribution","govTokensDistributionTooltip","govTokensTotalBalanceTooltip","idleGovToken","getIdleGovToken","govTokenAvailableTokens","Promise","all","getUserDistribution","getGovTokensUserBalances","loadAssetField","depositTimestamp","getAvgAPYStats","avgAPY","lte","totBalance","govTokenBalance","govToken","balance","children","AssetField","fieldInfo","placement","message","PortfolioEquity","chartHeight","chartToken","frequencySeconds","getFrequencySeconds","component","Heading","h3","maxPrecision","govTokenIndex","tokenName","distributionFrequency","CurveRedeem","inputValue","maxSlippage","unevenAmounts","buttonDisabled","showMaxSlippage","redeemUnderlying","curveTokenConfig","curvePoolContract","curveSwapContract","curveTokenBalance","curveTokensAmounts","fastBalanceSelector","redeemUnevenAmounts","curveRedeemableIdleTokens","toggleUnevenAmounts","checkButtonDisabled","amount","changeInputValue","setFastBalanceSelector","setMaxSlippage","initToken","max_slippage","normalizedAmount","normalizeTokenAmount","withdrawSlippage","curveIdleTokensAmounts","getCurveTokensAmounts","getCurveIdleTokensAmounts","getCurveSlippage","getCurveTokenPrice","curveTokenPrice","redeemableBalance","redeemUnevenAmountsChanged","setInputValue","inputChanged","maxSlippageChanged","tokenConfigChanged","calculateSlippage","loadSelectedTokenConfig","selectedPercentage","curveConfig","getCurvePoolContract","getCurveSwapContract","getCurveTokenBalance","getCurveRedeemableIdleTokens","getCurveAvailableTokens","callbackRedeem","txSucceeded","eventValue","callbackReceiptRedeem","_amount","min_amounts","console","log","coin_index","migrationParams","coinIndex","min_amount","showSlippage","curveTokenName","cancelTransaction","checked","showBalance","selectDestinationToken","slippage","FastBalanceSelector","percentage","onMouseDown","whiteSpace","failed","textOverflow","min","placeholder","border","divider","DepositRedeem","txError","tokenAPY","curveAPY","totalAUM","canRedeem","canDeposit","directMint","activeModal","tokenGovTokens","showBuyFlow","maxUnlentPerc","tokenApproved","skipMigration","redeemSkipGov","showRedeemFlow","contractPaused","canRedeemCurve","erc20ForwarderTx","signedParameters","minAmountForMint","redeemGovTokens","canDepositCurve","redeemSkipGovTokens","actionProxyContract","migrationEnabled","componentMounted","agreeSkipGovTokens","redeemCurveEnabled","depositCurveBalance","depositCurveEnabled","showAdvancedOptions","skipGovTokensGasSave","depositCurveSlippage","erc20ForwarderContract","erc20ForwarderEnabled","showETHWrapperEnabled","skipGovTokensGasSaveUSD","metaTransactionsEnabled","skippedGovTokensBalance","minAmountForMintReached","loadingErc20ForwarderTx","setShowRedeemFlow","setShowBuyFlow","toggleShowAdvancedOptions","toggleSkipMigration","toggleRedeemCurve","toggleDepositCurve","toggleShowETHWrapper","toggleAgreeSkipGovTokens","toggleSkipMint","toggleRedeemGovTokens","toggleRedeemSkipGov","getSkippedGovTokensFlags","govTokensIndexes","govTokensFlags","getGovTokensIndexes","calculateSkippedGovTokens","DAITokenConfig","_skipGovTokenRedeem","WETHTokenConfig","wethPrice","redeemGasUsage","skipGovRedeemGasUsage","govTokenConfig","govTokenPrice","skippedAmount","getUniswapConversionRate","govTokensUserBalances","estimateMethodGasUsage","idleTokenBalance","slicedToArray","setRedeemSkipGovTokens","splice","toggleErc20ForwarderEnabled","toggleMetaTransactionsEnabled","resetModal","setActiveModal","checkUseProxyContract","proxyContract","depositErc20ForwarderEnabled","depositMetaTransactionsEnabled","biconomy","approveContract","_callee4","callbackApprove","callbackReceiptApprove","curveDepositContract","_context4","enableERC20","checkTokenApproved","_callee5","_context5","approveToken","_callee6","_context6","approve","loadTokenInfo","_callee7","curveTokenEnabled","_ref10","_ref11","_context7","checkContractPaused","getCurveDepositContract","checkMigration","tokenBalance","getTokenGovTokens","boost","checkAction","loadAPY","_callee8","_context8","defineProperty","executeAction","_callee11","contractSendResult","callbackDeposit","callbackReceiptDeposit","curvePoolContractInfo","tokensToDeposit","amounts","minMintAmount","depositParams","_tokensToDeposit","_depositParams","mintProxyContractInfo","mintProxyContract","_mintProxyContract$me","functionCall","functionSignature","methodAbi","useNonce","_referral","txData","idleTokenToRedeem","idleTokenPriceWithFee","_callbackRedeem","_callbackReceiptRedeem","redeemMethod","redeemParams","_context11","getFastBalanceSelector","localStorage","setLocalStorage","lendingProcessing","lendAmount","genericError","getCurveAmounts","getCurveTokenAmount","integerValue","contract","methods","function","toConsumableArray","encodeABI","sendBiconomyTxWithPersonalSign","_jsonInterface","f","inputs","_callee10","metaInfo","permitOptions","erc20ForwarderBaseContract","permitValue","permitConfig","setValue","expiry","nonce","s","_context10","signPermit","t","allowed","holder","spender","permitData","permitType","asyncTimeout","sendBiconomyTxWithErc20Forwarder","request","_callee9","_erc20ForwarderContra","_functionCall","_functionSignature","gasLimit","_context9","estimateGas","buildBiconomyErc20ForwarderTx","getReferralAddress","getIdleTokenPriceWithFee","_callee12","_context12","setAction","loadProxyContracts","actions","_ref17","_callee15","erc20ForwarderContractInfo","hasProxyContract","_context15","initContract","abi","approved","_x5","getTokenAprs","tokenAprs","getCurveAPY","getQueryStringParameterByName","checkAddress","erc20ForwarderEnabledChanged","tokenBalanceChanged","actionChanged","fastBalanceSelectorChanged","redeemSkipGovChanged","redeemGovTokensChanged","agreeSkipGovTokensChanged","redeemSkipGovTokensChanged","depositCurveChanged","calculateCurveSlippage","showPoolPerc","convertedAmount","genericContractCall","depositPerc","maxUnlentPercFormatted","currentNetwork","getCurrentNetwork","isDepositDisabled","depositDisabledMessage","disabledMessageRedeemKey","disabledMessageDepositKey","govTokensEnabled","govTokensDisabled","skipMintForDepositEnabled","skipMintForDeposit","redeemGovTokenEnabled","redeemSkipGovConfig","redeemSkipGovEnabled","disabledTokens","govTokensBalance","redeemSkipGovNoTokens","showAdvancedRedeemOptions","depositErc20ForwarderEnabledTokens","metaTransactionsAvailable","useMetaTx","erc20ForwarderClient","totalBalance","migrateText","migration","depositCurve","showDepositCurve","showRedeemCurve","showCurveSlippage","showAdvancedDepositOptions","batchDepositInfo","batchDepositEnabled","batchDepositDepositEnabled","depositEnabled","showBatchDeposit","isMigrationTool","ethWrapperInfo","ETHWrapperComponent","showETHWrapper","polygonBridgeInfo","polygonNetworkId","canPerformAction","showPolygonBridgeEnabled","showActionFlow","provider","showPolygonBridge","showPolygonBridgeBanner","buyToken","accountBalance","getBaseToken","showReferral","Migrate","migrateTextBefore","TransactionField","transaction","isDisabled","iconProps","openTooltipModal","isRainbow","cursor","m","CardIconButton","imageProps","getWalletProvider","capitalize","primary","href","fullWidth","cost","align","tokenFeesPercentage","borderColor","minWidth","ConnectBox","src_CurveRedeem_CurveRedeem","BuyModal","showInline","availableMethods","ShareModal","confettiEnabled","tweet","EstimatedEarnings","maxInputValue","loadChart","getTokenApy","earningsYear","tokenApy","amountMonth","amount3Months","amount6Months","amountYear","perc","monthColor","month3","month3Color","month6","month6Color","year","yearColor","labelTextColorModifiers","gridYValue","_ref","labels","showAPYDisclaimer","verticalAlign","zIndex","AssetPage","tokenFees","idleTokenPrice","userHasFunds","availableGovTokens","getTokenFees","getIdleTokenPrice","getTokenBalance","getUserTokenFees","getGovTokensUserTotalBalance","loadTokensInfo","selectedTokenChanged","availableTokensChanged","transactionsChanged","nexusMutualConfig","Fragment","src_DepositRedeem_DepositRedeem","ActiveCoverages","titleProps","src_FundsOverview_FundsOverview","src_EstimatedEarnings_EstimatedEarnings","TransactionsList","BetaModal","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","iconHeight","CurveDeposit","depositSlippage","migrationContract","curveTokensBalance","migrationSucceeded","migrationContractApproved","checkMigrationContractApproved","getMigrationParams","approveCallback","migrationCallback","idleTokenBalanceChanged","toMigrate","n_coins","underlyingBalanceToDeposit","normalizeIdleTokenBalance","hasCurveTokens","PortfolioEquityCurve","chartwidth","loadChartData","quickDateSelectionChanged","quickDateSelection","getCurveTxs","curveTxs","tokensBalance","processedTxs","firstTxTimestamp","timeStamp","curveTokens","currentDate","prevBalances","prevTimestamp","minChartValue","aggregatedBalancesKeys","tokensBalancesPerDate","aggregatedBalance","currTimestamp","tokensData","foundBalances","tokensBalances","momentDate","filteredTokenData","filteredBalances","lastFilteredTx","lastTokenData","lastTx","lastTxBalance","formattedDate","aggregatedBalanceParsed","aggregatedBalances","balances","yFormatDecimals","areaOpacity","areaBaselineValue","ChartCustomTooltip","ChartCustomTooltipRow","tokenInfo","hex","formattedBalance","FundsOverviewCurve","compAPR","getCurveAvgBuyPrice","getCurveAvgSlippage","src_PortfolioEquityCurve_PortfolioEquityCurve","redeemBalance","depositBalance","curveZapContract","curveAvailableTokens","changeFromToken","setSelectedToken","baseToken","getSelectedToken","urlParams","param1","getCurveZapContract","updateAssetSelector","curveTokensToRedeem","src_CurveDeposit_CurveDeposit","src_FundsOverviewCurve_FundsOverviewCurve","enabledActions","PolygonModal","ExtLink","getEtherscanAddressUrl","WelcomeModal","email","subscribed","sendingForm","sendUserInfo","sendEmail","walletProvider","userInfo","simpleIDPassUserInfo","analytics","google","events","setTimeout","err","handleSubmit","assertThisInitialized","handleValidation","axios","post","newsletterSubscription","endpoint","then","catch","walletAddress","lastLogin","getItem","parse","signedUp","parentNode","classList","onSubmit","green","Field","Input","outline","header_styles","input","ButtonLoader","buttonText","isLoading","gradientButton","MigrateModal","dontShowAgain","toggleDontShowAgain","removeStoredItem","migrate","tokenMigrationRoute","fieldProps","protocolsTokensBalances","minPrecision","UpgradeModal","_args3","convert","convertTool","tokensToMigrate","tokenKey","oldContractBalanceFormatted","oldIdleTokensToMigrate","newTokenConfig","RiskAdjustedModal","getAppUrl","Dashboard","menu","baseRoute","clickEvent","menuOpened","currentRoute","pageComponent","currentSection","showResetButton","pageComponentProps","timeoutId","modalTitle","modalContent","logout","setConnector","extraicons","getRequiredNetwork","stakePolygonConfig","selected","imageDark","iconDark","bgColor","imageInactive","iconInactive","imageInactiveDark","iconInactiveDark","comingSoon","enabledEnvs","currentEnv","imageInfo","visible","curveParams","CurveStrategy","stakeConfig","statsInfo","isExternalLink","networkInitialized","section","param2","section_is_strategy","param1_is_strategy","param1_is_token","param2_is_token","sectionRoute","subm","sendGoogleAnalyticsPageview","clearTimeout","setCurrentSection","loadMenu","accountInizialized","initAccount","initializeContracts","checkModals","prevParams","_this4","requiredNetworkChanged","network","networkChanged","checkRiskAdjusted","checkPolygonModal","checkBetaApproval","checkTokensToMigrate","checkWelcomeModal","checkProtocolsTokensBalances","isPolygon","isPolygonApproved","getStoredItem","isOriginUrl","checkUrlOrigin","isBetaApproved","showUpgradeModal","getTokensToMigrate","getProtocolsTokensBalances","welcomeIsOpen","welcomeModalProps","currTime","lastTime","frequency","migrateModalConfig","migrateModalEnabled","showMigrateModal","isDashboard","replace","newRoute","location","scrollTo","routeParts","setMenu","dir","_this5","PageComponent","current","networkCorrect","isCorrectNetwork","networkSupported","isSupportedNetwork","Swipeable","swipeCallback","menuRightBorder","borderRight","DashboardMenu","closeMenu","overflowY","overflowX","DashboardHeader","toggleMenu","addEthereumChain","components_PolygonModal","components_BetaModal","components_RiskAdjustedModal","components_UpgradeModal","components_MigrateModal","TooltipModal","content","components_WelcomeModal","simpleID","initSimpleID","baseTokenName"],"mappings":"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","file":"static/js/4.f120225d.chunk.js","sourcesContent":["import moment from 'moment';\nimport { Bar } from '@nivo/bar';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CustomTooltip from '../CustomTooltip/CustomTooltip';\nimport CustomTooltipRow from '../CustomTooltip/CustomTooltipRow';\n\nclass StatsChart extends Component {\n  state = {\n    chartProps:{},\n    chartType:null,\n    chartData:null,\n    chartWidth:null\n  };\n\n  async componentDidMount() {\n    this.setState({\n      chartData:null,\n      chartType:null,\n      chartProps:null,\n    });\n    this.loadUtils();\n    this.loadApiData();\n  }\n\n  async componentDidUpdate(prevProps) {\n    const showAdvancedChanged = prevProps.showAdvanced !== this.props.showAdvanced;\n    const apiResultsChanged = prevProps.apiResults !== this.props.apiResults;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    if (apiResultsChanged || showAdvancedChanged || tokenChanged){\n      this.componentDidMount();\n    }\n  }\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  parseAum = value => {\n    return (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.tokenConfig || !this.props.selectedToken || !this.props.chartMode || !this.props.apiResults){\n      return false;\n    }\n\n    const maxGridLines = 4;\n    const apiResults = this.props.apiResults;\n    const apiResults_unfiltered = this.props.apiResults_unfiltered;\n    const totalItems = apiResults.length;\n    const protocols = Object.assign([],this.props.tokenConfig.protocols);\n    // const compoundProtocol = this.props.tokenConfig.protocols.find( p => (p.name === 'compound'));\n\n    const versionInfo = globalConfigs.stats.versions[this.props.idleVersion];\n\n    let keys = {};\n    let tempData = {};\n    let gridYStep = 0;\n    let itemIndex = 0;\n    let daysCount = 0;\n    let chartData = [];\n    let chartProps = {};\n    let chartType = Line;\n    let gridYValues = [];\n    let maxChartValue = 0;\n    let axisBottomIndex = 0;\n    let daysFrequency = null;\n    let idleChartData = null;\n    let firstIdleBlock = null;\n    let axisBottomMaxValues = 12;\n\n    switch (this.props.chartMode){\n      case 'VOL':\n        let divergingData = {};\n\n        const startTimestamp = parseInt(apiResults_unfiltered[0].timestamp);\n        const endTimestamp = parseInt(moment()._d.getTime()/1000);\n\n        for (let timestamp=startTimestamp;timestamp<=endTimestamp;timestamp+=86400){\n          const date = moment(timestamp*1000).format(\"YYYY/MM/DD\");\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n        }\n\n        let lastRow = null;\n        apiResults_unfiltered.forEach(row => {\n          const date = moment(row.timestamp*1000).format(\"YYYY/MM/DD\");\n          const idleTokens = this.functionsUtil.fixTokenDecimals(row.idleSupply,18);\n\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp:row.timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n\n          if (lastRow){\n            const idleTokensPrev = this.functionsUtil.fixTokenDecimals(lastRow.idleSupply,18);\n            const idleTokensDiff = !idleTokens.eq(idleTokensPrev);\n            if (idleTokensDiff){\n              const diff = idleTokens.minus(idleTokensPrev);\n              // Deposits\n              if (diff.gte(0)){\n                divergingData[date].deposits+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,divergingData[date].deposits);\n              } else {\n                divergingData[date].redeems+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,Math.abs(divergingData[date].deposits));\n              }\n            }\n\n          } else {\n            divergingData[date].deposits+=parseFloat(idleTokens);\n          }\n\n          lastRow = row;\n        });\n\n        chartData = Object.values(divergingData).filter(v => {\n          return (!this.props.startTimestamp || v.timestamp>=this.props.startTimestamp) && (!this.props.endTimestamp || v.timestamp<=this.props.endTimestamp);\n        }).sort((a,b) => (a.timestamp < b.timestamp ? -1 : 1));\n\n        let maxRange = 0;\n        chartData.forEach(v => {\n          maxRange = Math.max(maxRange,Math.abs(v.deposits),Math.abs(v.redeems));\n        });\n\n        chartType = Bar;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 6;\n        daysCount = moment(chartData[chartData.length-1].date,\"YYYY/MM/DD\").diff(moment(chartData[0].date,\"YYYY/MM/DD\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          indexBy: 'date',\n          enableLabel: false,\n          minValue:-maxRange,\n          maxValue:maxRange,\n          label: d => {\n            return Math.abs(d.value);\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            legend: '',\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            tickValues: 'every day',\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD').format('MMM DD')\n              }\n            },\n            legendPosition: 'middle',\n          },\n          axisLeft: null,\n          axisRight: {\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:8,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(Math.abs(v),0)\n          },\n          markers: [\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { strokeOpacity: 0 },\n              textStyle: { fill: this.props.theme.colors.transactions.action.deposit },\n              legend: 'deposits',\n              legendPosition: 'top-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { stroke: this.props.theme.colors['dark-gray'], strokeDasharray: '5 3' },\n              textStyle: { fill: this.props.theme.colors.transactions.action.redeem },\n              legend: 'redeems',\n              legendPosition: 'bottom-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n          ],\n          keys:['deposits','redeems'],\n          padding:0.4,\n          colors:[this.props.theme.colors.transactions.action.deposit, this.props.theme.colors.transactions.action.redeem],\n          labelTextColor: 'inherit:darker(1.4)',\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 80 : 100,\n              itemHeight: 18,\n              translateX: 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            },\n            tooltip:{\n              container:{\n                boxShadow:null,\n                background:null\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 50, bottom: 45, left: 50 } : { top: 20, right: 70, bottom: 70, left: 50 },\n          tooltip:(data) => {\n            const xFormatted = this.functionsUtil.strToMoment(data.data.timestamp*1000).format('MMM DD HH:ss');\n            const point = {\n              id:data.id,\n              data:{\n                xFormatted\n              }\n            };\n            const depositFormatted = this.functionsUtil.abbreviateNumber(data.data.deposits,2)+' '+this.props.selectedToken;\n            const redeemFormatted = this.functionsUtil.abbreviateNumber(data.data.redeems,2)+' '+this.props.selectedToken;\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                <CustomTooltipRow\n                  label={'Deposits'}\n                  color={this.props.theme.colors.deposit}\n                  value={depositFormatted}\n                />\n                <CustomTooltipRow\n                  label={'Redeem'}\n                  color={this.props.theme.colors.redeem}\n                  value={redeemFormatted}\n                />\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      /*\n      case 'AUM_ALL':\n        await this.functionsUtil.asyncForEach(Object.keys(availableTokens[globalConfigs.network.requiredNetwork]),async (tokenName,i) => {\n          const tokenConfig = availableTokens[globalConfigs.network.requiredNetwork][tokenName];\n          const tokenDataApi = await this.props.getTokenData(tokenConfig.address);\n          chartData.push({\n            id:tokenName,\n            color: tokenConfig.color,\n            data: tokenDataApi.map((d,i) => {\n              const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n              const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,tokenConfig.decimals);\n              const aum = idleTokens.times(idlePrice);\n              return {\n                x: moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\"),\n                y: parseInt(aum.toString())\n              };\n            })\n          });\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken,\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v),\n            orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            legendPosition: 'middle'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            format: '%b %d',\n            tickValues: this.props.isMobile ? 'every 4 days' : 'every 3 days',\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 36,\n            legendPosition: 'middle'\n          },\n          enableArea:false,\n          curve:\"linear\",\n          enableSlices:'x',\n          enableGridX:true,\n          enableGridY:false,\n          colors:d => d.color,\n          pointSize:0,\n          pointColor:{ from: 'color', modifiers: []},\n          pointBorderWidth:1,\n          pointLabel:\"y\",\n          pointLabelYOffset:-12,\n          useMesh:true,\n          animate:false,\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 60, bottom: 40, left: 60 },\n        };\n      break;\n      */\n      case 'AUM':\n\n        maxChartValue = 0;\n\n        chartData.push({\n          id:'AUM',\n          color: 'hsl('+globalConfigs.stats.tokens[this.props.selectedToken].color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n            const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n            const aum = idleTokens.times(idlePrice);\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(aum.toString());\n\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x,y };\n          })\n        });\n\n        // Add allocation\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          apiResults.map((d,i) => {\n            return d.protocolsData.filter((protocolAllocation,x) => {\n                return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            })\n            .map((protocolAllocation,z) => {\n              const protocolPaused = this.functionsUtil.BNify(protocolAllocation.rate).eq(0);\n              if (!protocolPaused){\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals));\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                let foundItem = chartData[0].data.filter(item => { return item.x === x });\n                if (foundItem){\n                  foundItem = foundItem[0];\n                  const pos = chartData[0].data.indexOf(foundItem);\n                  if (!foundItem.allocations){\n                    foundItem.allocations = {};\n                  }\n                  foundItem.allocations[p.name] = y;\n                  chartData[0].data[pos] = foundItem;\n                }\n              }\n              return undefined;\n            })[0]\n          }).filter((v) => { return v !== undefined; } )\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 6;\n        daysCount = moment(chartData[0].data[chartData[0].data.length-1].x,\"YYYY/MM/DD HH:mm\").diff(moment(chartData[0].data[0].x,\"YYYY/MM/DD HH:mm\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:v => this.functionsUtil.formatMoney(v,v<1 ? 3 :0),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            tickValues: 'every day',\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:true,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            if (typeof point === 'object' && typeof point.data === 'object'){\n              return (\n                <CustomTooltip\n                  point={point}\n                >\n                  <CustomTooltipRow\n                    label={point.serieId}\n                    color={point.serieColor}\n                    value={point.data.yFormatted}\n                  />\n                  {\n                    point.data.allocations && typeof point.data.allocations === 'object' &&\n                      Object.keys(point.data.allocations).map(protocolName => {\n                        const protocolInfo = globalConfigs.stats.protocols[protocolName];\n                        const protocolColor = 'hsl('+protocolInfo.color.hsl.join(',')+')';\n                        const protocolAllocation = point.data.allocations[protocolName];\n                        const protocolAllocationFormatted = this.functionsUtil.formatMoney(protocolAllocation,protocolAllocation<1 ? 3 : 0);\n                        const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                        return (\n                          <CustomTooltipRow\n                            color={protocolColor}\n                            label={protocolInfo.label}\n                            key={`${point.id}_${protocolName}`}\n                            value={`${protocolAllocationFormatted} (${protocolAllocationPerc})`}\n                          />\n                        );\n                      })\n                  }\n                </CustomTooltip>\n              );\n              /*\n              return (\n                <div\n                    key={point.id}\n                    style={{\n                      background: 'white',\n                      color: 'inherit',\n                      fontSize: 'inherit',\n                      borderRadius: '2px',\n                      boxShadow: 'rgba(0, 0, 0, 0.25) 0px 1px 2px',\n                      padding: '5px 9px'\n                    }}\n                >\n                  <div>\n                    <table style={{width:'100%',borderCollapse:'collapse'}}>\n                      <tbody>\n                        <tr>\n                          <td style={{padding:'3px 5px'}}>\n                            <span style={{display:'block', width: '12px', height: '12px', background: point.serieColor}}></span>\n                          </td>\n                          <td style={{padding:'3px 5px'}}>{point.serieId}</td>\n                          <td style={{padding:'3px 5px'}}><strong>{point.data.yFormatted}</strong></td>\n                        </tr>\n                        {\n                          point.data.allocations && typeof point.data.allocations === 'object' &&\n                            Object.keys(point.data.allocations).map(protocolName => {\n                              const protocolColor = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n                              const protocolAllocation = this.functionsUtil.formatMoney(point.data.allocations[protocolName],0);\n                              const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                              return (\n                                <tr key={`${point.id}_${protocolName}`}>\n                                  <td style={{padding:'3px 5px'}}>\n                                    <span style={{display:'block', width: '12px', height: '12px', background: protocolColor}}></span>\n                                  </td>\n                                  <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{protocolName}</td>\n                                  <td style={{padding:'3px 5px'}}><strong>{protocolAllocation}</strong> ({protocolAllocationPerc})</td>\n                                </tr>\n                              );\n                            })\n                        }\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              );\n              */\n            }\n\n            return null;\n          }\n        };\n      break;\n      case 'ALL':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\");\n\n          let row = {\n            date\n          };\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const foundProtocol = this.props.tokenConfig.protocols.find((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() });\n            if (foundProtocol){\n              const protocolInfo = globalConfigs.stats.protocols[foundProtocol.name];\n              if (!protocolPaused){\n                let allocation = parseFloat(this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals));\n                keys[protocolInfo.label] = 1;\n                row[protocolInfo.label] = allocation;\n                row[`${protocolInfo.label}Color`] = 'hsl('+protocolInfo.color.hsl.join(',')+')';\n                // console.log(protocolInfo.label,this.functionsUtil.BNify(protocolData.allocation).toString(),this.props.tokenConfig.decimals,allocation);\n                maxChartValue = Math.max(maxChartValue,allocation);\n              } else {\n                row[protocolInfo.label] = 0;\n              }\n            }\n          });\n\n\n          tempData[date] = row;\n        });\n\n        const dates = Object.keys(tempData);\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 12;\n        daysCount = moment(dates[dates.length-1],\"YYYY/MM/DD\").diff(moment(dates[0],\"YYYY/MM/DD\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n            orient: 'left',\n            tickSize: 0,\n            tickPadding: 10,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            tickValues:gridYValues,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickSize: 0,\n            tickPadding: 10,\n            legendOffset: 36,\n            orient: 'bottom-left',\n            tickValues: 'every day',\n            legendPosition: 'middle'\n          },\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            tooltip: {\n              container:{\n                padding:'0',\n                boxShadow:'none',\n                background:'transparent',\n              },\n              tableCell:{\n                padding:'0'\n              }\n            },\n            axis: {\n              ticks: {\n                text: {\n                  fontSize:this.props.isMobile ? 12 : 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize:this.props.isMobile ? 12 : 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 60 },\n          tooltip:({ id, value, color }) => {\n            const allocation = this.functionsUtil.formatMoney(value,0);\n            return (\n              <DashboardCard\n                cardProps={{\n                  py:1,\n                  px:2,\n                  width:1,\n                }}\n              >\n                <table\n                  style={{width:'100%',borderCollapse:'collapse'}}\n                >\n                  <tbody>\n                    <tr>\n                      <td style={{padding:'3px 5px'}}>\n                        <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                      </td>\n                      <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                      <td style={{padding:'3px 5px'}}><strong>{allocation} {this.props.selectedToken}</strong></td>\n                    </tr>\n                  </tbody>\n                </table>\n              </DashboardCard>\n            )\n          }\n        }\n      break;\n      case 'ALL_PERC':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\")\n          let row = {\n            date:moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\")\n          };\n          if (tempData[date]){\n            row = tempData[date];\n          }\n\n          const totalAllocation = d.protocolsData.reduce((accumulator,protocolAllocation) => {\n            const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n            return this.functionsUtil.BNify(accumulator).plus(allocation);\n          },0);\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const protocolName = this.props.tokenConfig.protocols.filter((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() })[0].name;\n            if (!protocolPaused){\n              const allocation = this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals);\n              const allocationPerc = parseFloat(allocation.div(totalAllocation).times(100));\n              keys[protocolName] = 1;\n              row[protocolName] = allocationPerc;\n              row[`${protocolName}Color`] = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n            } else if (typeof row[protocolName] !== undefined) {\n              row[protocolName] = 0;\n            } \n          });\n          \n          tempData[date] = row;\n        });\n\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          data: chartData,\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 40, bottom: 40, left: 60 },\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => parseInt(v)+'%'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            orient: 'bottom',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days'\n          },\n          tooltip:({ id, value, color }) => {\n            const allocation = parseInt(value)===100 ? this.functionsUtil.formatMoney(value,0) : this.functionsUtil.formatMoney(value,2);\n            return (\n              <table style={{width:'100%',borderCollapse:'collapse'}}>\n                <tbody>\n                  <tr>\n                    <td style={{padding:'3px 5px'}}>\n                      <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                    </td>\n                    <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                    <td style={{padding:'3px 5px'}}><strong>{allocation}%</strong></td>\n                  </tr>\n                </tbody>\n              </table>\n            )\n          }\n        }\n      break;\n      case 'APR':\n\n        maxChartValue = 0;\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo && additionalProtocol.enabledTokens.includes(this.props.selectedToken)){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        protocols.forEach((p,j) => {\n          const protocolInfo = {...globalConfigs.stats.protocols[p.name]};\n          if (!protocolInfo.enabled){\n            return;\n          }\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n          \n          chartData.push({\n            id:protocolInfo.label,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                // let protocolRate = this.functionsUtil.BNify(protocolAllocation.rate);\n\n                let protocolRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n                  if (protocolAllocation[field]){\n                    return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(protocolAllocation[field]));\n                  }\n                  return this.functionsUtil.BNify(acc);\n                },0) : this.functionsUtil.BNify(protocolAllocation[rateField]);\n\n                const protocolPaused = protocolRate.eq(0);\n                if (!protocolPaused){\n\n                  // Aave V1 wrong rate FIX\n                  if (protocolRate.lt(0) && protocolAllocation.aaveAdditionalAPR && this.functionsUtil.BNify(protocolAllocation.aaveAdditionalAPR).gt(0)){\n                    protocolRate = protocolRate.plus(this.functionsUtil.BNify(protocolAllocation.aaveAdditionalAPR));\n                  }\n\n                  protocolRate = this.functionsUtil.fixTokenDecimals(protocolRate,18);\n\n                  const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                  const y = parseFloat(protocolRate);\n\n                  maxChartValue = Math.max(maxChartValue,y);\n\n                  return { x, y };\n                }\n                return undefined;\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color:'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data:apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(this.functionsUtil.fixTokenDecimals(d.idleRate,18));\n            maxChartValue = Math.max(maxChartValue,y);\n            return { x, y };\n          })\n        });\n\n        /*\n        const csv = {};\n        chartData.forEach( protocolData => {\n          protocolData.data.forEach( d => {\n            if (!csv[d.x]){\n              csv[d.x] = {};\n            }\n            csv[d.x][protocolData.id] = d.y;\n          });\n        });\n\n        const csv_ordered = Object.keys(csv).sort().reduce(\n          (obj, key) => { \n            obj[key] = csv[key]; \n            return obj;\n          }, \n          {}\n        );\n\n        const csv_array = [];\n        const csv_header = [];\n        csv_header.push('Date');\n        chartData.forEach( pData => csv_header.push(pData.id) );\n        csv_array.push(csv_header.join(','));\n\n        Object.keys(csv_ordered).forEach( date => {\n          const csv_row = [date];\n          chartData.forEach( cData => {\n            if (csv_ordered[date][cData.id]){\n              csv_row.push(parseFloat(csv_ordered[date][cData.id]).toFixed(4));\n            } else {\n              csv_row.push('0.0000');\n            }\n          });\n          csv_array.push(csv_row.join(','));\n        });\n\n        console.log('-------DEBUG-------');\n        console.log(csv_ordered);\n        console.log('-------START-------');\n        console.log(csv_array.join('\\n'));\n        console.log('-------END-------');\n        */\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 6;\n        const chartValues = chartData[chartData.length-1].data.sort((a,b) => (moment(a.x,\"YYYY/MM/DD HH:mm\").isBefore(moment(b.x,\"YYYY/MM/DD HH:mm\")) ? -1 : 1));\n        daysCount = moment(chartValues[chartValues.length-1].x,\"YYYY/MM/DD HH:mm\").diff(moment(chartValues[0].x,\"YYYY/MM/DD HH:mm\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        // console.log('APR',chartValues,chartValues[0].x,chartValues[chartValues.length-1].x,daysCount,daysFrequency);\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(2)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            tickPadding: 15,\n            legendOffset: 0,\n            orient: 'bottom',\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickValues: 'every day',\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    // const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'SCORE':\n\n        let prevValue = 0;\n        maxChartValue = 0;\n\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n          if (!protocolInfo.enabled){\n            return;\n          }\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n          chartData.push({\n            id:protocolInfo.label,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(protocolAllocation.defiScore);\n\n                y = isNaN(y) || !y ? prevValue : y;\n                prevValue = y;\n                maxChartValue = Math.max(maxChartValue,y);\n\n                return { x, y };\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            let y = parseFloat(d.idleScore);\n            y = isNaN(y) || !y ? prevValue : y;\n            prevValue = y;\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x, y };\n          })\n        });\n\n        // debugger;\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 6;\n        daysCount = moment(chartData[0].data[chartData[0].data.length-1].x,\"YYYY/MM/DD\").diff(moment(chartData[0].data[0].x,\"YYYY/MM/DD\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(1),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            tickValues: 'every day',\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE_V4':\n\n        itemIndex = 0;\n        maxChartValue = 0;\n        // let prevApy = null;\n        let prevApr = null;\n        let prevData = null;\n        let avgApy = this.functionsUtil.BNify(0);\n        let startBalance = this.functionsUtil.BNify(1);\n        let currentBalance = this.functionsUtil.BNify(1);\n\n        idleChartData = [];\n        const aaveProtocolInfo = protocols.find( p => p.name === 'aavev2' );\n\n        apiResults.forEach((d,i) => {\n\n          let idleRate = this.functionsUtil.BNify(d.idleRate);\n          let y = 0;\n          let apy = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n\n          // Aave V1 wrong rate FIX\n          if (this.props.selectedToken === 'WETH' && moment(x).isSameOrBefore(moment('2021-05-19 12:20','YYYY-MM-DD HH:mm'))){\n            const aaveProtocolData = aaveProtocolInfo ? d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === aaveProtocolInfo.address.toLowerCase()\n            }) : null;\n            if (aaveProtocolData.aaveAdditionalAPR && this.functionsUtil.BNify(aaveProtocolData.aaveAdditionalAPR).gt(0)){\n              idleRate = idleRate.plus(this.functionsUtil.BNify(aaveProtocolData.aaveAdditionalAPR));\n            }\n          }\n\n          const apr = this.functionsUtil.fixTokenDecimals(idleRate,18).div(100);\n          // const apy = this.functionsUtil.apr2apy(apr);\n          \n          avgApy = avgApy.plus(apr.times(100));\n\n          if (prevApr){\n            const days = (d.timestamp-prevData.timestamp)/86400;\n            // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n            const earnings = currentBalance.times(prevApr.times(days).div(365));\n            currentBalance = currentBalance.plus(earnings);\n\n            const earning = currentBalance.div(startBalance).minus(1).times(100);\n            y = parseFloat(earning);\n\n            // apy = earning.times(365).div(totDays).toFixed(2);\n            const daysSinceBeginning = idleChartData.length>0 ? Math.max(1,moment(d.timestamp*1000).diff(moment(idleChartData[0].x,\"YYYY/MM/DD HH:mm\"),'days')) : 1;\n            apy = parseFloat(y*365/daysSinceBeginning).toFixed(2);\n          }\n\n          prevData = d;\n          // prevApy = apy;\n          prevApr = apr;\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          if (apy>0){\n            idleChartData.push({ x, y, apy, blocknumber, itemPos });\n          }\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo && additionalProtocol.enabledTokens.includes(this.props.selectedToken)){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        protocols.forEach( p => {\n\n          const protocolInfo = {...globalConfigs.stats.protocols[p.name]};\n\n          // Add custom protocol info\n          if (protocolInfo.tokensProps && protocolInfo.tokensProps[this.props.selectedToken]){\n            const tokenProps = protocolInfo.tokensProps[this.props.selectedToken];\n            Object.keys(tokenProps).forEach(p => {\n              protocolInfo[p] = tokenProps[p];\n            });\n          }\n\n          if (!protocolInfo.enabled || (protocolInfo.startTimestamp && this.functionsUtil.strToMoment(protocolInfo.startTimestamp).isAfter(Date.now()))){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          // prevApy = null;\n          prevApr = null;\n          prevData = null;\n          let baseProfit = 0;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n          avgApy = this.functionsUtil.BNify(0);\n          startBalance = this.functionsUtil.BNify(1);\n          currentBalance = this.functionsUtil.BNify(1);\n          const apiResults_filtered = apiResults.filter( d => (!protocolInfo.startTimestamp || moment(protocolInfo.startTimestamp).isSameOrBefore(moment(d.timestamp*1000))) );\n\n          apiResults_filtered.forEach( (d,i) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              let protocolRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n                if (protocolData[field]){\n                  return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(protocolData[field]));\n                }\n                return this.functionsUtil.BNify(acc);\n              },0) : this.functionsUtil.BNify(protocolData[rateField]);\n\n              // Aave V1 wrong rate FIX\n              if (protocolRate.lt(0) && protocolData.aaveAdditionalAPR && this.functionsUtil.BNify(protocolData.aaveAdditionalAPR).gt(0)){\n                protocolRate = protocolRate.plus(this.functionsUtil.BNify(protocolData.aaveAdditionalAPR));\n              }\n\n              const protocolPaused = protocolRate.eq(0);\n              if (!protocolPaused){\n\n                let rowData = {};\n\n                let y = 0;\n                let apy = 0;\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                const apr = this.functionsUtil.fixTokenDecimals(protocolRate,18).div(100);\n\n                avgApy = avgApy.plus(apr.times(100));\n                // const apy = this.functionsUtil.apr2apy(apr);\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null) {\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => (d1.blocknumber>=firstProtocolBlock) );\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                      y = baseProfit;\n                      apy = avgApy.toFixed(2);\n                    }\n                  }\n                }\n\n                itemIndex++;\n\n                if (prevData) {\n                  const days = (d.timestamp-prevData.timestamp)/86400;\n                  // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n                  const earnings = currentBalance.times(prevApr.times(days).div(365));\n                  currentBalance = currentBalance.plus(earnings);\n\n                  const earning = currentBalance.div(startBalance).minus(1).times(100);\n                  y = parseFloat(earning)+baseProfit;\n\n                  const daysSinceBeginning = Math.max(1,moment(d.timestamp*1000).diff(moment(idleChartData[0].x,\"YYYY/MM/DD HH:mm\"),'days'));\n                  apy = parseFloat(y*365/daysSinceBeginning).toFixed(2);\n                  // debugger;\n\n                  // apy = avgApy.div(itemIndex+1).toFixed(2);\n                  const itemPos = Math.floor(itemIndex/totalItems*100);\n                  rowData = {\n                    x,\n                    y,\n                    apy,\n                    itemPos\n                  };\n\n                  itemIndex++;\n                  chartRow.data.push(rowData);\n                }\n\n                prevData = d;\n                prevApr = apr;\n\n                if (firstIdleBlock === null){\n                  firstIdleBlock = parseInt(d.blocknumber);\n                }\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                // const blocknumber = d.blocknumber;\n\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          data: idleChartData,\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')'\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 12;\n        daysCount = moment(idleChartData[idleChartData.length-1].x,\"YYYY/MM/DD HH:mm\").diff(moment(idleChartData[0].x,\"YYYY/MM/DD HH:mm\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            tickValues:`every day`,\n            legendPosition: 'middle',\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              itemWidth: this.props.isMobile ? 70 : 160,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE':\n        // let prevTokenPrice = null;\n        maxChartValue = 0;\n        let firstTokenPrice = null;\n\n        idleChartData = apiResults.map((d,i) => {\n\n          let y = 0;\n          let apy = 0;\n          let days = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n          const tokenPrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n\n          if (!firstTokenPrice){\n            firstTokenPrice = tokenPrice;\n          } else {\n            y = parseFloat(tokenPrice.div(firstTokenPrice).minus(1).times(100));\n\n            days = (d.timestamp-apiResults[0].timestamp)/86400;\n            const earning = tokenPrice.div(firstTokenPrice).minus(1).times(100);\n            apy = earning.times(365).div(days).toFixed(2);\n\n            // console.log(firstTokenPrice.toString(),tokenPrice.toString(),earning.toString(),days,y,apy);\n          }\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          return { x, y, apy, blocknumber, itemPos };\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo && additionalProtocol.enabledTokens.includes(this.props.selectedToken)){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        await this.functionsUtil.asyncForEach(protocols,async (p) => {\n\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n\n          if (!protocolInfo.enabled){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          let baseProfit = 0;\n          firstTokenPrice = null;\n          let lastRowData = null;\n          let lastTokenPrice = null;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n\n          await this.functionsUtil.asyncForEach(apiResults,async (d) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData && protocolData[rateField]){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              const protocolPaused = this.functionsUtil.BNify(protocolData[rateField]).eq(0);\n              if (!protocolPaused){\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null){\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => {\n                      return d1.blocknumber>=firstProtocolBlock;\n                    });\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                    }\n                  }\n                }\n\n                let rowData = {};\n                let tokenExchangeRate = protocolData.price;\n                let tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n\n                // Take data from\n                if (protocolInfo && protocolInfo.data && protocolInfo.data[p.address.toLowerCase()] && protocolInfo.data[p.address.toLowerCase()][d.blocknumber]){\n                  tokenExchangeRate = this.functionsUtil.BNify(globalConfigs.stats.protocols[p.name].data[p.address.toLowerCase()][d.blocknumber]);\n                  tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                }/* else if (p.name === 'aave'){\n                  // Token holders (aDAI = 0xc025c03e10f656d3ee76685d53d236824d8ef3da , aUSDC = 0xd2c734fbd8f5d1c809185e014016dd4097e94711)\n                  let aaveTokenBalance = await this.functionsUtil.genericContractCall(p.token,'balanceOf',['0xd2c734fbd8f5d1c809185e014016dd4097e94711'],{},d.blocknumber);\n                  if (aaveTokenBalance){\n                    if (!Object.values(aave_data).length){\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(1,p.decimals);\n                      aave_data[d.blocknumber] = aaveTokenBalance.toString();\n                    } else {\n                      const firstBalance = Object.values(aave_data)[0];\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(this.functionsUtil.BNify(aaveTokenBalance).div(this.functionsUtil.BNify(firstBalance)).toFixed(p.decimals),p.decimals);\n                      aave_data[d.blocknumber] = tokenExchangeRate.toString();\n                    }\n                  }\n                }\n                */\n\n                let y = baseProfit;\n                let apy = 0;\n\n                if (!firstTokenPrice){\n                  firstTokenPrice = tokenPriceFixed;\n                } else {\n                  if (tokenPriceFixed.lt(lastTokenPrice)){\n                    firstTokenPrice = tokenPriceFixed;\n                    const lastYDiff = chartRow.data[chartRow.data.length-1].y-chartRow.data[chartRow.data.length-2].y;\n                    y = lastRowData.y+lastYDiff;\n                    baseProfit = y;\n                  } else {\n                    y += parseFloat(tokenPriceFixed.div(firstTokenPrice).minus(1).times(100));\n                  }\n\n                  const days = (d.timestamp-apiResults[0].timestamp)/86400;\n                  const earning = tokenPriceFixed.div(firstTokenPrice).minus(1).times(100);\n                  apy = earning.times(365).div(days).toFixed(2);\n                }\n\n                y = Math.max(0,y);\n                maxChartValue = Math.max(maxChartValue,y);\n\n                const itemPos = Math.floor(itemIndex/totalItems*100);\n\n                rowData = {\n                  x,\n                  y,\n                  apy,\n                  itemPos\n                };\n\n                itemIndex++;\n                lastRowData = rowData;\n                chartRow.data.push(rowData);\n                lastTokenPrice = tokenPriceFixed;\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: idleChartData\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              itemWidth: this.props.isMobile ? 70 : 100,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      chartType,\n      chartProps,\n      chartData\n    });\n  }\n\n  render() {\n    return(\n      <GenericChart\n        showLoader={true}\n        {...this.state.chartProps}\n        height={this.props.height}\n        type={this.state.chartType}\n        data={this.state.chartData}\n        width={this.state.chartWidth}\n        isMobile={this.props.isMobile}\n        parentId={this.props.parentId}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default StatsChart;","import { Flex, Text } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\n\nclass Rebalance extends Component {\n\n  state = {\n    loading:true,\n    processing:{\n      rebalance:{\n        txHash:null,\n        loading:false\n      },\n    },\n    shouldRebalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n  componentUnmounted = false;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillUnmount(){\n    this.componentUnmounted = true;\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.checkRebalance();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged || accountChanged){\n      this.checkRebalance();\n    }\n  }\n\n  async setStateSafe(newState,callback=null) {\n    if (!this.componentUnmounted){\n      return this.setState(newState,callback);\n    }\n    return null;\n  }\n\n  checkRebalance = async () => {\n    this.setStateSafe({\n      loading:true,\n    });\n\n    const shouldRebalance = await this.functionsUtil.checkRebalance(this.props.tokenConfig);\n\n    this.setStateSafe({\n      loading:false,\n      shouldRebalance\n    });\n  }\n\n  rebalance = async (e) => {\n    e.preventDefault();\n\n    const callback = (tx,error) => {\n\n      if (tx){\n        // Send Google Analytics event\n        const eventData = {\n          eventLabel: tx.status,\n          eventCategory: 'Rebalance',\n          eventAction: this.props.selectedToken,\n        };\n\n        let txDenied = false;\n\n        if (error){\n          eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n        }\n\n        // Send Google Analytics event\n        if (error || eventData.status !== 'error'){\n          this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n        }\n\n        if (tx.status === 'success'){\n          // Toast message\n          window.toastProvider.addMessage(`Rebalance completed`, {\n            secondaryMessage: `Now the pool is balanced!`,\n            colorTheme: 'light',\n            actionHref: \"\",\n            actionText: \"\",\n            variant: \"success\",\n          });\n        } else if (!txDenied){\n          window.toastProvider.addMessage(`Rebalance error`, {\n            secondaryMessage: `The rebalance has failed, try again...`,\n            colorTheme: 'light',\n            actionHref: \"\",\n            actionText: \"\",\n            variant: \"failure\",\n          });\n        }\n      }\n\n      this.setStateSafe((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          rebalance:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n\n      this.checkRebalance();\n    }\n\n    const callback_receipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setStateSafe((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            rebalance:{\n              ...prevState.processing.rebalance,\n              txHash\n            }\n          }\n        })\n      );\n    };\n\n    await this.setStateSafe({\n      processing:{\n        rebalance:{\n          txHash:null,\n          loading:true\n        }\n      }\n    });\n\n    this.props.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'rebalance', [], null , callback, callback_receipt);\n  }\n\n  render() {\n    return (\n      <Flex\n        px={3}\n        width={1}\n        minHeight={'100px'}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n      {\n        this.state.loading ? (\n          <FlexLoader\n            flexProps={{\n              flexDirection:'row'\n            }}\n            loaderProps={{\n              size:'30px'\n            }}\n            textProps={{\n              ml:2\n            }}\n            text={'Checking rebalance...'}\n          />\n        ) : (\n          this.state.processing.rebalance.loading ? (\n            <TxProgressBar {...this.props} waitText={`Rebalance estimated in`} endMessage={`Finalizing rebalance request...`} hash={this.state.processing.rebalance.txHash} />\n          ) : (\n            <Flex\n              width={1}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                mt={0}\n                mb={3}\n                textAlign={'center'}\n              >\n                {this.state.shouldRebalance ? 'Rebalance the entire pool. All users will bless you.' : 'The pool is already balanced.'}\n              </Text>\n              <RoundButton\n                buttonProps={{\n                  width:'auto',\n                  disabled:!this.state.shouldRebalance\n                }}\n                handleClick={e => this.rebalance(e)}\n              >\n                Rebalance\n              </RoundButton>\n            </Flex>\n          )\n        )\n      }\n      </Flex>\n    )\n  }\n}\n\nexport default Rebalance;","import React from \"react\";\nimport {\n  Modal,\n  Button,\n  Flex,\n  Field,\n  Select\n} from \"rimble-ui\";\nimport moment from 'moment';\nimport './DateRangeModal.css';\nimport ModalCard from './ModalCard';\nimport 'react-date-range/dist/styles.css';\nimport { DateRange } from 'react-date-range';\nimport 'react-date-range/dist/theme/default.css';\n\nclass DateRangeModal extends React.Component {\n\n  state = {\n    quickSelection:'',\n    ranges:{\n      startDate: this.props.startDate ? this.props.startDate : new Date(),\n      endDate: this.props.endDate ? this.props.endDate : new Date(),\n      key: 'selection'\n    },\n    options:Object.keys(this.props.quickSelections).map( value => ({ value,label:this.props.quickSelections[value].label }) )\n  }\n\n  handleSelect(ranges){\n    this.setState({\n      quickSelection:'',\n      ranges:ranges.selection\n    });\n  }\n\n  handleQuickSelect(e){\n    let startDate = null;\n    let endDate = moment(new Date());\n    const quickSelection = e.target.value;\n\n    if (quickSelection && this.props.quickSelections[quickSelection]){\n      const quickSelectionParams = this.props.quickSelections[quickSelection];\n      startDate = endDate.clone().subtract(quickSelectionParams.value,quickSelectionParams.type);\n    } else {\n      startDate = null;\n      endDate = null;\n    }\n\n    if (startDate && endDate){\n      startDate = startDate._d;\n      endDate = endDate._d;\n\n      const ranges = {\n        startDate,\n        endDate,\n        key:'selection'\n      };\n\n      this.setState({\n        ranges,\n        quickSelection\n      }, () => {\n        this.closeModal();\n      });\n    }\n  }\n\n  componentDidUpdate = (prevProps) => {\n    if (prevProps.startDate !== this.props.startDate || prevProps.endDate !== this.props.endDate){\n      this.setState({\n        ranges:{\n          startDate: this.props.startDate ? this.props.startDate : new Date(),\n          endDate: this.props.endDate ? this.props.endDate : new Date(),\n          key: 'selection'\n        }\n      });\n    }\n  }\n\n  closeModal(){\n    const newState = this.props.handleSelect(this.state.ranges,this.state.quickSelection);\n    const ranges = {\n      startDate:newState.startTimestampObj ? newState.startTimestampObj._d : new Date(),\n      endDate:newState.endTimestampObj ? newState.endTimestampObj._d : new Date(),\n      key: 'selection'\n    };\n    this.setState({\n      ranges\n    });\n    this.props.closeModal();\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        <ModalCard closeFunc={this.props.closeModal}>\n          <ModalCard.Header title={'Select Date Range'}>\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex width={1} flexDirection={'column'} alignItems={'center'}>\n              <Field label=\"Quick Date Selection\" style={{display:'flex',width:'100%',alignItems:'stretch',justifyContent:'center'}}>\n                <Select\n                  style={{\n                    fontSize:'14px',\n                    height:'2.5em',\n                    boxShadow:'none',\n                    color:this.props.theme.colors.counter,\n                    backgroundColor:this.props.theme.colors.cardBg\n                  }}\n                  width={'100%'}\n                  required={true}\n                  options={this.state.options}\n                  value={this.state.quickSelection}\n                  onChange={this.handleQuickSelect.bind(this)}\n                />\n              </Field>\n              <DateRange\n                ranges={[this.state.ranges]}\n                minDate={this.props.minDate}\n                maxDate={this.props.maxDate}\n                className={this.props.themeMode}\n                onChange={this.handleSelect.bind(this)}\n              />\n            </Flex>\n          </ModalCard.Body>\n          <ModalCard.Footer>\n            <Flex px={[2,0]} flexDirection={['column', 'row']} width={1} justifyContent={'center'}>\n              <Button\n                my={2}\n                mx={[0, 2]}\n                borderRadius={4}\n                mainColor={'blue'}\n                onClick={ e => this.closeModal(e) }\n                size={this.props.isMobile ? 'small' : 'medium'}\n              >\n              APPLY\n              </Button>\n            </Flex>\n          </ModalCard.Footer>\n        </ModalCard>\n      </Modal>\n    );\n  }\n\n}\n\nexport default DateRangeModal;","import moment from 'moment';\nimport Title from '../Title/Title';\nimport StatsChart from './StatsChart';\nimport React, { Component } from 'react';\nimport Rebalance from '../Rebalance/Rebalance';\nimport StatsCard from '../StatsCard/StatsCard';\nimport AssetsList from '../AssetsList/AssetsList';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport GenericSelector from '../GenericSelector/GenericSelector';\nimport RoundIconButton from '../RoundIconButton/RoundIconButton';\nimport VariationNumber from '../VariationNumber/VariationNumber';\nimport AllocationChart from '../AllocationChart/AllocationChart';\nimport DateRangeModal from '../utilities/components/DateRangeModal';\nimport { Flex, Text, Heading, Box, Icon, Button, Link } from 'rimble-ui';\nimport ExecuteTransaction from '../ExecuteTransaction/ExecuteTransaction';\nimport AssetsUnderManagement from '../AssetsUnderManagement/AssetsUnderManagement';\n\nclass Stats extends Component {\n  state = {\n    aum:null,\n    apr:null,\n    days:'-',\n    delta:null,\n    earning:null,\n    minDate:null,\n    maxDate:null,\n    carouselMax:1,\n    rebalances:'-',\n    buttonGroups:[],\n    apiResults:null,\n    carouselIndex:0,\n    idleVersion:null,\n    statsVersions:{},\n    minStartTime:null,\n    endTimestamp:null,\n    showAdvanced:true,\n    govTokensPool:null,\n    unlentBalance:null,\n    quickSelection:null,\n    startTimestamp:null,\n    endTimestampObj:null,\n    shouldRebalance:null,\n    carouselOffsetLeft:0,\n    startTimestampObj:null,\n    showRefreshIdleSpeed:false,\n    apiResults_unfiltered:null,\n    dateRangeModalOpened:false\n  };\n\n  quickSelections = {\n    day:{\n      value:1,\n      type:'day',\n      label:'Last day',\n    },\n    week:{\n      value:1,\n      type:'week',\n      label:'Last week',\n    },\n    weeks:{\n      value:2,\n      type:'week',\n      label:'Last 2 weeks',\n    },\n    month:{\n      value:1,\n      type:'month',\n      label:'Last month',\n    },\n    ytd:{\n      type:'day',\n      label:'Year to date',\n      value:moment().diff(moment('01/01/YYYY','DD/MM/YYYY'),'days'),\n    },\n  };\n\n  // Utils\n  functionsUtil = null;\n  componentUnmounted = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount() {\n    this.loadUtils();\n    await this.loadParams();\n  }\n\n  componentWillUnmount(){\n    this.componentUnmounted = true;\n  }\n\n  async setStateSafe(newState,callback=null) {\n    if (!this.componentUnmounted){\n      return this.setState(newState,callback);\n    }\n    return null;\n  }\n\n  showRefreshIdleSpeed(){\n    this.setState({\n      showRefreshIdleSpeed:true\n    });\n  }\n\n  getLatestAvailableVersion(){\n    const statsVersions = globalConfigs.stats.versions;\n    let latestVersion = null;\n    Object.keys(statsVersions).forEach( version => {\n      const versionInfo = statsVersions[version];\n      if (versionInfo.enabledStrategies.includes(this.props.selectedStrategy)){\n        latestVersion = version;\n      }\n    });\n\n    return latestVersion;\n  }\n\n  getVersionInfo(version){\n    if (!version){\n      version = this.state.idleVersion;\n    }\n\n    if (!globalConfigs.stats.versions[version]){\n      return null;\n    }\n\n    const versionInfo = Object.assign({},globalConfigs.stats.versions[version]);\n\n    if (versionInfo.strategiesParams && versionInfo.strategiesParams[this.props.selectedStrategy]){\n      const versionInfoExtra = versionInfo.strategiesParams[this.props.selectedStrategy];\n      Object.keys(versionInfoExtra).forEach( param => {\n        versionInfo[param] = versionInfoExtra[param];\n      });\n    }\n\n    return versionInfo;\n  }\n\n  async loadParams() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    const newState = {};\n    const { match: { params } } = this.props;\n\n    const currentNetworkAvailableTokens = Object.keys(this.props.availableTokens);\n\n    if (!!params.customToken && currentNetworkAvailableTokens.indexOf(params.customToken.toUpperCase()) !== -1 ){\n      newState.selectedToken = params.customToken.toUpperCase();\n    } else {\n      newState.selectedToken = this.props.selectedToken.toUpperCase();\n    }\n\n    newState.tokenConfig = this.props.availableTokens[newState.selectedToken];\n    newState.minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp,'YYYY-MM-DD');\n    newState.maxEndDate = moment();\n\n    newState.endTimestampObj = moment(moment().format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    newState.latestVersion = this.getLatestAvailableVersion();\n    newState.idleVersion = this.state.idleVersion === null ? newState.latestVersion : this.state.idleVersion;\n\n    const versionInfo = this.getVersionInfo(newState.idleVersion);\n\n    // console.log('loadParams',newState.latestVersion,newState.idleVersion,versionInfo);\n\n    if (newState.idleVersion && versionInfo.endTimestamp){\n      const newEndTimestampObj = moment(moment(versionInfo.endTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.endTimestampObj.isAfter(newEndTimestampObj)){\n        newState.endTimestampObj = newEndTimestampObj;\n        newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n      }\n\n      if (!newState.maxEndDate || newState.maxEndDate.isAfter(newEndTimestampObj)){\n        newState.maxEndDate = newEndTimestampObj;\n      }\n    }\n\n    newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n\n    // Set start date\n    newState.startTimestampObj = newState.endTimestampObj.clone().subtract(1,'month');\n    newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n\n    if (newState.idleVersion && versionInfo.startTimestamp){\n      const newStartTimestampObj = moment(moment(versionInfo.startTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.startTimestampObj.isBefore(newStartTimestampObj)){\n        newState.startTimestampObj = newStartTimestampObj;\n        newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n      }\n\n      if (newState.minStartTime.isBefore(newStartTimestampObj)){\n        newState.minStartTime = newStartTimestampObj;\n      }\n    }\n\n    newState.minDate = newState.minStartTime._d;\n    newState.maxDate = newState.maxEndDate._d;\n\n    if (newState !== this.state){\n      await this.setStateSafe(newState);\n    }\n  }\n\n  setDateRange = (ranges,quickSelection=null) => {\n\n    const minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp);\n\n    let startTimestampObj = moment(ranges.startDate).isSameOrAfter(minStartTime) ? moment(ranges.startDate) : minStartTime;\n    let endTimestampObj = moment(ranges.endDate);\n\n    if (startTimestampObj.isSame(endTimestampObj)){\n      endTimestampObj.add(1,'day');\n    }\n\n    endTimestampObj = moment(endTimestampObj.format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    if (startTimestampObj.isBefore(this.state.minStartTime)){\n      startTimestampObj = this.state.minStartTime;\n    }\n\n    if (endTimestampObj.isAfter(this.state.maxEndDate)){\n      endTimestampObj = this.state.maxEndDate;\n    }\n\n    const startTimestamp = parseInt(startTimestampObj._d.getTime()/1000);\n    const endTimestamp = parseInt(endTimestampObj._d.getTime()/1000);\n\n    const newState = {\n      minStartTime,\n      endTimestamp,\n      quickSelection,\n      startTimestamp,\n      endTimestampObj,\n      startTimestampObj\n    };\n\n    this.setStateSafe(newState);\n\n    return newState;\n  }\n\n  toggleAdvancedCharts = (e) => {\n    e.preventDefault();\n    this.setStateSafe({\n      showAdvanced:!this.state.showAdvanced\n    });\n  }\n\n  setDateRangeModal = (dateRangeModalOpened) => {\n    if (dateRangeModalOpened !== this.state.dateRangeModalOpened){\n      this.setStateSafe({\n        dateRangeModalOpened\n      });\n    }\n  }\n\n  async componentDidMount() {\n\n    if (!this.props.web3){\n      this.props.initWeb3();\n      return false;\n    }\n\n    /*\n    const style = document.createElement('style');\n    style.id = 'crisp-custom-style';\n    style.type = 'text/css';\n    style.innerHTML = `\n    .crisp-client{\n      display:none !important;\n    }`;\n    document.body.appendChild(style);\n    */\n\n    this.loadUtils();\n    await this.loadParams();\n    this.loadApiData();\n    this.loadCarousel();\n  }\n\n  loadCarousel(){\n    const carouselMax = this.props.isMobile ? 3 : 2;\n    this.setStateSafe({\n      carouselMax\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const strategyChanged = prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    const dateChanged = prevState.startTimestamp !== this.state.startTimestamp || prevState.endTimestamp !== this.state.endTimestamp;\n    const versionChanged = prevState.idleVersion !== this.state.idleVersion;\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n\n    if (mobileChanged){\n      this.loadCarousel();\n    }\n\n    if (contractsInitialized || tokenChanged || strategyChanged || versionChanged){\n      // console.log('componentDidUpdate',this.props.selectedStrategy,this.props.selectedToken);\n      await this.componentDidMount();\n    } else if (dateChanged){\n      this.loadApiData();\n    }\n  }\n\n  filterTokenData = (apiResults) => {\n    return apiResults.filter((r,i) => {\n      return (!this.state.startTimestamp || r.timestamp >= this.state.startTimestamp) && (!this.state.endTimestamp || r.timestamp <= this.state.endTimestamp);\n    });\n  }\n\n  setIdleVersion = idleVersion => {\n    this.setStateSafe({\n      idleVersion\n    });\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    // Get COMP APR\n    // const compAPR = await this.functionsUtil.getCompAPR(this.props.tokenConfig);\n    // console.log('compAPR',compAPR.toString());\n\n    const startTimestamp = this.state.minDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.minDate).format('DD/MM/YYYY 00:00:00'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n    const endTimestamp = this.state.maxDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.maxDate).format('DD/MM/YYYY 23:59:59'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n\n    const isRisk = ['v3','v4'].includes(this.state.idleVersion) && this.props.selectedStrategy === 'risk';\n    let apiResults_unfiltered = await this.functionsUtil.getTokenApiData(this.props.tokenConfig.address,isRisk,startTimestamp,endTimestamp,true,7200);\n\n    const apiResults = this.filterTokenData(apiResults_unfiltered);\n\n    // console.log('loadApiData',startTimestamp,endTimestamp,new Date(startTimestamp*1000),new Date(endTimestamp*1000),apiResults,apiResults_unfiltered);\n\n    if (!apiResults || !apiResults_unfiltered || !apiResults.length || !apiResults_unfiltered.length){\n      return false;\n    }\n\n    const firstResult = apiResults[0];\n    const lastResult = Object.values(apiResults).pop();\n\n    window.moment = moment;\n\n    let days = (lastResult.timestamp-firstResult.timestamp)/86400;\n    if (days === 0){\n      days = 1;\n    }\n\n    let apr = null;\n    let delta = 'N/A';\n\n    const idleTokens = this.functionsUtil.fixTokenDecimals(lastResult.idleSupply,18);\n    const firstIdlePrice = this.functionsUtil.fixTokenDecimals(firstResult.idlePrice,this.props.tokenConfig.decimals);\n    const lastIdlePrice = this.functionsUtil.fixTokenDecimals(lastResult.idlePrice,this.props.tokenConfig.decimals);\n\n    // Calculate AUM\n    let aum = idleTokens.times(lastIdlePrice);\n\n    // Convert Token balance\n    aum = await this.functionsUtil.convertTokenBalance(aum,this.props.selectedToken,this.props.tokenConfig,isRisk);\n\n    const compoundInfo = this.props.tokenConfig.protocols.filter((p) => { return p.name === 'compound' })[0];\n    const firstCompoundData = compoundInfo ? firstResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n    const lastCompoundData = compoundInfo ? lastResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n\n    if (this.state.idleVersion === 'v4') {\n\n      apr = apiResults.reduce( (sum,r) => {\n        const idleRate = this.functionsUtil.fixTokenDecimals(r.idleRate,18);\n        return this.functionsUtil.BNify(sum).plus(idleRate);\n      },0);\n\n      // Calculate average\n      apr = apr.div(apiResults.length);\n\n      if (compoundInfo){\n        const compoundWithCOMPInfo = globalConfigs.stats.protocols.compoundWithCOMP;\n        const rateField = compoundWithCOMPInfo.rateField ? compoundWithCOMPInfo.rateField : 'rate';\n\n        let compoundAvgApr = apiResults.reduce( (sum,r) => {\n\n          const compoundData = r.protocolsData.find((pData,x) => {\n            return pData.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase()\n          });\n\n          let compoundRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n            if (compoundData && compoundData[field]){\n              return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(compoundData[field]));\n            }\n            return this.functionsUtil.BNify(acc);\n          },0) : this.functionsUtil.BNify(compoundData[rateField]);\n\n          compoundRate = this.functionsUtil.fixTokenDecimals(compoundRate,18);\n\n          return this.functionsUtil.BNify(sum).plus(compoundRate);\n        },0);\n\n        // Calculate average\n        compoundAvgApr = compoundAvgApr.div(apiResults.length);\n\n        // compoundAvgApr = this.functionsUtil.apr2apy(compoundAvgApr.div(100)).times(100);\n        // apr = this.functionsUtil.apr2apy(apr.div(100)).times(100);\n\n        delta = apr.minus(compoundAvgApr);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n\n      apr = apr.toFixed(2);\n\n    } else {\n      const earning = lastIdlePrice.div(firstIdlePrice).minus(1).times(100);\n      apr = earning.times(365).div(days).toFixed(2);\n\n      if (firstCompoundData && lastCompoundData){\n        const firstCompoundPrice = this.functionsUtil.fixTokenDecimals(firstCompoundData.price,this.props.tokenConfig.decimals);\n        const lastCompoundPrice = this.functionsUtil.fixTokenDecimals(lastCompoundData.price,this.props.tokenConfig.decimals);\n        const compoundApr = lastCompoundPrice.div(firstCompoundPrice).minus(1).times(100);\n        delta = earning.minus(compoundApr).times(365).div(days);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n    }\n\n    // Count rebalances\n    let rebalances = 0;\n    apiResults.forEach((row,index) => {\n      if (index){\n        const prevRow = apiResults[index-1];\n\n        const totalAllocation = row.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        const prevTotalAllocation = prevRow.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        let hasRebalanced = false;\n        row.protocolsData.forEach( p => {\n          if (hasRebalanced){\n            return;\n          }\n          const prevP = prevRow.protocolsData.find( prevP => (prevP.protocolAddr.toLowerCase() === p.protocolAddr.toLowerCase()) );\n          const allocation = this.functionsUtil.fixTokenDecimals(p.allocation,this.props.tokenConfig.decimals);\n          const prevAllocation = prevP ? this.functionsUtil.fixTokenDecimals(prevP.allocation,this.props.tokenConfig.decimals) : this.functionsUtil.BNify(0);\n          const allocationPerc = parseInt(parseFloat(allocation.div(totalAllocation).times(100)));\n          const prevAllocationPerc = parseInt(parseFloat(prevAllocation.div(prevTotalAllocation).times(100)));\n          if (allocationPerc!==prevAllocationPerc){\n            rebalances++;\n            hasRebalanced = true;\n          }\n        });\n      }\n    });\n\n    // Add gov tokens balance to AUM\n    const availableTokens = {};\n    availableTokens[this.props.selectedToken] = this.props.tokenConfig;\n    const govTokensPool = await this.functionsUtil.getGovTokenPool(null,availableTokens,'DAI');\n    if (govTokensPool){\n      aum = aum.plus(govTokensPool);\n    }\n\n    // Format AUM\n    /*\n    aum = this.functionsUtil.formatMoney(parseFloat(aum));\n\n    const conversionRateField = this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'conversionRateField']);\n    if (conversionRateField){\n      aum += ' $';\n    }\n    */\n\n    let unlentBalance = await this.functionsUtil.getUnlentBalance(this.props.tokenConfig);\n    if (unlentBalance){\n      unlentBalance = this.functionsUtil.formatMoney(parseFloat(unlentBalance));\n    }\n\n    this.setStateSafe({\n      aum,\n      apr,\n      days,\n      delta,\n      apiResults,\n      rebalances,\n      govTokensPool,\n      unlentBalance,\n      apiResults_unfiltered\n    });\n  }\n\n  selectToken = async (strategy,token) => {\n    await this.props.setStrategyToken(strategy,token);\n    this.props.changeToken(token);\n  }\n\n  handleCarousel = action => {\n    let carouselIndex = this.state.carouselIndex;\n    if (action==='next' && carouselIndex<this.state.carouselMax){\n      carouselIndex++;\n    } else if (action==='back' && carouselIndex>0){\n      carouselIndex--;\n    }\n\n    const $element = window.jQuery(`#carousel-cursor > div:eq(${carouselIndex})`);\n    const carouselOffsetLeft = -parseFloat($element.position().left)+'px';\n\n    this.setStateSafe({\n      carouselIndex,\n      carouselOffsetLeft\n    });\n  }\n\n  render() {\n\n    const valueProps = {\n      lineHeight:1,\n      fontSize:[4,5],\n      fontWeight:[3,4],\n      color:'statValue'\n    };\n\n    const unitProps = {\n      ml:2,\n      lineHeight:1,\n      fontWeight:[2,3],\n      color:'statValue',\n      fontSize:[3,'23px'],\n    };\n\n    const networkId = this.functionsUtil.getRequiredNetworkId();\n    const idleTokenAvailableNetworks = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','availableNetworks']);\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']) && idleTokenAvailableNetworks.includes(networkId);\n    const refreshIdleSpeedConfig = this.functionsUtil.getGlobalConfig(['contract','methods','refreshIdleSpeed']);\n    const refreshIdleSpeedEnabled = refreshIdleSpeedConfig.enabled && refreshIdleSpeedConfig.availableNetworks.includes(networkId);\n\n    const apyLong = this.functionsUtil.getGlobalConfig(['messages','apyLong']);\n\n    if (!this.props.availableStrategies){\n      return (\n        <FlexLoader\n          textProps={{\n            textSize:4,\n            fontWeight:2\n          }}\n          loaderProps={{\n            mb:3,\n            size:'40px'\n          }}\n          flexProps={{\n            minHeight:'50vh',\n            flexDirection:'column'\n          }}\n          text={'Loading assets...'}\n        />\n      );\n    }\n\n    const statsTokens = this.functionsUtil.getGlobalConfig(['stats','tokens']);\n\n    if (!this.props.selectedToken){\n      const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n      const enabledTokens = [];\n      const statsProtocols = this.functionsUtil.getGlobalConfig(['stats','protocols']);\n\n      Object.keys(statsTokens).forEach(token => {\n        const tokenInfo = statsTokens[token];\n        if (tokenInfo.enabled){\n          enabledTokens.push(token);\n        }\n      });\n      return (\n        <Flex\n          mb={3}\n          width={1}\n          flexDirection={'column'}\n        >\n          <AssetsUnderManagement\n            {...this.props}\n            loaderAlign={'flex-end'}\n          />\n          {\n            Object.keys(strategies).map(strategy => {\n              const strategyInfo = strategies[strategy];\n              const availableTokens = this.props.availableStrategies[strategy];\n\n              if (!availableTokens || !Object.keys(availableTokens).length){\n                return false;\n              }\n              \n              // Get available protocols name\n              const availableProtocolsKeys = [];\n              Object.keys(availableTokens).forEach( token => {\n                availableTokens[token].protocols.forEach( protocolInfo => {\n                  if (availableProtocolsKeys.indexOf(protocolInfo.name)<0){\n                    availableProtocolsKeys.push(protocolInfo.name);\n                  }\n                });\n              });\n\n              const availableProtocols = availableProtocolsKeys.map( protocolName => {\n                return statsProtocols[protocolName];\n              },{});\n\n              return (\n                <Box\n                  mb={2}\n                  width={1}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                  key={`strategy-container-${strategy}`}\n                >\n                  <Title\n                    mt={3}\n                    mb={[3,4]}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'baseline'}\n                      justifyContent={'center'}\n                    >\n                      {strategyInfo.title}\n                      {\n                        strategyInfo.titlePostfix &&\n                          <Text\n                            ml={2}\n                            fontWeight={3}\n                            fontSize={[2,4]}\n                            color={'dark-gray'}\n                          >\n                            {strategyInfo.titlePostfix}\n                          </Text>\n                      }\n                    </Flex>\n                  </Title>\n                  <AssetsList\n                    enabledTokens={enabledTokens}\n                    handleClick={(props) => this.selectToken(strategy,props.token)}\n                    cols={[\n                      {\n                        title:'CURRENCY',\n                        props:{\n                          width:[0.26,0.15]\n                        },\n                        fields:[\n                          {\n                            name:'icon',\n                            props:{\n                              mr:2,\n                              height:['1.4em','2.3em']\n                            }\n                          },\n                          {\n                            name:'tokenName'\n                          }\n                        ]\n                      },\n                      {\n                        title:'POOL',\n                        props:{\n                          width:[0.22,0.15],\n                        },\n                        fields:[\n                          {\n                            name:'allocationChart',\n                            mobile:false,\n                            parentProps:{\n                              width:0.3\n                            },\n                            style:{\n                              overflow:'visible'\n                            },\n                            showLoader:false,\n                          },\n                          {\n                            name:'pool',\n                            props:{\n                              ml:1\n                            },\n                            parentProps:{\n                              width:[1,0.7]\n                            }\n                          }\n                        ]\n                      },\n                      {\n                        title:'APY',\n                        desc:apyLong,\n                        props:{\n                          width: [0.29,0.15],\n                        },\n                        parentProps:{\n                          flexDirection:'column',\n                          alignItems:'flex-start',\n                        },\n                        fields:[\n                          {\n                            name:'apy',\n                            showTooltip:true\n                          },\n                          {\n                            name:'idleDistribution',\n                            showLoader:false,\n                            props:{\n                              decimals:this.props.isMobile ? 1 : 2,\n                              fontSize:this.props.isMobile ? '9px' : 0\n                            }\n                          },\n                        ]\n                      },\n                      {\n                        title:'FARMING',\n                        desc:this.functionsUtil.getGlobalConfig(['messages','yieldFarming']),\n                        mobile:false,\n                        props:{\n                          width:[0.27,0.14],\n                        },\n                        fields:[\n                          {\n                            name:'govTokens'\n                          }\n                        ]\n                      },\n                      {\n                        title:'APR LAST WEEK',\n                        mobile:false,\n                        props:{\n                          width: 0.25,\n                        },\n                        parentProps:{\n                          width:1,\n                          pr:[2,4]\n                        },\n                        fields:[\n                          {\n                            name:'aprChart',\n                            style:{\n                              overflow:'visible',\n                            },\n                          }\n                        ]\n                      },\n                      {\n                        title:'',\n                        props:{\n                          width:[0.23,0.16],\n                        },\n                        parentProps:{\n                          width:1\n                        },\n                        fields:[\n                          {\n                            name:'button',\n                            label:this.props.isMobile ? 'View' : 'View stats',\n                            props:{\n                              width:1,\n                              fontSize:3,\n                              fontWeight:3,\n                              height:'45px',\n                              borderRadius:4,\n                              boxShadow:null,\n                              mainColor:'redeem',\n                              size: this.props.isMobile ? 'small' : 'medium',\n                              handleClick:(props) => this.selectToken(strategy,props.token)\n                            }\n                          }\n                        ]\n                      }\n                    ]}\n                    {...this.props}\n                    selectedStrategy={strategy}\n                    availableTokens={availableTokens}\n                  />\n                  {\n                    !this.props.isMobile &&\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'flex-end'}\n                      >\n                        {\n                          availableProtocols.filter( p => p.legend ).map( (p,index) => (\n                            <Flex\n                              mr={3}\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              key={`legend_${index}`}\n                            >\n                              <Box\n                                mr={1}\n                                width={'10px'}\n                                height={'10px'}\n                                borderRadius={'50%'}\n                                backgroundColor={`rgb(${p.color.rgb.join(',')})`}\n                              >\n                              </Box>\n                              <Text.span\n                                fontSize={1}\n                                color={'cellText'}\n                              >\n                                {p.label}\n                              </Text.span>\n                            </Flex>\n                          ))\n                        }\n                      </Flex>\n                  }\n                </Box>\n              );\n            })\n          }\n          {\n            idleTokenEnabled && refreshIdleSpeedEnabled && !this.state.showRefreshIdleSpeed ? (\n              <Flex\n                mb={4}\n                width={1}\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <Link\n                  hoverColor={'primary'}\n                  onClick={this.showRefreshIdleSpeed.bind(this)}\n                >\n                  Refresh Idle Speed\n                </Link>\n              </Flex>\n            ) : idleTokenEnabled && refreshIdleSpeedEnabled && this.state.showRefreshIdleSpeed &&\n              <DashboardCard\n                cardProps={{\n                  p:2,\n                  mb:4,\n                  width:1,\n                  mt:[2,3],\n                }}\n                isActive={true}\n                isInteractive={false}\n              >\n                <Flex\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                >\n                  <Text\n                    fontWeight={500}\n                    color={'flashColor'}\n                    textAlign={'center'}\n                    fontSize={[1,'15px']}\n                  >\n                    By executing this transaction you can adjust the IDLE distribution speed among the pools.\n                  </Text>\n                  <ExecuteTransaction\n                    action={'Refresh'}\n                    Component={Button}\n                    parentProps={{\n                      mt:1\n                    }}\n                    componentProps={{\n                      size:'small',\n                      mainColor:'blue',\n                      value:'REFRESH IDLE SPEED'\n                    }}\n                    params={[]}\n                    contractName={'IdleController'}\n                    methodName={'refreshIdleSpeeds'}\n                    {...this.props}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'center'}\n                      justifyContent={'center'}\n                    >\n                      <Icon\n                        mr={1}\n                        name={'Done'}\n                        size={'1.4em'}\n                        color={this.props.theme.colors.transactions.status.completed}\n                      />\n                      <Text\n                        fontWeight={500}\n                        fontSize={'15px'}\n                        color={'copyColor'}\n                        textAlign={'center'}\n                      >\n                        Idle Speed Refreshed\n                      </Text>\n                    </Flex>\n                  </ExecuteTransaction>\n                </Flex>\n              </DashboardCard>\n          }\n        </Flex>\n      );\n    } else {\n\n      const tokenConfig = statsTokens[this.props.selectedToken];\n\n      const versionsOptions = Object.keys(globalConfigs.stats.versions).filter( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return versionInfo.enabledTokens.includes(this.props.selectedToken) && versionInfo.enabledStrategies.includes(this.props.selectedStrategy);\n      }).map( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return {\n          value:version,\n          label:versionInfo.label\n        }\n      });\n\n      // const disabledCharts = tokenConfig.disabledCharts || [];\n\n      const versionInfo = this.getVersionInfo(this.state.idleVersion);\n\n      let performanceTooltip = null;\n      if (this.state.idleVersion && versionInfo){\n        const showPerformanceTooltip = this.functionsUtil.getGlobalConfig(['stats','versions',this.state.idleVersion,'showPerformanceTooltip']);\n        performanceTooltip = showPerformanceTooltip ? this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'performanceTooltip']) : null;\n      }\n\n      const versionDefaultValue = versionsOptions.find( v => (v.value === this.state.idleVersion) );\n\n      return (\n        <Flex\n          p={0}\n          width={1}\n          flexDirection={'column'}\n        >\n          {\n          /*\n          }\n          <Flex position={['absolute','relative']} left={0} px={[3,0]} zIndex={10} width={1} flexDirection={'row'} mb={[0,3]}>\n            <Flex alignItems={'center'} width={[2/3,1/2]}>\n              <RouterLink to=\"/\">\n                <Image src=\"images/logo-gradient.svg\"\n                  height={['35px','48px']}\n                  position={'relative'} />\n              </RouterLink>\n              <Heading.h3 color={'dark-gray'} textAlign={'left'} fontWeight={3} lineHeight={'initial'} fontSize={[4,5]} ml={[1,2]}>\n                <Text.span fontSize={'80%'}>|</Text.span> Stats\n              </Heading.h3>\n            </Flex>\n            <Flex flexDirection={'row'} width={[1/3,1/2]} justifyContent={'flex-end'} alignItems={'center'}>\n              {\n                this.state.buttonGroups && \n                  this.props.isMobile ? (\n                    <ButtonGroup\n                      isMobile={this.props.isMobile}\n                      components={ this.state.buttonGroups.reduce((components,array) => components.concat(array),[]) }\n                      theme={'light'}\n                    />\n                  ) :\n                  this.state.buttonGroups.map((buttonGroup,i) => (\n                    <ButtonGroup\n                      key={`buttonGroup_${i}`}\n                      isMobile={this.props.isMobile}\n                      components={buttonGroup}\n                      theme={'light'}\n                    />\n                  ))\n              }\n            </Flex>\n          </Flex>\n          */\n          }\n          <Box\n            mb={[3,4]}\n          >\n            <Flex\n              flexDirection={['column','row']}\n            >\n              <Flex\n                width={[1,0.4]}\n              >\n                <Breadcrumb\n                  {...this.props}\n                  showPathMobile={true}\n                  text={'ASSETS OVERVIEW'}\n                  isMobile={this.props.isMobile}\n                  handleClick={ e => this.props.goToSection('stats') }\n                  path={[this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])]}\n                />\n              </Flex>\n              <Flex\n                mt={[3,0]}\n                width={[1,0.6]}\n                flexDirection={['column','row']}\n                justifyContent={['center','space-between']}\n              >\n                <Flex\n                  width={[1,0.26]}\n                  flexDirection={'column'}\n                >\n                  <GenericSelector\n                    innerProps={{\n                      p:1,\n                      height:['100%','46px'],\n                    }}\n                    name={'idle-version'}\n                    options={versionsOptions}\n                    defaultValue={versionDefaultValue}\n                    onChange={ v => this.setIdleVersion(v) }\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.3]}\n                  flexDirection={'column'}\n                >\n                  <AssetSelector\n                    innerProps={{\n                      p:1\n                    }}\n                    {...this.props}\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.39]}\n                  flexDirection={'column'}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:1,\n                      display:'flex',\n                      alignItems:'center',\n                      height:['46px','100%'],\n                      justifyContent:'center'\n                    }}\n                    isInteractive={true}\n                    handleClick={ e => this.setDateRangeModal(true) }\n                  >\n                    <Text\n                      fontWeight={3}\n                      color={'copyColor'}\n                    >\n                    {\n                      this.state.quickSelection\n                      ?\n                        this.quickSelections[this.state.quickSelection].label\n                      : this.state.startTimestampObj && this.state.endTimestampObj &&\n                        `${this.state.startTimestampObj.format('DD/MM/YY')} - ${this.state.endTimestampObj.format('DD/MM/YY')}`\n                    }\n                    </Text>\n                  </DashboardCard>\n                </Flex>\n              </Flex>\n            </Flex>\n          </Box>\n          {\n            !tokenConfig.enabled ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'DoNotDisturb'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Stats for {this.props.selectedToken} are not available!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : this.state.idleVersion && this.functionsUtil.strToMoment(versionInfo.startTimestamp).isAfter(Date.now()) ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'AccessTime'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Idle Stats {this.state.idleVersion} will be available shortly!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : this.functionsUtil.strToMoment(tokenConfig.startTimestamp).isAfter(Date.now()) ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'AccessTime'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Stats for {this.props.selectedToken} will be available shortly!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : (\n              <Box\n                width={1}\n              >\n                <Box\n                  mt={[3,0]}\n                  mb={[3,4]}\n                >\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    justifyContent={'center'}\n                    flexDirection={['column','row']}\n                  >\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Asset Under Management'}\n                        label={ this.state.unlentBalance ? `Unlent funds: ${this.state.unlentBalance} ${this.props.selectedToken}` : this.props.selectedToken }\n                        labelTooltip={ this.state.unlentBalance ? this.functionsUtil.getGlobalConfig(['messages','cheapRedeem']) : null}\n                      >\n                        <SmartNumber\n                          precision={2}\n                          type={'money'}\n                          {...valueProps}\n                          unitProps={unitProps}\n                          number={this.state.aum}\n                          flexProps={{\n                            alignItems:'baseline',\n                            justifyContent:'flex-start'\n                          }}\n                          unit={this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'conversionRateField']) ? '$' : null}\n                        />\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Avg APY'}\n                        label={'Annualized'}\n                      >\n                        <Flex\n                          width={1}\n                          alignItems={'center'}\n                          flexDirection={['column','row']}\n                        >\n                          <VariationNumber\n                            direction={'up'}\n                            iconPos={'right'}\n                            iconSize={'1.8em'}\n                            justifyContent={'flex-start'}\n                            width={1}\n                            >\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                              fontSize={[4,5]}\n                            >\n                              {this.state.apr}\n                              <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                            </Text>\n                          </VariationNumber>\n                        </Flex>\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Overperformance on Compound'}\n                        label={'Annualized'}\n                      >\n                        {\n                          this.state.delta && !isNaN(this.state.delta) ? (\n                            <VariationNumber\n                              direction={'up'}\n                              iconPos={'right'}\n                              iconSize={'1.8em'}\n                              justifyContent={'flex-start'}\n                              >\n                              <Text\n                                lineHeight={1}\n                                fontSize={[4,5]}\n                                fontWeight={[3,4]}\n                                color={'statValue'}\n                              >\n                                {this.state.delta}\n                                <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                              </Text>\n                            </VariationNumber>\n                          ) : (\n                            <Text\n                              lineHeight={1}\n                              fontSize={[4,5]}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                            >\n                              {this.state.delta}\n                            </Text>\n                          )\n                        }\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        label={' '}\n                        title={'Rebalances'}\n                        value={this.state.rebalances.toString()}\n                      />\n                    </Flex>\n                    {\n                    /*\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Current APR</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.currApr}\n                            <Text.span color={'copyColor'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Days Live</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.days}\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    */\n                    }\n                  </Flex>\n                </Box>\n\n                <DashboardCard\n                  title={'Historical Performance'}\n                  description={performanceTooltip}\n                  cardProps={{\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex id='chart-PRICE' width={1} mb={3}>\n                    <StatsChart\n                      height={ 350 }\n                      {...this.state}\n                      parentId={'chart-PRICE'}\n                      theme={this.props.theme}\n                      isMobile={this.props.isMobile}\n                      contracts={this.props.contracts}\n                      themeMode={this.props.themeMode}\n                      apiResults={this.state.apiResults}\n                      idleVersion={this.state.idleVersion}\n                      selectedToken={this.props.selectedToken}\n                      apiResults_unfiltered={this.state.apiResults_unfiltered}\n                      chartMode={this.state.idleVersion === this.state.latestVersion ? 'PRICE_V4' : 'PRICE'}\n                    />\n                  </Flex>\n                </DashboardCard>\n\n                <DashboardCard\n                  cardProps={{\n                    pb:3,\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex\n                    flexDirection={['column','row']}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      this.state.idleVersion === this.state.latestVersion && \n                      <Flex\n                        pt={2}\n                        width={[1,1/3]}\n                        id={'allocation-chart'}\n                        flexDirection={'column'}\n                        alignItems={'flex-start'}\n                        justifyContent={'flex-start'}\n                      >\n                        <AllocationChart\n                          height={310}\n                          {...this.props}\n                          parentId={'allocation-chart'}\n                        />\n                        <Rebalance\n                          {...this.props}\n                        />\n                      </Flex>\n                    }\n                    <Flex\n                      mb={[0,3]}\n                      id={'chart-ALL'}\n                      pl={[0,this.state.idleVersion === this.state.latestVersion ? 0 : 3]}\n                      width={[1, this.state.idleVersion === this.state.latestVersion ? 2/3 : 1]}\n                    >\n                      <Flex alignItems={'flex-start'} justifyContent={'flex-start'} flexDirection={'column'} width={1}>\n                        <Heading.h4\n                          mb={2}\n                          ml={3}\n                          mt={[3,4]}\n                          fontWeight={4}\n                          fontSize={[2,3]}\n                          textAlign={'left'}\n                          color={'dark-gray'}\n                          lineHeight={'initial'}\n                        >\n                          Allocations over time\n                        </Heading.h4>\n                        <StatsChart\n                          height={350}\n                          {...this.state}\n                          chartMode={'ALL'}\n                          parentId={'chart-ALL'}\n                          theme={this.props.theme}\n                          isMobile={this.props.isMobile}\n                          themeMode={this.props.themeMode}\n                          contracts={this.props.contracts}\n                          apiResults={this.state.apiResults}\n                          idleVersion={this.state.idleVersion}\n                          apiResults_unfiltered={this.state.apiResults_unfiltered}\n                        />\n                      </Flex>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n\n                <Flex\n                  position={'relative'}\n                >\n                  <Flex\n                    width={1}\n                    id={'carousel-container'}\n                    justifyContent={'flex-end'}\n                  >\n                    <RoundIconButton\n                      buttonProps={{\n                        mr:3\n                      }}\n                      iconName={'ArrowBack'}\n                      disabled={this.state.carouselIndex === 0}\n                      handleClick={ e => this.handleCarousel('back') }\n                    />\n                    <RoundIconButton\n                      iconName={'ArrowForward'}\n                      handleClick={ e => this.handleCarousel('next') }\n                      disabled={this.state.carouselIndex === this.state.carouselMax}\n                    />\n                  </Flex>\n                  <Flex\n                    mt={5}\n                    height={'400px'}\n                    position={'absolute'}\n                    id={'carousel-cursor'}\n                    width={['444%','200%']}\n                    justifyContent={'flex-start'}\n                    left={this.state.carouselOffsetLeft}\n                    style={{\n                      transition:'left 0.3s ease-in-out'\n                    }}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        id='chart-AUM'\n                      >\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            ml={3}\n                            mt={3}\n                            mb={2}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Asset Under Management\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'AUM'}\n                            parentId={'chart-AUM'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-APR' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            APRs\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'APR'}\n                            parentId={'chart-APR'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    {\n                      /*\n                      !disabledCharts.includes('score') &&\n                        <DashboardCard\n                          cardProps={{\n                            mr:4,\n                            height:'fit-content',\n                            style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                          }}\n                          title={'Risk Score'}\n                          description={'Idle Risk Score is a weighted average of the underlying protocols risks assessed by DeFi Score'}\n                          titleParentProps={{\n                            ml:16,\n                            mt:16\n                          }}\n                        >\n                          <Flex id='chart-SCORE' width={1}>\n                            <Flex\n                              mb={3}\n                              width={1}\n                              flexDirection={'column'}\n                              alignItems={'flex-start'}\n                              justifyContent={'center'}\n                            >\n                              <StatsChart\n                                height={300}\n                                {...this.state}\n                                chartMode={'SCORE'}\n                                parentId={'chart-SCORE'}\n                                theme={this.props.theme}\n                                isMobile={this.props.isMobile}\n                                themeMode={this.props.themeMode}\n                                contracts={this.props.contracts}\n                                apiResults={this.state.apiResults}\n                                idleVersion={this.state.idleVersion}\n                                apiResults_unfiltered={this.state.apiResults_unfiltered}\n                              />\n                            </Flex>\n                          </Flex>\n                        </DashboardCard>\n                        */\n                    }\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-VOL' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Volume\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'VOL'}\n                            parentId={'chart-VOL'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                </Flex>\n              </Box>\n            )\n          }\n          <DateRangeModal\n            {...this.props}\n            minDate={this.state.minDate}\n            maxDate={this.state.maxDate}\n            handleSelect={this.setDateRange}\n            quickSelections={this.quickSelections}\n            isOpen={this.state.dateRangeModalOpened}\n            closeModal={e => this.setDateRangeModal(false)}\n            startDate={this.state.startTimestampObj ? this.state.startTimestampObj._d : null}\n            endDate={this.state.endTimestampObj ? this.state.endTimestampObj._d : null}\n          />\n        </Flex>\n      );\n    }\n  }\n}\n\nexport default Stats;","import Title from '../Title/Title';\nimport IconBox from '../IconBox/IconBox';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport { Flex, Icon, Text, Box, Image } from \"rimble-ui\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass Utils extends Component {\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    const SubComponent = this.props.selectedSubsection && this.props.selectedSubsection.subComponent ? this.props.selectedSubsection.subComponent : null;\n    const viewOnly = this.props.connectorName === 'custom';\n    const showBreadCrumb = typeof this.props.showBreadCrumb !== 'undefined' ? this.props.showBreadCrumb : true;\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.props.selectedSubsection ? (\n            <Box\n              width={1}\n            >\n              {\n                showBreadCrumb && (\n                  <Flex\n                    width={1}\n                  >\n                    <Breadcrumb\n                      {...this.props}\n                      showPathMobile={true}\n                      isMobile={this.props.isMobile}\n                      path={[this.props.selectedSubsection.label]}\n                      text={this.props.selectedSection.label.toUpperCase()}\n                      handleClick={ e => this.props.goToSection(this.props.selectedSection.route) }\n                    />\n                  </Flex>\n                )\n              }\n              <Flex\n                my={[2,3]}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <Title\n                  mb={2}\n                >\n                  {this.props.selectedSubsection.label}\n                </Title>\n                <Text\n                  textAlign={'center'}\n                  dangerouslySetInnerHTML={{\n                    __html:this.props.selectedSubsection.desc\n                  }}\n                >\n                </Text>\n              </Flex>\n              <SubComponent\n                {...this.props}\n                {...this.props.selectedSubsection.directProps}\n                toolProps={this.props.selectedSubsection.props}\n              />\n            </Box>\n          ) : (\n            <Flex\n              my={[2,3]}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Title\n                mb={3}\n              >\n                Tools\n              </Title>\n              <Flex\n                width={1}\n                style={{\n                  flexWrap:'wrap'\n                }}\n                justifyContent={viewOnly ? 'center' : 'flex-start'}\n              >\n              {\n                viewOnly ? (\n                  <IconBox\n                    cardProps={{\n                      maxWidth:[1,'35em']\n                    }}\n                    icon={'Visibility'}\n                    text={'You are using Idle in \"Read-Only\" mode.<br />Logout and connect with your wallet to interact.'}\n                  />\n                ) : this.props.selectedSection.submenu.map( (tool,toolIndex) => (\n                  <DashboardCard\n                    isInteractive={true}\n                    key={`tool_${toolIndex}`}\n                    cardProps={{\n                      p:[3,4],\n                      mb:[3,3],\n                      mr:[0,'2%'],\n                      style:{\n                        flex: this.props.isMobile ? '1 1 100%' : '0 0 31%'\n                      },\n                      alignItems:'center',\n                      flexDirection:'column',\n                      justifyContent:'center'\n                    }}\n                    handleClick={ e => this.props.goToSection(this.props.selectedSection.route+'/'+tool.route) }\n                  >\n                    <Text\n                      fontSize={[3,4]}\n                      textAlign={'center'}\n                    >\n                      {tool.label}\n                    </Text>\n                    <Flex\n                      justifyContent={'center'}\n                    >\n                      {\n                        tool.image ? (\n                          <Image\n                            my={[0,2]}\n                            height={'2.2em'}\n                            src={tool.image}\n                          />\n                        ) : tool.icon && (\n                          <Icon\n                            my={[0,2]}\n                            size={'3em'}\n                            name={tool.icon}\n                          />\n                        )\n                      }\n                    </Flex>\n                    <Text\n                      fontSize={[2,2]}\n                      textAlign={'center'}\n                      dangerouslySetInnerHTML={{\n                        __html:tool.desc\n                      }}\n                    >\n                    </Text>\n                  </DashboardCard>\n                ) )\n              }\n              </Flex>\n            </Flex>\n          )\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default Utils;\n","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Heading, Text, Tooltip, Icon } from \"rimble-ui\";\nimport PortfolioEquity from '../PortfolioEquity/PortfolioEquity';\n\nclass FundsOverview extends Component {\n\n  state = {\n    // govTokensAprs:null,\n    aggregatedValues:[],\n    govTokensTotalApr:null,\n    govTokensUserBalance:null,\n    govTokensDistribution:null,\n    govTokensTotalBalance:null,\n    govTokensTotalAprTooltip:null,\n    idleTokenUserDistribution:null,\n    govTokensDistributionTooltip:null,\n    govTokensTotalBalanceTooltip:null\n  };\n\n  // Utils\n  functionsUtil = null;\n  idleGovToken = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    this.idleGovToken = this.functionsUtil.getIdleGovToken();\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const isRisk = this.props.selectedStrategy === 'risk';\n\n    const [\n      // govTokensAprs,\n      idleTokenUserDistribution,\n      govTokensUserBalance,\n      apy,\n      depositTimestamp,\n      days\n    ] = await Promise.all([\n      // this.functionsUtil.getGovTokensAprs(this.props.selectedToken,this.props.tokenConfig),\n      this.idleGovToken.getUserDistribution(this.props.account,govTokenAvailableTokens,true),\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,null),\n      this.functionsUtil.loadAssetField('apy',this.props.selectedToken,this.props.tokenConfig,this.props.account,false),\n      this.functionsUtil.loadAssetField('depositTimestamp',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    let avgAPY = await this.functionsUtil.getAvgAPYStats(this.props.tokenConfig.address,isRisk,depositTimestamp);\n\n    if (!avgAPY || this.functionsUtil.BNify(avgAPY).lte(0)){\n      avgAPY = apy;\n    }\n\n    const govTokensTotalBalance = govTokensUserBalance ? Object.values(govTokensUserBalance).reduce( (totBalance,govTokenBalance) => {\n      return totBalance.plus(this.functionsUtil.BNify(govTokenBalance));\n    },this.functionsUtil.BNify(0)) : null;\n\n    const govTokensTotalBalanceTooltip = govTokensUserBalance ? Object.keys(govTokensUserBalance).map( govToken => {\n      const balance = govTokensUserBalance[govToken];\n      if (balance.gt(0)){\n        return `+${balance.toFixed(2)} ${govToken}`;\n      } else {\n        return null;\n      }\n    }).filter(v => (v !== null)) : null;\n\n    // console.log(govTokensTotalBalance,govTokensUserBalance,govTokensTotalBalanceTooltip);\n\n    // const govTokensTotalApr = govTokensAprs ? Object.values(govTokensAprs).reduce( (totApr,govTokenApr) => {\n    //   return totApr.plus(this.functionsUtil.BNify(govTokenApr));\n    // },this.functionsUtil.BNify(0)) : null;\n\n    // const govTokensTotalAprTooltip = govTokensAprs ? Object.keys(govTokensAprs).map( govToken => {\n    //   const apr = govTokensAprs[govToken];\n    //   if (apr.gt(0)){\n    //     return `${govToken}: ${apr.toFixed(2)}%`;\n    //   }\n    //   return null;\n    // }).filter(v => (v !== null)) : null;\n\n    /*\n    const govTokensDistributionTooltip = govTokensUserDistribution ? Object.keys(govTokensUserDistribution).map( govToken => {\n      const speed = govTokensUserDistribution[govToken];\n      if (speed.gt(0)){\n        const distributionFrequency = this.functionsUtil.getGlobalConfig(['govTokens',govToken,'distributionFrequency']);\n        return `+${speed.toFixed(4)} ${govToken}/${distributionFrequency}`;\n      }\n      return null;\n    }).filter(v => (v !== null)) : null;\n    */\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          desc:this.functionsUtil.getGlobalConfig(['messages','apyLong']),\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '0.00%') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    this.setState({\n      // govTokensAprs,\n      aggregatedValues,\n      // govTokensTotalApr,\n      govTokensUserBalance,\n      govTokensTotalBalance,\n      // govTokensTotalAprTooltip,\n      idleTokenUserDistribution,\n      govTokensTotalBalanceTooltip\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Flex\n                          mt={2}\n                          width={1}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <Text\n                            fontWeight={2}\n                            fontSize={[1,2]}\n                            color={'cellText'}\n                          >\n                            {v.props.title}\n                          </Text>\n                          {\n                            v.props.desc && \n                              <Tooltip\n                                placement={'bottom'}\n                                message={v.props.desc}\n                              >\n                                <Icon\n                                  ml={2}\n                                  name={\"Info\"}\n                                  size={'1em'}\n                                  color={'cellTitle'}\n                                />\n                              </Tooltip>\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquity\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              chartToken={this.props.selectedToken}\n              enabledTokens={[this.props.selectedToken]}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLent',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:this.props.theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPerc',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.govTokensTotalBalanceTooltip && this.state.govTokensTotalBalanceTooltip.length>0 && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      this.state.govTokensTotalBalanceTooltip.map((govTokenBalance,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          mt={govTokenIndex ? 1 : 0}\n                          key={`govToken_${govTokenIndex}`}\n                        >\n                          {govTokenBalance}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                )/* : this.state.govTokensUserBalance && Object.keys(this.state.govTokensUserBalance).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + ${this.state.govTokensTotalBalance.toFixed(4)}\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalBalanceTooltip.join(' / ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Fees\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'feesCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'apy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.idleTokenUserDistribution && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      mt={1}\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      {this.state.idleTokenUserDistribution.toFixed(4)} {this.idleGovToken.tokenName}/{this.idleGovToken.tokenConfig.distributionFrequency}\n                    </Text>\n                  </Flex>\n                )\n                /*\n                this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length===1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      Object.keys(this.state.govTokensAprs).map((govToken,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          ml={govTokenIndex ? 2 : 0}\n                          key={`govToken_${govToken}`}\n                        >\n                          {this.state.govTokensAprs[govToken].toFixed(2)}% {govToken}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                ) : this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + {this.state.govTokensTotalApr.toFixed(2)}%\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalAprTooltip.join('; ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            {\n              /*\n              <Flex\n                mb={[2,0]}\n                width={[1,1/5]}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'flex-start'}\n              >\n                <Title\n                  mb={2}\n                  fontSize={[3,4]}\n                  component={Heading.h3}\n                >\n                  Risk Score\n                </Title>\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'score',\n                    props:{\n                      decimals:1,\n                      fontWeight:300,\n                      fontSize:['1.8em','1.9em'],\n                      color:this.props.theme.colors.counter,\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n              */\n            }\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverview;","import React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Icon, Checkbox, Box, Link, Input, Tooltip } from \"rimble-ui\";\n\nclass CurveRedeem extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    tokenConfig:null,\n    unevenAmounts:null,\n    selectedToken:null,\n    availableTokens:null,\n    buttonDisabled:false,\n    showMaxSlippage:false,\n    redeemUnderlying:true,\n    curveTokenConfig:null,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    curveTokensAmounts:null,\n    fastBalanceSelector:null,\n    redeemUnevenAmounts:false,\n    curveRedeemableIdleTokens:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.initToken();\n  }\n\n  showMaxSlippage(){\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  async calculateSlippage(max_slippage=null){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (!inputValue || inputValue.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    let withdrawSlippage = null;\n    let curveTokensAmounts = null;\n    let curveIdleTokensAmounts = null;\n    if (this.state.redeemUnevenAmounts){\n      [\n        curveTokensAmounts,\n        curveIdleTokensAmounts\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokensAmounts(this.props.account,normalizedAmount,true),\n        this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,normalizedAmount)\n      ]);\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false,curveIdleTokensAmounts);\n    } else {\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false);\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const redeemableBalance = inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.times(100).plus(this.state.maxSlippage || this.functionsUtil.BNify(0)).div(100)));\n      curveTokensAmounts = {};\n      curveTokensAmounts[this.state.selectedToken] = redeemableBalance;\n    }\n\n    if (withdrawSlippage){\n      withdrawSlippage = withdrawSlippage.times(100);\n    }\n\n    this.setState({\n      withdrawSlippage,\n      curveTokensAmounts,\n      curveIdleTokensAmounts\n    });\n\n    // Add max slippage but don't save in state\n    if (withdrawSlippage && max_slippage){\n      withdrawSlippage = withdrawSlippage.plus(max_slippage);\n    }\n\n    return withdrawSlippage;\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.tokenConfig.idle.token !== this.props.tokenConfig.idle.token;\n    if (tokenChanged){\n      await this.initToken();\n    }\n\n    const redeemUnevenAmountsChanged = prevState.redeemUnevenAmounts !== this.state.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    const inputChanged = prevState.inputValue !== this.state.inputValue;\n    const maxSlippageChanged = parseFloat(prevState.maxSlippage) !== parseFloat(this.state.maxSlippage);\n    const tokenConfigChanged = JSON.stringify(prevState.tokenConfig) !== JSON.stringify(this.state.tokenConfig);\n    if (inputChanged || tokenConfigChanged || maxSlippageChanged){\n      this.calculateSlippage();\n    }\n\n    const selectedTokenChanged = prevState.selectedToken !== this.state.selectedToken;\n    if (selectedTokenChanged){\n      this.loadSelectedTokenConfig();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    let buttonDisabled = false;\n\n    // if (this.state.redeemUnevenAmounts){\n      buttonDisabled = !amount || amount.gt(this.state.curveTokenBalance);\n    // } else {\n      // buttonDisabled = !amount || amount.gt(this.state.redeemableBalance);\n    // }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    let inputValue = null;\n\n    // if (this.state.redeemUnevenAmounts){\n    inputValue = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n    // } else {\n      // inputValue = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n    // }\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  selectDestinationToken(selectedToken){\n    this.setState({\n      selectedToken\n    });\n  }\n\n  async loadSelectedTokenConfig(){\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const tokenConfig = this.state.availableTokens[this.state.selectedToken];\n    const curveTokenConfig = curveConfig.availableTokens[tokenConfig.idle.token];\n    this.setState({\n      tokenConfig,\n      curveTokenConfig\n    });\n  }\n\n  async initToken(){\n    const [curvePoolContract,curveSwapContract] = await Promise.all([\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract()\n    ]);\n\n    const [\n      curveTokenPrice,\n      curveTokenBalance,\n      curveRedeemableIdleTokens,\n    ] = await Promise.all([\n      this.functionsUtil.getCurveTokenPrice(),\n      this.functionsUtil.getCurveTokenBalance(this.props.account),\n      this.functionsUtil.getCurveRedeemableIdleTokens(this.props.account)\n    ]);\n\n    const unevenAmounts = [];\n    const redeemableBalance = curveTokenBalance ? curveTokenBalance.times(curveTokenPrice) : this.functionsUtil.BNify(0);\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();;\n    const selectedToken = Object.keys(availableTokens)[0];\n\n    this.setState({\n      selectedToken,\n      unevenAmounts,\n      curveTokenPrice,\n      availableTokens,\n      curvePoolContract,\n      curveSwapContract,\n      curveTokenBalance,\n      redeemableBalance,\n      curveRedeemableIdleTokens\n    });\n  }\n\n  async redeem(){\n\n    if (!this.state.curveTokenBalance){\n      return false;\n    }\n\n    const callbackRedeem = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveRedeem`,\n        eventAction: this.props.selectedToken,\n        eventValue: this.state.curveTokenBalance.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackRedeem === 'function' && txSucceeded){\n        this.props.callbackRedeem(tx);\n      }\n    };\n\n    const callbackReceiptRedeem = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.curveSwapContract.name;\n    const withdrawSlippage = await this.calculateSlippage(this.state.maxSlippage);\n    const max_slippage = this.functionsUtil.BNify(this.state.maxSlippage).div(100);\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    // const curveTokenBalance = this.functionsUtil.normalizeTokenAmount(this.state.curveTokenBalance,this.state.curvePoolContract.decimals);\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    if (this.state.redeemUnevenAmounts){\n      const min_amounts = this.state.redeemUnderlying ? await this.functionsUtil.getCurveTokensAmounts(this.props.account,_amount,false,true) : await this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,_amount,max_slippage);\n      console.log('remove_liquidity',_amount.toString(),min_amounts);\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    } else {\n      const coin_index = this.state.curveTokenConfig.migrationParams.coinIndex;\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.div(100))),this.state.tokenConfig.decimals);\n      // const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.minus(inputValue.times(withdrawSlippage.div(100))),this.state.curveTokenConfig.decimals);\n      // let _token_amount = await this.functionsUtil.getCurveTokenAmount(amounts,false);\n      // _token_amount = this.functionsUtil.BNify(_token_amount).isGreaterThan(curveTokenBalance) ? curveTokenBalance : this.functionsUtil.BNify(_token_amount);\n\n      console.log('remove_liquidity_one_coin',_amount, coin_index, min_amount);\n\n      // debugger;\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_one_coin', [_amount, coin_index, min_amount, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    }\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  getFastBalanceSelector(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n\n  render() {\n\n    const showSlippage = !this.state.buttonDisabled && this.state.withdrawSlippage;\n    const curveTokenName = this.functionsUtil.getGlobalConfig(['curve','poolContract','token']);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          {\n            !this.state.curveTokenBalance ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3,\n                  minHeight:'195px',\n                  style:{\n                    display:'flex',\n                    alignItems:'center',\n                    justifyContent:'center'\n                  }\n                }}\n              >\n                <FlexLoader\n                  flexProps={{\n                    flexDirection:'row'\n                  }}\n                  loaderProps={{\n                    size:'30px'\n                  }}\n                  textProps={{\n                    ml:2\n                  }}\n                  text={'Checking Curve Pool...'}\n                />\n              </DashboardCard>\n            ) : this.state.processing.loading ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3\n                }}\n              >\n                <Flex\n                  flexDirection={'column'}\n                >\n                  <TxProgressBar\n                    web3={this.props.web3}\n                    hash={this.state.processing.txHash}\n                    endMessage={`Finalizing redeem request...`}\n                    cancelTransaction={this.cancelTransaction.bind(this)}\n                    waitText={ this.props.waitText ? this.props.waitText : 'Redeem estimated in'}\n                  />\n                </Flex>\n              </DashboardCard>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    mb:2\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'1.8em'}\n                      color={'cellText'}\n                      name={'FileUpload'}\n                    />\n                    <Text\n                      mt={1}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Withdraw from the Curve Pool in a specific token or in uneven amounts of tokens (with no slippage).\n                    </Text>\n                    <Flex\n                      mt={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                    >\n                      <Checkbox\n                        required={false}\n                        label={`Redeem with no slippage`}\n                        checked={this.state.redeemUnevenAmounts}\n                        onChange={ e => this.toggleUnevenAmounts(e.target.checked) }\n                      />\n                      <Tooltip\n                        placement={'top'}\n                        message={`You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.`}\n                      >\n                        <Icon\n                          size={'1em'}\n                          color={'cellTitle'}\n                          name={\"InfoOutline\"}\n                        />\n                      </Tooltip>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n                {\n                  !this.state.redeemUnevenAmounts/* && (!this.props.selectedToken || (this.state.showMaxSlippage && showSlippage))*/ && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      {\n                        this.state.tokenConfig && \n                          <Box\n                            width={1}\n                          >\n                            <Text\n                              mb={1}\n                            >\n                              Select destination token:\n                            </Text>\n                            <AssetSelector\n                              {...this.props}\n                              id={'token-from'}\n                              showBalance={false}\n                              tokenConfig={this.state.tokenConfig}\n                              selectedToken={this.state.selectedToken}\n                              availableTokens={this.state.availableTokens}\n                              onChange={this.selectDestinationToken.bind(this)}\n                            />\n                          </Box>\n                      }\n                    </Box>\n                  )\n                }\n                {\n                  this.state.curveTokensAmounts && !this.state.buttonDisabled && (\n                    <DashboardCard\n                      cardProps={{\n                        mt:1,\n                        mb:2,\n                        py:2,\n                        px:1\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Text\n                          mt={1}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          You will receive:\n                        </Text>\n                        <Flex\n                          mt={2}\n                          width={1}\n                          boxShadow={0}\n                          style={{\n                            flexWrap:'wrap'\n                          }}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                          >\n                            {\n                              Object.keys(this.state.curveTokensAmounts).map( token => {\n                                const balance = this.state.curveTokensAmounts[token];\n                                return (\n                                  <Flex\n                                    mb={1}\n                                    mx={1}\n                                    width={'auto'}\n                                    flexDirection={'row'}\n                                    key={`tokenBalance_${token}`}\n                                    justifyContent={'flex-start'}\n                                  >\n                                    <AssetField\n                                      token={token}\n                                      tokenConfig={{\n                                        token:token\n                                      }}\n                                      fieldInfo={{\n                                        name:'icon',\n                                        props:{\n                                          mr:1,\n                                          width:['1.4em','1.6em'],\n                                          height:['1.4em','1.6em']\n                                        }\n                                      }}\n                                    />\n                                    <SmartNumber\n                                      ml={1}\n                                      fontSize={[0,1]}\n                                      fontWeight={500}\n                                      maxPrecision={4}\n                                      color={'cellText'}\n                                      number={balance.toString()}\n                                    />\n                                  </Flex>\n                                );\n                            })\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n                {\n                  this.state.showMaxSlippage && showSlippage && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Text>\n                          Choose max slippage:\n                        </Text>\n                        <Tooltip\n                          placement={'top'}\n                          message={`Max additional slippage on top of the one shown below`}\n                        >\n                          <Icon\n                            ml={1}\n                            size={'1em'}\n                            color={'cellTitle'}\n                            name={\"InfoOutline\"}\n                          />\n                        </Tooltip>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        {\n                          [0.2,0.5,1,5].map( slippage => (\n                            <FastBalanceSelector\n                              cardProps={{\n                                p:1\n                              }}\n                              textProps={{\n                                fontSize:1\n                              }}\n                              percentage={slippage}\n                              key={`selector_${slippage}`}\n                              onMouseDown={()=>this.setMaxSlippage(slippage)}\n                              isActive={this.state.maxSlippage === parseFloat(slippage)}\n                            />\n                          ))\n                        }\n                      </Flex>\n                    </Box>\n                  )\n                }\n                <Flex\n                  mb={3}\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  <Flex\n                    mb={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'flex-end'}\n                  >\n                    {\n                      showSlippage && (\n                        <Flex\n                          width={1}\n                          maxWidth={'40%'}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            textAlign={'right'}\n                            style={{\n                              whiteSpace:'nowrap'\n                            }}\n                            color={ parseFloat(this.state.withdrawSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                          >\n                            {\n                              parseFloat(this.state.withdrawSlippage.toFixed(3)) === 0 ?\n                                'No Slippage'\n                              : `${ this.state.withdrawSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.withdrawSlippage.abs().toFixed(3)}%`\n                            }\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={ this.state.redeemUnevenAmounts ? `You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.` : this.state.withdrawSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                          {\n                            !this.state.redeemUnevenAmounts &&\n                              <Link\n                                ml={1}\n                                color={'copyColor'}\n                                hoverColor={'primary'}\n                                onClick={this.showMaxSlippage.bind(this)}\n                              >\n                                change\n                              </Link>\n                          }\n                        </Flex>\n                      )\n                    }\n                    <Flex\n                      width={1}\n                      maxWidth={'60%'}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      justifyContent={'flex-end'}\n                    >\n                      <Link\n                        fontSize={1}\n                        fontWeight={3}\n                        color={'dark-gray'}\n                        textAlign={'right'}\n                        hoverColor={'copyColor'}\n                        onClick={ (e) => this.setFastBalanceSelector(100) }\n                        style={{\n                          maxWidth:'100%',\n                          overflow:'hidden',\n                          whiteSpace:'nowrap',\n                          textOverflow:'ellipsis'\n                        }}\n                      >\n                        {this.state.curveTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {curveTokenName}\n                      </Link>\n                    </Flex>\n                  </Flex>\n                  <Input\n                    min={0}\n                    type={\"number\"}\n                    required={true}\n                    height={'3.4em'}\n                    borderRadius={2}\n                    fontWeight={500}\n                    boxShadow={'none !important'}\n                    placeholder={`Insert amount`}\n                    onChange={this.changeInputValue.bind(this)}\n                    border={`1px solid ${this.props.theme.colors.divider}`}\n                    value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                  />\n                  <Flex\n                    mt={2}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      [25,50,75,100].map( percentage => (\n                        <FastBalanceSelector\n                          percentage={percentage}\n                          key={`selector_${percentage}`}\n                          onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                          isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                        />\n                      ))\n                    }\n                  </Flex>\n                </Flex>\n                <Flex\n                  justifyContent={'center'}\n                >\n                  <RoundButton\n                    buttonProps={{\n                      mt:2,\n                      width:[1,1/2],\n                      disabled:this.state.buttonDisabled\n                    }}\n                    handleClick={this.redeem.bind(this)}\n                  >\n                    Redeem\n                  </RoundButton>\n                </Flex>\n              </Flex>\n            )\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveRedeem;","import Migrate from '../Migrate/Migrate';\nimport IconBox from '../IconBox/IconBox';\nimport React, { Component } from 'react';\n// import ExtLink from '../ExtLink/ExtLink';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport ConnectBox from '../ConnectBox/ConnectBox';\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport RoundButton from '../RoundButton/RoundButton';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport ShareModal from '../utilities/components/ShareModal';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport TransactionField from '../TransactionField/TransactionField';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Input, Box, Icon, Link, Checkbox, Tooltip, Image } from \"rimble-ui\";\n\nclass DepositRedeem extends Component {\n\n  state = {\n    txError: {},\n    tokenAPY: '-',\n    inputValue: {},\n    processing: {},\n    curveAPY: null,\n    totalAUM: null,\n    canRedeem: false,\n    maxSlippage: 0.2,\n    canDeposit: false,\n    action: 'deposit',\n    directMint: false,\n    activeModal: null,\n    tokenGovTokens: {},\n    showBuyFlow: false,\n    maxUnlentPerc: null,\n    unlentBalance: null,\n    tokenApproved: false,\n    skipMigration: false,\n    redeemSkipGov: false,\n    showRedeemFlow: false,\n    contractPaused: false,\n    buttonDisabled: false,\n    canRedeemCurve: false,\n    erc20ForwarderTx: null,\n    signedParameters: null,\n    minAmountForMint: null,\n    showMaxSlippage: false,\n    redeemGovTokens: false,\n    canDepositCurve: false,\n    redeemSkipGovTokens: [],\n    fastBalanceSelector: {},\n    actionProxyContract: {},\n    migrationEnabled: false,\n    componentMounted: false,\n    curveTokenBalance: null,\n    agreeSkipGovTokens: false,\n    redeemCurveEnabled: false,\n    depositCurveBalance: null,\n    depositCurveEnabled: true,\n    showAdvancedOptions: false,\n    skipGovTokensGasSave: null,\n    depositCurveSlippage: null,\n    erc20ForwarderContract: {},\n    erc20ForwarderEnabled: false,\n    showETHWrapperEnabled: false,\n    skipGovTokensGasSaveUSD: null,\n    metaTransactionsEnabled: true,\n    skippedGovTokensBalance: null,\n    minAmountForMintReached: false,\n    loadingErc20ForwarderTx: false\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils() {\n    if (this.functionsUtil) {\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount() {\n    this.loadUtils();\n    await this.loadProxyContracts();\n  }\n\n  async componentDidMount() {\n    this.loadTokenInfo();\n  }\n\n  setShowRedeemFlow = (showRedeemFlow) => {\n    this.setState({\n      showRedeemFlow\n    });\n  }\n\n  setShowBuyFlow = (showBuyFlow) => {\n    this.setState({\n      showBuyFlow\n    });\n  }\n\n  toggleShowAdvancedOptions = showAdvancedOptions => {\n    this.setState((prevState) => ({\n      showAdvancedOptions: !prevState.showAdvancedOptions\n    }));\n  }\n\n  toggleSkipMigration = skipMigration => {\n    this.setState({\n      skipMigration\n    });\n  }\n\n  toggleRedeemCurve = redeemCurveEnabled => {\n    this.setState({\n      redeemCurveEnabled\n    });\n  }\n\n  toggleDepositCurve = depositCurveEnabled => {\n    this.setState({\n      depositCurveEnabled\n    });\n  }\n\n  toggleShowETHWrapper = showETHWrapperEnabled => {\n    this.setState({\n      showETHWrapperEnabled\n    });\n  }\n\n  toggleAgreeSkipGovTokens = agreeSkipGovTokens => {\n    this.setState({\n      agreeSkipGovTokens\n    });\n  }\n\n  toggleSkipMint = (directMint) => {\n    this.setState({\n      directMint\n    });\n  }\n\n  toggleRedeemGovTokens = (redeemGovTokens) => {\n    this.setState({\n      redeemGovTokens,\n      redeemSkipGovTokens: [],\n      agreeSkipGovTokens: false,\n      skippedGovTokensBalance: this.functionsUtil.BNify(0),\n      redeemSkipGov: redeemGovTokens ? false : this.state.redeemSkipGov\n    });\n  }\n\n  toggleRedeemSkipGov = (redeemSkipGov) => {\n    this.setState({\n      redeemSkipGov,\n      redeemSkipGovTokens: [],\n      agreeSkipGovTokens: false,\n      skippedGovTokensBalance: this.functionsUtil.BNify(0),\n      redeemGovTokens: redeemSkipGov ? false : this.state.redeemGovTokens\n    });\n  }\n\n  getSkippedGovTokensFlags = async () => {\n    const govTokensIndexes = await this.functionsUtil.getGovTokensIndexes(this.props.account, this.props.tokenConfig);\n    const govTokensFlags = Object.keys(govTokensIndexes).map(token => {\n      return this.state.redeemSkipGovTokens.includes(token);\n    });\n    // console.log('getSkippedGovTokensFlags',govTokensIndexes,govTokensFlags);\n    return govTokensFlags;\n  }\n\n  calculateSkippedGovTokens = async () => {\n    let skippedGovTokensBalance = this.functionsUtil.BNify(0);\n    const DAITokenConfig = this.functionsUtil.getGlobalConfig(['stats', 'tokens', 'DAI']);\n\n    await this.functionsUtil.asyncForEach(this.state.redeemSkipGovTokens, async (govToken) => {\n      const govTokenConfig = this.functionsUtil.getGlobalConfig(['govTokens', govToken]);\n      const govTokenPrice = await this.functionsUtil.getUniswapConversionRate(DAITokenConfig, govTokenConfig);\n      const skippedAmount = this.props.govTokensUserBalances[govToken].times(govTokenPrice);\n      skippedGovTokensBalance = skippedGovTokensBalance.plus(skippedAmount);\n    });\n\n    const _skipGovTokenRedeem = await this.getSkippedGovTokensFlags();\n    const WETHTokenConfig = this.functionsUtil.getGlobalConfig(['stats', 'tokens', 'WETH']);\n\n    const [\n      wethPrice,\n      redeemGasUsage,\n      skipGovRedeemGasUsage\n    ] = await Promise.all([\n      this.functionsUtil.getUniswapConversionRate(DAITokenConfig, WETHTokenConfig),\n      this.functionsUtil.estimateMethodGasUsage(this.props.tokenConfig.idle.token, 'redeemIdleToken', [this.functionsUtil.normalizeTokenAmount(this.props.idleTokenBalance, this.props.tokenConfig.decimals)], this.props.account),\n      this.functionsUtil.estimateMethodGasUsage(this.props.tokenConfig.idle.token, 'redeemIdleTokenSkipGov', [this.functionsUtil.normalizeTokenAmount(this.props.idleTokenBalance, this.props.tokenConfig.decimals), _skipGovTokenRedeem], this.props.account)\n    ]);\n\n    const skipGovTokensGasSave = redeemGasUsage && skipGovRedeemGasUsage ? redeemGasUsage.minus(skipGovRedeemGasUsage) : this.functionsUtil.BNify(0);\n    const skipGovTokensGasSaveUSD = skipGovTokensGasSave ? skipGovTokensGasSave.times(wethPrice) : this.functionsUtil.BNify(0);\n\n    this.setState({\n      skipGovTokensGasSave,\n      skipGovTokensGasSaveUSD,\n      skippedGovTokensBalance\n    });\n    return skippedGovTokensBalance;\n  }\n\n  setRedeemSkipGovTokens = (token, checked) => {\n    this.setState((prevState) => {\n      const redeemSkipGovTokens = Object.assign([], prevState.redeemSkipGovTokens);\n      if (!checked && redeemSkipGovTokens.includes(token)) {\n        redeemSkipGovTokens.splice(redeemSkipGovTokens.indexOf(token), 1);\n      } else if (checked && !redeemSkipGovTokens.includes(token)) {\n        redeemSkipGovTokens.push(token);\n      }\n      return {\n        redeemSkipGovTokens\n      };\n    }, () => {\n      this.calculateSkippedGovTokens();\n    });\n  }\n\n  toggleErc20ForwarderEnabled = (erc20ForwarderEnabled) => {\n    const newState = {\n      erc20ForwarderEnabled\n    };\n\n    this.setState(newState, () => {\n      this.cancelTransaction();\n    });\n  }\n\n  toggleMetaTransactionsEnabled = (metaTransactionsEnabled) => {\n    this.setState({\n      metaTransactionsEnabled\n    });\n  }\n\n  async loadProxyContracts() {\n\n    if (!this.props.contractsInitialized){\n      return false;\n    }\n\n    const actions = ['deposit', 'redeem'];\n    const newState = {\n      actionProxyContract: {},\n      erc20ForwarderContract: {}\n    };\n\n    await this.functionsUtil.asyncForEach(actions, async (action) => {\n      let mintProxyContractInfo = null;\n      const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', action, 'erc20ForwarderEnabled']);\n\n      if (depositErc20ForwarderEnabled) {\n        mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract', 'methods', action, 'erc20ForwarderProxyContract', 'forwarder']);\n\n        await this.props.initContract(mintProxyContractInfo.name, mintProxyContractInfo.address, mintProxyContractInfo.abi);\n\n        // Init contract for erc20 forwarder\n        const erc20ForwarderContractInfo = this.functionsUtil.getGlobalConfig(['contract', 'methods', action, 'erc20ForwarderProxyContract', 'tokens', this.props.selectedToken]);\n        if (erc20ForwarderContractInfo) {\n          mintProxyContractInfo = erc20ForwarderContractInfo;\n          const erc20ForwarderContract = await this.props.initContract(erc20ForwarderContractInfo.name, erc20ForwarderContractInfo.address, erc20ForwarderContractInfo.abi);\n          if (erc20ForwarderContract){\n            newState.erc20ForwarderContract[action] = erc20ForwarderContractInfo;\n            newState.erc20ForwarderContract[action].contract = erc20ForwarderContract.contract;\n          }\n        }\n      }\n\n      if (!mintProxyContractInfo) {\n        mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract', 'methods', action, 'proxyContract']);\n      }\n\n      const hasProxyContract = mintProxyContractInfo && mintProxyContractInfo.enabled;\n      newState.actionProxyContract[action] = hasProxyContract ? mintProxyContractInfo : null;\n      if (hasProxyContract) {\n        const proxyContract = await this.props.initContract(mintProxyContractInfo.name, mintProxyContractInfo.address, mintProxyContractInfo.abi);\n        if (proxyContract){\n          newState.actionProxyContract[action].contract = proxyContract.contract;\n          newState.actionProxyContract[action].approved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken, mintProxyContractInfo.address, this.props.account);\n        }\n      }\n    });\n\n    // console.log('loadProxyContracts',newState);\n\n    return await this.setState(newState);\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadAPY() {\n    const tokenAprs = await this.functionsUtil.getTokenAprs(this.props.tokenConfig);\n    if (tokenAprs && tokenAprs.avgApy !== null) {\n      const tokenAPY = this.functionsUtil.BNify(tokenAprs.avgApy).toFixed(2);\n\n      let curveAPY = null;\n      if (this.state.canDepositCurve) {\n        curveAPY = await this.functionsUtil.getCurveAPY();\n        // console.log('curveAPY',curveAPY);\n        if (curveAPY) {\n          curveAPY = curveAPY.plus(tokenAPY);\n        }\n      }\n      this.setState({\n        tokenAPY,\n        curveAPY\n      });\n    }\n  }\n\n  getReferralAddress() {\n    let _referral = this.functionsUtil.getQueryStringParameterByName('_referral');\n    if (!this.functionsUtil.checkAddress(_referral)) {\n      _referral = null;\n    }\n    return _referral;\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n\n    // console.log('componentDidUpdate',this.props.tokenBalance);\n\n    if (this.props.tokenBalance === null) {\n      return false;\n    }\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const erc20ForwarderEnabledChanged = prevState.erc20ForwarderEnabled !== this.state.erc20ForwarderEnabled;\n    const tokenBalanceChanged = prevProps.tokenBalance !== this.props.tokenBalance && this.props.tokenBalance !== null;\n\n    if (accountChanged || tokenChanged || tokenBalanceChanged || erc20ForwarderEnabledChanged || contractsInitialized) {\n      await this.loadProxyContracts();\n      this.loadTokenInfo();\n      return false;\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n\n    if (actionChanged || fastBalanceSelectorChanged) {\n      this.setInputValue();\n    }\n\n    const inputValueChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputValueChanged) {\n      // this.checkMinAmountForMint();\n    }\n\n    const redeemSkipGovChanged = prevState.redeemSkipGov !== this.state.redeemSkipGov;\n    const redeemGovTokensChanged = prevState.redeemGovTokens !== this.state.redeemGovTokens;\n    const agreeSkipGovTokensChanged = prevState.agreeSkipGovTokens !== this.state.agreeSkipGovTokens;\n    const redeemSkipGovTokensChanged = JSON.stringify(prevState.redeemSkipGovTokens) !== JSON.stringify(this.state.redeemSkipGovTokens);\n\n    if (redeemGovTokensChanged || actionChanged || redeemSkipGovTokensChanged || redeemSkipGovChanged || agreeSkipGovTokensChanged) {\n      this.checkButtonDisabled();\n    }\n\n    const depositCurveChanged = prevState.depositCurveEnabled !== this.state.depositCurveEnabled;\n    const metaTransactionsChanged = prevState.metaTransactionsEnabled !== this.state.metaTransactionsEnabled;\n    if (metaTransactionsChanged || depositCurveChanged) {\n      const tokenApproved = await this.checkTokenApproved();\n      this.setState({\n        tokenApproved\n      });\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged) {\n      this.calculateCurveSlippage();\n    }\n  }\n\n  async checkMinAmountForMint() {\n    let showPoolPerc = false;\n    let totalAUM = this.state.totalAUM;\n    let maxUnlentPerc = this.state.maxUnlentPerc;\n    const isRisk = this.props.selectedStrategy === 'risk';\n    const inputValue = this.functionsUtil.BNify(this.state.inputValue[this.state.action]);\n\n    if (inputValue.gt(this.props.tokenBalance)) {\n      return false;\n    }\n\n    const convertedAmount = await this.functionsUtil.convertTokenBalance(inputValue, this.props.selectedToken, this.props.tokenConfig, isRisk);\n    let minAmountForMint = this.functionsUtil.BNify(this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'minAmountForMint']));\n    let minAmountForMintReached = convertedAmount.gte(minAmountForMint);\n\n    // Check token minAmountForMint\n    if (minAmountForMintReached) {\n      if (this.props.tokenConfig.deposit && this.props.tokenConfig.deposit.minAmountForMint && convertedAmount.lt(this.props.tokenConfig.deposit.minAmountForMint)) {\n        minAmountForMintReached = false;\n      } else {\n        [\n          maxUnlentPerc,\n          totalAUM\n        ] = await Promise.all([\n          maxUnlentPerc || this.functionsUtil.genericContractCall(this.props.tokenConfig.idle.token, 'maxUnlentPerc'),\n          totalAUM || this.functionsUtil.loadAssetField('pool', this.props.selectedToken, this.props.tokenConfig, this.props.account)\n        ]);\n\n        if (maxUnlentPerc && totalAUM) {\n          const depositPerc = inputValue.div(totalAUM).times(100);\n          maxUnlentPerc = this.functionsUtil.BNify(maxUnlentPerc);\n          const maxUnlentPercFormatted = maxUnlentPerc.div(1e3).times(2);\n          if (depositPerc.lt(maxUnlentPercFormatted)) {\n            minAmountForMintReached = false;\n          } else if (totalAUM.times(maxUnlentPercFormatted.div(100)).gt(minAmountForMint)) {\n            showPoolPerc = true;\n            minAmountForMint = totalAUM.times(maxUnlentPercFormatted.div(100));\n          }\n        }\n      }\n    }\n\n    this.setState({\n      totalAUM,\n      showPoolPerc,\n      maxUnlentPerc,\n      minAmountForMint,\n      minAmountForMintReached\n    });\n  }\n\n  async calculateCurveSlippage() {\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)) {\n      return false;\n    }\n\n    const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve', 'poolContract']);\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount, curvePoolContractInfo.decimals);\n    const newState = {};\n\n    switch (this.state.action) {\n      case 'deposit':\n        newState.depositCurveBalance = amount;\n        newState.depositCurveSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token, normalizedAmount, true);\n        break;\n      case 'redeem':\n        // newState.redeemBalance = amount;\n        // newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n        break;\n      default:\n        break;\n    }\n    // console.log('calculateCurveSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  checkUseProxyContract = () => {\n    const proxyContract = this.state.actionProxyContract[this.state.action];\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'metaTransactionsEnabled']) && this.state.metaTransactionsEnabled;\n    return ((depositErc20ForwarderEnabled || depositMetaTransactionsEnabled) && proxyContract && this.props.biconomy);\n  }\n\n  approveContract = async (callbackApprove, callbackReceiptApprove) => {\n    if (this.state.depositCurveEnabled) {\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve', 'depositContract']);\n      this.functionsUtil.enableERC20(this.props.selectedToken, curveDepositContract.address, callbackApprove, callbackReceiptApprove);\n    } else {\n      // Check Proxy Contract Approved for Deposit with Biconomy\n      const useProxyContract = this.checkUseProxyContract();\n      if (useProxyContract) {\n        const proxyContract = this.state.actionProxyContract[this.state.action];\n        this.functionsUtil.enableERC20(this.props.selectedToken, proxyContract.address, callbackApprove, callbackReceiptApprove);\n      } else {\n        this.functionsUtil.enableERC20(this.props.selectedToken, this.props.tokenConfig.idle.address, callbackApprove, callbackReceiptApprove);\n      }\n    }\n  }\n\n  checkTokenApproved = async () => {\n    let tokenApproved = false;\n    if (this.state.depositCurveEnabled) {\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve', 'depositContract']);\n      tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken, curveDepositContract.address, this.props.account);\n    } else {\n      // Check Proxy Contract Approved for Deposit with Biconomy\n      const useProxyContract = this.checkUseProxyContract();\n      if (useProxyContract) {\n        // Check for Permit Deposit\n        const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n        if (depositErc20ForwarderEnabled) {\n          const permitEnabled = this.functionsUtil.getGlobalConfig(['permit', this.props.selectedToken]);\n          if (permitEnabled) {\n            return true;\n          }\n        }\n        // Check proxy contract approved\n        const proxyContract = this.state.actionProxyContract[this.state.action];\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken, proxyContract.address, this.props.account);\n        // console.log('tokenApproved 1',this.props.selectedToken, proxyContract.address, this.props.account, tokenApproved);\n      } else {\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken, this.props.tokenConfig.idle.address, this.props.account);\n        // console.log('tokenApproved 2',this.props.selectedToken, this.props.tokenConfig.idle.address, this.props.account, tokenApproved);\n      }\n    }\n\n    return tokenApproved;\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = await this.checkTokenApproved();\n\n    if (tokenApproved) {\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve: {\n            txHash: null,\n            loading: false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx, error) => {\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.props.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error) {\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error') {\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      // console.log('callbackApprove',tx,tx.status === 'success');\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve: {\n            txHash: null,\n            loading: false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve: {\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.approveContract(callbackApprove, callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve: {\n          txHash: null,\n          loading: true\n        }\n      }\n    }));\n  }\n\n  loadTokenInfo = async () => {\n\n    if (this.state.componentMounted) {\n      this.setState({\n        componentMounted: false\n      });\n    }\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve', 'availableTokens', this.props.tokenConfig.idle.token]);\n    const curveTokenEnabled = curveConfig.enabled && curveTokenConfig && curveTokenConfig.enabled;\n\n    const [\n      tokenApproved,\n      contractPaused,\n      curveSwapContract,\n      curveDepositContract,\n      unlentBalance,\n      { migrationEnabled },\n      curveTokenBalance,\n    ] = await Promise.all([\n      this.checkTokenApproved(),\n      this.functionsUtil.checkContractPaused(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract(),\n      this.functionsUtil.getUnlentBalance(this.props.tokenConfig),\n      this.functionsUtil.checkMigration(this.props.tokenConfig, this.props.account),\n      curveTokenEnabled ? this.functionsUtil.getCurveTokenBalance(this.props.account) : null\n    ]);\n\n    const canDeposit = this.props.tokenBalance && this.functionsUtil.BNify(this.props.tokenBalance).gt(0);\n    const canRedeem = this.props.idleTokenBalance && this.functionsUtil.BNify(this.props.idleTokenBalance).gt(0);\n\n    const canDepositCurve = curveTokenEnabled && canDeposit;\n    const depositCurveEnabled = canDepositCurve;\n\n    const showETHWrapperEnabled = this.props.selectedToken === 'WETH' && (this.state.showETHWrapperEnabled || !canDeposit);\n\n    const canRedeemCurve = curveTokenEnabled && curveTokenBalance && curveTokenBalance.gt(0);\n    const redeemCurveEnabled = canRedeemCurve;\n\n    const tokenGovTokens = this.functionsUtil.getTokenGovTokens(this.props.tokenConfig);\n\n    const newState = { ...this.state };\n\n    // Check curve deposit enabled\n    if (newState.depositCurveEnabled && !curveTokenEnabled) {\n      newState.depositCurveEnabled = false;\n    }\n\n    newState.canRedeem = canRedeem;\n    newState.canDeposit = canDeposit;\n    newState.unlentBalance = unlentBalance;\n    newState.tokenApproved = tokenApproved;\n    newState.tokenGovTokens = tokenGovTokens;\n    newState.contractPaused = contractPaused;\n    newState.canRedeemCurve = canRedeemCurve;\n    newState.canDepositCurve = canDepositCurve;\n    newState.migrationEnabled = migrationEnabled;\n    newState.curveTokenBalance = curveTokenBalance;\n    newState.curveSwapContract = curveSwapContract;\n    newState.redeemCurveEnabled = redeemCurveEnabled;\n    newState.depositCurveEnabled = depositCurveEnabled;\n    newState.curveDepositContract = curveDepositContract;\n    newState.showETHWrapperEnabled = showETHWrapperEnabled;\n\n    newState.txError = {\n      redeem: false,\n      deposit: false\n    };\n    newState.processing = {\n      redeem: {\n        txHash: null,\n        loading: false\n      },\n      deposit: {\n        txHash: null,\n        loading: false\n      },\n      approve: {\n        txHash: null,\n        loading: false\n      },\n      boost: {\n        txHash: null,\n        loading: false\n      }\n    };\n    newState.inputValue = {\n      boost: null,\n      redeem: null,\n      deposit: null\n    };\n    newState.fastBalanceSelector = {\n      boost: null,\n      redeem: null,\n      deposit: null\n    };\n\n    newState.componentMounted = true;\n\n    this.setState(newState, () => {\n      this.checkAction();\n      this.loadAPY();\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      erc20ForwarderTx: null,\n      loadingErc20ForwarderTx: false,\n      processing: {\n        ...prevState.processing,\n        approve: {\n          txHash: null,\n          loading: false\n        },\n        [this.state.action]: {\n          txHash: null,\n          loading: false\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const redeemGovTokens = this.state.redeemGovTokens;\n    const selectedPercentage = this.getFastBalanceSelector();\n    const inputValue = this.state.inputValue[this.state.action];\n    const redeemSkipGov = this.state.redeemSkipGov && this.state.redeemSkipGovTokens.length > 0 && this.state.agreeSkipGovTokens;\n\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'metaTransactionsEnabled']) && this.state.metaTransactionsEnabled;\n\n    let loading = true;\n\n    switch (this.state.action) {\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)) {\n          return false;\n        }\n\n        if (!this.state.tokenApproved) {\n          return this.approveToken();\n        }\n\n        if (localStorage) {\n          this.functionsUtil.setLocalStorage('redirectToFundsAfterLogged', 0);\n        }\n\n        this.setState({\n          lendingProcessing: this.props.account,\n          lendAmount: '',\n          genericError: '',\n        });\n\n        const callbackDeposit = (tx, error) => {\n\n          if (!tx && error) {\n            tx = {\n              status: 'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.props.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error) {\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error') {\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]: {\n                txHash: null,\n                loading: false\n              }\n            }\n          }));\n\n          if (txSucceeded) {\n            this.setState((prevState) => ({\n              activeModal: 'share',\n              inputValue: {\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if ((this.state.metaTransactionsEnabled || this.state.erc20ForwarderEnabled) && txError) {\n            this.setState({\n              erc20ForwarderTx: null,\n              loadingErc20ForwarderTx: false,\n              txError: {\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          // console.log('callbackReceiptDeposit',tx);\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]: {\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n        const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve', 'availableTokens', this.props.tokenConfig.idle.token, 'enabled']);\n\n        // Curve Deposit\n        if (curveTokenEnabled && this.state.depositCurveEnabled) {\n\n          const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve', 'poolContract']);\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue, curvePoolContractInfo.decimals);\n\n          const amounts = await this.functionsUtil.getCurveAmounts(this.props.tokenConfig.idle.token, tokensToDeposit);\n          let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n          if (this.state.maxSlippage) {\n            minMintAmount = this.functionsUtil.BNify(minMintAmount);\n            minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n            minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n          }\n\n          const depositParams = [amounts, minMintAmount];\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, callbackDeposit, callbackReceiptDeposit);\n          // Normal Deposit\n        } else {\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue, this.props.tokenConfig.decimals);\n\n          // const gasLimitDeposit = this.functionsUtil.BNify(1000000);\n          let depositParams = [];\n\n          // Use Proxy Contract if enabled\n          const useProxyContract = this.checkUseProxyContract();\n          if (useProxyContract) {\n            const mintProxyContractInfo = this.state.actionProxyContract[this.state.action];\n            const mintProxyContract = mintProxyContractInfo.contract;\n\n            // Use Meta-Transactions\n            if (depositMetaTransactionsEnabled) {\n              depositParams = [tokensToDeposit, this.props.tokenConfig.idle.address];\n              const functionCall = mintProxyContract.methods[mintProxyContractInfo.function](...depositParams);\n              const functionSignature = functionCall.encodeABI();\n              // console.log('mintProxyContract',mintProxyContractInfo.function,depositParams);\n              // if (this.state.metaTransactionsEnabled){\n              contractSendResult = await this.functionsUtil.sendBiconomyTxWithPersonalSign(mintProxyContractInfo.name, functionSignature, callbackDeposit, callbackReceiptDeposit);\n              // } else {\n              //   contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n              // }\n              // Use Erc20 Forwarder\n            } else if (depositErc20ForwarderEnabled) {\n\n              // Check if the deposit method require the nonce\n              const methodAbi = mintProxyContractInfo.contract._jsonInterface.find(f => f.name === mintProxyContractInfo.function);\n              const useNonce = methodAbi ? methodAbi.inputs.find(i => i.name === 'nonce') : true;\n\n              // Build ERC20 Forwarder Tx\n              if (!this.state.erc20ForwarderTx) {\n                this.setState({\n                  txError: {\n                    [this.state.action]: false\n                  },\n                  loadingErc20ForwarderTx: true\n                }, async () => {\n                  const erc20ForwarderContract = this.state.erc20ForwarderContract[this.state.action];\n                  const signedParameters = await this.functionsUtil.signPermit(this.props.selectedToken, this.props.account, erc20ForwarderContract.name, 0, tokensToDeposit);\n\n                  // console.log('signedParameters_1',signedParameters);\n\n                  if (signedParameters) {\n\n                    const { expiry, nonce, r, s, v } = signedParameters;\n\n                    if (useNonce) {\n                      depositParams = [tokensToDeposit, parseInt(nonce), expiry, v, r, s];\n                    } else {\n                      depositParams = [tokensToDeposit, expiry, v, r, s];\n                    }\n\n                    if (mintProxyContractInfo.function === 'foo') {\n                      depositParams = [];\n                    }\n\n                    // console.log('permitAndDeposit',mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams);\n\n                    // contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n\n                    const permitType = erc20ForwarderContract.permitType;\n                    const functionCall = erc20ForwarderContract.contract.methods[erc20ForwarderContract.function](...depositParams);\n                    const functionSignature = functionCall.encodeABI();\n\n                    // console.log('functionSignature',permitType, erc20ForwarderContract.function, depositParams);\n\n                    let gasLimit = null;\n                    try {\n                      gasLimit = await functionCall.estimateGas({ from: this.props.account }); // 5000000;\n                      if (gasLimit) {\n                        gasLimit = this.functionsUtil.BNify(gasLimit).times(1.2);\n                      } else {\n                        gasLimit = this.functionsUtil.BNify(1000000);\n                      }\n                    } catch (error) {\n                      // console.log('Gas Estimate - Error: ',error);\n                    }\n\n                    if (!gasLimit) {\n                      gasLimit = this.functionsUtil.BNify(1000000);\n                    }\n\n                    // console.log('gasEstimate',mintProxyContractInfo.name, depositParams, parseFloat(gasLimit));\n\n                    // debugger;\n\n                    const erc20ForwarderTx = await this.functionsUtil.buildBiconomyErc20ForwarderTx(erc20ForwarderContract.name, this.props.tokenConfig.address, permitType, functionSignature, gasLimit);\n                    // console.log('erc20ForwarderTx',erc20ForwarderTx);\n                    return this.setState({\n                      erc20ForwarderTx,\n                      loadingErc20ForwarderTx: false\n                    });\n                  } else {\n                    return this.setState((prevState) => ({\n                      processing: {\n                        ...prevState.processing,\n                        [this.state.action]: {\n                          txHash: null,\n                          loading: false\n                        }\n                      },\n                      signedParameters: null,\n                      erc20ForwarderTx: null,\n                      loadingErc20ForwarderTx: false\n                    }));\n                  }\n                });\n                // Send ERC20 Forwarder Tx\n              } else {\n                this.setState({\n                  txError: {\n                    [this.state.action]: false\n                  },\n                  loadingErc20ForwarderTx: true\n                }, async () => {\n                  const metaInfo = {};\n                  const permitOptions = {};\n                  const erc20ForwarderContract = this.state.erc20ForwarderContract[this.state.action];\n                  const erc20ForwarderBaseContract = this.functionsUtil.getGlobalConfig(['contract', 'methods', this.state.action, 'erc20ForwarderProxyContract', 'forwarder']);\n\n                  const permitValue = `${tokensToDeposit}00`;\n                  const incrementNonce = 1; // useNonce ? 1 : 0;\n                  const signedParameters = await this.functionsUtil.signPermit(this.props.selectedToken, this.props.account, erc20ForwarderBaseContract.name, incrementNonce, permitValue);\n\n                  // console.log('signedParameters_2',signedParameters);\n\n                  if (signedParameters) {\n\n                    this.setState({\n                      signedParameters\n                    });\n\n                    const permitConfig = this.functionsUtil.getGlobalConfig(['permit', this.props.selectedToken]);\n                    const setValue = permitConfig.type.find(t => t.name === 'value');\n\n                    const { expiry, nonce, r, s, v } = signedParameters;\n                    permitOptions.v = v;\n                    permitOptions.r = r;\n                    permitOptions.s = s;\n                    permitOptions.allowed = true;\n                    permitOptions.expiry = parseInt(expiry);\n                    permitOptions.holder = this.props.account;\n                    permitOptions.value = setValue ? permitValue : 0;\n                    permitOptions.nonce = parseInt(nonce.toString());\n                    permitOptions.spender = erc20ForwarderBaseContract.address;\n\n                    metaInfo.permitData = permitOptions;\n                    metaInfo.permitType = erc20ForwarderContract.permitType;\n\n                    // console.log('sendBiconomyTxWithErc20Forwarder',permitOptions,metaInfo);\n\n                    await this.functionsUtil.asyncTimeout(200);\n\n                    contractSendResult = await this.functionsUtil.sendBiconomyTxWithErc20Forwarder(this.state.erc20ForwarderTx.request, metaInfo, callbackDeposit, callbackReceiptDeposit);\n\n                    this.setState({\n                      erc20ForwarderTx: null,\n                      loadingErc20ForwarderTx: false\n                    });\n                  } else {\n                    return this.setState((prevState) => ({\n                      processing: {\n                        ...prevState.processing,\n                        [this.state.action]: {\n                          txHash: null,\n                          loading: false\n                        }\n                      },\n                      signedParameters: null,\n                      erc20ForwarderTx: null,\n                      loadingErc20ForwarderTx: false\n                    }));\n                  }\n                });\n              }\n            }\n            // Use main contract if no proxy contract exists\n          } else {\n            /*\n            let _skipMint = !this.state.directMint && this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMint']);\n            _skipMint = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : _skipMint;\n\n            // Check if deposited amount is greated that general lower limit for direct mint\n            if (_skipMint && this.state.minAmountForMintReached){\n              _skipMint = false;\n            }\n            */\n            // Always skip mint\n            let _skipMint = true;\n\n            const _referral = this.getReferralAddress() || '0x0000000000000000000000000000000000000000';\n            depositParams = [tokensToDeposit, _skipMint, _referral];\n            // console.log('depositParams',depositParams);\n            contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'mintIdleToken', depositParams, callbackDeposit, callbackReceiptDeposit);\n          }\n        }\n        break;\n      case 'redeem':\n\n        if (redeemGovTokens) {\n          const callbackRedeem = (tx, error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_gov`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: 0\n            };\n\n            if (error) {\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error') {\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]: {\n                  txHash: null,\n                  loading: false\n                }\n              }\n            }));\n\n            if (txSucceeded) {\n              this.setState((prevState) => ({\n                inputValue: {\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]: {\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'redeemIdleToken', [0], callbackRedeem, callbackReceiptRedeem);\n\n        } else {\n\n          if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)) {\n            return false;\n          }\n\n          const txData = {\n            value: this.functionsUtil.BNify(inputValue)\n          };\n\n          let idleTokenToRedeem = null;\n          if (selectedPercentage) {\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage);\n          } else {\n            const idleTokenPriceWithFee = await this.functionsUtil.getIdleTokenPriceWithFee(this.props.tokenConfig, this.props.account)\n            idleTokenToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue, this.props.tokenConfig.decimals)).div(idleTokenPriceWithFee);\n          }\n\n          // Check if idleTokens to redeem > idleToken balance\n          if (idleTokenToRedeem.gt(this.functionsUtil.BNify(this.props.idleTokenBalance))) {\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance);\n          }\n\n          // Normalize number\n          idleTokenToRedeem = this.functionsUtil.normalizeTokenAmount(idleTokenToRedeem, 18);\n\n          if (!idleTokenToRedeem) {\n            return false;\n          }\n\n          const callbackRedeem = (tx, error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_partial`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: parseInt(inputValue)\n            };\n\n            if (error) {\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error') {\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]: {\n                  txHash: null,\n                  loading: false\n                }\n              }\n            }));\n\n            if (txSucceeded) {\n              this.setState((prevState) => ({\n                inputValue: {\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]: {\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          let redeemMethod = 'redeemIdleToken';\n          let redeemParams = [idleTokenToRedeem];\n\n          if (redeemSkipGov) {\n            redeemMethod = 'redeemIdleTokenSkipGov';\n            const _skipGovTokenRedeem = await this.getSkippedGovTokensFlags();\n            redeemParams.push(_skipGovTokenRedeem);\n          }\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, redeemMethod, redeemParams, callbackRedeem, callbackReceiptRedeem, txData);\n        }\n        break;\n      default: // Reset loading if not handled action\n        loading = false;\n        break;\n    }\n\n    if (contractSendResult !== false || loading !== this.state.processing[this.state.action].loading) {\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]: {\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  showMaxSlippage = () => {\n    this.setState({\n      showMaxSlippage: true\n    });\n  }\n\n  checkAction = () => {\n    let action = this.state.action;\n\n    switch (action) {\n      case 'redeem':\n        if (!this.state.canRedeem) {\n          action = 'deposit';\n        }\n        break;\n      default:\n        break;\n    }\n\n    if (action !== this.state.action) {\n      this.setState({\n        action\n      }, () => {\n        this.checkButtonDisabled();\n      });\n    } else {\n      this.checkButtonDisabled();\n    }\n  }\n\n  checkButtonDisabled = (amount = null) => {\n\n    if (!this.state.action) {\n      return false;\n    }\n\n    if (!amount) {\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action) {\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && (amount.lte(0) || amount.gt(this.props.tokenBalance)));\n        break;\n      case 'redeem':\n        buttonDisabled = !this.state.canRedeemCurve && !this.state.redeemGovTokens && (buttonDisabled || (!amount || amount.lte(0) || amount.gt(this.props.redeemableBalance)));\n\n        if (!buttonDisabled && this.state.redeemSkipGov && this.state.redeemSkipGovTokens.length > 0 && !this.state.agreeSkipGovTokens) {\n          buttonDisabled = true;\n        }\n        // console.log('checkButtonDisabled',this.state.redeemSkipGov,this.state.redeemSkipGovTokens.length,this.state.agreeSkipGovTokens,buttonDisabled);\n        break;\n      default:\n        break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null) {\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch (this.state.action) {\n      case 'deposit':\n        amount = this.props.tokenBalance ? this.functionsUtil.BNify(this.props.tokenBalance).times(selectedPercentage) : null;\n        break;\n      case 'redeem':\n        amount = this.props.redeemableBalance ? this.functionsUtil.BNify(this.props.redeemableBalance).times(selectedPercentage) : null;\n        break;\n      default:\n        break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue: {\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null) {\n      return false;\n    }\n\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action) {\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector: {\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  changeInputValue = async (e) => {\n    if (!this.state.action) {\n      return false;\n    }\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector: {\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue: {\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()) {\n      case 'deposit':\n\n        break;\n      case 'redeem':\n        if (!this.state.canRedeem && !this.state.canRedeemCurve) {\n          action = null;\n        }\n        break;\n      default:\n        action = null;\n        break;\n    }\n\n    if (action !== null) {\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig) {\n      return null;\n    }\n\n\n    const viewOnly = this.props.connectorName === 'custom';\n    const currentNetwork = this.functionsUtil.getCurrentNetwork();\n\n    const isDepositDisabled = this.props.tokenConfig.canDeposit && !this.props.tokenConfig.canDeposit.enabled ? true : false;\n    // const depositDisabledMessage1 = isDepositDisabled && this.props.tokenConfig.canDeposit.disabledMessageDepositKey ? this.functionsUtil.getGlobalConfig(['messages', this.props.tokenConfig.canDeposit.disabledMessageDepositKey]) : null;\n    // const depositDisabledMessage2 = this.state.canRedeem ? this.functionsUtil.getGlobalConfig(['messages', this.props.tokenConfig.canDeposit.disabledMessageRedeemKey]) : \"\";\n    const depositDisabledMessage = isDepositDisabled ? (this.state.canRedeem && this.props.tokenConfig.canDeposit.disabledMessageRedeemKey ? this.functionsUtil.getGlobalConfig(['messages', this.props.tokenConfig.canDeposit.disabledMessageRedeemKey]) : (this.props.tokenConfig.canDeposit.disabledMessageDepositKey ? this.functionsUtil.getGlobalConfig(['messages', this.props.tokenConfig.canDeposit.disabledMessageDepositKey]) : null) ) : null;\n\n    const govTokensDisabled = this.props.tokenConfig.govTokensDisabled;\n    const govTokensEnabled = !govTokensDisabled && this.functionsUtil.getGlobalConfig(['strategies', this.props.selectedStrategy, 'govTokensEnabled']) && Object.keys(this.state.tokenGovTokens).length > 0;\n    const skipMintForDepositEnabled = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : true;\n    const skipMintCheckboxEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'skipMintCheckboxEnabled']) && skipMintForDepositEnabled;\n\n    const showRedeemFlow = this.state.canRedeem && (!this.state.redeemCurveEnabled || this.state.showRedeemFlow) && this.state.action === 'redeem';\n\n    const redeemGovTokenEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'redeemGovTokens', 'enabled']) && govTokensEnabled && showRedeemFlow;// && this.props.govTokensBalance.gt(0);\n    const redeemGovTokens = redeemGovTokenEnabled && this.state.redeemGovTokens;\n\n    const redeemSkipGovConfig = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'redeemSkipGov']);\n    const redeemSkipGovEnabled = redeemSkipGovConfig && !redeemSkipGovConfig.disabledTokens.includes(this.props.tokenConfig.idle.token) && govTokensEnabled && showRedeemFlow;\n    const redeemSkipGov = redeemSkipGovEnabled && this.state.redeemSkipGov && Object.keys(this.props.govTokensUserBalances).length > 0 && this.props.govTokensBalance.gt(0);\n    const redeemSkipGovNoTokens = redeemSkipGovEnabled && this.state.redeemSkipGov && (!Object.keys(this.props.govTokensUserBalances).length || this.props.govTokensBalance.lte(0));\n\n\n    const showAdvancedRedeemOptions = redeemGovTokenEnabled || redeemSkipGovEnabled;\n    // console.log('showAdvancedRedeemOptions',showAdvancedRedeemOptions,redeemGovTokenEnabled,redeemSkipGovEnabled,govTokensEnabled,showRedeemFlow);\n\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'erc20ForwarderEnabled']);\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'metaTransactionsEnabled']);\n    const depositErc20ForwarderEnabledTokens = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'erc20ForwarderProxyContract', 'tokens']);\n\n    // Biconomy Start\n    const metaTransactionsAvailable = depositMetaTransactionsEnabled && this.props.biconomy && this.state.actionProxyContract[this.state.action];\n    const useMetaTx = metaTransactionsAvailable && this.state.metaTransactionsEnabled;\n\n    const erc20ForwarderEnabled = depositErc20ForwarderEnabled && Object.keys(depositErc20ForwarderEnabledTokens).includes(this.props.selectedToken) && depositErc20ForwarderEnabledTokens[this.props.selectedToken].enabled && this.props.biconomy && this.props.erc20ForwarderClient && this.state.actionProxyContract[this.state.action] && !isDepositDisabled;\n\n    // console.log(erc20ForwarderEnabled,depositErc20ForwarderEnabled,this.props.biconomy,this.props.erc20ForwarderClient,this.state.actionProxyContract[this.state.action]);\n    // Biconomy End\n\n    const totalBalance = this.state.action === 'deposit' ? this.props.tokenBalance : this.props.redeemableBalance;\n    const migrateText = this.state.migrationEnabled && this.props.tokenConfig.migration.message !== undefined ? this.props.tokenConfig.migration.message : null;\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve', 'availableTokens', this.props.tokenConfig.idle.token, 'enabled']);\n\n    const depositCurve = curveTokenEnabled && this.state.depositCurveEnabled && this.state.action === 'deposit';\n\n    const showDepositOptions = this.state.action === 'deposit' && !this.state.contractPaused && (curveTokenEnabled || this.state.tokenApproved);\n\n    const showDepositCurve = showDepositOptions && curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canDepositCurve && this.state.action === 'deposit';\n    const showRedeemCurve = curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canRedeemCurve && this.state.action === 'redeem';\n\n    const showCurveSlippage = depositCurve && this.state.depositCurveSlippage && this.state.depositCurveBalance && !this.state.buttonDisabled;\n\n    const showRebalanceOption = false && this.state.canDeposit && skipMintCheckboxEnabled && this.state.action === 'deposit';\n    const showAdvancedDepositOptions = showDepositCurve || showRebalanceOption;\n\n    const batchDepositInfo = this.functionsUtil.getGlobalConfig(['tools','batchDeposit']);\n\n    const batchDepositEnabled = batchDepositInfo.enabled && typeof batchDepositInfo.props.availableTokens[this.props.tokenConfig.idle.token] !== 'undefined' && batchDepositInfo.availableNetworks.includes(currentNetwork.id);\n    \n    const batchDepositDepositEnabled = batchDepositInfo.depositEnabled;\n\n    const showBatchDeposit = !useMetaTx && batchDepositEnabled && batchDepositDepositEnabled && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    const ethWrapperInfo = this.functionsUtil.getGlobalConfig(['tools', 'ethWrapper']);\n    const ETHWrapperComponent = ethWrapperInfo.subComponent;\n    const showETHWrapper = this.props.selectedToken === 'WETH' && ethWrapperInfo.enabled && ethWrapperInfo.availableNetworks.includes(currentNetwork.id) && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    const polygonBridgeInfo = this.functionsUtil.getGlobalConfig(['tools','polygonBridge']);\n    // const PolygonBridgeComponent = polygonBridgeInfo.subComponent;\n    const polygonNetworkId = this.functionsUtil.getGlobalConfig(['network','providers','polygon','networkPairs',currentNetwork.id]);\n    // const polygonNetwork = this.functionsUtil.getGlobalConfig(['network','availableNetworks',polygonNetworkId]);\n\n    const canPerformAction = /*!depositCurve && !this.state.redeemCurveEnabled && */((this.state.action === 'deposit' && this.state.canDeposit && !isDepositDisabled) || (this.state.action === 'redeem' && this.state.canRedeem) || redeemGovTokens) && /*(!this.state.showETHWrapperEnabled || this.state.action === 'redeem') && */(!this.state.showPolygonBridgeEnabled || this.state.action === 'redeem');\n    const showActionFlow = !redeemGovTokens && canPerformAction;\n\n    const showBuyFlow = this.state.componentMounted && currentNetwork.provider === 'infura' && (!showDepositCurve || this.state.showBuyFlow) && !this.state.depositCurveEnabled && this.state.tokenApproved && !this.state.contractPaused && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.action === 'deposit' && !isDepositDisabled && !this.state.canDeposit && !this.state.showETHWrapperEnabled;\n    const showPolygonBridge = this.state.componentMounted && this.state.action === 'deposit' && !this.state.canDeposit && currentNetwork.provider === 'polygon';\n    const showPolygonBridgeBanner = !showPolygonBridge && currentNetwork.provider === 'polygon' && polygonNetworkId && polygonBridgeInfo.enabled && this.state.action === 'deposit';\n\n    const buyToken = this.functionsUtil.BNify(this.props.accountBalance).gt(0) ? this.props.selectedToken : this.functionsUtil.getBaseToken();\n\n    const _referral = this.getReferralAddress();\n    const showReferral = _referral && this.state.action === 'deposit' && showActionFlow && !showBuyFlow;\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1, 0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          <Box\n            width={1}\n          >\n            <Text mb={1}>\n              Select your asset:\n            </Text>\n            <AssetSelector\n              {...this.props}\n            />\n          </Box>\n          {\n            viewOnly ? (\n              <IconBox\n                cardProps={{\n                  mt: 3\n                }}\n                icon={'Visibility'}\n                text={'You are using Idle in \"Read-Only\" mode.<br />Logout and connect with your wallet to interact.'}\n              />\n            ) : (\n                <Migrate\n                  {...this.props}\n                  migrateTextBefore={migrateText}\n                  migrateText={migrateText !== null ? '' : null}\n                  toggleSkipMigration={this.toggleSkipMigration.bind(this)}\n                >\n                  {\n                    !this.props.account ? (\n                      <ConnectBox\n                        {...this.props}\n                      />\n                    ) : this.state.componentMounted ? (\n                      this.state.action && (\n                        <Box\n                          width={1}\n                        >\n                          <Flex\n                            mt={2}\n                            flexDirection={'column'}\n                          >\n                            <Text mb={2}>\n                              Choose the action:\n                          </Text>\n\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              justifyContent={'space-between'}\n                            >\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  width: 0.48,\n                                  onMouseDown: () => {\n                                    this.setAction('deposit');\n                                  }\n                                }}\n                                isInteractive={true}\n                                isActive={this.state.action === 'deposit'}\n\n                              >\n                                <Flex\n                                  my={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <TransactionField\n                                    transaction={{\n                                      action: 'deposit'\n                                    }}\n                                    fieldInfo={{\n                                      name: 'icon',\n                                      props: {\n                                        mr: 3\n                                      }\n                                    }}\n                                  />\n                                  <Text\n                                    fontSize={3}\n                                    fontWeight={3}\n                                  >\n                                    Deposit\n                                </Text>\n                                </Flex>\n                              </DashboardCard>\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  width: 0.48,\n                                  onMouseDown: () => {\n                                    this.setAction('redeem');\n                                  }\n                                }}\n                                isInteractive={true}\n                                isActive={this.state.action === 'redeem'}\n                                isDisabled={!this.state.canRedeem && !this.state.canRedeemCurve}\n                              >\n                                <Flex\n                                  my={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <TransactionField\n                                    transaction={{\n                                      action: 'redeem'\n                                    }}\n                                    fieldInfo={{\n                                      name: 'icon',\n                                      props: {\n                                        mr: 3\n                                      }\n                                    }}\n                                  />\n                                  <Text\n                                    fontSize={3}\n                                    fontWeight={3}\n                                  >\n                                    Redeem\n                                </Text>\n                                </Flex>\n                              </DashboardCard>\n                            </Flex>\n                            {\n                              isDepositDisabled && (\n                                <IconBox\n                                  cardProps={{\n                                    mt: 3\n                                  }}\n                                  iconProps={{\n                                    color:'#ffe000'\n                                  }}\n                                  icon={'Warning'}\n                                  text={depositDisabledMessage}\n                                >\n                                  {\n                                    this.state.action === 'deposit' && this.state.canRedeem && (\n                                      <RoundButton\n                                        buttonProps={{\n                                          mt:3,\n                                          width:[1,1/2]\n                                        }}\n                                        handleClick={e => this.setAction('redeem')}\n                                      >\n                                        Redeem\n                                      </RoundButton>\n                                    )\n                                  }\n                                </IconBox>\n                              )\n                            }\n                          </Flex>\n                          {\n                            (showRedeemFlow && this.state.unlentBalance) &&\n                            <DashboardCard\n                              cardProps={{\n                                py: 2,\n                                px: 2,\n                                mt: 3,\n                                display: 'flex',\n                                alignItems: 'center',\n                                flexDirection: 'column',\n                                justifyContent: 'center',\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={'LocalGasStation'}\n                                />\n                                <Text\n                                  px={2}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Available balance for Cheap Redeem\n                                </Text>\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'center'}\n                                    hoverColor={'copyColor'}\n                                  >\n                                    {this.state.unlentBalance.toFixed(4)} {this.props.selectedToken}\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.functionsUtil.getGlobalConfig(['messages', 'cheapRedeem'])}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              </Flex>\n                            </DashboardCard>\n                          }\n                          {\n                            showAdvancedRedeemOptions ? (\n                              <DashboardCard\n                                cardProps={{\n                                  pt: 2,\n                                  px: 2,\n                                  mt: 3,\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                  flexDirection: 'column',\n                                  justifyContent: 'center',\n                                  pb: this.state.showAdvancedOptions ? 3 : 2,\n                                }}\n                              >\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <Link\n                                    ml={1}\n                                    mainColor={'primary'}\n                                    hoverColor={'primary'}\n                                    onClick={this.toggleShowAdvancedOptions}\n                                  >\n                                    {this.state.showAdvancedOptions ? 'Hide' : 'Show'} advanced options\n                                </Link>\n                                  <Icon\n                                    size={'1.8em'}\n                                    color={'cellText'}\n                                    name={this.state.showAdvancedOptions ? 'ArrowDropUp' : 'ArrowDropDown'}\n                                  />\n                                </Flex>\n                                {\n                                  this.state.showAdvancedOptions &&\n                                  <Flex\n                                    mt={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      redeemGovTokenEnabled &&\n                                      <Flex\n                                        alignItems={'center'}\n                                        justifyContent={'row'}\n                                      >\n                                        <Checkbox\n                                          required={false}\n                                          checked={this.state.redeemGovTokens}\n                                          label={`Redeem governance tokens only`}\n                                          onChange={e => this.toggleRedeemGovTokens(e.target.checked)}\n                                        />\n                                        <Link\n                                          color={'link'}\n                                          hoverColor={'link'}\n                                          onClick={e => this.props.openTooltipModal('Redeem governance tokens', `This feature allows you to redeem just the amount of governance tokens accrued${this.props.govTokensBalance && this.props.govTokensBalance.gt(0) ? ` (~${this.props.govTokensBalance.toFixed(2)}$)` : null} without redeeming the underlying token.`)}\n                                        >\n                                          (read more)\n                                          </Link>\n                                      </Flex>\n                                    }\n                                    {\n                                      redeemSkipGovEnabled &&\n                                      <Flex\n                                        alignItems={'center'}\n                                        flexDirection={'row'}\n                                      >\n                                        <Checkbox\n                                          required={false}\n                                          checked={this.state.redeemSkipGov}\n                                          label={`Redeem without governance tokens`}\n                                          onChange={e => this.toggleRedeemSkipGov(e.target.checked)}\n                                        />\n                                        <Icon\n                                          mr={1}\n                                          size={'1.2em'}\n                                          name={'Warning'}\n                                          color={'#ffe000'}\n                                        />\n                                        <Link\n                                          color={'link'}\n                                          hoverColor={'link'}\n                                          onClick={e => this.props.openTooltipModal('Redeem without governance tokens', this.functionsUtil.getGlobalConfig(['messages', 'redeemSkipGov']))}\n                                        >\n                                          (read more)\n                                          </Link>\n                                      </Flex>\n                                    }\n                                  </Flex>\n                                }\n                              </DashboardCard>\n                            ) : showAdvancedDepositOptions ? (\n                              <DashboardCard\n                                cardProps={{\n                                  pt: 2,\n                                  px: 2,\n                                  mt: 3,\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                  flexDirection: 'column',\n                                  justifyContent: 'center',\n                                  pb: this.state.showAdvancedOptions ? 3 : 2,\n                                }}\n                              >\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <Link\n                                    ml={1}\n                                    mainColor={'primary'}\n                                    hoverColor={'primary'}\n                                    onClick={this.toggleShowAdvancedOptions}\n                                  >\n                                    {this.state.showAdvancedOptions ? 'Hide' : 'Show'} advanced options\n                                </Link>\n                                  <Icon\n                                    size={'1.8em'}\n                                    color={'cellText'}\n                                    name={this.state.showAdvancedOptions ? 'ArrowDropUp' : 'ArrowDropDown'}\n                                  />\n                                </Flex>\n                                {\n                                  this.state.showAdvancedOptions &&\n                                  <Flex\n                                    mt={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      showDepositCurve &&\n                                      <Flex\n                                        alignItems={'center'}\n                                        justifyContent={'row'}\n                                      >\n                                        <Checkbox\n                                          required={false}\n                                          disabled={this.state.directMint}\n                                          label={`Deposit in the Curve Pool`}\n                                          checked={this.state.depositCurveEnabled}\n                                          onChange={e => this.toggleDepositCurve(e.target.checked)}\n                                        />\n                                        <Link\n                                          mainColor={'primary'}\n                                          hoverColor={'primary'}\n                                          onClick={e => this.props.openTooltipModal('How Curve works', this.functionsUtil.getGlobalConfig(['messages', 'curveInstructions']))}\n                                        >\n                                          (read more)\n                                          </Link>\n                                      </Flex>\n                                    }\n                                    {\n                                      showRebalanceOption &&\n                                      <Flex\n                                        alignItems={'center'}\n                                        justifyContent={'row'}\n                                      >\n                                        <Checkbox\n                                          required={false}\n                                          label={`Rebalance the pool`}\n                                          checked={this.state.directMint}\n                                          disabled={this.state.depositCurveEnabled}\n                                          onChange={e => this.toggleSkipMint(e.target.checked)}\n                                        />\n                                        <Tooltip\n                                          placement={'bottom'}\n                                          message={this.functionsUtil.getGlobalConfig(['messages', 'directMint'])}\n                                        >\n                                          <Icon\n                                            size={'1em'}\n                                            color={'cellTitle'}\n                                            name={\"InfoOutline\"}\n                                          />\n                                        </Tooltip>\n                                      </Flex>\n                                    }\n                                  </Flex>\n                                }\n                              </DashboardCard>\n                            ) : (\n                                  <Flex\n                                    width={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      showDepositCurve && (\n                                        <Flex\n                                          width={1}\n                                          flexDirection={'column'}\n                                          justifyContent={'center'}\n                                        >\n                                          <DashboardCard\n                                            isRainbow={true}\n                                            cardProps={{\n                                              py: 3,\n                                              px: 2,\n                                              mt: 3,\n                                              display: 'flex',\n                                              alignItems: 'center',\n                                              flexDirection: 'column',\n                                              justifyContent: 'center',\n                                            }}\n                                          >\n                                            <Flex\n                                              width={1}\n                                              alignItems={'center'}\n                                              flexDirection={'column'}\n                                              justifyContent={'center'}\n                                            >\n                                              <Image\n                                                height={'1.8em'}\n                                                src={curveConfig.params.image}\n                                              />\n                                              <Text\n                                                mt={2}\n                                                px={2}\n                                                fontSize={1}\n                                                color={'dark-gray'}\n                                                textAlign={'center'}\n                                              >\n                                                Deposit your tokens in the Curve Pool and boost your APY up to {this.state.curveAPY ? this.state.curveAPY.toFixed(2) : '-'}%.\n                                          <Link\n                                                  ml={1}\n                                                  mainColor={'primary'}\n                                                  hoverColor={'primary'}\n                                                  onClick={e => this.props.openTooltipModal('How Curve works', this.functionsUtil.getGlobalConfig(['messages', 'curveInstructions']))}\n                                                >\n                                                  Read More\n                                          </Link>\n                                              </Text>\n                                              <Checkbox\n                                                mt={2}\n                                                required={false}\n                                                label={`Deposit in Curve`}\n                                                checked={this.state.depositCurveEnabled}\n                                                onChange={e => this.toggleDepositCurve(e.target.checked)}\n                                              />\n                                            </Flex>\n                                          </DashboardCard>\n                                          {\n                                            (!this.state.showBuyFlow && !this.state.depositCurveEnabled && !this.state.canDeposit) &&\n                                            <Link\n                                              textAlign={'center'}\n                                              hoverColor={'primary'}\n                                              onClick={e => this.setShowBuyFlow(true)}\n                                            >\n                                              I just want to deposit more {this.props.selectedToken}\n                                            </Link>\n                                          }\n                                        </Flex>\n                                      )\n                                    }\n                                    {\n                                      showRebalanceOption && (\n                                        <DashboardCard\n                                          cardProps={{\n                                            py: 3,\n                                            px: 2,\n                                            mt: 3,\n                                            display: 'flex',\n                                            alignItems: 'center',\n                                            flexDirection: 'column',\n                                            justifyContent: 'center',\n                                          }}\n                                        >\n                                          <Flex\n                                            width={1}\n                                            alignItems={'center'}\n                                            flexDirection={'column'}\n                                            justifyContent={'center'}\n                                          >\n                                            <Icon\n                                              size={'1.8em'}\n                                              color={'cellText'}\n                                              name={'InfoOutline'}\n                                            />\n                                            <Text\n                                              mt={1}\n                                              px={2}\n                                              fontSize={1}\n                                              color={'cellText'}\n                                              textAlign={'center'}\n                                            >\n                                              By checking this flag you can rebalance the pool and help all users gain an additional APR\n                                      </Text>\n                                          </Flex>\n                                          <Checkbox\n                                            mt={2}\n                                            required={false}\n                                            label={`Rebalance the pool`}\n                                            checked={this.state.directMint}\n                                            onChange={e => this.toggleSkipMint(e.target.checked)}\n                                          />\n                                        </DashboardCard>\n                                      )\n                                    }\n                                    {\n                                      redeemGovTokenEnabled && (\n                                        <DashboardCard\n                                          cardProps={{\n                                            py: 3,\n                                            px: 2,\n                                            mt: 3,\n                                            display: 'flex',\n                                            alignItems: 'center',\n                                            flexDirection: 'column',\n                                            justifyContent: 'center',\n                                          }}\n                                        >\n                                          <Flex\n                                            width={1}\n                                            alignItems={'center'}\n                                            flexDirection={'column'}\n                                            justifyContent={'center'}\n                                          >\n                                            <Icon\n                                              size={'1.8em'}\n                                              color={'cellText'}\n                                              name={'InfoOutline'}\n                                            />\n                                            <Text\n                                              mt={1}\n                                              px={2}\n                                              fontSize={1}\n                                              color={'cellText'}\n                                              textAlign={'center'}\n                                            >\n                                              By redeeming your {this.props.selectedToken} you will automatically get also the proportional amount of governance tokens accrued{this.props.govTokensBalance && this.props.govTokensBalance.gt(0) ? ` (~ $${this.props.govTokensBalance.toFixed(2)})` : null}.\n                                      </Text>\n                                          </Flex>\n                                          <Checkbox\n                                            mt={2}\n                                            required={false}\n                                            checked={this.state.redeemGovTokens}\n                                            label={`Redeem governance tokens only`}\n                                            onChange={e => this.toggleRedeemGovTokens(e.target.checked)}\n                                          />\n                                        </DashboardCard>\n                                      )\n                                    }\n                                  </Flex>\n                                )\n                          }\n                          {\n                            redeemSkipGov ? (\n                              <DashboardCard\n                                cardProps={{\n                                  mt: 2,\n                                  mb: 2,\n                                  py: 2,\n                                  px: 1\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                >\n                                  <Text\n                                    mt={1}\n                                    fontSize={2}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    Select the gov tokens you want to give away:\n                                  </Text>\n                                  <Flex\n                                    mt={2}\n                                    width={1}\n                                    boxShadow={0}\n                                    style={{\n                                      flexWrap: 'wrap'\n                                    }}\n                                    alignItems={'center'}\n                                    justifyContent={'center'}\n                                  >\n                                    {\n                                      Object.keys(this.props.govTokensUserBalances).map(token => {\n                                        const balance = this.props.govTokensUserBalances[token];\n                                        const isActive = this.state.redeemSkipGovTokens.includes(token);\n                                        const tokenConfig = this.functionsUtil.getGlobalConfig(['govTokens', token]);\n                                        return (\n                                          <Flex\n                                            p={2}\n                                            mb={1}\n                                            mx={1}\n                                            width={'auto'}\n                                            style={{\n                                              cursor: 'pointer'\n                                            }}\n                                            borderRadius={2}\n                                            flexDirection={'row'}\n                                            border={isActive ? 2 : 1}\n                                            key={`skipGovToken_${token}`}\n                                            justifyContent={'flex-start'}\n                                            backgroundColor={isActive ? 'menuHover' : 'cardBgHover'}\n                                            onClick={e => this.setRedeemSkipGovTokens(token, !this.state.redeemSkipGovTokens.includes(token))}\n                                          >\n                                            <Checkbox\n                                              m={0}\n                                              required={false}\n                                              checked={isActive}\n                                              onChange={e => this.setRedeemSkipGovTokens(token, e.target.checked)}\n                                            />\n                                            <AssetField\n                                              token={token}\n                                              tokenConfig={tokenConfig}\n                                              fieldInfo={{\n                                                name: 'icon',\n                                                props: {\n                                                  mr: 1,\n                                                  width: ['1.4em', '1.6em'],\n                                                  height: ['1.4em', '1.6em']\n                                                }\n                                              }}\n                                            />\n                                            <SmartNumber\n                                              ml={1}\n                                              fontSize={[0, 2]}\n                                              fontWeight={500}\n                                              maxPrecision={4}\n                                              color={'cellText'}\n                                              number={balance.toString()}\n                                            />\n                                          </Flex>\n                                        );\n                                      })\n                                    }\n                                  </Flex>\n                                </Flex>\n                              </DashboardCard>\n                            ) : redeemSkipGovNoTokens && (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 2,\n                                  my: 2\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    name={'MoneyOff'}\n                                    color={'cellText'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    You don't have any gov tokens to give away.\n                                </Text>\n                                </Flex>\n                              </DashboardCard>\n                            )\n                          }\n                          {\n                            redeemSkipGov && this.functionsUtil.BNify(this.state.skippedGovTokensBalance).gt(0) ? (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 2,\n                                  my: 2\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    name={'Warning'}\n                                    color={'#ffe000'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    fontSize={1}\n                                    color={'red'}\n                                    textAlign={'center'}\n                                  >\n                                    You are giving away {this.functionsUtil.formatMoney(this.state.skippedGovTokensBalance)}$ worth of governance tokens!\n                                </Text>\n                                  {\n                                    this.state.skipGovTokensGasSave && this.state.skipGovTokensGasSave.gte(0.0001) && (\n                                      <Text\n                                        mt={1}\n                                        fontSize={1}\n                                        color={'#00b84a'}\n                                        textAlign={'center'}\n                                      >\n                                        This will save you {this.state.skipGovTokensGasSave.toFixed(4)} ETH of gas (~{this.state.skipGovTokensGasSaveUSD.toFixed(2)}$)\n                                    </Text>\n                                    )\n                                  }\n                                  <Text\n                                    mt={1}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    To proceed with the redeem please give your authorization by checking the following flag:\n                                </Text>\n                                  <Checkbox\n                                    my={1}\n                                    required={false}\n                                    checked={this.state.agreeSkipGovTokens}\n                                    label={`I agree to give away my governance tokens`}\n                                    onChange={e => this.toggleAgreeSkipGovTokens(e.target.checked)}\n                                  />\n                                </Flex>\n                              </DashboardCard>\n                            ) : redeemSkipGov && this.state.redeemSkipGovTokens.length > 0 && (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  my: 2\n                                }}\n                              >\n                                <FlexLoader\n                                  flexProps={{\n                                    flexDirection: 'row'\n                                  }}\n                                  loaderProps={{\n                                    size: '25px',\n                                  }}\n                                  textProps={{\n                                    ml: 2\n                                  }}\n                                  text={'Loading estimated gas usage...'}\n                                />\n                              </DashboardCard>\n                            )\n                          }\n                          {\n                            showReferral && (\n                              <DashboardCard\n                                cardProps={{\n                                  py: 3,\n                                  px: 2,\n                                  mt: 3,\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                  flexDirection: 'column',\n                                  justifyContent: 'center',\n                                }}\n                              >\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    name={'Share'}\n                                    color={'cellText'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    px={2}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    You are depositing with the following referral address:\n                                </Text>\n                                  <Text\n                                    mt={1}\n                                    px={2}\n                                    fontSize={1}\n                                    fontWeight={500}\n                                    textAlign={'center'}\n                                    color={this.props.theme.colors.transactions.status.completed}\n                                  >\n                                    {_referral}\n                                  </Text>\n                                </Flex>\n                              </DashboardCard>\n                            )\n                          }\n                          {\n                            (metaTransactionsAvailable && !showBuyFlow && !this.state.contractPaused) ? (\n                              <DashboardCard\n                                cardProps={{\n                                  py: 3,\n                                  px: 2,\n                                  my: 3,\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                  flexDirection: 'column',\n                                  justifyContent: 'center',\n                                }}\n                              >\n                                {\n                                  this.state.metaTransactionsEnabled && this.state.txError[this.state.action] && this.state.actionProxyContract[this.state.action].approved ? (\n                                    <Flex\n                                      width={1}\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        name={'Warning'}\n                                        color={'cellText'}\n                                      />\n                                      <Text\n                                        mt={1}\n                                        fontSize={1}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        Seems like you are having some trouble with Meta-Transactions... Disable them by unchecking the box below and try again!\n                                    </Text>\n                                    </Flex>\n                                  ) : this.functionsUtil.getWalletProvider() === 'WalletConnect' && this.state.metaTransactionsEnabled ? (\n                                    <Flex\n                                      width={1}\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        name={'Warning'}\n                                        color={'cellText'}\n                                      />\n                                      <Text\n                                        mt={1}\n                                        fontSize={1}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        Please disable Meta-Transactions if you are using Argent Wallet to avoid failed transactions!\n                                    </Text>\n                                    </Flex>\n                                  ) : (\n                                        <Text\n                                          mt={1}\n                                          fontSize={1}\n                                          color={'cellText'}\n                                          textAlign={'center'}\n                                        >\n                                          Meta-Transactions are {this.state.metaTransactionsEnabled ? 'enabled' : 'disabled'} for {this.state.action}s!<br />\n                                          {\n                                            this.state.metaTransactionsEnabled && !this.state.actionProxyContract[this.state.action].approved && `Please either enable the Smart-Contract to enjoy gas-less ${this.state.action} or just disable meta-tx.`\n                                          }\n                                        </Text>\n                                      )\n                                }\n                                <Checkbox\n                                  mt={2}\n                                  required={false}\n                                  checked={this.state.metaTransactionsEnabled}\n                                  onChange={e => this.toggleMetaTransactionsEnabled(e.target.checked)}\n                                  label={`${this.functionsUtil.capitalize(this.state.action)} with Meta-Transaction`}\n                                />\n                              </DashboardCard>\n                            ) : (erc20ForwarderEnabled && !showBuyFlow && !this.state.contractPaused) && (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  my: 3,\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                  flexDirection: 'column',\n                                  justifyContent: 'center',\n                                }}\n                              >\n                                <Text\n                                  mb={2}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  How do you prefer to pay gas fees for this {this.state.action}?\n                                </Text>\n                                <Flex\n                                  width={[1, 0.7]}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'space-between'}\n                                >\n                                  <CardIconButton\n                                    {...this.props}\n                                    cardProps={{\n                                      py: 2,\n                                      px: [2, 3],\n                                      width: 0.48\n                                    }}\n                                    textProps={{\n                                      ml: [1, 2],\n                                    }}\n                                    text={this.props.selectedToken}\n                                    isActive={this.state.erc20ForwarderEnabled}\n                                    imageProps={{\n                                      height: this.props.isMobile ? '1.4em' : '1.8em',\n                                      width: this.props.isMobile ? '1.4em' : '1.8em'\n                                    }}\n                                    image={`/images/tokens/${this.props.selectedToken}.svg`}\n                                    handleClick={e => this.toggleErc20ForwarderEnabled(true)}\n                                  />\n                                  <CardIconButton\n                                    {...this.props}\n                                    cardProps={{\n                                      py: 2,\n                                      px: [2, 3],\n                                      width: 0.48\n                                    }}\n                                    textProps={{\n                                      ml: [1, 2],\n                                    }}\n                                    text={'ETH'}\n                                    isActive={!this.state.erc20ForwarderEnabled}\n                                    imageProps={{\n                                      height: this.props.isMobile ? '1.4em' : '1.8em',\n                                      width: this.props.isMobile ? '1.4em' : '1.8em'\n                                    }}\n                                    image={`/images/tokens/ETH.svg`}\n                                    handleClick={e => this.toggleErc20ForwarderEnabled(false)}\n                                  />\n                                </Flex>\n                                {\n                                  this.state.erc20ForwarderEnabled && this.state.txError[this.state.action] && (\n                                    <Text\n                                      mt={2}\n                                      fontSize={1}\n                                      color={'red'}\n                                      textAlign={'center'}\n                                    >\n                                      The meta-transaction cannot be executed due to insufficient funds, fund your wallet or select ETH and try again.\n                                  </Text>\n                                  )\n                                }\n                                {\n                                  /*\n                                  <Text\n                                    mt={2}\n                                    fontSize={'11px'}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    Powered by <ExtLink fontSize={'11px'} href={'https://biconomy.io'}>Biconomy</ExtLink>\n                                  </Text>\n                                  */\n                                }\n                              </DashboardCard>\n                            )\n                          }\n                          {\n                            (this.state.minAmountForMintReached && this.state.action === 'deposit') && (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  mt: 3\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    color={'cellText'}\n                                    name={'InfoOutline'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    fontSize={2}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    By depositing more than {this.functionsUtil.formatMoney(this.state.minAmountForMint)}$ {this.state.showPoolPerc ? `(${this.state.minAmountForMint.div(this.state.totalAUM).times(100).toFixed(0)}% of the pool)` : null} the pool will be automatically rebalanced, gas cost may be higher.\n                                </Text>\n                                </Flex>\n                              </DashboardCard>\n                            )\n                          }\n                          {\n                            showBatchDeposit ? (\n                              <Flex\n                                p={2}\n                                mt={3}\n                                width={1}\n                                borderRadius={2}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                                backgroundColor={'DashboardCard'}\n                                border={`1px solid ${this.props.theme.colors.primary}`}\n                              >\n                                <Link\n                                  textAlign={'center'}\n                                  hoverColor={'primary'}\n                                  href={`/#/dashboard/tools/${batchDepositInfo.route}/${this.props.tokenConfig.idle.token}`}\n                                >\n                                  Gas fees too high? Save gas with our Batch Deposit!\n                                </Link>\n                                <Icon\n                                  ml={1}\n                                  size={'1em'}\n                                  color={'primary'}\n                                  name={'LocalGasStation'}\n                                />\n                              </Flex>\n                            ) : showETHWrapper ? (\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <DashboardCard\n                                  cardProps={{\n                                    py: 3,\n                                    px: 2,\n                                    mt: 3,\n                                    display: 'flex',\n                                    alignItems: 'center',\n                                    flexDirection: 'column',\n                                    justifyContent: 'center',\n                                    pb: this.state.showAdvancedOptions ? 3 : 2,\n                                  }}\n                                >\n                                  <Flex\n                                    alignItems={'center'}\n                                    justifyContent={'row'}\n                                  >\n                                    <Checkbox\n                                      required={false}\n                                      checked={this.state.showETHWrapperEnabled}\n                                      label={`Convert your ETH to WETH`}\n                                      onChange={e => this.toggleShowETHWrapper(e.target.checked)}\n                                    />\n                                  </Flex>\n                                </DashboardCard>\n                                {\n                                  this.state.showETHWrapperEnabled &&\n                                  <ETHWrapperComponent\n                                    {...this.props}\n                                    action={'wrap'}\n                                    fullWidth={true}\n                                    toolProps={ethWrapperInfo.props}\n                                  />\n                                }\n                              </Flex>\n                            ) : showPolygonBridgeBanner && (\n                              <Flex\n                                p={2}\n                                mt={3}\n                                width={1}\n                                borderRadius={2}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                                backgroundColor={'DashboardCard'}\n                                border={`1px solid ${this.props.theme.colors.primary}`}\n                              >\n                                <Image\n                                  height={'1.2em'}\n                                  src={polygonBridgeInfo.image}\n                                />\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <Link\n                                    textAlign={'center'}\n                                    hoverColor={'primary'}\n                                    href={`/#/dashboard/tools/${polygonBridgeInfo.route}/${this.props.selectedToken}`}\n                                  >\n                                    Use the {polygonBridgeInfo.label} to deposit your {this.props.selectedToken}\n                                  </Link>\n                                  <Icon\n                                    ml={1}\n                                    size={'1em'}\n                                    color={'primary'}\n                                    name={'ArrowForward'}\n                                  />\n                                </Flex>\n                              </Flex>\n                            )\n                          }\n                          {\n                            showRedeemCurve && this.state.canRedeem && (\n                              <Flex\n                                width={1}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <DashboardCard\n                                  isRainbow={true}\n                                  cardProps={{\n                                    py: 3,\n                                    px: 2,\n                                    mt: 3,\n                                    display: 'flex',\n                                    alignItems: 'center',\n                                    flexDirection: 'column',\n                                    justifyContent: 'center',\n                                  }}\n                                >\n                                  <Flex\n                                    width={1}\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <Image\n                                      height={'1.8em'}\n                                      src={curveConfig.params.image}\n                                    />\n                                    <Text\n                                      mt={2}\n                                      px={2}\n                                      fontSize={1}\n                                      color={'dark-gray'}\n                                      textAlign={'center'}\n                                    >\n                                      Redeem your tokens from the Curve Pool.\n                                    <Link\n                                        ml={1}\n                                        mainColor={'primary'}\n                                        hoverColor={'primary'}\n                                        onClick={e => this.props.openTooltipModal('How Curve works', this.functionsUtil.getGlobalConfig(['messages', 'curveInstructions']))}\n                                      >\n                                        Read More\n                                    </Link>\n                                    </Text>\n                                    {\n                                      this.state.canRedeem &&\n                                      <Checkbox\n                                        mt={2}\n                                        required={false}\n                                        label={`Redeem from Curve`}\n                                        checked={this.state.redeemCurveEnabled}\n                                        onChange={e => this.toggleRedeemCurve(e.target.checked)}\n                                      />\n                                    }\n                                  </Flex>\n                                </DashboardCard>\n                                {\n                                  this.canRedeem &&\n                                  <Link\n                                    textAlign={'center'}\n                                    hoverColor={'primary'}\n                                    onClick={e => this.setShowRedeemFlow(true)}\n                                  >\n                                    I just want to redeem my {this.props.selectedToken}\n                                  </Link>\n                                }\n                              </Flex>\n                            )\n                          }\n                          {\n                            (this.state.contractPaused && this.state.action === 'deposit') ? (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  mt: 3\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    name={'Warning'}\n                                    color={'cellText'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    fontSize={2}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    Deposits for {this.props.selectedToken} are temporarily unavailable due to Smart-Contract maintenance. Redeems are always available.\n                                </Text>\n                                </Flex>\n                              </DashboardCard>\n                            ) : (!this.state.tokenApproved && this.state.action === 'deposit' && !this.state.showETHWrapperEnabled && !isDepositDisabled) ? (\n                              <DashboardCard\n                                isDisabled={isDepositDisabled}\n                                cardProps={{\n                                  p: 3,\n                                  mt: 3\n                                }}\n                              >\n                                {\n                                  this.state.processing['approve'] && this.state.processing['approve'].loading ? (\n                                    <Flex\n                                      flexDirection={'column'}\n                                    >\n                                      <TxProgressBar\n                                        {...this.props}\n                                        waitText={`Approve estimated in`}\n                                        endMessage={`Finalizing approve request...`}\n                                        hash={this.state.processing['approve'].txHash}\n                                        cancelTransaction={this.cancelTransaction.bind(this)}\n                                      />\n                                    </Flex>\n                                  ) : (\n                                    <Flex\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        name={'LockOpen'}\n                                        color={'cellText'}\n                                      />\n                                      <Text\n                                        mt={3}\n                                        fontSize={2}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        {\n                                          this.state.depositCurveEnabled ?\n                                            `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.`\n                                            : useMetaTx ?\n                                              `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle using Meta-Transaction you need to approve our Smart-Contract first.`\n                                            :\n                                              `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle you need to approve our Smart-Contract first.`\n                                        }\n                                      </Text>\n                                      <RoundButton\n                                        buttonProps={{\n                                          mt: 3,\n                                          width: [1, 1 / 2]\n                                        }}\n                                        handleClick={this.approveToken.bind(this)}\n                                      >\n                                        Approve\n                                      </RoundButton>\n                                    </Flex>\n                                  )\n                                }\n                              </DashboardCard>\n                            ) : (!showBuyFlow && canPerformAction) && (\n                              !this.state.processing[this.state.action].loading ? (\n                                <Flex\n                                  mt={2}\n                                  flexDirection={'column'}\n                                >\n                                  {\n                                    showActionFlow && (\n                                      <Flex\n                                        mb={3}\n                                        width={1}\n                                        flexDirection={'column'}\n                                      >\n                                        {\n                                          (totalBalance || this.props.tokenFeesPercentage) && (\n                                            <Box\n                                              mb={1}\n                                              width={1}\n                                            >\n                                              {\n                                                this.state.showMaxSlippage && showCurveSlippage && (\n                                                  <Box\n                                                    mb={2}\n                                                    width={1}\n                                                  >\n                                                    <Flex\n                                                      alignItems={'center'}\n                                                      flexDirection={'row'}\n                                                    >\n                                                      <Text>\n                                                        Choose max slippage:\n                                                    </Text>\n                                                      <Tooltip\n                                                        placement={'top'}\n                                                        message={`Max additional slippage on top of the one shown below`}\n                                                      >\n                                                        <Icon\n                                                          ml={1}\n                                                          size={'1em'}\n                                                          color={'cellTitle'}\n                                                          name={\"InfoOutline\"}\n                                                        />\n                                                      </Tooltip>\n                                                    </Flex>\n                                                    <Flex\n                                                      mt={2}\n                                                      alignItems={'center'}\n                                                      flexDirection={'row'}\n                                                      justifyContent={'space-between'}\n                                                    >\n                                                      {\n                                                        [0.2, 0.5, 1, 5].map(slippage => (\n                                                          <FastBalanceSelector\n                                                            cardProps={{\n                                                              p: 1\n                                                            }}\n                                                            textProps={{\n                                                              fontSize: 1\n                                                            }}\n                                                            percentage={slippage}\n                                                            key={`selector_${slippage}`}\n                                                            onMouseDown={() => this.setMaxSlippage(slippage)}\n                                                            isActive={this.state.maxSlippage === parseFloat(slippage)}\n                                                          />\n                                                        ))\n                                                      }\n                                                    </Flex>\n                                                  </Box>\n                                                )\n                                              }\n                                              <Flex\n                                                width={1}\n                                                alignItems={'center'}\n                                                flexDirection={'row'}\n                                                justifyContent={'space-between'}\n                                              >\n                                                {\n                                                  showCurveSlippage ? (\n                                                    <Flex\n                                                      width={1}\n                                                      maxWidth={'50%'}\n                                                      alignItems={'center'}\n                                                      flexDirection={'row'}\n                                                    >\n                                                      <Text\n                                                        fontSize={1}\n                                                        fontWeight={3}\n                                                        textAlign={'right'}\n                                                        style={{\n                                                          whiteSpace: 'nowrap'\n                                                        }}\n                                                        color={this.state.depositCurveSlippage.gt(0) ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed}\n                                                      >\n                                                        {\n                                                          parseFloat(this.state.depositCurveSlippage.times(100).toFixed(2)) === 0 ?\n                                                            'No Slippage'\n                                                            : `${this.state.depositCurveSlippage.gt(0) ? 'Slippage: ' : 'Bonus: '} ${this.state.depositCurveSlippage.times(100).abs().toFixed(2)}%`\n                                                        }\n                                                      </Text>\n                                                      <Tooltip\n                                                        placement={'top'}\n                                                        message={this.functionsUtil.getGlobalConfig(['messages', 'curveBonusSlippage'])}\n                                                      >\n                                                        <Icon\n                                                          ml={1}\n                                                          size={'1em'}\n                                                          color={'cellTitle'}\n                                                          name={\"InfoOutline\"}\n                                                        />\n                                                      </Tooltip>\n                                                      <Link\n                                                        ml={1}\n                                                        color={'copyColor'}\n                                                        hoverColor={'primary'}\n                                                        onClick={this.showMaxSlippage}\n                                                      >\n                                                        change\n                                                    </Link>\n                                                    </Flex>\n                                                  ) : this.props.tokenFeesPercentage && (\n                                                    <Flex\n                                                      alignItems={'center'}\n                                                      flexDirection={'row'}\n                                                    >\n                                                      <Text\n                                                        fontSize={1}\n                                                        fontWeight={3}\n                                                        color={'dark-gray'}\n                                                        textAlign={'right'}\n                                                        hoverColor={'copyColor'}\n                                                      >\n                                                        Performance fee: {this.props.tokenFeesPercentage.times(100).toFixed(2)}%\n                                                    </Text>\n                                                      <Tooltip\n                                                        placement={'top'}\n                                                        message={this.functionsUtil.getGlobalConfig(['messages', 'performanceFee'])}\n                                                      >\n                                                        <Icon\n                                                          ml={1}\n                                                          size={'1em'}\n                                                          color={'cellTitle'}\n                                                          name={\"InfoOutline\"}\n                                                        />\n                                                      </Tooltip>\n                                                    </Flex>\n                                                  )\n                                                }\n                                                {\n                                                  totalBalance && (\n                                                    <Link\n                                                      fontSize={1}\n                                                      fontWeight={3}\n                                                      color={'dark-gray'}\n                                                      textAlign={'right'}\n                                                      hoverColor={'copyColor'}\n                                                      onClick={(e) => this.setFastBalanceSelector(100)}\n                                                    >\n                                                      {totalBalance.toFixed(6)} {this.props.selectedToken}\n                                                    </Link>\n                                                  )\n                                                }\n                                              </Flex>\n                                            </Box>\n                                          )\n                                        }\n                                        <Input\n                                          min={0}\n                                          type={\"number\"}\n                                          required={true}\n                                          height={'3.4em'}\n                                          borderRadius={2}\n                                          fontWeight={500}\n                                          borderColor={'cardBorder'}\n                                          backgroundColor={'cardBg'}\n                                          boxShadow={'none !important'}\n                                          placeholder={`Insert amount`}\n                                          onChange={this.changeInputValue.bind(this)}\n                                          border={`1px solid ${this.props.theme.colors.divider}`}\n                                          value={this.state.inputValue[this.state.action] !== null ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]).toFixed() : ''}\n                                        />\n                                        <Flex\n                                          mt={2}\n                                          alignItems={'center'}\n                                          flexDirection={'row'}\n                                          justifyContent={'space-between'}\n                                        >\n                                          {\n                                            [25, 50, 75, 100].map(percentage => (\n                                              <FastBalanceSelector\n                                                percentage={percentage}\n                                                key={`selector_${percentage}`}\n                                                onMouseDown={() => this.setFastBalanceSelector(percentage)}\n                                                isActive={this.state.fastBalanceSelector[this.state.action] === parseInt(percentage)}\n                                              />\n                                            ))\n                                          }\n                                        </Flex>\n                                      </Flex>\n                                    )\n                                  }\n                                  {\n                                    canPerformAction && (\n                                      <Flex\n                                        justifyContent={'center'}\n                                        mt={redeemGovTokens ? 2 : 0}\n                                      >\n                                        <RoundButton\n                                          buttonProps={{\n                                            width: 'auto',\n                                            minWidth: [1, 1 / 2],\n                                            style: {\n                                              textTransform: 'capitalize'\n                                            },\n                                            disabled: this.state.buttonDisabled\n                                          }}\n                                          handleClick={this.state.buttonDisabled ? null : this.executeAction.bind(this)}\n                                        >\n                                          {this.state.action}{redeemGovTokens ? ' Gov Tokens' : '' /*(depositCurve ? ' in Curve' : '')*/}\n                                        </RoundButton>\n                                      </Flex>\n                                    )\n                                  }\n                                </Flex>\n                              ) : this.state.loadingErc20ForwarderTx ? (\n                                <Flex\n                                  mt={3}\n                                  flexDirection={'column'}\n                                >\n                                  <FlexLoader\n                                    flexProps={{\n                                      flexDirection: 'row'\n                                    }}\n                                    loaderProps={{\n                                      size: '25px',\n                                    }}\n                                    textProps={{\n                                      ml: 2\n                                    }}\n                                    text={this.state.erc20ForwarderTx ? (this.state.signedParameters ? 'Please Sign the Transaction...' : 'Please Sign the Permit...') : 'Calculating transaction fees...'}\n                                  />\n                                </Flex>\n                              ) : this.state.erc20ForwarderTx ? (\n                                <DashboardCard\n                                  cardProps={{\n                                    p: 3,\n                                    mt: 3,\n                                    display: 'flex',\n                                    alignItems: 'center',\n                                    flexDirection: 'column',\n                                    justifyContent: 'center',\n                                  }}\n                                >\n                                  <Text\n                                    mb={2}\n                                    fontSize={2}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    The required gas fee to perform the {this.state.action} is <strong>{this.state.erc20ForwarderTx.cost} {this.props.selectedToken}</strong>\n                                  </Text>\n                                  <Flex\n                                    width={1}\n                                    alignItems={'center'}\n                                    flexDirection={'row'}\n                                    justifyContent={'center'}\n                                  >\n                                    <DashboardCard\n                                      cardProps={{\n                                        mx: 2,\n                                        py: 2,\n                                        px: [2, 3],\n                                        width: 0.40,\n                                        onMouseDown: () => {\n                                          this.executeAction()\n                                        }\n                                      }}\n                                      isInteractive={true}\n                                    >\n                                      <Flex\n                                        my={1}\n                                        alignItems={'center'}\n                                        flexDirection={'row'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Flex\n                                          mr={2}\n                                          alignItems={'center'}\n                                          justifyContent={'center'}\n                                        >\n                                          <Icon\n                                            align={'center'}\n                                            color={'#00b84a'}\n                                            name={'CheckCircle'}\n                                            size={this.props.isMobile ? '1em' : '1.8em'}\n                                          />\n                                        </Flex>\n                                        <Text\n                                          fontWeight={3}\n                                          fontSize={[2, 3]}\n                                        >\n                                          Confirm\n                                      </Text>\n                                      </Flex>\n                                    </DashboardCard>\n                                    <DashboardCard\n                                      cardProps={{\n                                        mx: 2,\n                                        py: 2,\n                                        px: [2, 3],\n                                        width: 0.40,\n                                        onMouseDown: () => {\n                                          this.cancelTransaction();\n                                        }\n                                      }}\n                                      isInteractive={true}\n                                    >\n                                      <Flex\n                                        my={1}\n                                        alignItems={'center'}\n                                        flexDirection={'row'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Flex\n                                          mr={2}\n                                          alignItems={'center'}\n                                          justifyContent={'center'}\n                                        >\n                                          <Icon\n                                            name={'Cancel'}\n                                            align={'center'}\n                                            color={'#e13636'}\n                                            size={this.props.isMobile ? '1em' : '1.8em'}\n                                          />\n                                        </Flex>\n                                        <Text\n                                          fontWeight={3}\n                                          fontSize={[2, 3]}\n                                        >\n                                          Decline\n                                      </Text>\n                                      </Flex>\n                                    </DashboardCard>\n                                  </Flex>\n                                </DashboardCard>\n                              ) : (\n                                <Flex\n                                  mt={3}\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <TxProgressBar\n                                    {...this.props}\n                                    cancelTransaction={this.cancelTransaction.bind(this)}\n                                    hash={this.state.processing[this.state.action].txHash}\n                                    endMessage={`Finalizing ${this.state.action} request...`}\n                                    waitText={`${this.functionsUtil.capitalize(this.state.action)} estimated in`}\n                                  />\n                                </Flex>\n                              )\n                            )\n                          }\n                        </Box>\n                      )\n                    ) : (\n                      <Flex\n                        mt={4}\n                        flexDirection={'column'}\n                      >\n                        <FlexLoader\n                          flexProps={{\n                            flexDirection: 'row'\n                          }}\n                          loaderProps={{\n                            size: '30px'\n                          }}\n                          textProps={{\n                            ml: 2\n                          }}\n                          text={'Loading asset info...'}\n                        />\n                      </Flex>\n                    )\n                  }\n                </Migrate>\n              )\n          }\n        </Flex>\n        {\n          /*\n          showDepositCurve && this.state.depositCurveEnabled ? (\n            <CurveDeposit\n              {...this.props}\n            />\n          ) :\n          */\n          showRedeemCurve && this.state.redeemCurveEnabled && (\n            <Box\n              mt={3}\n              width={1}\n            >\n              <CurveRedeem\n                {...this.props}\n              />\n            </Box>\n          )\n        }\n        {\n          showBuyFlow ? (\n            <Flex\n              mt={3}\n              width={[1,0.5]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <BuyModal\n                {...this.props}\n                showInline={true}\n                availableMethods={[]}\n                buyToken={this.props.selectedToken}\n              />\n            </Flex>\n          ) : showPolygonBridge && (\n            <Flex\n              mt={3}\n              width={[1,0.36]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <DashboardCard\n                cardProps={{\n                  p:3\n                }}\n              >\n                <Flex\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                >\n                  <Image\n                    height={'2em'}\n                    src={polygonBridgeInfo.image}\n                  />\n                  <Text\n                    mt={1}\n                    fontSize={2}\n                    color={'cellText'}\n                    textAlign={'center'}\n                  >\n                    <strong>You don't have enough {buyToken} in your wallet!</strong><br />Use the {polygonBridgeInfo.label} to transfer your {buyToken} in Polygon.\n                  </Text>\n                  <RoundButton\n                    buttonProps={{\n                      mt:2,\n                      width:[1,1/2]\n                    }}\n                    handleClick={ e => this.props.goToSection(`tools/${polygonBridgeInfo.route}/${buyToken}`)}\n                  >\n                    Deposit {buyToken}\n                  </RoundButton>\n                </Flex>\n              </DashboardCard>\n            </Flex>\n          )\n        }\n        <ShareModal\n          confettiEnabled={true}\n          icon={`images/medal.svg`}\n          title={`Congratulations!`}\n          account={this.props.account}\n          closeModal={this.resetModal}\n          tokenName={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'share'}\n          text={`You have successfully deposited in Idle!<br />Enjoy <strong>${this.state.tokenAPY}% APY</strong> on your <strong>${this.props.selectedToken}</strong>!`}\n          tweet={`I'm earning ${this.state.tokenAPY}% APY on my ${this.props.selectedToken} with @idlefinance! Go to ${this.functionsUtil.getGlobalConfig(['baseURL'])} and start earning now from your idle tokens!`}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default DepositRedeem;\n","import theme from '../theme';\nimport { Bar } from '@nivo/bar';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Text, Input, Icon, Tooltip } from \"rimble-ui\";\n\nclass EstimatedEarnings extends Component {\n\n  state = {\n    chartData:null,\n    chartProps:null,\n    inputValue:1000,\n    maxInputValue:999999999999999\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    this.loadChart();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged){\n      this.loadChart();\n    }\n  }\n\n  async loadChart(){\n\n    const tokenApy = await this.functionsUtil.getTokenApy(this.props.tokenConfig);\n\n    if (!tokenApy){\n      return false;\n    }\n\n    const amount = this.functionsUtil.BNify(this.state.inputValue);\n    const earningsYear = amount.times(this.props.tokenApy.div(100));\n\n    const amountMonth = parseFloat(earningsYear.div(12));\n    const amount3Months = parseFloat(earningsYear.div(4));\n    const amount6Months = parseFloat(earningsYear.div(2));\n    const amountYear = parseFloat(earningsYear.div(1));\n\n    const chartData = [\n      {\n        perc:1/12,\n        label:'MONTH',\n        value:amountMonth,\n        month:amountMonth,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        monthColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:3/12,\n        label:'3 MONTHS',\n        value:amount3Months,\n        month3:amount3Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month3Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:6/12,\n        label:'6 MONTHS',\n        value:amount6Months,\n        month6:amount6Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        month6Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      },\n      {\n        perc:1,\n        label:'YEAR',\n        year:amountYear,\n        value:amountYear,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','rgb']).join(','),\n        yearColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'color','hsl']).join(',')+')',\n      }\n    ];\n\n    let labelTextColorModifiers = this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'chart','labelTextColorModifiers']);\n\n    const maxGridLines = 4;\n    const gridYStep = amountYear/maxGridLines;\n    const gridYValues = [0];\n    for (let i=1;i<=maxGridLines;i++){\n      const gridYValue = i*gridYStep;\n      gridYValues.push(gridYValue);\n    }\n\n    const chartProps = {\n      padding: 0.2,\n      animate: false,\n      indexBy: 'label',\n      // enableLabel: false,\n      labelSkipWidth: 16,\n      labelSkipHeight: 16,\n      keys: ['month','month3','month6','year'],\n      colors: ({ id, data }) => data[`${id}Color`],\n      label: d => this.functionsUtil.abbreviateNumber(d.value,2,4)+' '+this.props.selectedToken,\n      labelTextColor: labelTextColorModifiers ? { from: 'color', modifiers: [ labelTextColorModifiers ] } : null,\n      isInteractive:false,\n      minValue:0,\n      gridYValues,\n      // maxValue:amountYear,\n      axisLeft:{\n        format: v => this.functionsUtil.abbreviateNumber(v,1,3),\n        tickValues:gridYValues,\n        orient: 'left',\n        tickSize: 0,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendPosition: 'middle'\n      },\n      axisBottom:{\n        legend: '',\n        tickSize:0,\n        tickPadding: 15,\n        orient: 'bottom',\n      },\n      theme:{\n        labels:{\n          text:{\n            fontSize:15,\n            fontWeight:600,\n            fill:theme.colors.counter,\n            fontFamily: theme.fonts.sansSerif\n          }\n        },\n        axis: {\n          ticks: {\n            text: {\n              fontSize:14,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '9 5'\n          }\n        },\n      },\n      margin: this.props.isMobile ? { top: 0, right: 0, bottom: 30, left: 0 } : { top: 10, right: 0, bottom: 50, left: 65 }\n    }\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  changeInputValue(e){\n    let inputValue = e.target.value.length && !isNaN(e.target.value) ? Math.min(this.state.maxInputValue,parseFloat(e.target.value)) : 0;\n    inputValue = this.functionsUtil.BNify(inputValue);\n    this.setState({\n      inputValue\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const showAPYDisclaimer = idleTokenEnabled && this.functionsUtil.getGlobalConfig(['govTokens','IDLE','showAPR']);\n\n    return (\n      <DashboardCard\n        cardProps={{\n          p:[3,4]\n        }}\n      >\n        <Flex\n          width={1}\n          flexDirection={['column','row']}\n        >\n          <Flex\n            width={[1,0.3]}\n            flexDirection={'column'}\n            justifyContent={'flex-start'}\n          >\n            <Flex\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <AssetField\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n                fieldInfo={{\n                  name:'icon',\n                  props:{\n                    mb:2,\n                    height:'2.5em'\n                  }\n                }}\n              />\n              <Text\n                fontSize={2}\n                color={'cellText'}\n                textAlign={'center'}\n              >\n                Set the amount and see your estimated earnings on time based on the current APY: { this.props.tokenApy ? `${this.props.tokenApy.toFixed(2)}%` : null}\n                {\n                  showAPYDisclaimer && \n                    <Flex\n                      style={{\n                        display:'inline-flex',\n                        verticalAlign:'middle'\n                      }}\n                    >\n                      <Tooltip\n                        placement={'top'}\n                        message={this.functionsUtil.getGlobalConfig(['messages','apyLong'])}\n                      >\n                        <Icon\n                          ml={1}\n                          name={\"Info\"}\n                          size={'1em'}\n                          color={'cellTitle'}\n                        />\n                      </Tooltip>\n                    </Flex>\n                }\n              </Text>\n            </Flex>\n            <Flex\n              mt={3}\n              flexDirection={'column'}\n            >\n              <Input\n                min={0}\n                type={\"number\"}\n                required={true}\n                borderRadius={2}\n                fontWeight={500}\n                textAlign={'center'}\n                height={['3em','3.4em']}\n                borderColor={'cardBorder'}\n                boxShadow={'none !important'}\n                max={this.state.maxInputValue}\n                backgroundColor={'cardBgHover'}\n                onChange={this.changeInputValue.bind(this)}\n                border={`1px solid ${theme.colors.divider}`}\n                placeholder={`Insert ${this.props.selectedToken.toUpperCase()} amount`}\n                value={this.state.inputValue && !isNaN(this.state.inputValue) ? this.state.inputValue : ''}\n              />\n            </Flex>\n            <Flex\n              mt={3}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                buttonProps={{\n                  width:[1,1/2],\n                }}\n                handleClick={this.loadChart.bind(this)}\n              >\n                CALCULATE\n              </RoundButton>\n            </Flex>\n          </Flex>\n          <Flex\n            mt={[3,0]}\n            width={[1,0.7]}\n            id={'estimated-earnings-chart'}\n          >\n            {\n              this.props.isMobile ? (\n                <Flex\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  {\n                    this.state.chartData !== null && this.state.chartData.map((v,index) => (\n                      <Flex\n                        py={2}\n                        my={2}\n                        width={1}\n                        flexDirection={'row'}\n                        key={`earnings_${index}`}\n                      >\n                        <Flex\n                          width={0.35}\n                          alignItems={'center'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            color={'legend'}\n                          >\n                            {v.label}\n                          </Text>\n                        </Flex>\n                        <Flex\n                          width={0.65}\n                          position={'relative'}\n                          alignItems={'center'}\n                          minHeight={['20px','35px']}\n                          justifyContent={'center'}\n                        >\n                          <Flex\n                            zIndex={1}\n                            position={'relative'}\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Text\n                              fontSize={1}\n                              fontWeight={3}\n                              color={'counter'}\n                            >\n                              {this.functionsUtil.abbreviateNumber(v.value,2,4)} {this.props.selectedToken}\n                            </Text>\n                          </Flex>\n                          <Flex\n                            right={0}\n                            width={v.perc}\n                            position={'absolute'}\n                            height={['20px','35px']}\n                            borderRadius={['20px 0 0 20px','35px 0 0 35px']}\n                            style={{background:`linear-gradient(-90deg, rgba(${v.color},0) 0%, rgba(${v.color},1) 100%)`}}\n                          ></Flex>\n                        </Flex>\n                      </Flex>\n                    ))\n                  }\n                </Flex>\n              ) : (\n                <GenericChart\n                  type={Bar}\n                  height={250}\n                  showLoader={true}\n                  {...this.state.chartProps}\n                  data={this.state.chartData}\n                  parentId={'estimated-earnings-chart'}\n                />\n              )\n            }\n          </Flex>\n        </Flex>\n      </DashboardCard>\n    );\n  }\n}\n\nexport default EstimatedEarnings;","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport { Box, Flex, Icon, Text } from \"rimble-ui\";\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport AssetsList from '../AssetsList/AssetsList';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport FundsOverview from '../FundsOverview/FundsOverview';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport DepositRedeem from '../DepositRedeem/DepositRedeem';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport ActiveCoverages from '../ActiveCoverages/ActiveCoverages';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport EstimatedEarnings from '../EstimatedEarnings/EstimatedEarnings';\n\nclass AssetPage extends Component {\n\n  state = {\n    tokenApy:{},\n    tokenFees:{},\n    tokenBalance:{},\n    tokenApproved:{},\n    activeModal:null,\n    idleTokenPrice:{},\n    userHasFunds:false,\n    govTokensBalance:{},\n    idleTokenBalance:{},\n    redeemableBalance:{},\n    govTokensDisabled:{},\n    availableGovTokens:{},\n    tokenFeesPercentage:{},\n    componentMounted:false,\n    govTokensUserBalances:{}\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadTokensInfo(){\n\n    if (!this.props.account || !this.props.contractsInitialized){\n      return this.setState({\n        userHasFunds:false\n      });\n    }\n\n    const newState = {...this.state};\n    // await this.functionsUtil.asyncForEach(Object.keys(this.props.availableTokens),async (token) => {\n    const token = this.props.selectedToken;\n    const tokenConfig = this.props.availableTokens[token];\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[token] = tokenConfig;\n\n    const [\n      tokenFeesPercentage,\n      idleTokenPrice,\n      tokenApy,\n      tokenBalance,\n      tokenFees,\n      idleTokenBalance,\n      tokenApproved,\n      govTokensUserBalances,\n      govTokensBalance\n    ] = await Promise.all([\n      this.functionsUtil.getTokenFees(tokenConfig),\n      this.functionsUtil.getIdleTokenPrice(tokenConfig),\n      this.functionsUtil.getTokenApy(this.props.tokenConfig),\n      this.functionsUtil.getTokenBalance(token,this.props.account),\n      this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n      this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n      this.functionsUtil.checkTokenApproved(token,tokenConfig.idle.address,this.props.account),\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,null,null),\n      this.functionsUtil.getGovTokensUserTotalBalance(this.props.account,govTokenAvailableTokens,'DAI',false)\n    ]);\n\n    newState.tokenFees[token] = tokenFees;\n    newState.tokenBalance[token] = tokenBalance;\n    newState.tokenApproved[token] = tokenApproved;\n    newState.idleTokenPrice[token] = idleTokenPrice;\n    newState.idleTokenBalance[token] = idleTokenBalance;\n    newState.govTokensBalance[token] = govTokensBalance;\n    newState.tokenFeesPercentage[token] = tokenFeesPercentage;\n    newState.govTokensUserBalances[token] = govTokensUserBalances;\n    newState.govTokensDisabled[token] = tokenConfig.govTokensDisabled;\n    newState.tokenApy[token] = tokenApy && !tokenApy.isNaN() ? tokenApy : null;\n    newState.redeemableBalance[token] = idleTokenBalance && idleTokenPrice ? idleTokenBalance.times(idleTokenPrice) : this.functionsUtil.BNify(0);\n    // });\n\n    newState.availableGovTokens = this.functionsUtil.getTokenGovTokens(this.props.tokenConfig);\n\n    // console.log('govTokensBalance',newState.govTokensBalance);\n    // console.log('availableGovTokens',newState.availableGovTokens);\n    // console.log('govTokensUserBalances',newState.govTokensUserBalances);\n\n    newState.componentMounted = true;\n    newState.userHasFunds = this.props.account && newState.idleTokenBalance[token] && this.functionsUtil.BNify(newState.idleTokenBalance[token]).gt(0);\n\n    // console.log('loadTokensInfo',this.props.account,this.props.contractsInitialized,newState);\n\n    this.setState(newState);\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n    window.loadTokensInfo = this.loadTokensInfo.bind(this);\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    const selectedTokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    const availableTokensChanged = JSON.stringify(prevProps.availableTokens) !== JSON.stringify(this.props.availableTokens);\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n    if (accountChanged || transactionsChanged || availableTokensChanged || selectedTokenChanged){\n      // console.log('AssetPage - availableTokensChanged',availableTokensChanged);\n      this.loadTokensInfo();\n    }\n  }\n\n  render() {\n\n    // const currentNetwork = this.functionsUtil.getRequiredNetwork();\n    const nexusMutualConfig = this.functionsUtil.getGlobalConfig(['tools','nexusMutual']);\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            <Breadcrumb\n              {...this.props}\n              isMobile={this.props.isMobile}\n              path={[this.props.selectedToken]}\n              handleClick={ e => this.props.goToSection(this.props.selectedStrategy) }\n              text={this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])}\n            />\n          </Flex>\n          <Flex\n            width={0.5}\n            justifyContent={'flex-end'}\n          >\n            <CardIconButton\n              icon={'Add'}\n              {...this.props}\n              text={'Add funds'}\n              handleClick={ e => this.setActiveModal('buy') }\n            />\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Deposit / Redeem\n        </Title>\n        {\n          /*\n          currentNetwork.id === 137 ? (\n            <Flex\n              width={1}\n              minHeight={'45vh'}\n              alignItems={'center'}\n              flexDirection={'row'}\n              justifyContent={'center'}\n            >\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  width:[1,0.5],\n                }}\n              >\n                <Flex\n                  aligItems={'center'}\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                >\n                  <Icon\n                    size={'2.3em'}\n                    color={'cellText'}\n                    name={'AccessTime'}\n                  />\n                  <Text\n                    mt={2}\n                    fontSize={2}\n                    color={'cellText'}\n                    textAlign={'center'}\n                  >\n                    Hang on, please!<br />The {this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])} strategy has not yet been activated in Polygon.\n                  </Text>\n                  <RoundButton\n                    buttonProps={{\n                      mt:3,\n                      width:[1,1/2]\n                    }}\n                    handleClick={e => this.props.goToSection(`stake`)}\n                  >\n                    Go to Staking\n                  </RoundButton>\n                </Flex>\n              </DashboardCard>\n            </Flex>\n          ) :\n          */\n          (\n            <>\n              <Flex\n                width={1}\n              >\n                <DepositRedeem\n                  {...this.props}\n                  tokenFees={this.state.tokenFees[this.props.selectedToken]}\n                  tokenBalance={this.state.tokenBalance[this.props.selectedToken]}\n                  tokenApproved={this.state.tokenApproved[this.props.selectedToken]}\n                  govTokensBalance={this.state.govTokensBalance[this.props.selectedToken]}\n                  idleTokenBalance={this.state.idleTokenBalance[this.props.selectedToken]}\n                  redeemableBalance={this.state.redeemableBalance[this.props.selectedToken]}\n                  tokenFeesPercentage={this.state.tokenFeesPercentage[this.props.selectedToken]}\n                  govTokensUserBalances={this.state.govTokensUserBalances[this.props.selectedToken]}\n                />\n              </Flex>\n              {\n                this.state.userHasFunds && nexusMutualConfig.enabled && Object.keys(nexusMutualConfig.props.availableTokens).includes(this.props.tokenConfig.idle.token) && (\n                  <Flex\n                    width={1}\n                    id={'active-coverages'}\n                    flexDirection={'column'}\n                  >\n                    <ActiveCoverages\n                      {...this.props}\n                      titleProps={{\n                        mb:3,\n                        mt:[3,4],\n                      }}\n                      title={'Coverage'}\n                      availableTokens={[this.props.tokenConfig.idle.token]}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        id={'no-active-cover'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        <DashboardCard\n                          cardProps={{\n                            py:3,\n                            px:[3,4],\n                            width:[1,'auto'],\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Icon\n                              my={[0,2]}\n                              size={'3em'}\n                              name={nexusMutualConfig.icon}\n                            />\n                            <Text\n                              mb={1}\n                              fontSize={[2,3]}\n                              fontWeight={500}\n                              textAlign={'center'}\n                            >\n                              You don't have an active coverage\n                            </Text>\n                            <Text\n                              mb={2}\n                              color={'link'}\n                              fontSize={[1,2]}\n                              fontWeight={500}\n                              textAlign={'center'}\n                            >\n                              {nexusMutualConfig.desc}\n                            </Text>\n                            <RoundButton\n                              buttonProps={{\n                                mt:1,\n                                width:'auto',\n                                minHeight:'40px',\n                                mainColor:'redeem',\n                                size:this.props.isMobile ? 'small' : 'medium'\n                              }}\n                              handleClick={ e => this.props.goToSection(`tools/${nexusMutualConfig.route}/deposit/${this.props.tokenConfig.idle.token}`) }\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <Text\n                                  color={'white'}\n                                  fontSize={[1,2]}\n                                  fontWeight={500}\n                                >\n                                  Get Covered\n                                </Text>\n                                <Icon\n                                  ml={1}\n                                  size={'1.3em'}\n                                  name={'KeyboardArrowRight'}\n                                />\n                              </Flex>\n                            </RoundButton>\n                          </Flex>\n                        </DashboardCard>\n                      </Flex>\n                    </ActiveCoverages>\n                  </Flex>\n                )\n              }\n              {\n                this.state.userHasFunds && this.props.account && (\n                  <Flex\n                    mb={[0,4]}\n                    width={1}\n                    flexDirection={'column'}\n                    id={'funds-overview-container'}\n                  >\n                    <Title my={[3,4]}>Funds Overview</Title>\n                    <FundsOverview\n                      {...this.props}\n                      tokenFees={this.state.tokenFees[this.props.selectedToken]}\n                    />\n                  </Flex>\n                )\n              }\n              {\n                this.state.userHasFunds && this.props.account && !this.state.govTokensDisabled[this.props.selectedToken] && Object.keys(this.state.availableGovTokens).length>0 && \n                  <Flex\n                    width={1}\n                    id={\"yield-farming\"}\n                    flexDirection={'column'}\n                  >\n                    <Title my={[3,4]}>Yield Farming</Title>\n                    <AssetsList\n                      enabledTokens={Object.keys(this.state.availableGovTokens)}\n                      cols={[\n                        {\n                          title:'TOKEN',\n                          props:{\n                            width:[0.30,0.15]\n                          },\n                          fields:[\n                            {\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:['1.4em','2.3em']\n                              }\n                            },\n                            {\n                              name:'tokenName'\n                            }\n                          ]\n                        },\n                        {\n                          mobile:false,\n                          title:'BALANCE',\n                          props:{\n                            width:[0.33, 0.25],\n                          },\n                          fields:[\n                            {\n                              name:'tokenBalance',\n                              props:{\n                                decimals: this.props.isMobile ? 6 : 8\n                              }\n                            }\n                          ]\n                        },\n                        {\n                          title:'REDEEMABLE',\n                          desc:this.functionsUtil.getGlobalConfig(['messages','govTokenRedeemableBalance']),\n                          props:{\n                            width:[0.35,0.30],\n                            justifyContent:['center','flex-start']\n                          },\n                          fields:[\n                            {\n                              name:'redeemableBalance',\n                              props:{\n                                decimals: this.props.isMobile ? 6 : 8\n                              }\n                            },\n                          ]\n                        },\n                        {\n                          title:'DISTRIBUTION',\n                          desc:this.functionsUtil.getGlobalConfig(['messages','userDistributionSpeed']),\n                          props:{\n                            width:[0.35,0.30],\n                          },\n                          fields:[\n                            {\n                              name:'userDistributionSpeed',\n                              props:{\n                                decimals:6\n                              }\n                            }\n                          ]\n                        },\n                        /*\n                        {\n                          title:'APR',\n                          desc:this.functionsUtil.getGlobalConfig(['messages','govTokenApr']),\n                          props:{\n                            width:[0.2,0.17],\n                          },\n                          fields:[\n                            {\n                              name:'apr',\n                            }\n                          ]\n                        },\n                        {\n                          title:'TOKEN PRICE',\n                          desc:this.functionsUtil.getGlobalConfig(['messages','tokenPrice']),\n                          mobile:false,\n                          props:{\n                            width: 0.17,\n                          },\n                          parentProps:{\n                            width:1,\n                            pr:[2,4]\n                          },\n                          fields:[\n                            {\n                              name:'tokenPrice',\n                              props:{\n                                unit:'$',\n                                unitPos:'left',\n                                unitProps:{\n                                  mr:1,\n                                  fontWeight:3,\n                                  fontSize:[0,2],\n                                  color:'cellText'\n                                }\n                              }\n                            }\n                          ]\n                        },\n                        */\n                      ]}\n                      {...this.props}\n                      availableTokens={this.state.availableGovTokens}\n                    />\n                  </Flex>\n              }\n              {\n              this.props.account && this.state.tokenApy[this.props.selectedToken] && \n                <Flex\n                  mb={[3,4]}\n                  width={1}\n                  flexDirection={'column'}\n                  id={'estimated-earnings-container'}\n                >\n                  <Title my={[3,4]}>Estimated earnings</Title>\n                  <EstimatedEarnings\n                    {...this.props}\n                    tokenApy={this.state.tokenApy[this.props.selectedToken]}\n                  />\n                </Flex>\n              }\n              {\n              this.props.account && \n                <Flex\n                  mb={[3,4]}\n                  width={1}\n                  flexDirection={'column'}\n                  id={'transactions-container'}\n                >\n                  <Title my={[3,4]}>Transactions</Title>\n                  <TransactionsList\n                    {...this.props}\n                    enabledTokens={[this.props.selectedToken]}\n                    cols={[\n                      {\n                        title: this.props.isMobile ? '' : 'HASH',\n                        props:{\n                          width:[0.15,0.24]\n                        },\n                        fields:[\n                          {\n                            name:'icon',\n                            props:{\n                              mr:[0,2]\n                            }\n                          },\n                          {\n                            name:'hash',\n                            mobile:false\n                          }\n                        ]\n                      },\n                      {\n                        title:'ACTION',\n                        mobile:false,\n                        props:{\n                          width:0.15,\n                        },\n                        fields:[\n                          {\n                            name:'action'\n                          }\n                        ]\n                      },\n                      {\n                        title:'DATE',\n                        props:{\n                          width:[0.32,0.23],\n                        },\n                        fields:[\n                          {\n                            name:'date'\n                          }\n                        ]\n                      },\n                      {\n                        title:'STATUS',\n                        props:{\n                          width:[0.18,0.22],\n                          justifyContent:['center','flex-start']\n                        },\n                        fields:[\n                          {\n                            name:'statusIcon',\n                            props:{\n                              mr:[0,2]\n                            }\n                          },\n                          {\n                            mobile:false,\n                            name:'status'\n                          }\n                        ]\n                      },\n                      {\n                        title:'AMOUNT',\n                        props:{\n                          width:0.19,\n                        },\n                        fields:[\n                          {\n                            name:'amount'\n                          },\n                        ]\n                      },\n                      {\n                        title:'ASSET',\n                        props:{\n                          width:[0.15,0.20],\n                          justifyContent:['center','flex-start']\n                        },\n                        fields:[\n                          {\n                            name:'tokenIcon',\n                            props:{\n                              mr:[0,2],\n                              height:['1.4em','1.6em']\n                            }\n                          },\n                          {\n                            mobile:false,\n                            name:'tokenName'\n                          },\n                        ]\n                      },\n                    ]}\n                  />\n                </Flex>\n              }\n            </>\n          )\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport { Text, Modal, Flex, Link } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass BetaModal extends React.Component {\n\n  state = {};\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    this.functionsUtil.setLocalStorage('betaApproved',true);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','650px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            pt={3}\n            iconHeight={'40px'}\n            title={'Beta Version'}\n            icon={'images/warning.svg'}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                fontSize={2}\n                textAlign={'left'}\n                color={'dark-gray'}\n              >\n                You're about to enter Idle Finance Beta Dashboard – this is the place where several un-audited and risky features are being tested!<br />Please use at your own risk, or visit the official website at <Link fontSize={2} mainColor={'primary'} hoverColor={'primary'} href={this.functionsUtil.getGlobalConfig(['baseURL'])}>{this.functionsUtil.getGlobalConfig(['baseURL'])}</Link>.\n              </Text>\n            </Flex>\n            <Flex\n              my={3}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                handleClick={this.closeModal}\n                buttonProps={{\n                  width:['100%','40%']\n                }}\n              >\n                Continue Anyway\n              </RoundButton>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default BetaModal;","import React, { Component } from 'react';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Box, Text, Icon, Tooltip, Link, Input } from \"rimble-ui\";\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\n\nclass CurveDeposit extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    depositSlippage:null,\n    redeemableBalance:null,\n    migrationContract:null,\n    curveTokensBalance:null,\n    migrationSucceeded:false,\n    fastBalanceSelector:null,\n    migrationContractApproved:false,\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    await this.initToken();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const idleTokenBalanceChanged = prevProps.idleTokenBalance !== this.props.idleTokenBalance;\n    if (accountChanged || idleTokenBalanceChanged){\n      await this.initToken();\n    }\n    \n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const inputValueChanged = this.state.inputValue !== prevState.inputValue;\n    if (inputValueChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  setInputValue = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    const inputValue = this.props.idleTokenBalance ? this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage) : null;\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    const buttonDisabled = !amount || amount.gt(this.state.idleTokenBalance);\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  approve = async () => {\n    const migrationContract = this.state.migrationContract;\n    if (migrationContract){\n\n      // Check if the migration contract is approved\n      const migrationContractApproved = await this.checkMigrationContractApproved();\n\n      if (!migrationContractApproved){\n\n        const callbackApprove = (tx,error) => {\n          // Send Google Analytics event\n          const eventData = {\n            eventAction: 'approve',\n            eventCategory: 'CurveDeposit',\n            eventLabel: tx ? tx.status : null\n          };\n\n          const txSucceeded = tx && tx.status === 'success';\n\n          // console.log('callbackApprove',tx,error);\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            migrationContractApproved: txSucceeded, // True\n            processing: {\n              ...prevState.processing,\n              txHash:null,\n              loading:false\n            }\n          }));\n\n          if (typeof this.props.callbackApprove === 'function' && txSucceeded){\n            this.props.callbackApprove(tx);\n          }\n\n          this.checkMigration();\n        };\n\n        const callbackReceiptApprove = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              txHash\n            }\n          }));\n        };\n\n        this.functionsUtil.enableERC20(this.props.selectedToken,migrationContract.address,callbackApprove,callbackReceiptApprove);\n\n        this.setState((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            txHash:null,\n            loading:true\n          },\n          migrationContractApproved:false\n        }));\n      } else {\n        this.setState({\n          migrationContractApproved:true\n        });\n      }\n    }\n  }\n\n  deposit = async () => {\n\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    if (!inputValue){\n      return false;\n    }\n\n    const callbackDeposit = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveDeposit`,\n        eventAction: this.props.selectedToken,\n        eventValue: inputValue.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackDeposit === 'function' && txSucceeded){\n        this.props.callbackDeposit(tx);\n      }\n    };\n\n    const callbackReceiptDeposit = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.migrationContract.name;\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n    const depositParams = await this.getMigrationParams(_amount);\n\n    this.props.contractMethodSendWrapper(contractName, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  cancelTransaction = async () => {\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  async getMigrationParams(toMigrate){\n    const migrationParams = [];\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.selectedToken]);\n\n    if (!curveTokenConfig){\n      return false;\n    }\n    \n    const migrationContractParams = curveTokenConfig.migrationParams;\n    if (migrationContractParams.n_coins){\n      const amounts = await this.functionsUtil.getCurveAmounts(this.props.selectedToken,toMigrate,true);\n      let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n\n      if (this.state.maxSlippage){\n        minMintAmount = this.functionsUtil.BNify(minMintAmount);\n        minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n        minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n      }\n\n      migrationParams.push(amounts);\n      migrationParams.push(minMintAmount);\n    }\n\n    return migrationParams;\n  }\n\n  async calculateSlippage(){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (inputValue){\n      let underlyingBalanceToDeposit = inputValue;\n      if (underlyingBalanceToDeposit){\n        const idleTokenPrice = await this.functionsUtil.getIdleTokenPrice(this.props.tokenConfig);\n        if (idleTokenPrice){\n          underlyingBalanceToDeposit = underlyingBalanceToDeposit.times(idleTokenPrice);\n        }\n      } else {\n        underlyingBalanceToDeposit = this.functionsUtil.BNify(0);\n      }\n\n      const normalizeIdleTokenBalance = this.functionsUtil.normalizeTokenAmount(underlyingBalanceToDeposit,this.props.tokenConfig.decimals);\n      let depositSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizeIdleTokenBalance);\n      if (depositSlippage){\n        depositSlippage = depositSlippage.times(100);\n      }\n\n      this.setState({\n        depositSlippage\n      });\n    }\n  }\n\n  async checkMigrationContractApproved(){\n    const migrationContract = this.state.migrationContract || await this.functionsUtil.getCurveSwapContract();\n    if (migrationContract){\n      return await this.functionsUtil.checkTokenApproved(this.props.tokenConfig.idle.token,migrationContract.address,this.props.account);\n    }\n    return false;\n  }\n\n  async initToken(){\n\n    // Init and check migration contract\n    const migrationContract = await this.functionsUtil.getCurveSwapContract();\n    const migrationContractApproved = await this.checkMigrationContractApproved();\n\n    this.setState({\n      migrationContract,\n      migrationContractApproved\n    });\n  }\n\n  approveCallback = () => {\n    this.initToken();\n  }\n\n  migrationCallback = () => {\n    this.setState({\n      migrationSucceeded:true\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken){\n      return null;\n    }\n\n    // const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const hasCurveTokens = this.state.curveTokensBalance && this.state.curveTokensBalance.gt(0);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n            {\n              this.props.idleTokenBalance && this.props.idleTokenBalance.gt(0) && (\n                <Box\n                  width={1}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:3,\n                      px:[2,4]\n                    }}\n                  >\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    > \n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ this.state.migrationContractApproved ? 'CheckBox' : 'LooksOne'}\n                          color={ this.state.migrationContractApproved ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Approve the Curve contract\n                        </Text>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ hasCurveTokens ? 'CheckBox' : 'LooksTwo'}\n                          color={ hasCurveTokens ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Deposit your {this.props.tokenConfig.idle.token}\n                        </Text>\n                      </Flex>\n                    </Flex>\n                  </DashboardCard>\n                  {\n                    !this.state.migrationContractApproved ?\n                      this.state.processing.loading ? (\n                        <Flex\n                          mt={3}\n                          flexDirection={'column'}\n                        >\n                          <TxProgressBar\n                            web3={this.props.web3}\n                            waitText={`Approve estimated in`}\n                            hash={this.state.processing.txHash}\n                            endMessage={`Finalizing approve request...`}\n                            cancelTransaction={this.cancelTransaction.bind(this)}\n                          />\n                        </Flex>\n                      ) : (\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            mt:3,\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                          >\n                            <Icon\n                              size={'2.3em'}\n                              name={'LockOpen'}\n                              color={'cellText'}\n                            />\n                            <Text\n                              mt={1}\n                              fontSize={2}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              To deposit your {this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.\n                            </Text>\n                            <RoundButton\n                              buttonProps={{\n                                mt:3,\n                                width:[1,1/2]\n                              }}\n                              handleClick={this.approve.bind(this)}\n                            >\n                              Approve\n                            </RoundButton>\n                          </Flex>\n                        </DashboardCard>\n                      )\n                    : this.state.processing.loading ? (\n                      <Flex\n                        mt={3}\n                        flexDirection={'column'}\n                      >\n                        <TxProgressBar\n                          web3={this.props.web3}\n                          waitText={`Deposit estimated in`}\n                          hash={this.state.processing.txHash}\n                          endMessage={`Finalizing deposit request...`}\n                          cancelTransaction={this.cancelTransaction.bind(this)}\n                        />\n                      </Flex>\n                    ) : (\n                      <Box\n                        mt={2}\n                        width={1}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text>\n                            Choose max slippage:\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={`Max additional slippage on top of the one shown below`}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                          justifyContent={'space-between'}\n                        >\n                          {\n                            [0.2,0.5,1,5].map( slippage => (\n                              <FastBalanceSelector\n                                cardProps={{\n                                  p:1\n                                }}\n                                textProps={{\n                                  fontSize:1\n                                }}\n                                percentage={slippage}\n                                key={`selector_${slippage}`}\n                                onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                isActive={this.state.maxSlippage === parseFloat(slippage)}\n                              />\n                            ))\n                          }\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                        >\n                          <Flex\n                            mb={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={this.state.depositSlippage ? 'space-between' : 'flex-end'}\n                          >\n                            {\n                              this.state.depositSlippage && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    textAlign={'right'}\n                                    style={{\n                                      whiteSpace:'nowrap'\n                                    }}\n                                    color={ parseFloat(this.state.depositSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                  >\n                                    {\n                                      parseFloat(this.state.depositSlippage.toFixed(3)) === 0 ?\n                                        'No Slippage'\n                                      : `${ this.state.depositSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositSlippage.abs().toFixed(3)}%`\n                                    }\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.state.depositSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              )\n                            }\n                            {\n                              this.props.idleTokenBalance && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'flex-end'}\n                                >\n                                  <Link\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'right'}\n                                    hoverColor={'copyColor'}\n                                    onClick={ (e) => this.setFastBalanceSelector(100) }\n                                    style={{\n                                      maxWidth:'100%',\n                                      overflow:'hidden',\n                                      whiteSpace:'nowrap',\n                                      textOverflow:'ellipsis'\n                                    }}\n                                  >\n                                    {this.props.idleTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {this.props.selectedToken}\n                                  </Link>\n                                </Flex>\n                              )\n                            }\n                          </Flex>\n                          <Input\n                            min={0}\n                            type={\"number\"}\n                            required={true}\n                            height={'3.4em'}\n                            borderRadius={2}\n                            fontWeight={500}\n                            boxShadow={'none !important'}\n                            placeholder={`Insert amount`}\n                            onChange={this.changeInputValue.bind(this)}\n                            border={`1px solid ${this.props.theme.colors.divider}`}\n                            value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                          />\n                          <Flex\n                            mt={2}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'space-between'}\n                          >\n                            {\n                              [25,50,75,100].map( percentage => (\n                                <FastBalanceSelector\n                                  percentage={percentage}\n                                  key={`selector_${percentage}`}\n                                  onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                  isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                                />\n                              ))\n                            }\n                          </Flex>\n                          <Flex\n                            mt={2}\n                            justifyContent={'center'}\n                          >\n                            <RoundButton\n                              buttonProps={{\n                                mt:2,\n                                width:[1,1/2],\n                                disabled:this.state.buttonDisabled\n                              }}\n                              handleClick={this.deposit.bind(this)}\n                            >\n                              Deposit\n                            </RoundButton>\n                          </Flex>\n                        </Flex>\n                      </Box>\n                    )\n                  }\n                </Box>\n              )\n            }\n          {\n            /*\n            this.state.tokenConfig && this.state.redeemableBalance ? (\n              <Box width={1}>\n                <Migrate\n                  {...this.props}\n                  showActions={false}\n                  getTokenPrice={false}\n                  migrationTextProps={{\n                    fontWeight:500\n                  }}\n                  isMigrationTool={true}\n                  migrationImage={{\n                    mb:1,\n                    height:'1.8em',\n                    src:curveConfig.params.image\n                  }}\n                  showBalanceSelector={true}\n                  waitText={'Deposit estimated in'}\n                  tokenConfig={this.state.tokenConfig}\n                  callbackApprove={this.approveCallback.bind(this)}\n                  migrationParams={this.getMigrationParams.bind(this)}\n                  migrationCallback={this.migrationCallback.bind(this)}\n                  approveText={`To deposit your ${this.props.tokenConfig.idle.token} you need to approve Curve smart-contract first.`}\n                  migrationText={`You can deposit ${this.state.redeemableBalance.toFixed(4)} ${this.props.tokenConfig.idle.token} in the Curve Pool${ this.state.depositSlippage ? (this.state.depositSlippage.gte(0) ? ` with <span style=\"color:${this.props.theme.colors.transactions.status.failed}\">${this.state.depositSlippage.times(100).toFixed(2)}% of slippage</span>` : ` with <span style=\"color:${this.props.theme.colors.transactions.status.completed}\">${Math.abs(parseFloat(this.state.depositSlippage.times(100).toFixed(2)))}% of bonus</span>`) : '' }.`}\n                >\n                  {\n                    !this.props.account ? (\n                      <DashboardCard\n                        cardProps={{\n                          p:3,\n                          mt:3\n                        }}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                        >\n                          <Icon\n                            size={'2.3em'}\n                            name={'Input'}\n                            color={'cellText'}\n                          />\n                          <Text\n                            mt={2}\n                            fontSize={2}\n                            color={'cellText'}\n                            textAlign={'center'}\n                          >\n                            Please connect with your wallet interact with Idle.\n                          </Text>\n                          <RoundButton\n                            buttonProps={{\n                              mt:2,\n                              width:[1,1/2]\n                            }}\n                            handleClick={this.props.connectAndValidateAccount}\n                          >\n                            Connect\n                          </RoundButton>\n                        </Flex>\n                      </DashboardCard>\n                    ) : (\n                      <DashboardCard\n                        cardProps={{\n                          p:3\n                        }}\n                      >\n                        {\n                          this.state.migrationSucceeded ? (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'DoneAll'}\n                                color={this.props.theme.colors.transactions.status.completed}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You have successfully deposited your {this.props.tokenConfig.idle.token} in the Curve Pool!\n                              </Text>\n                            </Flex>\n                          ) : (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'MoneyOff'}\n                                color={'cellText'}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You don't have any {this.props.tokenConfig.idle.token} in your wallet.\n                              </Text>\n                            </Flex>\n                          )\n                        }\n                      </DashboardCard>\n                    )\n                  }\n                </Migrate>\n              </Box>\n            ) : null\n            */\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveDeposit;","import theme from '../theme';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\n// import { linearGradientDef } from '@nivo/core'\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport ChartCustomTooltip from '../ChartCustomTooltip/ChartCustomTooltip';\nimport ChartCustomTooltipRow from '../ChartCustomTooltipRow/ChartCustomTooltipRow';\n\nclass PortfolioEquityCurve extends Component {\n  state = {\n    startDate:null,\n    chartData:null,\n    chartProps:null,\n    chartwidth:null,\n    chartHeight:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentDidMount(){\n    this.loadUtils();\n    this.loadChartData();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n\n    const quickDateSelectionChanged = prevProps.quickDateSelection !== this.props.quickDateSelection;\n    const tokenChanged = JSON.stringify(prevProps.enabledTokens) !== JSON.stringify(this.props.enabledTokens);\n    if (tokenChanged || quickDateSelectionChanged){\n      this.setState({\n        chartData:null\n      },() => {\n        this.componentDidMount();\n      });\n    }\n\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n    if (mobileChanged){\n      this.loadChartData();\n    }\n  }\n\n  async loadChartData() {\n\n    let enabledTokens = this.props.enabledTokens;\n    if (!enabledTokens || !enabledTokens.length){\n      enabledTokens = Object.keys(this.props.availableTokens);\n    }\n\n    const curveTxs = await this.functionsUtil.getCurveTxs(this.props.account,0,'latest',enabledTokens);\n\n    const chartData = [];\n    let tokensBalance = [];\n    const processedTxs = {};\n    let firstTxTimestamp = null;\n    let totalBalance = this.functionsUtil.BNify(0);\n    const curvePoolContract = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    if (curveTxs && curveTxs.length){\n\n      curveTxs.forEach((tx,index) => {\n\n        if (!processedTxs[tx.hash]){\n          processedTxs[tx.hash] = [];\n        }\n\n        if (processedTxs[tx.hash].includes(tx.action)){\n          return;\n        }\n        \n        firstTxTimestamp = firstTxTimestamp ? Math.min(firstTxTimestamp,parseInt(tx.timeStamp)) : parseInt(tx.timeStamp);\n\n        const curveTokens = this.functionsUtil.BNify(tx.curveTokens);\n\n        switch (tx.action){\n          case 'CurveIn':\n          case 'CurveZapIn':\n          case 'CurveDepositIn':\n          case 'CurveTransferIn':\n            totalBalance = totalBalance.plus(curveTokens);\n          break;\n          case 'CurveOut':\n          case 'CurveZapOut':\n          case 'CurveDepositOut':\n          case 'CurveTransferOut':\n            totalBalance = totalBalance.minus(curveTokens);\n          break;\n          default:\n          break;\n        }\n\n        // Reset totalBalance if below zero\n        if (totalBalance.lt(0)){\n          totalBalance = this.functionsUtil.BNify(0);\n        }\n\n        const action = tx.action;\n        const balance = totalBalance;\n        const timeStamp = parseInt(tx.timeStamp);\n        const curveTokenPrice = this.functionsUtil.fixTokenDecimals(tx.curveTokenPrice,curvePoolContract.decimals);\n\n        // console.log(this.functionsUtil.strToMoment(timeStamp*1000).format('YYYY/MM/DD HH:mm'),tx.hash,tx.action,curveTokens.toString(),totalBalance.toString());\n\n        if (!curveTokenPrice.isNaN() && !curveTokenPrice.isNaN()){\n          tokensBalance.push({\n            action,\n            balance,\n            timeStamp,\n            curveTokens,\n            curveTokenPrice\n          });\n\n          processedTxs[tx.hash].push(action);\n        }\n      });\n    }\n\n    // Calculate Start Date\n    let startDate = null;\n    const currentDate = this.functionsUtil.strToMoment(new Date());\n\n    switch (this.props.quickDateSelection){\n      case 'week':\n        startDate = currentDate.clone().subtract(1,'week');\n      break;\n      case 'month':\n        startDate = currentDate.clone().subtract(1,'month');\n      break;\n      case 'month3':\n        startDate = currentDate.clone().subtract(3,'month');\n      break;\n      case 'month6':\n        startDate = currentDate.clone().subtract(6,'month');\n      break;\n      default:\n        startDate = null;\n      break;\n    }\n\n    const days = {};\n    let prevBalances = {};\n    let prevTimestamp = null;\n    let minChartValue = null;\n    let maxChartValue = null;\n    const aggregatedBalancesKeys = {};\n    const tokensBalancesPerDate = {};\n    let aggregatedBalance = this.functionsUtil.BNify(0);\n    // let curveTokenBalance = this.functionsUtil.BNify(0);\n    const currTimestamp = parseInt(new Date().getTime()/1000)+86400;\n\n    const tokensData = await this.functionsUtil.getTokenApiData(Object.values(this.props.availableTokens)[0].address,false,firstTxTimestamp,null,false,3600);\n\n    for (let timeStamp=firstTxTimestamp;timeStamp<=currTimestamp;timeStamp+=this.props.frequencySeconds){\n\n      let foundBalances = {};\n      let tokensBalances = {};\n      timeStamp = Math.min(currTimestamp,timeStamp);\n      let momentDate = this.functionsUtil.strToMoment(timeStamp*1000);\n\n      // eslint-disable-next-line\n      const filteredTokenData = tokensData.filter(tx => (tx.timestamp>=prevTimestamp && tx.timestamp<=timeStamp));\n\n      // eslint-disable-next-line\n      let filteredBalances = tokensBalance.filter(tx => (tx.timeStamp<=timeStamp && (!prevTimestamp || tx.timeStamp>prevTimestamp)));\n      \n      if (!filteredBalances.length){\n        if (prevBalances){\n          filteredBalances = prevBalances;\n          const lastFilteredTx = Object.values(filteredBalances).pop();\n          const currentBalance = parseFloat(lastFilteredTx.balance);\n\n          const lastTokenData = Object.values(filteredTokenData).pop();\n          let curveTokenPrice = null;\n          if (lastTokenData){\n            curveTokenPrice = await this.functionsUtil.getCurveTokenPrice(lastTokenData.blocknumber);\n          }\n\n          // Take idleToken price from API and calculate new balance\n          if (currentBalance>0 && timeStamp>firstTxTimestamp && curveTokenPrice){\n            // Set new curveTokenPrice\n            lastFilteredTx.curveTokenPrice = curveTokenPrice;\n            filteredBalances = [lastFilteredTx];\n          }\n        } else {\n          filteredBalances = [{\n            balance:this.functionsUtil.BNify(0),\n            curveTokenPrice:this.functionsUtil.BNify(0)\n          }];\n        }\n      }\n\n      const lastTx = Object.assign([],filteredBalances).pop();\n      let lastTxBalance = this.functionsUtil.BNify(lastTx.balance).times(lastTx.curveTokenPrice);\n\n      tokensBalances[curvePoolContract.token] = this.functionsUtil.BNify(lastTx.balance);\n      aggregatedBalance = lastTxBalance;\n\n      foundBalances = filteredBalances;\n\n      // console.log(momentDate.format('YYYY/MM/DD 00:00'),lastTx.balance.toString(),lastTx.curveTokenPrice.toString(),lastTxBalance.toString());\n\n      if (startDate === null || momentDate.isSameOrAfter(startDate)){\n        \n        if (momentDate.isAfter(new Date(),'day')){\n          momentDate = this.functionsUtil.strToMoment(new Date());\n        }\n\n        // Force date to midnight\n        const formattedDate = momentDate.format('YYYY/MM/DD 00:00');\n\n        // Save days for axisBottom format\n        days[momentDate.format('YYYY/MM/DD')] = 1;\n\n        const aggregatedBalanceParsed = parseFloat(parseFloat(aggregatedBalance.toFixed(6)));\n\n        aggregatedBalancesKeys[formattedDate] = aggregatedBalanceParsed;\n        tokensBalancesPerDate[formattedDate] = tokensBalances;\n\n        // console.log(formattedDate,tokensBalances);\n\n        minChartValue = minChartValue === null ? aggregatedBalanceParsed : Math.min(minChartValue,aggregatedBalanceParsed);\n        maxChartValue = maxChartValue === null ? aggregatedBalanceParsed : Math.max(maxChartValue,aggregatedBalanceParsed);\n      }\n\n      prevTimestamp = timeStamp;\n      prevBalances = foundBalances;\n    }\n\n    const aggregatedBalances = Object.keys(aggregatedBalancesKeys).map(date => ({\n      x:date,\n      y:aggregatedBalancesKeys[date],\n      balances:tokensBalancesPerDate[date]\n    }));\n\n    let itemIndex = 0;\n    aggregatedBalances.forEach( (item,index) => {\n      const itemPos = Math.floor(itemIndex/aggregatedBalances.length*100);\n      aggregatedBalances[index].itemPos = itemPos;\n      itemIndex++;\n    });\n\n    /*\n    aggregatedBalances.push({\n      x:momentDate.format('YYYY/MM/DD HH:mm'),\n      y:aggregatedBalance\n    });\n    */\n\n    // Add day before to start with zero balance\n    /*\n    const firstTxMomentDate = this.functionsUtil.strToMoment(firstTxTimestamp*1000);\n    if ((startDate === null || startDate.isSameOrBefore(firstTxMomentDate)) && aggregatedBalances.length){\n      const firstItem = aggregatedBalances[0];\n      const firstDate = this.functionsUtil.strToMoment(firstItem.x,'YYYY/MM/DD HH:mm');\n      firstDate.subtract(1,'day');\n      aggregatedBalances.unshift({\n        x:firstDate.format('YYYY/MM/DD HH:mm'),\n        y:0\n      });\n    }\n    */\n\n    // Add token Data\n    chartData.push({\n      id:'USD',\n      color: 'hsl('+ this.functionsUtil.getGlobalConfig(['stats','tokens','USD','color','hsl']).join(',')+')',\n      data:aggregatedBalances\n    });\n\n    let yFormatDecimals = 2;\n    if (maxChartValue-minChartValue<1){\n      yFormatDecimals = 4;\n    }\n\n    if (maxChartValue === minChartValue){\n      minChartValue = Math.max(0,maxChartValue-1);\n    }\n\n    const maxGridLines = 5;\n    const gridYStep = (maxChartValue-minChartValue)/maxGridLines;\n    const gridYValues = [];\n    for (let i=0;i<=maxGridLines;i++){\n      const gridYValue = parseFloat(parseFloat(minChartValue+(i*gridYStep)).toFixed(6));\n      gridYValues.push(gridYValue);\n    }\n    \n    const axisBottomMaxValues = 10;\n    const daysCount = Object.values(days).length;    \n    const daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n    const chartProps = {\n      xScale:{\n        type: 'time',\n        format: '%Y/%m/%d %H:%M',\n      },\n      yScale:{\n        type: 'linear',\n        stacked: false,\n        min: minChartValue,\n        max: maxChartValue\n      },\n      xFormat:'time:%b %d %Y',\n      yFormat:value => this.functionsUtil.formatMoney(value,yFormatDecimals),\n      axisBottom: this.props.isMobile ? null : {\n        legend: '',\n        tickSize:0,\n        format: '%b %d',\n        tickPadding: 15,\n        orient: 'bottom',\n        legendOffset: 36,\n        legendPosition: 'middle',\n        tickValues:'every '+daysFrequency+' days'\n      },\n      gridYValues,\n      pointSize:0,\n      useMesh:true,\n      axisLeft: this.props.isMobile ? null : {\n        legend: '',\n        tickSize: 0,\n        orient: 'left',\n        tickPadding: 10,\n        tickRotation: 0,\n        legendOffset: -70,\n        tickValues:gridYValues,\n        legendPosition: 'middle',\n        format: v => this.functionsUtil.abbreviateNumber(v,2),\n      },\n      animate:true,\n      pointLabel:'y',\n      areaOpacity:0.1,\n      enableArea:true,\n      enableSlices:'x',\n      enableGridY:true,\n      curve:'monotoneX',\n      enableGridX:false,\n      pointBorderWidth:1,\n      colors:d => d.color,\n      pointLabelYOffset:-12,\n      areaBaselineValue:minChartValue,\n      pointColor:{ from: 'color', modifiers: []},\n      theme:{\n        axis: {\n          ticks: {\n            text: {\n              fontSize:12,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '8 4'\n          }\n        },\n      },\n      /*\n      defs:[\n        linearGradientDef('gradientA', [\n          { offset: 0, color: 'inherit' },\n          { offset: 100, color: 'inherit', opacity: 0 },\n        ]),\n      ],\n      fill:[{ match: '*', id: 'gradientA' }],\n      */\n      margin: this.props.isMobile ? { top: 20, right: 25, bottom: 25, left: 20 } : { top: 30, right: 50, bottom: 45, left: 50 },\n      sliceTooltip:(slideData) => {\n        const { slice } = slideData;\n        const point = slice.points[0];\n        return (\n          <ChartCustomTooltip\n            point={point}\n          >\n            <ChartCustomTooltipRow\n              color={point.color}\n              label={point.serieId}\n              value={`$ ${point.data.yFormatted}`}\n            />\n            {\n            typeof point.data.balances === 'object' && Object.keys(point.data.balances).length>0 &&\n              Object.keys(point.data.balances).map(token => {\n                if (token === point.serieId){\n                  return null;\n                }\n                const tokenInfo = this.functionsUtil.getGlobalConfig(['stats','tokens',token]);\n                if (tokenInfo){\n                  const tokenName = tokenInfo.name ? tokenInfo.name : token;\n                  const color = tokenInfo.color.hex;\n                  const balance = point.data.balances[token];\n                  let formattedBalance = this.functionsUtil.formatMoney(balance,2);\n                  if (parseFloat(balance)>=0.01){\n                    return (\n                      <ChartCustomTooltipRow\n                        label={tokenName}\n                        color={color}\n                        key={`row_${token}`}\n                        value={`${formattedBalance}`}\n                      />\n                    );\n                  }\n                }\n                return null;\n              })\n            }\n          </ChartCustomTooltip>\n        );\n      }\n    };\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  render() {\n    return (\n      <GenericChart\n        type={Line}\n        showLoader={true}\n        {...this.state.chartProps}\n        data={this.state.chartData}\n        parentId={this.props.parentId}\n        height={this.props.chartHeight}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default PortfolioEquityCurve;","import theme from '../theme';\nimport Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport { Flex, Heading, Text } from \"rimble-ui\";\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport PortfolioEquityCurve from '../PortfolioEquityCurve/PortfolioEquityCurve';\n\nclass FundsOverviewCurve extends Component {\n\n  state = {\n    compAPR:null,\n    aggregatedValues:[],\n    govTokensUserBalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    await this.functionsUtil.getCurveAvgBuyPrice();\n\n    // debugger;\n\n    await this.functionsUtil.getCurveAvgSlippage();\n\n    // debugger;\n    /*\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const [govTokensUserBalance,avgAPY,days] = await Promise.all([\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,'DAI'),\n      this.functionsUtil.loadAssetField('avgAPY',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '-') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    let [tokenAllocation,compAPR] = await Promise.all([\n      this.functionsUtil.getTokenAllocation(this.props.tokenConfig,false,false),\n      this.functionsUtil.getCompAPR(this.props.selectedToken,this.props.tokenConfig)\n    ]);\n\n    if (tokenAllocation){\n      const compoundInfo = this.props.tokenConfig.protocols.find( p => (p.name === 'compound') );\n      if (compoundInfo){\n        if (tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()]){\n          const compoundAllocationPerc = tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()];\n          compAPR = compAPR.times(compoundAllocationPerc);\n        }\n      }\n    }\n\n    this.setState({\n      compAPR,\n      aggregatedValues,\n      govTokensUserBalance\n    });\n    */\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Text\n                          mt={2}\n                          fontWeight={2}\n                          fontSize={[1,2]}\n                          color={'cellText'}\n                        >\n                          {v.props.title}\n                        </Text>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquityCurve\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLentCurve',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPercCurve',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            {\n              /*\n              <Flex\n                mb={[2,0]}\n                width={[1,1/5]}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'flex-start'}\n              >\n                <Title\n                  mb={2}\n                  fontSize={[3,4]}\n                  component={Heading.h3}\n                >\n                  Fees\n                </Title>\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'feesCounter',\n                    props:{\n                      decimals:7,\n                      maxPrecision:8,\n                      style:{\n                        fontWeight:300,\n                        fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                        color:theme.colors.counter\n                      },\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n              */\n            }\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveApy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Avg Slippage\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveAvgSlippage',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverviewCurve;","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport { Box, Flex, Text, Icon } from \"rimble-ui\";\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport CurveDeposit from '../CurveDeposit/CurveDeposit';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport TransactionField from '../TransactionField/TransactionField';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport FundsOverviewCurve from '../FundsOverviewCurve/FundsOverviewCurve';\n\nclass AssetPage extends Component {\n\n  state = {\n    inputValue:{},\n    processing:{},\n    tokenFees:null,\n    canRedeem:null,\n    canDeposit:null,\n    action:'deposit',\n    activeModal:null,\n    tokenConfig:null,\n    tokenBalance:null,\n    tokenApproved:null,\n    selectedToken:null,\n    availableTokens:{},\n    redeemBalance:null,\n    depositBalance:null,\n    buttonDisabled:false,\n    curveTokenPrice:null,\n    depositSlippage:null,\n    idleTokenBalance:null,\n    withdrawSlippage:null,\n    govTokensBalance:null,\n    curveZapContract:null,\n    curveTokenConfig:null,\n    curveTokensAmounts:{},\n    govTokensDisabled:null,\n    componentMounted:false,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    redeemableBalance:null,\n    fastBalanceSelector:{},\n    curveAvailableTokens:{},\n    tokenFeesPercentage:null,\n    redeemUnevenAmounts:false,\n    curveDepositContract:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  changeFromToken = (selectedToken) => {\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    this.props.goToSection(`${curveConfig.params.route}/${selectedToken}`);\n  }\n\n  getSelectedToken(){\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    return this.props.urlParams.param1 && curveAvailableTokens[this.props.urlParams.param1] ? this.props.urlParams.param1 : Object.keys(curveAvailableTokens)[0];\n  }\n\n  setSelectedToken = async (selectedToken) => {\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n    this.setState({\n      tokenConfig,\n      selectedToken,\n      availableTokens,\n      curveTokenConfig\n    });\n  }\n\n  loadTokensInfo = async () => {\n\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    this.setState({\n      curveAvailableTokens\n    });\n\n    const selectedToken = this.getSelectedToken();\n    // Check if token is set the query params\n    if (selectedToken && selectedToken !== this.props.urlParams.param1){\n      this.changeFromToken(selectedToken);\n      return await this.setSelectedToken(selectedToken);\n    } else if (selectedToken !== this.state.selectedToken){\n      await this.setSelectedToken(selectedToken);\n    }\n\n    const newState = {...this.state};\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n\n    if (newState.selectedToken !== selectedToken){\n      newState.selectedToken = selectedToken;\n    }\n\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n\n    const [\n      curveZapContract,\n      curvePoolContract,\n      curveSwapContract,\n      curveDepositContract\n    ] = await Promise.all([\n      this.functionsUtil.getCurveZapContract(),\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract()\n    ]);\n\n    newState.curveZapContract = curveZapContract;\n    newState.curvePoolContract = curvePoolContract;\n    newState.curveSwapContract = curveSwapContract;\n    newState.curveDepositContract = curveDepositContract;\n\n    newState.availableTokens = availableTokens;\n\n\n    // console.log('curveTokenPrice',newState.curveTokenPrice.toFixed(6),'curveTokenBalance',newState.curveTokenBalance.toFixed(6),'redeemableBalance',newState.redeemableBalance.toFixed(20),'tokenBalance',newState.tokenBalance.toFixed(20));\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[selectedToken] = tokenConfig;\n\n    newState.tokenConfig = tokenConfig;\n    newState.curveTokenConfig = curveTokenConfig;\n\n    if (this.props.account){\n      [\n        newState.curveTokenPrice,\n        newState.curveTokenBalance,\n        newState.tokenFeesPercentage,\n        newState.tokenFees,\n        newState.tokenBalance,\n        newState.idleTokenBalance,\n        newState.tokenApproved,\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokenPrice(),\n        this.functionsUtil.getCurveTokenBalance(),\n        this.functionsUtil.getTokenFees(tokenConfig),\n        this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n        this.functionsUtil.getTokenBalance(selectedToken,this.props.account),\n        this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n        this.functionsUtil.checkTokenApproved(selectedToken,curveDepositContract.address,this.props.account),\n      ]);\n\n\n      newState.processing = {\n        redeem:{\n          txHash:null,\n          loading:false\n        },\n        deposit:{\n          txHash:null,\n          loading:false\n        },\n        approve:{\n          txHash:null,\n          loading:false\n        },\n      };\n      newState.inputValue = {\n        redeem:null,\n        deposit:null\n      };\n      newState.fastBalanceSelector = {\n        redeem:null,\n        deposit:null\n      };\n\n      newState.componentMounted = true;\n      newState.depositBalance = newState.tokenBalance;\n      newState.redeemBalance = newState.redeemableBalance;\n      newState.govTokensDisabled = tokenConfig.govTokensDisabled;\n      newState.canRedeem = newState.curveTokenBalance && newState.curveTokenBalance.gt(0);\n      newState.canDeposit = newState.idleTokenBalance && newState.idleTokenBalance.gt(0);\n      newState.redeemableBalance = newState.curveTokenBalance ? newState.curveTokenBalance.times(newState.curveTokenPrice) : this.functionsUtil.BNify(0);\n    }\n\n    this.setState(newState);\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async calculateSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,this.state.curvePoolContract.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositBalance = amount;\n        newState.depositSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      case 'redeem':\n        newState.redeemBalance = amount;\n        newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.urlParams.param1 !== this.props.urlParams.param1;\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n\n    if (accountChanged || transactionsChanged || tokenChanged){\n      await this.loadTokensInfo();\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const redeemUnevenAmountsChanged = this.state.redeemUnevenAmounts !== prevState.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n    if (actionChanged || fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    if (actionChanged){\n      this.updateAssetSelector();\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  updateAssetSelector = async () => {\n    const newState = {};\n    switch (this.state.action){\n      case 'deposit':\n        this.loadTokensInfo();\n      break;\n      case 'redeem':\n        // this.loadTokensInfo();\n        const tokenConfig = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n        newState.curveAvailableTokens = {};\n        newState.curveTokenConfig = tokenConfig;\n        newState.selectedToken = tokenConfig.token;\n        newState.curveAvailableTokens[tokenConfig.token] = tokenConfig;\n      break;\n      default:\n      break;\n    }\n\n    this.setState(newState);\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.state.tokenBalance ? this.functionsUtil.BNify(this.state.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          amount = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n        } else {\n          amount = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  changeInputValue = (e) => {\n    if (!this.state.action){\n      return false;\n    }\n\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && amount.gt(this.state.tokenBalance));\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.curveTokenBalance)) );\n        } else {\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.redeemableBalance)) );\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = this.state.tokenApproved;\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.state.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.functionsUtil.enableERC20(this.state.selectedToken,this.state.curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const inputValue = this.state.inputValue[this.state.action];\n    const selectedPercentage = this.getFastBalanceSelector();\n\n    let loading = true;\n\n    switch (this.state.action){\n      // Handle deposit in curve\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.state.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if (this.state.metaTransactionsEnabled && txError){\n            this.setState({\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,tokensToDeposit);\n        const minMintAmount = await this.functionsUtil.genericContractCall(this.state.curveSwapContract.name,'calc_token_amount',[amounts,true]);\n        const depositParams = [amounts,minMintAmount];\n\n        // No need for callback atm\n        contractSendResult = await this.props.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n      break;\n      case 'redeem':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        let curveTokensToRedeem = null;\n        if (selectedPercentage){\n          curveTokensToRedeem = this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage);\n        } else {\n          curveTokensToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals));\n          if (!this.state.redeemUnevenAmounts){\n            const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n            curveTokensToRedeem = curveTokensToRedeem.div(curveTokenPrice);\n          }\n        }\n\n        if (!curveTokensToRedeem){\n          return false;\n        }\n\n        const callbackRedeem = (tx,error) => {\n          const txSucceeded = tx.status === 'success';\n\n          // Send Google Analytics event\n          const eventData = {\n            eventLabel: tx.status,\n            eventCategory: `CurveRedeem`,\n            eventAction: this.state.selectedToken,\n            eventValue: curveTokensToRedeem.toFixed()\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          }\n        };\n\n        const callbackReceiptRedeem = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const _amount = this.functionsUtil.normalizeTokenAmount(curveTokensToRedeem,this.state.curvePoolContract.decimals).toString();\n        let min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,0);\n\n        const contractName = this.state.curveDepositContract.name;\n        if (this.state.redeemUnevenAmounts){\n          console.log('remove_liquidity_imbalance',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_imbalance', [min_amounts, _amount], null, callbackRedeem, callbackReceiptRedeem);\n        } else {\n          min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,_amount);\n          console.log('remove_liquidity',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts], null, callbackRedeem, callbackReceiptRedeem);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    // console.log('contractSendResult',contractSendResult);\n\n    if (contractSendResult !== false){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    const userHasFunds = this.props.account && this.state.curveTokenBalance && this.functionsUtil.BNify(this.state.curveTokenBalance).gt(0);\n    const canPerformAction = true;\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            {\n              <Breadcrumb\n                {...this.props}\n                isMobile={this.props.isMobile}\n                path={['Boost',this.state.selectedToken]}\n                handleClick={ e => this.props.goToSection('best') }\n                text={this.functionsUtil.getGlobalConfig(['strategies','best','title'])}\n              />\n            }\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Curve Pool\n        </Title>\n        <Flex\n          width={1}\n        >\n          <Flex\n            width={1}\n            alignItems={'center'}\n            flexDirection={'column'}\n            justifyContent={'center'}\n          >\n            <Flex\n              width={[1,0.36]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Box\n                width={1}\n              >\n                <Text\n                  mb={1}\n                >\n                  Select your asset:\n                </Text>\n                <AssetSelector\n                  {...this.props}\n                  id={'token-from'}\n                  onChange={this.changeFromToken}\n                  selectedToken={this.state.selectedToken}\n                  tokenConfig={this.state.curveTokenConfig}\n                  showBalance={this.state.action === 'deposit'}\n                  availableTokens={this.state.curveAvailableTokens}\n                />\n              </Box>\n              <Box\n                width={1}\n              >\n                {\n                  canPerformAction ? (\n                    <Flex\n                      mt={2}\n                      flexDirection={'column'}\n                    >\n                      <Text\n                        mb={2}\n                      >\n                        Choose the action:\n                      </Text>\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('deposit');\n                            }\n                          }}\n                          isInteractive={true}\n                          isActive={ this.state.action === 'deposit' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'deposit'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Deposit\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('redeem');\n                            }\n                          }}\n                          isInteractive={true}\n                          isDisabled={ !this.state.canRedeem }\n                          isActive={ this.state.action === 'redeem' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'redeem'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Redeem\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                      </Flex>\n                    </Flex>\n                  ) : (\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    >\n                      <Icon\n                        size={'2.3em'}\n                        name={'MoneyOff'}\n                        color={'cellText'}\n                      />\n                      <Text\n                        mt={2}\n                        fontSize={2}\n                        color={'cellText'}\n                        textAlign={'center'}\n                      >\n                        You don't have any {this.state.tokenConfig.idle.token} in your wallet.\n                      </Text>\n                    </Flex>\n                  )\n                }\n              </Box>\n            </Flex>\n            <Flex\n              width={1}\n              mt={ this.props.account ? 3 : 0 }\n            >\n            {\n              this.state.action === 'deposit' ? (\n                <CurveDeposit\n                  {...this.props}\n                  {...this.state}\n                />\n              ) : this.state.action === 'redeem' && (\n                <CurveRedeem\n                  {...this.props}\n                  {...this.state}\n                />\n              )\n            }\n            </Flex>\n          </Flex>\n        </Flex>\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverviewCurve\n                {...this.props}\n                tokenFees={this.state.tokenFees}\n                tokenConfig={this.state.tokenConfig}\n                selectedToken={this.state.selectedToken}\n                availableTokens={this.state.availableTokens}\n                enabledTokens={Object.keys(this.state.availableTokens)}\n              />\n            </Flex>\n        }\n        {\n          /*\n          this.props.account && !this.state.govTokensDisabled[this.state.selectedToken] && Object.keys(availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id=\"earnings-estimation\"\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(availableGovTokens)}\n                handleClick={(props) => {}}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.33,0.22]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.26],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    props:{\n                      width:[0.33,0.26],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                      {\n                        name:'tooltip',\n                        props:{\n                          placement:'bottom',\n                          message:'The shown balance may be lower than the real one.',\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    mobile:false,\n                    props:{\n                      width: 0.26,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                ]}\n                {...this.props}\n                availableTokens={availableGovTokens}\n              />\n            </Flex>\n          */\n        }\n        {\n          /*\n          this.props.account && \n            <Flex\n              mb={[3,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'estimated-earnings-container'}\n            >\n              <Title my={[3,4]}>Estimated earnings</Title>\n              <EstimatedEarnings\n                {...this.props}\n              />\n            </Flex>\n          */\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              availableTokens={this.state.availableTokens}\n              enabledTokens={Object.keys(this.state.availableTokens)}\n              enabledActions={['CurveIn','CurveOut','CurveZapIn','CurveZapOut','CurveTransferIn','CurveTransferOut','CurveDepositIn','CurveDepositOut']}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.state.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport ExtLink from '../../ExtLink/ExtLink.js';\nimport { Text, Modal, Flex, Link } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass PolygonModal extends React.Component {\n\n  state = {};\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    this.functionsUtil.setLocalStorage('polygonApproved',true);\n    this.props.closeModal();\n  }\n\n  render() {\n    const polygonBridgeInfo = this.functionsUtil.getGlobalConfig(['tools','polygonBridge']);\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','650px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            pt={3}\n            iconHeight={'2em'}\n            title={'Welcome to Idle <> Polygon'}\n            icon={'images/protocols/polygon.svg'}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                fontSize={2}\n                textAlign={'left'}\n                color={'dark-gray'}\n              >\n                You're about to enter Idle Finance in the Polygon Network, make sure to have some <ExtLink color={'link'} fontSize={2} href={this.functionsUtil.getEtherscanAddressUrl(this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.currentNetwork.baseToken,'address']))}>{this.props.currentNetwork.baseToken}</ExtLink> tokens in your wallet to send your transactions! Also you can use our <Link color={'link'} fontSize={2} mainColor={'link'} onClick={ e => this.props.goToSection(`tools/${polygonBridgeInfo.route}/${this.props.currentNetwork.baseToken}`)}>{polygonBridgeInfo.label}</Link> to transfer your tokens from Mainnet to Polygon.<br />If you are not confident with this just switch to Mainnet using your wallet provider.\n              </Text>\n            </Flex>\n            <Flex\n              my={3}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                handleClick={this.closeModal}\n                buttonProps={{\n                  width:['100%','40%']\n                }}\n              >\n                Let Me In\n              </RoundButton>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default PolygonModal;","import React from \"react\";\nimport {\n  Text,\n  Modal,\n  Button,\n  Form,\n  Icon,\n  Flex,\n  Link\n} from \"rimble-ui\";\nimport axios from 'axios';\nimport colors from '../../colors';\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\nimport globalConfigs from '../../configs/globalConfigs';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\n\nclass WelcomeModal extends React.Component {\n\n  state = {\n    email:null,\n    error:false,\n    subscribed:false,\n    sendingForm:false\n  };\n\n  functionsUtil = null;\n\n  constructor(props) {\n    super(props);\n    this.functionsUtil = new FunctionsUtil(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleValidation = this.handleValidation.bind(this);\n  }\n\n  componentDidUpdate = async () => {\n    this.functionsUtil.setProps(this.props);\n  }\n\n  sendUserInfo = (sendEmail=true) => {\n    const walletProvider = this.functionsUtil.getWalletProvider();\n    const userInfo = {\n      address: this.props.account,\n      provider: walletProvider\n    };\n\n    if (sendEmail && this.state.email !== null){\n      userInfo.email = this.state.email;\n    }\n\n    this.functionsUtil.simpleIDPassUserInfo(userInfo);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    if (!this.state.email){\n      return false;\n    }\n\n    const callback = () => {\n      this.setState({\n        sendingForm:false,\n        subscribed:true\n      });\n      window.setTimeout(this.props.closeModal,2500);\n    };\n\n    this.sendUserInfo();\n\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'send_email',\n      eventLabel: 'WelcomeModal'\n    });\n\n    axios.post(globalConfigs.newsletterSubscription.endpoint, {\n      'email': this.state.email\n    }).then(r => {\n      callback();\n    })\n    .catch(err => {\n      callback();\n    });\n\n    // Set signedUp in the localStorage\n    if (localStorage){\n      const walletAddress = this.props.account.toLowerCase();\n      let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : null;\n      if (lastLogin && lastLogin[walletAddress] && !lastLogin[walletAddress].signedUp){\n        lastLogin[walletAddress].signedUp = true;\n        this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n      }\n    }\n\n    this.setState({\n      sendingForm:true\n    })\n  };\n\n  closeModal = async () => {\n\n    const closeModal = () => {\n      this.props.closeModal();\n    };\n\n    try{\n      // Prevent sending email\n      this.sendUserInfo(false);\n\n      // Send Google Analytics event\n      if (globalConfigs.analytics.google.events.enabled){\n        this.functionsUtil.sendGoogleAnalyticsEvent({\n          eventCategory: 'UI',\n          eventAction: 'continue_without_email',\n          eventLabel: 'WelcomeModal'\n        },closeModal);\n\n        // Call callback after 1 second if stuck\n        setTimeout(closeModal,1000);\n      } else {\n        closeModal();\n      }\n    } catch (err) {\n      closeModal();\n    }\n  }\n\n  handleValidation(e) {\n    if (e && e.target) {\n      this.setState({ email: e.target.value });\n      e.target.parentNode.classList.add(\"was-validated\");\n    }\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        {\n          this.state.subscribed ? (\n            <ModalCard\n              closeFunc={this.closeModal}\n            >\n              <ModalCard.Header title={'All done'} icon={`images/done.svg`}></ModalCard.Header>\n              <ModalCard.Body>\n                <Flex width={1} flexDirection={'column'} mb={3}>\n                  <Text color={'dark-gray'} textAlign={'center'} fontSize={3} my={0}>\n                    Thanks for subscribing!\n                  </Text>\n                  <Button\n                    my={3}\n                    width={'100%'}\n                    borderRadius={4}\n                    onClick={this.closeModal}\n                  >\n                    CLOSE\n                  </Button>\n                </Flex>\n              </ModalCard.Body>\n            </ModalCard>\n          ) : (\n            <ModalCard closeFunc={this.closeModal}>\n              <ModalCard.Header title={'Stay up-to-date!'} icon={`images/notification.svg`}>\n              </ModalCard.Header>\n              <ModalCard.Body>\n                <Form onSubmit={this.handleSubmit}>\n                  <Flex width={1} flexDirection={'column'} mb={3}>\n                    <Text color={'mid-gray'} textAlign={'left'} fontSize={3} my={0}>\n                      Add your e-mail to receive updates about:\n                    </Text>\n                  </Flex>\n                  <Flex width={1} flexDirection={'column'} mt={2}>\n                    <Flex my={2} flexDirection={'row'} alignItems={'center'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Performance reports\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        New Protocols & Tokens\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Latest updates\n                      </Text>\n                    </Flex>\n                    <Form.Field width={1} label={''}>\n                      <Form.Input\n                        px={3}\n                        py={4}\n                        required\n                        width={1}\n                        border={0}\n                        fontSize={3}\n                        type={\"email\"}\n                        name={\"EMAIL\"}\n                        outline={'none'}\n                        borderColor={'cardBorder'}\n                        backgroundColor={'cardBg'}\n                        textAlign={['center','left']}\n                        className={header_styles.input}\n                        placeholder={'Enter your e-mail'}\n                        onChange={this.handleValidation}\n                      />\n                    </Form.Field>\n                    <Flex mb={3} flexDirection={'column'} alignItems={'center'} justifyContent={'center'}>\n                      <ButtonLoader\n                        buttonText={'SUBMIT'}\n                        isLoading={this.state.sendingForm}\n                        buttonProps={{className:header_styles.gradientButton,width:'100%',type:'submit'}}\n                      >\n                      </ButtonLoader>\n                      <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without e-mail</Link>\n                    </Flex>\n                  </Flex>\n                </Form>\n              </ModalCard.Body>\n            </ModalCard>\n          )\n        }\n      </Modal>\n    );\n  }\n}\n\nexport default WelcomeModal;\n","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\n\nclass MigrateModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'continue_without_migrate',\n        eventLabel: 'MigrateModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowMigrateModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowMigrateModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = () => {\n    const tokenMigrationRoute = this.functionsUtil.getGlobalConfig(['tools','tokenMigration','route']);\n    this.props.goToSection('tools/'+tokenMigrationRoute);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            iconHeight={'40px'}\n            title={'Migrate to Idle'}\n            icon={`images/migrate.svg`}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={3}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                You can migrate your funds from Compound, Aave, Fulcrum, Yearn and Idle V2 with just one transaction.\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                my={2}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.protocolsTokensBalances && Object.keys(this.props.protocolsTokensBalances).map( token => (\n                    <Flex\n                      mb={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      key={`token_${token}`}\n                      justifyContent={'space-between'}\n                    >\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'icon',\n                          props:{\n                            mr:2,\n                            height:'2.3em'\n                          }\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                      <SmartNumber\n                        mr={2}\n                        {...fieldProps}\n                        minPrecision={5}\n                        number={this.props.protocolsTokensBalances[token].balance} \n                      />\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'tokenName',\n                          props:fieldProps\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                    </Flex>\n                  ) )\n                }\n                <Text\n                  mb={0}\n                  fontSize={1}\n                  color={'red'}\n                  fontWeight={500}\n                  textAlign={'center'}\n                >\n                  Please be aware that by migrating your tokens from other protocols, your open positions might be liquidated if collateralized with migrated tokens.\n                </Text>\n              </Flex>\n              <Flex\n                mb={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <ButtonLoader\n                  buttonText={'MIGRATE'}\n                  handleClick={this.migrate}\n                  isLoading={this.state.sendingForm}\n                  buttonProps={{\n                    width:['100%','50%'],\n                    className:header_styles.gradientButton\n                  }}\n                >\n                </ButtonLoader>\n                {\n                /*\n                <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without migrate</Link>\n                */\n                }\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default MigrateModal;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass UpgradeModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'close_upgrade_modal',\n        eventLabel: 'UpgradeModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowUpgradeModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowUpgradeModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = async (token,strategy=null) => {\n\n    if (!strategy){\n      strategy = this.props.selectedStrategy;\n    }\n\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  convert = async (token) => {\n    const convertTool = this.functionsUtil.getGlobalConfig(['tools','tokenMigration']);\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n\n    if (!this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            icon={`images/migrate.svg`}\n            title={'Upgrade Available'}\n            iconHeight={['35px','40px']}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={[2,3]}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                Idle now supports yield farming and governance tokens distribution, migrate now your portfolio with just one click!\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n              >\n                <Flex\n                  fontSize={[2,3]}\n                  width={[0.5,0.28]}\n                  fontWeight={[4,5]}\n                  color={'copyColor'}\n                >\n                  {\n                    this.props.isMobile ? 'ASSET' : 'ASSET TO MIGRATE'\n                  }\n                </Flex>\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      BALANCE\n                    </Flex>\n                  )\n                }\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      OLD APY\n                    </Flex>\n                  )\n                }\n                <Flex\n                  fontSize={[2,3]}\n                  fontWeight={[4,5]}\n                  width={[0.25,0.19]}\n                  color={'copyColor'}\n                  justifyContent={'center'}\n                >\n                  {\n                    this.props.isMobile ? 'APY' : 'NEW APY'\n                  }\n                </Flex>\n                <Flex\n                  width={[0.25,0.15]}\n                >\n                  \n                </Flex>\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.tokensToMigrate && Object.keys(this.props.tokensToMigrate).map( tokenKey => {\n                    const token = this.props.tokensToMigrate[tokenKey].token;\n                    const strategy = this.props.tokensToMigrate[tokenKey].strategy;\n                    const tokenConfig = this.props.tokensToMigrate[tokenKey].tokenConfig;\n                    const balance = this.props.tokensToMigrate[tokenKey].oldContractBalanceFormatted;\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${tokenKey}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={[0.5,0.28]}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:['1.8em','2.3em']\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                        </Flex>\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <SmartNumber\n                                {...fieldProps}\n                                minPrecision={5}\n                                number={balance}\n                                flexProps={{\n                                  justifyContent:'center'\n                                }}\n                              />\n                            </Flex>\n                          )\n                        }\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <AssetField\n                                {...this.props}\n                                fieldInfo={{\n                                  name:'oldApy',\n                                  props:fieldProps\n                                }}\n                                token={token}\n                                tokenConfig={tokenConfig}\n                              />\n                            </Flex>\n                          )\n                        }\n                        <Flex\n                          width={[0.25,0.19]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={token}\n                            tokenConfig={tokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={[0.25,0.15]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.migrate(token,strategy) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.oldIdleTokensToMigrate && Object.keys(this.props.oldIdleTokensToMigrate).map( token => {\n                    const tokenConfig = this.props.oldIdleTokensToMigrate[token].tokenConfig;\n\n                    if (!tokenConfig){\n                      return null;\n                    }\n\n                    const balance = this.props.oldIdleTokensToMigrate[token].balance;\n                    let newTokenConfig = null;\n\n                    if (tokenConfig.availableStrategies && !this.props.availableTokens[tokenConfig.baseToken]){\n                      newTokenConfig = this.props.availableStrategies[tokenConfig.availableStrategies[0]][tokenConfig.baseToken];\n                    } else {\n                      newTokenConfig = this.props.availableTokens[tokenConfig.baseToken];\n                    }\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${token}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={0.28}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:'2.3em'\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <SmartNumber\n                            {...fieldProps}\n                            minPrecision={5}\n                            number={balance}\n                            flexProps={{\n                              justifyContent:'center'\n                            }}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'oldApy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.15}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.convert(token) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                my={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <RoundButton\n                  handleClick={this.closeModal}\n                  buttonProps={{\n                    fontSize:[2,3],\n                    width:['100%','40%'],\n                  }}\n                >\n                  MIGRATE LATER\n                </RoundButton>\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default UpgradeModal;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport { Text, Modal, Flex } from \"rimble-ui\";\nimport ExtLink from '../../ExtLink/ExtLink.js';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass RiskAdjustedModal extends React.Component {\n\n  state = {};\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    this.props.closeModal();\n  }\n\n  render() {\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','650px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            pt={3}\n            iconHeight={'40px'}\n            icon={'images/warning.svg'}\n            title={'Risk Adjusted Dismissed'}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                fontSize={2}\n                textAlign={'left'}\n                color={'dark-gray'}\n              >\n                The Risk Adjusted strategy has been dismissed after the execution of <ExtLink fontSize={2} href={this.functionsUtil.getAppUrl('#/governance/proposals/14')}>IIP-14</ExtLink> on the 13th October 2021. An incentive program has been released to let users migrate their funds in the <ExtLink fontSize={2} href={'https://beta.idle.finance/#/dashboard/tranches/senior/idle'}>Senior Tranche</ExtLink> in order to keep a similar risk profile as the Risk-Adjusted strategy. Read the <ExtLink fontSize={2} href={'https://gov.idle.finance/t/risk-adjusted-removal-for-tranches-migration/673'}>Governance Forum Post</ExtLink> for further information about the migration program.\n              </Text>\n            </Flex>\n            <Flex\n              my={3}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                handleClick={this.closeModal}\n                buttonProps={{\n                  width:['100%','40%']\n                }}\n              >\n                Got it\n              </RoundButton>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default RiskAdjustedModal;","import React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport { Flex, Card, Icon, Text } from 'rimble-ui';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardMenu from '../DashboardMenu/DashboardMenu';\n\n// Import page components\nimport Stats from '../Stats/Stats';\nimport Utils from '../Utils/Utils';\nimport AssetPage from '../AssetPage/AssetPage';\nimport RoundButton from '../RoundButton/RoundButton';\nimport Swipeable from '../utilities/components/Swipeable';\nimport BetaModal from \"../utilities/components/BetaModal\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CurveStrategy from '../CurveStrategy/CurveStrategy';\nimport PolygonModal from \"../utilities/components/PolygonModal\";\nimport WelcomeModal from \"../utilities/components/WelcomeModal\";\nimport TooltipModal from \"../utilities/components/TooltipModal\";\nimport MigrateModal from \"../utilities/components/MigrateModal\";\nimport UpgradeModal from \"../utilities/components/UpgradeModal\";\nimport DashboardHeader from '../DashboardHeader/DashboardHeader';\nimport RiskAdjustedModal from \"../utilities/components/RiskAdjustedModal\";\n\nclass Dashboard extends Component {\n  state = {\n    menu:[],\n    baseRoute:null,\n    clickEvent:null,\n    activeModal:null,\n    menuOpened:false,\n    currentRoute:null,\n    pageComponent:null,\n    currentSection:null,\n    currentNetwork:null,\n    selectedSection:null,\n    tokensToMigrate:null,\n    showResetButton:false,\n    selectedSubsection:null,\n    pageComponentProps:null,\n    oldIdleTokensToMigrate:null,\n    protocolsTokensBalances:null,\n  };\n\n  timeoutId = null;\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    window.functionsUtil = this.functionsUtil;\n  }\n\n  async loadMenu() {\n    const extraicons=this.functionsUtil.getGlobalConfig(['extraicons']);\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n\n    const menu = [];\n    const currentNetwork = this.functionsUtil.getRequiredNetwork();\n\n    // Add Stake Polygon\n    const stakePolygonConfig = this.functionsUtil.getGlobalConfig(['tools','stakePolygon']);\n    if (stakePolygonConfig.enabled && (!stakePolygonConfig.availableNetworks || stakePolygonConfig.availableNetworks.includes(currentNetwork.id))){\n      menu.push(\n        {\n          submenu:[],\n          label:'Stake',\n          selected:false,\n          color:'dark-gray',\n          route:'/dashboard/stake',\n          image:extraicons['stake'].icon,\n          imageDark:extraicons['stake'].iconDark,\n          bgColor:this.props.theme.colors.primary,\n          imageInactive:extraicons['stake'].iconInactive,\n          imageInactiveDark:extraicons['stake'].iconInactiveDark,\n          component:Utils,\n          componentProps:{\n            showBreadCrumb:false,\n            toolProps:stakePolygonConfig.props,\n            selectedSubsection:stakePolygonConfig\n          },\n        }\n      );\n    }\n\n    const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n    Object.keys(strategies).filter( s => ( !strategies[s].comingSoon && (!strategies[s].availableNetworks || strategies[s].availableNetworks.includes(currentNetwork.id)) && (!strategies[s].enabledEnvs.length || strategies[s].enabledEnvs.includes(this.props.currentEnv)) ) ).forEach(strategy => {\n      const strategyInfo = strategies[strategy];\n      const imageInfo=extraicons[strategy];\n      menu.push({\n        submenu:[],\n        color:'#fff',\n        selected:false,\n        image:imageInfo.icon,\n        label:strategyInfo.title,\n        bgColor:strategyInfo.color,\n        route:baseRoute+'/'+strategy,\n        visible:strategyInfo.visible,\n        imageDark:imageInfo.iconDark,\n        component:strategyInfo.component,\n        imageInactive:imageInfo.iconInactive,\n        imageInactiveDark:imageInfo.iconInactiveDark\n      });\n    });\n    \n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n\n    // Add Curve\n    if (curveConfig.enabled){\n      const curveParams = Object.assign({\n        submenu:[],\n        selected:false,\n        component:CurveStrategy,\n      },curveConfig.params);\n\n      menu.push(curveParams);\n    }\n\n    // Add Stake\n    const stakeConfig = this.functionsUtil.getGlobalConfig(['tools','stake']);\n    if (stakeConfig.enabled && (!stakeConfig.availableNetworks || stakeConfig.availableNetworks.includes(currentNetwork.id))){\n      menu.push(\n        {\n          submenu:[],\n          label:'Stake',\n          selected:false,\n          color:'dark-gray',\n          route:'/dashboard/stake',\n          image:extraicons['stake'].icon,\n          imageDark:extraicons['stake'].iconDark,\n          bgColor:this.props.theme.colors.primary,\n          imageInactive:extraicons['stake'].iconInactive,\n          imageInactiveDark:extraicons['stake'].iconInactiveDark,\n          component:Utils,\n          componentProps:{\n            showBreadCrumb:false,\n            toolProps:stakeConfig.props,\n            selectedSubsection:stakeConfig\n          },\n        }\n      );\n    }\n\n    const statsInfo = this.functionsUtil.getGlobalConfig(['stats']);\n    if (!statsInfo.availableNetworks || statsInfo.availableNetworks.includes(currentNetwork.id)){\n      menu.push(\n        {\n          submenu:[],\n          label:'Stats',\n          selected:false,\n          component:Stats,\n          bgColor:'#21f36b',\n          color:'dark-gray',\n          route:'/dashboard/stats',\n          image:extraicons['stats'].icon,\n          imageDark:extraicons['stats'].iconDark,\n          imageInactive:extraicons['stats'].iconInactive,\n          imageInactiveDark:extraicons['stats'].iconInactiveDark,\n        }\n      );\n    }\n    \n    // Add tools\n    menu.push(\n      {\n        label:'Tools',\n        selected:false,\n        component:Utils,\n        color:'dark-gray',\n        route:'/dashboard/tools',\n        image:extraicons['tools'].icon,\n        imageDark:extraicons['tools'].iconDark,\n        bgColor:this.props.theme.colors.primary,\n        imageInactive:extraicons['tools'].iconInactive,\n        imageInactiveDark:extraicons['tools'].iconInactiveDark,\n        submenu:Object.values(this.functionsUtil.getGlobalConfig(['tools'])).filter( tool => (tool.enabled && (!tool.availableNetworks || tool.availableNetworks.includes(currentNetwork.id))) )\n      }\n    );\n\n    // Add Forum\n    menu.push(\n      {\n        submenu:[],\n        mobile:false,\n        label:'Forum',\n        selected:false,\n        component:null,\n        color:'dark-gray',\n        bgColor:'#ff0000',\n        isExternalLink:true,\n        image:extraicons['forum'].icon,\n        imageDark:extraicons['forum'].iconDark,\n        imageInactive:extraicons['forum'].iconInactive,\n        imageInactiveDark:extraicons['forum'].iconInactiveDark,\n        route:this.functionsUtil.getGlobalConfig(['forumURL'])\n      }\n    );\n\n    await this.setState({\n      menu,\n      currentNetwork\n    });\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  openTooltipModal = (modalTitle,modalContent) => {\n\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: modalTitle,\n      eventLabel: 'TooltipModal'\n    });\n\n    this.setState({\n      modalTitle,\n      modalContent\n    },() => {\n      this.setActiveModal('tooltip');\n    })\n  }\n\n  setActiveModal = (activeModal) => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadParams() {\n\n    if (!this.props.networkInitialized){\n      return;\n    }\n\n    const { match: { params } } = this.props;\n\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard','baseRoute']);\n    let currentRoute = baseRoute;\n\n    let pageComponent = null;\n    let selectedToken = null;\n    let currentSection = null;\n    let selectedStrategy = null;\n    let pageComponentProps = null;\n\n    // Set strategy\n    if (params.section){\n      currentSection = params.section;\n      const param1 = params.param1;\n      const param2 = params.param2;\n\n      const section_is_strategy = Object.keys(this.props.availableStrategies).includes(currentSection.toLowerCase());\n      const param1_is_strategy = param1 && Object.keys(this.props.availableStrategies).includes(param1.toLowerCase());\n\n      if (section_is_strategy || param1_is_strategy){\n\n        if (!section_is_strategy){\n          currentRoute += '/'+currentSection;\n        }\n\n        selectedStrategy = section_is_strategy ? currentSection : param1;\n        currentRoute += '/'+selectedStrategy;\n\n        // Set token\n        const param1_is_token = param1 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param1.toUpperCase());\n        const param2_is_token = param2 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param2.toUpperCase());\n        if (param1_is_token || param2_is_token){\n          selectedToken = param1_is_token ? param1.toUpperCase() : param2.toUpperCase();\n          currentRoute += '/'+selectedToken;\n\n          if (section_is_strategy){\n            pageComponent = AssetPage;\n          }\n        }\n      } else {\n        currentRoute += '/'+params.section;\n\n        if (params.param1 && params.param1.length){\n          currentRoute += '/'+params.param1;\n        }\n\n        // if (params.param2 && params.param2.length){\n        //   currentRoute += '/'+params.param2;\n        // }\n      }\n    }\n\n    const menu = this.state.menu;\n\n    let selectedSection = null;\n    let selectedSubsection = null;\n\n    menu.forEach(m => {\n      m.selected = false;\n      const sectionRoute = baseRoute+'/'+params.section;\n      if (currentRoute.toLowerCase() === m.route.toLowerCase() || ( !m.submenu.length && m.route.toLowerCase() === sectionRoute.toLowerCase() )){\n        m.selected = true;\n        if (pageComponent === null){\n          pageComponent = m.component;\n          pageComponentProps = m.componentProps;\n        }\n      } else if (m.submenu.length) {\n        m.submenu.forEach(subm => {\n          subm.selected = false;\n          const submRoute = m.route+'/'+subm.route;\n          if (submRoute.toLowerCase() === currentRoute.toLowerCase()){\n            m.selected = true;\n            subm.selected = true;\n\n            // Set component, if null use parent\n            if (pageComponent === null){\n              if (subm.component){\n                pageComponent = subm.component;\n                pageComponentProps = m.componentProps;\n              } else {\n                pageComponent = m.component;\n                pageComponentProps = m.componentProps;\n              }\n            }\n          }\n\n          // Set selected subsection\n          if (subm.selected){\n            selectedSubsection = subm;\n          }\n\n        });\n      }\n\n      // Set selected section\n      if (m.selected){\n        selectedSection = m;\n      }\n    });\n\n    // console.log('pageComponent',params,pageComponent);\n\n    // Exit if no strategy and token selected\n    if (!pageComponent){\n      // const firstAvailableStrategy = Object.keys(this.props.availableStrategies)[0];\n      return this.goToSection('',false);\n    }\n\n    // console.log('loadParams',selectedStrategy,selectedToken);\n    await this.props.setStrategyToken(selectedStrategy,selectedToken);\n    \n    // Send GA pageview\n    this.functionsUtil.sendGoogleAnalyticsPageview(currentRoute);\n\n    const newState = {\n      menu,\n      params,\n      baseRoute,\n      currentRoute,\n      pageComponent,\n      currentSection,\n      selectedSection,\n      pageComponentProps,\n      selectedSubsection\n    };\n\n    await this.setState(newState);\n\n    return newState;\n  }\n\n  componentWillUnmount(){\n    if (this.timeoutId){\n      window.clearTimeout(this.timeoutId);\n    }\n  }\n\n  async componentWillMount() {\n\n    this.props.setCurrentSection('dashboard');\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n  }\n\n  async componentDidMount() {\n\n    this.timeoutId = window.setTimeout(() => {\n      if (!this.props.accountInizialized || !this.props.contractsInitialized){\n        this.setState({\n          showResetButton:true\n        });\n      }\n    },60000);\n\n    if (!this.props.web3){\n      return this.props.initWeb3();\n    } else if (!this.props.accountInizialized){\n      return this.props.initAccount();\n    } else if (!this.props.contractsInitialized){\n      return this.props.initializeContracts();\n    }\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n\n    const viewOnly = this.props.connectorName === 'custom';\n    if (!viewOnly){\n      this.checkModals();\n    }\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n\n    this.loadUtils();\n\n    const prevParams = prevProps.match.params;\n    const params = this.props.match.params;\n\n    const isMobileChanged = prevProps.isMobile !== this.props.isMobile;\n    if (isMobileChanged){\n      this.setState({\n        menuOpened:false\n      });\n    }\n\n    if (JSON.stringify(prevParams) !== JSON.stringify(params)){\n      await this.setState({\n        pageComponent:null\n      }, () => {\n        this.loadParams();\n      });\n    }\n\n    const requiredNetworkChanged = JSON.stringify(prevProps.network.required) !== JSON.stringify(this.props.network.required);\n    const networkChanged = (!prevProps.networkInitialized && this.props.networkInitialized) || requiredNetworkChanged;\n    if (networkChanged){\n      await this.loadMenu();\n      this.loadParams();\n    }\n\n    const viewOnly = this.props.connectorName === 'custom';\n    const accountChanged = prevProps.account !== this.props.account;\n    const strategyChanged = this.props.selectedStrategy && prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const availableTokensChanged = JSON.stringify(prevProps.availableTokens) !== JSON.stringify(this.props.availableTokens);\n    const accountInizialized = this.props.accountInizialized && prevProps.accountInizialized !== this.props.accountInizialized;\n    const contractsInitialized = this.props.contractsInitialized && prevProps.contractsInitialized !== this.props.contractsInitialized;\n\n    if (!viewOnly && (networkChanged || accountChanged || accountInizialized || contractsInitialized || strategyChanged || availableTokensChanged)){\n      this.checkModals();\n    }\n  }\n\n  async checkModals(){\n\n    if (this.props.selectedToken || !this.props.accountInizialized || !this.props.contractsInitialized || !this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    await this.checkRiskAdjusted();\n    await this.checkPolygonModal();\n    await this.checkBetaApproval();\n    await this.checkTokensToMigrate();\n    await this.checkWelcomeModal();\n    await this.checkProtocolsTokensBalances();\n  }\n\n  async checkRiskAdjusted(){\n    const isRiskAdjusted = this.props.selectedStrategy === 'risk';\n    if (isRiskAdjusted){\n      const activeModal = 'risk';\n      if (activeModal !== this.state.activeModal){\n        await this.setState({\n          activeModal\n        });\n        return activeModal;\n      }\n    }\n  }\n\n  async checkPolygonModal(){\n    const isPolygon = this.state.currentNetwork.provider === 'polygon';\n    const isPolygonApproved = this.functionsUtil.getStoredItem('polygonApproved',false,false);\n\n    // console.log('checkPolygonModal',this.state.currentNetwork,isPolygon);\n\n    // Show Beta Warning modal\n    if (isPolygon && !isPolygonApproved){\n      const activeModal = 'polygon';\n      if (activeModal !== this.state.activeModal){\n        await this.setState({\n          activeModal\n        });\n        return activeModal;\n      }\n    }\n  }\n\n  async checkBetaApproval(){\n    const isOriginUrl = this.functionsUtil.checkUrlOrigin();\n    const isPolygon = this.state.currentNetwork.provider === 'polygon';\n    const isBetaApproved = this.functionsUtil.getStoredItem('betaApproved',false,false);\n\n    // Show Beta Warning modal\n    if (!isOriginUrl && !isBetaApproved && !isPolygon && this.state.activeModal === null){\n      const activeModal = 'beta';\n      if (activeModal !== this.state.activeModal){\n        await this.setState({\n          activeModal\n        });\n        return activeModal;\n      }\n    }\n  }\n\n  async checkTokensToMigrate(){\n\n    const showUpgradeModal = this.functionsUtil.getStoredItem('dontShowUpgradeModal',false,null) !== null ? false : true;\n    if (this.props.selectedToken || !showUpgradeModal || !this.props.availableTokens || this.state.activeModal !== null){\n      return null;\n    }\n\n    const tokensToMigrate = await this.functionsUtil.getTokensToMigrate();\n    const oldIdleTokensToMigrate = await this.functionsUtil.getProtocolsTokensBalances('idle');\n\n    // console.log('tokensToMigrate',tokensToMigrate);\n    \n    if ((tokensToMigrate && Object.keys(tokensToMigrate).length>0) || (oldIdleTokensToMigrate && Object.keys(oldIdleTokensToMigrate).length>0)){\n      const activeModal = 'upgrade';\n      if (activeModal !== this.state.activeModal){\n        await this.setState({\n          activeModal,\n          tokensToMigrate,\n          oldIdleTokensToMigrate\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkWelcomeModal(){\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show welcome modal\n    if (this.props.account && this.state.activeModal === null){\n      let welcomeIsOpen = false;\n\n      const welcomeModalProps = this.functionsUtil.getGlobalConfig(['modals','welcome']);\n\n      if (welcomeModalProps.enabled && localStorage){\n\n        // Check the last login of the wallet\n        const currTime = new Date().getTime();\n        const walletAddress = this.props.account.toLowerCase();\n        let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : {};\n\n        // First login\n        if (!lastLogin[walletAddress]){\n          lastLogin[walletAddress] = {\n            'signedUp':false,\n            'lastTime':currTime\n          };\n          welcomeIsOpen = true;\n        // User didn't sign up\n        } else if (!lastLogin[walletAddress].signedUp) {\n          const lastTime = parseInt(lastLogin[walletAddress].lastTime);\n          const timeFromLastLogin = (currTime-lastTime)/1000;\n          welcomeIsOpen = timeFromLastLogin>=welcomeModalProps.frequency; // 1 day since last login\n        }\n\n        if (welcomeIsOpen){\n          lastLogin[walletAddress].lastTime = currTime;\n          this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n        }\n      }\n\n      const activeModal = welcomeIsOpen ? 'welcome' : this.state.activeModal;\n      if (this.state.activeModal !== activeModal){\n        await this.setState({\n          activeModal\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkProtocolsTokensBalances() {\n\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized){\n      return null;\n    }\n\n    // Show migration modal if no other modals are opened\n    const migrateModalConfig = this.functionsUtil.getGlobalConfig(['modals','migrate']);\n    const migrateModalEnabled = migrateModalConfig.enabled && migrateModalConfig.availableNetworks.includes(this.state.currentNetwork.id);\n\n    const showMigrateModal = this.functionsUtil.getStoredItem('dontShowMigrateModal',false,null) !== null ? false : true;\n\n    if (this.state.activeModal === null && migrateModalEnabled && showMigrateModal && !this.state.protocolsTokensBalances){\n      const protocolsTokensBalances = await this.functionsUtil.getProtocolsTokensBalances();\n      const activeModal = protocolsTokensBalances && Object.keys(protocolsTokensBalances).length>0 ? 'migrate' : null;\n      const newState = {\n        activeModal,\n        protocolsTokensBalances\n      };\n      await this.setState(newState);\n      return activeModal;\n    }\n\n    return null;\n  }\n\n  goToSection(section,isDashboard=true){\n\n    // Remove dashboard route\n    if (isDashboard){\n      section = section.replace(this.state.baseRoute +'/','');\n    }\n\n    const newRoute = isDashboard ? this.state.baseRoute +'/' + section : section;\n    window.location.hash=newRoute;\n\n    // Send GA event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'goToSection',\n      eventLabel: newRoute\n    });\n\n    window.scrollTo(0, 0);\n  }\n\n  logout = async () => {\n    this.props.setConnector('Infura','Infura');\n    await this.props.initWeb3('Infura');\n  }\n\n  changeToken(selectedToken){\n    selectedToken = selectedToken.toUpperCase();\n    if (Object.keys(this.props.availableTokens).includes(selectedToken)){\n      const routeParts = [];\n\n      // Add section\n      if (this.state.currentSection.toLowerCase() !== this.props.selectedStrategy.toLowerCase()){\n        routeParts.push(this.state.currentSection);\n      }\n\n      // Add strategy\n      routeParts.push(this.props.selectedStrategy); \n\n      // Add token\n      routeParts.push(selectedToken);\n\n      this.goToSection(routeParts.join('/'));\n    }\n  }\n\n  propagateClickEvent(clickEvent){\n    this.setState({\n      clickEvent:clickEvent.target\n    });\n  }\n\n  setMenu(menuOpened){\n    this.setState({\n      menuOpened\n    });\n  }\n\n  toggleMenu(){\n    const menuOpened = !this.state.menuOpened;\n    this.setMenu(menuOpened);\n  }\n\n  swipeCallback(eventData){\n    // console.log('swipeCallback',eventData);\n    if (eventData.dir === 'Right'){\n      this.setMenu(true);\n    } else if (eventData.dir === 'Left'){\n      this.setMenu(false);\n    }\n  }\n\n  render() {\n\n    const PageComponent = this.state.pageComponent ? this.state.pageComponent : null;\n    const networkInitialized = this.props.networkInitialized && this.props.network.current.id && this.props.network.required.id;\n    const networkCorrect = this.props.network.isCorrectNetwork;\n    const networkSupported = this.props.network.isSupportedNetwork;\n\n    if (!this.props.availableStrategies){\n      return (\n        <Flex\n          width={1}\n          minHeight={'100vh'}\n          alignItems={'center'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n          backgroundColor={'selectBg'}\n        >\n          <FlexLoader\n            textProps={{\n              textSize: 4,\n              fontWeight: 2\n            }}\n            loaderProps={{\n              mb: 3,\n              size: '80px',\n              color: 'primary'\n            }}\n            flexProps={{\n              my: 3,\n              flexDirection: 'column'\n            }}\n            text={''}\n          />\n        </Flex>\n      );\n    }\n\n    // console.log('networkInitialized',this.props.networkInitialized,networkInitialized);\n\n    return (\n      <Swipeable\n        callback={this.swipeCallback.bind(this)}\n      >\n        <Flex\n          height={'100vh'}\n          position={'fixed'}\n          flexDirection={'row'}\n          className={this.props.themeMode}\n          backgroundColor={['dashboardBg','white']}\n          width={this.props.isMobile && this.state.menuOpened ? '180vw' : '100vw'}\n          /*onClick={ e => this.propagateClickEvent(e) }*/\n        >\n          {\n            (!this.props.isMobile || this.state.menuOpened) && (\n              <Flex\n                bottom={0}\n                zIndex={99999}\n                width={['80vw',1/6]}\n                position={'relative'}\n                flexDirection={'column'}\n              >\n                <Card\n                  p={3}\n                  border={0}\n                  width={'auto'}\n                  height={'100vh'}\n                  backgroundColor={'menuBg'}\n                  borderColor={this.props.theme.colors.menuRightBorder}\n                  borderRight={`1px solid ${this.props.theme.colors.menuRightBorder}`}\n                  >\n                  <DashboardMenu\n                    {...this.props}\n                    menu={this.state.menu}\n                    closeMenu={e => this.setMenu(false)}\n                  />\n                </Card>\n              </Flex>\n            )\n          }\n          <Flex\n            py={3}\n            mb={0}\n            px={[3,5]}\n            width={['100vw',5/6]}\n            style={{\n              overflowY:'scroll',\n              overflowX:'hidden'\n            }}\n            height={['100vh','auto']}\n            flexDirection={'column'}\n            backgroundColor={'dashboardBg'}\n          >\n            <DashboardHeader\n              menuOpened={this.state.menuOpened}\n              clickEvent={this.state.clickEvent}\n              toggleMenu={this.toggleMenu.bind(this)}\n              goToSection={this.goToSection.bind(this)}\n              {...this.props}\n            />\n            {\n              !networkInitialized || !this.props.accountInizialized || !this.props.contractsInitialized || !PageComponent || !networkCorrect || !networkSupported ? (\n                <Flex\n                  width={1}\n                  minHeight={'50vh'}\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                >\n                  {\n                    networkInitialized && !networkCorrect ? (\n                      <DashboardCard\n                        cardProps={{\n                          p:3,\n                          mt:3,\n                          width:[1,0.35]\n                        }}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                        >\n                          <Icon\n                            size={'2.3em'}\n                            name={'Warning'}\n                            color={'cellText'}\n                          />\n                          <Text\n                            mt={2}\n                            fontSize={2}\n                            color={'cellText'}\n                            textAlign={'center'}\n                          >\n                            You should be on the <strong>{this.functionsUtil.capitalize(this.props.network.required.name)} network</strong>. You are currently connected to the <strong>{this.functionsUtil.capitalize(this.props.network.current.name)} network</strong>, please switch to the correct network.\n                          </Text>\n                          <RoundButton\n                            buttonProps={{\n                              mt:3,\n                              width:[1,1/2]\n                            }}\n                            handleClick={e => this.functionsUtil.addEthereumChain(this.props.network.required.id)}\n                          >\n                            Switch Network\n                          </RoundButton>\n                        </Flex>\n                      </DashboardCard>\n                    ) : networkInitialized && !networkSupported ? (\n                      <DashboardCard\n                        cardProps={{\n                          p:3,\n                          mt:3,\n                          width:[1,0.35]\n                        }}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                        >\n                          <Icon\n                            size={'2.3em'}\n                            name={'Warning'}\n                            color={'cellText'}\n                          />\n                          <Text\n                            mt={2}\n                            fontSize={2}\n                            color={'cellText'}\n                            textAlign={'center'}\n                          >\n                            The <strong>{this.functionsUtil.capitalize(this.props.network.current.name)} Network</strong> is not supported, please switch to the correct network.\n                          </Text>\n                        </Flex>\n                      </DashboardCard>\n                    ) : !this.state.showResetButton ? (\n                      <FlexLoader\n                        textProps={{\n                          textSize:4,\n                          fontWeight:2\n                        }}\n                        loaderProps={{\n                          mb:3,\n                          size:'40px'\n                        }}\n                        flexProps={{\n                          my:3,\n                          flexDirection:'column'\n                        }}\n                        text={ !this.props.networkInitialized ? 'Loading network...' : (!this.props.accountInizialized ? 'Loading account...' : ( !this.props.contractsInitialized ? 'Loading contracts...' : 'Loading assets...' ))}\n                      />\n                    ) : (\n                      <DashboardCard\n                        cardProps={{\n                          p:3,\n                          mt:3,\n                          width:[1,0.35]\n                        }}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                        >\n                          <Icon\n                            size={'2.3em'}\n                            name={'Warning'}\n                            color={'cellText'}\n                          />\n                          <Text\n                            mt={2}\n                            fontSize={2}\n                            color={'cellText'}\n                            textAlign={'center'}\n                          >\n                            Idle can't connect to your wallet!<br />Make sure that your wallet is unlocked and try again.\n                          </Text>\n                          <RoundButton\n                            buttonProps={{\n                              mt:3,\n                              width:[1,1/2]\n                            }}\n                            handleClick={this.logout.bind(this)}\n                          >\n                            Logout\n                          </RoundButton>\n                        </Flex>\n                      </DashboardCard>\n                    )\n                  }\n                </Flex>\n              ) : (\n                <Flex\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  {\n                    PageComponent &&\n                      <PageComponent\n                        {...this.props}\n                        match={{ params:{} }}\n                        urlParams={this.state.params}\n                        changeToken={this.changeToken.bind(this)}\n                        goToSection={this.goToSection.bind(this)}\n                        selectedSection={this.state.selectedSection}\n                        selectedSubsection={this.state.selectedSubsection}\n                        openTooltipModal={this.openTooltipModal.bind(this)}\n                        {...this.state.pageComponentProps}\n                        />\n                  }\n                </Flex>\n              )\n            }\n          </Flex>\n          {\n            this.state.currentNetwork && \n              <PolygonModal\n                closeModal={this.resetModal}\n                goToSection={this.goToSection.bind(this)}\n                currentNetwork={this.state.currentNetwork}\n                isOpen={this.state.activeModal === 'polygon'}\n              />\n          }\n          <BetaModal\n            closeModal={this.resetModal}\n            isOpen={this.state.activeModal === 'beta'}\n          />\n          <RiskAdjustedModal\n            closeModal={this.resetModal}\n            isOpen={this.state.activeModal === 'risk'}\n          />\n          <UpgradeModal\n            {...this.props}\n            closeModal={this.resetModal}\n            goToSection={this.goToSection.bind(this)}\n            tokensToMigrate={this.state.tokensToMigrate}\n            isOpen={this.state.activeModal === 'upgrade'}\n            oldIdleTokensToMigrate={this.state.oldIdleTokensToMigrate}\n          />\n          <MigrateModal\n            {...this.props}\n            closeModal={this.resetModal}\n            goToSection={this.goToSection.bind(this)}\n            isOpen={this.state.activeModal === 'migrate'}\n            protocolsTokensBalances={this.state.protocolsTokensBalances}\n          />\n          <TooltipModal\n            closeModal={this.resetModal}\n            title={this.state.modalTitle}\n            content={this.state.modalContent}\n            isOpen={this.state.activeModal === 'tooltip'}\n          />\n          <WelcomeModal\n            closeModal={this.resetModal}\n            account={this.props.account}\n            simpleID={this.props.simpleID}\n            network={this.props.network.current}\n            tokenName={this.props.selectedToken}\n            initSimpleID={this.props.initSimpleID}\n            baseTokenName={this.props.selectedToken}\n            isOpen={this.state.activeModal === 'welcome'}\n          />\n        </Flex>\n      </Swipeable>\n    );\n  }\n}\n\nexport default Dashboard;"],"sourceRoot":""}