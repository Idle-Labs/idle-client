{"version":3,"sources":["FlashNews/FlashNews.js","Stats/StatsChart.js","Rebalance/Rebalance.js","utilities/components/DateRangeModal.js","Stats/Stats.js","Utils/Utils.js","FundsOverview/FundsOverview.js","CurveRedeem/CurveRedeem.js","DepositRedeem/DepositRedeem.js","EstimatedEarnings/EstimatedEarnings.js","AssetPage/AssetPage.js","utilities/components/BetaModal.js","CurveDeposit/CurveDeposit.js","PortfolioEquityCurve/PortfolioEquityCurve.js","FundsOverviewCurve/FundsOverviewCurve.js","CurveStrategy/CurveStrategy.js","utilities/components/PolygonModal.js","utilities/components/WelcomeModal.js","utilities/components/MigrateModal.js","utilities/components/UpgradeModal.js","utilities/components/RiskAdjustedModal.js","Dashboard/Dashboard.js"],"names":["FlashNews","state","activeNews","functionsUtil","this","setProps","props","FunctionsUtil","loadUtils","stakingConfig","getGlobalConfig","nexusMutualConfig","stakingPolygonConfig","flashNews","1","name","icon","text","link","url","label","getDashboardSectionUrl","concat","route","137","currentNetworkId","getRequiredNetworkId","activeFlashNews","Math","floor","random","length","setState","prevProps","prevState","_this2","react_default","a","createElement","DashboardCard","cardProps","p","mb","width","isActive","isInteractive","index_es","alignItems","justifyContent","flexDirection","mr","size","color","fontWeight","fontSize","textAlign","ExtLink","ml","hoverColor","href","onClick","e","sendGoogleAnalyticsEvent","eventCategory","eventAction","eventLabel","Component","StatsChart","chartProps","chartType","chartData","chartWidth","parseAum","value","parseInt","parseFloat","toFixed","_this","selectedToken","loadApiData","_callee3","maxGridLines","apiResults","apiResults_unfiltered","totalItems","protocols","versionInfo","keys","tempData","gridYStep","itemIndex","daysCount","gridYValues","maxChartValue","axisBottomIndex","daysFrequency","idleChartData","firstIdleBlock","axisBottomMaxValues","divergingData","startTimestamp","endTimestamp","timestamp","date","lastRow","maxRange","i","_i","dates","_i2","_i3","chartValues","prevValue","_i4","prevApr","prevData","avgApy","startBalance","currentBalance","aaveProtocolInfo","_i5","firstTokenPrice","_i6","regenerator_default","wrap","_context3","prev","next","tokenConfig","chartMode","abrupt","Object","assign","globalConfigs","stats","versions","idleVersion","Line","t0","moment","_d","getTime","format","deposits","redeems","forEach","row","idleTokens","fixTokenDecimals","idleSupply","idleTokensPrev","eq","diff","minus","gte","max","abs","values","filter","v","sort","b","Bar","push","ceil","indexBy","enableLabel","minValue","maxValue","d","axisBottom","isMobile","tickSize","legend","tickPadding","orient","legendOffset","tickValues","legendPosition","axisLeft","axisRight","tickRotation","abbreviateNumber","markers","axis","lineStyle","strokeOpacity","textStyle","fill","theme","colors","transactions","action","deposit","legendOrientation","legendOffsetX","stroke","strokeDasharray","redeem","padding","labelTextColor","labelSkipWidth","labelSkipHeight","pointSize","useMesh","animate","pointLabel","curve","enableArea","enableSlices","enableGridX","enableGridY","pointBorderWidth","pointLabelYOffset","legends","dataFrom","itemWidth","itemHeight","translateX","translateY","symbolSize","itemsSpacing","direction","anchor","symbolShape","itemTextColor","effects","on","style","themeMode","ticks","fontFamily","fonts","sansSerif","grid","line","lineChartStroke","textTransform","tooltip","container","boxShadow","background","pointColor","from","modifiers","margin","top","right","bottom","left","data","xFormatted","strToMoment","point","id","depositFormatted","redeemFormatted","CustomTooltip","CustomTooltipRow","tokens","hsl","join","map","idlePrice","decimals","aum","times","x","y","toString","j","protocolsData","protocolAllocation","protocolAddr","toLowerCase","address","z","BNify","rate","allocation","foundItem","item","pos","indexOf","allocations","undefined","xScale","type","xFormat","yFormat","formatMoney","yScale","stacked","sliceTooltip","slideData","slice","points","serieId","serieColor","yFormatted","protocolName","protocolInfo","protocolColor","protocolAllocationFormatted","protocolAllocationPerc","div","key","protocolData","protocolPaused","foundProtocol","find","_ref2","tableCell","_ref3","py","px","borderCollapse","display","height","totalAllocation","reduce","accumulator","plus","allocationPerc","_ref4","_ref5","additionalProtocols","additionalProtocol","protocol","enabledTokens","includes","enabled","unshift","objectSpread","rateField","protocolRate","acc","field","lt","aaveAdditionalAPR","gt","idle","idleRate","isBefore","protocolEarning","defiScore","isNaN","idleScore","apy","isSameOrBefore","aaveProtocolData","pData","apr","days","earnings","earning","daysSinceBeginning","blocknumber","itemPos","tokensProps","tokenProps","isAfter","Date","now","chartRow","baseProfit","firstProtocolData","firstProtocolBlock","rowData","idlePerformance","d1","protocolApy","tokenPrice","asyncForEach","_ref6","asyncToGenerator","mark","_callee2","lastRowData","lastTokenPrice","_context2","_ref7","_callee","tokenExchangeRate","tokenPriceFixed","lastYDiff","_context","price","stop","_x2","apply","arguments","_x","showAdvanced","showAdvancedChanged","apiResultsChanged","tokenChanged","JSON","stringify","componentDidMount","GenericChart","showLoader","parentId","parentIdHeight","Rebalance","loading","processing","rebalance","txHash","shouldRebalance","componentUnmounted","checkRebalance","setStateSafe","sent","callback","callback_receipt","preventDefault","tx","error","eventData","status","getTransactionError","window","toastProvider","addMessage","secondaryMessage","colorTheme","actionHref","actionText","variant","transactionHash","contractMethodSendWrapper","token","accountChanged","account","newState","minHeight","FlexLoader","flexProps","loaderProps","textProps","TxProgressBar","waitText","endMessage","hash","mt","RoundButton","buttonProps","disabled","handleClick","DateRangeModal","quickSelection","ranges","startDate","endDate","options","quickSelections","componentDidUpdate","selection","target","quickSelectionParams","clone","subtract","closeModal","handleSelect","startTimestampObj","endTimestampObj","_this3","isOpen","ModalCard","closeFunc","Header","title","Body","counter","backgroundColor","cardBg","required","onChange","handleQuickSelect","bind","dist","minDate","maxDate","className","Footer","my","mx","borderRadius","mainColor","React","Stats","delta","carouselMax","rebalances","buttonGroups","carouselIndex","statsVersions","minStartTime","govTokensPool","unlentBalance","carouselOffsetLeft","showRefreshIdleSpeed","dateRangeModalOpened","day","week","weeks","month","ytd","setDateRange","isSameOrAfter","isSame","add","maxEndDate","toggleAdvancedCharts","setDateRangeModal","filterTokenData","r","setIdleVersion","isRisk","firstResult","lastResult","firstIdlePrice","lastIdlePrice","compoundInfo","firstCompoundData","lastCompoundData","compoundWithCOMPInfo","compoundAvgApr","firstCompoundPrice","lastCompoundPrice","compoundApr","availableTokens","selectedStrategy","getTokenApiData","pop","convertTokenBalance","sum","compoundWithCOMP","compoundData","compoundRate","index","prevRow","prevTotalAllocation","hasRebalanced","prevP","prevAllocation","getGovTokenPool","getUnlentBalance","selectToken","strategy","setStrategyToken","changeToken","handleCarousel","$element","jQuery","position","loadParams","latestVersion","version","enabledStrategies","strategiesParams","versionInfoExtra","param","params","match","currentNetworkAvailableTokens","customToken","toUpperCase","getLatestAvailableVersion","getVersionInfo","newEndTimestampObj","newStartTimestampObj","web3","initWeb3","loadCarousel","contractsInitialized","strategyChanged","dateChanged","versionChanged","networkId","idleTokenAvailableNetworks","idleTokenEnabled","refreshIdleSpeedConfig","refreshIdleSpeedEnabled","availableNetworks","apyLong","availableStrategies","textSize","statsTokens","versionsOptions","performanceTooltip","versionDefaultValue","Breadcrumb","showPathMobile","goToSection","path","GenericSelector","innerProps","defaultValue","AssetSelector","pr","StatsCard","labelTooltip","SmartNumber","precision","lineHeight","unitProps","number","unit","VariationNumber","iconPos","iconSize","span","description","Stats_StatsChart","contracts","pb","pt","AllocationChart","src_Rebalance_Rebalance","pl","h4","RoundIconButton","iconName","transition","utilities_components_DateRangeModal","strategies","statsProtocols","AssetsUnderManagement","loaderAlign","strategyInfo","availableProtocolsKeys","availableProtocols","Title","titlePostfix","AssetsList","cols","fields","mobile","parentProps","overflow","desc","showTooltip","rgb","ExecuteTransaction","Button","componentProps","contractName","methodName","completed","Utils","SubComponent","selectedSubsection","subComponent","viewOnly","connectorName","showBreadCrumb","selectedSection","dangerouslySetInnerHTML","__html","directProps","toolProps","flexWrap","IconBox","maxWidth","submenu","tool","toolIndex","flex","image","src","FundsOverview","aggregatedValues","govTokensTotalApr","govTokensUserBalance","govTokensDistribution","govTokensTotalBalance","govTokensTotalAprTooltip","idleTokenUserDistribution","govTokensDistributionTooltip","govTokensTotalBalanceTooltip","idleGovToken","getIdleGovToken","govTokenAvailableTokens","Promise","all","getUserDistribution","getGovTokensUserBalances","loadAssetField","depositTimestamp","getAvgAPYStats","avgAPY","lte","totBalance","govTokenBalance","govToken","balance","children","AssetField","fieldInfo","placement","message","PortfolioEquity","chartHeight","chartToken","frequencySeconds","getFrequencySeconds","component","Heading","h3","maxPrecision","govTokenIndex","tokenName","distributionFrequency","CurveRedeem","inputValue","maxSlippage","unevenAmounts","buttonDisabled","showMaxSlippage","redeemUnderlying","curveTokenConfig","curvePoolContract","curveSwapContract","curveTokenBalance","curveTokensAmounts","fastBalanceSelector","redeemUnevenAmounts","curveRedeemableIdleTokens","toggleUnevenAmounts","checkButtonDisabled","amount","changeInputValue","setFastBalanceSelector","setMaxSlippage","initToken","max_slippage","normalizedAmount","normalizeTokenAmount","withdrawSlippage","curveIdleTokensAmounts","getCurveTokensAmounts","getCurveIdleTokensAmounts","getCurveSlippage","getCurveTokenPrice","curveTokenPrice","redeemableBalance","redeemUnevenAmountsChanged","setInputValue","inputChanged","maxSlippageChanged","tokenConfigChanged","calculateSlippage","loadSelectedTokenConfig","selectedPercentage","curveConfig","getCurvePoolContract","getCurveSwapContract","getCurveTokenBalance","getCurveRedeemableIdleTokens","getCurveAvailableTokens","callbackRedeem","txSucceeded","eventValue","callbackReceiptRedeem","_amount","min_amounts","console","log","coin_index","migrationParams","coinIndex","min_amount","showSlippage","curveTokenName","cancelTransaction","checked","showBalance","selectDestinationToken","slippage","FastBalanceSelector","percentage","onMouseDown","whiteSpace","failed","textOverflow","min","placeholder","border","divider","DepositRedeem","txError","tokenAPY","curveAPY","totalAUM","canRedeem","canDeposit","directMint","activeModal","tokenGovTokens","showBuyFlow","maxUnlentPerc","tokenApproved","skipMigration","redeemSkipGov","showRedeemFlow","contractPaused","canRedeemCurve","erc20ForwarderTx","signedParameters","minAmountForMint","redeemGovTokens","canDepositCurve","redeemSkipGovTokens","actionProxyContract","migrationEnabled","componentMounted","agreeSkipGovTokens","redeemCurveEnabled","depositCurveBalance","depositCurveEnabled","showAdvancedOptions","skipGovTokensGasSave","depositCurveSlippage","erc20ForwarderContract","erc20ForwarderEnabled","showETHWrapperEnabled","skipGovTokensGasSaveUSD","metaTransactionsEnabled","skippedGovTokensBalance","minAmountForMintReached","loadingErc20ForwarderTx","setShowRedeemFlow","setShowBuyFlow","toggleShowAdvancedOptions","toggleSkipMigration","toggleRedeemCurve","toggleDepositCurve","toggleShowETHWrapper","toggleAgreeSkipGovTokens","toggleSkipMint","toggleRedeemGovTokens","toggleRedeemSkipGov","getSkippedGovTokensFlags","govTokensIndexes","govTokensFlags","getGovTokensIndexes","calculateSkippedGovTokens","DAITokenConfig","_skipGovTokenRedeem","WETHTokenConfig","wethPrice","redeemGasUsage","skipGovRedeemGasUsage","govTokenConfig","govTokenPrice","skippedAmount","getUniswapConversionRate","govTokensUserBalances","estimateMethodGasUsage","idleTokenBalance","slicedToArray","setRedeemSkipGovTokens","splice","toggleErc20ForwarderEnabled","toggleMetaTransactionsEnabled","resetModal","setActiveModal","checkUseProxyContract","proxyContract","depositErc20ForwarderEnabled","depositMetaTransactionsEnabled","biconomy","approveContract","_callee4","callbackApprove","callbackReceiptApprove","curveDepositContract","_context4","enableERC20","checkTokenApproved","_callee5","_context5","approveToken","_callee6","_context6","approve","loadTokenInfo","_callee7","curveTokenEnabled","_ref10","_ref11","_context7","checkContractPaused","getCurveDepositContract","checkMigration","tokenBalance","getTokenGovTokens","boost","checkAction","loadAPY","_callee8","_context8","defineProperty","executeAction","_callee11","contractSendResult","callbackDeposit","callbackReceiptDeposit","curvePoolContractInfo","tokensToDeposit","amounts","minMintAmount","depositParams","_tokensToDeposit","_depositParams","mintProxyContractInfo","mintProxyContract","_mintProxyContract$me","functionCall","functionSignature","methodAbi","useNonce","_referral","txData","idleTokenToRedeem","idleTokenPriceWithFee","_callbackRedeem","_callbackReceiptRedeem","redeemMethod","redeemParams","_context11","getFastBalanceSelector","localStorage","setLocalStorage","lendingProcessing","lendAmount","genericError","getCurveAmounts","getCurveTokenAmount","integerValue","contract","methods","function","toConsumableArray","encodeABI","sendBiconomyTxWithPersonalSign","_jsonInterface","f","inputs","_callee10","metaInfo","permitOptions","erc20ForwarderBaseContract","permitValue","permitConfig","setValue","expiry","nonce","s","_context10","signPermit","t","allowed","holder","spender","permitData","permitType","asyncTimeout","sendBiconomyTxWithErc20Forwarder","request","_callee9","_erc20ForwarderContra","_functionCall","_functionSignature","gasLimit","_context9","estimateGas","buildBiconomyErc20ForwarderTx","getReferralAddress","getIdleTokenPriceWithFee","_callee12","_context12","setAction","loadProxyContracts","actions","_ref17","_callee15","erc20ForwarderContractInfo","hasProxyContract","_context15","initContract","abi","approved","_x5","getTokenAprs","tokenAprs","getCurveAPY","getQueryStringParameterByName","checkAddress","erc20ForwarderEnabledChanged","tokenBalanceChanged","actionChanged","fastBalanceSelectorChanged","redeemSkipGovChanged","redeemGovTokensChanged","agreeSkipGovTokensChanged","redeemSkipGovTokensChanged","depositCurveChanged","calculateCurveSlippage","showPoolPerc","convertedAmount","genericContractCall","depositPerc","maxUnlentPercFormatted","currentNetwork","getCurrentNetwork","isDepositDisabled","depositDisabledMessage","disabledMessageRedeemKey","disabledMessageDepositKey","govTokensEnabled","govTokensDisabled","skipMintForDepositEnabled","skipMintForDeposit","redeemGovTokenEnabled","redeemSkipGovConfig","redeemSkipGovEnabled","disabledTokens","govTokensBalance","redeemSkipGovNoTokens","showAdvancedRedeemOptions","depositErc20ForwarderEnabledTokens","metaTransactionsAvailable","useMetaTx","erc20ForwarderClient","totalBalance","migrateText","migration","depositCurve","showDepositCurve","showRedeemCurve","showCurveSlippage","showAdvancedDepositOptions","batchDepositInfo","batchDepositEnabled","batchDepositDepositEnabled","depositEnabled","showBatchDeposit","isMigrationTool","ethWrapperInfo","ETHWrapperComponent","showETHWrapper","polygonBridgeInfo","polygonNetworkId","canPerformAction","showPolygonBridgeEnabled","showActionFlow","provider","showPolygonBridge","showPolygonBridgeBanner","buyToken","accountBalance","getBaseToken","showReferral","Migrate","migrateTextBefore","TransactionField","transaction","isDisabled","iconProps","openTooltipModal","isRainbow","cursor","m","CardIconButton","imageProps","getWalletProvider","capitalize","primary","fullWidth","cost","align","tokenFeesPercentage","borderColor","minWidth","ConnectBox","src_CurveRedeem_CurveRedeem","BuyModal","showInline","availableMethods","ShareModal","confettiEnabled","tweet","EstimatedEarnings","maxInputValue","loadChart","getTokenApy","earningsYear","tokenApy","amountMonth","amount3Months","amount6Months","amountYear","perc","monthColor","month3","month3Color","month6","month6Color","year","yearColor","labelTextColorModifiers","gridYValue","_ref","labels","showAPYDisclaimer","verticalAlign","zIndex","AssetPage","tokenFees","idleTokenPrice","userHasFunds","availableGovTokens","getTokenFees","getIdleTokenPrice","getTokenBalance","getUserTokenFees","getGovTokensUserTotalBalance","loadTokensInfo","selectedTokenChanged","availableTokensChanged","transactionsChanged","Fragment","src_DepositRedeem_DepositRedeem","ActiveCoverages","titleProps","src_FundsOverview_FundsOverview","src_EstimatedEarnings_EstimatedEarnings","TransactionsList","BetaModal","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","iconHeight","CurveDeposit","depositSlippage","migrationContract","curveTokensBalance","migrationSucceeded","migrationContractApproved","checkMigrationContractApproved","getMigrationParams","approveCallback","migrationCallback","idleTokenBalanceChanged","toMigrate","n_coins","underlyingBalanceToDeposit","normalizeIdleTokenBalance","hasCurveTokens","PortfolioEquityCurve","chartwidth","loadChartData","quickDateSelectionChanged","quickDateSelection","getCurveTxs","curveTxs","tokensBalance","processedTxs","firstTxTimestamp","timeStamp","curveTokens","currentDate","prevBalances","prevTimestamp","minChartValue","aggregatedBalancesKeys","tokensBalancesPerDate","aggregatedBalance","currTimestamp","tokensData","foundBalances","tokensBalances","momentDate","filteredTokenData","filteredBalances","lastFilteredTx","lastTokenData","lastTx","lastTxBalance","formattedDate","aggregatedBalanceParsed","aggregatedBalances","balances","yFormatDecimals","areaOpacity","areaBaselineValue","ChartCustomTooltip","ChartCustomTooltipRow","tokenInfo","hex","formattedBalance","FundsOverviewCurve","compAPR","getCurveAvgBuyPrice","getCurveAvgSlippage","src_PortfolioEquityCurve_PortfolioEquityCurve","redeemBalance","depositBalance","curveZapContract","curveAvailableTokens","changeFromToken","setSelectedToken","baseToken","getSelectedToken","urlParams","param1","getCurveZapContract","updateAssetSelector","curveTokensToRedeem","src_CurveDeposit_CurveDeposit","src_FundsOverviewCurve_FundsOverviewCurve","enabledActions","PolygonModal","getEtherscanAddressUrl","WelcomeModal","email","subscribed","sendingForm","sendUserInfo","sendEmail","walletProvider","userInfo","simpleIDPassUserInfo","analytics","google","events","setTimeout","err","handleSubmit","assertThisInitialized","handleValidation","axios","post","newsletterSubscription","endpoint","then","catch","walletAddress","lastLogin","getItem","parse","signedUp","parentNode","classList","onSubmit","green","Field","Input","outline","header_styles","input","ButtonLoader","buttonText","isLoading","gradientButton","MigrateModal","dontShowAgain","toggleDontShowAgain","removeStoredItem","migrate","tokenMigrationRoute","fieldProps","protocolsTokensBalances","minPrecision","UpgradeModal","_args3","convert","convertTool","tokensToMigrate","tokenKey","oldContractBalanceFormatted","oldIdleTokensToMigrate","newTokenConfig","RiskAdjustedModal","getAppUrl","Dashboard","menu","baseRoute","clickEvent","menuOpened","currentRoute","pageComponent","currentSection","showResetButton","pageComponentProps","timeoutId","modalTitle","modalContent","logout","setConnector","extraicons","getRequiredNetwork","stakePolygonConfig","selected","imageDark","iconDark","bgColor","imageInactive","iconInactive","imageInactiveDark","iconInactiveDark","comingSoon","enabledEnvs","currentEnv","imageInfo","visible","curveParams","CurveStrategy","stakeConfig","statsInfo","isExternalLink","networkInitialized","section","param2","section_is_strategy","param1_is_strategy","param1_is_token","param2_is_token","sectionRoute","subm","sendGoogleAnalyticsPageview","clearTimeout","setCurrentSection","loadMenu","accountInizialized","initAccount","initializeContracts","checkModals","prevParams","_this4","requiredNetworkChanged","network","networkChanged","checkRiskAdjusted","checkPolygonModal","checkBetaApproval","checkTokensToMigrate","checkWelcomeModal","checkProtocolsTokensBalances","isPolygon","isPolygonApproved","getStoredItem","isOriginUrl","checkUrlOrigin","isBetaApproved","showUpgradeModal","getTokensToMigrate","getProtocolsTokensBalances","welcomeIsOpen","welcomeModalProps","currTime","lastTime","frequency","migrateModalConfig","migrateModalEnabled","showMigrateModal","isDashboard","replace","newRoute","location","scrollTo","routeParts","setMenu","dir","_this5","networkCorrect","isCorrectNetwork","networkSupported","isSupportedNetwork","PageComponent","current","Swipeable","swipeCallback","menuRightBorder","borderRight","DashboardMenu","closeMenu","DashboardHeader","toggleMenu","overflowY","overflowX","justifyItems","src_FlashNews_FlashNews","addEthereumChain","components_PolygonModal","components_BetaModal","components_RiskAdjustedModal","components_UpgradeModal","components_MigrateModal","TooltipModal","content","components_WelcomeModal","simpleID","initSimpleID","baseTokenName"],"mappings":"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","file":"static/js/4.752c8b70.chunk.js","sourcesContent":["import ExtLink from \"../ExtLink/ExtLink\";\nimport React, { Component } from 'react';\nimport { Flex, Icon, Text } from \"rimble-ui\";\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from \"../DashboardCard/DashboardCard\";\n\nclass FlashNews extends Component {\n\n  state = {\n    activeNews:null\n  }\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentDidMount(){\n    this.loadUtils();\n\n    const stakingConfig = this.functionsUtil.getGlobalConfig([\"tools\", \"stake\"]);\n    const nexusMutualConfig = this.functionsUtil.getGlobalConfig([\"tools\", \"nexusMutual\"]);\n    const stakingPolygonConfig = this.functionsUtil.getGlobalConfig([\"tools\", \"stakePolygon\"]);\n\n    const flashNews = {\n      1: [\n        {\n          name: \"Governance Forum\",\n          icon: \"LightbulbOutline\",\n          text: `Do you have any idea to improve the Idle Protocol? Let's discuss it in our`,\n          link: {\n            text: `Governance Forum`,\n            url: this.functionsUtil.getGlobalConfig([\"forumURL\"])\n          }\n        },\n        {\n          icon: stakingConfig.icon,\n          name: stakingConfig.label,\n          text: `You can now stake your $IDLE token and take part of the fee-sharing for long-term holders.`,\n          link: {\n            text: `Stake Now`,\n            url: this.functionsUtil.getDashboardSectionUrl(`tools/${stakingConfig.route}`)\n          }\n        },\n        {\n          icon: nexusMutualConfig.icon,\n          name: nexusMutualConfig.label,\n          text: `Protect your funds against smart-contract attacks with Nexus Mutual.`,\n          link: {\n            text: `Get Covered`,\n            url: this.functionsUtil.getDashboardSectionUrl(`tools/${this.functionsUtil.getGlobalConfig([\"tools\", \"nexusMutual\", \"route\"])}`)\n          }\n        }\n      ],\n      137: [\n        {\n          icon: stakingPolygonConfig.icon,\n          name: stakingPolygonConfig.label,\n          text: `SushiSwap LP Staking on Polygon is now available!`,\n          link: {\n            text: `Stake Now`,\n            url: this.functionsUtil.getDashboardSectionUrl(`tools/${stakingPolygonConfig.route}`)\n          }\n        }\n      ]\n    };\n\n    const currentNetworkId = this.functionsUtil.getRequiredNetworkId();\n    const activeFlashNews = flashNews[currentNetworkId];\n    const activeNews = activeFlashNews[Math.floor(Math.random() * activeFlashNews.length)];\n    this.setState({\n      activeNews\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    return this.state.activeNews ? (\n      <DashboardCard\n        cardProps={{\n          p: 2,\n          mb: 3,\n          width: 1\n        }}\n        isActive={true}\n        isInteractive={false}\n      >\n        <Flex\n          alignItems={\"center\"}\n          justifyContent={\"center\"}\n          flexDirection={[\"column\", \"row\"]}\n        >\n          <Icon\n            mr={1}\n            size={\"1.2em\"}\n            color={\"flashColor\"}\n            name={this.state.activeNews.icon}\n          />\n          <Text\n            fontWeight={500}\n            fontSize={\"15px\"}\n            color={\"flashColor\"}\n            textAlign={\"center\"}\n          >\n            {this.state.activeNews.text}\n          </Text>\n          <ExtLink\n            ml={1}\n            fontWeight={500}\n            color={\"primary\"}\n            fontSize={\"15px\"}\n            hoverColor={\"primary\"}\n            href={this.state.activeNews.link.url}\n            onClick={e =>\n              this.functionsUtil.sendGoogleAnalyticsEvent({\n                eventCategory: \"UI\",\n                eventAction: \"flashNews\",\n                eventLabel: this.state.activeNews.name\n              })\n            }\n          >\n            <Flex\n              alignItems={\"center\"}\n              flexDirection={\"row\"}\n              justifyContent={\"center\"}\n            >\n              {this.state.activeNews.link.text}\n              <Icon\n                ml={1}\n                size={\"0.9em\"}\n                color={\"primary\"}\n                name={\"OpenInNew\"}\n              />\n              .\n            </Flex>\n          </ExtLink>\n        </Flex>\n      </DashboardCard>\n    ) : null;\n  }\n}\n\nexport default FlashNews;\n","import moment from 'moment';\nimport { Bar } from '@nivo/bar';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CustomTooltip from '../CustomTooltip/CustomTooltip';\nimport CustomTooltipRow from '../CustomTooltip/CustomTooltipRow';\n\nclass StatsChart extends Component {\n  state = {\n    chartProps:{},\n    chartType:null,\n    chartData:null,\n    chartWidth:null\n  };\n\n  async componentDidMount() {\n    this.setState({\n      chartData:null,\n      chartType:null,\n      chartProps:null,\n    });\n    this.loadUtils();\n    this.loadApiData();\n  }\n\n  async componentDidUpdate(prevProps) {\n    const showAdvancedChanged = prevProps.showAdvanced !== this.props.showAdvanced;\n    const apiResultsChanged = prevProps.apiResults !== this.props.apiResults;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    if (apiResultsChanged || showAdvancedChanged || tokenChanged){\n      this.componentDidMount();\n    }\n  }\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  parseAum = value => {\n    return (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.tokenConfig || !this.props.selectedToken || !this.props.chartMode || !this.props.apiResults){\n      return false;\n    }\n\n    const maxGridLines = 4;\n    const apiResults = this.props.apiResults;\n    const apiResults_unfiltered = this.props.apiResults_unfiltered;\n    const totalItems = apiResults.length;\n    const protocols = Object.assign([],this.props.tokenConfig.protocols);\n    // const compoundProtocol = this.props.tokenConfig.protocols.find( p => (p.name === 'compound'));\n\n    const versionInfo = globalConfigs.stats.versions[this.props.idleVersion];\n\n    let keys = {};\n    let tempData = {};\n    let gridYStep = 0;\n    let itemIndex = 0;\n    let daysCount = 0;\n    let chartData = [];\n    let chartProps = {};\n    let chartType = Line;\n    let gridYValues = [];\n    let maxChartValue = 0;\n    let axisBottomIndex = 0;\n    let daysFrequency = null;\n    let idleChartData = null;\n    let firstIdleBlock = null;\n    let axisBottomMaxValues = 12;\n\n    switch (this.props.chartMode){\n      case 'VOL':\n        let divergingData = {};\n\n        const startTimestamp = parseInt(apiResults_unfiltered[0].timestamp);\n        const endTimestamp = parseInt(moment()._d.getTime()/1000);\n\n        for (let timestamp=startTimestamp;timestamp<=endTimestamp;timestamp+=86400){\n          const date = moment(timestamp*1000).format(\"YYYY/MM/DD\");\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n        }\n\n        let lastRow = null;\n        apiResults_unfiltered.forEach(row => {\n          const date = moment(row.timestamp*1000).format(\"YYYY/MM/DD\");\n          const idleTokens = this.functionsUtil.fixTokenDecimals(row.idleSupply,18);\n\n          if (!divergingData[date]){\n            divergingData[date] = {\n              date,\n              timestamp:row.timestamp,\n              deposits: 0,\n              redeems: 0\n            };\n          }\n\n          if (lastRow){\n            const idleTokensPrev = this.functionsUtil.fixTokenDecimals(lastRow.idleSupply,18);\n            const idleTokensDiff = !idleTokens.eq(idleTokensPrev);\n            if (idleTokensDiff){\n              const diff = idleTokens.minus(idleTokensPrev);\n              // Deposits\n              if (diff.gte(0)){\n                divergingData[date].deposits+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,divergingData[date].deposits);\n              } else {\n                divergingData[date].redeems+=parseFloat(diff);\n                maxChartValue = Math.max(maxChartValue,Math.abs(divergingData[date].deposits));\n              }\n            }\n\n          } else {\n            divergingData[date].deposits+=parseFloat(idleTokens);\n          }\n\n          lastRow = row;\n        });\n\n        chartData = Object.values(divergingData).filter(v => {\n          return (!this.props.startTimestamp || v.timestamp>=this.props.startTimestamp) && (!this.props.endTimestamp || v.timestamp<=this.props.endTimestamp);\n        }).sort((a,b) => (a.timestamp < b.timestamp ? -1 : 1));\n\n        let maxRange = 0;\n        chartData.forEach(v => {\n          maxRange = Math.max(maxRange,Math.abs(v.deposits),Math.abs(v.redeems));\n        });\n\n        chartType = Bar;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 6;\n        daysCount = moment(chartData[chartData.length-1].date,\"YYYY/MM/DD\").diff(moment(chartData[0].date,\"YYYY/MM/DD\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          indexBy: 'date',\n          enableLabel: false,\n          minValue:-maxRange,\n          maxValue:maxRange,\n          label: d => {\n            return Math.abs(d.value);\n          },\n          axisBottom: this.props.isMobile ? null : {\n            tickSize: 0,\n            legend: '',\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            tickValues: 'every day',\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD').format('MMM DD')\n              }\n            },\n            legendPosition: 'middle',\n          },\n          axisLeft: null,\n          axisRight: {\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:8,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(Math.abs(v),0)\n          },\n          markers: [\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { strokeOpacity: 0 },\n              textStyle: { fill: this.props.theme.colors.transactions.action.deposit },\n              legend: 'deposits',\n              legendPosition: 'top-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n            {\n              axis: 'y',\n              value: 0,\n              lineStyle: { stroke: this.props.theme.colors['dark-gray'], strokeDasharray: '5 3' },\n              textStyle: { fill: this.props.theme.colors.transactions.action.redeem },\n              legend: 'redeems',\n              legendPosition: 'bottom-left',\n              legendOrientation: 'vertical',\n              // legendOffsetY: 120,\n              legendOffsetX: -20\n            },\n          ],\n          keys:['deposits','redeems'],\n          padding:0.4,\n          colors:[this.props.theme.colors.transactions.action.deposit, this.props.theme.colors.transactions.action.redeem],\n          labelTextColor: 'inherit:darker(1.4)',\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 80 : 100,\n              itemHeight: 18,\n              translateX: 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            },\n            tooltip:{\n              container:{\n                boxShadow:null,\n                background:null\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 50, bottom: 45, left: 50 } : { top: 20, right: 70, bottom: 70, left: 50 },\n          tooltip:(data) => {\n            const xFormatted = this.functionsUtil.strToMoment(data.data.timestamp*1000).format('MMM DD HH:ss');\n            const point = {\n              id:data.id,\n              data:{\n                xFormatted\n              }\n            };\n            const depositFormatted = this.functionsUtil.abbreviateNumber(data.data.deposits,2)+' '+this.props.selectedToken;\n            const redeemFormatted = this.functionsUtil.abbreviateNumber(data.data.redeems,2)+' '+this.props.selectedToken;\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                <CustomTooltipRow\n                  label={'Deposits'}\n                  color={this.props.theme.colors.deposit}\n                  value={depositFormatted}\n                />\n                <CustomTooltipRow\n                  label={'Redeem'}\n                  color={this.props.theme.colors.redeem}\n                  value={redeemFormatted}\n                />\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      /*\n      case 'AUM_ALL':\n        await this.functionsUtil.asyncForEach(Object.keys(availableTokens[globalConfigs.network.requiredNetwork]),async (tokenName,i) => {\n          const tokenConfig = availableTokens[globalConfigs.network.requiredNetwork][tokenName];\n          const tokenDataApi = await this.props.getTokenData(tokenConfig.address);\n          chartData.push({\n            id:tokenName,\n            color: tokenConfig.color,\n            data: tokenDataApi.map((d,i) => {\n              const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n              const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,tokenConfig.decimals);\n              const aum = idleTokens.times(idlePrice);\n              return {\n                x: moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\"),\n                y: parseInt(aum.toString())\n              };\n            })\n          });\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => (parseInt(value)>=1000 ? parseFloat(value/1000).toFixed(1)+'K' : parseFloat(value) )+' '+this.props.selectedToken,\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v),\n            orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            legendPosition: 'middle'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            format: '%b %d',\n            tickValues: this.props.isMobile ? 'every 4 days' : 'every 3 days',\n            orient: 'bottom',\n            legend: '',\n            legendOffset: 36,\n            legendPosition: 'middle'\n          },\n          enableArea:false,\n          curve:\"linear\",\n          enableSlices:'x',\n          enableGridX:true,\n          enableGridY:false,\n          colors:d => d.color,\n          pointSize:0,\n          pointColor:{ from: 'color', modifiers: []},\n          pointBorderWidth:1,\n          pointLabel:\"y\",\n          pointLabelYOffset:-12,\n          useMesh:true,\n          animate:false,\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 60, bottom: 40, left: 60 },\n        };\n      break;\n      */\n      case 'AUM':\n\n        maxChartValue = 0;\n\n        chartData.push({\n          id:'AUM',\n          color: 'hsl('+globalConfigs.stats.tokens[this.props.selectedToken].color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const idleTokens = this.functionsUtil.fixTokenDecimals(d.idleSupply,18);\n            const idlePrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n            const aum = idleTokens.times(idlePrice);\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(aum.toString());\n\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x,y };\n          })\n        });\n\n        // Add allocation\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          apiResults.map((d,i) => {\n            return d.protocolsData.filter((protocolAllocation,x) => {\n                return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            })\n            .map((protocolAllocation,z) => {\n              const protocolPaused = this.functionsUtil.BNify(protocolAllocation.rate).eq(0);\n              if (!protocolPaused){\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals));\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                let foundItem = chartData[0].data.filter(item => { return item.x === x });\n                if (foundItem){\n                  foundItem = foundItem[0];\n                  const pos = chartData[0].data.indexOf(foundItem);\n                  if (!foundItem.allocations){\n                    foundItem.allocations = {};\n                  }\n                  foundItem.allocations[p.name] = y;\n                  chartData[0].data[pos] = foundItem;\n                }\n              }\n              return undefined;\n            })[0]\n          }).filter((v) => { return v !== undefined; } )\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 6;\n        daysCount = moment(chartData[0].data[chartData[0].data.length-1].x,\"YYYY/MM/DD HH:mm\").diff(moment(chartData[0].data[0].x,\"YYYY/MM/DD HH:mm\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:v => this.functionsUtil.formatMoney(v,v<1 ? 3 :0),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            tickValues: 'every day',\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:true,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            if (typeof point === 'object' && typeof point.data === 'object'){\n              return (\n                <CustomTooltip\n                  point={point}\n                >\n                  <CustomTooltipRow\n                    label={point.serieId}\n                    color={point.serieColor}\n                    value={point.data.yFormatted}\n                  />\n                  {\n                    point.data.allocations && typeof point.data.allocations === 'object' &&\n                      Object.keys(point.data.allocations).map(protocolName => {\n                        const protocolInfo = globalConfigs.stats.protocols[protocolName];\n                        const protocolColor = 'hsl('+protocolInfo.color.hsl.join(',')+')';\n                        const protocolAllocation = point.data.allocations[protocolName];\n                        const protocolAllocationFormatted = this.functionsUtil.formatMoney(protocolAllocation,protocolAllocation<1 ? 3 : 0);\n                        const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                        return (\n                          <CustomTooltipRow\n                            color={protocolColor}\n                            label={protocolInfo.label}\n                            key={`${point.id}_${protocolName}`}\n                            value={`${protocolAllocationFormatted} (${protocolAllocationPerc})`}\n                          />\n                        );\n                      })\n                  }\n                </CustomTooltip>\n              );\n              /*\n              return (\n                <div\n                    key={point.id}\n                    style={{\n                      background: 'white',\n                      color: 'inherit',\n                      fontSize: 'inherit',\n                      borderRadius: '2px',\n                      boxShadow: 'rgba(0, 0, 0, 0.25) 0px 1px 2px',\n                      padding: '5px 9px'\n                    }}\n                >\n                  <div>\n                    <table style={{width:'100%',borderCollapse:'collapse'}}>\n                      <tbody>\n                        <tr>\n                          <td style={{padding:'3px 5px'}}>\n                            <span style={{display:'block', width: '12px', height: '12px', background: point.serieColor}}></span>\n                          </td>\n                          <td style={{padding:'3px 5px'}}>{point.serieId}</td>\n                          <td style={{padding:'3px 5px'}}><strong>{point.data.yFormatted}</strong></td>\n                        </tr>\n                        {\n                          point.data.allocations && typeof point.data.allocations === 'object' &&\n                            Object.keys(point.data.allocations).map(protocolName => {\n                              const protocolColor = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n                              const protocolAllocation = this.functionsUtil.formatMoney(point.data.allocations[protocolName],0);\n                              const protocolAllocationPerc = this.functionsUtil.BNify(point.data.allocations[protocolName]).div(this.functionsUtil.BNify(point.data.y)).times(100).toFixed(0)+'%';\n                              return (\n                                <tr key={`${point.id}_${protocolName}`}>\n                                  <td style={{padding:'3px 5px'}}>\n                                    <span style={{display:'block', width: '12px', height: '12px', background: protocolColor}}></span>\n                                  </td>\n                                  <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{protocolName}</td>\n                                  <td style={{padding:'3px 5px'}}><strong>{protocolAllocation}</strong> ({protocolAllocationPerc})</td>\n                                </tr>\n                              );\n                            })\n                        }\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              );\n              */\n            }\n\n            return null;\n          }\n        };\n      break;\n      case 'ALL':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\");\n\n          let row = {\n            date\n          };\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const foundProtocol = this.props.tokenConfig.protocols.find((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() });\n            if (foundProtocol){\n              const protocolInfo = globalConfigs.stats.protocols[foundProtocol.name];\n              if (!protocolPaused){\n                let allocation = parseFloat(this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals));\n                keys[protocolInfo.label] = 1;\n                row[protocolInfo.label] = allocation;\n                row[`${protocolInfo.label}Color`] = 'hsl('+protocolInfo.color.hsl.join(',')+')';\n                // console.log(protocolInfo.label,this.functionsUtil.BNify(protocolData.allocation).toString(),this.props.tokenConfig.decimals,allocation);\n                maxChartValue = Math.max(maxChartValue,allocation);\n              } else {\n                row[protocolInfo.label] = 0;\n              }\n            }\n          });\n\n\n          tempData[date] = row;\n        });\n\n        const dates = Object.keys(tempData);\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 12;\n        daysCount = moment(dates[dates.length-1],\"YYYY/MM/DD\").diff(moment(dates[0],\"YYYY/MM/DD\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => this.functionsUtil.abbreviateNumber(v,v<1 ? 3 :0),\n            orient: 'left',\n            tickSize: 0,\n            tickPadding: 10,\n            tickRotation: 0,\n            legend: '',\n            legendOffset: -65,\n            tickValues:gridYValues,\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickSize: 0,\n            tickPadding: 10,\n            legendOffset: 36,\n            orient: 'bottom-left',\n            tickValues: 'every day',\n            legendPosition: 'middle'\n          },\n          legends:[\n            {\n              dataFrom:'keys',\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            tooltip: {\n              container:{\n                padding:'0',\n                boxShadow:'none',\n                background:'transparent',\n              },\n              tableCell:{\n                padding:'0'\n              }\n            },\n            axis: {\n              ticks: {\n                text: {\n                  fontSize:this.props.isMobile ? 12 : 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize:this.props.isMobile ? 12 : 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 60 },\n          tooltip:({ id, value, color }) => {\n            const allocation = this.functionsUtil.formatMoney(value,0);\n            return (\n              <DashboardCard\n                cardProps={{\n                  py:1,\n                  px:2,\n                  width:1,\n                }}\n              >\n                <table\n                  style={{width:'100%',borderCollapse:'collapse'}}\n                >\n                  <tbody>\n                    <tr>\n                      <td style={{padding:'3px 5px'}}>\n                        <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                      </td>\n                      <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                      <td style={{padding:'3px 5px'}}><strong>{allocation} {this.props.selectedToken}</strong></td>\n                    </tr>\n                  </tbody>\n                </table>\n              </DashboardCard>\n            )\n          }\n        }\n      break;\n      case 'ALL_PERC':\n        keys = {};\n        tempData = {};\n\n        apiResults.forEach((d,i) => {\n          const date = moment(d.timestamp*1000).format(\"YYYY/MM/DD\")\n          let row = {\n            date:moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\")\n          };\n          if (tempData[date]){\n            row = tempData[date];\n          }\n\n          const totalAllocation = d.protocolsData.reduce((accumulator,protocolAllocation) => {\n            const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n            return this.functionsUtil.BNify(accumulator).plus(allocation);\n          },0);\n\n          d.protocolsData.forEach((protocolData) => {\n            const protocolPaused = this.functionsUtil.BNify(protocolData.rate).eq(0);\n            const protocolName = this.props.tokenConfig.protocols.filter((p) => { return p.address.toLowerCase() === protocolData.protocolAddr.toLowerCase() })[0].name;\n            if (!protocolPaused){\n              const allocation = this.functionsUtil.fixTokenDecimals(protocolData.allocation,this.props.tokenConfig.decimals);\n              const allocationPerc = parseFloat(allocation.div(totalAllocation).times(100));\n              keys[protocolName] = 1;\n              row[protocolName] = allocationPerc;\n              row[`${protocolName}Color`] = 'hsl('+globalConfigs.stats.protocols[protocolName].color.hsl.join(',')+')';\n            } else if (typeof row[protocolName] !== undefined) {\n              row[protocolName] = 0;\n            } \n          });\n          \n          tempData[date] = row;\n        });\n\n        chartData = Object.values(tempData);\n\n        // Set chart type\n        chartType = Bar;\n\n        axisBottomIndex = 0;\n\n        chartProps = {\n          padding: 0.2,\n          animate: false,\n          indexBy: 'date',\n          data: chartData,\n          enableLabel: false,\n          labelSkipWidth: 16,\n          labelSkipHeight: 16,\n          keys: Object.keys(keys),\n          labelTextColor: 'inherit:darker(1.4)',\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 50 } : { top: 20, right: 40, bottom: 40, left: 60 },\n          colors: ({ id, data }) => data[`${id}Color`],\n          axisLeft:{\n            format: v => parseInt(v)+'%'\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            format: (value) => {\n              if (axisBottomIndex++ % 3 === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            orient: 'bottom',\n            legendOffset: 36,\n            legendPosition: 'middle',\n            tickValues: 'every 3 days'\n          },\n          tooltip:({ id, value, color }) => {\n            const allocation = parseInt(value)===100 ? this.functionsUtil.formatMoney(value,0) : this.functionsUtil.formatMoney(value,2);\n            return (\n              <table style={{width:'100%',borderCollapse:'collapse'}}>\n                <tbody>\n                  <tr>\n                    <td style={{padding:'3px 5px'}}>\n                      <span style={{display:'block', width: '12px', height: '12px', background: color}}></span>\n                    </td>\n                    <td style={{padding:'3px 5px',textTransform:'capitalize'}}>{id}</td>\n                    <td style={{padding:'3px 5px'}}><strong>{allocation}%</strong></td>\n                  </tr>\n                </tbody>\n              </table>\n            )\n          }\n        }\n      break;\n      case 'APR':\n\n        maxChartValue = 0;\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo && additionalProtocol.enabledTokens.includes(this.props.selectedToken)){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        protocols.forEach((p,j) => {\n          const protocolInfo = {...globalConfigs.stats.protocols[p.name]};\n          if (!protocolInfo.enabled){\n            return;\n          }\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n          \n          chartData.push({\n            id:protocolInfo.label,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                // let protocolRate = this.functionsUtil.BNify(protocolAllocation.rate);\n\n                let protocolRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n                  if (protocolAllocation[field]){\n                    return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(protocolAllocation[field]));\n                  }\n                  return this.functionsUtil.BNify(acc);\n                },0) : this.functionsUtil.BNify(protocolAllocation[rateField]);\n\n                const protocolPaused = protocolRate.eq(0);\n                if (!protocolPaused){\n\n                  // Aave V1 wrong rate FIX\n                  if (protocolRate.lt(0) && protocolAllocation.aaveAdditionalAPR && this.functionsUtil.BNify(protocolAllocation.aaveAdditionalAPR).gt(0)){\n                    protocolRate = protocolRate.plus(this.functionsUtil.BNify(protocolAllocation.aaveAdditionalAPR));\n                  }\n\n                  protocolRate = this.functionsUtil.fixTokenDecimals(protocolRate,18);\n\n                  const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                  const y = parseFloat(protocolRate);\n\n                  maxChartValue = Math.max(maxChartValue,y);\n\n                  return { x, y };\n                }\n                return undefined;\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color:'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data:apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            const y = parseFloat(this.functionsUtil.fixTokenDecimals(d.idleRate,18));\n            maxChartValue = Math.max(maxChartValue,y);\n            return { x, y };\n          })\n        });\n\n        /*\n        const csv = {};\n        chartData.forEach( protocolData => {\n          protocolData.data.forEach( d => {\n            if (!csv[d.x]){\n              csv[d.x] = {};\n            }\n            csv[d.x][protocolData.id] = d.y;\n          });\n        });\n\n        const csv_ordered = Object.keys(csv).sort().reduce(\n          (obj, key) => { \n            obj[key] = csv[key]; \n            return obj;\n          }, \n          {}\n        );\n\n        const csv_array = [];\n        const csv_header = [];\n        csv_header.push('Date');\n        chartData.forEach( pData => csv_header.push(pData.id) );\n        csv_array.push(csv_header.join(','));\n\n        Object.keys(csv_ordered).forEach( date => {\n          const csv_row = [date];\n          chartData.forEach( cData => {\n            if (csv_ordered[date][cData.id]){\n              csv_row.push(parseFloat(csv_ordered[date][cData.id]).toFixed(4));\n            } else {\n              csv_row.push('0.0000');\n            }\n          });\n          csv_array.push(csv_row.join(','));\n        });\n\n        console.log('-------DEBUG-------');\n        console.log(csv_ordered);\n        console.log('-------START-------');\n        console.log(csv_array.join('\\n'));\n        console.log('-------END-------');\n        */\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 6;\n        const chartValues = chartData[chartData.length-1].data.sort((a,b) => (moment(a.x,\"YYYY/MM/DD HH:mm\").isBefore(moment(b.x,\"YYYY/MM/DD HH:mm\")) ? -1 : 1));\n        daysCount = moment(chartValues[chartValues.length-1].x,\"YYYY/MM/DD HH:mm\").diff(moment(chartValues[0].x,\"YYYY/MM/DD HH:mm\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        // console.log('APR',chartValues,chartValues[0].x,chartValues[chartValues.length-1].x,daysCount,daysFrequency);\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(2)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            tickPadding: 15,\n            legendOffset: 0,\n            orient: 'bottom',\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickValues: 'every day',\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    // const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'SCORE':\n\n        let prevValue = 0;\n        maxChartValue = 0;\n\n        this.props.tokenConfig.protocols.forEach((p,j) => {\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n          if (!protocolInfo.enabled){\n            return;\n          }\n          if (chartData.filter(d => { return d.name === p.name; }).length){\n            return;\n          }\n          chartData.push({\n            id:protocolInfo.label,\n            color:'hsl('+globalConfigs.stats.protocols[p.name].color.hsl.join(',')+')',\n            data:apiResults.map((d,i) => {\n              return d.protocolsData.filter((protocolAllocation,x) => {\n                  return protocolAllocation.protocolAddr.toLowerCase() === p.address.toLowerCase()\n              })\n              .map((protocolAllocation,z) => {\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                let y = parseFloat(protocolAllocation.defiScore);\n\n                y = isNaN(y) || !y ? prevValue : y;\n                prevValue = y;\n                maxChartValue = Math.max(maxChartValue,y);\n\n                return { x, y };\n              })[0]\n            }).filter((v) => { return v !== undefined; } )\n          })\n        });\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: apiResults.map((d,i) => {\n            const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n            let y = parseFloat(d.idleScore);\n            y = isNaN(y) || !y ? prevValue : y;\n            prevValue = y;\n            maxChartValue = Math.max(maxChartValue,y);\n\n            return { x, y };\n          })\n        });\n\n        // debugger;\n\n        // Set chart type\n        chartType = Line;\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 6;\n        daysCount = moment(chartData[0].data[chartData[0].data.length-1].x,\"YYYY/MM/DD\").diff(moment(chartData[0].data[0].x,\"YYYY/MM/DD\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'hour',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(1),\n          yScale:{\n            type: 'linear',\n            stacked: false\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format:value => parseFloat(value).toFixed(1),\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            tickPadding: 15,\n            orient: 'bottom',\n            legendOffset: 0,\n            tickValues: 'every day',\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            legendPosition: 'middle'\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'linear',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemWidth: this.props.isMobile ? 70 : 80,\n              itemHeight: 18,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 0,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 70, left: 70 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        color={point.color}\n                        label={protocolName}\n                        value={protocolEarning}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE_V4':\n\n        itemIndex = 0;\n        maxChartValue = 0;\n        // let prevApy = null;\n        let prevApr = null;\n        let prevData = null;\n        let avgApy = this.functionsUtil.BNify(0);\n        let startBalance = this.functionsUtil.BNify(1);\n        let currentBalance = this.functionsUtil.BNify(1);\n\n        idleChartData = [];\n        const aaveProtocolInfo = protocols.find( p => p.name === 'aavev2' );\n\n        apiResults.forEach((d,i) => {\n\n          let idleRate = this.functionsUtil.BNify(d.idleRate);\n          let y = 0;\n          let apy = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n\n          // Aave V1 wrong rate FIX\n          if (this.props.selectedToken === 'WETH' && moment(x).isSameOrBefore(moment('2021-05-19 12:20','YYYY-MM-DD HH:mm'))){\n            const aaveProtocolData = aaveProtocolInfo ? d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === aaveProtocolInfo.address.toLowerCase()\n            }) : null;\n            if (aaveProtocolData.aaveAdditionalAPR && this.functionsUtil.BNify(aaveProtocolData.aaveAdditionalAPR).gt(0)){\n              idleRate = idleRate.plus(this.functionsUtil.BNify(aaveProtocolData.aaveAdditionalAPR));\n            }\n          }\n\n          const apr = this.functionsUtil.fixTokenDecimals(idleRate,18).div(100);\n          // const apy = this.functionsUtil.apr2apy(apr);\n          \n          avgApy = avgApy.plus(apr.times(100));\n\n          if (prevApr){\n            const days = (d.timestamp-prevData.timestamp)/86400;\n            // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n            const earnings = currentBalance.times(prevApr.times(days).div(365));\n            currentBalance = currentBalance.plus(earnings);\n\n            const earning = currentBalance.div(startBalance).minus(1).times(100);\n            y = parseFloat(earning);\n\n            // apy = earning.times(365).div(totDays).toFixed(2);\n            const daysSinceBeginning = idleChartData.length>0 ? Math.max(1,moment(d.timestamp*1000).diff(moment(idleChartData[0].x,\"YYYY/MM/DD HH:mm\"),'days')) : 1;\n            apy = parseFloat(y*365/daysSinceBeginning).toFixed(2);\n          }\n\n          prevData = d;\n          // prevApy = apy;\n          prevApr = apr;\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          if (apy>0){\n            idleChartData.push({ x, y, apy, blocknumber, itemPos });\n          }\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo && additionalProtocol.enabledTokens.includes(this.props.selectedToken)){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        protocols.forEach( p => {\n\n          const protocolInfo = {...globalConfigs.stats.protocols[p.name]};\n\n          // Add custom protocol info\n          if (protocolInfo.tokensProps && protocolInfo.tokensProps[this.props.selectedToken]){\n            const tokenProps = protocolInfo.tokensProps[this.props.selectedToken];\n            Object.keys(tokenProps).forEach(p => {\n              protocolInfo[p] = tokenProps[p];\n            });\n          }\n\n          if (!protocolInfo.enabled || (protocolInfo.startTimestamp && this.functionsUtil.strToMoment(protocolInfo.startTimestamp).isAfter(Date.now()))){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          // prevApy = null;\n          prevApr = null;\n          prevData = null;\n          let baseProfit = 0;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n          avgApy = this.functionsUtil.BNify(0);\n          startBalance = this.functionsUtil.BNify(1);\n          currentBalance = this.functionsUtil.BNify(1);\n          const apiResults_filtered = apiResults.filter( d => (!protocolInfo.startTimestamp || moment(protocolInfo.startTimestamp).isSameOrBefore(moment(d.timestamp*1000))) );\n\n          apiResults_filtered.forEach( (d,i) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              let protocolRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n                if (protocolData[field]){\n                  return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(protocolData[field]));\n                }\n                return this.functionsUtil.BNify(acc);\n              },0) : this.functionsUtil.BNify(protocolData[rateField]);\n\n              // Aave V1 wrong rate FIX\n              if (protocolRate.lt(0) && protocolData.aaveAdditionalAPR && this.functionsUtil.BNify(protocolData.aaveAdditionalAPR).gt(0)){\n                protocolRate = protocolRate.plus(this.functionsUtil.BNify(protocolData.aaveAdditionalAPR));\n              }\n\n              const protocolPaused = protocolRate.eq(0);\n              if (!protocolPaused){\n\n                let rowData = {};\n\n                let y = 0;\n                let apy = 0;\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n                const apr = this.functionsUtil.fixTokenDecimals(protocolRate,18).div(100);\n\n                avgApy = avgApy.plus(apr.times(100));\n                // const apy = this.functionsUtil.apr2apy(apr);\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null) {\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => (d1.blocknumber>=firstProtocolBlock) );\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                      y = baseProfit;\n                      apy = avgApy.toFixed(2);\n                    }\n                  }\n                }\n\n                itemIndex++;\n\n                if (prevData) {\n                  const days = (d.timestamp-prevData.timestamp)/86400;\n                  // const totDays = (d.timestamp-apiResults[0].timestamp)/86400;\n\n                  const earnings = currentBalance.times(prevApr.times(days).div(365));\n                  currentBalance = currentBalance.plus(earnings);\n\n                  const earning = currentBalance.div(startBalance).minus(1).times(100);\n                  y = parseFloat(earning)+baseProfit;\n\n                  const daysSinceBeginning = Math.max(1,moment(d.timestamp*1000).diff(moment(idleChartData[0].x,\"YYYY/MM/DD HH:mm\"),'days'));\n                  apy = parseFloat(y*365/daysSinceBeginning).toFixed(2);\n                  // debugger;\n\n                  // apy = avgApy.div(itemIndex+1).toFixed(2);\n                  const itemPos = Math.floor(itemIndex/totalItems*100);\n                  rowData = {\n                    x,\n                    y,\n                    apy,\n                    itemPos\n                  };\n\n                  itemIndex++;\n                  chartRow.data.push(rowData);\n                }\n\n                prevData = d;\n                prevApr = apr;\n\n                if (firstIdleBlock === null){\n                  firstIdleBlock = parseInt(d.blocknumber);\n                }\n\n                maxChartValue = Math.max(maxChartValue,y);\n\n                // const blocknumber = d.blocknumber;\n\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          data: idleChartData,\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')'\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        axisBottomIndex = 0;\n        axisBottomMaxValues = 12;\n        daysCount = moment(idleChartData[idleChartData.length-1].x,\"YYYY/MM/DD HH:mm\").diff(moment(idleChartData[0].x,\"YYYY/MM/DD HH:mm\"),'days');\n        daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: (value) => {\n              if (axisBottomIndex++ % daysFrequency === 0){\n                return moment(value,'YYYY/MM/DD HH:mm').format('MMM DD')\n              }\n            },\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            tickValues:`every day`,\n            legendPosition: 'middle',\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              itemWidth: this.props.isMobile ? 70 : 160,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontSize: this.props.isMobile ? 12: 14,\n                fill:this.props.theme.colors.legend,\n                fontWeight:500,\n                fontFamily: this.props.theme.fonts.sansSerif\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      case 'PRICE':\n        // let prevTokenPrice = null;\n        maxChartValue = 0;\n        let firstTokenPrice = null;\n\n        idleChartData = apiResults.map((d,i) => {\n\n          let y = 0;\n          let apy = 0;\n          let days = 0;\n          const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n          const tokenPrice = this.functionsUtil.fixTokenDecimals(d.idlePrice,this.props.tokenConfig.decimals);\n\n          if (!firstTokenPrice){\n            firstTokenPrice = tokenPrice;\n          } else {\n            y = parseFloat(tokenPrice.div(firstTokenPrice).minus(1).times(100));\n\n            days = (d.timestamp-apiResults[0].timestamp)/86400;\n            const earning = tokenPrice.div(firstTokenPrice).minus(1).times(100);\n            apy = earning.times(365).div(days).toFixed(2);\n\n            // console.log(firstTokenPrice.toString(),tokenPrice.toString(),earning.toString(),days,y,apy);\n          }\n\n          if (firstIdleBlock === null){\n            firstIdleBlock = parseInt(d.blocknumber);\n          }\n\n          maxChartValue = Math.max(maxChartValue,y);\n\n          const itemPos = Math.floor(itemIndex/totalItems*100);\n          const blocknumber = d.blocknumber;\n\n          itemIndex++;\n\n          return { x, y, apy, blocknumber, itemPos };\n        });\n\n        // Add Additional protocols\n        if (versionInfo.additionalProtocols && versionInfo.additionalProtocols.length>0){\n          versionInfo.additionalProtocols.forEach( additionalProtocol => {\n            const protocolInfo = this.props.tokenConfig.protocols.find( p => (p.name === additionalProtocol.protocol));\n            if (protocolInfo && additionalProtocol.enabledTokens.includes(this.props.selectedToken)){\n              additionalProtocol.enabled = true;\n              additionalProtocol.address = protocolInfo.address;\n              protocols.unshift(additionalProtocol);\n            }\n          });\n        }\n\n        await this.functionsUtil.asyncForEach(protocols,async (p) => {\n\n          const protocolInfo = globalConfigs.stats.protocols[p.name];\n\n          if (!protocolInfo.enabled){\n            return;\n          }\n\n          const rateField = protocolInfo.rateField ? protocolInfo.rateField : 'rate';\n\n          const chartRow = {\n            id:protocolInfo.label,\n            color: 'hsl('+protocolInfo.color.hsl.join(',')+')',\n            data: []\n          };\n\n          itemIndex = 0;\n          let baseProfit = 0;\n          firstTokenPrice = null;\n          let lastRowData = null;\n          let lastTokenPrice = null;\n          let firstProtocolData = null;\n          let firstProtocolBlock = null;\n\n          await this.functionsUtil.asyncForEach(apiResults,async (d) => {\n\n            const protocolData = d.protocolsData.find((pData,x) => {\n              return pData.protocolAddr.toLowerCase() === p.address.toLowerCase()\n            });\n\n            if (protocolData && protocolData[rateField]){\n\n              if (!firstProtocolData){\n                firstProtocolData = protocolData;\n              }\n\n              const protocolPaused = this.functionsUtil.BNify(protocolData[rateField]).eq(0);\n              if (!protocolPaused){\n\n                // Start new protocols from Idle performances\n                if (firstProtocolBlock === null){\n                  firstProtocolBlock = parseInt(d.blocknumber);\n                  if (firstProtocolBlock>firstIdleBlock){\n                    const idlePerformance = idleChartData.find(d1 => {\n                      return d1.blocknumber>=firstProtocolBlock;\n                    });\n                    if (idlePerformance){\n                      baseProfit = idlePerformance.y;\n                    }\n                  }\n                }\n\n                let rowData = {};\n                let tokenExchangeRate = protocolData.price;\n                let tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                const x = moment(d.timestamp*1000).format(\"YYYY/MM/DD HH:mm\");\n\n                // Take data from\n                if (protocolInfo && protocolInfo.data && protocolInfo.data[p.address.toLowerCase()] && protocolInfo.data[p.address.toLowerCase()][d.blocknumber]){\n                  tokenExchangeRate = this.functionsUtil.BNify(globalConfigs.stats.protocols[p.name].data[p.address.toLowerCase()][d.blocknumber]);\n                  tokenPriceFixed = this.functionsUtil.fixTokenDecimals(tokenExchangeRate,p.decimals);\n                }/* else if (p.name === 'aave'){\n                  // Token holders (aDAI = 0xc025c03e10f656d3ee76685d53d236824d8ef3da , aUSDC = 0xd2c734fbd8f5d1c809185e014016dd4097e94711)\n                  let aaveTokenBalance = await this.functionsUtil.genericContractCall(p.token,'balanceOf',['0xd2c734fbd8f5d1c809185e014016dd4097e94711'],{},d.blocknumber);\n                  if (aaveTokenBalance){\n                    if (!Object.values(aave_data).length){\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(1,p.decimals);\n                      aave_data[d.blocknumber] = aaveTokenBalance.toString();\n                    } else {\n                      const firstBalance = Object.values(aave_data)[0];\n                      tokenExchangeRate = this.functionsUtil.normalizeTokenAmount(this.functionsUtil.BNify(aaveTokenBalance).div(this.functionsUtil.BNify(firstBalance)).toFixed(p.decimals),p.decimals);\n                      aave_data[d.blocknumber] = tokenExchangeRate.toString();\n                    }\n                  }\n                }\n                */\n\n                let y = baseProfit;\n                let apy = 0;\n\n                if (!firstTokenPrice){\n                  firstTokenPrice = tokenPriceFixed;\n                } else {\n                  if (tokenPriceFixed.lt(lastTokenPrice)){\n                    firstTokenPrice = tokenPriceFixed;\n                    const lastYDiff = chartRow.data[chartRow.data.length-1].y-chartRow.data[chartRow.data.length-2].y;\n                    y = lastRowData.y+lastYDiff;\n                    baseProfit = y;\n                  } else {\n                    y += parseFloat(tokenPriceFixed.div(firstTokenPrice).minus(1).times(100));\n                  }\n\n                  const days = (d.timestamp-apiResults[0].timestamp)/86400;\n                  const earning = tokenPriceFixed.div(firstTokenPrice).minus(1).times(100);\n                  apy = earning.times(365).div(days).toFixed(2);\n                }\n\n                y = Math.max(0,y);\n                maxChartValue = Math.max(maxChartValue,y);\n\n                const itemPos = Math.floor(itemIndex/totalItems*100);\n\n                rowData = {\n                  x,\n                  y,\n                  apy,\n                  itemPos\n                };\n\n                itemIndex++;\n                lastRowData = rowData;\n                chartRow.data.push(rowData);\n                lastTokenPrice = tokenPriceFixed;\n              }\n            }\n          });\n\n          chartData.push(chartRow);\n        });\n\n        gridYStep = parseFloat(maxChartValue/maxGridLines);\n        gridYValues = [0];\n        for (let i=1;i<=5;i++){\n          gridYValues.push(i*gridYStep);\n        }\n\n        chartData.push({\n          id:'Idle',\n          color: 'hsl('+globalConfigs.stats.protocols.idle.color.hsl.join(',')+')',\n          data: idleChartData\n        });\n\n        // Set chart type\n        chartType = Line;\n\n        chartProps = {\n          xScale:{\n            type: 'time',\n            format: '%Y/%m/%d %H:%M',\n            // precision: 'day',\n          },\n          xFormat:'time:%b %d %H:%M',\n          yFormat:value => parseFloat(value).toFixed(3)+'%',\n          yScale:{\n            type: 'linear',\n            stacked: false,\n            // min: 1\n          },\n          axisLeft:{\n            legend: '',\n            tickSize: 0,\n            orient: 'left',\n            tickPadding: 10,\n            tickRotation: 0,\n            legendOffset: -70,\n            tickValues:gridYValues,\n            legendPosition: 'middle',\n            format: value => parseFloat(value).toFixed(2)+'%',\n          },\n          axisBottom: this.props.isMobile ? null : {\n            legend: '',\n            tickSize: 0,\n            format: '%b %d',\n            tickPadding: 10,\n            legendOffset: 0,\n            orient: 'bottom',\n            legendPosition: 'middle',\n            tickValues: this.props.isMobile ? 'every 4 days' : ( this.props.showAdvanced ? 'every 3 days' : 'every 2 days'),\n          },\n          gridYValues,\n          pointSize:0,\n          useMesh:true,\n          animate:false,\n          pointLabel:\"y\",\n          curve:'monotoneX',\n          enableArea:false,\n          enableSlices:'x',\n          enableGridX:false,\n          enableGridY:true,\n          pointBorderWidth:1,\n          colors:d => d.color,\n          pointLabelYOffset:-12,\n          legends:[\n            {\n              itemHeight: 18,\n              itemWidth: this.props.isMobile ? 70 : 100,\n              translateX: this.props.isMobile ? -35 : 0,\n              translateY: this.props.isMobile ? 40 : 65,\n              symbolSize: 10,\n              itemsSpacing: 5,\n              direction: 'row',\n              anchor: 'bottom-left',\n              symbolShape: 'circle',\n              itemTextColor: this.props.theme.colors.legend,\n              effects: [\n                {\n                  on: 'hover',\n                  style: {\n                    itemTextColor: this.props.themeMode === 'light' ? '#000' : '#fff'\n                  }\n                }\n              ]\n            }\n          ],\n          theme:{\n            axis: {\n              ticks: {\n                text: {\n                  fontSize: this.props.isMobile ? 12: 14,\n                  fontWeight:600,\n                  fill:this.props.theme.colors.legend,\n                  fontFamily: this.props.theme.fonts.sansSerif\n                }\n              }\n            },\n            grid: {\n              line: {\n                stroke: this.props.theme.colors.lineChartStroke, strokeDasharray: '10 6'\n              }\n            },\n            legends:{\n              text:{\n                fontWeight:500,\n                fill:this.props.theme.colors.legend,\n                textTransform:'capitalize',\n                fontFamily: this.props.theme.fonts.sansSerif,\n                fontSize: this.props.isMobile ? 12: 14\n              }\n            }\n          },\n          pointColor:{ from: 'color', modifiers: []},\n          margin: this.props.isMobile ? { top: 20, right: 20, bottom: 40, left: 65 } : { top: 20, right: 40, bottom: 80, left: 80 },\n          sliceTooltip:(slideData) => {\n            const { slice } = slideData;\n            const point = slice.points[0];\n            return (\n              <CustomTooltip\n                point={point}\n              >\n                {\n                typeof slice.points === 'object' && slice.points.length &&\n                  slice.points.map(point => {\n                    const protocolName = point.serieId;\n                    const protocolEarning = point.data.yFormatted;\n                    const protocolApy = point.data.apy;\n                    return (\n                      <CustomTooltipRow\n                        key={point.id}\n                        label={protocolName}\n                        color={point.color}\n                        value={`${protocolEarning} <small>(${protocolApy}% APY)</small>`}\n                      />\n                    );\n                  })\n                }\n              </CustomTooltip>\n            );\n          }\n        };\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      chartType,\n      chartProps,\n      chartData\n    });\n  }\n\n  render() {\n    return(\n      <GenericChart\n        showLoader={true}\n        {...this.state.chartProps}\n        height={this.props.height}\n        type={this.state.chartType}\n        data={this.state.chartData}\n        width={this.state.chartWidth}\n        isMobile={this.props.isMobile}\n        parentId={this.props.parentId}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default StatsChart;","import { Flex, Text } from \"rimble-ui\";\nimport React, { Component } from 'react';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\n\nclass Rebalance extends Component {\n\n  state = {\n    loading:true,\n    processing:{\n      rebalance:{\n        txHash:null,\n        loading:false\n      },\n    },\n    shouldRebalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n  componentUnmounted = false;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillUnmount(){\n    this.componentUnmounted = true;\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    this.checkRebalance();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged || accountChanged){\n      this.checkRebalance();\n    }\n  }\n\n  async setStateSafe(newState,callback=null) {\n    if (!this.componentUnmounted){\n      return this.setState(newState,callback);\n    }\n    return null;\n  }\n\n  checkRebalance = async () => {\n    this.setStateSafe({\n      loading:true,\n    });\n\n    const shouldRebalance = await this.functionsUtil.checkRebalance(this.props.tokenConfig);\n\n    this.setStateSafe({\n      loading:false,\n      shouldRebalance\n    });\n  }\n\n  rebalance = async (e) => {\n    e.preventDefault();\n\n    const callback = (tx,error) => {\n\n      if (tx){\n        // Send Google Analytics event\n        const eventData = {\n          eventLabel: tx.status,\n          eventCategory: 'Rebalance',\n          eventAction: this.props.selectedToken,\n        };\n\n        let txDenied = false;\n\n        if (error){\n          eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n        }\n\n        // Send Google Analytics event\n        if (error || eventData.status !== 'error'){\n          this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n        }\n\n        if (tx.status === 'success'){\n          // Toast message\n          window.toastProvider.addMessage(`Rebalance completed`, {\n            secondaryMessage: `Now the pool is balanced!`,\n            colorTheme: 'light',\n            actionHref: \"\",\n            actionText: \"\",\n            variant: \"success\",\n          });\n        } else if (!txDenied){\n          window.toastProvider.addMessage(`Rebalance error`, {\n            secondaryMessage: `The rebalance has failed, try again...`,\n            colorTheme: 'light',\n            actionHref: \"\",\n            actionText: \"\",\n            variant: \"failure\",\n          });\n        }\n      }\n\n      this.setStateSafe((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          rebalance:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n\n      this.checkRebalance();\n    }\n\n    const callback_receipt = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setStateSafe((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            rebalance:{\n              ...prevState.processing.rebalance,\n              txHash\n            }\n          }\n        })\n      );\n    };\n\n    await this.setStateSafe({\n      processing:{\n        rebalance:{\n          txHash:null,\n          loading:true\n        }\n      }\n    });\n\n    this.props.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'rebalance', [], null , callback, callback_receipt);\n  }\n\n  render() {\n    return (\n      <Flex\n        px={3}\n        width={1}\n        minHeight={'100px'}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n      {\n        this.state.loading ? (\n          <FlexLoader\n            flexProps={{\n              flexDirection:'row'\n            }}\n            loaderProps={{\n              size:'30px'\n            }}\n            textProps={{\n              ml:2\n            }}\n            text={'Checking rebalance...'}\n          />\n        ) : (\n          this.state.processing.rebalance.loading ? (\n            <TxProgressBar {...this.props} waitText={`Rebalance estimated in`} endMessage={`Finalizing rebalance request...`} hash={this.state.processing.rebalance.txHash} />\n          ) : (\n            <Flex\n              width={1}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                mt={0}\n                mb={3}\n                textAlign={'center'}\n              >\n                {this.state.shouldRebalance ? 'Rebalance the entire pool. All users will bless you.' : 'The pool is already balanced.'}\n              </Text>\n              <RoundButton\n                buttonProps={{\n                  width:'auto',\n                  disabled:!this.state.shouldRebalance\n                }}\n                handleClick={e => this.rebalance(e)}\n              >\n                Rebalance\n              </RoundButton>\n            </Flex>\n          )\n        )\n      }\n      </Flex>\n    )\n  }\n}\n\nexport default Rebalance;","import React from \"react\";\nimport {\n  Modal,\n  Button,\n  Flex,\n  Field,\n  Select\n} from \"rimble-ui\";\nimport moment from 'moment';\nimport './DateRangeModal.css';\nimport ModalCard from './ModalCard';\nimport 'react-date-range/dist/styles.css';\nimport { DateRange } from 'react-date-range';\nimport 'react-date-range/dist/theme/default.css';\n\nclass DateRangeModal extends React.Component {\n\n  state = {\n    quickSelection:'',\n    ranges:{\n      startDate: this.props.startDate ? this.props.startDate : new Date(),\n      endDate: this.props.endDate ? this.props.endDate : new Date(),\n      key: 'selection'\n    },\n    options:Object.keys(this.props.quickSelections).map( value => ({ value,label:this.props.quickSelections[value].label }) )\n  }\n\n  handleSelect(ranges){\n    this.setState({\n      quickSelection:'',\n      ranges:ranges.selection\n    });\n  }\n\n  handleQuickSelect(e){\n    let startDate = null;\n    let endDate = moment(new Date());\n    const quickSelection = e.target.value;\n\n    if (quickSelection && this.props.quickSelections[quickSelection]){\n      const quickSelectionParams = this.props.quickSelections[quickSelection];\n      startDate = endDate.clone().subtract(quickSelectionParams.value,quickSelectionParams.type);\n    } else {\n      startDate = null;\n      endDate = null;\n    }\n\n    if (startDate && endDate){\n      startDate = startDate._d;\n      endDate = endDate._d;\n\n      const ranges = {\n        startDate,\n        endDate,\n        key:'selection'\n      };\n\n      this.setState({\n        ranges,\n        quickSelection\n      }, () => {\n        this.closeModal();\n      });\n    }\n  }\n\n  componentDidUpdate = (prevProps) => {\n    if (prevProps.startDate !== this.props.startDate || prevProps.endDate !== this.props.endDate){\n      this.setState({\n        ranges:{\n          startDate: this.props.startDate ? this.props.startDate : new Date(),\n          endDate: this.props.endDate ? this.props.endDate : new Date(),\n          key: 'selection'\n        }\n      });\n    }\n  }\n\n  closeModal(){\n    const newState = this.props.handleSelect(this.state.ranges,this.state.quickSelection);\n    const ranges = {\n      startDate:newState.startTimestampObj ? newState.startTimestampObj._d : new Date(),\n      endDate:newState.endTimestampObj ? newState.endTimestampObj._d : new Date(),\n      key: 'selection'\n    };\n    this.setState({\n      ranges\n    });\n    this.props.closeModal();\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        <ModalCard closeFunc={this.props.closeModal}>\n          <ModalCard.Header title={'Select Date Range'}>\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex width={1} flexDirection={'column'} alignItems={'center'}>\n              <Field label=\"Quick Date Selection\" style={{display:'flex',width:'100%',alignItems:'stretch',justifyContent:'center'}}>\n                <Select\n                  style={{\n                    fontSize:'14px',\n                    height:'2.5em',\n                    boxShadow:'none',\n                    color:this.props.theme.colors.counter,\n                    backgroundColor:this.props.theme.colors.cardBg\n                  }}\n                  width={'100%'}\n                  required={true}\n                  options={this.state.options}\n                  value={this.state.quickSelection}\n                  onChange={this.handleQuickSelect.bind(this)}\n                />\n              </Field>\n              <DateRange\n                ranges={[this.state.ranges]}\n                minDate={this.props.minDate}\n                maxDate={this.props.maxDate}\n                className={this.props.themeMode}\n                onChange={this.handleSelect.bind(this)}\n              />\n            </Flex>\n          </ModalCard.Body>\n          <ModalCard.Footer>\n            <Flex px={[2,0]} flexDirection={['column', 'row']} width={1} justifyContent={'center'}>\n              <Button\n                my={2}\n                mx={[0, 2]}\n                borderRadius={4}\n                mainColor={'blue'}\n                onClick={ e => this.closeModal(e) }\n                size={this.props.isMobile ? 'small' : 'medium'}\n              >\n              APPLY\n              </Button>\n            </Flex>\n          </ModalCard.Footer>\n        </ModalCard>\n      </Modal>\n    );\n  }\n\n}\n\nexport default DateRangeModal;","import moment from 'moment';\nimport Title from '../Title/Title';\nimport StatsChart from './StatsChart';\nimport React, { Component } from 'react';\nimport Rebalance from '../Rebalance/Rebalance';\nimport StatsCard from '../StatsCard/StatsCard';\nimport AssetsList from '../AssetsList/AssetsList';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport globalConfigs from '../configs/globalConfigs';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport GenericSelector from '../GenericSelector/GenericSelector';\nimport RoundIconButton from '../RoundIconButton/RoundIconButton';\nimport VariationNumber from '../VariationNumber/VariationNumber';\nimport AllocationChart from '../AllocationChart/AllocationChart';\nimport DateRangeModal from '../utilities/components/DateRangeModal';\nimport { Flex, Text, Heading, Box, Icon, Button, Link } from 'rimble-ui';\nimport ExecuteTransaction from '../ExecuteTransaction/ExecuteTransaction';\nimport AssetsUnderManagement from '../AssetsUnderManagement/AssetsUnderManagement';\n\nclass Stats extends Component {\n  state = {\n    aum:null,\n    apr:null,\n    days:'-',\n    delta:null,\n    earning:null,\n    minDate:null,\n    maxDate:null,\n    carouselMax:1,\n    rebalances:'-',\n    buttonGroups:[],\n    apiResults:null,\n    carouselIndex:0,\n    idleVersion:null,\n    statsVersions:{},\n    minStartTime:null,\n    endTimestamp:null,\n    showAdvanced:true,\n    govTokensPool:null,\n    unlentBalance:null,\n    quickSelection:null,\n    startTimestamp:null,\n    endTimestampObj:null,\n    shouldRebalance:null,\n    carouselOffsetLeft:0,\n    startTimestampObj:null,\n    showRefreshIdleSpeed:false,\n    apiResults_unfiltered:null,\n    dateRangeModalOpened:false\n  };\n\n  quickSelections = {\n    day:{\n      value:1,\n      type:'day',\n      label:'Last day',\n    },\n    week:{\n      value:1,\n      type:'week',\n      label:'Last week',\n    },\n    weeks:{\n      value:2,\n      type:'week',\n      label:'Last 2 weeks',\n    },\n    month:{\n      value:1,\n      type:'month',\n      label:'Last month',\n    },\n    ytd:{\n      type:'day',\n      label:'Year to date',\n      value:moment().diff(moment('01/01/YYYY','DD/MM/YYYY'),'days'),\n    },\n  };\n\n  // Utils\n  functionsUtil = null;\n  componentUnmounted = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount() {\n    this.loadUtils();\n    await this.loadParams();\n  }\n\n  componentWillUnmount(){\n    this.componentUnmounted = true;\n  }\n\n  async setStateSafe(newState,callback=null) {\n    if (!this.componentUnmounted){\n      return this.setState(newState,callback);\n    }\n    return null;\n  }\n\n  showRefreshIdleSpeed(){\n    this.setState({\n      showRefreshIdleSpeed:true\n    });\n  }\n\n  getLatestAvailableVersion(){\n    const statsVersions = globalConfigs.stats.versions;\n    let latestVersion = null;\n    Object.keys(statsVersions).forEach( version => {\n      const versionInfo = statsVersions[version];\n      if (versionInfo.enabledStrategies.includes(this.props.selectedStrategy)){\n        latestVersion = version;\n      }\n    });\n\n    return latestVersion;\n  }\n\n  getVersionInfo(version){\n    if (!version){\n      version = this.state.idleVersion;\n    }\n\n    if (!globalConfigs.stats.versions[version]){\n      return null;\n    }\n\n    const versionInfo = Object.assign({},globalConfigs.stats.versions[version]);\n\n    if (versionInfo.strategiesParams && versionInfo.strategiesParams[this.props.selectedStrategy]){\n      const versionInfoExtra = versionInfo.strategiesParams[this.props.selectedStrategy];\n      Object.keys(versionInfoExtra).forEach( param => {\n        versionInfo[param] = versionInfoExtra[param];\n      });\n    }\n\n    return versionInfo;\n  }\n\n  async loadParams() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    const newState = {};\n    const { match: { params } } = this.props;\n\n    const currentNetworkAvailableTokens = Object.keys(this.props.availableTokens);\n\n    if (!!params.customToken && currentNetworkAvailableTokens.indexOf(params.customToken.toUpperCase()) !== -1 ){\n      newState.selectedToken = params.customToken.toUpperCase();\n    } else {\n      newState.selectedToken = this.props.selectedToken.toUpperCase();\n    }\n\n    newState.tokenConfig = this.props.availableTokens[newState.selectedToken];\n    newState.minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp,'YYYY-MM-DD');\n    newState.maxEndDate = moment();\n\n    newState.endTimestampObj = moment(moment().format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    newState.latestVersion = this.getLatestAvailableVersion();\n    newState.idleVersion = this.state.idleVersion === null ? newState.latestVersion : this.state.idleVersion;\n\n    const versionInfo = this.getVersionInfo(newState.idleVersion);\n\n    // console.log('loadParams',newState.latestVersion,newState.idleVersion,versionInfo);\n\n    if (newState.idleVersion && versionInfo.endTimestamp){\n      const newEndTimestampObj = moment(moment(versionInfo.endTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.endTimestampObj.isAfter(newEndTimestampObj)){\n        newState.endTimestampObj = newEndTimestampObj;\n        newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n      }\n\n      if (!newState.maxEndDate || newState.maxEndDate.isAfter(newEndTimestampObj)){\n        newState.maxEndDate = newEndTimestampObj;\n      }\n    }\n\n    newState.endTimestamp = parseInt(newState.endTimestampObj._d.getTime()/1000);\n\n    // Set start date\n    newState.startTimestampObj = newState.endTimestampObj.clone().subtract(1,'month');\n    newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n\n    if (newState.idleVersion && versionInfo.startTimestamp){\n      const newStartTimestampObj = moment(moment(versionInfo.startTimestamp*1000).format('YYYY-MM-DD HH:mm'),'YYYY-MM-DD HH:mm');\n      if (newState.startTimestampObj.isBefore(newStartTimestampObj)){\n        newState.startTimestampObj = newStartTimestampObj;\n        newState.startTimestamp = parseInt(newState.startTimestampObj._d.getTime()/1000);\n      }\n\n      if (newState.minStartTime.isBefore(newStartTimestampObj)){\n        newState.minStartTime = newStartTimestampObj;\n      }\n    }\n\n    newState.minDate = newState.minStartTime._d;\n    newState.maxDate = newState.maxEndDate._d;\n\n    if (newState !== this.state){\n      await this.setStateSafe(newState);\n    }\n  }\n\n  setDateRange = (ranges,quickSelection=null) => {\n\n    const minStartTime = moment(globalConfigs.stats.tokens[this.props.selectedToken].startTimestamp);\n\n    let startTimestampObj = moment(ranges.startDate).isSameOrAfter(minStartTime) ? moment(ranges.startDate) : minStartTime;\n    let endTimestampObj = moment(ranges.endDate);\n\n    if (startTimestampObj.isSame(endTimestampObj)){\n      endTimestampObj.add(1,'day');\n    }\n\n    endTimestampObj = moment(endTimestampObj.format('YYYY-MM-DD 23:59'),'YYYY-MM-DD HH:mm');\n\n    if (startTimestampObj.isBefore(this.state.minStartTime)){\n      startTimestampObj = this.state.minStartTime;\n    }\n\n    if (endTimestampObj.isAfter(this.state.maxEndDate)){\n      endTimestampObj = this.state.maxEndDate;\n    }\n\n    const startTimestamp = parseInt(startTimestampObj._d.getTime()/1000);\n    const endTimestamp = parseInt(endTimestampObj._d.getTime()/1000);\n\n    const newState = {\n      minStartTime,\n      endTimestamp,\n      quickSelection,\n      startTimestamp,\n      endTimestampObj,\n      startTimestampObj\n    };\n\n    this.setStateSafe(newState);\n\n    return newState;\n  }\n\n  toggleAdvancedCharts = (e) => {\n    e.preventDefault();\n    this.setStateSafe({\n      showAdvanced:!this.state.showAdvanced\n    });\n  }\n\n  setDateRangeModal = (dateRangeModalOpened) => {\n    if (dateRangeModalOpened !== this.state.dateRangeModalOpened){\n      this.setStateSafe({\n        dateRangeModalOpened\n      });\n    }\n  }\n\n  async componentDidMount() {\n\n    if (!this.props.web3){\n      this.props.initWeb3();\n      return false;\n    }\n\n    /*\n    const style = document.createElement('style');\n    style.id = 'crisp-custom-style';\n    style.type = 'text/css';\n    style.innerHTML = `\n    .crisp-client{\n      display:none !important;\n    }`;\n    document.body.appendChild(style);\n    */\n\n    this.loadUtils();\n    await this.loadParams();\n    this.loadApiData();\n    this.loadCarousel();\n  }\n\n  loadCarousel(){\n    const carouselMax = this.props.isMobile ? 3 : 2;\n    this.setStateSafe({\n      carouselMax\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState) {\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const strategyChanged = prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken || JSON.stringify(prevProps.tokenConfig) !== JSON.stringify(this.props.tokenConfig);\n    const dateChanged = prevState.startTimestamp !== this.state.startTimestamp || prevState.endTimestamp !== this.state.endTimestamp;\n    const versionChanged = prevState.idleVersion !== this.state.idleVersion;\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n\n    if (mobileChanged){\n      this.loadCarousel();\n    }\n\n    if (contractsInitialized || tokenChanged || strategyChanged || versionChanged){\n      // console.log('componentDidUpdate',this.props.selectedStrategy,this.props.selectedToken);\n      await this.componentDidMount();\n    } else if (dateChanged){\n      this.loadApiData();\n    }\n  }\n\n  filterTokenData = (apiResults) => {\n    return apiResults.filter((r,i) => {\n      return (!this.state.startTimestamp || r.timestamp >= this.state.startTimestamp) && (!this.state.endTimestamp || r.timestamp <= this.state.endTimestamp);\n    });\n  }\n\n  setIdleVersion = idleVersion => {\n    this.setStateSafe({\n      idleVersion\n    });\n  }\n\n  loadApiData = async () => {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return false;\n    }\n\n    // Get COMP APR\n    // const compAPR = await this.functionsUtil.getCompAPR(this.props.tokenConfig);\n    // console.log('compAPR',compAPR.toString());\n\n    const startTimestamp = this.state.minDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.minDate).format('DD/MM/YYYY 00:00:00'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n    const endTimestamp = this.state.maxDate ? parseInt(this.functionsUtil.strToMoment(this.functionsUtil.strToMoment(this.state.maxDate).format('DD/MM/YYYY 23:59:59'),'DD/MM/YYYY HH:mm:ss')._d.getTime()/1000) : null;\n\n    const isRisk = ['v3','v4'].includes(this.state.idleVersion) && this.props.selectedStrategy === 'risk';\n    let apiResults_unfiltered = await this.functionsUtil.getTokenApiData(this.props.tokenConfig.address,isRisk,startTimestamp,endTimestamp,true,7200);\n\n    const apiResults = this.filterTokenData(apiResults_unfiltered);\n\n    // console.log('loadApiData',startTimestamp,endTimestamp,new Date(startTimestamp*1000),new Date(endTimestamp*1000),apiResults,apiResults_unfiltered);\n\n    if (!apiResults || !apiResults_unfiltered || !apiResults.length || !apiResults_unfiltered.length){\n      return false;\n    }\n\n    const firstResult = apiResults[0];\n    const lastResult = Object.values(apiResults).pop();\n\n    window.moment = moment;\n\n    let days = (lastResult.timestamp-firstResult.timestamp)/86400;\n    if (days === 0){\n      days = 1;\n    }\n\n    let apr = null;\n    let delta = 'N/A';\n\n    const idleTokens = this.functionsUtil.fixTokenDecimals(lastResult.idleSupply,18);\n    const firstIdlePrice = this.functionsUtil.fixTokenDecimals(firstResult.idlePrice,this.props.tokenConfig.decimals);\n    const lastIdlePrice = this.functionsUtil.fixTokenDecimals(lastResult.idlePrice,this.props.tokenConfig.decimals);\n\n    // Calculate AUM\n    let aum = idleTokens.times(lastIdlePrice);\n\n    // Convert Token balance\n    aum = await this.functionsUtil.convertTokenBalance(aum,this.props.selectedToken,this.props.tokenConfig,isRisk);\n\n    const compoundInfo = this.props.tokenConfig.protocols.filter((p) => { return p.name === 'compound' })[0];\n    const firstCompoundData = compoundInfo ? firstResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n    const lastCompoundData = compoundInfo ? lastResult.protocolsData.filter((p) => { return p.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase() })[0] : null;\n\n    if (this.state.idleVersion === 'v4') {\n\n      apr = apiResults.reduce( (sum,r) => {\n        const idleRate = this.functionsUtil.fixTokenDecimals(r.idleRate,18);\n        return this.functionsUtil.BNify(sum).plus(idleRate);\n      },0);\n\n      // Calculate average\n      apr = apr.div(apiResults.length);\n\n      if (compoundInfo){\n        const compoundWithCOMPInfo = globalConfigs.stats.protocols.compoundWithCOMP;\n        const rateField = compoundWithCOMPInfo.rateField ? compoundWithCOMPInfo.rateField : 'rate';\n\n        let compoundAvgApr = apiResults.reduce( (sum,r) => {\n\n          const compoundData = r.protocolsData.find((pData,x) => {\n            return pData.protocolAddr.toLowerCase() === compoundInfo.address.toLowerCase()\n          });\n\n          let compoundRate = typeof rateField === 'object' && rateField.length ? rateField.reduce((acc,field) => {\n            if (compoundData && compoundData[field]){\n              return this.functionsUtil.BNify(acc).plus(this.functionsUtil.BNify(compoundData[field]));\n            }\n            return this.functionsUtil.BNify(acc);\n          },0) : this.functionsUtil.BNify(compoundData[rateField]);\n\n          compoundRate = this.functionsUtil.fixTokenDecimals(compoundRate,18);\n\n          return this.functionsUtil.BNify(sum).plus(compoundRate);\n        },0);\n\n        // Calculate average\n        compoundAvgApr = compoundAvgApr.div(apiResults.length);\n\n        // compoundAvgApr = this.functionsUtil.apr2apy(compoundAvgApr.div(100)).times(100);\n        // apr = this.functionsUtil.apr2apy(apr.div(100)).times(100);\n\n        delta = apr.minus(compoundAvgApr);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n\n      apr = apr.toFixed(2);\n\n    } else {\n      const earning = lastIdlePrice.div(firstIdlePrice).minus(1).times(100);\n      apr = earning.times(365).div(days).toFixed(2);\n\n      if (firstCompoundData && lastCompoundData){\n        const firstCompoundPrice = this.functionsUtil.fixTokenDecimals(firstCompoundData.price,this.props.tokenConfig.decimals);\n        const lastCompoundPrice = this.functionsUtil.fixTokenDecimals(lastCompoundData.price,this.props.tokenConfig.decimals);\n        const compoundApr = lastCompoundPrice.div(firstCompoundPrice).minus(1).times(100);\n        delta = earning.minus(compoundApr).times(365).div(days);\n        if (parseFloat(delta)<0){\n          delta = 0\n        }\n        delta = delta.toFixed(2);\n      }\n    }\n\n    // Count rebalances\n    let rebalances = 0;\n    apiResults.forEach((row,index) => {\n      if (index){\n        const prevRow = apiResults[index-1];\n\n        const totalAllocation = row.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        const prevTotalAllocation = prevRow.protocolsData.reduce((accumulator,protocolAllocation) => {\n          const allocation = this.functionsUtil.fixTokenDecimals(protocolAllocation.allocation,this.props.tokenConfig.decimals);\n          return this.functionsUtil.BNify(accumulator).plus(allocation);\n        },0);\n\n        let hasRebalanced = false;\n        row.protocolsData.forEach( p => {\n          if (hasRebalanced){\n            return;\n          }\n          const prevP = prevRow.protocolsData.find( prevP => (prevP.protocolAddr.toLowerCase() === p.protocolAddr.toLowerCase()) );\n          const allocation = this.functionsUtil.fixTokenDecimals(p.allocation,this.props.tokenConfig.decimals);\n          const prevAllocation = prevP ? this.functionsUtil.fixTokenDecimals(prevP.allocation,this.props.tokenConfig.decimals) : this.functionsUtil.BNify(0);\n          const allocationPerc = parseInt(parseFloat(allocation.div(totalAllocation).times(100)));\n          const prevAllocationPerc = parseInt(parseFloat(prevAllocation.div(prevTotalAllocation).times(100)));\n          if (allocationPerc!==prevAllocationPerc){\n            rebalances++;\n            hasRebalanced = true;\n          }\n        });\n      }\n    });\n\n    // Add gov tokens balance to AUM\n    const availableTokens = {};\n    availableTokens[this.props.selectedToken] = this.props.tokenConfig;\n    const govTokensPool = await this.functionsUtil.getGovTokenPool(null,availableTokens,'DAI');\n    if (govTokensPool){\n      aum = aum.plus(govTokensPool);\n    }\n\n    let unlentBalance = await this.functionsUtil.getUnlentBalance(this.props.tokenConfig);\n    if (unlentBalance){\n      unlentBalance = this.functionsUtil.formatMoney(parseFloat(unlentBalance));\n    }\n\n    this.setStateSafe({\n      aum,\n      apr,\n      days,\n      delta,\n      apiResults,\n      rebalances,\n      govTokensPool,\n      unlentBalance,\n      apiResults_unfiltered\n    });\n  }\n\n  selectToken = async (strategy,token) => {\n    await this.props.setStrategyToken(strategy,token);\n    this.props.changeToken(token);\n  }\n\n  handleCarousel = action => {\n    let carouselIndex = this.state.carouselIndex;\n    if (action==='next' && carouselIndex<this.state.carouselMax){\n      carouselIndex++;\n    } else if (action==='back' && carouselIndex>0){\n      carouselIndex--;\n    }\n\n    const $element = window.jQuery(`#carousel-cursor > div:eq(${carouselIndex})`);\n    const carouselOffsetLeft = -parseFloat($element.position().left)+'px';\n\n    this.setStateSafe({\n      carouselIndex,\n      carouselOffsetLeft\n    });\n  }\n\n  render() {\n\n    const valueProps = {\n      lineHeight:1,\n      fontSize:[4,5],\n      fontWeight:[3,4],\n      color:'statValue'\n    };\n\n    const unitProps = {\n      ml:2,\n      lineHeight:1,\n      fontWeight:[2,3],\n      color:'statValue',\n      fontSize:[3,'23px'],\n    };\n\n    const networkId = this.functionsUtil.getRequiredNetworkId();\n    const idleTokenAvailableNetworks = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','availableNetworks']);\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']) && idleTokenAvailableNetworks.includes(networkId);\n    const refreshIdleSpeedConfig = this.functionsUtil.getGlobalConfig(['contract','methods','refreshIdleSpeed']);\n    const refreshIdleSpeedEnabled = refreshIdleSpeedConfig.enabled && refreshIdleSpeedConfig.availableNetworks.includes(networkId);\n\n    const apyLong = this.functionsUtil.getGlobalConfig(['messages','apyLong']);\n\n    if (!this.props.availableStrategies){\n      return (\n        <FlexLoader\n          textProps={{\n            textSize:4,\n            fontWeight:2\n          }}\n          loaderProps={{\n            mb:3,\n            size:'40px'\n          }}\n          flexProps={{\n            minHeight:'50vh',\n            flexDirection:'column'\n          }}\n          text={'Loading assets...'}\n        />\n      );\n    }\n\n    const statsTokens = this.functionsUtil.getGlobalConfig(['stats','tokens']);\n\n    if (!this.props.selectedToken){\n      const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n      const enabledTokens = [];\n      const statsProtocols = this.functionsUtil.getGlobalConfig(['stats','protocols']);\n\n      Object.keys(statsTokens).forEach(token => {\n        const tokenInfo = statsTokens[token];\n        if (tokenInfo.enabled){\n          enabledTokens.push(token);\n        }\n      });\n      return (\n        <Flex\n          mb={3}\n          width={1}\n          flexDirection={'column'}\n        >\n          <AssetsUnderManagement\n            {...this.props}\n            loaderAlign={'flex-end'}\n          />\n          {\n            Object.keys(strategies).map(strategy => {\n              const strategyInfo = strategies[strategy];\n              const availableTokens = this.props.availableStrategies[strategy];\n\n              if (!availableTokens || !Object.keys(availableTokens).length){\n                return false;\n              }\n              \n              // Get available protocols name\n              const availableProtocolsKeys = [];\n              Object.keys(availableTokens).forEach( token => {\n                availableTokens[token].protocols.forEach( protocolInfo => {\n                  if (availableProtocolsKeys.indexOf(protocolInfo.name)<0){\n                    availableProtocolsKeys.push(protocolInfo.name);\n                  }\n                });\n              });\n\n              const availableProtocols = availableProtocolsKeys.map( protocolName => {\n                return statsProtocols[protocolName];\n              },{});\n\n              return (\n                <Box\n                  mb={2}\n                  width={1}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                  key={`strategy-container-${strategy}`}\n                >\n                  <Title\n                    mt={3}\n                    mb={[3,4]}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'baseline'}\n                      justifyContent={'center'}\n                    >\n                      {strategyInfo.title}\n                      {\n                        strategyInfo.titlePostfix &&\n                          <Text\n                            ml={2}\n                            fontWeight={3}\n                            fontSize={[2,4]}\n                            color={'dark-gray'}\n                          >\n                            {strategyInfo.titlePostfix}\n                          </Text>\n                      }\n                    </Flex>\n                  </Title>\n                  <AssetsList\n                    enabledTokens={enabledTokens}\n                    handleClick={(props) => this.selectToken(strategy,props.token)}\n                    cols={[\n                      {\n                        title:'CURRENCY',\n                        props:{\n                          width:[0.26,0.15]\n                        },\n                        fields:[\n                          {\n                            name:'icon',\n                            props:{\n                              mr:2,\n                              height:['1.4em','2.3em']\n                            }\n                          },\n                          {\n                            name:'tokenName'\n                          }\n                        ]\n                      },\n                      {\n                        title:'POOL',\n                        props:{\n                          width:[0.22,0.15],\n                        },\n                        fields:[\n                          {\n                            name:'allocationChart',\n                            mobile:false,\n                            parentProps:{\n                              width:0.3\n                            },\n                            style:{\n                              overflow:'visible'\n                            },\n                            showLoader:false,\n                          },\n                          {\n                            name:'pool',\n                            props:{\n                              ml:1\n                            },\n                            parentProps:{\n                              width:[1,0.7]\n                            }\n                          }\n                        ]\n                      },\n                      {\n                        title:'APY',\n                        desc:apyLong,\n                        props:{\n                          width: [0.29,0.15],\n                        },\n                        parentProps:{\n                          flexDirection:'column',\n                          alignItems:'flex-start',\n                        },\n                        fields:[\n                          {\n                            name:'apy',\n                            showTooltip:true\n                          },\n                          {\n                            name:'idleDistribution',\n                            showLoader:false,\n                            props:{\n                              decimals:this.props.isMobile ? 1 : 2,\n                              fontSize:this.props.isMobile ? '9px' : 0\n                            }\n                          },\n                        ]\n                      },\n                      {\n                        title:'FARMING',\n                        desc:this.functionsUtil.getGlobalConfig(['messages','yieldFarming']),\n                        mobile:false,\n                        props:{\n                          width:[0.27,0.14],\n                        },\n                        fields:[\n                          {\n                            name:'govTokens'\n                          }\n                        ]\n                      },\n                      {\n                        title:'APR LAST WEEK',\n                        mobile:false,\n                        props:{\n                          width: 0.25,\n                        },\n                        parentProps:{\n                          width:1,\n                          pr:[2,4]\n                        },\n                        fields:[\n                          {\n                            name:'aprChart',\n                            style:{\n                              overflow:'visible',\n                            },\n                          }\n                        ]\n                      },\n                      {\n                        title:'',\n                        props:{\n                          width:[0.23,0.16],\n                        },\n                        parentProps:{\n                          width:1\n                        },\n                        fields:[\n                          {\n                            name:'button',\n                            label:this.props.isMobile ? 'View' : 'View stats',\n                            props:{\n                              width:1,\n                              fontSize:3,\n                              fontWeight:3,\n                              height:'45px',\n                              borderRadius:4,\n                              boxShadow:null,\n                              mainColor:'redeem',\n                              size: this.props.isMobile ? 'small' : 'medium',\n                              handleClick:(props) => this.selectToken(strategy,props.token)\n                            }\n                          }\n                        ]\n                      }\n                    ]}\n                    {...this.props}\n                    selectedStrategy={strategy}\n                    availableTokens={availableTokens}\n                  />\n                  {\n                    !this.props.isMobile &&\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'flex-end'}\n                      >\n                        {\n                          availableProtocols.filter( p => p.legend ).map( (p,index) => (\n                            <Flex\n                              mr={3}\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              key={`legend_${index}`}\n                            >\n                              <Box\n                                mr={1}\n                                width={'10px'}\n                                height={'10px'}\n                                borderRadius={'50%'}\n                                backgroundColor={`rgb(${p.color.rgb.join(',')})`}\n                              >\n                              </Box>\n                              <Text.span\n                                fontSize={1}\n                                color={'cellText'}\n                              >\n                                {p.label}\n                              </Text.span>\n                            </Flex>\n                          ))\n                        }\n                      </Flex>\n                  }\n                </Box>\n              );\n            })\n          }\n          {\n            idleTokenEnabled && refreshIdleSpeedEnabled && !this.state.showRefreshIdleSpeed ? (\n              <Flex\n                mb={4}\n                width={1}\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <Link\n                  hoverColor={'primary'}\n                  onClick={this.showRefreshIdleSpeed.bind(this)}\n                >\n                  Refresh Idle Speed\n                </Link>\n              </Flex>\n            ) : idleTokenEnabled && refreshIdleSpeedEnabled && this.state.showRefreshIdleSpeed &&\n              <DashboardCard\n                cardProps={{\n                  p:2,\n                  mb:4,\n                  width:1,\n                  mt:[2,3],\n                }}\n                isActive={true}\n                isInteractive={false}\n              >\n                <Flex\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                  justifyContent={'center'}\n                >\n                  <Text\n                    fontWeight={500}\n                    color={'flashColor'}\n                    textAlign={'center'}\n                    fontSize={[1,'15px']}\n                  >\n                    By executing this transaction you can adjust the IDLE distribution speed among the pools.\n                  </Text>\n                  <ExecuteTransaction\n                    action={'Refresh'}\n                    Component={Button}\n                    parentProps={{\n                      mt:1\n                    }}\n                    componentProps={{\n                      size:'small',\n                      mainColor:'blue',\n                      value:'REFRESH IDLE SPEED'\n                    }}\n                    params={[]}\n                    contractName={'IdleController'}\n                    methodName={'refreshIdleSpeeds'}\n                    {...this.props}\n                  >\n                    <Flex\n                      flexDirection={'row'}\n                      alignItems={'center'}\n                      justifyContent={'center'}\n                    >\n                      <Icon\n                        mr={1}\n                        name={'Done'}\n                        size={'1.4em'}\n                        color={this.props.theme.colors.transactions.status.completed}\n                      />\n                      <Text\n                        fontWeight={500}\n                        fontSize={'15px'}\n                        color={'copyColor'}\n                        textAlign={'center'}\n                      >\n                        Idle Speed Refreshed\n                      </Text>\n                    </Flex>\n                  </ExecuteTransaction>\n                </Flex>\n              </DashboardCard>\n          }\n        </Flex>\n      );\n    } else {\n\n      const tokenConfig = statsTokens[this.props.selectedToken];\n\n      const versionsOptions = Object.keys(globalConfigs.stats.versions).filter( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return versionInfo.enabledTokens.includes(this.props.selectedToken) && versionInfo.enabledStrategies.includes(this.props.selectedStrategy);\n      }).map( version => {\n        const versionInfo = this.getVersionInfo(version);\n        return {\n          value:version,\n          label:versionInfo.label\n        }\n      });\n\n      // const disabledCharts = tokenConfig.disabledCharts || [];\n\n      const versionInfo = this.getVersionInfo(this.state.idleVersion);\n\n      let performanceTooltip = null;\n      if (this.state.idleVersion && versionInfo){\n        const showPerformanceTooltip = this.functionsUtil.getGlobalConfig(['stats','versions',this.state.idleVersion,'showPerformanceTooltip']);\n        performanceTooltip = showPerformanceTooltip ? this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'performanceTooltip']) : null;\n      }\n\n      const versionDefaultValue = versionsOptions.find( v => (v.value === this.state.idleVersion) );\n\n      return (\n        <Flex\n          p={0}\n          width={1}\n          flexDirection={'column'}\n        >\n          {\n          /*\n          }\n          <Flex position={['absolute','relative']} left={0} px={[3,0]} zIndex={10} width={1} flexDirection={'row'} mb={[0,3]}>\n            <Flex alignItems={'center'} width={[2/3,1/2]}>\n              <RouterLink to=\"/\">\n                <Image src=\"images/logo-gradient.svg\"\n                  height={['35px','48px']}\n                  position={'relative'} />\n              </RouterLink>\n              <Heading.h3 color={'dark-gray'} textAlign={'left'} fontWeight={3} lineHeight={'initial'} fontSize={[4,5]} ml={[1,2]}>\n                <Text.span fontSize={'80%'}>|</Text.span> Stats\n              </Heading.h3>\n            </Flex>\n            <Flex flexDirection={'row'} width={[1/3,1/2]} justifyContent={'flex-end'} alignItems={'center'}>\n              {\n                this.state.buttonGroups && \n                  this.props.isMobile ? (\n                    <ButtonGroup\n                      isMobile={this.props.isMobile}\n                      components={ this.state.buttonGroups.reduce((components,array) => components.concat(array),[]) }\n                      theme={'light'}\n                    />\n                  ) :\n                  this.state.buttonGroups.map((buttonGroup,i) => (\n                    <ButtonGroup\n                      key={`buttonGroup_${i}`}\n                      isMobile={this.props.isMobile}\n                      components={buttonGroup}\n                      theme={'light'}\n                    />\n                  ))\n              }\n            </Flex>\n          </Flex>\n          */\n          }\n          <Box\n            mb={[3,4]}\n          >\n            <Flex\n              flexDirection={['column','row']}\n            >\n              <Flex\n                width={[1,0.4]}\n              >\n                <Breadcrumb\n                  {...this.props}\n                  showPathMobile={true}\n                  text={'ASSETS OVERVIEW'}\n                  isMobile={this.props.isMobile}\n                  handleClick={ e => this.props.goToSection('stats') }\n                  path={[this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])]}\n                />\n              </Flex>\n              <Flex\n                mt={[3,0]}\n                width={[1,0.6]}\n                flexDirection={['column','row']}\n                justifyContent={['center','space-between']}\n              >\n                <Flex\n                  width={[1,0.26]}\n                  flexDirection={'column'}\n                >\n                  <GenericSelector\n                    innerProps={{\n                      p:1,\n                      height:['100%','46px'],\n                    }}\n                    name={'idle-version'}\n                    options={versionsOptions}\n                    defaultValue={versionDefaultValue}\n                    onChange={ v => this.setIdleVersion(v) }\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.3]}\n                  flexDirection={'column'}\n                >\n                  <AssetSelector\n                    innerProps={{\n                      p:1\n                    }}\n                    {...this.props}\n                  />\n                </Flex>\n                <Flex\n                  mt={[3,0]}\n                  width={[1,0.39]}\n                  flexDirection={'column'}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:1,\n                      display:'flex',\n                      alignItems:'center',\n                      height:['46px','100%'],\n                      justifyContent:'center'\n                    }}\n                    isInteractive={true}\n                    handleClick={ e => this.setDateRangeModal(true) }\n                  >\n                    <Text\n                      fontWeight={3}\n                      color={'copyColor'}\n                    >\n                    {\n                      this.state.quickSelection\n                      ?\n                        this.quickSelections[this.state.quickSelection].label\n                      : this.state.startTimestampObj && this.state.endTimestampObj &&\n                        `${this.state.startTimestampObj.format('DD/MM/YY')} - ${this.state.endTimestampObj.format('DD/MM/YY')}`\n                    }\n                    </Text>\n                  </DashboardCard>\n                </Flex>\n              </Flex>\n            </Flex>\n          </Box>\n          {\n            !tokenConfig.enabled ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'DoNotDisturb'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Stats for {this.props.selectedToken} are not available!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : this.state.idleVersion && this.functionsUtil.strToMoment(versionInfo.startTimestamp).isAfter(Date.now()) ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'AccessTime'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Idle Stats {this.state.idleVersion} will be available shortly!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : this.functionsUtil.strToMoment(tokenConfig.startTimestamp).isAfter(Date.now()) ? (\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'row'}\n                justifyContent={'center'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    width:[1,0.5],\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'2.3em'}\n                      color={'cellText'}\n                      name={'AccessTime'}\n                    />\n                    <Text\n                      mt={2}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Stats for {this.props.selectedToken} will be available shortly!\n                    </Text>\n                  </Flex>\n                </DashboardCard>\n              </Flex>\n            ) : (\n              <Box\n                width={1}\n              >\n                <Box\n                  mt={[3,0]}\n                  mb={[3,4]}\n                >\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    justifyContent={'center'}\n                    flexDirection={['column','row']}\n                  >\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Asset Under Management'}\n                        label={ this.state.unlentBalance ? `Unlent funds: ${this.state.unlentBalance} ${this.props.selectedToken}` : this.props.selectedToken }\n                        labelTooltip={ this.state.unlentBalance ? this.functionsUtil.getGlobalConfig(['messages','cheapRedeem']) : null}\n                      >\n                        <SmartNumber\n                          precision={2}\n                          type={'money'}\n                          {...valueProps}\n                          unitProps={unitProps}\n                          number={this.state.aum}\n                          flexProps={{\n                            alignItems:'baseline',\n                            justifyContent:'flex-start'\n                          }}\n                          unit={this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken,'conversionRateField']) ? '$' : null}\n                        />\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Avg APY'}\n                        label={'Annualized'}\n                      >\n                        <Flex\n                          width={1}\n                          alignItems={'center'}\n                          flexDirection={['column','row']}\n                        >\n                          <VariationNumber\n                            direction={'up'}\n                            iconPos={'right'}\n                            iconSize={'1.8em'}\n                            justifyContent={'flex-start'}\n                            width={1}\n                            >\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                              fontSize={[4,5]}\n                            >\n                              {this.state.apr}\n                              <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                            </Text>\n                          </VariationNumber>\n                        </Flex>\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        title={'Overperformance on Compound'}\n                        label={'Annualized'}\n                      >\n                        {\n                          this.state.delta && !isNaN(this.state.delta) ? (\n                            <VariationNumber\n                              direction={'up'}\n                              iconPos={'right'}\n                              iconSize={'1.8em'}\n                              justifyContent={'flex-start'}\n                              >\n                              <Text\n                                lineHeight={1}\n                                fontSize={[4,5]}\n                                fontWeight={[3,4]}\n                                color={'statValue'}\n                              >\n                                {this.state.delta}\n                                <Text.span color={'statValue'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                              </Text>\n                            </VariationNumber>\n                          ) : (\n                            <Text\n                              lineHeight={1}\n                              fontSize={[4,5]}\n                              fontWeight={[3,4]}\n                              color={'statValue'}\n                            >\n                              {this.state.delta}\n                            </Text>\n                          )\n                        }\n                      </StatsCard>\n                    </Flex>\n                    <Flex\n                      mb={[2,0]}\n                      pr={[0,2]}\n                      width={[1,1/4]}\n                      flexDirection={'column'}\n                    >\n                      <StatsCard\n                        label={' '}\n                        title={'Rebalances'}\n                        value={this.state.rebalances.toString()}\n                      />\n                    </Flex>\n                    {\n                    /*\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Current APR</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.currApr}\n                            <Text.span color={'copyColor'} fontWeight={3} fontSize={['90%','70%']}>%</Text.span>\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    <Flex width={[1,1/4]} flexDirection={'column'} px={[0,2]}>\n                      <Card my={[2,2]} py={3} pl={0} pr={'10px'} borderRadius={'10px'} boxShadow={0}>\n                        <Flex alignItems={'center'} justifyContent={'center'} flexDirection={'column'} width={1}>\n                          <Text.span color={'copyColor'} fontWeight={2} fontSize={'90%'}>Days Live</Text.span>\n                          <Text lineHeight={1} mt={1} color={'copyColor'} fontSize={[4,'26px']} fontWeight={3} textAlign={'center'}>\n                            {this.state.days}\n                          </Text>\n                        </Flex>\n                      </Card>\n                    </Flex>\n                    */\n                    }\n                  </Flex>\n                </Box>\n\n                <DashboardCard\n                  title={'Historical Performance'}\n                  description={performanceTooltip}\n                  cardProps={{\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex id='chart-PRICE' width={1} mb={3}>\n                    <StatsChart\n                      height={ 350 }\n                      {...this.state}\n                      parentId={'chart-PRICE'}\n                      theme={this.props.theme}\n                      isMobile={this.props.isMobile}\n                      contracts={this.props.contracts}\n                      themeMode={this.props.themeMode}\n                      apiResults={this.state.apiResults}\n                      idleVersion={this.state.idleVersion}\n                      selectedToken={this.props.selectedToken}\n                      apiResults_unfiltered={this.state.apiResults_unfiltered}\n                      chartMode={this.state.idleVersion === this.state.latestVersion ? 'PRICE_V4' : 'PRICE'}\n                    />\n                  </Flex>\n                </DashboardCard>\n\n                <DashboardCard\n                  cardProps={{\n                    pb:3,\n                    mb:[3,4]\n                  }}\n                >\n                  <Flex\n                    flexDirection={['column','row']}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      this.state.idleVersion === this.state.latestVersion && \n                      <Flex\n                        pt={2}\n                        width={[1,1/3]}\n                        id={'allocation-chart'}\n                        flexDirection={'column'}\n                        alignItems={'flex-start'}\n                        justifyContent={'flex-start'}\n                      >\n                        <AllocationChart\n                          height={310}\n                          {...this.props}\n                          parentId={'allocation-chart'}\n                        />\n                        <Rebalance\n                          {...this.props}\n                        />\n                      </Flex>\n                    }\n                    <Flex\n                      mb={[0,3]}\n                      id={'chart-ALL'}\n                      pl={[0,this.state.idleVersion === this.state.latestVersion ? 0 : 3]}\n                      width={[1, this.state.idleVersion === this.state.latestVersion ? 2/3 : 1]}\n                    >\n                      <Flex alignItems={'flex-start'} justifyContent={'flex-start'} flexDirection={'column'} width={1}>\n                        <Heading.h4\n                          mb={2}\n                          ml={3}\n                          mt={[3,4]}\n                          fontWeight={4}\n                          fontSize={[2,3]}\n                          textAlign={'left'}\n                          color={'dark-gray'}\n                          lineHeight={'initial'}\n                        >\n                          Allocations over time\n                        </Heading.h4>\n                        <StatsChart\n                          height={350}\n                          {...this.state}\n                          chartMode={'ALL'}\n                          parentId={'chart-ALL'}\n                          theme={this.props.theme}\n                          isMobile={this.props.isMobile}\n                          themeMode={this.props.themeMode}\n                          contracts={this.props.contracts}\n                          apiResults={this.state.apiResults}\n                          idleVersion={this.state.idleVersion}\n                          apiResults_unfiltered={this.state.apiResults_unfiltered}\n                        />\n                      </Flex>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n\n                <Flex\n                  position={'relative'}\n                >\n                  <Flex\n                    width={1}\n                    id={'carousel-container'}\n                    justifyContent={'flex-end'}\n                  >\n                    <RoundIconButton\n                      buttonProps={{\n                        mr:3\n                      }}\n                      iconName={'ArrowBack'}\n                      disabled={this.state.carouselIndex === 0}\n                      handleClick={ e => this.handleCarousel('back') }\n                    />\n                    <RoundIconButton\n                      iconName={'ArrowForward'}\n                      handleClick={ e => this.handleCarousel('next') }\n                      disabled={this.state.carouselIndex === this.state.carouselMax}\n                    />\n                  </Flex>\n                  <Flex\n                    mt={5}\n                    height={'400px'}\n                    position={'absolute'}\n                    id={'carousel-cursor'}\n                    width={['444%','200%']}\n                    justifyContent={'flex-start'}\n                    left={this.state.carouselOffsetLeft}\n                    style={{\n                      transition:'left 0.3s ease-in-out'\n                    }}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        id='chart-AUM'\n                      >\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            ml={3}\n                            mt={3}\n                            mb={2}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Asset Under Management\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'AUM'}\n                            parentId={'chart-AUM'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-APR' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            APRs\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'APR'}\n                            parentId={'chart-APR'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                    {\n                      /*\n                      !disabledCharts.includes('score') &&\n                        <DashboardCard\n                          cardProps={{\n                            mr:4,\n                            height:'fit-content',\n                            style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                          }}\n                          title={'Risk Score'}\n                          description={'Idle Risk Score is a weighted average of the underlying protocols risks assessed by DeFi Score'}\n                          titleParentProps={{\n                            ml:16,\n                            mt:16\n                          }}\n                        >\n                          <Flex id='chart-SCORE' width={1}>\n                            <Flex\n                              mb={3}\n                              width={1}\n                              flexDirection={'column'}\n                              alignItems={'flex-start'}\n                              justifyContent={'center'}\n                            >\n                              <StatsChart\n                                height={300}\n                                {...this.state}\n                                chartMode={'SCORE'}\n                                parentId={'chart-SCORE'}\n                                theme={this.props.theme}\n                                isMobile={this.props.isMobile}\n                                themeMode={this.props.themeMode}\n                                contracts={this.props.contracts}\n                                apiResults={this.state.apiResults}\n                                idleVersion={this.state.idleVersion}\n                                apiResults_unfiltered={this.state.apiResults_unfiltered}\n                              />\n                            </Flex>\n                          </Flex>\n                        </DashboardCard>\n                        */\n                    }\n                    <DashboardCard\n                      cardProps={{\n                        mr:4,\n                        height:'fit-content',\n                        style:this.props.isMobile ? {width:'100%'} : {width:'32vw'}\n                      }}\n                    >\n                      <Flex id='chart-VOL' width={1}>\n                        <Flex\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                          alignItems={'flex-start'}\n                          justifyContent={'center'}\n                        >\n                          <Heading.h4\n                            mb={2}\n                            ml={3}\n                            mt={3}\n                            fontWeight={4}\n                            fontSize={[2,3]}\n                            textAlign={'left'}\n                            color={'dark-gray'}\n                            lineHeight={'initial'}\n                          >\n                            Volume\n                          </Heading.h4>\n                          <StatsChart\n                            height={300}\n                            {...this.state}\n                            chartMode={'VOL'}\n                            parentId={'chart-VOL'}\n                            theme={this.props.theme}\n                            isMobile={this.props.isMobile}\n                            themeMode={this.props.themeMode}\n                            contracts={this.props.contracts}\n                            apiResults={this.state.apiResults}\n                            idleVersion={this.state.idleVersion}\n                            apiResults_unfiltered={this.state.apiResults_unfiltered}\n                          />\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                </Flex>\n              </Box>\n            )\n          }\n          <DateRangeModal\n            {...this.props}\n            minDate={this.state.minDate}\n            maxDate={this.state.maxDate}\n            handleSelect={this.setDateRange}\n            quickSelections={this.quickSelections}\n            isOpen={this.state.dateRangeModalOpened}\n            closeModal={e => this.setDateRangeModal(false)}\n            startDate={this.state.startTimestampObj ? this.state.startTimestampObj._d : null}\n            endDate={this.state.endTimestampObj ? this.state.endTimestampObj._d : null}\n          />\n        </Flex>\n      );\n    }\n  }\n}\n\nexport default Stats;","import Title from '../Title/Title';\nimport IconBox from '../IconBox/IconBox';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport { Flex, Icon, Text, Box, Image } from \"rimble-ui\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\n\nclass Utils extends Component {\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    const SubComponent = this.props.selectedSubsection && this.props.selectedSubsection.subComponent ? this.props.selectedSubsection.subComponent : null;\n    const viewOnly = this.props.connectorName === 'custom';\n    const showBreadCrumb = typeof this.props.showBreadCrumb !== 'undefined' ? this.props.showBreadCrumb : true;\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.props.selectedSubsection ? (\n            <Box\n              width={1}\n            >\n              {\n                showBreadCrumb && (\n                  <Flex\n                    width={1}\n                  >\n                    <Breadcrumb\n                      {...this.props}\n                      showPathMobile={true}\n                      isMobile={this.props.isMobile}\n                      path={[this.props.selectedSubsection.label]}\n                      text={this.props.selectedSection.label.toUpperCase()}\n                      handleClick={ e => this.props.goToSection(this.props.selectedSection.route) }\n                    />\n                  </Flex>\n                )\n              }\n              <Flex\n                my={[2,3]}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <Title\n                  mb={2}\n                >\n                  {this.props.selectedSubsection.label}\n                </Title>\n                <Text\n                  textAlign={'center'}\n                  dangerouslySetInnerHTML={{\n                    __html:this.props.selectedSubsection.desc\n                  }}\n                >\n                </Text>\n              </Flex>\n              <SubComponent\n                {...this.props}\n                {...this.props.selectedSubsection.directProps}\n                toolProps={this.props.selectedSubsection.props}\n              />\n            </Box>\n          ) : (\n            <Flex\n              my={[2,3]}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Title\n                mb={3}\n              >\n                Tools\n              </Title>\n              <Flex\n                width={1}\n                style={{\n                  flexWrap:'wrap'\n                }}\n                justifyContent={viewOnly ? 'center' : 'flex-start'}\n              >\n              {\n                viewOnly ? (\n                  <IconBox\n                    cardProps={{\n                      maxWidth:[1,'35em']\n                    }}\n                    icon={'Visibility'}\n                    text={'You are using Idle in \"Read-Only\" mode.<br />Logout and connect with your wallet to interact.'}\n                  />\n                ) : this.props.selectedSection.submenu.map( (tool,toolIndex) => (\n                  <DashboardCard\n                    isInteractive={true}\n                    key={`tool_${toolIndex}`}\n                    cardProps={{\n                      p:[3,4],\n                      mb:[3,3],\n                      mr:[0,'2%'],\n                      style:{\n                        flex: this.props.isMobile ? '1 1 100%' : '0 0 31%'\n                      },\n                      alignItems:'center',\n                      flexDirection:'column',\n                      justifyContent:'center'\n                    }}\n                    handleClick={ e => this.props.goToSection(this.props.selectedSection.route+'/'+tool.route) }\n                  >\n                    <Text\n                      fontSize={[3,4]}\n                      textAlign={'center'}\n                    >\n                      {tool.label}\n                    </Text>\n                    <Flex\n                      justifyContent={'center'}\n                    >\n                      {\n                        tool.image ? (\n                          <Image\n                            my={[0,2]}\n                            height={'2.2em'}\n                            src={tool.image}\n                          />\n                        ) : tool.icon && (\n                          <Icon\n                            my={[0,2]}\n                            size={'3em'}\n                            name={tool.icon}\n                          />\n                        )\n                      }\n                    </Flex>\n                    <Text\n                      fontSize={[2,2]}\n                      textAlign={'center'}\n                      dangerouslySetInnerHTML={{\n                        __html:tool.desc\n                      }}\n                    >\n                    </Text>\n                  </DashboardCard>\n                ) )\n              }\n              </Flex>\n            </Flex>\n          )\n        }\n      </Flex>\n    );\n  }\n}\n\nexport default Utils;\n","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Heading, Text, Tooltip, Icon } from \"rimble-ui\";\nimport PortfolioEquity from '../PortfolioEquity/PortfolioEquity';\n\nclass FundsOverview extends Component {\n\n  state = {\n    // govTokensAprs:null,\n    aggregatedValues:[],\n    govTokensTotalApr:null,\n    govTokensUserBalance:null,\n    govTokensDistribution:null,\n    govTokensTotalBalance:null,\n    govTokensTotalAprTooltip:null,\n    idleTokenUserDistribution:null,\n    govTokensDistributionTooltip:null,\n    govTokensTotalBalanceTooltip:null\n  };\n\n  // Utils\n  functionsUtil = null;\n  idleGovToken = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    this.idleGovToken = this.functionsUtil.getIdleGovToken();\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const isRisk = this.props.selectedStrategy === 'risk';\n\n    const [\n      // govTokensAprs,\n      idleTokenUserDistribution,\n      govTokensUserBalance,\n      apy,\n      depositTimestamp,\n      days\n    ] = await Promise.all([\n      // this.functionsUtil.getGovTokensAprs(this.props.selectedToken,this.props.tokenConfig),\n      this.idleGovToken.getUserDistribution(this.props.account,govTokenAvailableTokens,true),\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,null),\n      this.functionsUtil.loadAssetField('apy',this.props.selectedToken,this.props.tokenConfig,this.props.account,false),\n      this.functionsUtil.loadAssetField('depositTimestamp',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    let avgAPY = await this.functionsUtil.getAvgAPYStats(this.props.tokenConfig.address,isRisk,depositTimestamp);\n\n    if (!avgAPY || this.functionsUtil.BNify(avgAPY).lte(0)){\n      avgAPY = apy;\n    }\n\n    const govTokensTotalBalance = govTokensUserBalance ? Object.values(govTokensUserBalance).reduce( (totBalance,govTokenBalance) => {\n      return totBalance.plus(this.functionsUtil.BNify(govTokenBalance));\n    },this.functionsUtil.BNify(0)) : null;\n\n    const govTokensTotalBalanceTooltip = govTokensUserBalance ? Object.keys(govTokensUserBalance).map( govToken => {\n      const balance = govTokensUserBalance[govToken];\n      if (balance.gt(0)){\n        return `+${balance.toFixed(2)} ${govToken}`;\n      } else {\n        return null;\n      }\n    }).filter(v => (v !== null)) : null;\n\n    // console.log(govTokensTotalBalance,govTokensUserBalance,govTokensTotalBalanceTooltip);\n\n    // const govTokensTotalApr = govTokensAprs ? Object.values(govTokensAprs).reduce( (totApr,govTokenApr) => {\n    //   return totApr.plus(this.functionsUtil.BNify(govTokenApr));\n    // },this.functionsUtil.BNify(0)) : null;\n\n    // const govTokensTotalAprTooltip = govTokensAprs ? Object.keys(govTokensAprs).map( govToken => {\n    //   const apr = govTokensAprs[govToken];\n    //   if (apr.gt(0)){\n    //     return `${govToken}: ${apr.toFixed(2)}%`;\n    //   }\n    //   return null;\n    // }).filter(v => (v !== null)) : null;\n\n    /*\n    const govTokensDistributionTooltip = govTokensUserDistribution ? Object.keys(govTokensUserDistribution).map( govToken => {\n      const speed = govTokensUserDistribution[govToken];\n      if (speed.gt(0)){\n        const distributionFrequency = this.functionsUtil.getGlobalConfig(['govTokens',govToken,'distributionFrequency']);\n        return `+${speed.toFixed(4)} ${govToken}/${distributionFrequency}`;\n      }\n      return null;\n    }).filter(v => (v !== null)) : null;\n    */\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          desc:this.functionsUtil.getGlobalConfig(['messages','apyLong']),\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '0.00%') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    this.setState({\n      // govTokensAprs,\n      aggregatedValues,\n      // govTokensTotalApr,\n      govTokensUserBalance,\n      govTokensTotalBalance,\n      // govTokensTotalAprTooltip,\n      idleTokenUserDistribution,\n      govTokensTotalBalanceTooltip\n    });\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Flex\n                          mt={2}\n                          width={1}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <Text\n                            fontWeight={2}\n                            fontSize={[1,2]}\n                            color={'cellText'}\n                          >\n                            {v.props.title}\n                          </Text>\n                          {\n                            v.props.desc && \n                              <Tooltip\n                                placement={'bottom'}\n                                message={v.props.desc}\n                              >\n                                <Icon\n                                  ml={2}\n                                  name={\"Info\"}\n                                  size={'1em'}\n                                  color={'cellTitle'}\n                                />\n                              </Tooltip>\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquity\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              chartToken={this.props.selectedToken}\n              enabledTokens={[this.props.selectedToken]}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLent',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:this.props.theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPerc',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.govTokensTotalBalanceTooltip && this.state.govTokensTotalBalanceTooltip.length>0 && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      this.state.govTokensTotalBalanceTooltip.map((govTokenBalance,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          mt={govTokenIndex ? 1 : 0}\n                          key={`govToken_${govTokenIndex}`}\n                        >\n                          {govTokenBalance}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                )/* : this.state.govTokensUserBalance && Object.keys(this.state.govTokensUserBalance).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + ${this.state.govTokensTotalBalance.toFixed(4)}\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalBalanceTooltip.join(' / ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Fees\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'feesCounter',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:this.props.theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'apy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:this.props.theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              {\n                this.state.idleTokenUserDistribution && (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      mt={1}\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      {this.state.idleTokenUserDistribution.toFixed(4)} {this.idleGovToken.tokenName}/{this.idleGovToken.tokenConfig.distributionFrequency}\n                    </Text>\n                  </Flex>\n                )\n                /*\n                this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length===1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      Object.keys(this.state.govTokensAprs).map((govToken,govTokenIndex) => (\n                        <Text\n                          fontSize={1}\n                          lineHeight={1}\n                          fontWeight={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                          ml={govTokenIndex ? 2 : 0}\n                          key={`govToken_${govToken}`}\n                        >\n                          {this.state.govTokensAprs[govToken].toFixed(2)}% {govToken}\n                        </Text>\n                      ))\n                    }\n                  </Flex>\n                ) : this.state.govTokensAprs && Object.keys(this.state.govTokensAprs).length>1 ? (\n                  <Flex\n                    width={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'center'}\n                  >\n                    <Text\n                      fontSize={1}\n                      lineHeight={1}\n                      fontWeight={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      + {this.state.govTokensTotalApr.toFixed(2)}%\n                    </Text>\n                    <Tooltip\n                      placement={'top'}\n                      message={this.state.govTokensTotalAprTooltip.join('; ')}\n                    >\n                      <Icon\n                        ml={1}\n                        size={'1em'}\n                        color={'cellTitle'}\n                        name={\"InfoOutline\"}\n                      />\n                    </Tooltip>\n                  </Flex>\n                ) : null\n                */\n              }\n            </Flex>\n            {\n              /*\n              <Flex\n                mb={[2,0]}\n                width={[1,1/5]}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'flex-start'}\n              >\n                <Title\n                  mb={2}\n                  fontSize={[3,4]}\n                  component={Heading.h3}\n                >\n                  Risk Score\n                </Title>\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'score',\n                    props:{\n                      decimals:1,\n                      fontWeight:300,\n                      fontSize:['1.8em','1.9em'],\n                      color:this.props.theme.colors.counter,\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n              */\n            }\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverview;","import React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Icon, Checkbox, Box, Link, Input, Tooltip } from \"rimble-ui\";\n\nclass CurveRedeem extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    tokenConfig:null,\n    unevenAmounts:null,\n    selectedToken:null,\n    availableTokens:null,\n    buttonDisabled:false,\n    showMaxSlippage:false,\n    redeemUnderlying:true,\n    curveTokenConfig:null,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    curveTokensAmounts:null,\n    fastBalanceSelector:null,\n    redeemUnevenAmounts:false,\n    curveRedeemableIdleTokens:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.initToken();\n  }\n\n  showMaxSlippage(){\n    this.setState({\n      showMaxSlippage:true\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  async calculateSlippage(max_slippage=null){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (!inputValue || inputValue.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    let withdrawSlippage = null;\n    let curveTokensAmounts = null;\n    let curveIdleTokensAmounts = null;\n    if (this.state.redeemUnevenAmounts){\n      [\n        curveTokensAmounts,\n        curveIdleTokensAmounts\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokensAmounts(this.props.account,normalizedAmount,true),\n        this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,normalizedAmount)\n      ]);\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false,curveIdleTokensAmounts);\n    } else {\n      withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,false);\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const redeemableBalance = inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.times(100).plus(this.state.maxSlippage || this.functionsUtil.BNify(0)).div(100)));\n      curveTokensAmounts = {};\n      curveTokensAmounts[this.state.selectedToken] = redeemableBalance;\n    }\n\n    if (withdrawSlippage){\n      withdrawSlippage = withdrawSlippage.times(100);\n    }\n\n    this.setState({\n      withdrawSlippage,\n      curveTokensAmounts,\n      curveIdleTokensAmounts\n    });\n\n    // Add max slippage but don't save in state\n    if (withdrawSlippage && max_slippage){\n      withdrawSlippage = withdrawSlippage.plus(max_slippage);\n    }\n\n    return withdrawSlippage;\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.tokenConfig.idle.token !== this.props.tokenConfig.idle.token;\n    if (tokenChanged){\n      await this.initToken();\n    }\n\n    const redeemUnevenAmountsChanged = prevState.redeemUnevenAmounts !== this.state.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    const inputChanged = prevState.inputValue !== this.state.inputValue;\n    const maxSlippageChanged = parseFloat(prevState.maxSlippage) !== parseFloat(this.state.maxSlippage);\n    const tokenConfigChanged = JSON.stringify(prevState.tokenConfig) !== JSON.stringify(this.state.tokenConfig);\n    if (inputChanged || tokenConfigChanged || maxSlippageChanged){\n      this.calculateSlippage();\n    }\n\n    const selectedTokenChanged = prevState.selectedToken !== this.state.selectedToken;\n    if (selectedTokenChanged){\n      this.loadSelectedTokenConfig();\n    }\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    let buttonDisabled = false;\n\n    // if (this.state.redeemUnevenAmounts){\n      buttonDisabled = !amount || amount.gt(this.state.curveTokenBalance);\n    // } else {\n      // buttonDisabled = !amount || amount.gt(this.state.redeemableBalance);\n    // }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    let inputValue = null;\n\n    // if (this.state.redeemUnevenAmounts){\n    inputValue = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n    // } else {\n      // inputValue = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n    // }\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  selectDestinationToken(selectedToken){\n    this.setState({\n      selectedToken\n    });\n  }\n\n  async loadSelectedTokenConfig(){\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const tokenConfig = this.state.availableTokens[this.state.selectedToken];\n    const curveTokenConfig = curveConfig.availableTokens[tokenConfig.idle.token];\n    this.setState({\n      tokenConfig,\n      curveTokenConfig\n    });\n  }\n\n  async initToken(){\n    const [curvePoolContract,curveSwapContract] = await Promise.all([\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract()\n    ]);\n\n    const [\n      curveTokenPrice,\n      curveTokenBalance,\n      curveRedeemableIdleTokens,\n    ] = await Promise.all([\n      this.functionsUtil.getCurveTokenPrice(),\n      this.functionsUtil.getCurveTokenBalance(this.props.account),\n      this.functionsUtil.getCurveRedeemableIdleTokens(this.props.account)\n    ]);\n\n    const unevenAmounts = [];\n    const redeemableBalance = curveTokenBalance ? curveTokenBalance.times(curveTokenPrice) : this.functionsUtil.BNify(0);\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();;\n    const selectedToken = Object.keys(availableTokens)[0];\n\n    this.setState({\n      selectedToken,\n      unevenAmounts,\n      curveTokenPrice,\n      availableTokens,\n      curvePoolContract,\n      curveSwapContract,\n      curveTokenBalance,\n      redeemableBalance,\n      curveRedeemableIdleTokens\n    });\n  }\n\n  async redeem(){\n\n    if (!this.state.curveTokenBalance){\n      return false;\n    }\n\n    const callbackRedeem = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveRedeem`,\n        eventAction: this.props.selectedToken,\n        eventValue: this.state.curveTokenBalance.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackRedeem === 'function' && txSucceeded){\n        this.props.callbackRedeem(tx);\n      }\n    };\n\n    const callbackReceiptRedeem = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.curveSwapContract.name;\n    const withdrawSlippage = await this.calculateSlippage(this.state.maxSlippage);\n    const max_slippage = this.functionsUtil.BNify(this.state.maxSlippage).div(100);\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    // const curveTokenBalance = this.functionsUtil.normalizeTokenAmount(this.state.curveTokenBalance,this.state.curvePoolContract.decimals);\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n    if (this.state.redeemUnevenAmounts){\n      const min_amounts = this.state.redeemUnderlying ? await this.functionsUtil.getCurveTokensAmounts(this.props.account,_amount,false,true) : await this.functionsUtil.getCurveIdleTokensAmounts(this.props.account,_amount,max_slippage);\n      console.log('remove_liquidity',_amount.toString(),min_amounts);\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    } else {\n      const coin_index = this.state.curveTokenConfig.migrationParams.coinIndex;\n      const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n      const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.times(curveTokenPrice).minus(inputValue.times(withdrawSlippage.div(100))),this.state.tokenConfig.decimals);\n      // const min_amount = this.functionsUtil.normalizeTokenAmount(inputValue.minus(inputValue.times(withdrawSlippage.div(100))),this.state.curveTokenConfig.decimals);\n      // let _token_amount = await this.functionsUtil.getCurveTokenAmount(amounts,false);\n      // _token_amount = this.functionsUtil.BNify(_token_amount).isGreaterThan(curveTokenBalance) ? curveTokenBalance : this.functionsUtil.BNify(_token_amount);\n\n      console.log('remove_liquidity_one_coin',_amount, coin_index, min_amount);\n\n      // debugger;\n      this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_one_coin', [_amount, coin_index, min_amount, this.state.redeemUnderlying], null, callbackRedeem, callbackReceiptRedeem);\n    }\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  async cancelTransaction(){\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  getFastBalanceSelector(){\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n\n  render() {\n\n    const showSlippage = !this.state.buttonDisabled && this.state.withdrawSlippage;\n    const curveTokenName = this.functionsUtil.getGlobalConfig(['curve','poolContract','token']);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          {\n            !this.state.curveTokenBalance ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3,\n                  minHeight:'195px',\n                  style:{\n                    display:'flex',\n                    alignItems:'center',\n                    justifyContent:'center'\n                  }\n                }}\n              >\n                <FlexLoader\n                  flexProps={{\n                    flexDirection:'row'\n                  }}\n                  loaderProps={{\n                    size:'30px'\n                  }}\n                  textProps={{\n                    ml:2\n                  }}\n                  text={'Checking Curve Pool...'}\n                />\n              </DashboardCard>\n            ) : this.state.processing.loading ? (\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  mt:3\n                }}\n              >\n                <Flex\n                  flexDirection={'column'}\n                >\n                  <TxProgressBar\n                    web3={this.props.web3}\n                    hash={this.state.processing.txHash}\n                    endMessage={`Finalizing redeem request...`}\n                    cancelTransaction={this.cancelTransaction.bind(this)}\n                    waitText={ this.props.waitText ? this.props.waitText : 'Redeem estimated in'}\n                  />\n                </Flex>\n              </DashboardCard>\n            ) : (\n              <Flex\n                width={1}\n                flexDirection={'column'}\n              >\n                <DashboardCard\n                  cardProps={{\n                    p:3,\n                    mb:2\n                  }}\n                >\n                  <Flex\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                  >\n                    <Icon\n                      size={'1.8em'}\n                      color={'cellText'}\n                      name={'FileUpload'}\n                    />\n                    <Text\n                      mt={1}\n                      fontSize={2}\n                      color={'cellText'}\n                      textAlign={'center'}\n                    >\n                      Withdraw from the Curve Pool in a specific token or in uneven amounts of tokens (with no slippage).\n                    </Text>\n                    <Flex\n                      mt={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                    >\n                      <Checkbox\n                        required={false}\n                        label={`Redeem with no slippage`}\n                        checked={this.state.redeemUnevenAmounts}\n                        onChange={ e => this.toggleUnevenAmounts(e.target.checked) }\n                      />\n                      <Tooltip\n                        placement={'top'}\n                        message={`You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.`}\n                      >\n                        <Icon\n                          size={'1em'}\n                          color={'cellTitle'}\n                          name={\"InfoOutline\"}\n                        />\n                      </Tooltip>\n                    </Flex>\n                  </Flex>\n                </DashboardCard>\n                {\n                  !this.state.redeemUnevenAmounts/* && (!this.props.selectedToken || (this.state.showMaxSlippage && showSlippage))*/ && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      {\n                        this.state.tokenConfig && \n                          <Box\n                            width={1}\n                          >\n                            <Text\n                              mb={1}\n                            >\n                              Select destination token:\n                            </Text>\n                            <AssetSelector\n                              {...this.props}\n                              id={'token-from'}\n                              showBalance={false}\n                              tokenConfig={this.state.tokenConfig}\n                              selectedToken={this.state.selectedToken}\n                              availableTokens={this.state.availableTokens}\n                              onChange={this.selectDestinationToken.bind(this)}\n                            />\n                          </Box>\n                      }\n                    </Box>\n                  )\n                }\n                {\n                  this.state.curveTokensAmounts && !this.state.buttonDisabled && (\n                    <DashboardCard\n                      cardProps={{\n                        mt:1,\n                        mb:2,\n                        py:2,\n                        px:1\n                      }}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                      >\n                        <Text\n                          mt={1}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'center'}\n                        >\n                          You will receive:\n                        </Text>\n                        <Flex\n                          mt={2}\n                          width={1}\n                          boxShadow={0}\n                          style={{\n                            flexWrap:'wrap'\n                          }}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                          >\n                            {\n                              Object.keys(this.state.curveTokensAmounts).map( token => {\n                                const balance = this.state.curveTokensAmounts[token];\n                                return (\n                                  <Flex\n                                    mb={1}\n                                    mx={1}\n                                    width={'auto'}\n                                    flexDirection={'row'}\n                                    key={`tokenBalance_${token}`}\n                                    justifyContent={'flex-start'}\n                                  >\n                                    <AssetField\n                                      token={token}\n                                      tokenConfig={{\n                                        token:token\n                                      }}\n                                      fieldInfo={{\n                                        name:'icon',\n                                        props:{\n                                          mr:1,\n                                          width:['1.4em','1.6em'],\n                                          height:['1.4em','1.6em']\n                                        }\n                                      }}\n                                    />\n                                    <SmartNumber\n                                      ml={1}\n                                      fontSize={[0,1]}\n                                      fontWeight={500}\n                                      maxPrecision={4}\n                                      color={'cellText'}\n                                      number={balance.toString()}\n                                    />\n                                  </Flex>\n                                );\n                            })\n                          }\n                        </Flex>\n                      </Flex>\n                    </DashboardCard>\n                  )\n                }\n                {\n                  this.state.showMaxSlippage && showSlippage && (\n                    <Box\n                      mb={2}\n                      width={1}\n                    >\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Text>\n                          Choose max slippage:\n                        </Text>\n                        <Tooltip\n                          placement={'top'}\n                          message={`Max additional slippage on top of the one shown below`}\n                        >\n                          <Icon\n                            ml={1}\n                            size={'1em'}\n                            color={'cellTitle'}\n                            name={\"InfoOutline\"}\n                          />\n                        </Tooltip>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        {\n                          [0.2,0.5,1,5].map( slippage => (\n                            <FastBalanceSelector\n                              cardProps={{\n                                p:1\n                              }}\n                              textProps={{\n                                fontSize:1\n                              }}\n                              percentage={slippage}\n                              key={`selector_${slippage}`}\n                              onMouseDown={()=>this.setMaxSlippage(slippage)}\n                              isActive={this.state.maxSlippage === parseFloat(slippage)}\n                            />\n                          ))\n                        }\n                      </Flex>\n                    </Box>\n                  )\n                }\n                <Flex\n                  mb={3}\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  <Flex\n                    mb={1}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'flex-end'}\n                  >\n                    {\n                      showSlippage && (\n                        <Flex\n                          width={1}\n                          maxWidth={'40%'}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            textAlign={'right'}\n                            style={{\n                              whiteSpace:'nowrap'\n                            }}\n                            color={ parseFloat(this.state.withdrawSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                          >\n                            {\n                              parseFloat(this.state.withdrawSlippage.toFixed(3)) === 0 ?\n                                'No Slippage'\n                              : `${ this.state.withdrawSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.withdrawSlippage.abs().toFixed(3)}%`\n                            }\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={ this.state.redeemUnevenAmounts ? `You will receive an uneven amounts of ${Object.keys(this.state.availableTokens).join(', ')} proportional to the token availailability in the Curve pool.` : this.state.withdrawSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                          {\n                            !this.state.redeemUnevenAmounts &&\n                              <Link\n                                ml={1}\n                                color={'copyColor'}\n                                hoverColor={'primary'}\n                                onClick={this.showMaxSlippage.bind(this)}\n                              >\n                                change\n                              </Link>\n                          }\n                        </Flex>\n                      )\n                    }\n                    <Flex\n                      width={1}\n                      maxWidth={'60%'}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      justifyContent={'flex-end'}\n                    >\n                      <Link\n                        fontSize={1}\n                        fontWeight={3}\n                        color={'dark-gray'}\n                        textAlign={'right'}\n                        hoverColor={'copyColor'}\n                        onClick={ (e) => this.setFastBalanceSelector(100) }\n                        style={{\n                          maxWidth:'100%',\n                          overflow:'hidden',\n                          whiteSpace:'nowrap',\n                          textOverflow:'ellipsis'\n                        }}\n                      >\n                        {this.state.curveTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {curveTokenName}\n                      </Link>\n                    </Flex>\n                  </Flex>\n                  <Input\n                    min={0}\n                    type={\"number\"}\n                    required={true}\n                    height={'3.4em'}\n                    borderRadius={2}\n                    fontWeight={500}\n                    boxShadow={'none !important'}\n                    placeholder={`Insert amount`}\n                    onChange={this.changeInputValue.bind(this)}\n                    border={`1px solid ${this.props.theme.colors.divider}`}\n                    value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                  />\n                  <Flex\n                    mt={2}\n                    alignItems={'center'}\n                    flexDirection={'row'}\n                    justifyContent={'space-between'}\n                  >\n                    {\n                      [25,50,75,100].map( percentage => (\n                        <FastBalanceSelector\n                          percentage={percentage}\n                          key={`selector_${percentage}`}\n                          onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                          isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                        />\n                      ))\n                    }\n                  </Flex>\n                </Flex>\n                <Flex\n                  justifyContent={'center'}\n                >\n                  <RoundButton\n                    buttonProps={{\n                      mt:2,\n                      width:[1,1/2],\n                      disabled:this.state.buttonDisabled\n                    }}\n                    handleClick={this.redeem.bind(this)}\n                  >\n                    Redeem\n                  </RoundButton>\n                </Flex>\n              </Flex>\n            )\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveRedeem;","import Migrate from '../Migrate/Migrate';\nimport IconBox from '../IconBox/IconBox';\nimport React, { Component } from 'react';\n// import ExtLink from '../ExtLink/ExtLink';\nimport AssetField from '../AssetField/AssetField';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport ConnectBox from '../ConnectBox/ConnectBox';\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport RoundButton from '../RoundButton/RoundButton';\nimport SmartNumber from '../SmartNumber/SmartNumber';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport ShareModal from '../utilities/components/ShareModal';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport TransactionField from '../TransactionField/TransactionField';\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\nimport { Flex, Text, Input, Box, Icon, Link, Checkbox, Tooltip, Image } from \"rimble-ui\";\n\nclass DepositRedeem extends Component {\n\n  state = {\n    txError: {},\n    tokenAPY: '-',\n    inputValue: {},\n    processing: {},\n    curveAPY: null,\n    totalAUM: null,\n    canRedeem: false,\n    maxSlippage: 0.2,\n    canDeposit: false,\n    action: 'deposit',\n    directMint: false,\n    activeModal: null,\n    tokenGovTokens: {},\n    showBuyFlow: false,\n    maxUnlentPerc: null,\n    unlentBalance: null,\n    tokenApproved: false,\n    skipMigration: false,\n    redeemSkipGov: false,\n    showRedeemFlow: false,\n    contractPaused: false,\n    buttonDisabled: false,\n    canRedeemCurve: false,\n    erc20ForwarderTx: null,\n    signedParameters: null,\n    minAmountForMint: null,\n    showMaxSlippage: false,\n    redeemGovTokens: false,\n    canDepositCurve: false,\n    redeemSkipGovTokens: [],\n    fastBalanceSelector: {},\n    actionProxyContract: {},\n    migrationEnabled: false,\n    componentMounted: false,\n    curveTokenBalance: null,\n    agreeSkipGovTokens: false,\n    redeemCurveEnabled: false,\n    depositCurveBalance: null,\n    depositCurveEnabled: true,\n    showAdvancedOptions: false,\n    skipGovTokensGasSave: null,\n    depositCurveSlippage: null,\n    erc20ForwarderContract: {},\n    erc20ForwarderEnabled: false,\n    showETHWrapperEnabled: false,\n    skipGovTokensGasSaveUSD: null,\n    metaTransactionsEnabled: true,\n    skippedGovTokensBalance: null,\n    minAmountForMintReached: false,\n    loadingErc20ForwarderTx: false\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils() {\n    if (this.functionsUtil) {\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount() {\n    this.loadUtils();\n    await this.loadProxyContracts();\n  }\n\n  async componentDidMount() {\n    this.loadTokenInfo();\n  }\n\n  setShowRedeemFlow = (showRedeemFlow) => {\n    this.setState({\n      showRedeemFlow\n    });\n  }\n\n  setShowBuyFlow = (showBuyFlow) => {\n    this.setState({\n      showBuyFlow\n    });\n  }\n\n  toggleShowAdvancedOptions = showAdvancedOptions => {\n    this.setState((prevState) => ({\n      showAdvancedOptions: !prevState.showAdvancedOptions\n    }));\n  }\n\n  toggleSkipMigration = skipMigration => {\n    this.setState({\n      skipMigration\n    });\n  }\n\n  toggleRedeemCurve = redeemCurveEnabled => {\n    this.setState({\n      redeemCurveEnabled\n    });\n  }\n\n  toggleDepositCurve = depositCurveEnabled => {\n    this.setState({\n      depositCurveEnabled\n    });\n  }\n\n  toggleShowETHWrapper = showETHWrapperEnabled => {\n    this.setState({\n      showETHWrapperEnabled\n    });\n  }\n\n  toggleAgreeSkipGovTokens = agreeSkipGovTokens => {\n    this.setState({\n      agreeSkipGovTokens\n    });\n  }\n\n  toggleSkipMint = (directMint) => {\n    this.setState({\n      directMint\n    });\n  }\n\n  toggleRedeemGovTokens = (redeemGovTokens) => {\n    this.setState({\n      redeemGovTokens,\n      redeemSkipGovTokens: [],\n      agreeSkipGovTokens: false,\n      skippedGovTokensBalance: this.functionsUtil.BNify(0),\n      redeemSkipGov: redeemGovTokens ? false : this.state.redeemSkipGov\n    });\n  }\n\n  toggleRedeemSkipGov = (redeemSkipGov) => {\n    this.setState({\n      redeemSkipGov,\n      redeemSkipGovTokens: [],\n      agreeSkipGovTokens: false,\n      skippedGovTokensBalance: this.functionsUtil.BNify(0),\n      redeemGovTokens: redeemSkipGov ? false : this.state.redeemGovTokens\n    });\n  }\n\n  getSkippedGovTokensFlags = async () => {\n    const govTokensIndexes = await this.functionsUtil.getGovTokensIndexes(this.props.account, this.props.tokenConfig);\n    const govTokensFlags = Object.keys(govTokensIndexes).map(token => {\n      return this.state.redeemSkipGovTokens.includes(token);\n    });\n    // console.log('getSkippedGovTokensFlags',govTokensIndexes,govTokensFlags);\n    return govTokensFlags;\n  }\n\n  calculateSkippedGovTokens = async () => {\n    let skippedGovTokensBalance = this.functionsUtil.BNify(0);\n    const DAITokenConfig = this.functionsUtil.getGlobalConfig(['stats', 'tokens', 'DAI']);\n\n    await this.functionsUtil.asyncForEach(this.state.redeemSkipGovTokens, async (govToken) => {\n      const govTokenConfig = this.functionsUtil.getGlobalConfig(['govTokens', govToken]);\n      const govTokenPrice = await this.functionsUtil.getUniswapConversionRate(DAITokenConfig, govTokenConfig);\n      const skippedAmount = this.props.govTokensUserBalances[govToken].times(govTokenPrice);\n      skippedGovTokensBalance = skippedGovTokensBalance.plus(skippedAmount);\n    });\n\n    const _skipGovTokenRedeem = await this.getSkippedGovTokensFlags();\n    const WETHTokenConfig = this.functionsUtil.getGlobalConfig(['stats', 'tokens', 'WETH']);\n\n    const [\n      wethPrice,\n      redeemGasUsage,\n      skipGovRedeemGasUsage\n    ] = await Promise.all([\n      this.functionsUtil.getUniswapConversionRate(DAITokenConfig, WETHTokenConfig),\n      this.functionsUtil.estimateMethodGasUsage(this.props.tokenConfig.idle.token, 'redeemIdleToken', [this.functionsUtil.normalizeTokenAmount(this.props.idleTokenBalance, this.props.tokenConfig.decimals)], this.props.account),\n      this.functionsUtil.estimateMethodGasUsage(this.props.tokenConfig.idle.token, 'redeemIdleTokenSkipGov', [this.functionsUtil.normalizeTokenAmount(this.props.idleTokenBalance, this.props.tokenConfig.decimals), _skipGovTokenRedeem], this.props.account)\n    ]);\n\n    const skipGovTokensGasSave = redeemGasUsage && skipGovRedeemGasUsage ? redeemGasUsage.minus(skipGovRedeemGasUsage) : this.functionsUtil.BNify(0);\n    const skipGovTokensGasSaveUSD = skipGovTokensGasSave ? skipGovTokensGasSave.times(wethPrice) : this.functionsUtil.BNify(0);\n\n    this.setState({\n      skipGovTokensGasSave,\n      skipGovTokensGasSaveUSD,\n      skippedGovTokensBalance\n    });\n    return skippedGovTokensBalance;\n  }\n\n  setRedeemSkipGovTokens = (token, checked) => {\n    this.setState((prevState) => {\n      const redeemSkipGovTokens = Object.assign([], prevState.redeemSkipGovTokens);\n      if (!checked && redeemSkipGovTokens.includes(token)) {\n        redeemSkipGovTokens.splice(redeemSkipGovTokens.indexOf(token), 1);\n      } else if (checked && !redeemSkipGovTokens.includes(token)) {\n        redeemSkipGovTokens.push(token);\n      }\n      return {\n        redeemSkipGovTokens\n      };\n    }, () => {\n      this.calculateSkippedGovTokens();\n    });\n  }\n\n  toggleErc20ForwarderEnabled = (erc20ForwarderEnabled) => {\n    const newState = {\n      erc20ForwarderEnabled\n    };\n\n    this.setState(newState, () => {\n      this.cancelTransaction();\n    });\n  }\n\n  toggleMetaTransactionsEnabled = (metaTransactionsEnabled) => {\n    this.setState({\n      metaTransactionsEnabled\n    });\n  }\n\n  async loadProxyContracts() {\n\n    if (!this.props.contractsInitialized){\n      return false;\n    }\n\n    const actions = ['deposit', 'redeem'];\n    const newState = {\n      actionProxyContract: {},\n      erc20ForwarderContract: {}\n    };\n\n    await this.functionsUtil.asyncForEach(actions, async (action) => {\n      let mintProxyContractInfo = null;\n      const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', action, 'erc20ForwarderEnabled']);\n\n      if (depositErc20ForwarderEnabled) {\n        mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract', 'methods', action, 'erc20ForwarderProxyContract', 'forwarder']);\n\n        await this.props.initContract(mintProxyContractInfo.name, mintProxyContractInfo.address, mintProxyContractInfo.abi);\n\n        // Init contract for erc20 forwarder\n        const erc20ForwarderContractInfo = this.functionsUtil.getGlobalConfig(['contract', 'methods', action, 'erc20ForwarderProxyContract', 'tokens', this.props.selectedToken]);\n        if (erc20ForwarderContractInfo) {\n          mintProxyContractInfo = erc20ForwarderContractInfo;\n          const erc20ForwarderContract = await this.props.initContract(erc20ForwarderContractInfo.name, erc20ForwarderContractInfo.address, erc20ForwarderContractInfo.abi);\n          if (erc20ForwarderContract){\n            newState.erc20ForwarderContract[action] = erc20ForwarderContractInfo;\n            newState.erc20ForwarderContract[action].contract = erc20ForwarderContract.contract;\n          }\n        }\n      }\n\n      if (!mintProxyContractInfo) {\n        mintProxyContractInfo = this.functionsUtil.getGlobalConfig(['contract', 'methods', action, 'proxyContract']);\n      }\n\n      const hasProxyContract = mintProxyContractInfo && mintProxyContractInfo.enabled;\n      newState.actionProxyContract[action] = hasProxyContract ? mintProxyContractInfo : null;\n      if (hasProxyContract) {\n        const proxyContract = await this.props.initContract(mintProxyContractInfo.name, mintProxyContractInfo.address, mintProxyContractInfo.abi);\n        if (proxyContract){\n          newState.actionProxyContract[action].contract = proxyContract.contract;\n          newState.actionProxyContract[action].approved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken, mintProxyContractInfo.address, this.props.account);\n        }\n      }\n    });\n\n    // console.log('loadProxyContracts',newState);\n\n    return await this.setState(newState);\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadAPY() {\n    const tokenAprs = await this.functionsUtil.getTokenAprs(this.props.tokenConfig);\n    if (tokenAprs && tokenAprs.avgApy !== null) {\n      const tokenAPY = this.functionsUtil.BNify(tokenAprs.avgApy).toFixed(2);\n\n      let curveAPY = null;\n      if (this.state.canDepositCurve) {\n        curveAPY = await this.functionsUtil.getCurveAPY();\n        // console.log('curveAPY',curveAPY);\n        if (curveAPY) {\n          curveAPY = curveAPY.plus(tokenAPY);\n        }\n      }\n      this.setState({\n        tokenAPY,\n        curveAPY\n      });\n    }\n  }\n\n  getReferralAddress() {\n    let _referral = this.functionsUtil.getQueryStringParameterByName('_referral');\n    if (!this.functionsUtil.checkAddress(_referral)) {\n      _referral = null;\n    }\n    return _referral;\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n\n    // console.log('componentDidUpdate',this.props.tokenBalance);\n\n    if (this.props.tokenBalance === null) {\n      return false;\n    }\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    const contractsInitialized = prevProps.contractsInitialized !== this.props.contractsInitialized;\n    const erc20ForwarderEnabledChanged = prevState.erc20ForwarderEnabled !== this.state.erc20ForwarderEnabled;\n    const tokenBalanceChanged = prevProps.tokenBalance !== this.props.tokenBalance && this.props.tokenBalance !== null;\n\n    if (accountChanged || tokenChanged || tokenBalanceChanged || erc20ForwarderEnabledChanged || contractsInitialized) {\n      await this.loadProxyContracts();\n      this.loadTokenInfo();\n      return false;\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n\n    if (actionChanged || fastBalanceSelectorChanged) {\n      this.setInputValue();\n    }\n\n    const inputValueChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputValueChanged) {\n      // this.checkMinAmountForMint();\n    }\n\n    const redeemSkipGovChanged = prevState.redeemSkipGov !== this.state.redeemSkipGov;\n    const redeemGovTokensChanged = prevState.redeemGovTokens !== this.state.redeemGovTokens;\n    const agreeSkipGovTokensChanged = prevState.agreeSkipGovTokens !== this.state.agreeSkipGovTokens;\n    const redeemSkipGovTokensChanged = JSON.stringify(prevState.redeemSkipGovTokens) !== JSON.stringify(this.state.redeemSkipGovTokens);\n\n    if (redeemGovTokensChanged || actionChanged || redeemSkipGovTokensChanged || redeemSkipGovChanged || agreeSkipGovTokensChanged) {\n      this.checkButtonDisabled();\n    }\n\n    const depositCurveChanged = prevState.depositCurveEnabled !== this.state.depositCurveEnabled;\n    const metaTransactionsChanged = prevState.metaTransactionsEnabled !== this.state.metaTransactionsEnabled;\n    if (metaTransactionsChanged || depositCurveChanged) {\n      const tokenApproved = await this.checkTokenApproved();\n      this.setState({\n        tokenApproved\n      });\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged) {\n      this.calculateCurveSlippage();\n    }\n  }\n\n  async checkMinAmountForMint() {\n    let showPoolPerc = false;\n    let totalAUM = this.state.totalAUM;\n    let maxUnlentPerc = this.state.maxUnlentPerc;\n    const isRisk = this.props.selectedStrategy === 'risk';\n    const inputValue = this.functionsUtil.BNify(this.state.inputValue[this.state.action]);\n\n    if (inputValue.gt(this.props.tokenBalance)) {\n      return false;\n    }\n\n    const convertedAmount = await this.functionsUtil.convertTokenBalance(inputValue, this.props.selectedToken, this.props.tokenConfig, isRisk);\n    let minAmountForMint = this.functionsUtil.BNify(this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'minAmountForMint']));\n    let minAmountForMintReached = convertedAmount.gte(minAmountForMint);\n\n    // Check token minAmountForMint\n    if (minAmountForMintReached) {\n      if (this.props.tokenConfig.deposit && this.props.tokenConfig.deposit.minAmountForMint && convertedAmount.lt(this.props.tokenConfig.deposit.minAmountForMint)) {\n        minAmountForMintReached = false;\n      } else {\n        [\n          maxUnlentPerc,\n          totalAUM\n        ] = await Promise.all([\n          maxUnlentPerc || this.functionsUtil.genericContractCall(this.props.tokenConfig.idle.token, 'maxUnlentPerc'),\n          totalAUM || this.functionsUtil.loadAssetField('pool', this.props.selectedToken, this.props.tokenConfig, this.props.account)\n        ]);\n\n        if (maxUnlentPerc && totalAUM) {\n          const depositPerc = inputValue.div(totalAUM).times(100);\n          maxUnlentPerc = this.functionsUtil.BNify(maxUnlentPerc);\n          const maxUnlentPercFormatted = maxUnlentPerc.div(1e3).times(2);\n          if (depositPerc.lt(maxUnlentPercFormatted)) {\n            minAmountForMintReached = false;\n          } else if (totalAUM.times(maxUnlentPercFormatted.div(100)).gt(minAmountForMint)) {\n            showPoolPerc = true;\n            minAmountForMint = totalAUM.times(maxUnlentPercFormatted.div(100));\n          }\n        }\n      }\n    }\n\n    this.setState({\n      totalAUM,\n      showPoolPerc,\n      maxUnlentPerc,\n      minAmountForMint,\n      minAmountForMintReached\n    });\n  }\n\n  async calculateCurveSlippage() {\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)) {\n      return false;\n    }\n\n    const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve', 'poolContract']);\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount, curvePoolContractInfo.decimals);\n    const newState = {};\n\n    switch (this.state.action) {\n      case 'deposit':\n        newState.depositCurveBalance = amount;\n        newState.depositCurveSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token, normalizedAmount, true);\n        break;\n      case 'redeem':\n        // newState.redeemBalance = amount;\n        // newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizedAmount,true);\n        break;\n      default:\n        break;\n    }\n    // console.log('calculateCurveSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  checkUseProxyContract = () => {\n    const proxyContract = this.state.actionProxyContract[this.state.action];\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'metaTransactionsEnabled']) && this.state.metaTransactionsEnabled;\n    return ((depositErc20ForwarderEnabled || depositMetaTransactionsEnabled) && proxyContract && this.props.biconomy);\n  }\n\n  approveContract = async (callbackApprove, callbackReceiptApprove) => {\n    if (this.state.depositCurveEnabled) {\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve', 'depositContract']);\n      this.functionsUtil.enableERC20(this.props.selectedToken, curveDepositContract.address, callbackApprove, callbackReceiptApprove);\n    } else {\n      // Check Proxy Contract Approved for Deposit with Biconomy\n      const useProxyContract = this.checkUseProxyContract();\n      if (useProxyContract) {\n        const proxyContract = this.state.actionProxyContract[this.state.action];\n        this.functionsUtil.enableERC20(this.props.selectedToken, proxyContract.address, callbackApprove, callbackReceiptApprove);\n      } else {\n        this.functionsUtil.enableERC20(this.props.selectedToken, this.props.tokenConfig.idle.address, callbackApprove, callbackReceiptApprove);\n      }\n    }\n  }\n\n  checkTokenApproved = async () => {\n    let tokenApproved = false;\n    if (this.state.depositCurveEnabled) {\n      const curveDepositContract = this.functionsUtil.getGlobalConfig(['curve', 'depositContract']);\n      tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken, curveDepositContract.address, this.props.account);\n    } else {\n      // Check Proxy Contract Approved for Deposit with Biconomy\n      const useProxyContract = this.checkUseProxyContract();\n      if (useProxyContract) {\n        // Check for Permit Deposit\n        const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n        if (depositErc20ForwarderEnabled) {\n          const permitEnabled = this.functionsUtil.getGlobalConfig(['permit', this.props.selectedToken]);\n          if (permitEnabled) {\n            return true;\n          }\n        }\n        // Check proxy contract approved\n        const proxyContract = this.state.actionProxyContract[this.state.action];\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken, proxyContract.address, this.props.account);\n        // console.log('tokenApproved 1',this.props.selectedToken, proxyContract.address, this.props.account, tokenApproved);\n      } else {\n        tokenApproved = await this.functionsUtil.checkTokenApproved(this.props.selectedToken, this.props.tokenConfig.idle.address, this.props.account);\n        // console.log('tokenApproved 2',this.props.selectedToken, this.props.tokenConfig.idle.address, this.props.account, tokenApproved);\n      }\n    }\n\n    return tokenApproved;\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = await this.checkTokenApproved();\n\n    if (tokenApproved) {\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve: {\n            txHash: null,\n            loading: false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx, error) => {\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.props.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error) {\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error') {\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      // console.log('callbackApprove',tx,tx.status === 'success');\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve: {\n            txHash: null,\n            loading: false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve: {\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.approveContract(callbackApprove, callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve: {\n          txHash: null,\n          loading: true\n        }\n      }\n    }));\n  }\n\n  loadTokenInfo = async () => {\n\n    if (this.state.componentMounted) {\n      this.setState({\n        componentMounted: false\n      });\n    }\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve', 'availableTokens', this.props.tokenConfig.idle.token]);\n    const curveTokenEnabled = curveConfig.enabled && curveTokenConfig && curveTokenConfig.enabled;\n\n    const [\n      tokenApproved,\n      contractPaused,\n      curveSwapContract,\n      curveDepositContract,\n      unlentBalance,\n      { migrationEnabled },\n      curveTokenBalance,\n    ] = await Promise.all([\n      this.checkTokenApproved(),\n      this.functionsUtil.checkContractPaused(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract(),\n      this.functionsUtil.getUnlentBalance(this.props.tokenConfig),\n      this.functionsUtil.checkMigration(this.props.tokenConfig, this.props.account),\n      curveTokenEnabled ? this.functionsUtil.getCurveTokenBalance(this.props.account) : null\n    ]);\n\n    const canDeposit = this.props.tokenBalance && this.functionsUtil.BNify(this.props.tokenBalance).gt(0);\n    const canRedeem = this.props.idleTokenBalance && this.functionsUtil.BNify(this.props.idleTokenBalance).gt(0);\n\n    const canDepositCurve = curveTokenEnabled && canDeposit;\n    const depositCurveEnabled = canDepositCurve;\n\n    const showETHWrapperEnabled = this.props.selectedToken === 'WETH' && (this.state.showETHWrapperEnabled || !canDeposit);\n\n    const canRedeemCurve = curveTokenEnabled && curveTokenBalance && curveTokenBalance.gt(0);\n    const redeemCurveEnabled = canRedeemCurve;\n\n    const tokenGovTokens = this.functionsUtil.getTokenGovTokens(this.props.tokenConfig);\n\n    const newState = { ...this.state };\n\n    // Check curve deposit enabled\n    if (newState.depositCurveEnabled && !curveTokenEnabled) {\n      newState.depositCurveEnabled = false;\n    }\n\n    newState.canRedeem = canRedeem;\n    newState.canDeposit = canDeposit;\n    newState.unlentBalance = unlentBalance;\n    newState.tokenApproved = tokenApproved;\n    newState.tokenGovTokens = tokenGovTokens;\n    newState.contractPaused = contractPaused;\n    newState.canRedeemCurve = canRedeemCurve;\n    newState.canDepositCurve = canDepositCurve;\n    newState.migrationEnabled = migrationEnabled;\n    newState.curveTokenBalance = curveTokenBalance;\n    newState.curveSwapContract = curveSwapContract;\n    newState.redeemCurveEnabled = redeemCurveEnabled;\n    newState.depositCurveEnabled = depositCurveEnabled;\n    newState.curveDepositContract = curveDepositContract;\n    newState.showETHWrapperEnabled = showETHWrapperEnabled;\n\n    newState.txError = {\n      redeem: false,\n      deposit: false\n    };\n    newState.processing = {\n      redeem: {\n        txHash: null,\n        loading: false\n      },\n      deposit: {\n        txHash: null,\n        loading: false\n      },\n      approve: {\n        txHash: null,\n        loading: false\n      },\n      boost: {\n        txHash: null,\n        loading: false\n      }\n    };\n    newState.inputValue = {\n      boost: null,\n      redeem: null,\n      deposit: null\n    };\n    newState.fastBalanceSelector = {\n      boost: null,\n      redeem: null,\n      deposit: null\n    };\n\n    newState.componentMounted = true;\n\n    this.setState(newState, () => {\n      this.checkAction();\n      this.loadAPY();\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      erc20ForwarderTx: null,\n      loadingErc20ForwarderTx: false,\n      processing: {\n        ...prevState.processing,\n        approve: {\n          txHash: null,\n          loading: false\n        },\n        [this.state.action]: {\n          txHash: null,\n          loading: false\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const redeemGovTokens = this.state.redeemGovTokens;\n    const selectedPercentage = this.getFastBalanceSelector();\n    const inputValue = this.state.inputValue[this.state.action];\n    const redeemSkipGov = this.state.redeemSkipGov && this.state.redeemSkipGovTokens.length > 0 && this.state.agreeSkipGovTokens;\n\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'erc20ForwarderEnabled']) && this.state.erc20ForwarderEnabled;\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'metaTransactionsEnabled']) && this.state.metaTransactionsEnabled;\n\n    let loading = true;\n\n    switch (this.state.action) {\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)) {\n          return false;\n        }\n\n        if (!this.state.tokenApproved) {\n          return this.approveToken();\n        }\n\n        if (localStorage) {\n          this.functionsUtil.setLocalStorage('redirectToFundsAfterLogged', 0);\n        }\n\n        this.setState({\n          lendingProcessing: this.props.account,\n          lendAmount: '',\n          genericError: '',\n        });\n\n        const callbackDeposit = (tx, error) => {\n\n          if (!tx && error) {\n            tx = {\n              status: 'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.props.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error) {\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error') {\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]: {\n                txHash: null,\n                loading: false\n              }\n            }\n          }));\n\n          if (txSucceeded) {\n            this.setState((prevState) => ({\n              activeModal: 'share',\n              inputValue: {\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if ((this.state.metaTransactionsEnabled || this.state.erc20ForwarderEnabled) && txError) {\n            this.setState({\n              erc20ForwarderTx: null,\n              loadingErc20ForwarderTx: false,\n              txError: {\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          // console.log('callbackReceiptDeposit',tx);\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]: {\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n        const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve', 'availableTokens', this.props.tokenConfig.idle.token, 'enabled']);\n\n        // Curve Deposit\n        if (curveTokenEnabled && this.state.depositCurveEnabled) {\n\n          const curvePoolContractInfo = this.functionsUtil.getGlobalConfig(['curve', 'poolContract']);\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue, curvePoolContractInfo.decimals);\n\n          const amounts = await this.functionsUtil.getCurveAmounts(this.props.tokenConfig.idle.token, tokensToDeposit);\n          let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n          if (this.state.maxSlippage) {\n            minMintAmount = this.functionsUtil.BNify(minMintAmount);\n            minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n            minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n          }\n\n          const depositParams = [amounts, minMintAmount];\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, callbackDeposit, callbackReceiptDeposit);\n          // Normal Deposit\n        } else {\n          const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue, this.props.tokenConfig.decimals);\n\n          // const gasLimitDeposit = this.functionsUtil.BNify(1000000);\n          let depositParams = [];\n\n          // Use Proxy Contract if enabled\n          const useProxyContract = this.checkUseProxyContract();\n          if (useProxyContract) {\n            const mintProxyContractInfo = this.state.actionProxyContract[this.state.action];\n            const mintProxyContract = mintProxyContractInfo.contract;\n\n            // Use Meta-Transactions\n            if (depositMetaTransactionsEnabled) {\n              depositParams = [tokensToDeposit, this.props.tokenConfig.idle.address];\n              const functionCall = mintProxyContract.methods[mintProxyContractInfo.function](...depositParams);\n              const functionSignature = functionCall.encodeABI();\n              // console.log('mintProxyContract',mintProxyContractInfo.function,depositParams);\n              // if (this.state.metaTransactionsEnabled){\n              contractSendResult = await this.functionsUtil.sendBiconomyTxWithPersonalSign(mintProxyContractInfo.name, functionSignature, callbackDeposit, callbackReceiptDeposit);\n              // } else {\n              //   contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n              // }\n              // Use Erc20 Forwarder\n            } else if (depositErc20ForwarderEnabled) {\n\n              // Check if the deposit method require the nonce\n              const methodAbi = mintProxyContractInfo.contract._jsonInterface.find(f => f.name === mintProxyContractInfo.function);\n              const useNonce = methodAbi ? methodAbi.inputs.find(i => i.name === 'nonce') : true;\n\n              // Build ERC20 Forwarder Tx\n              if (!this.state.erc20ForwarderTx) {\n                this.setState({\n                  txError: {\n                    [this.state.action]: false\n                  },\n                  loadingErc20ForwarderTx: true\n                }, async () => {\n                  const erc20ForwarderContract = this.state.erc20ForwarderContract[this.state.action];\n                  const signedParameters = await this.functionsUtil.signPermit(this.props.selectedToken, this.props.account, erc20ForwarderContract.name, 0, tokensToDeposit);\n\n                  // console.log('signedParameters_1',signedParameters);\n\n                  if (signedParameters) {\n\n                    const { expiry, nonce, r, s, v } = signedParameters;\n\n                    if (useNonce) {\n                      depositParams = [tokensToDeposit, parseInt(nonce), expiry, v, r, s];\n                    } else {\n                      depositParams = [tokensToDeposit, expiry, v, r, s];\n                    }\n\n                    if (mintProxyContractInfo.function === 'foo') {\n                      depositParams = [];\n                    }\n\n                    // console.log('permitAndDeposit',mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams);\n\n                    // contractSendResult = await this.functionsUtil.contractMethodSendWrapper(mintProxyContractInfo.name, mintProxyContractInfo.function, depositParams, callbackDeposit, callbackReceiptDeposit);\n\n                    const permitType = erc20ForwarderContract.permitType;\n                    const functionCall = erc20ForwarderContract.contract.methods[erc20ForwarderContract.function](...depositParams);\n                    const functionSignature = functionCall.encodeABI();\n\n                    // console.log('functionSignature',permitType, erc20ForwarderContract.function, depositParams);\n\n                    let gasLimit = null;\n                    try {\n                      gasLimit = await functionCall.estimateGas({ from: this.props.account }); // 5000000;\n                      if (gasLimit) {\n                        gasLimit = this.functionsUtil.BNify(gasLimit).times(1.2);\n                      } else {\n                        gasLimit = this.functionsUtil.BNify(1000000);\n                      }\n                    } catch (error) {\n                      // console.log('Gas Estimate - Error: ',error);\n                    }\n\n                    if (!gasLimit) {\n                      gasLimit = this.functionsUtil.BNify(1000000);\n                    }\n\n                    // console.log('gasEstimate',mintProxyContractInfo.name, depositParams, parseFloat(gasLimit));\n\n                    // debugger;\n\n                    const erc20ForwarderTx = await this.functionsUtil.buildBiconomyErc20ForwarderTx(erc20ForwarderContract.name, this.props.tokenConfig.address, permitType, functionSignature, gasLimit);\n                    // console.log('erc20ForwarderTx',erc20ForwarderTx);\n                    return this.setState({\n                      erc20ForwarderTx,\n                      loadingErc20ForwarderTx: false\n                    });\n                  } else {\n                    return this.setState((prevState) => ({\n                      processing: {\n                        ...prevState.processing,\n                        [this.state.action]: {\n                          txHash: null,\n                          loading: false\n                        }\n                      },\n                      signedParameters: null,\n                      erc20ForwarderTx: null,\n                      loadingErc20ForwarderTx: false\n                    }));\n                  }\n                });\n                // Send ERC20 Forwarder Tx\n              } else {\n                this.setState({\n                  txError: {\n                    [this.state.action]: false\n                  },\n                  loadingErc20ForwarderTx: true\n                }, async () => {\n                  const metaInfo = {};\n                  const permitOptions = {};\n                  const erc20ForwarderContract = this.state.erc20ForwarderContract[this.state.action];\n                  const erc20ForwarderBaseContract = this.functionsUtil.getGlobalConfig(['contract', 'methods', this.state.action, 'erc20ForwarderProxyContract', 'forwarder']);\n\n                  const permitValue = `${tokensToDeposit}00`;\n                  const incrementNonce = 1; // useNonce ? 1 : 0;\n                  const signedParameters = await this.functionsUtil.signPermit(this.props.selectedToken, this.props.account, erc20ForwarderBaseContract.name, incrementNonce, permitValue);\n\n                  // console.log('signedParameters_2',signedParameters);\n\n                  if (signedParameters) {\n\n                    this.setState({\n                      signedParameters\n                    });\n\n                    const permitConfig = this.functionsUtil.getGlobalConfig(['permit', this.props.selectedToken]);\n                    const setValue = permitConfig.type.find(t => t.name === 'value');\n\n                    const { expiry, nonce, r, s, v } = signedParameters;\n                    permitOptions.v = v;\n                    permitOptions.r = r;\n                    permitOptions.s = s;\n                    permitOptions.allowed = true;\n                    permitOptions.expiry = parseInt(expiry);\n                    permitOptions.holder = this.props.account;\n                    permitOptions.value = setValue ? permitValue : 0;\n                    permitOptions.nonce = parseInt(nonce.toString());\n                    permitOptions.spender = erc20ForwarderBaseContract.address;\n\n                    metaInfo.permitData = permitOptions;\n                    metaInfo.permitType = erc20ForwarderContract.permitType;\n\n                    // console.log('sendBiconomyTxWithErc20Forwarder',permitOptions,metaInfo);\n\n                    await this.functionsUtil.asyncTimeout(200);\n\n                    contractSendResult = await this.functionsUtil.sendBiconomyTxWithErc20Forwarder(this.state.erc20ForwarderTx.request, metaInfo, callbackDeposit, callbackReceiptDeposit);\n\n                    this.setState({\n                      erc20ForwarderTx: null,\n                      loadingErc20ForwarderTx: false\n                    });\n                  } else {\n                    return this.setState((prevState) => ({\n                      processing: {\n                        ...prevState.processing,\n                        [this.state.action]: {\n                          txHash: null,\n                          loading: false\n                        }\n                      },\n                      signedParameters: null,\n                      erc20ForwarderTx: null,\n                      loadingErc20ForwarderTx: false\n                    }));\n                  }\n                });\n              }\n            }\n            // Use main contract if no proxy contract exists\n          } else {\n            /*\n            let _skipMint = !this.state.directMint && this.functionsUtil.getGlobalConfig(['contract','methods','deposit','skipMint']);\n            _skipMint = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : _skipMint;\n\n            // Check if deposited amount is greated that general lower limit for direct mint\n            if (_skipMint && this.state.minAmountForMintReached){\n              _skipMint = false;\n            }\n            */\n            // Always skip mint\n            let _skipMint = true;\n\n            const _referral = this.getReferralAddress() || '0x0000000000000000000000000000000000000000';\n            depositParams = [tokensToDeposit, _skipMint, _referral];\n            // console.log('depositParams',depositParams);\n            contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'mintIdleToken', depositParams, callbackDeposit, callbackReceiptDeposit);\n          }\n        }\n        break;\n      case 'redeem':\n\n        if (redeemGovTokens) {\n          const callbackRedeem = (tx, error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_gov`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: 0\n            };\n\n            if (error) {\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error') {\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]: {\n                  txHash: null,\n                  loading: false\n                }\n              }\n            }));\n\n            if (txSucceeded) {\n              this.setState((prevState) => ({\n                inputValue: {\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]: {\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, 'redeemIdleToken', [0], callbackRedeem, callbackReceiptRedeem);\n\n        } else {\n\n          if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)) {\n            return false;\n          }\n\n          const txData = {\n            value: this.functionsUtil.BNify(inputValue)\n          };\n\n          let idleTokenToRedeem = null;\n          if (selectedPercentage) {\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage);\n          } else {\n            const idleTokenPriceWithFee = await this.functionsUtil.getIdleTokenPriceWithFee(this.props.tokenConfig, this.props.account)\n            idleTokenToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue, this.props.tokenConfig.decimals)).div(idleTokenPriceWithFee);\n          }\n\n          // Check if idleTokens to redeem > idleToken balance\n          if (idleTokenToRedeem.gt(this.functionsUtil.BNify(this.props.idleTokenBalance))) {\n            idleTokenToRedeem = this.functionsUtil.BNify(this.props.idleTokenBalance);\n          }\n\n          // Normalize number\n          idleTokenToRedeem = this.functionsUtil.normalizeTokenAmount(idleTokenToRedeem, 18);\n\n          if (!idleTokenToRedeem) {\n            return false;\n          }\n\n          const callbackRedeem = (tx, error) => {\n            const txSucceeded = tx.status === 'success';\n\n            // Send Google Analytics event\n            const eventData = {\n              eventCategory: `Redeem_partial`,\n              eventAction: this.props.selectedToken,\n              eventLabel: tx.status,\n              eventValue: parseInt(inputValue)\n            };\n\n            if (error) {\n              eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n            }\n\n            // Send Google Analytics event\n            if (error || eventData.status !== 'error') {\n              this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n            }\n\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]: {\n                  txHash: null,\n                  loading: false\n                }\n              }\n            }));\n\n            if (txSucceeded) {\n              this.setState((prevState) => ({\n                inputValue: {\n                  ...prevState.inputValue,\n                  [this.state.action]: this.functionsUtil.BNify(0)\n                }\n              }));\n            }\n          };\n\n          const callbackReceiptRedeem = (tx) => {\n            const txHash = tx.transactionHash;\n            this.setState((prevState) => ({\n              processing: {\n                ...prevState.processing,\n                [this.state.action]: {\n                  ...prevState.processing[this.state.action],\n                  txHash\n                }\n              }\n            }));\n          };\n\n          let redeemMethod = 'redeemIdleToken';\n          let redeemParams = [idleTokenToRedeem];\n\n          if (redeemSkipGov) {\n            redeemMethod = 'redeemIdleTokenSkipGov';\n            const _skipGovTokenRedeem = await this.getSkippedGovTokensFlags();\n            redeemParams.push(_skipGovTokenRedeem);\n          }\n\n          contractSendResult = await this.functionsUtil.contractMethodSendWrapper(this.props.tokenConfig.idle.token, redeemMethod, redeemParams, callbackRedeem, callbackReceiptRedeem, txData);\n        }\n        break;\n      default: // Reset loading if not handled action\n        loading = false;\n        break;\n    }\n\n    if (contractSendResult !== false || loading !== this.state.processing[this.state.action].loading) {\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]: {\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  showMaxSlippage = () => {\n    this.setState({\n      showMaxSlippage: true\n    });\n  }\n\n  checkAction = () => {\n    let action = this.state.action;\n\n    switch (action) {\n      case 'redeem':\n        if (!this.state.canRedeem) {\n          action = 'deposit';\n        }\n        break;\n      default:\n        break;\n    }\n\n    if (action !== this.state.action) {\n      this.setState({\n        action\n      }, () => {\n        this.checkButtonDisabled();\n      });\n    } else {\n      this.checkButtonDisabled();\n    }\n  }\n\n  checkButtonDisabled = (amount = null) => {\n\n    if (!this.state.action) {\n      return false;\n    }\n\n    if (!amount) {\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action) {\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && (amount.lte(0) || amount.gt(this.props.tokenBalance)));\n        break;\n      case 'redeem':\n        buttonDisabled = !this.state.canRedeemCurve && !this.state.redeemGovTokens && (buttonDisabled || (!amount || amount.lte(0) || amount.gt(this.props.redeemableBalance)));\n\n        if (!buttonDisabled && this.state.redeemSkipGov && this.state.redeemSkipGovTokens.length > 0 && !this.state.agreeSkipGovTokens) {\n          buttonDisabled = true;\n        }\n        // console.log('checkButtonDisabled',this.state.redeemSkipGov,this.state.redeemSkipGovTokens.length,this.state.agreeSkipGovTokens,buttonDisabled);\n        break;\n      default:\n        break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null) {\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch (this.state.action) {\n      case 'deposit':\n        amount = this.props.tokenBalance ? this.functionsUtil.BNify(this.props.tokenBalance).times(selectedPercentage) : null;\n        break;\n      case 'redeem':\n        amount = this.props.redeemableBalance ? this.functionsUtil.BNify(this.props.redeemableBalance).times(selectedPercentage) : null;\n        break;\n      default:\n        break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue: {\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null) {\n      return false;\n    }\n\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action) {\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector: {\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  changeInputValue = async (e) => {\n    if (!this.state.action) {\n      return false;\n    }\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector: {\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue: {\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()) {\n      case 'deposit':\n\n        break;\n      case 'redeem':\n        if (!this.state.canRedeem && !this.state.canRedeemCurve) {\n          action = null;\n        }\n        break;\n      default:\n        action = null;\n        break;\n    }\n\n    if (action !== null) {\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig) {\n      return null;\n    }\n\n\n    const viewOnly = this.props.connectorName === 'custom';\n    const currentNetwork = this.functionsUtil.getCurrentNetwork();\n\n    const isDepositDisabled = this.props.tokenConfig.canDeposit && !this.props.tokenConfig.canDeposit.enabled ? true : false;\n    // const depositDisabledMessage1 = isDepositDisabled && this.props.tokenConfig.canDeposit.disabledMessageDepositKey ? this.functionsUtil.getGlobalConfig(['messages', this.props.tokenConfig.canDeposit.disabledMessageDepositKey]) : null;\n    // const depositDisabledMessage2 = this.state.canRedeem ? this.functionsUtil.getGlobalConfig(['messages', this.props.tokenConfig.canDeposit.disabledMessageRedeemKey]) : \"\";\n    const depositDisabledMessage = isDepositDisabled ? (this.state.canRedeem && this.props.tokenConfig.canDeposit.disabledMessageRedeemKey ? this.functionsUtil.getGlobalConfig(['messages', this.props.tokenConfig.canDeposit.disabledMessageRedeemKey]) : (this.props.tokenConfig.canDeposit.disabledMessageDepositKey ? this.functionsUtil.getGlobalConfig(['messages', this.props.tokenConfig.canDeposit.disabledMessageDepositKey]) : null) ) : null;\n\n    const govTokensDisabled = this.props.tokenConfig.govTokensDisabled;\n    const govTokensEnabled = !govTokensDisabled && this.functionsUtil.getGlobalConfig(['strategies', this.props.selectedStrategy, 'govTokensEnabled']) && Object.keys(this.state.tokenGovTokens).length > 0;\n    const skipMintForDepositEnabled = typeof this.props.tokenConfig.skipMintForDeposit !== 'undefined' ? this.props.tokenConfig.skipMintForDeposit : true;\n    const skipMintCheckboxEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'skipMintCheckboxEnabled']) && skipMintForDepositEnabled;\n\n    const showRedeemFlow = this.state.canRedeem && (!this.state.redeemCurveEnabled || this.state.showRedeemFlow) && this.state.action === 'redeem';\n\n    const redeemGovTokenEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'redeemGovTokens', 'enabled']) && govTokensEnabled && showRedeemFlow;// && this.props.govTokensBalance.gt(0);\n    const redeemGovTokens = redeemGovTokenEnabled && this.state.redeemGovTokens;\n\n    const redeemSkipGovConfig = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'redeemSkipGov']);\n    const redeemSkipGovEnabled = redeemSkipGovConfig && !redeemSkipGovConfig.disabledTokens.includes(this.props.tokenConfig.idle.token) && govTokensEnabled && showRedeemFlow;\n    const redeemSkipGov = redeemSkipGovEnabled && this.state.redeemSkipGov && Object.keys(this.props.govTokensUserBalances).length > 0 && this.props.govTokensBalance.gt(0);\n    const redeemSkipGovNoTokens = redeemSkipGovEnabled && this.state.redeemSkipGov && (!Object.keys(this.props.govTokensUserBalances).length || this.props.govTokensBalance.lte(0));\n\n\n    const showAdvancedRedeemOptions = redeemGovTokenEnabled || redeemSkipGovEnabled;\n    // console.log('showAdvancedRedeemOptions',showAdvancedRedeemOptions,redeemGovTokenEnabled,redeemSkipGovEnabled,govTokensEnabled,showRedeemFlow);\n\n    const depositErc20ForwarderEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'erc20ForwarderEnabled']);\n    const depositMetaTransactionsEnabled = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'metaTransactionsEnabled']);\n    const depositErc20ForwarderEnabledTokens = this.functionsUtil.getGlobalConfig(['contract', 'methods', 'deposit', 'erc20ForwarderProxyContract', 'tokens']);\n\n    // Biconomy Start\n    const metaTransactionsAvailable = depositMetaTransactionsEnabled && this.props.biconomy && this.state.actionProxyContract[this.state.action];\n    const useMetaTx = metaTransactionsAvailable && this.state.metaTransactionsEnabled;\n\n    const erc20ForwarderEnabled = depositErc20ForwarderEnabled && Object.keys(depositErc20ForwarderEnabledTokens).includes(this.props.selectedToken) && depositErc20ForwarderEnabledTokens[this.props.selectedToken].enabled && this.props.biconomy && this.props.erc20ForwarderClient && this.state.actionProxyContract[this.state.action] && !isDepositDisabled;\n\n    // console.log(erc20ForwarderEnabled,depositErc20ForwarderEnabled,this.props.biconomy,this.props.erc20ForwarderClient,this.state.actionProxyContract[this.state.action]);\n    // Biconomy End\n\n    const totalBalance = this.state.action === 'deposit' ? this.props.tokenBalance : this.props.redeemableBalance;\n    const migrateText = this.state.migrationEnabled && this.props.tokenConfig.migration.message !== undefined ? this.props.tokenConfig.migration.message : null;\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const curveTokenEnabled = curveConfig.enabled && this.functionsUtil.getGlobalConfig(['curve', 'availableTokens', this.props.tokenConfig.idle.token, 'enabled']);\n\n    const depositCurve = curveTokenEnabled && this.state.depositCurveEnabled && this.state.action === 'deposit';\n\n    const showDepositOptions = this.state.action === 'deposit' && !this.state.contractPaused && (curveTokenEnabled || this.state.tokenApproved);\n\n    const showDepositCurve = showDepositOptions && curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canDepositCurve && this.state.action === 'deposit';\n    const showRedeemCurve = curveTokenEnabled && this.state.componentMounted && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.canRedeemCurve && this.state.action === 'redeem';\n\n    const showCurveSlippage = depositCurve && this.state.depositCurveSlippage && this.state.depositCurveBalance && !this.state.buttonDisabled;\n\n    const showRebalanceOption = false && this.state.canDeposit && skipMintCheckboxEnabled && this.state.action === 'deposit';\n    const showAdvancedDepositOptions = showDepositCurve || showRebalanceOption;\n\n    const batchDepositInfo = this.functionsUtil.getGlobalConfig(['tools','batchDeposit']);\n\n    const batchDepositEnabled = batchDepositInfo.enabled && typeof batchDepositInfo.props.availableTokens[this.props.tokenConfig.idle.token] !== 'undefined' && batchDepositInfo.availableNetworks.includes(currentNetwork.id);\n    \n    const batchDepositDepositEnabled = batchDepositInfo.depositEnabled;\n\n    const showBatchDeposit = !useMetaTx && batchDepositEnabled && batchDepositDepositEnabled && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    const ethWrapperInfo = this.functionsUtil.getGlobalConfig(['tools', 'ethWrapper']);\n    const ETHWrapperComponent = ethWrapperInfo.subComponent;\n    const showETHWrapper = this.props.selectedToken === 'WETH' && ethWrapperInfo.enabled && ethWrapperInfo.availableNetworks.includes(currentNetwork.id) && !this.props.isMigrationTool && this.state.action === 'deposit';\n\n    const polygonBridgeInfo = this.functionsUtil.getGlobalConfig(['tools','polygonBridge']);\n    // const PolygonBridgeComponent = polygonBridgeInfo.subComponent;\n    const polygonNetworkId = this.functionsUtil.getGlobalConfig(['network','providers','polygon','networkPairs',currentNetwork.id]);\n    // const polygonNetwork = this.functionsUtil.getGlobalConfig(['network','availableNetworks',polygonNetworkId]);\n\n    const canPerformAction = /*!depositCurve && !this.state.redeemCurveEnabled && */((this.state.action === 'deposit' && this.state.canDeposit && !isDepositDisabled) || (this.state.action === 'redeem' && this.state.canRedeem) || redeemGovTokens) && /*(!this.state.showETHWrapperEnabled || this.state.action === 'redeem') && */(!this.state.showPolygonBridgeEnabled || this.state.action === 'redeem');\n    const showActionFlow = !redeemGovTokens && canPerformAction;\n\n    const showBuyFlow = this.state.componentMounted && currentNetwork.provider === 'infura' && (!showDepositCurve || this.state.showBuyFlow) && !this.state.depositCurveEnabled && this.state.tokenApproved && !this.state.contractPaused && (!this.state.migrationEnabled || this.state.skipMigration) && this.state.action === 'deposit' && !isDepositDisabled && !this.state.canDeposit && !this.state.showETHWrapperEnabled;\n    const showPolygonBridge = this.state.componentMounted && this.state.action === 'deposit' && !this.state.canDeposit && currentNetwork.provider === 'polygon';\n    const showPolygonBridgeBanner = !showPolygonBridge && currentNetwork.provider === 'polygon' && polygonNetworkId && polygonBridgeInfo.enabled && this.state.action === 'deposit';\n\n    const buyToken = this.functionsUtil.BNify(this.props.accountBalance).gt(0) ? this.props.selectedToken : this.functionsUtil.getBaseToken();\n\n    const _referral = this.getReferralAddress();\n    const showReferral = _referral && this.state.action === 'deposit' && showActionFlow && !showBuyFlow;\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1, 0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n          <Box\n            width={1}\n          >\n            <Text mb={1}>\n              Select your asset:\n            </Text>\n            <AssetSelector\n              {...this.props}\n            />\n          </Box>\n          {\n            viewOnly ? (\n              <IconBox\n                cardProps={{\n                  mt: 3\n                }}\n                icon={'Visibility'}\n                text={'You are using Idle in \"Read-Only\" mode.<br />Logout and connect with your wallet to interact.'}\n              />\n            ) : (\n                <Migrate\n                  {...this.props}\n                  migrateTextBefore={migrateText}\n                  migrateText={migrateText !== null ? '' : null}\n                  toggleSkipMigration={this.toggleSkipMigration.bind(this)}\n                >\n                  {\n                    !this.props.account ? (\n                      <ConnectBox\n                        {...this.props}\n                      />\n                    ) : this.state.componentMounted ? (\n                      this.state.action && (\n                        <Box\n                          width={1}\n                        >\n                          <Flex\n                            mt={2}\n                            flexDirection={'column'}\n                          >\n                            <Text mb={2}>\n                              Choose the action:\n                          </Text>\n\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'row'}\n                              justifyContent={'space-between'}\n                            >\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  width: 0.48,\n                                  onMouseDown: () => {\n                                    this.setAction('deposit');\n                                  }\n                                }}\n                                isInteractive={true}\n                                isActive={this.state.action === 'deposit'}\n\n                              >\n                                <Flex\n                                  my={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <TransactionField\n                                    transaction={{\n                                      action: 'deposit'\n                                    }}\n                                    fieldInfo={{\n                                      name: 'icon',\n                                      props: {\n                                        mr: 3\n                                      }\n                                    }}\n                                  />\n                                  <Text\n                                    fontSize={3}\n                                    fontWeight={3}\n                                  >\n                                    Deposit\n                                </Text>\n                                </Flex>\n                              </DashboardCard>\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  width: 0.48,\n                                  onMouseDown: () => {\n                                    this.setAction('redeem');\n                                  }\n                                }}\n                                isInteractive={true}\n                                isActive={this.state.action === 'redeem'}\n                                isDisabled={!this.state.canRedeem && !this.state.canRedeemCurve}\n                              >\n                                <Flex\n                                  my={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <TransactionField\n                                    transaction={{\n                                      action: 'redeem'\n                                    }}\n                                    fieldInfo={{\n                                      name: 'icon',\n                                      props: {\n                                        mr: 3\n                                      }\n                                    }}\n                                  />\n                                  <Text\n                                    fontSize={3}\n                                    fontWeight={3}\n                                  >\n                                    Redeem\n                                </Text>\n                                </Flex>\n                              </DashboardCard>\n                            </Flex>\n                            {\n                              isDepositDisabled && (\n                                <IconBox\n                                  cardProps={{\n                                    mt: 3\n                                  }}\n                                  iconProps={{\n                                    color:'#ffe000'\n                                  }}\n                                  icon={'Warning'}\n                                  text={depositDisabledMessage}\n                                >\n                                  {\n                                    this.state.action === 'deposit' && this.state.canRedeem && (\n                                      <RoundButton\n                                        buttonProps={{\n                                          mt:3,\n                                          width:[1,1/2]\n                                        }}\n                                        handleClick={e => this.setAction('redeem')}\n                                      >\n                                        Redeem\n                                      </RoundButton>\n                                    )\n                                  }\n                                </IconBox>\n                              )\n                            }\n                          </Flex>\n                          {\n                            (showRedeemFlow && this.state.unlentBalance) &&\n                            <DashboardCard\n                              cardProps={{\n                                py: 2,\n                                px: 2,\n                                mt: 3,\n                                display: 'flex',\n                                alignItems: 'center',\n                                flexDirection: 'column',\n                                justifyContent: 'center',\n                              }}\n                            >\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <Icon\n                                  size={'1.8em'}\n                                  color={'cellText'}\n                                  name={'LocalGasStation'}\n                                />\n                                <Text\n                                  px={2}\n                                  fontSize={1}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  Available balance for Cheap Redeem\n                                </Text>\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'center'}\n                                    hoverColor={'copyColor'}\n                                  >\n                                    {this.state.unlentBalance.toFixed(4)} {this.props.selectedToken}\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.functionsUtil.getGlobalConfig(['messages', 'cheapRedeem'])}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              </Flex>\n                            </DashboardCard>\n                          }\n                          {\n                            showAdvancedRedeemOptions ? (\n                              <DashboardCard\n                                cardProps={{\n                                  pt: 2,\n                                  px: 2,\n                                  mt: 3,\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                  flexDirection: 'column',\n                                  justifyContent: 'center',\n                                  pb: this.state.showAdvancedOptions ? 3 : 2,\n                                }}\n                              >\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <Link\n                                    ml={1}\n                                    mainColor={'primary'}\n                                    hoverColor={'primary'}\n                                    onClick={this.toggleShowAdvancedOptions}\n                                  >\n                                    {this.state.showAdvancedOptions ? 'Hide' : 'Show'} advanced options\n                                </Link>\n                                  <Icon\n                                    size={'1.8em'}\n                                    color={'cellText'}\n                                    name={this.state.showAdvancedOptions ? 'ArrowDropUp' : 'ArrowDropDown'}\n                                  />\n                                </Flex>\n                                {\n                                  this.state.showAdvancedOptions &&\n                                  <Flex\n                                    mt={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      redeemGovTokenEnabled &&\n                                      <Flex\n                                        alignItems={'center'}\n                                        justifyContent={'row'}\n                                      >\n                                        <Checkbox\n                                          required={false}\n                                          checked={this.state.redeemGovTokens}\n                                          label={`Redeem governance tokens only`}\n                                          onChange={e => this.toggleRedeemGovTokens(e.target.checked)}\n                                        />\n                                        <Link\n                                          color={'link'}\n                                          hoverColor={'link'}\n                                          onClick={e => this.props.openTooltipModal('Redeem governance tokens', `This feature allows you to redeem just the amount of governance tokens accrued${this.props.govTokensBalance && this.props.govTokensBalance.gt(0) ? ` (~${this.props.govTokensBalance.toFixed(2)}$)` : null} without redeeming the underlying token.`)}\n                                        >\n                                          (read more)\n                                          </Link>\n                                      </Flex>\n                                    }\n                                    {\n                                      redeemSkipGovEnabled &&\n                                      <Flex\n                                        alignItems={'center'}\n                                        flexDirection={'row'}\n                                      >\n                                        <Checkbox\n                                          required={false}\n                                          checked={this.state.redeemSkipGov}\n                                          label={`Redeem without governance tokens`}\n                                          onChange={e => this.toggleRedeemSkipGov(e.target.checked)}\n                                        />\n                                        <Icon\n                                          mr={1}\n                                          size={'1.2em'}\n                                          name={'Warning'}\n                                          color={'#ffe000'}\n                                        />\n                                        <Link\n                                          color={'link'}\n                                          hoverColor={'link'}\n                                          onClick={e => this.props.openTooltipModal('Redeem without governance tokens', this.functionsUtil.getGlobalConfig(['messages', 'redeemSkipGov']))}\n                                        >\n                                          (read more)\n                                          </Link>\n                                      </Flex>\n                                    }\n                                  </Flex>\n                                }\n                              </DashboardCard>\n                            ) : showAdvancedDepositOptions ? (\n                              <DashboardCard\n                                cardProps={{\n                                  pt: 2,\n                                  px: 2,\n                                  mt: 3,\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                  flexDirection: 'column',\n                                  justifyContent: 'center',\n                                  pb: this.state.showAdvancedOptions ? 3 : 2,\n                                }}\n                              >\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <Link\n                                    ml={1}\n                                    mainColor={'primary'}\n                                    hoverColor={'primary'}\n                                    onClick={this.toggleShowAdvancedOptions}\n                                  >\n                                    {this.state.showAdvancedOptions ? 'Hide' : 'Show'} advanced options\n                                </Link>\n                                  <Icon\n                                    size={'1.8em'}\n                                    color={'cellText'}\n                                    name={this.state.showAdvancedOptions ? 'ArrowDropUp' : 'ArrowDropDown'}\n                                  />\n                                </Flex>\n                                {\n                                  this.state.showAdvancedOptions &&\n                                  <Flex\n                                    mt={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      showDepositCurve &&\n                                      <Flex\n                                        alignItems={'center'}\n                                        justifyContent={'row'}\n                                      >\n                                        <Checkbox\n                                          required={false}\n                                          disabled={this.state.directMint}\n                                          label={`Deposit in the Curve Pool`}\n                                          checked={this.state.depositCurveEnabled}\n                                          onChange={e => this.toggleDepositCurve(e.target.checked)}\n                                        />\n                                        <Link\n                                          mainColor={'primary'}\n                                          hoverColor={'primary'}\n                                          onClick={e => this.props.openTooltipModal('How Curve works', this.functionsUtil.getGlobalConfig(['messages', 'curveInstructions']))}\n                                        >\n                                          (read more)\n                                          </Link>\n                                      </Flex>\n                                    }\n                                    {\n                                      showRebalanceOption &&\n                                      <Flex\n                                        alignItems={'center'}\n                                        justifyContent={'row'}\n                                      >\n                                        <Checkbox\n                                          required={false}\n                                          label={`Rebalance the pool`}\n                                          checked={this.state.directMint}\n                                          disabled={this.state.depositCurveEnabled}\n                                          onChange={e => this.toggleSkipMint(e.target.checked)}\n                                        />\n                                        <Tooltip\n                                          placement={'bottom'}\n                                          message={this.functionsUtil.getGlobalConfig(['messages', 'directMint'])}\n                                        >\n                                          <Icon\n                                            size={'1em'}\n                                            color={'cellTitle'}\n                                            name={\"InfoOutline\"}\n                                          />\n                                        </Tooltip>\n                                      </Flex>\n                                    }\n                                  </Flex>\n                                }\n                              </DashboardCard>\n                            ) : (\n                                  <Flex\n                                    width={1}\n                                    flexDirection={'column'}\n                                  >\n                                    {\n                                      showDepositCurve && (\n                                        <Flex\n                                          width={1}\n                                          flexDirection={'column'}\n                                          justifyContent={'center'}\n                                        >\n                                          <DashboardCard\n                                            isRainbow={true}\n                                            cardProps={{\n                                              py: 3,\n                                              px: 2,\n                                              mt: 3,\n                                              display: 'flex',\n                                              alignItems: 'center',\n                                              flexDirection: 'column',\n                                              justifyContent: 'center',\n                                            }}\n                                          >\n                                            <Flex\n                                              width={1}\n                                              alignItems={'center'}\n                                              flexDirection={'column'}\n                                              justifyContent={'center'}\n                                            >\n                                              <Image\n                                                height={'1.8em'}\n                                                src={curveConfig.params.image}\n                                              />\n                                              <Text\n                                                mt={2}\n                                                px={2}\n                                                fontSize={1}\n                                                color={'dark-gray'}\n                                                textAlign={'center'}\n                                              >\n                                                Deposit your tokens in the Curve Pool and boost your APY up to {this.state.curveAPY ? this.state.curveAPY.toFixed(2) : '-'}%.\n                                          <Link\n                                                  ml={1}\n                                                  mainColor={'primary'}\n                                                  hoverColor={'primary'}\n                                                  onClick={e => this.props.openTooltipModal('How Curve works', this.functionsUtil.getGlobalConfig(['messages', 'curveInstructions']))}\n                                                >\n                                                  Read More\n                                          </Link>\n                                              </Text>\n                                              <Checkbox\n                                                mt={2}\n                                                required={false}\n                                                label={`Deposit in Curve`}\n                                                checked={this.state.depositCurveEnabled}\n                                                onChange={e => this.toggleDepositCurve(e.target.checked)}\n                                              />\n                                            </Flex>\n                                          </DashboardCard>\n                                          {\n                                            (!this.state.showBuyFlow && !this.state.depositCurveEnabled && !this.state.canDeposit) &&\n                                            <Link\n                                              textAlign={'center'}\n                                              hoverColor={'primary'}\n                                              onClick={e => this.setShowBuyFlow(true)}\n                                            >\n                                              I just want to deposit more {this.props.selectedToken}\n                                            </Link>\n                                          }\n                                        </Flex>\n                                      )\n                                    }\n                                    {\n                                      showRebalanceOption && (\n                                        <DashboardCard\n                                          cardProps={{\n                                            py: 3,\n                                            px: 2,\n                                            mt: 3,\n                                            display: 'flex',\n                                            alignItems: 'center',\n                                            flexDirection: 'column',\n                                            justifyContent: 'center',\n                                          }}\n                                        >\n                                          <Flex\n                                            width={1}\n                                            alignItems={'center'}\n                                            flexDirection={'column'}\n                                            justifyContent={'center'}\n                                          >\n                                            <Icon\n                                              size={'1.8em'}\n                                              color={'cellText'}\n                                              name={'InfoOutline'}\n                                            />\n                                            <Text\n                                              mt={1}\n                                              px={2}\n                                              fontSize={1}\n                                              color={'cellText'}\n                                              textAlign={'center'}\n                                            >\n                                              By checking this flag you can rebalance the pool and help all users gain an additional APR\n                                      </Text>\n                                          </Flex>\n                                          <Checkbox\n                                            mt={2}\n                                            required={false}\n                                            label={`Rebalance the pool`}\n                                            checked={this.state.directMint}\n                                            onChange={e => this.toggleSkipMint(e.target.checked)}\n                                          />\n                                        </DashboardCard>\n                                      )\n                                    }\n                                    {\n                                      redeemGovTokenEnabled && (\n                                        <DashboardCard\n                                          cardProps={{\n                                            py: 3,\n                                            px: 2,\n                                            mt: 3,\n                                            display: 'flex',\n                                            alignItems: 'center',\n                                            flexDirection: 'column',\n                                            justifyContent: 'center',\n                                          }}\n                                        >\n                                          <Flex\n                                            width={1}\n                                            alignItems={'center'}\n                                            flexDirection={'column'}\n                                            justifyContent={'center'}\n                                          >\n                                            <Icon\n                                              size={'1.8em'}\n                                              color={'cellText'}\n                                              name={'InfoOutline'}\n                                            />\n                                            <Text\n                                              mt={1}\n                                              px={2}\n                                              fontSize={1}\n                                              color={'cellText'}\n                                              textAlign={'center'}\n                                            >\n                                              By redeeming your {this.props.selectedToken} you will automatically get also the proportional amount of governance tokens accrued{this.props.govTokensBalance && this.props.govTokensBalance.gt(0) ? ` (~ $${this.props.govTokensBalance.toFixed(2)})` : null}.\n                                      </Text>\n                                          </Flex>\n                                          <Checkbox\n                                            mt={2}\n                                            required={false}\n                                            checked={this.state.redeemGovTokens}\n                                            label={`Redeem governance tokens only`}\n                                            onChange={e => this.toggleRedeemGovTokens(e.target.checked)}\n                                          />\n                                        </DashboardCard>\n                                      )\n                                    }\n                                  </Flex>\n                                )\n                          }\n                          {\n                            redeemSkipGov ? (\n                              <DashboardCard\n                                cardProps={{\n                                  mt: 2,\n                                  mb: 2,\n                                  py: 2,\n                                  px: 1\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                >\n                                  <Text\n                                    mt={1}\n                                    fontSize={2}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    Select the gov tokens you want to give away:\n                                  </Text>\n                                  <Flex\n                                    mt={2}\n                                    width={1}\n                                    boxShadow={0}\n                                    style={{\n                                      flexWrap: 'wrap'\n                                    }}\n                                    alignItems={'center'}\n                                    justifyContent={'center'}\n                                  >\n                                    {\n                                      Object.keys(this.props.govTokensUserBalances).map(token => {\n                                        const balance = this.props.govTokensUserBalances[token];\n                                        const isActive = this.state.redeemSkipGovTokens.includes(token);\n                                        const tokenConfig = this.functionsUtil.getGlobalConfig(['govTokens', token]);\n                                        return (\n                                          <Flex\n                                            p={2}\n                                            mb={1}\n                                            mx={1}\n                                            width={'auto'}\n                                            style={{\n                                              cursor: 'pointer'\n                                            }}\n                                            borderRadius={2}\n                                            flexDirection={'row'}\n                                            border={isActive ? 2 : 1}\n                                            key={`skipGovToken_${token}`}\n                                            justifyContent={'flex-start'}\n                                            backgroundColor={isActive ? 'menuHover' : 'cardBgHover'}\n                                            onClick={e => this.setRedeemSkipGovTokens(token, !this.state.redeemSkipGovTokens.includes(token))}\n                                          >\n                                            <Checkbox\n                                              m={0}\n                                              required={false}\n                                              checked={isActive}\n                                              onChange={e => this.setRedeemSkipGovTokens(token, e.target.checked)}\n                                            />\n                                            <AssetField\n                                              token={token}\n                                              tokenConfig={tokenConfig}\n                                              fieldInfo={{\n                                                name: 'icon',\n                                                props: {\n                                                  mr: 1,\n                                                  width: ['1.4em', '1.6em'],\n                                                  height: ['1.4em', '1.6em']\n                                                }\n                                              }}\n                                            />\n                                            <SmartNumber\n                                              ml={1}\n                                              fontSize={[0, 2]}\n                                              fontWeight={500}\n                                              maxPrecision={4}\n                                              color={'cellText'}\n                                              number={balance.toString()}\n                                            />\n                                          </Flex>\n                                        );\n                                      })\n                                    }\n                                  </Flex>\n                                </Flex>\n                              </DashboardCard>\n                            ) : redeemSkipGovNoTokens && (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 2,\n                                  my: 2\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    name={'MoneyOff'}\n                                    color={'cellText'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    You don't have any gov tokens to give away.\n                                </Text>\n                                </Flex>\n                              </DashboardCard>\n                            )\n                          }\n                          {\n                            redeemSkipGov && this.functionsUtil.BNify(this.state.skippedGovTokensBalance).gt(0) ? (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 2,\n                                  my: 2\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    name={'Warning'}\n                                    color={'#ffe000'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    fontSize={1}\n                                    color={'red'}\n                                    textAlign={'center'}\n                                  >\n                                    You are giving away {this.functionsUtil.formatMoney(this.state.skippedGovTokensBalance)}$ worth of governance tokens!\n                                </Text>\n                                  {\n                                    this.state.skipGovTokensGasSave && this.state.skipGovTokensGasSave.gte(0.0001) && (\n                                      <Text\n                                        mt={1}\n                                        fontSize={1}\n                                        color={'#00b84a'}\n                                        textAlign={'center'}\n                                      >\n                                        This will save you {this.state.skipGovTokensGasSave.toFixed(4)} ETH of gas (~{this.state.skipGovTokensGasSaveUSD.toFixed(2)}$)\n                                    </Text>\n                                    )\n                                  }\n                                  <Text\n                                    mt={1}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    To proceed with the redeem please give your authorization by checking the following flag:\n                                </Text>\n                                  <Checkbox\n                                    my={1}\n                                    required={false}\n                                    checked={this.state.agreeSkipGovTokens}\n                                    label={`I agree to give away my governance tokens`}\n                                    onChange={e => this.toggleAgreeSkipGovTokens(e.target.checked)}\n                                  />\n                                </Flex>\n                              </DashboardCard>\n                            ) : redeemSkipGov && this.state.redeemSkipGovTokens.length > 0 && (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  my: 2\n                                }}\n                              >\n                                <FlexLoader\n                                  flexProps={{\n                                    flexDirection: 'row'\n                                  }}\n                                  loaderProps={{\n                                    size: '25px',\n                                  }}\n                                  textProps={{\n                                    ml: 2\n                                  }}\n                                  text={'Loading estimated gas usage...'}\n                                />\n                              </DashboardCard>\n                            )\n                          }\n                          {\n                            showReferral && (\n                              <DashboardCard\n                                cardProps={{\n                                  py: 3,\n                                  px: 2,\n                                  mt: 3,\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                  flexDirection: 'column',\n                                  justifyContent: 'center',\n                                }}\n                              >\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    name={'Share'}\n                                    color={'cellText'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    px={2}\n                                    fontSize={1}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    You are depositing with the following referral address:\n                                </Text>\n                                  <Text\n                                    mt={1}\n                                    px={2}\n                                    fontSize={1}\n                                    fontWeight={500}\n                                    textAlign={'center'}\n                                    color={this.props.theme.colors.transactions.status.completed}\n                                  >\n                                    {_referral}\n                                  </Text>\n                                </Flex>\n                              </DashboardCard>\n                            )\n                          }\n                          {\n                            (metaTransactionsAvailable && !showBuyFlow && !this.state.contractPaused) ? (\n                              <DashboardCard\n                                cardProps={{\n                                  py: 3,\n                                  px: 2,\n                                  my: 3,\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                  flexDirection: 'column',\n                                  justifyContent: 'center',\n                                }}\n                              >\n                                {\n                                  this.state.metaTransactionsEnabled && this.state.txError[this.state.action] && this.state.actionProxyContract[this.state.action].approved ? (\n                                    <Flex\n                                      width={1}\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        name={'Warning'}\n                                        color={'cellText'}\n                                      />\n                                      <Text\n                                        mt={1}\n                                        fontSize={1}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        Seems like you are having some trouble with Meta-Transactions... Disable them by unchecking the box below and try again!\n                                    </Text>\n                                    </Flex>\n                                  ) : this.functionsUtil.getWalletProvider() === 'WalletConnect' && this.state.metaTransactionsEnabled ? (\n                                    <Flex\n                                      width={1}\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                      justifyContent={'center'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        name={'Warning'}\n                                        color={'cellText'}\n                                      />\n                                      <Text\n                                        mt={1}\n                                        fontSize={1}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        Please disable Meta-Transactions if you are using Argent Wallet to avoid failed transactions!\n                                    </Text>\n                                    </Flex>\n                                  ) : (\n                                        <Text\n                                          mt={1}\n                                          fontSize={1}\n                                          color={'cellText'}\n                                          textAlign={'center'}\n                                        >\n                                          Meta-Transactions are {this.state.metaTransactionsEnabled ? 'enabled' : 'disabled'} for {this.state.action}s!<br />\n                                          {\n                                            this.state.metaTransactionsEnabled && !this.state.actionProxyContract[this.state.action].approved && `Please either enable the Smart-Contract to enjoy gas-less ${this.state.action} or just disable meta-tx.`\n                                          }\n                                        </Text>\n                                      )\n                                }\n                                <Checkbox\n                                  mt={2}\n                                  required={false}\n                                  checked={this.state.metaTransactionsEnabled}\n                                  onChange={e => this.toggleMetaTransactionsEnabled(e.target.checked)}\n                                  label={`${this.functionsUtil.capitalize(this.state.action)} with Meta-Transaction`}\n                                />\n                              </DashboardCard>\n                            ) : (erc20ForwarderEnabled && !showBuyFlow && !this.state.contractPaused) && (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  my: 3,\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                  flexDirection: 'column',\n                                  justifyContent: 'center',\n                                }}\n                              >\n                                <Text\n                                  mb={2}\n                                  fontSize={2}\n                                  color={'cellText'}\n                                  textAlign={'center'}\n                                >\n                                  How do you prefer to pay gas fees for this {this.state.action}?\n                                </Text>\n                                <Flex\n                                  width={[1, 0.7]}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'space-between'}\n                                >\n                                  <CardIconButton\n                                    {...this.props}\n                                    cardProps={{\n                                      py: 2,\n                                      px: [2, 3],\n                                      width: 0.48\n                                    }}\n                                    textProps={{\n                                      ml: [1, 2],\n                                    }}\n                                    text={this.props.selectedToken}\n                                    isActive={this.state.erc20ForwarderEnabled}\n                                    imageProps={{\n                                      height: this.props.isMobile ? '1.4em' : '1.8em',\n                                      width: this.props.isMobile ? '1.4em' : '1.8em'\n                                    }}\n                                    image={`/images/tokens/${this.props.selectedToken}.svg`}\n                                    handleClick={e => this.toggleErc20ForwarderEnabled(true)}\n                                  />\n                                  <CardIconButton\n                                    {...this.props}\n                                    cardProps={{\n                                      py: 2,\n                                      px: [2, 3],\n                                      width: 0.48\n                                    }}\n                                    textProps={{\n                                      ml: [1, 2],\n                                    }}\n                                    text={'ETH'}\n                                    isActive={!this.state.erc20ForwarderEnabled}\n                                    imageProps={{\n                                      height: this.props.isMobile ? '1.4em' : '1.8em',\n                                      width: this.props.isMobile ? '1.4em' : '1.8em'\n                                    }}\n                                    image={`/images/tokens/ETH.svg`}\n                                    handleClick={e => this.toggleErc20ForwarderEnabled(false)}\n                                  />\n                                </Flex>\n                                {\n                                  this.state.erc20ForwarderEnabled && this.state.txError[this.state.action] && (\n                                    <Text\n                                      mt={2}\n                                      fontSize={1}\n                                      color={'red'}\n                                      textAlign={'center'}\n                                    >\n                                      The meta-transaction cannot be executed due to insufficient funds, fund your wallet or select ETH and try again.\n                                  </Text>\n                                  )\n                                }\n                                {\n                                  /*\n                                  <Text\n                                    mt={2}\n                                    fontSize={'11px'}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    Powered by <ExtLink fontSize={'11px'} href={'https://biconomy.io'}>Biconomy</ExtLink>\n                                  </Text>\n                                  */\n                                }\n                              </DashboardCard>\n                            )\n                          }\n                          {\n                            (this.state.minAmountForMintReached && this.state.action === 'deposit') && (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  mt: 3\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    color={'cellText'}\n                                    name={'InfoOutline'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    fontSize={2}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    By depositing more than {this.functionsUtil.formatMoney(this.state.minAmountForMint)}$ {this.state.showPoolPerc ? `(${this.state.minAmountForMint.div(this.state.totalAUM).times(100).toFixed(0)}% of the pool)` : null} the pool will be automatically rebalanced, gas cost may be higher.\n                                </Text>\n                                </Flex>\n                              </DashboardCard>\n                            )\n                          }\n                          {\n                            showBatchDeposit ? (\n                              <Flex\n                                p={2}\n                                mt={3}\n                                width={1}\n                                borderRadius={2}\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                                backgroundColor={'DashboardCard'}\n                                border={`1px solid ${this.props.theme.colors.primary}`}\n                              >\n                                <Link\n                                  textAlign={'center'}\n                                  hoverColor={'primary'}\n                                  href={`/#/dashboard/tools/${batchDepositInfo.route}/${this.props.tokenConfig.idle.token}`}\n                                >\n                                  Gas fees too high? Save gas with our Batch Deposit!\n                                </Link>\n                                <Icon\n                                  ml={1}\n                                  size={'1em'}\n                                  color={'primary'}\n                                  name={'LocalGasStation'}\n                                />\n                              </Flex>\n                            ) : showETHWrapper ? (\n                              <Flex\n                                width={1}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <DashboardCard\n                                  cardProps={{\n                                    py: 3,\n                                    px: 2,\n                                    mt: 3,\n                                    display: 'flex',\n                                    alignItems: 'center',\n                                    flexDirection: 'column',\n                                    justifyContent: 'center',\n                                    pb: this.state.showAdvancedOptions ? 3 : 2,\n                                  }}\n                                >\n                                  <Flex\n                                    alignItems={'center'}\n                                    justifyContent={'row'}\n                                  >\n                                    <Checkbox\n                                      required={false}\n                                      checked={this.state.showETHWrapperEnabled}\n                                      label={`Convert your ETH to WETH`}\n                                      onChange={e => this.toggleShowETHWrapper(e.target.checked)}\n                                    />\n                                  </Flex>\n                                </DashboardCard>\n                                {\n                                  this.state.showETHWrapperEnabled &&\n                                  <ETHWrapperComponent\n                                    {...this.props}\n                                    action={'wrap'}\n                                    fullWidth={true}\n                                    toolProps={ethWrapperInfo.props}\n                                  />\n                                }\n                              </Flex>\n                            ) : showPolygonBridgeBanner && (\n                              <Flex\n                                p={2}\n                                mt={3}\n                                width={1}\n                                borderRadius={2}\n                                alignItems={'center'}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                                backgroundColor={'DashboardCard'}\n                                border={`1px solid ${this.props.theme.colors.primary}`}\n                              >\n                                <Image\n                                  height={'1.2em'}\n                                  src={polygonBridgeInfo.image}\n                                />\n                                <Flex\n                                  width={1}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'center'}\n                                >\n                                  <Link\n                                    textAlign={'center'}\n                                    hoverColor={'primary'}\n                                    href={`/#/dashboard/tools/${polygonBridgeInfo.route}/${this.props.selectedToken}`}\n                                  >\n                                    Use the {polygonBridgeInfo.label} to deposit your {this.props.selectedToken}\n                                  </Link>\n                                  <Icon\n                                    ml={1}\n                                    size={'1em'}\n                                    color={'primary'}\n                                    name={'ArrowForward'}\n                                  />\n                                </Flex>\n                              </Flex>\n                            )\n                          }\n                          {\n                            showRedeemCurve && this.state.canRedeem && (\n                              <Flex\n                                width={1}\n                                flexDirection={'column'}\n                                justifyContent={'center'}\n                              >\n                                <DashboardCard\n                                  isRainbow={true}\n                                  cardProps={{\n                                    py: 3,\n                                    px: 2,\n                                    mt: 3,\n                                    display: 'flex',\n                                    alignItems: 'center',\n                                    flexDirection: 'column',\n                                    justifyContent: 'center',\n                                  }}\n                                >\n                                  <Flex\n                                    width={1}\n                                    alignItems={'center'}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                  >\n                                    <Image\n                                      height={'1.8em'}\n                                      src={curveConfig.params.image}\n                                    />\n                                    <Text\n                                      mt={2}\n                                      px={2}\n                                      fontSize={1}\n                                      color={'dark-gray'}\n                                      textAlign={'center'}\n                                    >\n                                      Redeem your tokens from the Curve Pool.\n                                    <Link\n                                        ml={1}\n                                        mainColor={'primary'}\n                                        hoverColor={'primary'}\n                                        onClick={e => this.props.openTooltipModal('How Curve works', this.functionsUtil.getGlobalConfig(['messages', 'curveInstructions']))}\n                                      >\n                                        Read More\n                                    </Link>\n                                    </Text>\n                                    {\n                                      this.state.canRedeem &&\n                                      <Checkbox\n                                        mt={2}\n                                        required={false}\n                                        label={`Redeem from Curve`}\n                                        checked={this.state.redeemCurveEnabled}\n                                        onChange={e => this.toggleRedeemCurve(e.target.checked)}\n                                      />\n                                    }\n                                  </Flex>\n                                </DashboardCard>\n                                {\n                                  this.canRedeem &&\n                                  <Link\n                                    textAlign={'center'}\n                                    hoverColor={'primary'}\n                                    onClick={e => this.setShowRedeemFlow(true)}\n                                  >\n                                    I just want to redeem my {this.props.selectedToken}\n                                  </Link>\n                                }\n                              </Flex>\n                            )\n                          }\n                          {\n                            (this.state.contractPaused && this.state.action === 'deposit') ? (\n                              <DashboardCard\n                                cardProps={{\n                                  p: 3,\n                                  mt: 3\n                                }}\n                              >\n                                <Flex\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                >\n                                  <Icon\n                                    size={'1.8em'}\n                                    name={'Warning'}\n                                    color={'cellText'}\n                                  />\n                                  <Text\n                                    mt={1}\n                                    fontSize={2}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    Deposits for {this.props.selectedToken} are temporarily unavailable due to Smart-Contract maintenance. Redeems are always available.\n                                </Text>\n                                </Flex>\n                              </DashboardCard>\n                            ) : (!this.state.tokenApproved && this.state.action === 'deposit' && !this.state.showETHWrapperEnabled && !isDepositDisabled) ? (\n                              <DashboardCard\n                                isDisabled={isDepositDisabled}\n                                cardProps={{\n                                  p: 3,\n                                  mt: 3\n                                }}\n                              >\n                                {\n                                  this.state.processing['approve'] && this.state.processing['approve'].loading ? (\n                                    <Flex\n                                      flexDirection={'column'}\n                                    >\n                                      <TxProgressBar\n                                        {...this.props}\n                                        waitText={`Approve estimated in`}\n                                        endMessage={`Finalizing approve request...`}\n                                        hash={this.state.processing['approve'].txHash}\n                                        cancelTransaction={this.cancelTransaction.bind(this)}\n                                      />\n                                    </Flex>\n                                  ) : (\n                                    <Flex\n                                      alignItems={'center'}\n                                      flexDirection={'column'}\n                                    >\n                                      <Icon\n                                        size={'1.8em'}\n                                        name={'LockOpen'}\n                                        color={'cellText'}\n                                      />\n                                      <Text\n                                        mt={3}\n                                        fontSize={2}\n                                        color={'cellText'}\n                                        textAlign={'center'}\n                                      >\n                                        {\n                                          this.state.depositCurveEnabled ?\n                                            `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.`\n                                            : useMetaTx ?\n                                              `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle using Meta-Transaction you need to approve our Smart-Contract first.`\n                                            :\n                                              `To ${this.functionsUtil.capitalize(this.state.action)} your ${this.props.selectedToken} into Idle you need to approve our Smart-Contract first.`\n                                        }\n                                      </Text>\n                                      <RoundButton\n                                        buttonProps={{\n                                          mt: 3,\n                                          width: [1, 1 / 2]\n                                        }}\n                                        handleClick={this.approveToken.bind(this)}\n                                      >\n                                        Approve\n                                      </RoundButton>\n                                    </Flex>\n                                  )\n                                }\n                              </DashboardCard>\n                            ) : (!showBuyFlow && canPerformAction) && (\n                              !this.state.processing[this.state.action].loading ? (\n                                <Flex\n                                  mt={2}\n                                  flexDirection={'column'}\n                                >\n                                  {\n                                    showActionFlow && (\n                                      <Flex\n                                        mb={3}\n                                        width={1}\n                                        flexDirection={'column'}\n                                      >\n                                        {\n                                          (totalBalance || this.props.tokenFeesPercentage) && (\n                                            <Box\n                                              mb={1}\n                                              width={1}\n                                            >\n                                              {\n                                                this.state.showMaxSlippage && showCurveSlippage && (\n                                                  <Box\n                                                    mb={2}\n                                                    width={1}\n                                                  >\n                                                    <Flex\n                                                      alignItems={'center'}\n                                                      flexDirection={'row'}\n                                                    >\n                                                      <Text>\n                                                        Choose max slippage:\n                                                    </Text>\n                                                      <Tooltip\n                                                        placement={'top'}\n                                                        message={`Max additional slippage on top of the one shown below`}\n                                                      >\n                                                        <Icon\n                                                          ml={1}\n                                                          size={'1em'}\n                                                          color={'cellTitle'}\n                                                          name={\"InfoOutline\"}\n                                                        />\n                                                      </Tooltip>\n                                                    </Flex>\n                                                    <Flex\n                                                      mt={2}\n                                                      alignItems={'center'}\n                                                      flexDirection={'row'}\n                                                      justifyContent={'space-between'}\n                                                    >\n                                                      {\n                                                        [0.2, 0.5, 1, 5].map(slippage => (\n                                                          <FastBalanceSelector\n                                                            cardProps={{\n                                                              p: 1\n                                                            }}\n                                                            textProps={{\n                                                              fontSize: 1\n                                                            }}\n                                                            percentage={slippage}\n                                                            key={`selector_${slippage}`}\n                                                            onMouseDown={() => this.setMaxSlippage(slippage)}\n                                                            isActive={this.state.maxSlippage === parseFloat(slippage)}\n                                                          />\n                                                        ))\n                                                      }\n                                                    </Flex>\n                                                  </Box>\n                                                )\n                                              }\n                                              <Flex\n                                                width={1}\n                                                alignItems={'center'}\n                                                flexDirection={'row'}\n                                                justifyContent={'space-between'}\n                                              >\n                                                {\n                                                  showCurveSlippage ? (\n                                                    <Flex\n                                                      width={1}\n                                                      maxWidth={'50%'}\n                                                      alignItems={'center'}\n                                                      flexDirection={'row'}\n                                                    >\n                                                      <Text\n                                                        fontSize={1}\n                                                        fontWeight={3}\n                                                        textAlign={'right'}\n                                                        style={{\n                                                          whiteSpace: 'nowrap'\n                                                        }}\n                                                        color={this.state.depositCurveSlippage.gt(0) ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed}\n                                                      >\n                                                        {\n                                                          parseFloat(this.state.depositCurveSlippage.times(100).toFixed(2)) === 0 ?\n                                                            'No Slippage'\n                                                            : `${this.state.depositCurveSlippage.gt(0) ? 'Slippage: ' : 'Bonus: '} ${this.state.depositCurveSlippage.times(100).abs().toFixed(2)}%`\n                                                        }\n                                                      </Text>\n                                                      <Tooltip\n                                                        placement={'top'}\n                                                        message={this.functionsUtil.getGlobalConfig(['messages', 'curveBonusSlippage'])}\n                                                      >\n                                                        <Icon\n                                                          ml={1}\n                                                          size={'1em'}\n                                                          color={'cellTitle'}\n                                                          name={\"InfoOutline\"}\n                                                        />\n                                                      </Tooltip>\n                                                      <Link\n                                                        ml={1}\n                                                        color={'copyColor'}\n                                                        hoverColor={'primary'}\n                                                        onClick={this.showMaxSlippage}\n                                                      >\n                                                        change\n                                                    </Link>\n                                                    </Flex>\n                                                  ) : this.props.tokenFeesPercentage && (\n                                                    <Flex\n                                                      alignItems={'center'}\n                                                      flexDirection={'row'}\n                                                    >\n                                                      <Text\n                                                        fontSize={1}\n                                                        fontWeight={3}\n                                                        color={'dark-gray'}\n                                                        textAlign={'right'}\n                                                        hoverColor={'copyColor'}\n                                                      >\n                                                        Performance fee: {this.props.tokenFeesPercentage.times(100).toFixed(2)}%\n                                                    </Text>\n                                                      <Tooltip\n                                                        placement={'top'}\n                                                        message={this.functionsUtil.getGlobalConfig(['messages', 'performanceFee'])}\n                                                      >\n                                                        <Icon\n                                                          ml={1}\n                                                          size={'1em'}\n                                                          color={'cellTitle'}\n                                                          name={\"InfoOutline\"}\n                                                        />\n                                                      </Tooltip>\n                                                    </Flex>\n                                                  )\n                                                }\n                                                {\n                                                  totalBalance && (\n                                                    <Link\n                                                      fontSize={1}\n                                                      fontWeight={3}\n                                                      color={'dark-gray'}\n                                                      textAlign={'right'}\n                                                      hoverColor={'copyColor'}\n                                                      onClick={(e) => this.setFastBalanceSelector(100)}\n                                                    >\n                                                      {totalBalance.toFixed(6)} {this.props.selectedToken}\n                                                    </Link>\n                                                  )\n                                                }\n                                              </Flex>\n                                            </Box>\n                                          )\n                                        }\n                                        <Input\n                                          min={0}\n                                          type={\"number\"}\n                                          required={true}\n                                          height={'3.4em'}\n                                          borderRadius={2}\n                                          fontWeight={500}\n                                          borderColor={'cardBorder'}\n                                          backgroundColor={'cardBg'}\n                                          boxShadow={'none !important'}\n                                          placeholder={`Insert amount`}\n                                          onChange={this.changeInputValue.bind(this)}\n                                          border={`1px solid ${this.props.theme.colors.divider}`}\n                                          value={this.state.inputValue[this.state.action] !== null ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]).toFixed() : ''}\n                                        />\n                                        <Flex\n                                          mt={2}\n                                          alignItems={'center'}\n                                          flexDirection={'row'}\n                                          justifyContent={'space-between'}\n                                        >\n                                          {\n                                            [25, 50, 75, 100].map(percentage => (\n                                              <FastBalanceSelector\n                                                percentage={percentage}\n                                                key={`selector_${percentage}`}\n                                                onMouseDown={() => this.setFastBalanceSelector(percentage)}\n                                                isActive={this.state.fastBalanceSelector[this.state.action] === parseInt(percentage)}\n                                              />\n                                            ))\n                                          }\n                                        </Flex>\n                                      </Flex>\n                                    )\n                                  }\n                                  {\n                                    canPerformAction && (\n                                      <Flex\n                                        justifyContent={'center'}\n                                        mt={redeemGovTokens ? 2 : 0}\n                                      >\n                                        <RoundButton\n                                          buttonProps={{\n                                            width: 'auto',\n                                            minWidth: [1, 1 / 2],\n                                            style: {\n                                              textTransform: 'capitalize'\n                                            },\n                                            disabled: this.state.buttonDisabled\n                                          }}\n                                          handleClick={this.state.buttonDisabled ? null : this.executeAction.bind(this)}\n                                        >\n                                          {this.state.action}{redeemGovTokens ? ' Gov Tokens' : '' /*(depositCurve ? ' in Curve' : '')*/}\n                                        </RoundButton>\n                                      </Flex>\n                                    )\n                                  }\n                                </Flex>\n                              ) : this.state.loadingErc20ForwarderTx ? (\n                                <Flex\n                                  mt={3}\n                                  flexDirection={'column'}\n                                >\n                                  <FlexLoader\n                                    flexProps={{\n                                      flexDirection: 'row'\n                                    }}\n                                    loaderProps={{\n                                      size: '25px',\n                                    }}\n                                    textProps={{\n                                      ml: 2\n                                    }}\n                                    text={this.state.erc20ForwarderTx ? (this.state.signedParameters ? 'Please Sign the Transaction...' : 'Please Sign the Permit...') : 'Calculating transaction fees...'}\n                                  />\n                                </Flex>\n                              ) : this.state.erc20ForwarderTx ? (\n                                <DashboardCard\n                                  cardProps={{\n                                    p: 3,\n                                    mt: 3,\n                                    display: 'flex',\n                                    alignItems: 'center',\n                                    flexDirection: 'column',\n                                    justifyContent: 'center',\n                                  }}\n                                >\n                                  <Text\n                                    mb={2}\n                                    fontSize={2}\n                                    color={'cellText'}\n                                    textAlign={'center'}\n                                  >\n                                    The required gas fee to perform the {this.state.action} is <strong>{this.state.erc20ForwarderTx.cost} {this.props.selectedToken}</strong>\n                                  </Text>\n                                  <Flex\n                                    width={1}\n                                    alignItems={'center'}\n                                    flexDirection={'row'}\n                                    justifyContent={'center'}\n                                  >\n                                    <DashboardCard\n                                      cardProps={{\n                                        mx: 2,\n                                        py: 2,\n                                        px: [2, 3],\n                                        width: 0.40,\n                                        onMouseDown: () => {\n                                          this.executeAction()\n                                        }\n                                      }}\n                                      isInteractive={true}\n                                    >\n                                      <Flex\n                                        my={1}\n                                        alignItems={'center'}\n                                        flexDirection={'row'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Flex\n                                          mr={2}\n                                          alignItems={'center'}\n                                          justifyContent={'center'}\n                                        >\n                                          <Icon\n                                            align={'center'}\n                                            color={'#00b84a'}\n                                            name={'CheckCircle'}\n                                            size={this.props.isMobile ? '1em' : '1.8em'}\n                                          />\n                                        </Flex>\n                                        <Text\n                                          fontWeight={3}\n                                          fontSize={[2, 3]}\n                                        >\n                                          Confirm\n                                      </Text>\n                                      </Flex>\n                                    </DashboardCard>\n                                    <DashboardCard\n                                      cardProps={{\n                                        mx: 2,\n                                        py: 2,\n                                        px: [2, 3],\n                                        width: 0.40,\n                                        onMouseDown: () => {\n                                          this.cancelTransaction();\n                                        }\n                                      }}\n                                      isInteractive={true}\n                                    >\n                                      <Flex\n                                        my={1}\n                                        alignItems={'center'}\n                                        flexDirection={'row'}\n                                        justifyContent={'center'}\n                                      >\n                                        <Flex\n                                          mr={2}\n                                          alignItems={'center'}\n                                          justifyContent={'center'}\n                                        >\n                                          <Icon\n                                            name={'Cancel'}\n                                            align={'center'}\n                                            color={'#e13636'}\n                                            size={this.props.isMobile ? '1em' : '1.8em'}\n                                          />\n                                        </Flex>\n                                        <Text\n                                          fontWeight={3}\n                                          fontSize={[2, 3]}\n                                        >\n                                          Decline\n                                      </Text>\n                                      </Flex>\n                                    </DashboardCard>\n                                  </Flex>\n                                </DashboardCard>\n                              ) : (\n                                <Flex\n                                  mt={3}\n                                  alignItems={'center'}\n                                  flexDirection={'column'}\n                                  justifyContent={'center'}\n                                >\n                                  <TxProgressBar\n                                    {...this.props}\n                                    cancelTransaction={this.cancelTransaction.bind(this)}\n                                    hash={this.state.processing[this.state.action].txHash}\n                                    endMessage={`Finalizing ${this.state.action} request...`}\n                                    waitText={`${this.functionsUtil.capitalize(this.state.action)} estimated in`}\n                                  />\n                                </Flex>\n                              )\n                            )\n                          }\n                        </Box>\n                      )\n                    ) : (\n                      <Flex\n                        mt={4}\n                        flexDirection={'column'}\n                      >\n                        <FlexLoader\n                          flexProps={{\n                            flexDirection: 'row'\n                          }}\n                          loaderProps={{\n                            size: '30px'\n                          }}\n                          textProps={{\n                            ml: 2\n                          }}\n                          text={'Loading asset info...'}\n                        />\n                      </Flex>\n                    )\n                  }\n                </Migrate>\n              )\n          }\n        </Flex>\n        {\n          /*\n          showDepositCurve && this.state.depositCurveEnabled ? (\n            <CurveDeposit\n              {...this.props}\n            />\n          ) :\n          */\n          showRedeemCurve && this.state.redeemCurveEnabled && (\n            <Box\n              mt={3}\n              width={1}\n            >\n              <CurveRedeem\n                {...this.props}\n              />\n            </Box>\n          )\n        }\n        {\n          showBuyFlow ? (\n            <Flex\n              mt={3}\n              width={[1,0.5]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <BuyModal\n                {...this.props}\n                showInline={true}\n                availableMethods={[]}\n                buyToken={this.props.selectedToken}\n              />\n            </Flex>\n          ) : showPolygonBridge && (\n            <Flex\n              mt={3}\n              width={[1,0.36]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <DashboardCard\n                cardProps={{\n                  p:3\n                }}\n              >\n                <Flex\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                >\n                  <Image\n                    height={'2em'}\n                    src={polygonBridgeInfo.image}\n                  />\n                  <Text\n                    mt={1}\n                    fontSize={2}\n                    color={'cellText'}\n                    textAlign={'center'}\n                  >\n                    <strong>You don't have enough {buyToken} in your wallet!</strong><br />Use the {polygonBridgeInfo.label} to transfer your {buyToken} in Polygon.\n                  </Text>\n                  <RoundButton\n                    buttonProps={{\n                      mt:2,\n                      width:[1,1/2]\n                    }}\n                    handleClick={ e => this.props.goToSection(`tools/${polygonBridgeInfo.route}/${buyToken}`)}\n                  >\n                    Deposit {buyToken}\n                  </RoundButton>\n                </Flex>\n              </DashboardCard>\n            </Flex>\n          )\n        }\n        <ShareModal\n          confettiEnabled={true}\n          icon={`images/medal.svg`}\n          title={`Congratulations!`}\n          account={this.props.account}\n          closeModal={this.resetModal}\n          tokenName={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'share'}\n          text={`You have successfully deposited in Idle!<br />Enjoy <strong>${this.state.tokenAPY}% APY</strong> on your <strong>${this.props.selectedToken}</strong>!`}\n          tweet={`I'm earning ${this.state.tokenAPY}% APY on my ${this.props.selectedToken} with @idlefinance! Go to ${this.functionsUtil.getGlobalConfig(['baseURL'])} and start earning now from your idle tokens!`}\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default DepositRedeem;\n","import theme from '../theme';\nimport { Bar } from '@nivo/bar';\nimport React, { Component } from 'react';\nimport AssetField from '../AssetField/AssetField';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Text, Input, Icon, Tooltip } from \"rimble-ui\";\n\nclass EstimatedEarnings extends Component {\n\n  state = {\n    chartData:null,\n    chartProps:null,\n    inputValue:1000,\n    maxInputValue:999999999999999\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    this.loadChart();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const tokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    if (tokenChanged){\n      this.loadChart();\n    }\n  }\n\n  async loadChart(){\n\n    const tokenApy = await this.functionsUtil.getTokenApy(this.props.tokenConfig);\n\n    if (!tokenApy){\n      return false;\n    }\n\n    const amount = this.functionsUtil.BNify(this.state.inputValue);\n    const earningsYear = amount.times(this.props.tokenApy.div(100));\n\n    const amountMonth = parseFloat(earningsYear.div(12));\n    const amount3Months = parseFloat(earningsYear.div(4));\n    const amount6Months = parseFloat(earningsYear.div(2));\n    const amountYear = parseFloat(earningsYear.div(1));\n\n    const chartData = [\n      {\n        perc:1/12,\n        label:'MONTH',\n        value:amountMonth,\n        month:amountMonth,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken.toUpperCase(),'color','rgb']).join(','),\n        monthColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken.toUpperCase(),'color','hsl']).join(',')+')',\n      },\n      {\n        perc:3/12,\n        label:'3 MONTHS',\n        value:amount3Months,\n        month3:amount3Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken.toUpperCase(),'color','rgb']).join(','),\n        month3Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken.toUpperCase(),'color','hsl']).join(',')+')',\n      },\n      {\n        perc:6/12,\n        label:'6 MONTHS',\n        value:amount6Months,\n        month6:amount6Months,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken.toUpperCase(),'color','rgb']).join(','),\n        month6Color:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken.toUpperCase(),'color','hsl']).join(',')+')',\n      },\n      {\n        perc:1,\n        label:'YEAR',\n        year:amountYear,\n        value:amountYear,\n        color:this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken.toUpperCase(),'color','rgb']).join(','),\n        yearColor:'hsl('+this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken.toUpperCase(),'color','hsl']).join(',')+')',\n      }\n    ];\n\n    let labelTextColorModifiers = this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.selectedToken.toUpperCase(),'chart','labelTextColorModifiers']);\n\n    const maxGridLines = 4;\n    const gridYStep = amountYear/maxGridLines;\n    const gridYValues = [0];\n    for (let i=1;i<=maxGridLines;i++){\n      const gridYValue = i*gridYStep;\n      gridYValues.push(gridYValue);\n    }\n\n    const chartProps = {\n      padding: 0.2,\n      animate: false,\n      indexBy: 'label',\n      // enableLabel: false,\n      labelSkipWidth: 16,\n      labelSkipHeight: 16,\n      keys: ['month','month3','month6','year'],\n      colors: ({ id, data }) => data[`${id}Color`],\n      label: d => this.functionsUtil.abbreviateNumber(d.value,2,4)+' '+this.props.selectedToken,\n      labelTextColor: labelTextColorModifiers ? { from: 'color', modifiers: [ labelTextColorModifiers ] } : null,\n      isInteractive:false,\n      minValue:0,\n      gridYValues,\n      // maxValue:amountYear,\n      axisLeft:{\n        format: v => this.functionsUtil.abbreviateNumber(v,1,3),\n        tickValues:gridYValues,\n        orient: 'left',\n        tickSize: 0,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendPosition: 'middle'\n      },\n      axisBottom:{\n        legend: '',\n        tickSize:0,\n        tickPadding: 15,\n        orient: 'bottom',\n      },\n      theme:{\n        labels:{\n          text:{\n            fontSize:15,\n            fontWeight:600,\n            fill:theme.colors.counter,\n            fontFamily: theme.fonts.sansSerif\n          }\n        },\n        axis: {\n          ticks: {\n            text: {\n              fontSize:14,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '9 5'\n          }\n        },\n      },\n      margin: this.props.isMobile ? { top: 0, right: 0, bottom: 30, left: 0 } : { top: 10, right: 0, bottom: 50, left: 65 }\n    }\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  changeInputValue(e){\n    let inputValue = e.target.value.length && !isNaN(e.target.value) ? Math.min(this.state.maxInputValue,parseFloat(e.target.value)) : 0;\n    inputValue = this.functionsUtil.BNify(inputValue);\n    this.setState({\n      inputValue\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken || !this.props.tokenConfig){\n      return null;\n    }\n\n    const idleTokenEnabled = this.functionsUtil.getGlobalConfig(['govTokens','IDLE','enabled']);\n    const showAPYDisclaimer = idleTokenEnabled && this.functionsUtil.getGlobalConfig(['govTokens','IDLE','showAPR']);\n\n    return (\n      <DashboardCard\n        cardProps={{\n          p:[3,4]\n        }}\n      >\n        <Flex\n          width={1}\n          flexDirection={['column','row']}\n        >\n          <Flex\n            width={[1,0.3]}\n            flexDirection={'column'}\n            justifyContent={'flex-start'}\n          >\n            <Flex\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <AssetField\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n                fieldInfo={{\n                  name:'icon',\n                  props:{\n                    mb:2,\n                    height:'2.5em'\n                  }\n                }}\n              />\n              <Text\n                fontSize={2}\n                color={'cellText'}\n                textAlign={'center'}\n              >\n                Set the amount and see your estimated earnings on time based on the current APY: { this.props.tokenApy ? `${this.props.tokenApy.toFixed(2)}%` : null}\n                {\n                  showAPYDisclaimer && \n                    <Flex\n                      style={{\n                        display:'inline-flex',\n                        verticalAlign:'middle'\n                      }}\n                    >\n                      <Tooltip\n                        placement={'top'}\n                        message={this.functionsUtil.getGlobalConfig(['messages','apyLong'])}\n                      >\n                        <Icon\n                          ml={1}\n                          name={\"Info\"}\n                          size={'1em'}\n                          color={'cellTitle'}\n                        />\n                      </Tooltip>\n                    </Flex>\n                }\n              </Text>\n            </Flex>\n            <Flex\n              mt={3}\n              flexDirection={'column'}\n            >\n              <Input\n                min={0}\n                type={\"number\"}\n                required={true}\n                borderRadius={2}\n                fontWeight={500}\n                textAlign={'center'}\n                height={['3em','3.4em']}\n                borderColor={'cardBorder'}\n                boxShadow={'none !important'}\n                max={this.state.maxInputValue}\n                backgroundColor={'cardBgHover'}\n                onChange={this.changeInputValue.bind(this)}\n                border={`1px solid ${theme.colors.divider}`}\n                placeholder={`Insert ${this.props.selectedToken.toUpperCase()} amount`}\n                value={this.state.inputValue && !isNaN(this.state.inputValue) ? this.state.inputValue : ''}\n              />\n            </Flex>\n            <Flex\n              mt={3}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                buttonProps={{\n                  width:[1,1/2],\n                }}\n                handleClick={this.loadChart.bind(this)}\n              >\n                CALCULATE\n              </RoundButton>\n            </Flex>\n          </Flex>\n          <Flex\n            mt={[3,0]}\n            width={[1,0.7]}\n            id={'estimated-earnings-chart'}\n          >\n            {\n              this.props.isMobile ? (\n                <Flex\n                  width={1}\n                  flexDirection={'column'}\n                >\n                  {\n                    this.state.chartData !== null && this.state.chartData.map((v,index) => (\n                      <Flex\n                        py={2}\n                        my={2}\n                        width={1}\n                        flexDirection={'row'}\n                        key={`earnings_${index}`}\n                      >\n                        <Flex\n                          width={0.35}\n                          alignItems={'center'}\n                          justifyContent={'flex-start'}\n                        >\n                          <Text\n                            fontSize={1}\n                            fontWeight={3}\n                            color={'legend'}\n                          >\n                            {v.label}\n                          </Text>\n                        </Flex>\n                        <Flex\n                          width={0.65}\n                          position={'relative'}\n                          alignItems={'center'}\n                          minHeight={['20px','35px']}\n                          justifyContent={'center'}\n                        >\n                          <Flex\n                            zIndex={1}\n                            position={'relative'}\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Text\n                              fontSize={1}\n                              fontWeight={3}\n                              color={'counter'}\n                            >\n                              {this.functionsUtil.abbreviateNumber(v.value,2,4)} {this.props.selectedToken}\n                            </Text>\n                          </Flex>\n                          <Flex\n                            right={0}\n                            width={v.perc}\n                            position={'absolute'}\n                            height={['20px','35px']}\n                            borderRadius={['20px 0 0 20px','35px 0 0 35px']}\n                            style={{background:`linear-gradient(-90deg, rgba(${v.color},0) 0%, rgba(${v.color},1) 100%)`}}\n                          ></Flex>\n                        </Flex>\n                      </Flex>\n                    ))\n                  }\n                </Flex>\n              ) : (\n                <GenericChart\n                  type={Bar}\n                  height={250}\n                  showLoader={true}\n                  {...this.state.chartProps}\n                  data={this.state.chartData}\n                  parentId={'estimated-earnings-chart'}\n                />\n              )\n            }\n          </Flex>\n        </Flex>\n      </DashboardCard>\n    );\n  }\n}\n\nexport default EstimatedEarnings;","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport { Box, Flex, Icon, Text } from \"rimble-ui\";\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport AssetsList from '../AssetsList/AssetsList';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport FundsOverview from '../FundsOverview/FundsOverview';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport DepositRedeem from '../DepositRedeem/DepositRedeem';\nimport CardIconButton from '../CardIconButton/CardIconButton';\nimport ActiveCoverages from '../ActiveCoverages/ActiveCoverages';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport EstimatedEarnings from '../EstimatedEarnings/EstimatedEarnings';\n\nclass AssetPage extends Component {\n\n  state = {\n    tokenApy:{},\n    tokenFees:{},\n    tokenBalance:{},\n    tokenApproved:{},\n    activeModal:null,\n    idleTokenPrice:{},\n    userHasFunds:false,\n    govTokensBalance:{},\n    idleTokenBalance:{},\n    redeemableBalance:{},\n    govTokensDisabled:{},\n    availableGovTokens:{},\n    tokenFeesPercentage:{},\n    componentMounted:false,\n    govTokensUserBalances:{}\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadTokensInfo(){\n\n    if (!this.props.account || !this.props.contractsInitialized){\n      return this.setState({\n        userHasFunds:false\n      });\n    }\n\n    const newState = {...this.state};\n    // await this.functionsUtil.asyncForEach(Object.keys(this.props.availableTokens),async (token) => {\n    const token = this.props.selectedToken;\n    const tokenConfig = this.props.availableTokens[token];\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[token] = tokenConfig;\n\n    const [\n      tokenFeesPercentage,\n      idleTokenPrice,\n      tokenApy,\n      tokenBalance,\n      tokenFees,\n      idleTokenBalance,\n      tokenApproved,\n      govTokensUserBalances,\n      govTokensBalance\n    ] = await Promise.all([\n      this.functionsUtil.getTokenFees(tokenConfig),\n      this.functionsUtil.getIdleTokenPrice(tokenConfig),\n      this.functionsUtil.getTokenApy(this.props.tokenConfig),\n      this.functionsUtil.getTokenBalance(token,this.props.account),\n      this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n      this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n      this.functionsUtil.checkTokenApproved(token,tokenConfig.idle.address,this.props.account),\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,null,null),\n      this.functionsUtil.getGovTokensUserTotalBalance(this.props.account,govTokenAvailableTokens,'DAI',false)\n    ]);\n\n    newState.tokenFees[token] = tokenFees;\n    newState.tokenBalance[token] = tokenBalance;\n    newState.tokenApproved[token] = tokenApproved;\n    newState.idleTokenPrice[token] = idleTokenPrice;\n    newState.idleTokenBalance[token] = idleTokenBalance;\n    newState.govTokensBalance[token] = govTokensBalance;\n    newState.tokenFeesPercentage[token] = tokenFeesPercentage;\n    newState.govTokensUserBalances[token] = govTokensUserBalances;\n    newState.govTokensDisabled[token] = tokenConfig.govTokensDisabled;\n    newState.tokenApy[token] = tokenApy && !tokenApy.isNaN() ? tokenApy : null;\n    newState.redeemableBalance[token] = idleTokenBalance && idleTokenPrice ? idleTokenBalance.times(idleTokenPrice) : this.functionsUtil.BNify(0);\n    // });\n\n    newState.availableGovTokens = this.functionsUtil.getTokenGovTokens(this.props.tokenConfig);\n\n    // console.log('govTokensBalance',newState.govTokensBalance);\n    // console.log('availableGovTokens',newState.availableGovTokens);\n    // console.log('govTokensUserBalances',newState.govTokensUserBalances);\n\n    newState.componentMounted = true;\n    newState.userHasFunds = this.props.account && newState.idleTokenBalance[token] && this.functionsUtil.BNify(newState.idleTokenBalance[token]).gt(0);\n\n    // console.log('loadTokensInfo',this.props.account,this.props.contractsInitialized,newState);\n\n    this.setState(newState);\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n    window.loadTokensInfo = this.loadTokensInfo.bind(this);\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    const selectedTokenChanged = prevProps.selectedToken !== this.props.selectedToken;\n    const availableTokensChanged = JSON.stringify(prevProps.availableTokens) !== JSON.stringify(this.props.availableTokens);\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n    if (accountChanged || transactionsChanged || availableTokensChanged || selectedTokenChanged){\n      // console.log('AssetPage - availableTokensChanged',availableTokensChanged);\n      this.loadTokensInfo();\n    }\n  }\n\n  render() {\n\n    // const currentNetwork = this.functionsUtil.getRequiredNetwork();\n    const nexusMutualConfig = this.functionsUtil.getGlobalConfig(['tools','nexusMutual']);\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            <Breadcrumb\n              {...this.props}\n              isMobile={this.props.isMobile}\n              path={[this.props.selectedToken]}\n              handleClick={ e => this.props.goToSection(this.props.selectedStrategy) }\n              text={this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])}\n            />\n          </Flex>\n          <Flex\n            width={0.5}\n            justifyContent={'flex-end'}\n          >\n            <CardIconButton\n              icon={'Add'}\n              {...this.props}\n              text={'Add funds'}\n              handleClick={ e => this.setActiveModal('buy') }\n            />\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Deposit / Redeem\n        </Title>\n        {\n          /*\n          currentNetwork.id === 137 ? (\n            <Flex\n              width={1}\n              minHeight={'45vh'}\n              alignItems={'center'}\n              flexDirection={'row'}\n              justifyContent={'center'}\n            >\n              <DashboardCard\n                cardProps={{\n                  p:3,\n                  width:[1,0.5],\n                }}\n              >\n                <Flex\n                  aligItems={'center'}\n                  alignItems={'center'}\n                  flexDirection={'column'}\n                >\n                  <Icon\n                    size={'2.3em'}\n                    color={'cellText'}\n                    name={'AccessTime'}\n                  />\n                  <Text\n                    mt={2}\n                    fontSize={2}\n                    color={'cellText'}\n                    textAlign={'center'}\n                  >\n                    Hang on, please!<br />The {this.functionsUtil.getGlobalConfig(['strategies',this.props.selectedStrategy,'title'])} strategy has not yet been activated in Polygon.\n                  </Text>\n                  <RoundButton\n                    buttonProps={{\n                      mt:3,\n                      width:[1,1/2]\n                    }}\n                    handleClick={e => this.props.goToSection(`stake`)}\n                  >\n                    Go to Staking\n                  </RoundButton>\n                </Flex>\n              </DashboardCard>\n            </Flex>\n          ) :\n          */\n          (\n            <>\n              <Flex\n                width={1}\n              >\n                <DepositRedeem\n                  {...this.props}\n                  tokenFees={this.state.tokenFees[this.props.selectedToken]}\n                  tokenBalance={this.state.tokenBalance[this.props.selectedToken]}\n                  tokenApproved={this.state.tokenApproved[this.props.selectedToken]}\n                  govTokensBalance={this.state.govTokensBalance[this.props.selectedToken]}\n                  idleTokenBalance={this.state.idleTokenBalance[this.props.selectedToken]}\n                  redeemableBalance={this.state.redeemableBalance[this.props.selectedToken]}\n                  tokenFeesPercentage={this.state.tokenFeesPercentage[this.props.selectedToken]}\n                  govTokensUserBalances={this.state.govTokensUserBalances[this.props.selectedToken]}\n                />\n              </Flex>\n              {\n                this.state.userHasFunds && nexusMutualConfig.enabled && Object.keys(nexusMutualConfig.props.availableTokens).includes(this.props.tokenConfig.idle.token) && (\n                  <Flex\n                    width={1}\n                    id={'active-coverages'}\n                    flexDirection={'column'}\n                  >\n                    <ActiveCoverages\n                      {...this.props}\n                      titleProps={{\n                        mb:3,\n                        mt:[3,4],\n                      }}\n                      title={'Coverage'}\n                      availableTokens={[this.props.tokenConfig.idle.token]}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        id={'no-active-cover'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        <DashboardCard\n                          cardProps={{\n                            py:3,\n                            px:[3,4],\n                            width:[1,'auto'],\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                          >\n                            <Icon\n                              my={[0,2]}\n                              size={'3em'}\n                              name={nexusMutualConfig.icon}\n                            />\n                            <Text\n                              mb={1}\n                              fontSize={[2,3]}\n                              fontWeight={500}\n                              textAlign={'center'}\n                            >\n                              You don't have an active coverage\n                            </Text>\n                            <Text\n                              mb={2}\n                              color={'link'}\n                              fontSize={[1,2]}\n                              fontWeight={500}\n                              textAlign={'center'}\n                            >\n                              {nexusMutualConfig.desc}\n                            </Text>\n                            <RoundButton\n                              buttonProps={{\n                                mt:1,\n                                width:'auto',\n                                minHeight:'40px',\n                                mainColor:'redeem',\n                                size:this.props.isMobile ? 'small' : 'medium'\n                              }}\n                              handleClick={ e => this.props.goToSection(`tools/${nexusMutualConfig.route}/deposit/${this.props.tokenConfig.idle.token}`) }\n                            >\n                              <Flex\n                                alignItems={'center'}\n                                flexDirection={'row'}\n                                justifyContent={'center'}\n                              >\n                                <Text\n                                  color={'white'}\n                                  fontSize={[1,2]}\n                                  fontWeight={500}\n                                >\n                                  Get Covered\n                                </Text>\n                                <Icon\n                                  ml={1}\n                                  size={'1.3em'}\n                                  name={'KeyboardArrowRight'}\n                                />\n                              </Flex>\n                            </RoundButton>\n                          </Flex>\n                        </DashboardCard>\n                      </Flex>\n                    </ActiveCoverages>\n                  </Flex>\n                )\n              }\n              {\n                this.state.userHasFunds && this.props.account && (\n                  <Flex\n                    mb={[0,4]}\n                    width={1}\n                    flexDirection={'column'}\n                    id={'funds-overview-container'}\n                  >\n                    <Title my={[3,4]}>Funds Overview</Title>\n                    <FundsOverview\n                      {...this.props}\n                      tokenFees={this.state.tokenFees[this.props.selectedToken]}\n                    />\n                  </Flex>\n                )\n              }\n              {\n                this.state.userHasFunds && this.props.account && !this.state.govTokensDisabled[this.props.selectedToken] && Object.keys(this.state.availableGovTokens).length>0 && \n                  <Flex\n                    width={1}\n                    id={\"yield-farming\"}\n                    flexDirection={'column'}\n                  >\n                    <Title my={[3,4]}>Yield Farming</Title>\n                    <AssetsList\n                      enabledTokens={Object.keys(this.state.availableGovTokens)}\n                      cols={[\n                        {\n                          title:'TOKEN',\n                          props:{\n                            width:[0.30,0.15]\n                          },\n                          fields:[\n                            {\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:['1.4em','2.3em']\n                              }\n                            },\n                            {\n                              name:'tokenName'\n                            }\n                          ]\n                        },\n                        {\n                          mobile:false,\n                          title:'BALANCE',\n                          props:{\n                            width:[0.33, 0.25],\n                          },\n                          fields:[\n                            {\n                              name:'tokenBalance',\n                              props:{\n                                decimals: this.props.isMobile ? 6 : 8\n                              }\n                            }\n                          ]\n                        },\n                        {\n                          title:'REDEEMABLE',\n                          desc:this.functionsUtil.getGlobalConfig(['messages','govTokenRedeemableBalance']),\n                          props:{\n                            width:[0.35,0.30],\n                            justifyContent:['center','flex-start']\n                          },\n                          fields:[\n                            {\n                              name:'redeemableBalance',\n                              props:{\n                                decimals: this.props.isMobile ? 6 : 8\n                              }\n                            },\n                          ]\n                        },\n                        {\n                          title:'DISTRIBUTION',\n                          desc:this.functionsUtil.getGlobalConfig(['messages','userDistributionSpeed']),\n                          props:{\n                            width:[0.35,0.30],\n                          },\n                          fields:[\n                            {\n                              name:'userDistributionSpeed',\n                              props:{\n                                decimals:6\n                              }\n                            }\n                          ]\n                        },\n                        /*\n                        {\n                          title:'APR',\n                          desc:this.functionsUtil.getGlobalConfig(['messages','govTokenApr']),\n                          props:{\n                            width:[0.2,0.17],\n                          },\n                          fields:[\n                            {\n                              name:'apr',\n                            }\n                          ]\n                        },\n                        {\n                          title:'TOKEN PRICE',\n                          desc:this.functionsUtil.getGlobalConfig(['messages','tokenPrice']),\n                          mobile:false,\n                          props:{\n                            width: 0.17,\n                          },\n                          parentProps:{\n                            width:1,\n                            pr:[2,4]\n                          },\n                          fields:[\n                            {\n                              name:'tokenPrice',\n                              props:{\n                                unit:'$',\n                                unitPos:'left',\n                                unitProps:{\n                                  mr:1,\n                                  fontWeight:3,\n                                  fontSize:[0,2],\n                                  color:'cellText'\n                                }\n                              }\n                            }\n                          ]\n                        },\n                        */\n                      ]}\n                      {...this.props}\n                      availableTokens={this.state.availableGovTokens}\n                    />\n                  </Flex>\n              }\n              {\n              this.props.account && this.state.tokenApy[this.props.selectedToken] && \n                <Flex\n                  mb={[3,4]}\n                  width={1}\n                  flexDirection={'column'}\n                  id={'estimated-earnings-container'}\n                >\n                  <Title my={[3,4]}>Estimated earnings</Title>\n                  <EstimatedEarnings\n                    {...this.props}\n                    tokenApy={this.state.tokenApy[this.props.selectedToken]}\n                  />\n                </Flex>\n              }\n              {\n              this.props.account && \n                <Flex\n                  mb={[3,4]}\n                  width={1}\n                  flexDirection={'column'}\n                  id={'transactions-container'}\n                >\n                  <Title my={[3,4]}>Transactions</Title>\n                  <TransactionsList\n                    {...this.props}\n                    enabledTokens={[this.props.selectedToken]}\n                    cols={[\n                      {\n                        title: this.props.isMobile ? '' : 'HASH',\n                        props:{\n                          width:[0.15,0.24]\n                        },\n                        fields:[\n                          {\n                            name:'icon',\n                            props:{\n                              mr:[0,2]\n                            }\n                          },\n                          {\n                            name:'hash',\n                            mobile:false\n                          }\n                        ]\n                      },\n                      {\n                        title:'ACTION',\n                        mobile:false,\n                        props:{\n                          width:0.15,\n                        },\n                        fields:[\n                          {\n                            name:'action'\n                          }\n                        ]\n                      },\n                      {\n                        title:'DATE',\n                        props:{\n                          width:[0.32,0.23],\n                        },\n                        fields:[\n                          {\n                            name:'date'\n                          }\n                        ]\n                      },\n                      {\n                        title:'STATUS',\n                        props:{\n                          width:[0.18,0.22],\n                          justifyContent:['center','flex-start']\n                        },\n                        fields:[\n                          {\n                            name:'statusIcon',\n                            props:{\n                              mr:[0,2]\n                            }\n                          },\n                          {\n                            mobile:false,\n                            name:'status'\n                          }\n                        ]\n                      },\n                      {\n                        title:'AMOUNT',\n                        props:{\n                          width:0.19,\n                        },\n                        fields:[\n                          {\n                            name:'amount'\n                          },\n                        ]\n                      },\n                      {\n                        title:'ASSET',\n                        props:{\n                          width:[0.15,0.20],\n                          justifyContent:['center','flex-start']\n                        },\n                        fields:[\n                          {\n                            name:'tokenIcon',\n                            props:{\n                              mr:[0,2],\n                              height:['1.4em','1.6em']\n                            }\n                          },\n                          {\n                            mobile:false,\n                            name:'tokenName'\n                          },\n                        ]\n                      },\n                    ]}\n                  />\n                </Flex>\n              }\n            </>\n          )\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.props.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport { Text, Modal, Flex, Link } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass BetaModal extends React.Component {\n\n  state = {};\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    this.functionsUtil.setLocalStorage('betaApproved',true);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','650px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            pt={3}\n            iconHeight={'40px'}\n            title={'Beta Version'}\n            icon={'images/warning.svg'}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                fontSize={2}\n                textAlign={'left'}\n                color={'dark-gray'}\n              >\n                You're about to enter Idle Finance Beta Dashboard – this is the place where several un-audited and risky features are being tested!<br />Please use at your own risk, or visit the official website at <Link fontSize={2} mainColor={'primary'} hoverColor={'primary'} href={this.functionsUtil.getGlobalConfig(['baseURL'])}>{this.functionsUtil.getGlobalConfig(['baseURL'])}</Link>.\n              </Text>\n            </Flex>\n            <Flex\n              my={3}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                handleClick={this.closeModal}\n                buttonProps={{\n                  width:['100%','40%']\n                }}\n              >\n                Continue Anyway\n              </RoundButton>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default BetaModal;","import React, { Component } from 'react';\nimport RoundButton from '../RoundButton/RoundButton';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport TxProgressBar from '../TxProgressBar/TxProgressBar';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport { Flex, Box, Text, Icon, Tooltip, Link, Input } from \"rimble-ui\";\nimport FastBalanceSelector from '../FastBalanceSelector/FastBalanceSelector';\n\nclass CurveDeposit extends Component {\n\n  state = {\n    processing:{\n      txHash:null,\n      loading:false\n    },\n    inputValue:null,\n    maxSlippage:0.2,\n    depositSlippage:null,\n    redeemableBalance:null,\n    migrationContract:null,\n    curveTokensBalance:null,\n    migrationSucceeded:false,\n    fastBalanceSelector:null,\n    migrationContractApproved:false,\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n    await this.initToken();\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n\n    const accountChanged = prevProps.account !== this.props.account;\n    const idleTokenBalanceChanged = prevProps.idleTokenBalance !== this.props.idleTokenBalance;\n    if (accountChanged || idleTokenBalanceChanged){\n      await this.initToken();\n    }\n    \n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector !== prevState.fastBalanceSelector;\n    if (fastBalanceSelectorChanged){\n      this.setInputValue();\n    }\n\n    const inputValueChanged = this.state.inputValue !== prevState.inputValue;\n    if (inputValueChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  changeInputValue = (e) => {\n    const inputValue = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(inputValue);\n\n    const fastBalanceSelector = null;\n\n    this.setState((prevState) => ({\n      inputValue,\n      fastBalanceSelector,\n    }));\n  }\n\n  setInputValue = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n    const inputValue = this.props.idleTokenBalance ? this.functionsUtil.BNify(this.props.idleTokenBalance).times(selectedPercentage) : null;\n\n    this.checkButtonDisabled(inputValue);\n\n    this.setState({\n      inputValue\n    });\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector).div(100);\n  }\n\n  setFastBalanceSelector = (fastBalanceSelector) => {\n    this.setState({\n      fastBalanceSelector\n    });\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!amount){\n      amount = this.state.inputValue;\n    }\n\n    const buttonDisabled = !amount || amount.gt(this.state.idleTokenBalance);\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  approve = async () => {\n    const migrationContract = this.state.migrationContract;\n    if (migrationContract){\n\n      // Check if the migration contract is approved\n      const migrationContractApproved = await this.checkMigrationContractApproved();\n\n      if (!migrationContractApproved){\n\n        const callbackApprove = (tx,error) => {\n          // Send Google Analytics event\n          const eventData = {\n            eventAction: 'approve',\n            eventCategory: 'CurveDeposit',\n            eventLabel: tx ? tx.status : null\n          };\n\n          const txSucceeded = tx && tx.status === 'success';\n\n          // console.log('callbackApprove',tx,error);\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            migrationContractApproved: txSucceeded, // True\n            processing: {\n              ...prevState.processing,\n              txHash:null,\n              loading:false\n            }\n          }));\n\n          if (typeof this.props.callbackApprove === 'function' && txSucceeded){\n            this.props.callbackApprove(tx);\n          }\n\n          this.checkMigration();\n        };\n\n        const callbackReceiptApprove = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              txHash\n            }\n          }));\n        };\n\n        this.functionsUtil.enableERC20(this.props.selectedToken,migrationContract.address,callbackApprove,callbackReceiptApprove);\n\n        this.setState((prevState) => ({\n          processing: {\n            ...prevState.processing,\n            txHash:null,\n            loading:true\n          },\n          migrationContractApproved:false\n        }));\n      } else {\n        this.setState({\n          migrationContractApproved:true\n        });\n      }\n    }\n  }\n\n  deposit = async () => {\n\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n    if (!inputValue){\n      return false;\n    }\n\n    const callbackDeposit = (tx,error) => {\n      const txSucceeded = tx.status === 'success';\n\n      // Send Google Analytics event\n      const eventData = {\n        eventLabel: tx.status,\n        eventCategory: `CurveDeposit`,\n        eventAction: this.props.selectedToken,\n        eventValue: inputValue.toFixed()\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        processing: {\n          txHash:null,\n          loading:false\n        }\n      }));\n\n      if (typeof this.props.callbackDeposit === 'function' && txSucceeded){\n        this.props.callbackDeposit(tx);\n      }\n    };\n\n    const callbackReceiptDeposit = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          txHash\n        }\n      }));\n    };\n\n    const contractName = this.state.migrationContract.name;\n    const _amount = this.functionsUtil.normalizeTokenAmount(inputValue,this.props.tokenConfig.decimals);\n    const depositParams = await this.getMigrationParams(_amount);\n\n    this.props.contractMethodSendWrapper(contractName, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        loading:true\n      }\n    }));\n  }\n\n  cancelTransaction = async () => {\n    this.setState({\n      processing: {\n        txHash:null,\n        loading:false\n      }\n    });\n  }\n\n  setMaxSlippage = (maxSlippage) => {\n    this.setState({\n      maxSlippage\n    });\n  }\n\n  async getMigrationParams(toMigrate){\n    const migrationParams = [];\n    const curveTokenConfig = this.functionsUtil.getGlobalConfig(['curve','availableTokens',this.props.selectedToken]);\n\n    if (!curveTokenConfig){\n      return false;\n    }\n    \n    const migrationContractParams = curveTokenConfig.migrationParams;\n    if (migrationContractParams.n_coins){\n      const amounts = await this.functionsUtil.getCurveAmounts(this.props.selectedToken,toMigrate,true);\n      let minMintAmount = await this.functionsUtil.getCurveTokenAmount(amounts);\n\n      if (this.state.maxSlippage){\n        minMintAmount = this.functionsUtil.BNify(minMintAmount);\n        minMintAmount = minMintAmount.minus(minMintAmount.times(this.functionsUtil.BNify(this.state.maxSlippage).div(100)));\n        minMintAmount = this.functionsUtil.integerValue(minMintAmount);\n      }\n\n      migrationParams.push(amounts);\n      migrationParams.push(minMintAmount);\n    }\n\n    return migrationParams;\n  }\n\n  async calculateSlippage(){\n    const inputValue = this.state.inputValue ? this.functionsUtil.BNify(this.state.inputValue) : null;\n\n    if (inputValue){\n      let underlyingBalanceToDeposit = inputValue;\n      if (underlyingBalanceToDeposit){\n        const idleTokenPrice = await this.functionsUtil.getIdleTokenPrice(this.props.tokenConfig);\n        if (idleTokenPrice){\n          underlyingBalanceToDeposit = underlyingBalanceToDeposit.times(idleTokenPrice);\n        }\n      } else {\n        underlyingBalanceToDeposit = this.functionsUtil.BNify(0);\n      }\n\n      const normalizeIdleTokenBalance = this.functionsUtil.normalizeTokenAmount(underlyingBalanceToDeposit,this.props.tokenConfig.decimals);\n      let depositSlippage = await this.functionsUtil.getCurveSlippage(this.props.tokenConfig.idle.token,normalizeIdleTokenBalance);\n      if (depositSlippage){\n        depositSlippage = depositSlippage.times(100);\n      }\n\n      this.setState({\n        depositSlippage\n      });\n    }\n  }\n\n  async checkMigrationContractApproved(){\n    const migrationContract = this.state.migrationContract || await this.functionsUtil.getCurveSwapContract();\n    if (migrationContract){\n      return await this.functionsUtil.checkTokenApproved(this.props.tokenConfig.idle.token,migrationContract.address,this.props.account);\n    }\n    return false;\n  }\n\n  async initToken(){\n\n    // Init and check migration contract\n    const migrationContract = await this.functionsUtil.getCurveSwapContract();\n    const migrationContractApproved = await this.checkMigrationContractApproved();\n\n    this.setState({\n      migrationContract,\n      migrationContractApproved\n    });\n  }\n\n  approveCallback = () => {\n    this.initToken();\n  }\n\n  migrationCallback = () => {\n    this.setState({\n      migrationSucceeded:true\n    });\n  }\n\n  render() {\n\n    if (!this.props.selectedToken){\n      return null;\n    }\n\n    // const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    const hasCurveTokens = this.state.curveTokensBalance && this.state.curveTokensBalance.gt(0);\n\n    return (\n      <Flex\n        width={1}\n        alignItems={'center'}\n        flexDirection={'column'}\n        justifyContent={'center'}\n      >\n        <Flex\n          width={[1,0.36]}\n          alignItems={'stretch'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n        >\n            {\n              this.props.idleTokenBalance && this.props.idleTokenBalance.gt(0) && (\n                <Box\n                  width={1}\n                >\n                  <DashboardCard\n                    cardProps={{\n                      p:3,\n                      px:[2,4]\n                    }}\n                  >\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    > \n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ this.state.migrationContractApproved ? 'CheckBox' : 'LooksOne'}\n                          color={ this.state.migrationContractApproved ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Approve the Curve contract\n                        </Text>\n                      </Flex>\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                      >\n                        <Icon\n                          size={'1.5em'}\n                          name={ hasCurveTokens ? 'CheckBox' : 'LooksTwo'}\n                          color={ hasCurveTokens ? this.props.theme.colors.transactions.status.completed : 'cellText'}\n                        />\n                        <Text\n                          ml={2}\n                          fontSize={2}\n                          color={'cellText'}\n                          textAlign={'left'}\n                        >\n                          Deposit your {this.props.tokenConfig.idle.token}\n                        </Text>\n                      </Flex>\n                    </Flex>\n                  </DashboardCard>\n                  {\n                    !this.state.migrationContractApproved ?\n                      this.state.processing.loading ? (\n                        <Flex\n                          mt={3}\n                          flexDirection={'column'}\n                        >\n                          <TxProgressBar\n                            web3={this.props.web3}\n                            waitText={`Approve estimated in`}\n                            hash={this.state.processing.txHash}\n                            endMessage={`Finalizing approve request...`}\n                            cancelTransaction={this.cancelTransaction.bind(this)}\n                          />\n                        </Flex>\n                      ) : (\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            mt:3,\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                          >\n                            <Icon\n                              size={'2.3em'}\n                              name={'LockOpen'}\n                              color={'cellText'}\n                            />\n                            <Text\n                              mt={1}\n                              fontSize={2}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              To deposit your {this.props.selectedToken} in the Curve Pool you need to approve the Smart-Contract first.\n                            </Text>\n                            <RoundButton\n                              buttonProps={{\n                                mt:3,\n                                width:[1,1/2]\n                              }}\n                              handleClick={this.approve.bind(this)}\n                            >\n                              Approve\n                            </RoundButton>\n                          </Flex>\n                        </DashboardCard>\n                      )\n                    : this.state.processing.loading ? (\n                      <Flex\n                        mt={3}\n                        flexDirection={'column'}\n                      >\n                        <TxProgressBar\n                          web3={this.props.web3}\n                          waitText={`Deposit estimated in`}\n                          hash={this.state.processing.txHash}\n                          endMessage={`Finalizing deposit request...`}\n                          cancelTransaction={this.cancelTransaction.bind(this)}\n                        />\n                      </Flex>\n                    ) : (\n                      <Box\n                        mt={2}\n                        width={1}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <Text>\n                            Choose max slippage:\n                          </Text>\n                          <Tooltip\n                            placement={'top'}\n                            message={`Max additional slippage on top of the one shown below`}\n                          >\n                            <Icon\n                              ml={1}\n                              size={'1em'}\n                              color={'cellTitle'}\n                              name={\"InfoOutline\"}\n                            />\n                          </Tooltip>\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                          justifyContent={'space-between'}\n                        >\n                          {\n                            [0.2,0.5,1,5].map( slippage => (\n                              <FastBalanceSelector\n                                cardProps={{\n                                  p:1\n                                }}\n                                textProps={{\n                                  fontSize:1\n                                }}\n                                percentage={slippage}\n                                key={`selector_${slippage}`}\n                                onMouseDown={()=>this.setMaxSlippage(slippage)}\n                                isActive={this.state.maxSlippage === parseFloat(slippage)}\n                              />\n                            ))\n                          }\n                        </Flex>\n                        <Flex\n                          mt={2}\n                          mb={3}\n                          width={1}\n                          flexDirection={'column'}\n                        >\n                          <Flex\n                            mb={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={this.state.depositSlippage ? 'space-between' : 'flex-end'}\n                          >\n                            {\n                              this.state.depositSlippage && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                >\n                                  <Text\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    textAlign={'right'}\n                                    style={{\n                                      whiteSpace:'nowrap'\n                                    }}\n                                    color={ parseFloat(this.state.depositSlippage.toFixed(3))>0 ? this.props.theme.colors.transactions.status.failed : this.props.theme.colors.transactions.status.completed }\n                                  >\n                                    {\n                                      parseFloat(this.state.depositSlippage.toFixed(3)) === 0 ?\n                                        'No Slippage'\n                                      : `${ this.state.depositSlippage.gt(0) ? 'Slippage: ' : 'Bonus: ' } ${this.state.depositSlippage.abs().toFixed(3)}%`\n                                    }\n                                  </Text>\n                                  <Tooltip\n                                    placement={'top'}\n                                    message={this.state.depositSlippage.gt(0) ? 'Slippage comes from depositing too many coins not in balance, and current coin prices are additionally accounted for' : 'Bonus comes as an advantage from current coin prices which usually appears for coins which are high in balance'}\n                                  >\n                                    <Icon\n                                      ml={1}\n                                      size={'1em'}\n                                      color={'cellTitle'}\n                                      name={\"InfoOutline\"}\n                                    />\n                                  </Tooltip>\n                                </Flex>\n                              )\n                            }\n                            {\n                              this.props.idleTokenBalance && (\n                                <Flex\n                                  width={1}\n                                  maxWidth={'50%'}\n                                  alignItems={'center'}\n                                  flexDirection={'row'}\n                                  justifyContent={'flex-end'}\n                                >\n                                  <Link\n                                    fontSize={1}\n                                    fontWeight={3}\n                                    color={'dark-gray'}\n                                    textAlign={'right'}\n                                    hoverColor={'copyColor'}\n                                    onClick={ (e) => this.setFastBalanceSelector(100) }\n                                    style={{\n                                      maxWidth:'100%',\n                                      overflow:'hidden',\n                                      whiteSpace:'nowrap',\n                                      textOverflow:'ellipsis'\n                                    }}\n                                  >\n                                    {this.props.idleTokenBalance.toFixed(this.props.isMobile ? 2 : 4)} {this.props.selectedToken}\n                                  </Link>\n                                </Flex>\n                              )\n                            }\n                          </Flex>\n                          <Input\n                            min={0}\n                            type={\"number\"}\n                            required={true}\n                            height={'3.4em'}\n                            borderRadius={2}\n                            fontWeight={500}\n                            boxShadow={'none !important'}\n                            placeholder={`Insert amount`}\n                            onChange={this.changeInputValue.bind(this)}\n                            border={`1px solid ${this.props.theme.colors.divider}`}\n                            value={this.state.inputValue !== null ? this.functionsUtil.BNify(this.state.inputValue).toFixed() : ''}\n                          />\n                          <Flex\n                            mt={2}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'space-between'}\n                          >\n                            {\n                              [25,50,75,100].map( percentage => (\n                                <FastBalanceSelector\n                                  percentage={percentage}\n                                  key={`selector_${percentage}`}\n                                  onMouseDown={()=>this.setFastBalanceSelector(percentage)}\n                                  isActive={this.state.fastBalanceSelector === parseInt(percentage)}\n                                />\n                              ))\n                            }\n                          </Flex>\n                          <Flex\n                            mt={2}\n                            justifyContent={'center'}\n                          >\n                            <RoundButton\n                              buttonProps={{\n                                mt:2,\n                                width:[1,1/2],\n                                disabled:this.state.buttonDisabled\n                              }}\n                              handleClick={this.deposit.bind(this)}\n                            >\n                              Deposit\n                            </RoundButton>\n                          </Flex>\n                        </Flex>\n                      </Box>\n                    )\n                  }\n                </Box>\n              )\n            }\n          {\n            /*\n            this.state.tokenConfig && this.state.redeemableBalance ? (\n              <Box width={1}>\n                <Migrate\n                  {...this.props}\n                  showActions={false}\n                  getTokenPrice={false}\n                  migrationTextProps={{\n                    fontWeight:500\n                  }}\n                  isMigrationTool={true}\n                  migrationImage={{\n                    mb:1,\n                    height:'1.8em',\n                    src:curveConfig.params.image\n                  }}\n                  showBalanceSelector={true}\n                  waitText={'Deposit estimated in'}\n                  tokenConfig={this.state.tokenConfig}\n                  callbackApprove={this.approveCallback.bind(this)}\n                  migrationParams={this.getMigrationParams.bind(this)}\n                  migrationCallback={this.migrationCallback.bind(this)}\n                  approveText={`To deposit your ${this.props.tokenConfig.idle.token} you need to approve Curve smart-contract first.`}\n                  migrationText={`You can deposit ${this.state.redeemableBalance.toFixed(4)} ${this.props.tokenConfig.idle.token} in the Curve Pool${ this.state.depositSlippage ? (this.state.depositSlippage.gte(0) ? ` with <span style=\"color:${this.props.theme.colors.transactions.status.failed}\">${this.state.depositSlippage.times(100).toFixed(2)}% of slippage</span>` : ` with <span style=\"color:${this.props.theme.colors.transactions.status.completed}\">${Math.abs(parseFloat(this.state.depositSlippage.times(100).toFixed(2)))}% of bonus</span>`) : '' }.`}\n                >\n                  {\n                    !this.props.account ? (\n                      <DashboardCard\n                        cardProps={{\n                          p:3,\n                          mt:3\n                        }}\n                      >\n                        <Flex\n                          alignItems={'center'}\n                          flexDirection={'column'}\n                        >\n                          <Icon\n                            size={'2.3em'}\n                            name={'Input'}\n                            color={'cellText'}\n                          />\n                          <Text\n                            mt={2}\n                            fontSize={2}\n                            color={'cellText'}\n                            textAlign={'center'}\n                          >\n                            Please connect with your wallet interact with Idle.\n                          </Text>\n                          <RoundButton\n                            buttonProps={{\n                              mt:2,\n                              width:[1,1/2]\n                            }}\n                            handleClick={this.props.connectAndValidateAccount}\n                          >\n                            Connect\n                          </RoundButton>\n                        </Flex>\n                      </DashboardCard>\n                    ) : (\n                      <DashboardCard\n                        cardProps={{\n                          p:3\n                        }}\n                      >\n                        {\n                          this.state.migrationSucceeded ? (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'DoneAll'}\n                                color={this.props.theme.colors.transactions.status.completed}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You have successfully deposited your {this.props.tokenConfig.idle.token} in the Curve Pool!\n                              </Text>\n                            </Flex>\n                          ) : (\n                            <Flex\n                              alignItems={'center'}\n                              flexDirection={'column'}\n                            >\n                              <Icon\n                                size={'2.3em'}\n                                name={'MoneyOff'}\n                                color={'cellText'}\n                              />\n                              <Text\n                                mt={2}\n                                fontSize={2}\n                                color={'cellText'}\n                                textAlign={'center'}\n                              >\n                                You don't have any {this.props.tokenConfig.idle.token} in your wallet.\n                              </Text>\n                            </Flex>\n                          )\n                        }\n                      </DashboardCard>\n                    )\n                  }\n                </Migrate>\n              </Box>\n            ) : null\n            */\n          }\n        </Flex>\n      </Flex>\n    );\n  }\n}\n\nexport default CurveDeposit;","import theme from '../theme';\nimport { Line } from '@nivo/line';\nimport React, { Component } from 'react';\n// import { linearGradientDef } from '@nivo/core'\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport GenericChart from '../GenericChart/GenericChart';\nimport ChartCustomTooltip from '../ChartCustomTooltip/ChartCustomTooltip';\nimport ChartCustomTooltipRow from '../ChartCustomTooltipRow/ChartCustomTooltipRow';\n\nclass PortfolioEquityCurve extends Component {\n  state = {\n    startDate:null,\n    chartData:null,\n    chartProps:null,\n    chartwidth:null,\n    chartHeight:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentDidMount(){\n    this.loadUtils();\n    this.loadChartData();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n\n    const quickDateSelectionChanged = prevProps.quickDateSelection !== this.props.quickDateSelection;\n    const tokenChanged = JSON.stringify(prevProps.enabledTokens) !== JSON.stringify(this.props.enabledTokens);\n    if (tokenChanged || quickDateSelectionChanged){\n      this.setState({\n        chartData:null\n      },() => {\n        this.componentDidMount();\n      });\n    }\n\n    const mobileChanged = prevProps.isMobile !== this.props.isMobile;\n    if (mobileChanged){\n      this.loadChartData();\n    }\n  }\n\n  async loadChartData() {\n\n    let enabledTokens = this.props.enabledTokens;\n    if (!enabledTokens || !enabledTokens.length){\n      enabledTokens = Object.keys(this.props.availableTokens);\n    }\n\n    const curveTxs = await this.functionsUtil.getCurveTxs(this.props.account,0,'latest',enabledTokens);\n\n    const chartData = [];\n    let tokensBalance = [];\n    const processedTxs = {};\n    let firstTxTimestamp = null;\n    let totalBalance = this.functionsUtil.BNify(0);\n    const curvePoolContract = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n\n    if (curveTxs && curveTxs.length){\n\n      curveTxs.forEach((tx,index) => {\n\n        if (!processedTxs[tx.hash]){\n          processedTxs[tx.hash] = [];\n        }\n\n        if (processedTxs[tx.hash].includes(tx.action)){\n          return;\n        }\n        \n        firstTxTimestamp = firstTxTimestamp ? Math.min(firstTxTimestamp,parseInt(tx.timeStamp)) : parseInt(tx.timeStamp);\n\n        const curveTokens = this.functionsUtil.BNify(tx.curveTokens);\n\n        switch (tx.action){\n          case 'CurveIn':\n          case 'CurveZapIn':\n          case 'CurveDepositIn':\n          case 'CurveTransferIn':\n            totalBalance = totalBalance.plus(curveTokens);\n          break;\n          case 'CurveOut':\n          case 'CurveZapOut':\n          case 'CurveDepositOut':\n          case 'CurveTransferOut':\n            totalBalance = totalBalance.minus(curveTokens);\n          break;\n          default:\n          break;\n        }\n\n        // Reset totalBalance if below zero\n        if (totalBalance.lt(0)){\n          totalBalance = this.functionsUtil.BNify(0);\n        }\n\n        const action = tx.action;\n        const balance = totalBalance;\n        const timeStamp = parseInt(tx.timeStamp);\n        const curveTokenPrice = this.functionsUtil.fixTokenDecimals(tx.curveTokenPrice,curvePoolContract.decimals);\n\n        // console.log(this.functionsUtil.strToMoment(timeStamp*1000).format('YYYY/MM/DD HH:mm'),tx.hash,tx.action,curveTokens.toString(),totalBalance.toString());\n\n        if (!curveTokenPrice.isNaN() && !curveTokenPrice.isNaN()){\n          tokensBalance.push({\n            action,\n            balance,\n            timeStamp,\n            curveTokens,\n            curveTokenPrice\n          });\n\n          processedTxs[tx.hash].push(action);\n        }\n      });\n    }\n\n    // Calculate Start Date\n    let startDate = null;\n    const currentDate = this.functionsUtil.strToMoment(new Date());\n\n    switch (this.props.quickDateSelection){\n      case 'week':\n        startDate = currentDate.clone().subtract(1,'week');\n      break;\n      case 'month':\n        startDate = currentDate.clone().subtract(1,'month');\n      break;\n      case 'month3':\n        startDate = currentDate.clone().subtract(3,'month');\n      break;\n      case 'month6':\n        startDate = currentDate.clone().subtract(6,'month');\n      break;\n      default:\n        startDate = null;\n      break;\n    }\n\n    const days = {};\n    let prevBalances = {};\n    let prevTimestamp = null;\n    let minChartValue = null;\n    let maxChartValue = null;\n    const aggregatedBalancesKeys = {};\n    const tokensBalancesPerDate = {};\n    let aggregatedBalance = this.functionsUtil.BNify(0);\n    // let curveTokenBalance = this.functionsUtil.BNify(0);\n    const currTimestamp = parseInt(new Date().getTime()/1000)+86400;\n\n    const tokensData = await this.functionsUtil.getTokenApiData(Object.values(this.props.availableTokens)[0].address,false,firstTxTimestamp,null,false,3600);\n\n    for (let timeStamp=firstTxTimestamp;timeStamp<=currTimestamp;timeStamp+=this.props.frequencySeconds){\n\n      let foundBalances = {};\n      let tokensBalances = {};\n      timeStamp = Math.min(currTimestamp,timeStamp);\n      let momentDate = this.functionsUtil.strToMoment(timeStamp*1000);\n\n      // eslint-disable-next-line\n      const filteredTokenData = tokensData.filter(tx => (tx.timestamp>=prevTimestamp && tx.timestamp<=timeStamp));\n\n      // eslint-disable-next-line\n      let filteredBalances = tokensBalance.filter(tx => (tx.timeStamp<=timeStamp && (!prevTimestamp || tx.timeStamp>prevTimestamp)));\n      \n      if (!filteredBalances.length){\n        if (prevBalances){\n          filteredBalances = prevBalances;\n          const lastFilteredTx = Object.values(filteredBalances).pop();\n          const currentBalance = parseFloat(lastFilteredTx.balance);\n\n          const lastTokenData = Object.values(filteredTokenData).pop();\n          let curveTokenPrice = null;\n          if (lastTokenData){\n            curveTokenPrice = await this.functionsUtil.getCurveTokenPrice(lastTokenData.blocknumber);\n          }\n\n          // Take idleToken price from API and calculate new balance\n          if (currentBalance>0 && timeStamp>firstTxTimestamp && curveTokenPrice){\n            // Set new curveTokenPrice\n            lastFilteredTx.curveTokenPrice = curveTokenPrice;\n            filteredBalances = [lastFilteredTx];\n          }\n        } else {\n          filteredBalances = [{\n            balance:this.functionsUtil.BNify(0),\n            curveTokenPrice:this.functionsUtil.BNify(0)\n          }];\n        }\n      }\n\n      const lastTx = Object.assign([],filteredBalances).pop();\n      let lastTxBalance = this.functionsUtil.BNify(lastTx.balance).times(lastTx.curveTokenPrice);\n\n      tokensBalances[curvePoolContract.token] = this.functionsUtil.BNify(lastTx.balance);\n      aggregatedBalance = lastTxBalance;\n\n      foundBalances = filteredBalances;\n\n      // console.log(momentDate.format('YYYY/MM/DD 00:00'),lastTx.balance.toString(),lastTx.curveTokenPrice.toString(),lastTxBalance.toString());\n\n      if (startDate === null || momentDate.isSameOrAfter(startDate)){\n        \n        if (momentDate.isAfter(new Date(),'day')){\n          momentDate = this.functionsUtil.strToMoment(new Date());\n        }\n\n        // Force date to midnight\n        const formattedDate = momentDate.format('YYYY/MM/DD 00:00');\n\n        // Save days for axisBottom format\n        days[momentDate.format('YYYY/MM/DD')] = 1;\n\n        const aggregatedBalanceParsed = parseFloat(parseFloat(aggregatedBalance.toFixed(6)));\n\n        aggregatedBalancesKeys[formattedDate] = aggregatedBalanceParsed;\n        tokensBalancesPerDate[formattedDate] = tokensBalances;\n\n        // console.log(formattedDate,tokensBalances);\n\n        minChartValue = minChartValue === null ? aggregatedBalanceParsed : Math.min(minChartValue,aggregatedBalanceParsed);\n        maxChartValue = maxChartValue === null ? aggregatedBalanceParsed : Math.max(maxChartValue,aggregatedBalanceParsed);\n      }\n\n      prevTimestamp = timeStamp;\n      prevBalances = foundBalances;\n    }\n\n    const aggregatedBalances = Object.keys(aggregatedBalancesKeys).map(date => ({\n      x:date,\n      y:aggregatedBalancesKeys[date],\n      balances:tokensBalancesPerDate[date]\n    }));\n\n    let itemIndex = 0;\n    aggregatedBalances.forEach( (item,index) => {\n      const itemPos = Math.floor(itemIndex/aggregatedBalances.length*100);\n      aggregatedBalances[index].itemPos = itemPos;\n      itemIndex++;\n    });\n\n    /*\n    aggregatedBalances.push({\n      x:momentDate.format('YYYY/MM/DD HH:mm'),\n      y:aggregatedBalance\n    });\n    */\n\n    // Add day before to start with zero balance\n    /*\n    const firstTxMomentDate = this.functionsUtil.strToMoment(firstTxTimestamp*1000);\n    if ((startDate === null || startDate.isSameOrBefore(firstTxMomentDate)) && aggregatedBalances.length){\n      const firstItem = aggregatedBalances[0];\n      const firstDate = this.functionsUtil.strToMoment(firstItem.x,'YYYY/MM/DD HH:mm');\n      firstDate.subtract(1,'day');\n      aggregatedBalances.unshift({\n        x:firstDate.format('YYYY/MM/DD HH:mm'),\n        y:0\n      });\n    }\n    */\n\n    // Add token Data\n    chartData.push({\n      id:'USD',\n      color: 'hsl('+ this.functionsUtil.getGlobalConfig(['stats','tokens','USD','color','hsl']).join(',')+')',\n      data:aggregatedBalances\n    });\n\n    let yFormatDecimals = 2;\n    if (maxChartValue-minChartValue<1){\n      yFormatDecimals = 4;\n    }\n\n    if (maxChartValue === minChartValue){\n      minChartValue = Math.max(0,maxChartValue-1);\n    }\n\n    const maxGridLines = 5;\n    const gridYStep = (maxChartValue-minChartValue)/maxGridLines;\n    const gridYValues = [];\n    for (let i=0;i<=maxGridLines;i++){\n      const gridYValue = parseFloat(parseFloat(minChartValue+(i*gridYStep)).toFixed(6));\n      gridYValues.push(gridYValue);\n    }\n    \n    const axisBottomMaxValues = 10;\n    const daysCount = Object.values(days).length;    \n    const daysFrequency = Math.max(1,Math.ceil(daysCount/axisBottomMaxValues));\n\n    const chartProps = {\n      xScale:{\n        type: 'time',\n        format: '%Y/%m/%d %H:%M',\n      },\n      yScale:{\n        type: 'linear',\n        stacked: false,\n        min: minChartValue,\n        max: maxChartValue\n      },\n      xFormat:'time:%b %d %Y',\n      yFormat:value => this.functionsUtil.formatMoney(value,yFormatDecimals),\n      axisBottom: this.props.isMobile ? null : {\n        legend: '',\n        tickSize:0,\n        format: '%b %d',\n        tickPadding: 15,\n        orient: 'bottom',\n        legendOffset: 36,\n        legendPosition: 'middle',\n        tickValues:'every '+daysFrequency+' days'\n      },\n      gridYValues,\n      pointSize:0,\n      useMesh:true,\n      axisLeft: this.props.isMobile ? null : {\n        legend: '',\n        tickSize: 0,\n        orient: 'left',\n        tickPadding: 10,\n        tickRotation: 0,\n        legendOffset: -70,\n        tickValues:gridYValues,\n        legendPosition: 'middle',\n        format: v => this.functionsUtil.abbreviateNumber(v,2),\n      },\n      animate:true,\n      pointLabel:'y',\n      areaOpacity:0.1,\n      enableArea:true,\n      enableSlices:'x',\n      enableGridY:true,\n      curve:'monotoneX',\n      enableGridX:false,\n      pointBorderWidth:1,\n      colors:d => d.color,\n      pointLabelYOffset:-12,\n      areaBaselineValue:minChartValue,\n      pointColor:{ from: 'color', modifiers: []},\n      theme:{\n        axis: {\n          ticks: {\n            text: {\n              fontSize:12,\n              fontWeight:600,\n              fill:theme.colors.legend,\n              fontFamily: theme.fonts.sansSerif\n            }\n          }\n        },\n        grid: {\n          line: {\n            stroke: '#dbdbdb', strokeDasharray: '8 4'\n          }\n        },\n      },\n      /*\n      defs:[\n        linearGradientDef('gradientA', [\n          { offset: 0, color: 'inherit' },\n          { offset: 100, color: 'inherit', opacity: 0 },\n        ]),\n      ],\n      fill:[{ match: '*', id: 'gradientA' }],\n      */\n      margin: this.props.isMobile ? { top: 20, right: 25, bottom: 25, left: 20 } : { top: 30, right: 50, bottom: 45, left: 50 },\n      sliceTooltip:(slideData) => {\n        const { slice } = slideData;\n        const point = slice.points[0];\n        return (\n          <ChartCustomTooltip\n            point={point}\n          >\n            <ChartCustomTooltipRow\n              color={point.color}\n              label={point.serieId}\n              value={`$ ${point.data.yFormatted}`}\n            />\n            {\n            typeof point.data.balances === 'object' && Object.keys(point.data.balances).length>0 &&\n              Object.keys(point.data.balances).map(token => {\n                if (token === point.serieId){\n                  return null;\n                }\n                const tokenInfo = this.functionsUtil.getGlobalConfig(['stats','tokens',token.toUpperCase()]);\n                if (tokenInfo){\n                  const tokenName = tokenInfo.name ? tokenInfo.name : token;\n                  const color = tokenInfo.color.hex;\n                  const balance = point.data.balances[token];\n                  let formattedBalance = this.functionsUtil.formatMoney(balance,2);\n                  if (parseFloat(balance)>=0.01){\n                    return (\n                      <ChartCustomTooltipRow\n                        label={tokenName}\n                        color={color}\n                        key={`row_${token}`}\n                        value={`${formattedBalance}`}\n                      />\n                    );\n                  }\n                }\n                return null;\n              })\n            }\n          </ChartCustomTooltip>\n        );\n      }\n    };\n\n    this.setState({\n      chartData,\n      chartProps\n    });\n  }\n\n  render() {\n    return (\n      <GenericChart\n        type={Line}\n        showLoader={true}\n        {...this.state.chartProps}\n        data={this.state.chartData}\n        parentId={this.props.parentId}\n        height={this.props.chartHeight}\n        parentIdHeight={this.props.parentIdHeight}\n      />\n    );\n  }\n}\n\nexport default PortfolioEquityCurve;","import theme from '../theme';\nimport Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport { Flex, Heading, Text } from \"rimble-ui\";\nimport AssetField from '../AssetField/AssetField';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport PortfolioEquityCurve from '../PortfolioEquityCurve/PortfolioEquityCurve';\n\nclass FundsOverviewCurve extends Component {\n\n  state = {\n    compAPR:null,\n    aggregatedValues:[],\n    govTokensUserBalance:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n  }\n\n  async componentDidMount(){\n\n    await this.functionsUtil.getCurveAvgBuyPrice();\n\n    // debugger;\n\n    await this.functionsUtil.getCurveAvgSlippage();\n\n    // debugger;\n    /*\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[this.props.selectedToken] = this.props.tokenConfig;\n\n    const [govTokensUserBalance,avgAPY,days] = await Promise.all([\n      this.functionsUtil.getGovTokensUserBalances(this.props.account,govTokenAvailableTokens,'DAI'),\n      this.functionsUtil.loadAssetField('avgAPY',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n      this.functionsUtil.loadAssetField('daysFirstDeposit',this.props.selectedToken,this.props.tokenConfig,this.props.account),\n    ]);\n\n    const aggregatedValues = [\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Avg APY',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (avgAPY ? avgAPY.toFixed(2)+'%' : '-') }}\n              />\n            </Flex>\n          )\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Current Allocation',\n          children:(\n            <Flex\n              width={1}\n              id={'allocationChart'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n            >\n              <AssetField\n                {...this.props}\n                showLoader={true}\n                fieldInfo={{\n                  name:'allocationChart'\n                }}\n                parentId={'allocationChart'}\n                token={this.props.selectedToken}\n                tokenConfig={this.props.tokenConfig}\n              />\n            </Flex>\n          ),\n          label:'',\n        }\n      },\n      {\n        flexProps:{\n          width:[1,0.32],\n        },\n        props:{\n          title:'Days since first deposit',\n          children:(\n            <Flex\n              width={1}\n              alignItems={'center'}\n              height={['55px','59px']}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Text\n                lineHeight={1}\n                fontWeight={[3,4]}\n                color={'copyColor'}\n                fontFamily={'counter'}\n                fontSize={['1.7em','1.7em']}\n                dangerouslySetInnerHTML={{ __html: (days ? parseInt(days) : '-') }}\n              />\n            </Flex>\n          )\n        }\n      }\n    ];\n\n    let [tokenAllocation,compAPR] = await Promise.all([\n      this.functionsUtil.getTokenAllocation(this.props.tokenConfig,false,false),\n      this.functionsUtil.getCompAPR(this.props.selectedToken,this.props.tokenConfig)\n    ]);\n\n    if (tokenAllocation){\n      const compoundInfo = this.props.tokenConfig.protocols.find( p => (p.name === 'compound') );\n      if (compoundInfo){\n        if (tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()]){\n          const compoundAllocationPerc = tokenAllocation.protocolsAllocationsPerc[compoundInfo.address.toLowerCase()];\n          compAPR = compAPR.times(compoundAllocationPerc);\n        }\n      }\n    }\n\n    this.setState({\n      compAPR,\n      aggregatedValues,\n      govTokensUserBalance\n    });\n    */\n  }\n\n  async componentDidUpdate(prevProps,prevState){\n    this.loadUtils();\n  }\n\n  render() {\n    return (\n      <Flex\n        width={1}\n        flexDirection={'column'}\n      >\n        {\n          this.state.aggregatedValues.length>0 && \n            <Flex\n              width={1}\n              mb={[0,3]}\n              mt={[2,0]}\n              alignItems={'center'}\n              flexDirection={['column','row']}\n              justifyContent={'space-between'}\n            >\n              {\n                this.state.aggregatedValues.map((v,i) => (\n                  <Flex\n                    {...v.flexProps}\n                    flexDirection={'column'}\n                    key={`aggregatedValue_${i}`}\n                  >\n                    <DashboardCard\n                      cardProps={{\n                        py:[2,3],\n                        mb:[3,0]\n                      }}\n                    >\n                      <Flex\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'column'}\n                        justifyContent={'center'}\n                      >\n                        {\n                          v.props.children ? v.props.children : (\n                            <Text\n                              lineHeight={1}\n                              fontWeight={[3,4]}\n                              color={'copyColor'}\n                              fontFamily={'counter'}\n                              fontSize={[4,'1.7em']}\n                              dangerouslySetInnerHTML={{ __html: v.props.value }}\n                            >\n                            </Text>\n                          )\n                        }\n                        <Text\n                          mt={2}\n                          fontWeight={2}\n                          fontSize={[1,2]}\n                          color={'cellText'}\n                        >\n                          {v.props.title}\n                        </Text>\n                      </Flex>\n                    </DashboardCard>\n                  </Flex>\n                ))\n              }\n            </Flex>\n        }\n        <DashboardCard\n          cardProps={{\n            px:2,\n            py:3\n          }}\n        >\n          <Flex\n            width={1}\n            ml={[0,3]}\n            id={\"funds-overview\"}\n          >\n            <PortfolioEquityCurve\n              {...this.props}\n              chartHeight={350}\n              parentId={'funds-overview'}\n              frequencySeconds={this.functionsUtil.getFrequencySeconds('day',1)}\n            />\n          </Flex>\n          <Flex\n            width={1}\n            flexDirection={['column','row']}\n          >\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Deposited\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'amountLentCurve',\n                  props:{\n                    decimals:4,\n                    maxPrecision:8,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Redeemable\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'redeemableBalanceCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      color:theme.colors.counter,\n                      fontSize: this.props.isMobile ? '1.8em' : '1.9em',\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n              <Flex\n                width={1}\n                mt={'-9px'}\n              >\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'earningsPercCurve',\n                    props:{\n                      fontSize:1,\n                      fontWeight:2,\n                      color:'cellText',\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Earnings\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'earningsCounterCurve',\n                  props:{\n                    decimals:7,\n                    maxPrecision:8,\n                    style:{\n                      fontWeight:300,\n                      fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                      color:theme.colors.counter\n                    },\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            {\n              /*\n              <Flex\n                mb={[2,0]}\n                width={[1,1/5]}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'flex-start'}\n              >\n                <Title\n                  mb={2}\n                  fontSize={[3,4]}\n                  component={Heading.h3}\n                >\n                  Fees\n                </Title>\n                <AssetField\n                  {...this.props}\n                  token={this.props.selectedToken}\n                  fieldInfo={{\n                    name:'feesCounter',\n                    props:{\n                      decimals:7,\n                      maxPrecision:8,\n                      style:{\n                        fontWeight:300,\n                        fontSize:this.props.isMobile ? '1.8em' : '1.9em',\n                        color:theme.colors.counter\n                      },\n                      flexProps:{\n                        justifyContent:'center'\n                      }\n                    }\n                  }}\n                />\n              </Flex>\n              */\n            }\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Current APY\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveApy',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n            <Flex\n              mb={[2,0]}\n              width={[1,1/5]}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'flex-start'}\n            >\n              <Title\n                mb={2}\n                fontSize={[3,4]}\n                component={Heading.h3}\n              >\n                Avg Slippage\n              </Title>\n              <AssetField\n                {...this.props}\n                token={this.props.selectedToken}\n                fieldInfo={{\n                  name:'curveAvgSlippage',\n                  props:{\n                    decimals:2,\n                    fontWeight:300,\n                    fontSize:['1.8em','1.9em'],\n                    color:theme.colors.counter,\n                    flexProps:{\n                      justifyContent:'center'\n                    }\n                  }\n                }}\n              />\n            </Flex>\n          </Flex>\n        </DashboardCard>\n      </Flex>\n    );\n  }\n}\n\nexport default FundsOverviewCurve;","import Title from '../Title/Title';\nimport React, { Component } from 'react';\nimport Breadcrumb from '../Breadcrumb/Breadcrumb';\nimport { Box, Flex, Text, Icon } from \"rimble-ui\";\nimport CurveRedeem from '../CurveRedeem/CurveRedeem';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport BuyModal from '../utilities/components/BuyModal';\nimport CurveDeposit from '../CurveDeposit/CurveDeposit';\nimport AssetSelector from '../AssetSelector/AssetSelector';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport TransactionField from '../TransactionField/TransactionField';\nimport TransactionsList from '../TransactionsList/TransactionsList';\nimport FundsOverviewCurve from '../FundsOverviewCurve/FundsOverviewCurve';\n\nclass AssetPage extends Component {\n\n  state = {\n    inputValue:{},\n    processing:{},\n    tokenFees:null,\n    canRedeem:null,\n    canDeposit:null,\n    action:'deposit',\n    activeModal:null,\n    tokenConfig:null,\n    tokenBalance:null,\n    tokenApproved:null,\n    selectedToken:null,\n    availableTokens:{},\n    redeemBalance:null,\n    depositBalance:null,\n    buttonDisabled:false,\n    curveTokenPrice:null,\n    depositSlippage:null,\n    idleTokenBalance:null,\n    withdrawSlippage:null,\n    govTokensBalance:null,\n    curveZapContract:null,\n    curveTokenConfig:null,\n    curveTokensAmounts:{},\n    govTokensDisabled:null,\n    componentMounted:false,\n    curvePoolContract:null,\n    curveSwapContract:null,\n    curveTokenBalance:null,\n    redeemableBalance:null,\n    fastBalanceSelector:{},\n    curveAvailableTokens:{},\n    tokenFeesPercentage:null,\n    redeemUnevenAmounts:false,\n    curveDepositContract:null\n  };\n\n  // Utils\n  functionsUtil = null;\n\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  setActiveModal = activeModal => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  toggleUnevenAmounts = (redeemUnevenAmounts) => {\n    this.setState({\n      redeemUnevenAmounts\n    });\n  }\n\n  changeFromToken = (selectedToken) => {\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n    this.props.goToSection(`${curveConfig.params.route}/${selectedToken}`);\n  }\n\n  getSelectedToken(){\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    return this.props.urlParams.param1 && curveAvailableTokens[this.props.urlParams.param1] ? this.props.urlParams.param1 : Object.keys(curveAvailableTokens)[0];\n  }\n\n  setSelectedToken = async (selectedToken) => {\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n    this.setState({\n      tokenConfig,\n      selectedToken,\n      availableTokens,\n      curveTokenConfig\n    });\n  }\n\n  loadTokensInfo = async () => {\n\n    const curveAvailableTokens = this.functionsUtil.getGlobalConfig(['curve','availableTokens']);\n    this.setState({\n      curveAvailableTokens\n    });\n\n    const selectedToken = this.getSelectedToken();\n    // Check if token is set the query params\n    if (selectedToken && selectedToken !== this.props.urlParams.param1){\n      this.changeFromToken(selectedToken);\n      return await this.setSelectedToken(selectedToken);\n    } else if (selectedToken !== this.state.selectedToken){\n      await this.setSelectedToken(selectedToken);\n    }\n\n    const newState = {...this.state};\n\n    const availableTokens = this.functionsUtil.getCurveAvailableTokens();\n\n    if (newState.selectedToken !== selectedToken){\n      newState.selectedToken = selectedToken;\n    }\n\n    const curveTokenConfig = curveAvailableTokens[selectedToken];\n    const tokenConfig = availableTokens[curveTokenConfig.baseToken];\n\n    const [\n      curveZapContract,\n      curvePoolContract,\n      curveSwapContract,\n      curveDepositContract\n    ] = await Promise.all([\n      this.functionsUtil.getCurveZapContract(),\n      this.functionsUtil.getCurvePoolContract(),\n      this.functionsUtil.getCurveSwapContract(),\n      this.functionsUtil.getCurveDepositContract()\n    ]);\n\n    newState.curveZapContract = curveZapContract;\n    newState.curvePoolContract = curvePoolContract;\n    newState.curveSwapContract = curveSwapContract;\n    newState.curveDepositContract = curveDepositContract;\n\n    newState.availableTokens = availableTokens;\n\n\n    // console.log('curveTokenPrice',newState.curveTokenPrice.toFixed(6),'curveTokenBalance',newState.curveTokenBalance.toFixed(6),'redeemableBalance',newState.redeemableBalance.toFixed(20),'tokenBalance',newState.tokenBalance.toFixed(20));\n    const govTokenAvailableTokens = {};\n    govTokenAvailableTokens[selectedToken] = tokenConfig;\n\n    newState.tokenConfig = tokenConfig;\n    newState.curveTokenConfig = curveTokenConfig;\n\n    if (this.props.account){\n      [\n        newState.curveTokenPrice,\n        newState.curveTokenBalance,\n        newState.tokenFeesPercentage,\n        newState.tokenFees,\n        newState.tokenBalance,\n        newState.idleTokenBalance,\n        newState.tokenApproved,\n      ] = await Promise.all([\n        this.functionsUtil.getCurveTokenPrice(),\n        this.functionsUtil.getCurveTokenBalance(),\n        this.functionsUtil.getTokenFees(tokenConfig),\n        this.functionsUtil.getUserTokenFees(tokenConfig,this.props.account),\n        this.functionsUtil.getTokenBalance(selectedToken,this.props.account),\n        this.functionsUtil.getTokenBalance(tokenConfig.idle.token,this.props.account),\n        this.functionsUtil.checkTokenApproved(selectedToken,curveDepositContract.address,this.props.account),\n      ]);\n\n\n      newState.processing = {\n        redeem:{\n          txHash:null,\n          loading:false\n        },\n        deposit:{\n          txHash:null,\n          loading:false\n        },\n        approve:{\n          txHash:null,\n          loading:false\n        },\n      };\n      newState.inputValue = {\n        redeem:null,\n        deposit:null\n      };\n      newState.fastBalanceSelector = {\n        redeem:null,\n        deposit:null\n      };\n\n      newState.componentMounted = true;\n      newState.depositBalance = newState.tokenBalance;\n      newState.redeemBalance = newState.redeemableBalance;\n      newState.govTokensDisabled = tokenConfig.govTokensDisabled;\n      newState.canRedeem = newState.curveTokenBalance && newState.curveTokenBalance.gt(0);\n      newState.canDeposit = newState.idleTokenBalance && newState.idleTokenBalance.gt(0);\n      newState.redeemableBalance = newState.curveTokenBalance ? newState.curveTokenBalance.times(newState.curveTokenPrice) : this.functionsUtil.BNify(0);\n    }\n\n    this.setState(newState);\n  }\n\n  async componentWillMount(){\n    this.loadUtils();\n    await this.loadTokensInfo();\n  }\n\n  async calculateSlippage(){\n    const amount = this.state.inputValue[this.state.action] ? this.functionsUtil.BNify(this.state.inputValue[this.state.action]) : null;\n\n    if (!amount || amount.lte(0)){\n      return false;\n    }\n\n    const normalizedAmount = this.functionsUtil.normalizeTokenAmount(amount,this.state.curvePoolContract.decimals);\n    const newState = {};\n\n    switch (this.state.action){\n      case 'deposit':\n        newState.depositBalance = amount;\n        newState.depositSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      case 'redeem':\n        newState.redeemBalance = amount;\n        newState.withdrawSlippage = await this.functionsUtil.getCurveSlippage(this.state.tokenConfig.idle.token,normalizedAmount,true);\n      break;\n      default:\n      break;\n    }\n    // console.log('calculateSlippage',newState);\n\n    this.setState(newState);\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    this.loadUtils();\n    const accountChanged = prevProps.account !== this.props.account;\n    const tokenChanged = prevProps.urlParams.param1 !== this.props.urlParams.param1;\n    const transactionsChanged = prevProps.transactions && this.props.transactions && Object.values(prevProps.transactions).filter(tx => (tx.status==='success')).length !== Object.values(this.props.transactions).filter(tx => (tx.status==='success')).length;\n\n    if (accountChanged || transactionsChanged || tokenChanged){\n      await this.loadTokensInfo();\n    }\n\n    const actionChanged = this.state.action !== prevState.action;\n    const redeemUnevenAmountsChanged = this.state.redeemUnevenAmounts !== prevState.redeemUnevenAmounts;\n    const fastBalanceSelectorChanged = this.state.fastBalanceSelector[this.state.action] !== prevState.fastBalanceSelector[this.state.action];\n    if (actionChanged || fastBalanceSelectorChanged || redeemUnevenAmountsChanged){\n      this.setInputValue();\n    }\n\n    if (actionChanged){\n      this.updateAssetSelector();\n    }\n\n    const inputChanged = prevState.inputValue[this.state.action] !== this.state.inputValue[this.state.action];\n    if (inputChanged){\n      this.calculateSlippage();\n    }\n  }\n\n  updateAssetSelector = async () => {\n    const newState = {};\n    switch (this.state.action){\n      case 'deposit':\n        this.loadTokensInfo();\n      break;\n      case 'redeem':\n        // this.loadTokensInfo();\n        const tokenConfig = this.functionsUtil.getGlobalConfig(['curve','poolContract']);\n        newState.curveAvailableTokens = {};\n        newState.curveTokenConfig = tokenConfig;\n        newState.selectedToken = tokenConfig.token;\n        newState.curveAvailableTokens[tokenConfig.token] = tokenConfig;\n      break;\n      default:\n      break;\n    }\n\n    this.setState(newState);\n  }\n\n  getFastBalanceSelector = () => {\n    if (this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n    return this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n  }\n\n  setFastBalanceSelector = (percentage) => {\n    if (!this.state.action){\n      return false;\n    }\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: percentage\n      }\n    }));\n  }\n\n  setInputValue = () => {\n    if (!this.state.action || this.state.fastBalanceSelector[this.state.action] === null){\n      return false;\n    }\n\n    const selectedPercentage = this.functionsUtil.BNify(this.state.fastBalanceSelector[this.state.action]).div(100);\n    let amount = null;\n\n    switch(this.state.action){\n      case 'deposit':\n        amount = this.state.tokenBalance ? this.functionsUtil.BNify(this.state.tokenBalance).times(selectedPercentage) : null;\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          amount = this.state.curveTokenBalance ? this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage) : null;\n        } else {\n          amount = this.state.redeemableBalance ? this.functionsUtil.BNify(this.state.redeemableBalance).times(selectedPercentage) : null;\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  changeInputValue = (e) => {\n    if (!this.state.action){\n      return false;\n    }\n\n    const amount = e.target.value.length && !isNaN(e.target.value) ? this.functionsUtil.BNify(e.target.value) : this.functionsUtil.BNify(0);\n    this.checkButtonDisabled(amount);\n\n    this.setState((prevState) => ({\n      fastBalanceSelector:{\n        ...prevState.fastBalanceSelector,\n        [this.state.action]: null\n      },\n      inputValue:{\n        ...prevState.inputValue,\n        [this.state.action]: amount\n      }\n    }));\n  }\n\n  checkButtonDisabled = (amount=null) => {\n\n    if (!this.state.action){\n      return false;\n    }\n\n    if (!amount){\n      amount = this.state.inputValue[this.state.action];\n    }\n\n    let buttonDisabled = false;\n\n    switch (this.state.action){\n      case 'deposit':\n        buttonDisabled = buttonDisabled || (amount && amount.gt(this.state.tokenBalance));\n      break;\n      case 'redeem':\n        if (this.state.redeemUnevenAmounts){\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.curveTokenBalance)) );\n        } else {\n          buttonDisabled = !this.state.canRedeem || (buttonDisabled || (amount && amount.gt(this.state.redeemableBalance)) );\n        }\n      break;\n      default:\n      break;\n    }\n\n    this.setState({\n      buttonDisabled\n    });\n  }\n\n  cancelTransaction = async () => {\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:false\n        },\n        [this.state.action]:{\n          txHash:null,\n          loading:false\n        }\n      }\n    }));\n  }\n\n  approveToken = async () => {\n\n    // Check if the token is already approved\n    const tokenApproved = this.state.tokenApproved;\n\n    if (tokenApproved){\n      return this.setState((prevState) => ({\n        tokenApproved,\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    }\n\n    const callbackApprove = (tx,error)=>{\n      // Send Google Analytics event\n      const eventData = {\n        eventCategory: 'Approve',\n        eventAction: this.state.selectedToken,\n        eventLabel: tx.status,\n      };\n\n      if (error){\n        eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n      }\n\n      // Send Google Analytics event\n      if (error || eventData.status !== 'error'){\n        this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n      }\n\n      this.setState((prevState) => ({\n        tokenApproved: (tx.status === 'success'), // True\n        processing: {\n          ...prevState.processing,\n          approve:{\n            txHash:null,\n            loading:false\n          }\n        }\n      }));\n    };\n\n    const callbackReceiptApprove = (tx) => {\n      const txHash = tx.transactionHash;\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          approve:{\n            ...prevState.processing['approve'],\n            txHash\n          }\n        }\n      }));\n    };\n\n    this.functionsUtil.enableERC20(this.state.selectedToken,this.state.curveDepositContract.address,callbackApprove,callbackReceiptApprove);\n\n    this.setState((prevState) => ({\n      processing: {\n        ...prevState.processing,\n        approve:{\n          txHash:null,\n          loading:true\n        }\n      }\n    }));\n  }\n\n  executeAction = async () => {\n\n    let contractSendResult = null;\n    const inputValue = this.state.inputValue[this.state.action];\n    const selectedPercentage = this.getFastBalanceSelector();\n\n    let loading = true;\n\n    switch (this.state.action){\n      // Handle deposit in curve\n      case 'deposit':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        const tokensToDeposit = this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals);\n\n        const callbackDeposit = (tx,error) => {\n\n          if (!tx && error){\n            tx = {\n              status:'error'\n            };\n          }\n\n          const txError = tx.status === 'error';\n          const txSucceeded = tx.status === 'success';\n\n          const eventData = {\n            eventCategory: 'Deposit',\n            eventAction: this.state.selectedToken,\n            eventLabel: tx.status,\n            eventValue: parseInt(inputValue)\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              activeModal:'share',\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          } else if (this.state.metaTransactionsEnabled && txError){\n            this.setState({\n              txError:{\n                [this.state.action]: true\n              }\n            });\n          }\n        };\n\n        const callbackReceiptDeposit = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,tokensToDeposit);\n        const minMintAmount = await this.functionsUtil.genericContractCall(this.state.curveSwapContract.name,'calc_token_amount',[amounts,true]);\n        const depositParams = [amounts,minMintAmount];\n\n        // No need for callback atm\n        contractSendResult = await this.props.contractMethodSendWrapper(this.state.curveDepositContract.name, 'add_liquidity', depositParams, null, callbackDeposit, callbackReceiptDeposit);\n      break;\n      case 'redeem':\n\n        if (this.state.buttonDisabled || !inputValue || this.functionsUtil.BNify(inputValue).lte(0)){\n          return false;\n        }\n\n        let curveTokensToRedeem = null;\n        if (selectedPercentage){\n          curveTokensToRedeem = this.functionsUtil.BNify(this.state.curveTokenBalance).times(selectedPercentage);\n        } else {\n          curveTokensToRedeem = this.functionsUtil.BNify(this.functionsUtil.normalizeTokenAmount(inputValue,this.state.curvePoolContract.decimals));\n          if (!this.state.redeemUnevenAmounts){\n            const curveTokenPrice = await this.functionsUtil.getCurveTokenPrice();\n            curveTokensToRedeem = curveTokensToRedeem.div(curveTokenPrice);\n          }\n        }\n\n        if (!curveTokensToRedeem){\n          return false;\n        }\n\n        const callbackRedeem = (tx,error) => {\n          const txSucceeded = tx.status === 'success';\n\n          // Send Google Analytics event\n          const eventData = {\n            eventLabel: tx.status,\n            eventCategory: `CurveRedeem`,\n            eventAction: this.state.selectedToken,\n            eventValue: curveTokensToRedeem.toFixed()\n          };\n\n          if (error){\n            eventData.eventLabel = this.functionsUtil.getTransactionError(error);\n          }\n\n          // Send Google Analytics event\n          if (error || eventData.status !== 'error'){\n            this.functionsUtil.sendGoogleAnalyticsEvent(eventData);\n          }\n\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                txHash:null,\n                loading:false\n              }\n            }\n          }));\n\n          if (txSucceeded){\n            this.setState((prevState) => ({\n              inputValue:{\n                ...prevState.inputValue,\n                [this.state.action]: this.functionsUtil.BNify(0)\n              }\n            }));\n          }\n        };\n\n        const callbackReceiptRedeem = (tx) => {\n          const txHash = tx.transactionHash;\n          this.setState((prevState) => ({\n            processing: {\n              ...prevState.processing,\n              [this.state.action]:{\n                ...prevState.processing[this.state.action],\n                txHash\n              }\n            }\n          }));\n        };\n\n        const _amount = this.functionsUtil.normalizeTokenAmount(curveTokensToRedeem,this.state.curvePoolContract.decimals).toString();\n        let min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,0);\n\n        const contractName = this.state.curveDepositContract.name;\n        if (this.state.redeemUnevenAmounts){\n          console.log('remove_liquidity_imbalance',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity_imbalance', [min_amounts, _amount], null, callbackRedeem, callbackReceiptRedeem);\n        } else {\n          min_amounts = await this.functionsUtil.getCurveAmounts(this.state.tokenConfig.idle.token,_amount);\n          console.log('remove_liquidity',this.functionsUtil.BNify(inputValue).toString(),_amount.toString(),min_amounts);\n          this.props.contractMethodSendWrapper(contractName, 'remove_liquidity', [_amount, min_amounts], null, callbackRedeem, callbackReceiptRedeem);\n        }\n      break;\n      default: // Reset loading if not handled action\n        loading = false;\n      break;\n    }\n\n    // console.log('contractSendResult',contractSendResult);\n\n    if (contractSendResult !== false){\n      this.setState((prevState) => ({\n        processing: {\n          ...prevState.processing,\n          [this.state.action]:{\n            ...prevState.processing[this.state.action],\n            loading\n          }\n        }\n      }));\n    }\n  }\n\n  setAction = (action) => {\n    switch (action.toLowerCase()){\n      case 'deposit':\n        \n      break;\n      case 'redeem':\n        if (!this.state.canRedeem){\n          action = null;\n        }\n      break;\n      default:\n        action = null;\n      break;\n    }\n\n    if (action !== null){\n      this.setState({\n        action\n      });\n    }\n  }\n\n  render(){\n\n    const userHasFunds = this.props.account && this.state.curveTokenBalance && this.functionsUtil.BNify(this.state.curveTokenBalance).gt(0);\n    const canPerformAction = true;\n\n    return (\n      <Box\n        width={1}\n      >\n        <Flex\n          width={1}\n          mb={[3,4]}\n          alignItems={'center'}\n          flexDirection={'row'}\n          justifyContent={'flex-start'}\n        >\n          <Flex\n            width={0.5}\n          >\n            {\n              <Breadcrumb\n                {...this.props}\n                isMobile={this.props.isMobile}\n                path={['Boost',this.state.selectedToken]}\n                handleClick={ e => this.props.goToSection('best') }\n                text={this.functionsUtil.getGlobalConfig(['strategies','best','title'])}\n              />\n            }\n          </Flex>\n        </Flex>\n        <Title\n          mb={[3,4]}\n        >\n          Curve Pool\n        </Title>\n        <Flex\n          width={1}\n        >\n          <Flex\n            width={1}\n            alignItems={'center'}\n            flexDirection={'column'}\n            justifyContent={'center'}\n          >\n            <Flex\n              width={[1,0.36]}\n              alignItems={'stretch'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <Box\n                width={1}\n              >\n                <Text\n                  mb={1}\n                >\n                  Select your asset:\n                </Text>\n                <AssetSelector\n                  {...this.props}\n                  id={'token-from'}\n                  onChange={this.changeFromToken}\n                  selectedToken={this.state.selectedToken}\n                  tokenConfig={this.state.curveTokenConfig}\n                  showBalance={this.state.action === 'deposit'}\n                  availableTokens={this.state.curveAvailableTokens}\n                />\n              </Box>\n              <Box\n                width={1}\n              >\n                {\n                  canPerformAction ? (\n                    <Flex\n                      mt={2}\n                      flexDirection={'column'}\n                    >\n                      <Text\n                        mb={2}\n                      >\n                        Choose the action:\n                      </Text>\n                      <Flex\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        justifyContent={'space-between'}\n                      >\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('deposit');\n                            }\n                          }}\n                          isInteractive={true}\n                          isActive={ this.state.action === 'deposit' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'deposit'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Deposit\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                        <DashboardCard\n                          cardProps={{\n                            p:[2,3],\n                            width:0.48,\n                            onMouseDown:() => {\n                              this.setAction('redeem');\n                            }\n                          }}\n                          isInteractive={true}\n                          isDisabled={ !this.state.canRedeem }\n                          isActive={ this.state.action === 'redeem' }\n                        >\n                          <Flex\n                            my={1}\n                            alignItems={'center'}\n                            flexDirection={'row'}\n                            justifyContent={'center'}\n                          >\n                            <TransactionField\n                              transaction={{\n                                action:'redeem'\n                              }}\n                              fieldInfo={{\n                                name:'icon',\n                                props:{\n                                  mr:[1,3]\n                                }\n                              }}\n                            />\n                            <Text\n                              fontSize={3}\n                              fontWeight={3}\n                            >\n                              Redeem\n                            </Text>\n                          </Flex>\n                        </DashboardCard>\n                      </Flex>\n                    </Flex>\n                  ) : (\n                    <Flex\n                      alignItems={'center'}\n                      flexDirection={'column'}\n                    >\n                      <Icon\n                        size={'2.3em'}\n                        name={'MoneyOff'}\n                        color={'cellText'}\n                      />\n                      <Text\n                        mt={2}\n                        fontSize={2}\n                        color={'cellText'}\n                        textAlign={'center'}\n                      >\n                        You don't have any {this.state.tokenConfig.idle.token} in your wallet.\n                      </Text>\n                    </Flex>\n                  )\n                }\n              </Box>\n            </Flex>\n            <Flex\n              width={1}\n              mt={ this.props.account ? 3 : 0 }\n            >\n            {\n              this.state.action === 'deposit' ? (\n                <CurveDeposit\n                  {...this.props}\n                  {...this.state}\n                />\n              ) : this.state.action === 'redeem' && (\n                <CurveRedeem\n                  {...this.props}\n                  {...this.state}\n                />\n              )\n            }\n            </Flex>\n          </Flex>\n        </Flex>\n        {\n          userHasFunds &&\n            <Flex\n              mb={[0,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'funds-overview-container'}\n            >\n              <Title my={[3,4]}>Funds Overview</Title>\n              <FundsOverviewCurve\n                {...this.props}\n                tokenFees={this.state.tokenFees}\n                tokenConfig={this.state.tokenConfig}\n                selectedToken={this.state.selectedToken}\n                availableTokens={this.state.availableTokens}\n                enabledTokens={Object.keys(this.state.availableTokens)}\n              />\n            </Flex>\n        }\n        {\n          /*\n          this.props.account && !this.state.govTokensDisabled[this.state.selectedToken] && Object.keys(availableGovTokens).length>0 && \n            <Flex\n              width={1}\n              id=\"earnings-estimation\"\n              flexDirection={'column'}\n            >\n              <Title my={[3,4]}>Yield Farming</Title>\n              <AssetsList\n                enabledTokens={Object.keys(availableGovTokens)}\n                handleClick={(props) => {}}\n                cols={[\n                  {\n                    title:'TOKEN',\n                    props:{\n                      width:[0.33,0.22]\n                    },\n                    fields:[\n                      {\n                        name:'icon',\n                        props:{\n                          mr:2,\n                          height:['1.4em','2.3em']\n                        }\n                      },\n                      {\n                        name:'tokenName'\n                      }\n                    ]\n                  },\n                  {\n                    title:'BALANCE',\n                    props:{\n                      width:[0.33, 0.26],\n                    },\n                    fields:[\n                      {\n                        name:'tokenBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'REDEEMABLE',\n                    props:{\n                      width:[0.33,0.26],\n                      justifyContent:['center','flex-start']\n                    },\n                    fields:[\n                      {\n                        name:'redeemableBalance',\n                        props:{\n                          decimals: this.props.isMobile ? 6 : 8\n                        }\n                      },\n                      {\n                        name:'tooltip',\n                        props:{\n                          placement:'bottom',\n                          message:'The shown balance may be lower than the real one.',\n                        }\n                      }\n                    ]\n                  },\n                  {\n                    title:'TOKEN PRICE',\n                    mobile:false,\n                    props:{\n                      width: 0.26,\n                    },\n                    parentProps:{\n                      width:1,\n                      pr:[2,4]\n                    },\n                    fields:[\n                      {\n                        name:'tokenPrice',\n                        props:{\n                          unit:'$',\n                          unitPos:'left',\n                          unitProps:{\n                            mr:1,\n                            fontWeight:3,\n                            fontSize:[0,2],\n                            color:'cellText'\n                          }\n                        }\n                      }\n                    ]\n                  },\n                ]}\n                {...this.props}\n                availableTokens={availableGovTokens}\n              />\n            </Flex>\n          */\n        }\n        {\n          /*\n          this.props.account && \n            <Flex\n              mb={[3,4]}\n              width={1}\n              flexDirection={'column'}\n              id={'estimated-earnings-container'}\n            >\n              <Title my={[3,4]}>Estimated earnings</Title>\n              <EstimatedEarnings\n                {...this.props}\n              />\n            </Flex>\n          */\n        }\n        {\n        this.props.account && \n          <Flex\n            mb={[3,4]}\n            width={1}\n            flexDirection={'column'}\n            id={'transactions-container'}\n          >\n            <Title my={[3,4]}>Transactions</Title>\n            <TransactionsList\n              {...this.props}\n              availableTokens={this.state.availableTokens}\n              enabledTokens={Object.keys(this.state.availableTokens)}\n              enabledActions={['CurveIn','CurveOut','CurveZapIn','CurveZapOut','CurveTransferIn','CurveTransferOut','CurveDepositIn','CurveDepositOut']}\n              cols={[\n                {\n                  title: this.props.isMobile ? '' : 'HASH',\n                  props:{\n                    width:[0.15,0.24]\n                  },\n                  fields:[\n                    {\n                      name:'icon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      name:'hash',\n                      mobile:false\n                    }\n                  ]\n                },\n                {\n                  title:'ACTION',\n                  mobile:false,\n                  props:{\n                    width:0.15,\n                  },\n                  fields:[\n                    {\n                      name:'action'\n                    }\n                  ]\n                },\n                {\n                  title:'DATE',\n                  props:{\n                    width:[0.32,0.23],\n                  },\n                  fields:[\n                    {\n                      name:'date'\n                    }\n                  ]\n                },\n                {\n                  title:'STATUS',\n                  props:{\n                    width:[0.18,0.22],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'statusIcon',\n                      props:{\n                        mr:[0,2]\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'status'\n                    }\n                  ]\n                },\n                {\n                  title:'AMOUNT',\n                  props:{\n                    width:0.19,\n                  },\n                  fields:[\n                    {\n                      name:'amount'\n                    },\n                  ]\n                },\n                {\n                  title:'ASSET',\n                  props:{\n                    width:[0.15,0.20],\n                    justifyContent:['center','flex-start']\n                  },\n                  fields:[\n                    {\n                      name:'tokenIcon',\n                      props:{\n                        mr:[0,2],\n                        height:['1.4em','1.6em']\n                      }\n                    },\n                    {\n                      mobile:false,\n                      name:'tokenName'\n                    },\n                  ]\n                },\n              ]}\n            />\n          </Flex>\n        }\n\n        <BuyModal\n          {...this.props}\n          closeModal={this.resetModal}\n          buyToken={this.state.selectedToken}\n          isOpen={this.state.activeModal === 'buy'}\n        />\n      </Box>\n    );\n  }\n}\n\nexport default AssetPage;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport ExtLink from '../../ExtLink/ExtLink.js';\nimport { Text, Modal, Flex, Link } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass PolygonModal extends React.Component {\n\n  state = {};\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    this.functionsUtil.setLocalStorage('polygonApproved',true);\n    this.props.closeModal();\n  }\n\n  render() {\n    const polygonBridgeInfo = this.functionsUtil.getGlobalConfig(['tools','polygonBridge']);\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','650px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            pt={3}\n            iconHeight={'2em'}\n            title={'Welcome to Idle <> Polygon'}\n            icon={'images/protocols/polygon.svg'}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                fontSize={2}\n                textAlign={'left'}\n                color={'dark-gray'}\n              >\n                You're about to enter Idle Finance in the Polygon Network, make sure to have some <ExtLink color={'link'} fontSize={2} href={this.functionsUtil.getEtherscanAddressUrl(this.functionsUtil.getGlobalConfig(['stats','tokens',this.props.currentNetwork.baseToken,'address']))}>{this.props.currentNetwork.baseToken}</ExtLink> tokens in your wallet to send your transactions! Also you can use our <Link color={'link'} fontSize={2} mainColor={'link'} onClick={ e => this.props.goToSection(`tools/${polygonBridgeInfo.route}/${this.props.currentNetwork.baseToken}`)}>{polygonBridgeInfo.label}</Link> to transfer your tokens from Mainnet to Polygon.<br />If you are not confident with this just switch to Mainnet using your wallet provider.\n              </Text>\n            </Flex>\n            <Flex\n              my={3}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                handleClick={this.closeModal}\n                buttonProps={{\n                  width:['100%','40%']\n                }}\n              >\n                Let Me In\n              </RoundButton>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default PolygonModal;","import React from \"react\";\nimport {\n  Text,\n  Modal,\n  Button,\n  Form,\n  Icon,\n  Flex,\n  Link\n} from \"rimble-ui\";\nimport axios from 'axios';\nimport colors from '../../colors';\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\nimport globalConfigs from '../../configs/globalConfigs';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\n\nclass WelcomeModal extends React.Component {\n\n  state = {\n    email:null,\n    error:false,\n    subscribed:false,\n    sendingForm:false\n  };\n\n  functionsUtil = null;\n\n  constructor(props) {\n    super(props);\n    this.functionsUtil = new FunctionsUtil(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleValidation = this.handleValidation.bind(this);\n  }\n\n  componentDidUpdate = async () => {\n    this.functionsUtil.setProps(this.props);\n  }\n\n  sendUserInfo = (sendEmail=true) => {\n    const walletProvider = this.functionsUtil.getWalletProvider();\n    const userInfo = {\n      address: this.props.account,\n      provider: walletProvider\n    };\n\n    if (sendEmail && this.state.email !== null){\n      userInfo.email = this.state.email;\n    }\n\n    this.functionsUtil.simpleIDPassUserInfo(userInfo);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    if (!this.state.email){\n      return false;\n    }\n\n    const callback = () => {\n      this.setState({\n        sendingForm:false,\n        subscribed:true\n      });\n      window.setTimeout(this.props.closeModal,2500);\n    };\n\n    this.sendUserInfo();\n\n    // Send Google Analytics event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'send_email',\n      eventLabel: 'WelcomeModal'\n    });\n\n    axios.post(globalConfigs.newsletterSubscription.endpoint, {\n      'email': this.state.email\n    }).then(r => {\n      callback();\n    })\n    .catch(err => {\n      callback();\n    });\n\n    // Set signedUp in the localStorage\n    if (localStorage){\n      const walletAddress = this.props.account.toLowerCase();\n      let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : null;\n      if (lastLogin && lastLogin[walletAddress] && !lastLogin[walletAddress].signedUp){\n        lastLogin[walletAddress].signedUp = true;\n        this.functionsUtil.setLocalStorage('lastLogin',JSON.stringify(lastLogin));\n      }\n    }\n\n    this.setState({\n      sendingForm:true\n    })\n  };\n\n  closeModal = async () => {\n\n    const closeModal = () => {\n      this.props.closeModal();\n    };\n\n    try{\n      // Prevent sending email\n      this.sendUserInfo(false);\n\n      // Send Google Analytics event\n      if (globalConfigs.analytics.google.events.enabled){\n        this.functionsUtil.sendGoogleAnalyticsEvent({\n          eventCategory: 'UI',\n          eventAction: 'continue_without_email',\n          eventLabel: 'WelcomeModal'\n        },closeModal);\n\n        // Call callback after 1 second if stuck\n        setTimeout(closeModal,1000);\n      } else {\n        closeModal();\n      }\n    } catch (err) {\n      closeModal();\n    }\n  }\n\n  handleValidation(e) {\n    if (e && e.target) {\n      this.setState({ email: e.target.value });\n      e.target.parentNode.classList.add(\"was-validated\");\n    }\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.isOpen}>\n        {\n          this.state.subscribed ? (\n            <ModalCard\n              closeFunc={this.closeModal}\n            >\n              <ModalCard.Header title={'All done'} icon={`images/done.svg`}></ModalCard.Header>\n              <ModalCard.Body>\n                <Flex width={1} flexDirection={'column'} mb={3}>\n                  <Text color={'dark-gray'} textAlign={'center'} fontSize={3} my={0}>\n                    Thanks for subscribing!\n                  </Text>\n                  <Button\n                    my={3}\n                    width={'100%'}\n                    borderRadius={4}\n                    onClick={this.closeModal}\n                  >\n                    CLOSE\n                  </Button>\n                </Flex>\n              </ModalCard.Body>\n            </ModalCard>\n          ) : (\n            <ModalCard closeFunc={this.closeModal}>\n              <ModalCard.Header title={'Stay up-to-date!'} icon={`images/notification.svg`}>\n              </ModalCard.Header>\n              <ModalCard.Body>\n                <Form onSubmit={this.handleSubmit}>\n                  <Flex width={1} flexDirection={'column'} mb={3}>\n                    <Text color={'mid-gray'} textAlign={'left'} fontSize={3} my={0}>\n                      Add your e-mail to receive updates about:\n                    </Text>\n                  </Flex>\n                  <Flex width={1} flexDirection={'column'} mt={2}>\n                    <Flex my={2} flexDirection={'row'} alignItems={'center'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Performance reports\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        New Protocols & Tokens\n                      </Text>\n                    </Flex>\n                    <Flex my={2} flexDirection={'row'}>\n                      <Icon\n                        name={'CheckCircle'}\n                        color={colors.green}\n                        size={'32'}\n                      />\n                      <Text color={'dark-gray'} textAlign={'left'} fontSize={3} fontWeight={2} my={0} ml={2}>\n                        Latest updates\n                      </Text>\n                    </Flex>\n                    <Form.Field width={1} label={''}>\n                      <Form.Input\n                        px={3}\n                        py={4}\n                        required\n                        width={1}\n                        border={0}\n                        fontSize={3}\n                        type={\"email\"}\n                        name={\"EMAIL\"}\n                        outline={'none'}\n                        borderColor={'cardBorder'}\n                        backgroundColor={'cardBg'}\n                        textAlign={['center','left']}\n                        className={header_styles.input}\n                        placeholder={'Enter your e-mail'}\n                        onChange={this.handleValidation}\n                      />\n                    </Form.Field>\n                    <Flex mb={3} flexDirection={'column'} alignItems={'center'} justifyContent={'center'}>\n                      <ButtonLoader\n                        buttonText={'SUBMIT'}\n                        isLoading={this.state.sendingForm}\n                        buttonProps={{className:header_styles.gradientButton,width:'100%',type:'submit'}}\n                      >\n                      </ButtonLoader>\n                      <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without e-mail</Link>\n                    </Flex>\n                  </Flex>\n                </Form>\n              </ModalCard.Body>\n            </ModalCard>\n          )\n        }\n      </Modal>\n    );\n  }\n}\n\nexport default WelcomeModal;\n","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport ButtonLoader from '../../ButtonLoader/ButtonLoader.js';\n\nclass MigrateModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'continue_without_migrate',\n        eventLabel: 'MigrateModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowMigrateModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowMigrateModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = () => {\n    const tokenMigrationRoute = this.functionsUtil.getGlobalConfig(['tools','tokenMigration','route']);\n    this.props.goToSection('tools/'+tokenMigrationRoute);\n    this.props.closeModal();\n  }\n\n  render() {\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            iconHeight={'40px'}\n            title={'Migrate to Idle'}\n            icon={`images/migrate.svg`}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={3}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                You can migrate your funds from Compound, Aave, Fulcrum, Yearn and Idle V2 with just one transaction.\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                my={2}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.protocolsTokensBalances && Object.keys(this.props.protocolsTokensBalances).map( token => (\n                    <Flex\n                      mb={2}\n                      alignItems={'center'}\n                      flexDirection={'row'}\n                      key={`token_${token}`}\n                      justifyContent={'space-between'}\n                    >\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'icon',\n                          props:{\n                            mr:2,\n                            height:'2.3em'\n                          }\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                      <SmartNumber\n                        mr={2}\n                        {...fieldProps}\n                        minPrecision={5}\n                        number={this.props.protocolsTokensBalances[token].balance} \n                      />\n                      <AssetField\n                        token={token}\n                        fieldInfo={{\n                          name:'tokenName',\n                          props:fieldProps\n                        }}\n                        tokenConfig={this.props.protocolsTokensBalances[token].tokenConfig}\n                      />\n                    </Flex>\n                  ) )\n                }\n                <Text\n                  mb={0}\n                  fontSize={1}\n                  color={'red'}\n                  fontWeight={500}\n                  textAlign={'center'}\n                >\n                  Please be aware that by migrating your tokens from other protocols, your open positions might be liquidated if collateralized with migrated tokens.\n                </Text>\n              </Flex>\n              <Flex\n                mb={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <ButtonLoader\n                  buttonText={'MIGRATE'}\n                  handleClick={this.migrate}\n                  isLoading={this.state.sendingForm}\n                  buttonProps={{\n                    width:['100%','50%'],\n                    className:header_styles.gradientButton\n                  }}\n                >\n                </ButtonLoader>\n                {\n                /*\n                <Link mt={2} onClick={this.closeModal} hoverColor={'blue'}>continue without migrate</Link>\n                */\n                }\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default MigrateModal;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport header_styles from './Header.module.scss';\nimport AssetField from '../../AssetField/AssetField';\nimport SmartNumber from '../../SmartNumber/SmartNumber';\nimport { Text, Modal, Flex, Checkbox } from \"rimble-ui\";\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass UpgradeModal extends React.Component {\n\n  state = {\n    dontShowAgain:false\n  };\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UI',\n        eventAction: 'close_upgrade_modal',\n        eventLabel: 'UpgradeModal'\n      });\n      this.props.closeModal();\n    } else {\n      this.props.closeModal();\n    }\n  }\n\n  toggleDontShowAgain = (dontShowAgain) => {\n\n    if (dontShowAgain){\n      this.functionsUtil.setLocalStorage('dontShowUpgradeModal','true');\n    } else {\n      this.functionsUtil.removeStoredItem('dontShowUpgradeModal');\n    }\n\n    this.setState({\n      dontShowAgain\n    });\n  }\n\n  migrate = async (token,strategy=null) => {\n\n    if (!strategy){\n      strategy = this.props.selectedStrategy;\n    }\n\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`${strategy}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  convert = async (token) => {\n    const convertTool = this.functionsUtil.getGlobalConfig(['tools','tokenMigration']);\n    const gaEventsEnabled = this.functionsUtil.getGlobalConfig(['globalConfigs','analytics','google','events','enabled']);\n    // Send Google Analytics event\n    if (gaEventsEnabled){\n      await this.functionsUtil.sendGoogleAnalyticsEvent({\n        eventCategory: 'UpgradeModal',\n        eventAction: 'migrate',\n        eventLabel: `${this.props.selectedStrategy}_${token}`\n      });\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    } else {\n      this.props.goToSection(`tools/${convertTool.route}/${token}`);\n      this.props.closeModal();\n    }\n  }\n\n  render() {\n\n    if (!this.props.availableStrategies || !this.props.availableTokens){\n      return null;\n    }\n\n    const fieldProps = {\n      fontWeight:3,\n      fontSize:[2,3],\n      color:'cellText',\n      flexProps:{\n        justifyContent:'flex-start'\n      }\n    };\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','750px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            icon={`images/migrate.svg`}\n            title={'Upgrade Available'}\n            iconHeight={['35px','40px']}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              mb={0}\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                my={0}\n                fontSize={[2,3]}\n                color={'mid-gray'}\n                textAlign={'center'}\n              >\n                Idle now supports yield farming and governance tokens distribution, migrate now your portfolio with just one click!\n              </Text>\n            </Flex>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Flex\n                mt={[2,3]}\n                alignItems={'center'}\n                flexDirection={'row'}\n              >\n                <Flex\n                  fontSize={[2,3]}\n                  width={[0.5,0.28]}\n                  fontWeight={[4,5]}\n                  color={'copyColor'}\n                >\n                  {\n                    this.props.isMobile ? 'ASSET' : 'ASSET TO MIGRATE'\n                  }\n                </Flex>\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      BALANCE\n                    </Flex>\n                  )\n                }\n                {\n                  !this.props.isMobile && (\n                    <Flex\n                      width={0.19}\n                      fontWeight={[4,5]}\n                      color={'copyColor'}\n                      justifyContent={'center'}\n                    >\n                      OLD APY\n                    </Flex>\n                  )\n                }\n                <Flex\n                  fontSize={[2,3]}\n                  fontWeight={[4,5]}\n                  width={[0.25,0.19]}\n                  color={'copyColor'}\n                  justifyContent={'center'}\n                >\n                  {\n                    this.props.isMobile ? 'APY' : 'NEW APY'\n                  }\n                </Flex>\n                <Flex\n                  width={[0.25,0.15]}\n                >\n                  \n                </Flex>\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.tokensToMigrate && Object.keys(this.props.tokensToMigrate).map( tokenKey => {\n                    const token = this.props.tokensToMigrate[tokenKey].token;\n                    const strategy = this.props.tokensToMigrate[tokenKey].strategy;\n                    const tokenConfig = this.props.tokensToMigrate[tokenKey].tokenConfig;\n                    const balance = this.props.tokensToMigrate[tokenKey].oldContractBalanceFormatted;\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${tokenKey}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={[0.5,0.28]}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:['1.8em','2.3em']\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={tokenConfig.idle.token}\n                          />\n                        </Flex>\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <SmartNumber\n                                {...fieldProps}\n                                minPrecision={5}\n                                number={balance}\n                                flexProps={{\n                                  justifyContent:'center'\n                                }}\n                              />\n                            </Flex>\n                          )\n                        }\n                        {\n                          !this.props.isMobile && (\n                            <Flex\n                              width={0.19}\n                              alignItems={'center'}\n                              justifyContent={'center'}\n                            >\n                              <AssetField\n                                {...this.props}\n                                fieldInfo={{\n                                  name:'oldApy',\n                                  props:fieldProps\n                                }}\n                                token={token}\n                                tokenConfig={tokenConfig}\n                              />\n                            </Flex>\n                          )\n                        }\n                        <Flex\n                          width={[0.25,0.19]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={token}\n                            tokenConfig={tokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={[0.25,0.15]}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.migrate(token,strategy) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                width={1}\n                alignItems={'center'}\n                flexDirection={'column'}\n              >\n                {\n                  this.props.oldIdleTokensToMigrate && Object.keys(this.props.oldIdleTokensToMigrate).map( token => {\n                    const tokenConfig = this.props.oldIdleTokensToMigrate[token].tokenConfig;\n\n                    if (!tokenConfig){\n                      return null;\n                    }\n\n                    const balance = this.props.oldIdleTokensToMigrate[token].balance;\n                    let newTokenConfig = null;\n\n                    if (tokenConfig.availableStrategies && !this.props.availableTokens[tokenConfig.baseToken]){\n                      newTokenConfig = this.props.availableStrategies[tokenConfig.availableStrategies[0]][tokenConfig.baseToken];\n                    } else {\n                      newTokenConfig = this.props.availableTokens[tokenConfig.baseToken];\n                    }\n                    return (\n                      <Flex\n                        mt={2}\n                        width={1}\n                        alignItems={'center'}\n                        flexDirection={'row'}\n                        key={`token_${token}`}\n                        justifyContent={'space-between'}\n                      >\n                        <Flex\n                          width={0.28}\n                          alignItems={'center'}\n                          flexDirection={'row'}\n                        >\n                          <AssetField\n                            fieldInfo={{\n                              name:'icon',\n                              props:{\n                                mr:2,\n                                height:'2.3em'\n                              }\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                          <AssetField\n                            fieldInfo={{\n                              name:'tokenName',\n                              props:fieldProps\n                            }}\n                            tokenConfig={tokenConfig}\n                            token={token}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <SmartNumber\n                            {...fieldProps}\n                            minPrecision={5}\n                            number={balance}\n                            flexProps={{\n                              justifyContent:'center'\n                            }}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'oldApy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.19}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <AssetField\n                            {...this.props}\n                            fieldInfo={{\n                              name:'apy',\n                              props:fieldProps\n                            }}\n                            token={newTokenConfig.token}\n                            tokenConfig={newTokenConfig}\n                          />\n                        </Flex>\n                        <Flex\n                          width={0.15}\n                          alignItems={'center'}\n                          justifyContent={'center'}\n                        >\n                          <RoundButton\n                            handleClick={ e => this.convert(token) }\n                            buttonProps={{\n                              size:'small',\n                              width:'100%',\n                              className:header_styles.gradientButton\n                            }}\n                          >\n                            MIGRATE\n                          </RoundButton>\n                        </Flex>\n                      </Flex>\n                    );\n                  })\n                }\n              </Flex>\n              <Flex\n                my={3}\n                alignItems={'center'}\n                flexDirection={'column'}\n                justifyContent={'center'}\n              >\n                <RoundButton\n                  handleClick={this.closeModal}\n                  buttonProps={{\n                    fontSize:[2,3],\n                    width:['100%','40%'],\n                  }}\n                >\n                  MIGRATE LATER\n                </RoundButton>\n                <Checkbox\n                  mt={2}\n                  required={false}\n                  color={'mid-gray'}\n                  checked={this.state.dontShowAgain}\n                  label={`Don't show this popup again`}\n                  onChange={ e => this.toggleDontShowAgain(e.target.checked) }\n                />\n              </Flex>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default UpgradeModal;","import React from \"react\";\nimport ModalCard from './ModalCard';\nimport { Text, Modal, Flex } from \"rimble-ui\";\nimport ExtLink from '../../ExtLink/ExtLink.js';\nimport FunctionsUtil from '../../utilities/FunctionsUtil';\nimport RoundButton from '../../RoundButton/RoundButton.js';\n\nclass RiskAdjustedModal extends React.Component {\n\n  state = {};\n\n  // Utils\n  functionsUtil = null;\n  loadUtils(){\n    if (this.functionsUtil){\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.loadUtils();\n  }\n\n  componentDidUpdate = async () => {\n    this.loadUtils();\n  }\n\n  closeModal = async () => {\n    this.props.closeModal();\n  }\n\n  render() {\n\n    return (\n      <Modal\n        isOpen={this.props.isOpen}\n      >\n        <ModalCard\n          maxWidth={['960px','650px']}\n          closeFunc={this.props.closeModal}\n        >\n          <ModalCard.Header\n            pt={3}\n            iconHeight={'40px'}\n            icon={'images/warning.svg'}\n            title={'Risk Adjusted Dismissed'}\n          >\n          </ModalCard.Header>\n          <ModalCard.Body>\n            <Flex\n              width={1}\n              flexDirection={'column'}\n            >\n              <Text\n                fontSize={2}\n                textAlign={'left'}\n                color={'dark-gray'}\n              >\n                The Risk Adjusted strategy has been dismissed after the execution of <ExtLink fontSize={2} href={this.functionsUtil.getAppUrl('#/governance/proposals/14')}>IIP-14</ExtLink> on the 13th October 2021. An incentive program has been released to let users migrate their funds in the <ExtLink fontSize={2} href={'https://beta.idle.finance/#/dashboard/tranches/senior/idle'}>Senior Tranche</ExtLink> in order to keep a similar risk profile as the Risk-Adjusted strategy. Read the <ExtLink fontSize={2} href={'https://gov.idle.finance/t/risk-adjusted-removal-for-tranches-migration/673'}>Governance Forum Post</ExtLink> for further information about the migration program.\n              </Text>\n            </Flex>\n            <Flex\n              my={3}\n              alignItems={'center'}\n              flexDirection={'column'}\n              justifyContent={'center'}\n            >\n              <RoundButton\n                handleClick={this.closeModal}\n                buttonProps={{\n                  width:['100%','40%']\n                }}\n              >\n                Got it\n              </RoundButton>\n            </Flex>\n          </ModalCard.Body>\n        </ModalCard>\n      </Modal>\n    );\n  }\n}\n\nexport default RiskAdjustedModal;","import React, { Component } from 'react';\nimport FlashNews from '../FlashNews/FlashNews';\nimport FlexLoader from '../FlexLoader/FlexLoader';\nimport { Flex, Card, Icon, Text } from 'rimble-ui';\nimport FunctionsUtil from '../utilities/FunctionsUtil';\nimport DashboardMenu from '../DashboardMenu/DashboardMenu';\n\n// Import page components\nimport Stats from '../Stats/Stats';\nimport Utils from '../Utils/Utils';\nimport AssetPage from '../AssetPage/AssetPage';\nimport RoundButton from '../RoundButton/RoundButton';\nimport Swipeable from '../utilities/components/Swipeable';\nimport BetaModal from \"../utilities/components/BetaModal\";\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport CurveStrategy from '../CurveStrategy/CurveStrategy';\nimport PolygonModal from \"../utilities/components/PolygonModal\";\nimport WelcomeModal from \"../utilities/components/WelcomeModal\";\nimport TooltipModal from \"../utilities/components/TooltipModal\";\nimport MigrateModal from \"../utilities/components/MigrateModal\";\nimport UpgradeModal from \"../utilities/components/UpgradeModal\";\nimport DashboardHeader from '../DashboardHeader/DashboardHeader';\nimport RiskAdjustedModal from \"../utilities/components/RiskAdjustedModal\";\n\nclass Dashboard extends Component {\n  state = {\n    menu: [],\n    baseRoute: null,\n    clickEvent: null,\n    activeModal: null,\n    menuOpened: false,\n    currentRoute: null,\n    pageComponent: null,\n    currentSection: null,\n    currentNetwork: null,\n    selectedSection: null,\n    tokensToMigrate: null,\n    showResetButton: false,\n    selectedSubsection: null,\n    pageComponentProps: null,\n    oldIdleTokensToMigrate: null,\n    protocolsTokensBalances: null,\n  };\n\n  timeoutId = null;\n\n  // Utils\n  functionsUtil = null;\n  loadUtils() {\n    if (this.functionsUtil) {\n      this.functionsUtil.setProps(this.props);\n    } else {\n      this.functionsUtil = new FunctionsUtil(this.props);\n    }\n\n    window.functionsUtil = this.functionsUtil;\n  }\n\n  async loadMenu() {\n    const extraicons = this.functionsUtil.getGlobalConfig(['extraicons']);\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard', 'baseRoute']);\n\n    const menu = [];\n    const currentNetwork = this.functionsUtil.getRequiredNetwork();\n\n    // Add Stake Polygon\n    const stakePolygonConfig = this.functionsUtil.getGlobalConfig(['tools', 'stakePolygon']);\n    if (stakePolygonConfig.enabled && (!stakePolygonConfig.availableNetworks || stakePolygonConfig.availableNetworks.includes(currentNetwork.id))) {\n      menu.push(\n        {\n          submenu: [],\n          label: 'Stake',\n          selected: false,\n          color: 'dark-gray',\n          route: '/dashboard/stake',\n          image: extraicons['stake'].icon,\n          imageDark: extraicons['stake'].iconDark,\n          bgColor: this.props.theme.colors.primary,\n          imageInactive: extraicons['stake'].iconInactive,\n          imageInactiveDark: extraicons['stake'].iconInactiveDark,\n          component: Utils,\n          componentProps: {\n            showBreadCrumb: false,\n            toolProps: stakePolygonConfig.props,\n            selectedSubsection: stakePolygonConfig\n          },\n        }\n      );\n    }\n\n    const strategies = this.functionsUtil.getGlobalConfig(['strategies']);\n    Object.keys(strategies).filter(s => (!strategies[s].comingSoon && (!strategies[s].availableNetworks || strategies[s].availableNetworks.includes(currentNetwork.id)) && (!strategies[s].enabledEnvs.length || strategies[s].enabledEnvs.includes(this.props.currentEnv)))).forEach(strategy => {\n      const strategyInfo = strategies[strategy];\n      const imageInfo = extraicons[strategy];\n      menu.push({\n        submenu: [],\n        color: '#fff',\n        selected: false,\n        image: imageInfo.icon,\n        label: strategyInfo.title,\n        bgColor: strategyInfo.color,\n        route: baseRoute + '/' + strategy,\n        visible: strategyInfo.visible,\n        imageDark: imageInfo.iconDark,\n        component: strategyInfo.component,\n        imageInactive: imageInfo.iconInactive,\n        imageInactiveDark: imageInfo.iconInactiveDark\n      });\n    });\n\n\n    const curveConfig = this.functionsUtil.getGlobalConfig(['curve']);\n\n    // Add Curve\n    if (curveConfig.enabled) {\n      const curveParams = Object.assign({\n        submenu: [],\n        selected: false,\n        component: CurveStrategy,\n      }, curveConfig.params);\n\n      menu.push(curveParams);\n    }\n\n    // Add Stake\n    const stakeConfig = this.functionsUtil.getGlobalConfig(['tools', 'stake']);\n    if (stakeConfig.enabled && (!stakeConfig.availableNetworks || stakeConfig.availableNetworks.includes(currentNetwork.id))) {\n      menu.push(\n        {\n          submenu: [],\n          label: 'Stake',\n          selected: false,\n          color: 'dark-gray',\n          route: '/dashboard/stake',\n          image: extraicons['stake'].icon,\n          imageDark: extraicons['stake'].iconDark,\n          bgColor: this.props.theme.colors.primary,\n          imageInactive: extraicons['stake'].iconInactive,\n          imageInactiveDark: extraicons['stake'].iconInactiveDark,\n          component: Utils,\n          componentProps: {\n            showBreadCrumb: false,\n            toolProps: stakeConfig.props,\n            selectedSubsection: stakeConfig\n          },\n        }\n      );\n    }\n\n    const statsInfo = this.functionsUtil.getGlobalConfig(['stats']);\n    if (!statsInfo.availableNetworks || statsInfo.availableNetworks.includes(currentNetwork.id)) {\n      menu.push(\n        {\n          submenu: [],\n          label: 'Stats',\n          selected: false,\n          component: Stats,\n          bgColor: '#21f36b',\n          color: 'dark-gray',\n          route: '/dashboard/stats',\n          image: extraicons['stats'].icon,\n          imageDark: extraicons['stats'].iconDark,\n          imageInactive: extraicons['stats'].iconInactive,\n          imageInactiveDark: extraicons['stats'].iconInactiveDark,\n        }\n      );\n    }\n\n    // Add tools\n    menu.push(\n      {\n        label: 'Tools',\n        selected: false,\n        component: Utils,\n        color: 'dark-gray',\n        route: '/dashboard/tools',\n        image: extraicons['tools'].icon,\n        imageDark: extraicons['tools'].iconDark,\n        bgColor: this.props.theme.colors.primary,\n        imageInactive: extraicons['tools'].iconInactive,\n        imageInactiveDark: extraicons['tools'].iconInactiveDark,\n        submenu: Object.values(this.functionsUtil.getGlobalConfig(['tools'])).filter(tool => (tool.enabled && (!tool.availableNetworks || tool.availableNetworks.includes(currentNetwork.id))))\n      }\n    );\n\n    // Add Forum\n    menu.push(\n      {\n        submenu: [],\n        mobile: false,\n        label: 'Forum',\n        selected: false,\n        component: null,\n        color: 'dark-gray',\n        bgColor: '#ff0000',\n        isExternalLink: true,\n        image: extraicons['forum'].icon,\n        imageDark: extraicons['forum'].iconDark,\n        imageInactive: extraicons['forum'].iconInactive,\n        imageInactiveDark: extraicons['forum'].iconInactiveDark,\n        route: this.functionsUtil.getGlobalConfig(['forumURL'])\n      }\n    );\n\n    await this.setState({\n      menu,\n      currentNetwork\n    });\n  }\n\n  resetModal = () => {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  openTooltipModal = (modalTitle, modalContent) => {\n\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: modalTitle,\n      eventLabel: 'TooltipModal'\n    });\n\n    this.setState({\n      modalTitle,\n      modalContent\n    }, () => {\n      this.setActiveModal('tooltip');\n    })\n  }\n\n  setActiveModal = (activeModal) => {\n    this.setState({\n      activeModal\n    });\n  }\n\n  async loadParams() {\n\n    if (!this.props.networkInitialized) {\n      return;\n    }\n\n    const { match: { params } } = this.props;\n\n    const baseRoute = this.functionsUtil.getGlobalConfig(['dashboard', 'baseRoute']);\n    let currentRoute = baseRoute;\n\n    let pageComponent = null;\n    let selectedToken = null;\n    let currentSection = null;\n    let selectedStrategy = null;\n    let pageComponentProps = null;\n\n    // Set strategy\n    if (params.section) {\n      currentSection = params.section;\n      const param1 = params.param1;\n      const param2 = params.param2;\n\n      const section_is_strategy = Object.keys(this.props.availableStrategies).includes(currentSection.toLowerCase());\n      const param1_is_strategy = param1 && Object.keys(this.props.availableStrategies).includes(param1.toLowerCase());\n\n      if (section_is_strategy || param1_is_strategy) {\n\n        if (!section_is_strategy) {\n          currentRoute += '/' + currentSection;\n        }\n\n        selectedStrategy = section_is_strategy ? currentSection : param1;\n        currentRoute += '/' + selectedStrategy;\n\n        // Set token\n        const param1_is_token = param1 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param1.toUpperCase());\n        const param2_is_token = param2 && Object.keys(this.props.availableStrategies[selectedStrategy]).includes(param2.toUpperCase());\n        if (param1_is_token || param2_is_token) {\n          selectedToken = param1_is_token ? param1.toUpperCase() : param2.toUpperCase();\n          currentRoute += '/' + selectedToken;\n\n          if (section_is_strategy) {\n            pageComponent = AssetPage;\n          }\n        }\n      } else {\n        currentRoute += '/' + params.section;\n\n        if (params.param1 && params.param1.length) {\n          currentRoute += '/' + params.param1;\n        }\n\n        // if (params.param2 && params.param2.length){\n        //   currentRoute += '/'+params.param2;\n        // }\n      }\n    }\n\n    const menu = this.state.menu;\n\n    let selectedSection = null;\n    let selectedSubsection = null;\n\n    menu.forEach(m => {\n      m.selected = false;\n      const sectionRoute = baseRoute + '/' + params.section;\n      if (currentRoute.toLowerCase() === m.route.toLowerCase() || (!m.submenu.length && m.route.toLowerCase() === sectionRoute.toLowerCase())) {\n        m.selected = true;\n        if (pageComponent === null) {\n          pageComponent = m.component;\n          pageComponentProps = m.componentProps;\n        }\n      } else if (m.submenu.length) {\n        m.submenu.forEach(subm => {\n          subm.selected = false;\n          const submRoute = m.route + '/' + subm.route;\n          if (submRoute.toLowerCase() === currentRoute.toLowerCase()) {\n            m.selected = true;\n            subm.selected = true;\n\n            // Set component, if null use parent\n            if (pageComponent === null) {\n              if (subm.component) {\n                pageComponent = subm.component;\n                pageComponentProps = m.componentProps;\n              } else {\n                pageComponent = m.component;\n                pageComponentProps = m.componentProps;\n              }\n            }\n          }\n\n          // Set selected subsection\n          if (subm.selected) {\n            selectedSubsection = subm;\n          }\n\n        });\n      }\n\n      // Set selected section\n      if (m.selected) {\n        selectedSection = m;\n      }\n    });\n\n    // console.log('pageComponent',params,pageComponent);\n\n    // Exit if no strategy and token selected\n    if (!pageComponent){\n      return this.goToSection('',false);\n    }\n\n    // console.log('loadParams',selectedStrategy,selectedToken);\n    await this.props.setStrategyToken(selectedStrategy, selectedToken);\n\n    // Send GA pageview\n    this.functionsUtil.sendGoogleAnalyticsPageview(currentRoute);\n\n    const newState = {\n      menu,\n      params,\n      baseRoute,\n      currentRoute,\n      pageComponent,\n      currentSection,\n      selectedSection,\n      pageComponentProps,\n      selectedSubsection\n    };\n\n    await this.setState(newState);\n\n    return newState;\n  }\n\n  componentWillUnmount() {\n    if (this.timeoutId) {\n      window.clearTimeout(this.timeoutId);\n    }\n  }\n\n  async componentWillMount() {\n\n    this.props.setCurrentSection('dashboard');\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n  }\n\n  async componentDidMount() {\n\n    this.timeoutId = window.setTimeout(() => {\n      if (!this.props.accountInizialized || !this.props.contractsInitialized) {\n        this.setState({\n          showResetButton: true\n        });\n      }\n    }, 60000);\n\n    if (!this.props.web3) {\n      return this.props.initWeb3();\n    } else if (!this.props.accountInizialized) {\n      return this.props.initAccount();\n    } else if (!this.props.contractsInitialized) {\n      return this.props.initializeContracts();\n    }\n\n    this.loadUtils();\n    await this.loadMenu();\n    this.loadParams();\n\n    const viewOnly = this.props.connectorName === 'custom';\n    if (!viewOnly) {\n      this.checkModals();\n    }\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n\n    this.loadUtils();\n\n    const prevParams = prevProps.match.params;\n    const params = this.props.match.params;\n\n    const isMobileChanged = prevProps.isMobile !== this.props.isMobile;\n    if (isMobileChanged) {\n      this.setState({\n        menuOpened: false\n      });\n    }\n\n    if (JSON.stringify(prevParams) !== JSON.stringify(params)) {\n      await this.setState({\n        pageComponent: null\n      }, () => {\n        this.loadParams();\n      });\n    }\n\n    const requiredNetworkChanged = JSON.stringify(prevProps.network.required) !== JSON.stringify(this.props.network.required);\n    const networkChanged = (!prevProps.networkInitialized && this.props.networkInitialized) || requiredNetworkChanged;\n    if (networkChanged) {\n      await this.loadMenu();\n      this.loadParams();\n    }\n\n    const viewOnly = this.props.connectorName === 'custom';\n    const accountChanged = prevProps.account !== this.props.account;\n    const strategyChanged = this.props.selectedStrategy && prevProps.selectedStrategy !== this.props.selectedStrategy;\n    const availableTokensChanged = JSON.stringify(prevProps.availableTokens) !== JSON.stringify(this.props.availableTokens);\n    const accountInizialized = this.props.accountInizialized && prevProps.accountInizialized !== this.props.accountInizialized;\n    const contractsInitialized = this.props.contractsInitialized && prevProps.contractsInitialized !== this.props.contractsInitialized;\n\n    if (!viewOnly && (networkChanged || accountChanged || accountInizialized || contractsInitialized || strategyChanged || availableTokensChanged)) {\n      this.checkModals();\n    }\n  }\n\n  async checkModals() {\n\n    if (this.props.selectedToken || !this.props.accountInizialized || !this.props.contractsInitialized || !this.props.availableStrategies || !this.props.availableTokens) {\n      return null;\n    }\n\n    await this.checkRiskAdjusted();\n    await this.checkPolygonModal();\n    await this.checkBetaApproval();\n    await this.checkTokensToMigrate();\n    await this.checkWelcomeModal();\n    await this.checkProtocolsTokensBalances();\n  }\n\n  async checkRiskAdjusted() {\n    const isRiskAdjusted = this.props.selectedStrategy === 'risk';\n    if (isRiskAdjusted) {\n      const activeModal = 'risk';\n      if (activeModal !== this.state.activeModal) {\n        await this.setState({\n          activeModal\n        });\n        return activeModal;\n      }\n    }\n  }\n\n  async checkPolygonModal() {\n    const isPolygon = this.state.currentNetwork.provider === 'polygon';\n    const isPolygonApproved = this.functionsUtil.getStoredItem('polygonApproved', false, false);\n\n    // console.log('checkPolygonModal',this.state.currentNetwork,isPolygon);\n\n    // Show Beta Warning modal\n    if (isPolygon && !isPolygonApproved) {\n      const activeModal = 'polygon';\n      if (activeModal !== this.state.activeModal) {\n        await this.setState({\n          activeModal\n        });\n        return activeModal;\n      }\n    }\n  }\n\n  async checkBetaApproval() {\n    const isOriginUrl = this.functionsUtil.checkUrlOrigin();\n    const isPolygon = this.state.currentNetwork.provider === 'polygon';\n    const isBetaApproved = this.functionsUtil.getStoredItem('betaApproved', false, false);\n\n    // Show Beta Warning modal\n    if (!isOriginUrl && !isBetaApproved && !isPolygon && this.state.activeModal === null) {\n      const activeModal = 'beta';\n      if (activeModal !== this.state.activeModal) {\n        await this.setState({\n          activeModal\n        });\n        return activeModal;\n      }\n    }\n  }\n\n  async checkTokensToMigrate() {\n\n    const showUpgradeModal = this.functionsUtil.getStoredItem('dontShowUpgradeModal', false, null) !== null ? false : true;\n    if (this.props.selectedToken || !showUpgradeModal || !this.props.availableTokens || this.state.activeModal !== null) {\n      return null;\n    }\n\n    const tokensToMigrate = await this.functionsUtil.getTokensToMigrate();\n    const oldIdleTokensToMigrate = await this.functionsUtil.getProtocolsTokensBalances('idle');\n\n    // console.log('tokensToMigrate',tokensToMigrate);\n\n    if ((tokensToMigrate && Object.keys(tokensToMigrate).length > 0) || (oldIdleTokensToMigrate && Object.keys(oldIdleTokensToMigrate).length > 0)) {\n      const activeModal = 'upgrade';\n      if (activeModal !== this.state.activeModal) {\n        await this.setState({\n          activeModal,\n          tokensToMigrate,\n          oldIdleTokensToMigrate\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkWelcomeModal() {\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized) {\n      return null;\n    }\n\n    // Show welcome modal\n    if (this.props.account && this.state.activeModal === null) {\n      let welcomeIsOpen = false;\n\n      const welcomeModalProps = this.functionsUtil.getGlobalConfig(['modals', 'welcome']);\n\n      if (welcomeModalProps.enabled && localStorage) {\n\n        // Check the last login of the wallet\n        const currTime = new Date().getTime();\n        const walletAddress = this.props.account.toLowerCase();\n        let lastLogin = localStorage.getItem('lastLogin') ? JSON.parse(localStorage.getItem('lastLogin')) : {};\n\n        // First login\n        if (!lastLogin[walletAddress]) {\n          lastLogin[walletAddress] = {\n            'signedUp': false,\n            'lastTime': currTime\n          };\n          welcomeIsOpen = true;\n          // User didn't sign up\n        } else if (!lastLogin[walletAddress].signedUp) {\n          const lastTime = parseInt(lastLogin[walletAddress].lastTime);\n          const timeFromLastLogin = (currTime - lastTime) / 1000;\n          welcomeIsOpen = timeFromLastLogin >= welcomeModalProps.frequency; // 1 day since last login\n        }\n\n        if (welcomeIsOpen) {\n          lastLogin[walletAddress].lastTime = currTime;\n          this.functionsUtil.setLocalStorage('lastLogin', JSON.stringify(lastLogin));\n        }\n      }\n\n      const activeModal = welcomeIsOpen ? 'welcome' : this.state.activeModal;\n      if (this.state.activeModal !== activeModal) {\n        await this.setState({\n          activeModal\n        });\n\n        return activeModal;\n      }\n    }\n\n    return null;\n  }\n\n  async checkProtocolsTokensBalances() {\n\n    if (!this.props.account || !this.props.accountInizialized || !this.props.contractsInitialized) {\n      return null;\n    }\n\n    // Show migration modal if no other modals are opened\n    const migrateModalConfig = this.functionsUtil.getGlobalConfig(['modals', 'migrate']);\n    const migrateModalEnabled = migrateModalConfig.enabled && migrateModalConfig.availableNetworks.includes(this.state.currentNetwork.id);\n\n    const showMigrateModal = this.functionsUtil.getStoredItem('dontShowMigrateModal', false, null) !== null ? false : true;\n\n    if (this.state.activeModal === null && migrateModalEnabled && showMigrateModal && !this.state.protocolsTokensBalances) {\n      const protocolsTokensBalances = await this.functionsUtil.getProtocolsTokensBalances();\n      const activeModal = protocolsTokensBalances && Object.keys(protocolsTokensBalances).length > 0 ? 'migrate' : null;\n      const newState = {\n        activeModal,\n        protocolsTokensBalances\n      };\n      await this.setState(newState);\n      return activeModal;\n    }\n\n    return null;\n  }\n\n  goToSection(section, isDashboard = true) {\n\n    // Remove dashboard route\n    if (isDashboard) {\n      section = section.replace(this.state.baseRoute + '/', '');\n    }\n\n    const newRoute = isDashboard ? this.state.baseRoute + '/' + section : section;\n    window.location.hash = newRoute;\n\n    // Send GA event\n    this.functionsUtil.sendGoogleAnalyticsEvent({\n      eventCategory: 'UI',\n      eventAction: 'goToSection',\n      eventLabel: newRoute\n    });\n\n    window.scrollTo(0, 0);\n  }\n\n  logout = async () => {\n    this.props.setConnector('Infura', 'Infura');\n    await this.props.initWeb3('Infura');\n  }\n\n  changeToken(selectedToken) {\n    selectedToken = selectedToken.toUpperCase();\n    if (Object.keys(this.props.availableTokens).includes(selectedToken)) {\n      const routeParts = [];\n\n      // Add section\n      if (this.state.currentSection.toLowerCase() !== this.props.selectedStrategy.toLowerCase()) {\n        routeParts.push(this.state.currentSection);\n      }\n\n      // Add strategy\n      routeParts.push(this.props.selectedStrategy);\n\n      // Add token\n      routeParts.push(selectedToken);\n\n      this.goToSection(routeParts.join('/'));\n    }\n  }\n\n  propagateClickEvent(clickEvent) {\n    this.setState({\n      clickEvent: clickEvent.target\n    });\n  }\n\n  setMenu(menuOpened) {\n    this.setState({\n      menuOpened\n    });\n  }\n\n  toggleMenu() {\n    const menuOpened = !this.state.menuOpened;\n    this.setMenu(menuOpened);\n  }\n\n  swipeCallback(eventData) {\n    // console.log('swipeCallback',eventData);\n    if (eventData.dir === 'Right') {\n      this.setMenu(true);\n    } else if (eventData.dir === 'Left') {\n      this.setMenu(false);\n    }\n  }\n\n  render() {\n\n    const networkCorrect = this.props.network.isCorrectNetwork;\n    const networkSupported = this.props.network.isSupportedNetwork;\n    const PageComponent = this.state.pageComponent ? this.state.pageComponent : null;\n    const networkInitialized = this.props.networkInitialized && this.props.network.current.id && this.props.network.required.id;\n\n    if (!this.props.availableStrategies){\n      return (\n        <Flex\n          width={1}\n          minHeight={'100vh'}\n          alignItems={'center'}\n          flexDirection={'column'}\n          justifyContent={'center'}\n          backgroundColor={'selectBg'}\n        >\n          <FlexLoader\n            textProps={{\n              textSize: 4,\n              fontWeight: 2\n            }}\n            loaderProps={{\n              mb: 3,\n              size: '80px',\n              color: 'primary'\n            }}\n            flexProps={{\n              my: 3,\n              flexDirection: 'column'\n            }}\n            text={''}\n          />\n        </Flex>\n      );\n    }\n\n    // console.log('networkInitialized',this.props.networkInitialized,networkInitialized);\n\n    return (\n      <Swipeable\n        callback={this.swipeCallback.bind(this)}\n      >\n        <Flex\n          height={'100vh'}\n          position={'fixed'}\n          flexDirection={'row'}\n          backgroundColor={'dashboardBg'}\n          className={this.props.themeMode}\n          width={this.props.isMobile && this.state.menuOpened ? '180vw' : '100vw'}\n        >\n          {\n            (!this.props.isMobile || this.state.menuOpened) && (\n              <Flex\n                bottom={0}\n                zIndex={99999}\n                position={'relative'}\n                width={['80vw', 1 / 6]}\n                flexDirection={'column'}\n              >\n                <Card\n                  p={0}\n                  border={0}\n                  boxShadow={0}\n                  width={'auto'}\n                  height={'100vh'}\n                  backgroundColor={'menuBg'}\n                  borderColor={this.props.theme.colors.menuRightBorder}\n                  borderRight={`1px solid ${this.props.theme.colors.menuRightBorder}`}\n                >\n                  <DashboardMenu\n                    {...this.props}\n                    menu={this.state.menu}\n                    closeMenu={e => this.setMenu(false)}\n                    goToSection={this.goToSection.bind(this)}\n                  />\n                </Card>\n              </Flex>\n            )\n          }\n          <Flex\n            minHeight={'70vh'}\n            width={['100vw', 5 / 6]}\n            flexDirection={\"column\"}\n          >\n            <DashboardHeader\n              menuOpened={this.state.menuOpened}\n              clickEvent={this.state.clickEvent}\n              toggleMenu={this.toggleMenu.bind(this)}\n              goToSection={this.goToSection.bind(this)}\n              {...this.props}\n            />\n            <Flex\n              py={3}\n              mb={0}\n              width={1}\n              px={[3, 5]}\n              alignItems={\"center\"}\n              style={{\n                overflowY: 'scroll',\n                overflowX: 'hidden'\n              }}\n              justifyItems={\"center\"}\n              flexDirection={'column'}\n              height={['100vh', '100%']}\n              backgroundColor={'dashboardBg'}\n            >\n              {\n                this.props.isDashboard && (\n                  <FlashNews\n                    {...this.props}\n                  />\n                )\n              }\n              {\n                !networkInitialized || !this.props.accountInizialized || !this.props.contractsInitialized || !PageComponent || !networkCorrect || !networkSupported ? (\n                  <Flex\n                    width={1}\n                    minHeight={'50vh'}\n                    alignItems={'center'}\n                    flexDirection={'column'}\n                    justifyContent={'center'}\n                  >\n                    {\n                      networkInitialized && !networkCorrect ? (\n                        <DashboardCard\n                          cardProps={{\n                            p: 3,\n                            mt: 3,\n                            width: [1, 0.35]\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                          >\n                            <Icon\n                              size={'2.3em'}\n                              name={'Warning'}\n                              color={'cellText'}\n                            />\n                            <Text\n                              mt={2}\n                              fontSize={2}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              You should be on the <strong>{this.functionsUtil.capitalize(this.props.network.required.name)} network</strong>. You are currently connected to the <strong>{this.functionsUtil.capitalize(this.props.network.current.name)} network</strong>, please switch to the correct network.\n                            </Text>\n                            <RoundButton\n                              buttonProps={{\n                                mt:3,\n                                width:[1,1/2]\n                              }}\n                              handleClick={e => this.functionsUtil.addEthereumChain(this.props.network.required.id)}\n                            >\n                              Switch Network\n                            </RoundButton>\n                          </Flex>\n                        </DashboardCard>\n                      ) : networkInitialized && !networkSupported ? (\n                        <DashboardCard\n                          cardProps={{\n                            p:3,\n                            mt:3,\n                            width:[1,0.35]\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                          >\n                            <Icon\n                              size={'2.3em'}\n                              name={'Warning'}\n                              color={'cellText'}\n                            />\n                            <Text\n                              mt={2}\n                              fontSize={2}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              The <strong>{this.functionsUtil.capitalize(this.props.network.current.name)} Network</strong> is not supported, please switch to the correct network.\n                          </Text>\n                          </Flex>\n                        </DashboardCard>\n                      ) : !this.state.showResetButton ? (\n                        <FlexLoader\n                          textProps={{\n                            textSize: 4,\n                            fontWeight: 2\n                          }}\n                          loaderProps={{\n                            mb: 3,\n                            size: '40px'\n                          }}\n                          flexProps={{\n                            my: 3,\n                            flexDirection: 'column'\n                          }}\n                          text={!this.props.networkInitialized ? 'Loading network...' : (!this.props.accountInizialized ? 'Loading account...' : (!this.props.contractsInitialized ? 'Loading contracts...' : 'Loading assets...'))}\n                        />\n                      ) : (\n                        <DashboardCard\n                          cardProps={{\n                            p: 3,\n                            mt: 3,\n                            width: [1, 0.35]\n                          }}\n                        >\n                          <Flex\n                            alignItems={'center'}\n                            flexDirection={'column'}\n                          >\n                            <Icon\n                              size={'2.3em'}\n                              name={'Warning'}\n                              color={'cellText'}\n                            />\n                            <Text\n                              mt={2}\n                              fontSize={2}\n                              color={'cellText'}\n                              textAlign={'center'}\n                            >\n                              Idle can't connect to your wallet!<br />Make sure that your wallet is unlocked and try again.\n                            </Text>\n                            <RoundButton\n                              buttonProps={{\n                                mt: 3,\n                                width: [1, 1 / 2]\n                              }}\n                              handleClick={this.logout.bind(this)}\n                            >\n                              Logout\n                            </RoundButton>\n                          </Flex>\n                        </DashboardCard>\n                      )\n                    }\n                  </Flex>\n                ) : (\n                  <Flex\n                    width={1}\n                    flexDirection={'column'}\n                  >\n                    {\n                      PageComponent &&\n                      <PageComponent\n                        {...this.props}\n                        match={{ params: {} }}\n                        urlParams={this.state.params}\n                        changeToken={this.changeToken.bind(this)}\n                        goToSection={this.goToSection.bind(this)}\n                        selectedSection={this.state.selectedSection}\n                        selectedSubsection={this.state.selectedSubsection}\n                        openTooltipModal={this.openTooltipModal.bind(this)}\n                        {...this.state.pageComponentProps}\n                      />\n                    }\n                  </Flex>\n                )\n              }\n            </Flex>\n          </Flex>\n          {\n            this.state.currentNetwork &&\n            <PolygonModal\n              closeModal={this.resetModal}\n              goToSection={this.goToSection.bind(this)}\n              currentNetwork={this.state.currentNetwork}\n              isOpen={this.state.activeModal === 'polygon'}\n            />\n          }\n          <BetaModal\n            closeModal={this.resetModal}\n            isOpen={this.state.activeModal === 'beta'}\n          />\n          <RiskAdjustedModal\n            closeModal={this.resetModal}\n            isOpen={this.state.activeModal === 'risk'}\n          />\n          <UpgradeModal\n            {...this.props}\n            closeModal={this.resetModal}\n            goToSection={this.goToSection.bind(this)}\n            tokensToMigrate={this.state.tokensToMigrate}\n            isOpen={this.state.activeModal === 'upgrade'}\n            oldIdleTokensToMigrate={this.state.oldIdleTokensToMigrate}\n          />\n          <MigrateModal\n            {...this.props}\n            closeModal={this.resetModal}\n            goToSection={this.goToSection.bind(this)}\n            isOpen={this.state.activeModal === 'migrate'}\n            protocolsTokensBalances={this.state.protocolsTokensBalances}\n          />\n          <TooltipModal\n            closeModal={this.resetModal}\n            title={this.state.modalTitle}\n            content={this.state.modalContent}\n            isOpen={this.state.activeModal === 'tooltip'}\n          />\n          <WelcomeModal\n            closeModal={this.resetModal}\n            account={this.props.account}\n            simpleID={this.props.simpleID}\n            network={this.props.network.current}\n            tokenName={this.props.selectedToken}\n            initSimpleID={this.props.initSimpleID}\n            baseTokenName={this.props.selectedToken}\n            isOpen={this.state.activeModal === 'welcome'}\n          />\n        </Flex>\n      </Swipeable>\n    );\n  }\n}\n\nexport default Dashboard;"],"sourceRoot":""}